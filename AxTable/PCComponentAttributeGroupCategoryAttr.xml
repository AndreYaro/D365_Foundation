<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCComponentAttributeGroupCategoryAttr</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCComponentAttributeGroupCategoryAttr extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        _visitor.visitStart(this);
        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateExtended</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Duplicates the record.
    /// </summary>
    /// <param name="_duplicatedComponentAttributeGroup">
    ///    A reference to a <c>PCComponentAttributeGroup</c> record to duplicate.
    /// </param>
    /// <param name="_duplicatedComponent">
    /// A reference to the <c>PCComponent</c> record which shall own the attributes after duplication.
    /// </param>
    public void duplicateExtended(RefRecId _duplicatedComponentAttributeGroup, RefRecId _duplicatedComponent)
    {
        PCComponentAttributeGroupCategoryAttr   duplicate;

        duplicate.data(this);

        duplicate.ComponentAttributeGroup   = _duplicatedComponentAttributeGroup;
        duplicate.CategoryAttribute         = EcoResCategoryAttribute::pcFindDuplicateExtended(this.CategoryAttribute, _duplicatedComponent).RecId;

        // do insert to by-pass the logic in the insert method
        duplicate.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the table.
    /// </summary>
    /// <remarks>
    /// Ensure that the user interface order ID is given a correct number.
    /// </remarks>
    public void insert()
    {
        PCComponentAttributeGroupCategoryAttr record;

        if (!this.uiOrder)
        {
            this.uiOrder = PCComponentAttributeGroupCategoryAttr::nextUIOrderValue(this.ComponentAttributeGroup);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxUIOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the max UI order value of the group.
    /// </summary>
    /// <param name="_componentAttributeGroup">
    ///    A record ID of a <c>PCComponentAttributeGroup</c>.
    /// </param>
    /// <returns>The max UI order value of the group.</returns>
    private static int maxUIOrder(RefRecId _componentAttributeGroup)
    {
        PCComponentAttributeGroupCategoryAttr record;

        select maxof(uiOrder) from record
                where   record.ComponentAttributeGroup == _componentAttributeGroup;

        return record.uiOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextUIOrderValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next UI order value.
    /// </summary>
    /// <param name="_componentAttributeGroup">
    ///    A record ID of a <c>PCComponentAttributeGroup</c>.
    /// </param>
    /// <returns>The next UI order value.</returns>
    internal static int nextUIOrderValue(RefRecId _componentAttributeGroup)
    {
        return PCComponentAttributeGroupCategoryAttr::maxUIOrder(_componentAttributeGroup) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUIOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the display order of the element up or down.
    /// </summary>
    /// <param name="_up">
    ///    A <c>NoYes</c> value that indicates whether to move the element up.
    /// </param>
    public void moveUIOrder(NoYes _up)
    {
        PCComponentAttributeGroupCategoryAttr record;
        PCComponentAttributeGroupCategoryAttr recordToBeUpdated;
        Integer                   uiOrder;

        recordToBeUpdated.data(this);

        if (_up == NoYes::Yes)
        {
            // find the UI order number just before the current record
            select maxof(uiOrder) from record
                where   record.ComponentAttributeGroup  == this.ComponentAttributeGroup &&
                        record.uiOrder                  < recordToBeUpdated.uiOrder;
        }
        else
        {
            // find the UI order number just after the current record
            select minof(uiOrder) from record
                where   record.ComponentAttributeGroup  == this.ComponentAttributeGroup &&
                        record.uiOrder                  > recordToBeUpdated.uiOrder;
        }

        if (record.uiOrder == 0)
        {
            // this is the first UI order
            return;
        }

        uiOrder = record.uiOrder;

        ttsbegin;

        select forupdate firstonly record
                where   record.ComponentAttributeGroup  == recordToBeUpdated.ComponentAttributeGroup &&
                        record.uiOrder                  == uiOrder;

        // need to update to temporary value to avoid index violation
        record.uiOrder = -1;
        record.update();

        recordToBeUpdated = PCComponentAttributeGroupCategoryAttr::find(this.RecId, true);
        recordToBeUpdated.uiOrder = uiOrder;
        recordToBeUpdated.update();

        record.uiOrder = (_up == NoYes::Yes) ? recordToBeUpdated.uiOrder + 1 : recordToBeUpdated.uiOrder - 1;
        record.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PCComponentAttributeGroupCategoryAttr</c> table
    ///    exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCComponentAttributeGroupCategoryAttr::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCComponentAttributeGroupCategoryAttr</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCComponentAttributeGroupCategoryAttr</c> table; otherwise, an empty record.
    /// </returns>
    public static PCComponentAttributeGroupCategoryAttr find(RefRecId _recId, boolean _forupdate = false)
    {
        PCComponentAttributeGroupCategoryAttr record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByComponentControlAndCategoryAttr</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCComponentAttributeGroupCategoryAttr</c> table.
    /// </summary>
    /// <param name="_componentControl">
    ///    The record ID of the associated <c>PCComponentControl</c> record.
    /// </param>
    /// <param name="_categoryAttribute">
    ///    The record ID of the associated <c>EcoResCategory</c> record.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCComponentAttributeGroupCategoryAttr</c> table; otherwise, an empty record.
    /// </returns>
    public static PCComponentAttributeGroupCategoryAttr findByComponentControlAndCategoryAttr(
        RefRecId _componentControl,
        RefRecId _categoryAttribute,
        boolean  _forupdate = false)
    {
        PCComponentAttributeGroup               attributeGroup;
        PCComponentAttributeGroupCategoryAttr   record;

        record.selectForUpdate(_forupdate);
        select firstonly record
            join    RecId from attributeGroup
            where   attributeGroup.RecId            == record.ComponentAttributeGroup &&
                    record.CategoryAttribute        == _categoryAttribute       &&
                    attributeGroup.ComponentControl == _componentControl;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByConfigurationControlAndCategoryAtt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCComponentAttributeGroupCategoryAttr</c> table.
    /// </summary>
    /// <param name="_configurationControl">
    ///    A reference to a configuration control.
    /// </param>
    /// <param name="_categoryAttribute">
    ///    A reference to a category attribute.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCComponentAttributeGroupCategoryAttr</c> table; otherwise, an empty record.
    /// </returns>
    public static PCComponentAttributeGroupCategoryAttr findByConfigurationControlAndCategoryAtt(
        RefRecId    _configurationControl,
        RefRecId    _categoryAttribute,
        boolean     _forupdate = false)
    {
        PCComponentAttributeGroupCategoryAttr   record;
        PCComponentControl                      componentControl;
        PCComponentAttributeGroup               attributeGroup;

        record.selectForUpdate(_forupdate);

        select firstonly record
            where record.CategoryAttribute == _categoryAttribute
            join RecId from attributeGroup
                where attributeGroup.RecId == record.ComponentAttributeGroup
                join RecId from componentControl
                    where   componentControl.RecId                  == attributeGroup.ComponentControl &&
                            componentControl.ConfigurationControl   == _configurationControl;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS325884</DeveloperDocumentation>
	<Label>@SYS190609</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>UIOrder</TitleField1>
	<TitleField2>RecId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>AlternateKeyIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UIOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ComponentAttributeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryAttribute</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UIOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ComponentAttributeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryAttribute</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ComponentAttributeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UIOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CategoryAttribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS77030</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ComponentAttributeGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS310579</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>UIOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PC</ConfigurationKey>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@SYS69861</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AlternateKeyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ConfigurationKey>PC</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>UIOrder</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ComponentAttributeGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryAttribute</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CategoryAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EcoResCategoryAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>AttributeContainedIn</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UIGroupingContainedIn</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryAttribute</Name>
					<Field>CategoryAttribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ComponontAttributeGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PCComponentAttributeGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>AttributeGroupContainer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AttributeUIDefinition</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ComponentAttributeGroup</Name>
					<Field>ComponentAttributeGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>