<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMixedLicensePlateReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSMixedLicensePlateReceipt extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.ReceiptStatus = WHSMixedLicensePlateReceiptStatus::BuildingLP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(WHSReceiptId _receiptId)
    {
        return _receiptId
        && (select firstOnly RecId from whsMixedLicensePlateReceipt
                where whsMixedLicensePlateReceipt.ReceiptId == _receiptId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        WHSMixedLicensePlateReceipt::throwErrorIfOpenMixedLPExists(this.LicensePlateId);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WHSMixedLicensePlateReceipt find(
        WHSReceiptId    _receiptId,
        boolean         _forUpdate = false)
    {
        WHSMixedLicensePlateReceipt mixedLP;

        if (_receiptId)
        {
            mixedLP.selectForUpdate(_forUpdate);

            select firstOnly mixedLP
                where mixedLP.ReceiptId == _receiptId;
        }

        return mixedLP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    public static WHSMixedLicensePlateReceipt findByRecId(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        WHSMixedLicensePlateReceipt    mixedLP;

        if (_recId)
        {
            mixedLP.selectForUpdate(_forUpdate);

            select firstOnly mixedLP
                where mixedLP.RecId == _recId;
        }

        return mixedLP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenByLicensePlateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns an open record for the license plate.
    /// </summary>
    /// <param name="_lpId">
    /// The license plate to be used.
    /// </param>
    /// <param name="_forUpdate">
    /// Boolean to determine if the record should be allowed to be updated.
    /// </param>
    /// <returns>
    /// An open record from WHSMixedLPReceivingTable for the specified license plate.
    /// </returns>
    public static WHSMixedLicensePlateReceipt findOpenByLicensePlateId(
        WHSLicensePlateId   _lpId,
        boolean             _forUpdate = false)
    {
        WHSMixedLicensePlateReceipt mixedLP;

        if (_lpId)
        {
            mixedLP.selectForUpdate(_forUpdate);

            select firstOnly mixedLP
                where mixedLP.LicensePlateId  == _lpId
                &&    mixedLP.MixedLPComplete == NoYes::No;
        }

        return mixedLP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstLicensePlateIdWithReceiptPlannedLine</Name>
				<Source><![CDATA[
    internal static WHSLicensePlateId findFirstLicensePlateIdWithReceiptPlannedLine()
    {
        WHSMixedLicensePlateReceipt mixedLicensePlateReceipt;
        WHSMixedLicensePlateReceiptLine mixedLicensePlateReceiptLine;
        WHSMixedLicensePlateReceiptPlannedLine mixedLicensePlateReceiptPlannedLine;

        select firstonly LicensePlateId from mixedLicensePlateReceipt
            exists join mixedLicensePlateReceiptLine
                where mixedLicensePlateReceiptLine.MixedLPReceivingTable == mixedLicensePlateReceipt.RecId
            exists join mixedLicensePlateReceiptPlannedLine
                where mixedLicensePlateReceiptPlannedLine.MixedLicensePlateReceiptLineRecId == mixedLicensePlateReceiptLine.RecId;

        return mixedLicensePlateReceipt.LicensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceiptIdForOpenLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the receipt Id for an open license plate.
    /// </summary>
    /// <param name="_lpId">
    /// The license plate to search for open records.
    /// </param>
    /// <returns>
    /// The receiptId that should be used for an open license plate.
    /// </returns>
    public static WHSReceiptId getReceiptIdForOpenLP(WHSLicensePlateId  _lpId)
    {
        return WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(_lpId).ReceiptId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalQtyOnLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the total quantity on an open mixed license plate.
    /// </summary>
    /// <param name="_lpId">
    /// The license plate Id for the open mixed license plate.
    /// </param>
    /// <returns>
    /// The total inventQty that is on the open mixed license plate.
    /// </returns>
    public static InventQty getTotalQtyOnLicensePlate(WHSLicensePlateId _lpId)
    {
        WHSMixedLicensePlateReceipt     mixedLP;
        WHSMixedLicensePlateReceiptLine mixedLPLines;

        if (_lpId)
        {
            select sum(InventQty) from mixedLPLines
                exists join mixedLP
                    where mixedLP.RecId           == mixedLPLines.MixedLPReceivingTable
                    &&    mixedLP.LicensePlateId  == _lpId
                    &&    mixedLP.MixedLPComplete == NoYes::No;
        }

        return mixedLPLines.InventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserIdForOpenLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the user associated to an open license plate.
    /// </summary>
    /// <param name="_lpId">
    /// The license plate to be used.
    /// </param>
    /// <returns>
    /// The rf user currently associated to an open license plate.
    /// </returns>
    public static WHSUserId getUserIdForOpenLP(WHSLicensePlateId  _lpId)
    {
        return WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(_lpId).CurrentUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a license plate has open records.
    /// </summary>
    /// <param name="_lpId">
    /// The license plate to be used.
    /// </param>
    /// <returns>
    /// true if a license plate has open records, otherwise false.
    /// </returns>
    public static boolean hasOpenRecord(WHSLicensePlateId _lpId)
    {
        return _lpId
            && WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(_lpId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeUserFromOpenLPs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the user from all license plates that they are on.
    /// Used when canceling out in the RF, when license plate is not available.
    /// </summary>
    /// <param name="_userId">
    /// The rf user that is being removed.
    /// </param>
    public static void removeUserFromOpenLPs(WHSUserId _userId)
    {
        WHSMixedLicensePlateReceipt mixedLP;
        WHSMixedLicensePlateReceiptLine mixedLPLines;

        ttsBegin;

        delete_from mixedLP
            where mixedLP.CurrentUser     == _userId
            &&    mixedLP.MixedLPComplete == NoYes::No
            notExists join mixedLPLines
                where mixedLPLines.MixedLPReceivingTable == mixedLP.RecId;

        update_recordSet mixedLP
            setting CurrentUser = ''
                where mixedLP.CurrentUser     == _userId
                &&    mixedLP.MixedLPComplete == NoYes::No;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates open records for a license plate with a new user.
    /// </summary>
    /// <param name="_lpId">
    /// The license plate being updated.
    /// </param>
    /// <param name="_userId">
    /// The user that is now receiving on the license plate.
    /// </param>
    public static void updateUser(
        WHSLicensePlateId   _lpId,
        WHSUserId           _userId = '')
    {
        WHSMixedLicensePlateReceipt mixedLP;

        ttsBegin;

        update_recordSet mixedLP
            setting CurrentUser = _userId
                where mixedLP.LicensePlateId    == _lpId
                &&    mixedLP.MixedLPComplete   == NoYes::No;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwErrorIfMixedLPIsProcessing</Name>
				<Source><![CDATA[
    internal static void throwErrorIfMixedLPIsProcessing(RecId _recId)
    {
        var mixedLP = WHSMixedLicensePlateReceipt::findByRecId(_recId);
        if (mixedLP && mixedLP.ReceiptStatus == WHSMixedLicensePlateReceiptStatus::Processing)
        {
            throw error(strFmt("@WAX:MixedLPCannotBeModified", mixedLP.LicensePlateID));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwErrorIfOpenMixedLPExists</Name>
				<Source><![CDATA[
    private static void throwErrorIfOpenMixedLPExists(WHSLicensePlateId _lpId)
    {
        if (WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(_lpId).RecId != 0)
        {
            throw error(strFmt("@WAX:ActiveMixedLPAlreadyExists", _lpId));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:MixedLPHeaderDoc</DeveloperDocumentation>
	<Label>@WAX:MixedLicensePlateReceiving</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>LicensePlateId</TitleField1>
	<TitleField2>ReceiptId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Inventory</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrentUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastReceivedLineDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MenuItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MixedLPComplete</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCreateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainerTypeCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrentUser</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WHSUserId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastReceivedLineDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLastReceivedDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicensePlateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLicensePlateId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MenuItemName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMenuItemName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MixedLPComplete</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMixedLPComplete</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReceiptId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSReceiptId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipmentId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShipmentId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkCreateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkCreateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContainerTypeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSContainerTypeCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSWorkTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReceiptStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>WHSMixedLicensePlateReceiptStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>ReceivingProcessingId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSReceivingProcessingID</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SourceOrderStatus</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>WHSMixedLPSourceOrderStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DispositionCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDispositionCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReceiptIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ReceiptId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LicensePlateCompleteIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MixedLPComplete</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LicensePlateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventLocationIdWorkTransTypeLoadIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkTransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LoadId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CurrentUserMixedLPCompleteIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CurrentUser</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MixedLPComplete</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReceivingProcessingIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ReceivingProcessingId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<SourceEDT>InventSiteId</SourceEDT>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLicensePlate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLicensePlate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LicensePlateId</Name>
					<SourceEDT>WHSLicensePlateId</SourceEDT>
					<Field>LicensePlateId</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLoadTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadId</Name>
					<SourceEDT>WHSLoadId</SourceEDT>
					<Field>LoadId</Field>
					<RelatedField>LoadId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSRFMenuItemTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSRFMenuItemTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MenuItemName</Name>
					<SourceEDT>WHSMenuItemName</SourceEDT>
					<Field>MenuItemName</Field>
					<RelatedField>MenuItemName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSShipmentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSShipmentTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipmentId</Name>
					<SourceEDT>WHSShipmentId</SourceEDT>
					<Field>ShipmentId</Field>
					<RelatedField>ShipmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkUser</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSWorkUser</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrentUSer</Name>
					<SourceEDT>WHSUserId</SourceEDT>
					<Field>CurrentUSer</Field>
					<RelatedField>UserId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSLocation</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationId</Name>
					<Field>WMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSContainerType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSContainerType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContainerTypeCode</Name>
					<SourceEDT>WHSContainerTypeCode</SourceEDT>
					<Field>ContainerTypeCode</Field>
					<RelatedField>ContainerTypeCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>