<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmBudgetPurposeTypeDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HcmBudgetPurposeTypeDetail extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.IsPercentageBased = false;
        this.EffectiveDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        this.ExpirationDate = dateMax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPositionOverrideAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>HcmBudgetPurposeTypeDetail</c> table associated record allows overriding the purpose on the forecast position.
    /// </summary>
    /// <returns>
    ///  true if the <c>HcmBudgetPurposeTypeDetail</c> table associated record allows overriding the purpose; otherwise, false
    /// </returns>

    public boolean isPositionOverrideAllowed()
    {
        return HcmBudgetPurposeType::isPositionOverrideAllowed(this.BudgetPurposeType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>Percent</c>, <c>Amount</c>, and <c>isPercentageBased</c> fields of the
    /// <c>HcmBudgetPurposeTypeDetail</c> table .
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field that is modified.
    /// </param>
    /// <remarks>
    /// Sets the <c>Percent</c> field to zero and the <c>isPercentageBased</c> field to false if the
    /// modified field is the <c>Amount</c> field .or the <c>Amount</c> field to zero and the
    /// <c>isPercentageBased</c> field to true if the modified field is the <c>Percent</c> field .
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(HcmBudgetPurposeTypeDetail, LegalEntity):
                this.LedgerDimension = 0;
                break;

            case fieldNum(HcmBudgetPurposeTypeDetail, Amount):
                this.Percent = 0;
                this.IsPercentageBased = false;
                break;

            case fieldNum(HcmBudgetPurposeTypeDetail, Percent):
                this.Amount = 0;
                this.IsPercentageBased = true;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid;

        isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(HcmBudgetPurposeTypeDetail, Amount):
                    if (this.Amount && HcmBudgetPurposeEarningBasis::isBudgetPurposeAnEarningBasis(this.BudgetPurposeType))
                    {
                        error("@SYS4005364");
                        isValid = false;
                    }
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;

        isValid = super();

        if (isValid
            && this.EffectiveDate > this.ExpirationDate)
        {
            isValid = checkFailed("@SYS4005409");
        }

        if (isValid && HcmBudgetPurposeTypeDetail::existOverLappingBudgetElementLegalEntity(this.EffectiveDate, this.ExpirationDate, this.LegalEntity, this.BudgetPurposeType, this.RecId))
        {
            isValid = checkFailed(strFmt("@SYS4005412", HcmBudgetPurposeType::getPurposebyRecId(this.BudgetPurposeType)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>HcmBudgetPurposeTypeDetail</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(HcmBudgetPurposeTypeDetailRecId _recId)
    {
        boolean ret = true;

        if (!HcmBudgetPurposeTypeDetail::exist(_recId))
        {
            ret = checkFailed(strFmt(HcmBudgetPurposeTypeDetail::txtNotExist(), tableStr(HcmBudgetPurposeTypeDetail)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record ID exists in the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false .
    /// </returns>
    public static boolean exist(HcmBudgetPurposeTypeDetailRecId _recId)
    {
        return _recId && (select firstonly RecId from hcmBudgetPurposeTypeDetail
                    where hcmBudgetPurposeTypeDetail.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOverLappingBudgetElementLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified <c>HcmPositionForecastBudgetAcctLineRecId</c> record ID exists in the
    /// <c>HcmPositionForecastBudgetAcctLine</c> table and overlaps with the other records.
    /// </summary>
    /// <param name="_effectiveDate">
    /// The <c>EffectiveDate</c> of the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </param>
    /// <param name="_expirationDate">
    /// The <c>ExpirationDate</c> of the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </param>
    /// <param name="_legalEntity">
    /// The legal entity record ID of the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </param>
    /// <param name="_budgetPurposeType">
    /// The <c>HcmBudgetPurposeType</c> record ID.
    /// </param>
    /// <param name="_recIdToExclude">
    /// The <c>HcmBudgetPurposeTypeDetail</c> record ID to exclude.
    /// </param>
    /// <returns>
    /// true if the specified record overlaps; otherwise, false.
    /// </returns>

    public static boolean existOverLappingBudgetElementLegalEntity(ValidFromDate _effectiveDate,
                                                                    ValidToDate  _expirationDate,
                                                                    CompanyInfoRecId _legalEntity,
                                                                    HcmBudgetPurposeTypeRecId _budgetPurposeType,
                                                                    HcmBudgetPurposeTypeDetailRecId _recIdToExclude = 0)
    {
        HcmBudgetPurposeType                budgetPurposeType;
        HcmBudgetPurposeTypeDetail          budgetPurposeDetail;

        if (_effectiveDate && _expirationDate)
        {
            select firstonly RecId from budgetPurposeDetail
                where budgetPurposeDetail.RecId != _recIdToExclude
                && budgetPurposeDetail.LegalEntity == _legalEntity
                && ((budgetPurposeDetail.EffectiveDate >= _effectiveDate
                    && budgetPurposeDetail.EffectiveDate < _expirationDate)
                || (budgetPurposeDetail.EffectiveDate <= _effectiveDate
                    && budgetPurposeDetail.ExpirationDate >= _effectiveDate))
                join  RecId from budgetPurposeType
                where budgetPurposeDetail.BudgetPurposeType == budgetPurposeType.RecId
                && budgetPurposeType.RecId == _budgetPurposeType;
        }

        return budgetPurposeDetail.RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmBudgetPurposeTypeDetail</c> table that is based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that specifies the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A <c>HcmBudgetPurposeTypeDetail</c> table record.
    /// </returns>
    public static HcmBudgetPurposeTypeDetail find(
    HcmBudgetPurposeTypeDetailRecId         _recId,
    boolean                                 _forUpdate = false,
    ConcurrencyModel                        _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmBudgetPurposeTypeDetail budgetPurposeTypeDetail;

        budgetPurposeTypeDetail.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetPurposeTypeDetail.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetPurposeTypeDetail
             where budgetPurposeTypeDetail.RecId == _recId;

        return budgetPurposeTypeDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBudgetPurposeTypeLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmBudgetPurposeTypeDetail</c> table that is based on the specified
    /// <c>BudgetPurposeType</c> field and <c>LegalEntity</c> field values.
    /// </summary>
    /// <param name="_budgetPurposeType">
    /// The value of the <c>BudgetPurposeType</c> field to find.
    /// </param>
    /// <param name="_legalEntity">
    /// The value of the <c>LegalEntity</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that specifies the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A <c>HcmBudgetPurposeTypeDetail</c> table record.
    /// </returns>
    public static HcmBudgetPurposeTypeDetail findByBudgetPurposeTypeLegalEntity(
    HcmBudgetPurposeTypeRecId   _budgetPurposeType,
    CompanyInfoRecId            _legalEntity,
    boolean                     _forUpdate = false,
    ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmBudgetPurposeTypeDetail hcmBudgetPurposeTypeDetail;
        ValidFromDate effectiveDate;
        ValidToDate   expirationDate;

        effectiveDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        expirationDate = dateMax();

        hcmBudgetPurposeTypeDetail.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmBudgetPurposeTypeDetail.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmBudgetPurposeTypeDetail
            where hcmBudgetPurposeTypeDetail.BudgetPurposeType == _budgetPurposeType &&
                    hcmBudgetPurposeTypeDetail.LegalEntity == _legalEntity
                            && hcmBudgetPurposeTypeDetail.EffectiveDate >= effectiveDate
                                    && hcmBudgetPurposeTypeDetail.ExpirationDate <= expirationDate;

        return hcmBudgetPurposeTypeDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBudgetPurposeTypeLegalEntityOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmBudgetPurposeTypeDetail</c> table that is based on the specified
    /// <c>BudgetPurposeType</c> field and <c>LegalEntity</c> field values.
    /// </summary>
    /// <param name="_budgetPurposeType">
    /// The value of the <c>BudgetPurposeType</c> field to find.
    /// </param>
    /// <param name="_legalEntity">
    /// The value of the <c>LegalEntity</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that specifies the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A <c>HcmBudgetPurposeTypeDetail</c> table record.
    /// </returns>
    public static HcmBudgetPurposeTypeDetail findByBudgetPurposeTypeLegalEntityOnly(
    HcmBudgetPurposeTypeRecId   _budgetPurposeType,
    CompanyInfoRecId            _legalEntity,
    boolean                     _forUpdate = false,
    ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmBudgetPurposeTypeDetail hcmBudgetPurposeTypeDetail;

        hcmBudgetPurposeTypeDetail.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmBudgetPurposeTypeDetail.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmBudgetPurposeTypeDetail
            where hcmBudgetPurposeTypeDetail.BudgetPurposeType == _budgetPurposeType &&
                    hcmBudgetPurposeTypeDetail.LegalEntity == _legalEntity;

        return hcmBudgetPurposeTypeDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPurposeTypeDetailByCycleRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a record in the <c>HcmBudgetPurposeTypeDetail</c> table that is based on the specified
    /// <c>BudgetPurposeType</c> record, <c>LegalEntity</c> record, and a <c>HcmForecastScenario</c> record.
    /// </summary>
    /// <param name="_budgetPurposeType">
    /// The value of the <c>BudgetPurposeType</c> field to find.
    /// </param>
    /// <param name="_legalEntity">
    /// The value of the <c>LegalEntity</c> field to find.
    /// </param>
    /// <param name="_forecastScenarioRecId">
    /// The record ID value of the <c>HcmForecastScenario</c> record used to determine the budget cycle.
    /// </param>
    /// <returns>
    /// A <c>HcmBudgetPurposeTypeDetail</c> table record.
    /// </returns>
    /// <remarks>
    /// The method requires the <c>HcmForecastScenario</c> record to determine the budget cycle date range. This
    /// table has the denormalized budget cycle start and end dates with which to constrain the query.
    /// This method is consumed when we need to retrieve a single detail record for calculating costs.
    /// </remarks>
    public static HcmBudgetPurposeTypeDetail getBudgetPurposeTypeDetailByCycleRange(
    HcmBudgetPurposeTypeRecId   _budgetPurposeType,
    CompanyInfoRecId            _legalEntity,
    HcmForecastScenarioRecId    _forecastScenarioRecId)
    {
        HcmBudgetPurposeTypeDetail budgetPurposeTypeDetail;
        HcmForecastScenario forecastScenario;

        select firstonly budgetPurposeTypeDetail
            order by budgetPurposeTypeDetail.EffectiveDate asc
            where budgetPurposeTypeDetail.BudgetPurposeType == _budgetPurposeType
                && budgetPurposeTypeDetail.LegalEntity == _legalEntity
            exists join forecastScenario
                where (forecastScenario.RecId == _forecastScenarioRecId)
                    && ((budgetPurposeTypeDetail.EffectiveDate >= forecastScenario.BudgetProcessStartDate)
                        && (budgetPurposeTypeDetail.EffectiveDate <= forecastScenario.BudgetProcessEndDate))
                    || ((budgetPurposeTypeDetail.ExpirationDate >= forecastScenario.BudgetProcessStartDate)
                        && (budgetPurposeTypeDetail.ExpirationDate <= forecastScenario.BudgetProcessEndDate))
                    || ((budgetPurposeTypeDetail.EffectiveDate <= forecastScenario.BudgetProcessStartDate)
                        && (budgetPurposeTypeDetail.ExpirationDate >= forecastScenario.BudgetProcessEndDate));

        return budgetPurposeTypeDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntitiesByBudgetPurposeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmBudgetPurposeTypeDetail</c> table that is based on the specified
    /// <c>BudgetPurposeType</c> field.
    /// </summary>
    /// <param name="_budgetPurposeType">
    /// The value of the <c>BudgetPurposeType</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that specifies the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A container containing the legalentity recId's
    /// </returns>
    public static container getLegalEntitiesByBudgetPurposeType(
    HcmBudgetPurposeTypeRecId   _budgetPurposeType,
    boolean                     _forUpdate = false,
    ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        container   legalEntityContainer;
        HcmBudgetPurposeTypeDetail hcmBudgetPurposeTypeDetail;

        hcmBudgetPurposeTypeDetail.selectForUpdate(_forUpdate );

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmBudgetPurposeTypeDetail.concurrencyModel(_concurrencyModel);
        }

        while select LegalEntity from hcmBudgetPurposeTypeDetail
                where hcmBudgetPurposeTypeDetail.BudgetPurposeType == _budgetPurposeType
        {
            legalEntityContainer += [hcmBudgetPurposeTypeDetail.LegalEntity];
        }

        return legalEntityContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEarningBasisAdditionAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if an earning basis is allowed for the selected budget cost element based on the <c>Amount</c> field of table <c>HcmBudgetPurposeTypeDetail</c>
    /// </summary>
    /// <param name="_hcmBudgetPurposeTypeRecId">
    /// The record ID of the <c>HcmBudgetPurposeType</c> record to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean isEarningBasisAdditionAllowed(HcmBudgetPurposeTypeRecId _hcmBudgetPurposeTypeRecId)
    {
        HcmBudgetPurposeTypeDetail hcmBudgetPurposeTypeDetail;
        boolean hasValueAmount;

        select firstonly RecId from hcmBudgetPurposeTypeDetail
            where hcmBudgetPurposeTypeDetail.BudgetPurposeType == _hcmBudgetPurposeTypeRecId &&
                hcmBudgetPurposeTypeDetail.Amount != 0;

        if (hcmBudgetPurposeTypeDetail.RecId)
        {
            hasValueAmount = true;
        }

        return hasValueAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineLocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the line status of the current record in the <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <param name="_positionForecastBudgetAcctLineRecId">
    /// The record ID value of the <c>HcmPositionForecastBudgetAcctLine</c> table to process.
    /// </param>
    /// <returns>
    /// true if the line is locked; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  For system generated account lines will be locked if the annualized compensation amount is equal to the line amount and
    ///  having same Ledger dimension as of <c>HcmBudgetPurposeTypeDetail</c> table record.
    /// </remarks>
    public static boolean isLineLocked(HcmPositionForecastBudgetAcctLineRecId _positionForecastBudgetAcctLineRecId = 0)
    {
        HcmPositionForecastBudgetAcctLine positionForecastBudgetAcctLine = HcmPositionForecastBudgetAcctLine::find(_positionForecastBudgetAcctLineRecId);
        HcmPositionForecastAmountCur annualAmount;
        HcmBudgetPurposeTypeDetail budgetPurposeTypeDetail = HcmBudgetPurposeTypeDetail::find(positionForecastBudgetAcctLine.BudgetPurposeTypeDetail);
        HcmPositionForecastCompensationGrid positionForecastCompensationGrid;
        HcmPositionForecastScenario positionForecastScenario = HcmPositionForecastScenario::find(positionForecastBudgetAcctLine.PositionForecastScenario);
        boolean isLineLocked = false;
        HcmPositionForecastCompensationGroup    positionForecastCompensationGroup;

        if (positionForecastScenario.RecId == 0)
        {
            return false;
        }

        if (positionForecastBudgetAcctLine.IsSystemGenerated == true)
        {
            positionForecastScenario = HcmPositionForecastScenario::find(positionForecastBudgetAcctLine.PositionForecastScenario);
            positionForecastCompensationGrid = HcmPositionForecastCompensationGrid::findCrossCompany(positionForecastScenario.PositionForecastCompensationGrid);

            if (positionForecastCompensationGrid.RecId != 0)
            {
                positionForecastCompensationGroup = HcmPositionForecastCompensationGroup::findByCompensationGrpIdDataAreaId(positionForecastScenario.CompensationGroupId, positionForecastScenario.CompensationGroupDataAreaId);
                annualAmount = HcmPositionForecastCompensationGrid::annualizeCompensationAmount(positionForecastCompensationGroup.RecId, positionForecastBudgetAcctLine.PositionForecastCompensationGrid);

                isLineLocked = !((annualAmount == positionForecastBudgetAcctLine.AmountCur)
                                && (budgetPurposeTypeDetail.LedgerDimension == positionForecastBudgetAcctLine.LedgerDimension));
            }
        }
        else
        {
            isLineLocked = (budgetPurposeTypeDetail.Amount != positionForecastBudgetAcctLine.AmountCur
                || budgetPurposeTypeDetail.Percent != positionForecastBudgetAcctLine.PercentageOfDefaultBasisAmount
                || budgetPurposeTypeDetail.LedgerDimension != positionForecastBudgetAcctLine.LedgerDimension);
        }

        return isLineLocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOverrideAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Indicates whether the <c>HcmBudgetPurposeTypeDetail</c> table associated record allows overriding the purpose on the forecast position.
    /// </summary>
    /// <param name="_budgetPurposeTypeDetailRecId">
    /// The record ID of the <c>HcmBudgetPurposeTypeDetail</c> record to check.
    /// </param>
    /// <returns>
    /// true if the <c>HcmBudgetPurposeTypeDetail</c> table associated record allows overriding the purpose; otherwise, false
    /// </returns>

    public static boolean isOverrideAllowed(HcmBudgetPurposeTypeDetailRecId _budgetPurposeTypeDetailRecId)
    {
        HcmBudgetPurposeTypeDetail budgetPurposeTypeDetail = HcmBudgetPurposeTypeDetail::find(_budgetPurposeTypeDetailRecId);

        return budgetPurposeTypeDetail.isPositionOverrideAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefBudgetPurposeTypeDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the go to main table Form option to the shortcut menu.
    /// </summary>
    ///<param name="_object">
    /// The caller object where the event is triggered.
    /// </param>
    /// <param name="_budgetPurposeTypeDetailRecId">
    /// The record ID of the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </param>
    static void jumpRefBudgetPurposeTypeDetail(Object  _object, HcmBudgetPurposeTypeDetailRecId _budgetPurposeTypeDetailRecId)
    {
        Args    args;
        HcmBudgetPurposeTypeDetail budgetPurposeTypeDetail = HcmBudgetPurposeTypeDetail::find(_budgetPurposeTypeDetailRecId);

        args = new Args();
        args.lookupField(fieldNum(HcmBudgetPurposeType, RecId));
        args.lookupValue(int642str(budgetPurposeTypeDetail.BudgetPurposeType));
        args.caller(_object);

        new MenuFunction(menuitemDisplayStr(HcmBudgetPurposeType), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPurposeByDateCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The control on the form that is being used.
    /// </param>
    /// <param name="_legalEntity">
    /// The legal entity record ID of the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </param>
    /// <param name="_positionDurationEffectiveDate">
    /// The effective date entered on the <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </param>
    /// <param name="_positionDurationExpirationDate">
    /// The expiration date entered on the <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </param>
    /// <returns>
    /// The reference record for the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </returns>
    /// <remarks>
    /// This method filters the lookup on the basis of legal entity and expiration date.
    /// </remarks>
    public static Common lookupBudgetPurposeByDateCompany(FormReferenceControl _formReferenceControl,
                                                    CompanyInfoRecId _legalEntity,
                                                    TransDate _positionDurationEffectiveDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                    TransDate _positionDurationExpirationDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        Query query = new Query();
        QueryBuildDataSource qbdsBudgetPurposeType;
        QueryBuildDataSource qbdsBudgetPurposeTypeDetail;
        QueryBuildRange qrCostComponentExpirationDateRange, qrLegalEntity;
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(HcmBudgetPurposeTypeDetail), _formReferenceControl, true);

        qbdsBudgetPurposeTypeDetail = query.addDataSource(tableNum(HcmBudgetPurposeTypeDetail));

        qbdsBudgetPurposeType = qbdsBudgetPurposeTypeDetail.addDataSource(tableNum(HcmBudgetPurposeType));
        qbdsBudgetPurposeType.relations(true);

        qrLegalEntity = qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, LegalEntity));
        qrLegalEntity.value(queryValue(_legalEntity));

        qrCostComponentExpirationDateRange = qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, ExpirationDate));
        qrCostComponentExpirationDateRange.value(strFmt('(((%1 > %2) && (%3 != %4)) || ((%3 == %4) && (%5 <= %6)))',
                                        fieldStr(HcmBudgetPurposeTypeDetail, ExpirationDate), date2StrXpp(_positionDurationEffectiveDate),
                                        date2StrXpp(_positionDurationEffectiveDate), date2StrXpp(maxDate()),
                                        fieldStr(HcmBudgetPurposeTypeDetail, ExpirationDate), date2StrXpp(_positionDurationExpirationDate)));

        sysTableLookup.parmQuery(query);
        sysTableLookup.addLookupfield(fieldNum(HcmBudgetPurposeType, Purpose));
        sysTableLookup.addLookupfield(fieldNum(HcmBudgetPurposeTypeDetail, EffectiveDate));
        sysTableLookup.addLookupfield(fieldNum(HcmBudgetPurposeTypeDetail, ExpirationDate));
        sysTableLookup.addLookupfield(fieldNum(HcmBudgetPurposeTypeDetail, LedgerDimension));
        sysTableLookup.addLookupfield(fieldNum(HcmBudgetPurposeTypeDetail, Percent));
        sysTableLookup.addLookupfield(fieldNum(HcmBudgetPurposeTypeDetail, Amount));

        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceBudgetPTDByCompanyDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The control on the form that is being used.
    /// </param>
    /// <param name="_legalEntity">
    /// The legal entity record ID of the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </param>
    /// <param name="_startDate">
    /// The start date for the lookup filter.
    /// </param>
    /// <param name="_endDate">
    /// The end date for the lookup filter.
    /// </param>
    /// <returns>
    /// The reference record for the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </returns>
    /// <remarks>
    /// This method filters the lookup on the basis of legal entity and expiration date.
    /// </remarks>
    public static Common lookupReferenceBudgetPTDByCompanyDate(FormReferenceControl _formReferenceControl,
                                                    CompanyInfoRecId _legalEntity,
                                                    TransDate _startDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                    TransDate _endDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        Query query = new Query();
        QueryBuildDataSource qbdsBudgetPurposeType;
        QueryBuildDataSource qbdsBudgetPurposeTypeDetail;
        QueryBuildRange qrCostComponentExpirationDateRange, qrLegalEntity;
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(HcmBudgetPurposeTypeDetail), _formReferenceControl, true);

        qbdsBudgetPurposeTypeDetail = query.addDataSource(tableNum(HcmBudgetPurposeTypeDetail));

        qbdsBudgetPurposeType = qbdsBudgetPurposeTypeDetail.addDataSource(tableNum(HcmBudgetPurposeType));
        qbdsBudgetPurposeType.relations(true);

        qrLegalEntity = qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, LegalEntity));
        qrLegalEntity.value(queryValue(_legalEntity));

        qrCostComponentExpirationDateRange = qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, ExpirationDate));
        qrCostComponentExpirationDateRange.value(strFmt('(((%3 >= %2) && (%3 <= %4)) || ((%1 >= %2) && (%1 <= %4)) || ((%1 <= %2) && (%3 >= %4)))',
                                                fieldStr(HcmBudgetPurposeTypeDetail, EffectiveDate), date2StrXpp(_startDate),
                                                fieldStr(HcmBudgetPurposeTypeDetail, ExpirationDate), date2StrXpp(_endDate)));

        sysTableLookup.parmQuery(query);
        sysTableLookup.addLookupfield(fieldNum(HcmBudgetPurposeTypeDetail, BudgetPurposeType));
        sysTableLookup.addLookupfield(fieldNum(HcmBudgetPurposeTypeDetail, EffectiveDate));
        sysTableLookup.addLookupfield(fieldNum(HcmBudgetPurposeTypeDetail, ExpirationDate));
        sysTableLookup.addLookupfield(fieldNum(HcmBudgetPurposeTypeDetail, LedgerDimension));
        sysTableLookup.addLookupfield(fieldNum(HcmBudgetPurposeTypeDetail, Percent));
        sysTableLookup.addLookupfield(fieldNum(HcmBudgetPurposeTypeDetail, Amount));

        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceBudgetPTDByCompanyDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the lookup of a <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The control on the form that is being used.
    /// </param>
    /// <param name="_legalEntity">
    /// The legal entity record ID of the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </param>
    /// <param name="_startDate">
    /// The start date for the lookup filter.
    /// </param>
    /// <param name="_endDate">
    /// The end date for the lookup filter.
    /// </param>
    /// <returns>
    /// The reference record for the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </returns>
    public static HcmBudgetPurposeTypeDetail resolveReferenceBudgetPTDByCompanyDate(
                                                FormReferenceControl _formReferenceControl,
                                                CompanyInfoRecId _legalEntity,
                                                TransDate _startDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                TransDate _endDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        HcmBudgetPurposeType budgetPurposeType;
        HcmBudgetPurposeTypeDetail budgetPurposeTypeDetail;
        HcmBudgetPurpose budgetPurpose = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(HcmBudgetPurposeType, Purpose), tableStr(HcmBudgetPurposeType))).value();

        select firstonly budgetPurposeTypeDetail order by ExpirationDate desc
            exists join budgetPurposeType
            where   budgetPurposeType.Purpose == budgetPurpose
                    && budgetPurposeTypeDetail.BudgetPurposeType == budgetPurposeType.RecId
                    && budgetPurposeTypeDetail.LegalEntity == _legalEntity
                    && ((budgetPurposeTypeDetail.ExpirationDate >= _startDate
                        && budgetPurposeTypeDetail.ExpirationDate <= _endDate)
                        || (budgetPurposeTypeDetail.EffectiveDate >= _startDate
                            && budgetPurposeTypeDetail.EffectiveDate <= _endDate)
                        || (budgetPurposeTypeDetail.EffectiveDate <= _startDate
                            && budgetPurposeTypeDetail.ExpirationDate >= _endDate));

        return budgetPurposeTypeDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceBudgetPTDDateCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the lookup of a <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The control on the form that is being used.
    /// </param>
    /// <param name="_legalEntity">
    /// The legal entity record ID of the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </param>
    /// <param name="_positionDurationEffectiveDate">
    /// The effective date entered in the <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </param>
    /// <param name="_positionDurationExpirationDate">
    /// The expiration date entered on the <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </param>
    /// <returns>
    /// The reference record for the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </returns>
    public static HcmBudgetPurposeTypeDetail resolveReferenceBudgetPTDDateCompany(
                                                FormReferenceControl _formReferenceControl,
                                                CompanyInfoRecId _legalEntity,
                                                TransDate _positionDurationEffectiveDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                TransDate _positionDurationExpirationDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        HcmBudgetPurposeType budgetPurposeType;
        HcmBudgetPurposeTypeDetail budgetPurposeTypeDetail;
        HcmBudgetPurpose budgetPurpose = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(HcmBudgetPurposeType, Purpose), tableStr(HcmBudgetPurposeType))).value();

        select firstonly budgetPurposeTypeDetail order by ExpirationDate desc
            exists join budgetPurposeType
            where   budgetPurposeType.Purpose == budgetPurpose
                    && budgetPurposeTypeDetail.BudgetPurposeType == budgetPurposeType.RecId
                    && budgetPurposeTypeDetail.LegalEntity == _legalEntity
                    && budgetPurposeTypeDetail.ExpirationDate >= _positionDurationEffectiveDate
                    && budgetPurposeTypeDetail.EffectiveDate <= _positionDurationExpirationDate;

        return budgetPurposeTypeDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasGapWithinDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is a date gap within the specific date range.
    /// </summary>
    /// <param name="_legalEntity">
    /// The record ID of the <c>CompanyInfo</c> table.
    /// </param>
    /// <param name="_budgetPurposeType">
    /// The record ID of the earning cost element in the <c>HcmBudgetPurposeType</c> table.
    /// </param>
    /// <param name="_startDate">
    /// The start date of the criteria date range.
    /// </param>
    /// <param name="_endDate">
    /// The end date of the criteria date range.
    /// </param>
    /// <returns>
    /// true if there is a date gap from cost element setup within specific date range; otherwise, false.
    /// </returns>
    public static boolean hasGapWithinDateRange(CompanyInfoRecId _legalEntity,
                                                    HcmBudgetPurposeTypeRecId _budgetPurposeType,
                                                    ValidFromDate _startDate,
                                                    ValidToDate _endDate)
    {
        HcmBudgetPurposeTypeDetail budgetPurposeTypeDetail;
        TransDate                  expirationDate;
        boolean                    hasGap = true;

        expirationDate = dateNull();

        // Check the specified date range is fully covered by cost element setup
        while select EffectiveDate, ExpirationDate from budgetPurposeTypeDetail
            order by EffectiveDate
            where budgetPurposeTypeDetail.BudgetPurposeType == _budgetPurposeType
                && budgetPurposeTypeDetail.LegalEntity == _legalEntity
                && budgetPurposeTypeDetail.EffectiveDate <= _endDate
                && budgetPurposeTypeDetail.ExpirationDate >= _startDate
        {
            //
            // Find any Cost element detail gaps.
            // The loop will be excited when any cost element detail date gaps are found.
            //
            if (expirationDate == dateNull())
            {
                if (budgetPurposeTypeDetail.EffectiveDate <= _startDate)
                {
                    expirationDate = budgetPurposeTypeDetail.ExpirationDate;
                }
                else
                {
                    // Finds a date gap when the first cost element detail has an effective date after the _startdate.
                    break;
                }
            }
            else if (expirationDate == budgetPurposeTypeDetail.EffectiveDate - 1)
            {
                expirationDate = budgetPurposeTypeDetail.ExpirationDate;
            }
            else
            {
                //
                // Find a date gap when any consecutive cost element effective date is more than
                // one day after previous detail's expiration date
                //
                break;
            }
        }

        if (expirationDate != dateNull() && expirationDate >= _endDate)
        {
            hasGap = false;
        }

        return hasGap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    public void defaultRow()
    {
        super();

        if (this.Amount > 0)
        {
            this.isPercentageBased = false;
            this.Percent = 0;
        }
        else
        {
            this.isPercentageBased = true;
            this.Amount = 0;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GLS190022</DeveloperDocumentation>
	<Label>@GLS190021</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>BudgetPurposeType</TitleField1>
	<TitleField2>LegalEntity</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>PurposeLegalEntityIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPurposeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPurposeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPurposeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Account</Name>
			<Label>@SYS40757</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS98362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetCostElement</Name>
			<Label>@SYS4005313</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPurposeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculations</Name>
			<Label>@SYS4005350</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EffectiveDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpirationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AnnualLimit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GridLayout</Name>
			<Label>@SYS4005362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpirationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPurposeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBudgetAmountCur</ExtendedDataType>
			<Label>@SYS4005359</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AnnualLimit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBudgetPurposeTypeAnnualLimit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPurposeType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBudgetPurposeTypeRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EffectiveDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ExpirationDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>isPercentageBased</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyInfoRecId</ExtendedDataType>
			<Label>@SYS322242</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percent</Name>
			<ExtendedDataType>HcmBudgetPercent</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurposeLegalEntityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetPurposeType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EffectiveDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ExpirationDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPurposeType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmBudgetPurposeType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPurposeType</Name>
					<Field>BudgetPurposeType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>