<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetUserGroupOption</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjBudgetUserGroupOption extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the default value of the <c>ProjBudgetValidFor</c> field.
    /// </summary>

    public void initValue()
    {
        super();
        this.ProjBudgetValidFor = TableGroupAll::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;
        ProjTable projTable;

        ret = super(_fieldIdToCheck);
        projTable = ProjTable::find(this.ProjOrProjGroup);

        switch (_fieldIdToCheck)
        {
            case fieldNum(ProjBudgetUserGroupOption, ProjOrProjGroup):
            if (projTable.Status == ProjStatus::Completed)
            {
                ret = checkFailed(strFmt("@SYS53010", ProjStatus::Completed, this.ProjOrProjGroup));
            }
            else if (projTable.Header)
            {
                ret = checkFailed(strFmt("@SYS96612", projTable.AlternateBudgetProject));
            }
            break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ok;
        ProjBudgetUserGroupOption   projBudgetUserGroupOptionTmp;
        ProjTable                   projTableTmp;

        ok = super();

        if (ok)
        {
            if (this.ProjBudgetValidFor != TableGroupAll::All && !this.ProjOrProjGroup)
            {
                ok = checkFailed("@SYS68855");
            }

            select projBudgetUserGroupOptionTmp where
                projBudgetUserGroupOptionTmp.UserGroupInfo == this.UserGroupInfo &&
                projBudgetUserGroupOptionTmp.ProjBudgetValidFor == TableGroupAll::Table &&
                projBudgetUserGroupOptionTmp.ProjOrProjGroup == this.ProjOrProjGroup &&
                projBudgetUserGroupOptionTmp.RecId != this.RecId ;
            if (projBudgetUserGroupOptionTmp)
            {
                throw error(strFmt("@SYS300582", this.UserGroupInfo, this.ProjOrProjGroup));
            }

            projTableTmp = ProjTable::find(this.ProjOrProjGroup);
            if (projTableTmp.UseAlternateProject)
            {
                ok = checkFailed(strFmt("@SYS301171", this.ProjOrProjGroup, projTableTmp.AlternateBudgetProject));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>ProjBudgetUserGroupOption</c> table; if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    <c>true</c> if the specified record exists; otherwise, <c>false</c>.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!ProjBudgetUserGroupOption::exist(_recId))
        {
            ret = checkFailed(strFmt(ProjBudgetUserGroupOption::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>ProjBudgetUserGroupOption</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly RecId from projbudgetUserGroupOption where projbudgetUserGroupOption.RecId == _recId).RecId != 0;
        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByUserGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>ProjBudgetUserGroupOption</c> table exists.
    /// </summary>
    /// <param name="_userGroupId">
    ///    The user group ID of the record to find.
    /// </param>
    /// <returns>
    ///    <c>true</c> if the specified record exists; otherwise, <c>false</c>.
    /// </returns>
    public static boolean existByUserGroup(userGroupId _userGroupId)
    {
        boolean found;

        found = (select firstonly RecId from projbudgetUserGroupOption where projbudgetUserGroupOption.UserGroupInfo == _userGroupId).RecId != 0;
        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjBudgetUserGroupOption</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ProjBudgetUserGroupOption</c> table; otherwise, an empty record.
    /// </returns>
    public static ProjBudgetUserGroupOption find(
        recId               _recId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        ProjBudgetUserGroupOption projBudgetUserGroupOption;

        projBudgetUserGroupOption.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projBudgetUserGroupOption.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            projBudgetUserGroupOption
            where
                projBudgetUserGroupOption.RecId == _recId;

        return projBudgetUserGroupOption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByUserGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjBudgetUserGroupOption</c> table.
    /// </summary>
    /// <param name="_userGroupId">
    /// The user group ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ProjBudgetUserGroupOption</c> table; otherwise, an empty record.
    /// </returns>
    public static ProjBudgetUserGroupOption findByUserGroup(
        userGroupId         _userGroupId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        ProjBudgetUserGroupOption projBudgetUserGroupOption;

        projBudgetUserGroupOption.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projBudgetUserGroupOption.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            projBudgetUserGroupOption
            where
                projBudgetUserGroupOption.UserGroupInfo == _userGroupId;

        return projBudgetUserGroupOption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS153476</DeveloperDocumentation>
	<Label>@SYS307217</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>UserGroupInfo</TitleField1>
	<TitleField2>ProjBudgetOverrunOption</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ProjUserGroupInfoIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ProjUserGroupInfoIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserGroupInfo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetValidFor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjOrProjGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetOverrunOption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserGroupInfo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetValidFor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjOrProjGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS35894</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserGroupInfo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetValidFor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjOrProjGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetOverrunOption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjBudgetOverrunOption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS153303</Label>
			<EnumType>ProjBudgetOverrunOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjBudgetValidFor</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjOrProjGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjRelation</ExtendedDataType>
			<Label>@SYS183658</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserGroupInfo</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UserGroupId</ExtendedDataType>
			<Label>@SYS21952</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjUserGroupInfoIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>UserGroupInfo</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjBudgetValidFor</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjOrProjGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ProjGroupLookup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjOrProjGroup</Name>
					<Field>ProjOrProjGroup</Field>
					<RelatedField>ProjGroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjBudgetValidFor</Name>
					<Field>ProjBudgetValidFor</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjLookup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjBudgetValidFor</Name>
					<Field>ProjBudgetValidFor</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjOrProjGroup</Name>
					<Field>ProjOrProjGroup</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserGroupInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>UserGroupInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>UserGroupInfo</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjBudgetUserGroupOption</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserGroupInfo</Name>
					<SourceEDT>UserGroupId</SourceEDT>
					<Field>UserGroupInfo</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>UserIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>