<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTrans_Allocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTrans_Allocation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOrUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a <c>LedgerJournalTrans_Allocation</c> record in relation to a journal voucher.
    /// </summary>
    /// <param name = "_journalBatchNumber">The journal batch number.</param>
    /// <param name = "_voucher">The voucher.</param>
    /// <param name = "_transDate">The transaction date.</param>
    /// <param name = "_defaultDimension">The source default dimension; optional.</param>
    /// <param name = "_forUpdate">A boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>The <c>LedgerJournalTrans_Allocation</c> record.</returns>
    public static LedgerJournalTrans_Allocation createOrUpdate(
        LedgerJournalId _journalBatchNumber,
        Voucher _voucher,
        TransDate _transDate,
        DimensionDefault _defaultDimension = 0,
        boolean _forUpdate = false)
    {
        LedgerJournalTrans_Allocation ledgerJournalTransAllocation = LedgerJournalTrans_Allocation::find(_journalBatchNumber, _voucher, _transDate, _forUpdate);

        if (!ledgerJournalTransAllocation)
        {
            ledgerJournalTransAllocation.JournalBatchNumber = _journalBatchNumber;
            ledgerJournalTransAllocation.Voucher = _voucher;
            ledgerJournalTransAllocation.TransDate = _transDate;
            ledgerJournalTransAllocation.SourceDimension = _defaultDimension;

            ledgerJournalTransAllocation.insert();
        }
        else
        {
            ledgerJournalTransAllocation.selectForUpdate(true);
            ledgerJournalTransAllocation.SourceDimension = _defaultDimension;
        }

        return ledgerJournalTransAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>LedgerJournalTrans_Allocation</c> record in relation to a journal voucher.
    /// </summary>
    /// <param name = "_journalBatchNumber">The journal batch number.</param>
    /// <param name = "_voucher">The voucher.</param>
    /// <param name = "_transDate">The transaction date.</param>
    /// <param name = "_forUpdate">A boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>The <c>LedgerJournalTrans_Allocation</c> record.</returns>
    public static LedgerJournalTrans_Allocation find(
        LedgerJournalId _journalBatchNumber,
        Voucher _voucher,
        TransDate _transDate,
        boolean _forUpdate = false)
    {
        LedgerJournalTrans_Allocation ledgerJournalTransAllocation;

        ledgerJournalTransAllocation.selectForUpdate(_forUpdate);

        select firstonly ledgerJournalTransAllocation
            where ledgerJournalTransAllocation.JournalBatchNumber == _journalBatchNumber &&
                ledgerJournalTransAllocation.Voucher == _voucher &&
                ledgerJournalTransAllocation.TransDate == _transDate;

        return ledgerJournalTransAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntercompanyLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the intercompany due to/from account for the related journal voucher using the source default dimensions
    /// of the allocation source transactions.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The <c>LedgerJournalTrans</c> record containing the related
    /// voucher information.</param>
    /// <param name = "_defaultAccount">The default account to create the ledger account for.</param>
    /// <param name = "_ledgerVoucher">The <c>LedgerVoucher</c> instance.</param>
    /// <returns>The intercompany due to/from ledger account.</returns>
    public static LedgerDimensionAccount getIntercompanyLedgerDimension(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerDimensionDefaultAccount _defaultAccount,
        LedgerVoucher _ledgerVoucher)
    {
        DimensionDefault defaultDimension;
        LedgerDimensionAccount ledgerDimension;
        boolean isValid = false;

        LedgerJournalTrans_Allocation ledgerJournalTransAllocation = LedgerJournalTrans_Allocation::find(_ledgerJournalTrans.JournalNum, _ledgerJournalTrans.Voucher, _ledgerJournalTrans.TransDate);

        if (ledgerJournalTransAllocation)
        {
            ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultAccount, ledgerJournalTransAllocation.SourceDimension);

            isValid = LedgerDimensionValidation::getStatusForAccountingDate(
                ledgerDimension,
                ledgerJournalTransAllocation.TransDate,
                _ledgerVoucher.parmCheckBlockedDimensions()).isValid();
        }

        if (!ledgerDimension || !isValid)
        {
            ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultAccount);
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalPostCleanup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up allocation source dimension information for an allocation journal that is no longer
    /// needed after posting.
    /// </summary>
    /// <param name = "_ledgerJournalCheckPost">
    /// The instance of the <c>LedgerJournalCheckPost</c> class.
    /// </param>
    /// <param name = "_postingSuccess">
    /// A boolean value indicating if the journal was posted successfully.
    /// </param>
    /// <param name = "_intercompanyPostingSuccess">
    /// A boolean value indicating if the intercompany part of the journal was posted successfully.
    /// </param>
    /// <remarks>
    /// Subscriber to a delegate that is called after a journal is posted.
    /// </remarks>
    [SubscribesTo(classStr(LedgerJournalCheckPost), delegateStr(LedgerJournalCheckPost, runInternalPostPostJournalDelegate))]
    public static void journalPostCleanup(LedgerJournalCheckPost _ledgerJournalCheckPost, boolean _postingSuccess, boolean _intercompanyPostingSuccess)
    {
        LedgerJournalTable ledgerJournalTable = _ledgerJournalCheckPost.parmLedgerJournalTable();

        if (_postingSuccess &&
            ledgerJournalTable &&
            ledgerJournalTable.JournalNum &&
            ledgerJournalTable.JournalType == LedgerJournalType::Allocation)
        {
            LedgerJournalTrans_Allocation ledgerJournalTransAllocation;

            // Delete the source dimension information populated during the allocation process that is no
            // longer needed after posting.
            delete_from ledgerJournalTransAllocation
                where ledgerJournalTransAllocation.JournalBatchNumber == ledgerJournalTable.JournalNum;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAllocationRules</ConfigurationKey>
	<DeveloperDocumentation>@GeneralLedger:DevDoc_LedgerJournalTrans_Allocation</DeveloperDocumentation>
	<Label>@GeneralLedger:LedgerJournalTrans_Allocation_Table</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>JournalBatchNumber</TitleField1>
	<TitleField2>Voucher</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>JournalVoucherDateIdx</ClusteredIndex>
	<Modules>AccountingFoundation</Modules>
	<PrimaryIndex>JournalVoucherDateIdx</PrimaryIndex>
	<ReplacementKey>JournalVoucherDateIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalBatchNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalBatchNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalBatchNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalVoucherDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalBatchNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>JournalBatchNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalBatchNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTrans_Allocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDimension</Name>
					<Field>SourceDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalBatchNumber</Name>
					<SourceEDT>LedgerJournalId</SourceEDT>
					<Field>JournalBatchNumber</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeNumIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>