<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchReqLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowFieldEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the purchase requisition line field is editable or not.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field number in the <c>PurchReqLine</c> table.
    /// </param>
    /// <param name="_isUserTaskApprovalOwner">
    ///    A boolean value that specifies whether requisitioner is task owner or not.
    /// </param>
    /// <returns>
    ///    A boolean value indicating whether the field is editable or not.
    /// </returns>
    public boolean allowFieldEdit(FieldId _fieldId, boolean _isUserTaskApprovalOwner = false)
    {
        boolean                             allowEdit = false;
        CatExternalCatalog                  catExternalCatalog;
        CatExternalCatalogQuote             catExternalCatalogQuote;
        PurchReqLineExternalCatalogQuote    purchReqLineExternalCatalogQuote;

        /* Following fields are using edit method. AllowEdit handled directly in UI */
        // Product name
        // Purchase agreement

        if (_isUserTaskApprovalOwner && (this.RequisitionStatus == PurchReqRequisitionStatus::Draft ||
                                         this.RequisitionStatus == PurchReqRequisitionStatus::InReview ||
                                         this.RequisitionStatus == PurchReqRequisitionStatus::Rejected))
        {
            switch (_fieldId)
            {
                case fieldNum(PurchReqLine, ItemId):
                case fieldNum(PurchReqLine, ProcurementCategory):
                case fieldNum(PurchReqLine, LineType):
                    allowEdit = false;
                    break;

                case fieldNum(PurchReqLine, Name):
                    if (this.LineType == PurchReqLineType::Category)
                    {
                        allowEdit = true;
                    }
                    break;

                case fieldNum(PurchReqLine, PurchQty):
                    if (this.LineType == PurchReqLineType::Item || this.LineType == PurchReqLineType::Category)
                    {
                        allowEdit = true;
                    }
                    else
                    {
                        select  firstonly QuoteQuantityChange from catExternalCatalog
                            exists join catExternalCatalogQuote
                                where catExternalCatalog.RecId                          == catExternalCatalogQuote.ExternalCatalog
                            exists join purchReqLineExternalCatalogQuote
                                where catExternalCatalogQuote.RecId                     == purchReqLineExternalCatalogQuote.ExternalCatalogQuote
                                    &&  purchReqLineExternalCatalogQuote.PurchReqLine   == this.RecId;
                        if (catExternalCatalog.QuoteQuantityChange)
                        {
                            allowEdit = true;
                        }
                    }
                    break;

                case fieldNum(PurchReqLine, PriceDiscountTransfer):
                case fieldNum(PurchReqLine, PurchPrice):
                case fieldNum(PurchReqLine, LineAmount):
                case fieldNum(PurchReqLine, CurrencyCode):
                case fieldNum(PurchReqLine, PriceUnit):
                case fieldNum(PurchReqLine, LinePercent):
                case fieldNum(PurchReqLine, LineDisc):
                case fieldNum(PurchReqLine, PurchMarkup):
                case fieldNum(PurchReqLine, TaxGroup):
                case fieldNum(PurchReqLine, TaxItemGroup):
                    if (!this.isConsumption())
                    {
                        break;
                    }

                case fieldNum(PurchReqLine, PurchUnitOfMeasure):
                    if (!this.isConsumption())
                    {
                        allowEdit = true;
                        break;
                    }

                case fieldNum(PurchReqLine, ExternalItemId):
                    if (this.LineType != PurchReqLineType::External)
                    {
                        if ((this.RequisitionStatus == PurchReqRequisitionStatus::InReview ) ||
                            ((this.RequisitionStatus == PurchReqRequisitionStatus::Draft ||
                                this.RequisitionStatus == PurchReqRequisitionStatus::Rejected) &&
                            this.LineType == PurchReqLineType::Category))
                        {
                            allowEdit = true;
                        }
                    }
                    break;

                case fieldNum(PurchReqLine, VendAccount):
                    allowEdit = this.isVendAccountEnabled();
                    break;
                
                case fieldNum(PurchReqLine, TransDate):
                case fieldNum(PurchReqLine, LineComplete):
                case fieldNum(PurchReqLine, IsPrepayment):
                case fieldNum(PurchReqLine, PrePaymentDetails):
                case fieldNum(PurchReqLine, DeliveryName):
                case fieldNum(PurchReqLine, DeliveryPostalAddress):
                case fieldNum(PurchReqLine, Attention):
                case fieldNum(PurchReqLine, AssetGroup):
                case fieldNum(PurchReqLine, TaxServiceCode_BR):
                    allowEdit = this.isConsumption();
                    break;
            }
        }

        return allowEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur amountExclTax(AmountCur _amountCur, Qty  _qty, TransDate _transDate, Tax _tax = null, boolean _skipRounding = false, boolean _useRoundedTaxOrigin = true)
    {
        return this.salesPurchLineInterface().amountExclTax(_amountCur, _qty, _transDate, _tax, _skipRounding, _useRoundedTaxOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the company currency amount for a given amount.
    /// </summary>
    /// <param name="amountCur">
    /// The amount to convert.
    /// </param>
    /// <param name="exchRateDate">
    /// The date used to calculate the exchange rate; optional.
    /// </param>
    /// <param name="exchRate">
    /// The exchange rate to use, if known; optional.
    /// </param>
    /// <param name="exchrateSecondary">
    /// The secondary exchange rate to use, if known; optional.
    /// </param>
    /// <param name="exchRatesTriangulation">
    /// The exchange rate triangulation to use, if known; optional.
    /// </param>
    /// <returns>
    /// The amount in company currency.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public AmountMST amountMST(AmountCur               amountCur,
                               TransDate               exchRateDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                               ExchRate                exchRate                = 0,
                               ExchrateSecondary       exchrateSecondary       = 0,
                               ExchRatesTriangulation  exchRatesTriangulation  = UnknownNoYes::Unknown)

    {
        return this.salesPurchLineInterface().amountMST(amountCur, exchRateDate, exchRate, exchrateSecondary, exchRatesTriangulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAssetRuleTmpAssetQualifierLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>AssetRuleTmpAssetQualifierLookup</c> based on the policy container for current line.
    /// </summary>
    /// <param name="_assetRules">
    /// A container with the current asset rules.
    /// </param>
    /// <returns>
    /// A filled in <c>AssetRuleTmpAssetQualifierLookup</c>.
    /// </returns>
    AssetRuleTmpAssetQualifierLookup buildAssetRuleTmpAssetQualifierLookup(container _assetProcessedRule)
    {
        return this.buildAssetRuleTmpAssetQualifierLookupFromProcessedRule(AssetProcessedRule::construct(_assetProcessedRule));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAssetRuleTmpAssetQualifierLookupFromProcessedRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>AssetRuleTmpAssetQualifierLookup</c> based on the policy class for current line.
    /// </summary>
    /// <param name="_assetProcessedRule">
    /// The processed asset rules.
    /// </param>
    /// <param name="_qualifierStringFilter">
    /// A filter on a specific qualifier string to include; optional.
    /// </param>
    /// <returns>
    /// A filled in <c>AssetRuleTmpAssetQualifierLookup</c>.
    /// </returns>
    AssetRuleTmpAssetQualifierLookup buildAssetRuleTmpAssetQualifierLookupFromProcessedRule(AssetProcessedRule _assetProcessedRule, Description _qualifierStringFilter = '')
    {
        int                                 i;
        AssetRuleTmpAssetQualifierLookup    assetRuleTmpAssetQualifierLookup;
        container                           optionContainer;

        if (_assetProcessedRule.isActive())
        {
            optionContainer = _assetProcessedRule.options();

            while (i < conLen(optionContainer))
            {
                i++;
                Description qualifierStr = conPeek(optionContainer,i);
                if (prmIsDefault(_qualifierStringFilter) || qualifierStr == _qualifierStringFilter)
                {
                    assetRuleTmpAssetQualifierLookup.QualifierString = qualifierStr;
                    i++;
                    assetRuleTmpAssetQualifierLookup.AssetGroupId    = conPeek(optionContainer, i);
                    i++;
                    assetRuleTmpAssetQualifierLookup.RefRecId        = conPeek(optionContainer, i);
                    assetRuleTmpAssetQualifierLookup.insert();
                }
                else
                {
                    i += 2;
                }               
            }
        }
        return assetRuleTmpAssetQualifierLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buyingLegalEntity2DataArea</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <c>dataAreaId</c> field of the selected record.
    /// </summary>
    /// <returns>
    /// The data area ID of the selected record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display SelectableDataArea buyingLegalEntity2DataArea()
    {
        return CompanyInfo::findRecId(this.BuyingLegalEntity).DataArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcGrossAmount(Qty    qty   = this.PurchQty)
    {
        return this.salesPurchLineInterface().calcGrossAmount(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur  calcGrossAmountExclTax(Qty  qty = this.PurchQty, TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().calcGrossAmountExclTax(qty, this.taxDate(transDate), _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmount(Qty _qty = this.PurchQty)
    {
        return this.salesPurchLineInterface().calcLineAmount(_qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountExclTax(Qty _qty = this.PurchQty, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null, boolean _skipRounding = false)
    {
        return this.salesPurchLineInterface().calcLineAmountExclTax(_qty, this.taxDate(_transDate), _tax, _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountForced</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountForced(Qty _qty = this.PurchQty, PriceDiscPolicyCheckPolicy _checkPolicy = null)
    {
        return this.salesPurchLineInterface().calcLineAmountForced(_qty, _checkPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDisc</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public DiscAmount calcLineDisc(Qty    qty   = this.PurchQty)
    {
        return this.salesPurchLineInterface().calcLineDisc(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDiscExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    DiscAmount calcLineDiscExclTax(Qty _qty = this.PurchQty, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().calcLineDiscExclTax(_qty, this.taxDate(_transDate), _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPrice2LineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcPrice2LineAmount(Qty _qty, boolean _forceLineAmountCalculation)
    {
        return this.salesPurchLineInterface().calcPrice2LineAmount(_qty, _forceLineAmountCalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWorkflowExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the expiry date of the workflow item assigned to the current user for this line
    /// </summary>
    /// <returns>
    ///    The calculated date
    /// </returns>
    public WorkflowDueDateTime calcWorkflowExpiryDate()
    {
        WorkflowWorkItemTable   workflowWorkItemTable;

        if (this.isWorkflowOnPurchReqTable())
        {
            select firstonly RecId, DueDateTime from workflowWorkItemTable
                        where   workflowWorkItemTable.RefTableId == tableNum(PurchReqTable) &&
                                workflowWorkItemTable.RefRecId   == this.PurchReqTable      &&
                                workflowWorkItemTable.UserId     == curUserId()             &&
                                workflowWorkItemTable.Status     == WorkflowWorkItemStatus::Pending;
        }
        else
        {
            select firstonly RecId, DueDateTime from workflowWorkItemTable
                        where   workflowWorkItemTable.RefTableId == this.TableId            &&
                                workflowWorkItemTable.RefRecId   == this.RecId              &&
                                workflowWorkItemTable.UserId     == curUserId()             &&
                                workflowWorkItemTable.Status     == WorkflowWorkItemStatus::Pending;
        }
        if (workflowWorkItemTable.RecId)
        {
            return workflowWorkItemTable.DueDateTime;
        }
        return DateTimeUtil::minValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canApplyAllocationOrDistributionTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the use of an allocation or distribution template is applicable.
    /// </summary>
    /// <returns>
    /// true if limited to one distribution; otherwise, false.
    /// </returns>
    public boolean canApplyAllocationOrDistributionTemplate()
    {
        boolean projMultipleFundingSources = false;

        projMultipleFundingSources = (this.ProjId && ProjInvoiceTable::hasMultipleFundingSources(ProjTable::projInvoiceStatic(this.ProjId).ProjInvoiceProjId));

        return !(this.forInventory() || this.AssetGroup || projMultipleFundingSources);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canConsolidate</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(false)]
    display NoYes canConsolidate()
    {
        return PurchReqPurchaseOrderGenerationRule::canConsolidateStatic(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreatePurchaseOrder</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(false)]
    display NoYes canCreatePurchaseOrder()
    {
        PurchReqConsolidation       purchReqConsolidation;
        PurchReqConsolidationLine   purchReqConsolidationLine;
        boolean                     ret = false;

        // Check for purchase requisition consolidation opportunity
        select purchReqConsolidationLine where purchReqConsolidationLine.PurchReqLineID == this.RecId;
        if (purchReqConsolidationLine)
        {
            select purchReqConsolidation
             where purchReqConsolidation.RecId  == purchReqConsolidationLine.PurchReqConsolidationId
                && purchReqConsolidation.Status == PurchReqConsolidationActiveStatus::Closed;

            // If consolidation opportunity is closed and PR line is approved, then PO create is allowed
            if (purchReqConsolidation && this.RequisitionStatus == PurchReqRequisitionStatus::Approved)
            {
                ret = true;
            }
        }
        else
        {
            // If purchase requisition line status is approved, then purchase order can be created
            if (this.RequisitionStatus == PurchReqRequisitionStatus::Approved)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditDefaultMainAccount</Name>
				<Source><![CDATA[
    public boolean canEditDefaultMainAccount()
    {
        return this.canApplyAllocationOrDistributionTemplate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditDisc</Name>
				<Source><![CDATA[
    boolean canEditDisc()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGenerateRFQ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether request for quote can be generated for a purchase requisition.
    /// </summary>
    /// <returns>
    /// true if the generation of request for quote is possible; otherwise, false.
    /// </returns>
    public boolean canGenerateRFQ()
    {
        return this.isConsumption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRecordPreEncumbrance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the pre encumbrance can be recorded for the purchase requisition line.
    /// </summary>
    /// <returns>
    /// true if the recording is possible; otherwise, false.
    /// </returns>
    public boolean canRecordPreEncumbrance()
    {
        if (this.isConsumption()
            && this.RequisitionStatus == PurchReqRequisitionStatus::Approved
            && this.IsPreEncumbranceRequired == UnknownNoYes::Unknown)
        {
            if (PurchReqPreEncumber::isPreEncumbranceEnabled(this.BuyingLegalEntity))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the purchase requisition can be submitted to workflow.
    /// </summary>
    /// <returns>
    ///    A boolean value indicating whether the purchase requisition can be submitted to workflow.
    /// </returns>
    public boolean canSubmit()
    {
        return this.purchReqTable().canSubmit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the category name of the selected category record.
    /// </summary>
    /// <returns>
    /// The category name that was selected from the category lookup.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display EcoResCategoryName categoryName()
    {
        return this.procurementCategory().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCFOP</Name>
				<Source><![CDATA[
    /// <summary>
    /// It validates if CFOP is present in CFOPMatrix with the correct attributes
    /// (Operation ID, Transaction Type, Direction and Location)
    /// </summary>
    /// <returns>
    /// It returns true if it is valid.
    /// </returns>
    public boolean checkCFOP()
    {
        CFOPValidation_BR cfopValidation = CFOPValidation_BR::construct(this);

        return cfopValidation.checkCFOP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCFPS_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates CFPS entered is of type Purch or Both
    /// </summary>
    /// <returns>
    /// Returns false with error message if it is of type Sales else returns true.
    /// </returns>
    public boolean checkCFPS_BR()
    {
        boolean         ret = true;
        CFPSTable_BR    cfpsTable_BR;

        if (this.cfpsTable_BR)
        {
            cfpsTable_BR = CFPSTable_BR::find(this.cfpsTable_BR);

            if (cfpsTable_BR.cfpsTransactionType == SalesPurchBoth_BR::Sales)
            {
                ret = checkFailed("@GLS220587");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDelete</Name>
				<Source><![CDATA[
    public boolean checkDelete()
    {
        return this.checkUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSubmitOnBehalf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current employee is allowed to submit on behalf of another employee.
    /// </summary>
    /// <returns>
    /// true if the current employee can submit on behalf of the employee entered in the
    /// <c>Requisitioner</c> field; otherwise, false.
    /// </returns>
    boolean checkSubmitOnBehalf()
    {
        return PurchReqLine::checkOnBehalfAuthorization(this.purchReqTable().Originator, this.Requisitioner, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSubmitOnBehalfMyself</Name>
				<Source><![CDATA[
    boolean checkSubmitOnBehalfMyself()
    {
        return PurchReqLine::checkOnBehalfAuthorization(HcmWorkerLookup::currentWorker(), this.Requisitioner, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOnBehalfAuthorization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the Originator is authorized to purchase items on behalf of the Requisitioner.
    /// </summary>
    /// <param name = "_originator">The <c>PurchReqPreparerRefRecId</c> of the originator.</param>
    /// <param name = "_preparer">The <c>PurchReqPreparerRefRecId</c> of the requisitioner.</param>
    /// <param name = "_showWarning">A <c>boolean</c> indicating whether or not a warning should be shown if the originator is not authorized.</param>
    /// <returns>
    /// True if the Originator is authorized; otherwise, false.
    /// </returns>
    public static boolean checkOnBehalfAuthorization(PurchReqPreparerRefRecId _originator, PurchReqPreparerRefRecId _requisitioner, boolean _showWarning)
    {
        PurchReqAuthorizationOrigination    purchReqAuthorizationOrigination;
        boolean                             onBehalfAllowed;
        boolean                             ret = true;
        date                                validDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));

        if (_requisitioner == HcmWorkerLookup::currentWorker())
        {
            onBehalfAllowed = true;
        }
        else
        {
            select firstonly validtimestate(validDate) RecId from purchReqAuthorizationOrigination
                where purchReqAuthorizationOrigination.Originator == _originator
                    && purchReqAuthorizationOrigination.Requisitioner == _requisitioner;

            if (purchReqAuthorizationOrigination.RecId)
            {
                onBehalfAllowed = true;
                onBehalfAllowed = HcmWorker::workerStatusServer(_requisitioner) == HcmWorkerStatus::Employed;
            }
        }

        if (!onBehalfAllowed)
        {
            HcmPositionHierarchy        hcmPositionHierarchy;
            HcmPositionWorkerAssignment hcmParentPositionWorkerAssignment;

            select firstonly ParentPosition from hcmPositionHierarchy join hcmParentPositionWorkerAssignment
                where hcmPositionHierarchy.Position             == hcmParentPositionWorkerAssignment.Position       
                    && hcmPositionHierarchy.PositionHierarchyType  == HcmPositionHierarchyType::lineHierarchyType()    
                    && hcmParentPositionWorkerAssignment.Worker    == _requisitioner;

            PurchReqRequesterRefRecId purchReqRequesterRefRecId = HcmPosition::getWorker(hcmPositionHierarchy.ParentPosition);

            select firstonly validtimestate(validDate) RecId from purchReqAuthorizationOrigination
                where purchReqAuthorizationOrigination.Originator    == _originator
                    && purchReqAuthorizationOrigination.Requisitioner == purchReqRequesterRefRecId;

            if (purchReqAuthorizationOrigination.RecId)
            {
                onBehalfAllowed = true;
            }
            else
            {
                ret = _showWarning ? checkFailed("@SYS119444") : false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdate</Name>
				<Source><![CDATA[
    public boolean checkUpdate()
    {
        boolean ret = false;

        if (PurchReqRequisitionStatus::InReview)
        {
            ret = WorkflowWorkItem::isUserTaskOwner(this);

            if (!ret)
            {
                ret = WorkflowWorkItem::isUserApprovalOwner(this);
            }
        }

        if (!ret)
        {
            ret = this.purchReqTable().checkUpdate();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAddressReference</Name>
				<Source><![CDATA[
    public void clearAddressReference()
    {
        this.AddressRefRecId    = 0;
        this.AddressRefTableId  = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidationOpportunityId</Name>
				<Source><![CDATA[
    /// <summary>
    /// displays the ConsolidationOpportunityId of the selected the PR line.
    /// </summary>
    /// <returns>
    /// returns the ConsolidationOpportunityId of the selected the PR line.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display PurchReqConsolidationOpportunityId consolidationOpportunityId()
    {
        PurchReqConsolidation           purchReqConsolidation;
        PurchReqConsolidationLine       purchReqConsolidationLine;

        select firstonly ConsolidationOpportunityId from purchReqConsolidation
            join PurchReqConsolidationId,PurchReqLineID from purchReqConsolidationLine where purchReqConsolidationLine.PurchReqConsolidationId == purchReqConsolidation.RecId
                && purchReqConsolidationLine.PurchReqLineID == this.RecId;

        return purchReqConsolidation.ConsolidationOpportunityId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidationTargetedEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// displays the TargetedEndDate of the selected the PR line.
    /// </summary>
    /// <returns>
    /// returns the TargetedEndDate of the selected the PR line.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display EndDate consolidationTargetedEndDate()
    {
        PurchReqConsolidation           purchReqConsolidation;
        PurchReqConsolidationLine       purchReqConsolidationLine;

        select firstonly TargetedEndDate from purchReqConsolidation
            join PurchReqConsolidationId,PurchReqLineID from purchReqConsolidationLine where purchReqConsolidationLine.PurchReqConsolidationId == purchReqConsolidation.RecId
                && purchReqConsolidationLine.PurchReqLineID == this.RecId;

        return any2date(purchReqConsolidation.TargetedEndDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidationVendorQuoteNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// displays the VendorQuoteNumber of the selected the PR line.
    /// </summary>
    /// <returns>
    /// returns the VendorQuoteNumber of the selected the PR line.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display VendQuoteNumber consolidationVendorQuoteNumber()
    {
        PurchReqConsolidation           purchReqConsolidation;
        PurchReqConsolidationLine       purchReqConsolidationLine;

        select firstonly RecId from purchReqConsolidation
            join PurchReqConsolidationId,PurchReqLineID,NewVendorQuoteNumber from purchReqConsolidationLine
                where purchReqConsolidationLine.PurchReqConsolidationId == purchReqConsolidation.RecId &&
                      purchReqConsolidationLine.PurchReqLineID          == this.RecId;

        return purchReqConsolidationLine.NewVendorQuoteNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    void convertCurrencyCode(CurrencyCode _oldCurrencyCode, CurrencyCode _newCurrencyCode, TradeCurencyConversion _tradeCurrencyConversion = TradeCurencyConversion::ExchRate)
    {
        MarkupTrans markupTrans;

        ttsbegin;
        while select forupdate markupTrans where markupTrans.TransTableId == this.TableId && markupTrans.TransRecId == this.RecId && !markupTrans.IsDeleted
        {
            markupTrans.convertCurrencyCode(_newCurrencyCode);
            markupTrans.doUpdate();
        }

        this.PurchPrice             = ExchangeRateHelper::curPrice2CurPrice(this.PurchPrice, _oldCurrencyCode, _newCurrencyCode);
        this.LineDisc               = ExchangeRateHelper::curPrice2CurPrice(this.LineDisc, _oldCurrencyCode, _newCurrencyCode);
        this.PurchMarkup            = ExchangeRateHelper::curPrice2CurPrice(this.PurchMarkup, _oldCurrencyCode, _newCurrencyCode);
        this.LineAmount             = CurrencyExchangeHelper::curAmount2CurAmount(this.LineAmount, _oldCurrencyCode, _newCurrencyCode);

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            PurchReqLineTaxExtensionIN purchReqLineTaxExtensionIN = this.purchReqLineTaxExtensionIN();
            purchReqLineTaxExtensionIN.MaximumRetailPrice  = CurrencyExchangeHelper::curAmount2CurAmount(purchReqLineTaxExtensionIN.MaximumRetailPrice, _oldCurrencyCode, _newCurrencyCode);
            this.packPurchReqLineTaxExtensionIN(purchReqLineTaxExtensionIN);
        }
        // </GIN>
        this.CurrencyCode           = _newCurrencyCode;

        this.updateBasedOnTradeCurrencyConversion(_tradeCurrencyConversion);

        this.LineAmount = this.calcLineAmount();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBasedOnTradeCurrencyConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the line amounts, price and discounts based on <c>TradeCurencyConversion</c>.
    /// </summary>
    /// <param name = "_tradeCurrencyConversion">A trade currency conversion value.</param>
    [Hookable]
    private void updateBasedOnTradeCurrencyConversion(TradeCurencyConversion _tradeCurrencyConversion)
    {
        switch (_tradeCurrencyConversion)
        {
            case TradeCurencyConversion::ExchRate:
                break;

            case TradeCurencyConversion::TradeAgreements:
                this.salesPurchLineInterface().resetPriceAgreement();
                this.setPriceDisc(this.inventDim());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyBusinessJustification</Name>
				<Source><![CDATA[
    public PurchReqBusJustification copyBusinessJustification(RefTableId _refTableId, RefRecId _refRecId)
    {
        PurchReqBusJustification purchReqBusJustification;
        PurchReqBusJustification purchReqBusJustificationNew;

        select firstonly purchReqBusJustification where purchReqBusJustification.RefTableId == _refTableId && purchReqBusJustification.RefRecId == _refRecId;
        ttsbegin;
        if (purchReqBusJustification && this.RecId)
        {
            purchReqBusJustificationNew.RefTableId              = this.TableId;
            purchReqBusJustificationNew.RefRecId                = this.RecId;
            purchReqBusJustificationNew.BusinessJustification   = purchReqBusJustification.BusinessJustification;
            purchReqBusJustificationNew.insert();
        }
        ttscommit;
        return purchReqBusJustificationNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set that should be applied to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object previously instantiated using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this, this.BuyingLegalEntity)
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCancelEventAndDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the necessary accounting event to be used for reversing budget fund reservation.
    /// </summary>
    public void createCancelEventAndDistributions()
    {
        PurchReqInstrumentationLogger purchReqInstrumentationLogger = PurchReqLine::instrumentationLogger();

        using (var activityContextSourceDocument = purchReqInstrumentationLogger.requisitionLine().createCancelEventAndDistributions(this))
        {
            SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine);

            if (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Completed)
            {
                SourceDocumentLineProcessor::submitSourceDocumentLineImplementation(this, false, SourceDocumentLineAccountingStatus::Finalized);
            }
            else
            {
                BudgetControlSourceDocumentProcessor::submitSourceDocumentLineToRemoveBudget(sourceDocumentLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    public void createLine(boolean _validation = false, boolean _initFromInventTable = false)
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return;
        }

        if (_initFromInventTable)
        {
            InventTable inventTable = InventTable::find(this.ItemId);
            this.initFromInventTable(inventTable);
        }

        if (_validation && (!this.validateWrite()))
        {
            throw error("@SYS18447");
        }

        this.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupTrans</Name>
				<Source><![CDATA[
    void createMarkupTrans()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
            Markup::insertMarkupTrans(HeadingLine::Line,
                                      MarkupModuleType::Vend,
                                      this,
                                      this.VendAccount,
                                      VendTable::find(this.VendAccount).MarkupGroup,
                                      this.CurrencyCode,
                                      CompanyInfo::languageId(),
                                      this.ItemId,
                                      this.inventTable().purchMarkupGroup(),
                                     (this.LineAmount < 0));   // invert sign on credit notes

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            throw error("@SYS93835");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the associated <c>SourceDocumentLine</c> record.
    /// </summary>
    public void createSourceDocumentLine()
    {
        this.SourceDocumentLine = 0;
        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAddress</Name>
				<Source><![CDATA[
    private LogisticsLocation defaultAddress(InventDim _inventDim)
    {
        LogisticsLocation logisticsLocation;
        CompanyInfo companyInfo = CompanyInfo::findRecId(this.BuyingLegalEntity);
        LogisticsLocationRole logisticsLocationRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery);
        
        if (this.isDefaultAddressFromInventSite())
        {
            InventLocation inventLocation = InventLocation::find(_inventDim.InventLocationId);
            InventSite inventSite         = InventSite::find(_inventDim.InventSiteId);
        
            logisticsLocation = LogisticsLocationDefault::findSimpleDefault(inventLocation, logisticsLocationRole);

            if (!logisticsLocation)
            {
                logisticsLocation = LogisticsLocationDefault::findSimpleDefault(inventSite, logisticsLocationRole);
            }

            if (!logisticsLocation)
            {
                logisticsLocation = LogisticsLocationDefault::findSimpleDefault(companyInfo, logisticsLocationRole);
            }
        }
        else
        {
            logisticsLocation = LogisticsLocation::find(HcmWorkerTitle::findByWorker(this.Requisitioner).Location);

            if (!logisticsLocation)
            {
                HcmWorker hcmWorker = HcmWorker::find(this.Requisitioner);
                if (PurchReqLineUseDeliveryAddressForWorkersFeature::instance().isEnabled()
                    && PurchParameters::find().UseDeliveryAddress)
                {
                    LogisticsLocationDefault logisticsLocationDefault = LogisticsLocationDefault::construct(hcmWorker);
                    if (logisticsLocationDefault.defaultExists(logisticsLocationRole))
                    {
                        logisticsLocation = logisticsLocationDefault.getDefaultLocation(logisticsLocationRole);
                    }
                }
                else
                {
                    logisticsLocation = LogisticsLocationDefault::findSimpleDefault(hcmWorker, logisticsLocationRole);
                }
            }

            if (!logisticsLocation)
            {
                logisticsLocation = LogisticsLocationDefault::findSimpleDefault(companyInfo, logisticsLocationRole);
            }
        }

        return logisticsLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultAddressFromInventSite</Name>
				<Source><![CDATA[
    protected boolean isDefaultAddressFromInventSite()
    {
        return !this.isConsumption() 
                || (this.LineType == PurchReqLineType::Item && !PurchCORPolicyTable::findPolicy(this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAddressQuery</Name>
				<Source><![CDATA[
    public Query defaultAddressQuery()
    {
        Query                       query = new Query();
        QueryBuildDataSource        qbdsPostalAddress;
        InventDim                   inventDim2;
        InventLocation              inventLocation;
        InventSite                  inventSite;
        CompanyInfo                 companyInfo;
        HcmWorker                   hcmWorker;
        LogisticsLocationDefault    logisticsLocationDefault;
        RefRecId                    logisticsPostalAddressId;

        inventDim2      = InventDim::findInLegalEntity(this.InventDimId, this.InventDimIdDataArea);
        inventLocation  = InventLocation::find(inventDim2.InventLocationId);
        inventSite      = InventSite::find(inventDim2.InventSiteId);
        companyInfo     = CompanyInfo::findRecId(this.BuyingLegalEntity);
        hcmWorker       = HcmWorker::find(this.Requisitioner);

        qbdsPostalAddress = query.addDataSource(tableNum(LogisticsPostalAddress));

        if (this.LineType == PurchReqLineType::Item)
        {
            logisticsLocationDefault = LogisticsLocationDefault::construct(inventLocation);
            logisticsPostalAddressId = LogisticsPostalAddress::addressRecIdFromLocationRecId(logisticsLocationDefault.getPrimaryPostalLocation().RecId);
            qbdsPostalAddress.addRange(fieldNum(LogisticsPostalAddress, RecId)).value(queryValue(logisticsPostalAddressId));

            logisticsLocationDefault = LogisticsLocationDefault::construct(inventSite);
            logisticsPostalAddressId = LogisticsPostalAddress::addressRecIdFromLocationRecId(logisticsLocationDefault.getPrimaryPostalLocation().RecId);
            qbdsPostalAddress.addRange(fieldNum(LogisticsPostalAddress, RecId)).value(queryValue(logisticsPostalAddressId));

            logisticsLocationDefault = LogisticsLocationDefault::construct(companyInfo);
            logisticsPostalAddressId = LogisticsPostalAddress::addressRecIdFromLocationRecId(logisticsLocationDefault.getPrimaryPostalLocation().RecId);
            qbdsPostalAddress.addRange(fieldNum(LogisticsPostalAddress, RecId)).value(queryValue(logisticsPostalAddressId));
        }
        else
        {
            logisticsLocationDefault = LogisticsLocationDefault::construct(hcmWorker);

            if (SysDictTable::isTableMapped(tableNum(DirPartyMap), hcmWorker.TableId))
            {
                DirPartyMap partyMap = hcmWorker;
                DirPartyRecId partyRecId = partyMap.Party;

                LogisticsLocation location;
                DirPartyLocation  partyLocation;
                DirPartyLocationRole entityLocationRole;
                LogisticsLocationRole locationRole;

                while select RecId from location
                join RecId from partyLocation
                    where partyLocation.Location        == location.RecId
                       && partyLocation.Party           == partyRecId
                       && partyLocation.IsPostalAddress == NoYes::Yes
                        exists join entityLocationRole
                            where entityLocationRole.PartyLocation == partyLocation.RecId
                        exists join locationRole
                            where locationRole.RecId == entityLocationRole.LocationRole
                               && locationRole.Type  == LogisticsLocationRoleType::Delivery
                {
                    logisticsPostalAddressId = LogisticsPostalAddress::addressRecIdFromLocationRecId(location.RecId);
                    qbdsPostalAddress.addRange(fieldNum(LogisticsPostalAddress, RecId)).value(queryValue(logisticsPostalAddressId));
                }
            }

            if (PurchReqLineUseDeliveryAddressForWorkersFeature::instance().isEnabled()
                && PurchParameters::find().UseDeliveryAddress)
            {                
                if (!logisticsPostalAddressId)
                {
                    qbdsPostalAddress.addRange(fieldNum(LogisticsPostalAddress, RecId)).value(queryValue(logisticsPostalAddressId));
                }               
            }
            else
            {
                logisticsPostalAddressId = LogisticsPostalAddress::addressRecIdFromLocationRecId(logisticsLocationDefault.getPrimaryPostalLocation().RecId);
                qbdsPostalAddress.addRange(fieldNum(LogisticsPostalAddress, RecId)).value(queryValue(logisticsPostalAddressId));
            }            
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete(boolean _rearrangeSequence = true)
    {
        SequenceNumber sequenceNumber = this.SequenceNumber;
        PurchReqTable purchReqTable = PurchReqTable::find(this.PurchReqTable);

        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        if (!this.isInferredDraft())
        {
            throw error("@SYS333806");
        }

        PurchReqTable::throwIfRFQPending(false, this.RecId);

        PurchReqInstrumentationLogger purchReqInstrumentationLogger = PurchReqLine::instrumentationLogger();

        PurchReqLineInstrumentationActivities requisitionLineActivities = purchReqInstrumentationLogger.requisitionLine();
        
        using (var activityContext = requisitionLineActivities.delete(this))
        {
            requisitionLineActivities.logRequisitionLine(activityContext, this);

            super();

            PurchReqLineHistory::updateValidTo(this.RecId);
            TaxUncommitted::deleteForDocumentLine(this.TableId, this.RecId);
            this.deleteSourceDocumentLine();

            if (_rearrangeSequence)
            {
                purchReqTable.setLineSequence(sequenceNumber);
            }

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                this.markCurrentTaxDocumentTaxStatusDirty();
                TaxEnginePurchReqHeader::deleteByPurchReqLine(this);
            }

            if (TaxIntegrationUtils::isTransitDocumentEnabled())
            {
                this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the associated <c>SourceDocumentLine</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The ID of the <c>SourceDocumentLine</c> to be deleted; optional.
    /// </param>
    public void deleteSourceDocumentLine(RecId _sourceDocumentLine = this.SourceDocumentLine)
    {
        SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine,true);

        sourceDocumentLine.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display LogisticsAddressing deliveryAddress()
    {
        return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>RecId</c> value of the <c>LogisticsLocation</c> record that is associated with
    /// selected <c>DeliveryPostalAddress</c> record.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> value of the <c>LogisticsLocation</c> record that is associated with the selected
    /// <c>DeliveryPostalAddress</c> record.
    /// </returns>
    public LogisticsLocationRecId deliveryLocation()
    {
        return LogisticsPostalAddress::getLocation(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    public DiscAmount discAmount()
    {
        // Find discount amount. Multi line is not on requisition and is passed as 0
        return PriceDisc::discAmount(PurchParameters::find().Disc, this.LineDisc, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    public DiscPct discPercent()
    {
        // Find discount percentage. Multi line is not on requisition and is passed as 0
        return PriceDisc::discPercent(PurchParameters::find().Disc, this.LinePercent, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget check result value for the record.
    /// </summary>
    /// <returns>
    /// The budget check result value for the record.
    /// </returns>
    public display BudgetCheckResult displayBudgetCheckResult()
    {
        return this.getBudgetCheckResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayConsolidationOpportunityId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Display Purchase requisition consolidation opportunity ID.
    /// </summary>
    /// <returns>
    ///    The Purchase requisition consolidation opportunity ID corresponding to the record in <c>PurchReqLine</c> table.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display PurchReqConsolidationOpportunityId displayConsolidationOpportunityId()
    {
        return PurchReqConsolidation::find(PurchReqConsolidationLine::findByReqLineId(this.RecId).PurchReqConsolidationId).ConsolidationOpportunityId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayConsolidationStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Display Purchase requisition consolidation opportunity status.
    /// </summary>
    /// <returns>
    ///    The Purchase requisition consolidation opportunity status corresponding to the record in <c>PurchReqLine</c> table.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display PurchReqConsolidationActiveStatus displayConsolidationStatus()
    {
        return PurchReqConsolidation::find(PurchReqConsolidationLine::findByReqLineId(this.RecId).PurchReqConsolidationId).Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDiscountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the total discount for the line.
    /// </summary>
    /// <returns>
    /// The total discount for the line.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display DiscAmount displayDiscountAmount()
    {
        return this.calcLineDiscExclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the gross line amount, <c>((unit price * qty) + PurchMarkup)</c>, excludes discounts and
    /// taxes.
    /// </summary>
    /// <returns>
    /// The gross line amount.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display PurchLineAmount displayLineAmount()
    {
        SalesPurchTableInterface salesPurchTableInterface = this.salesPurchTable().salesPurchTableInterface();
        Percent         cashDiscPercent;
        PurchLineAmount lineAmount          = PriceDisc::price2Amount(this.PurchPrice,
                                                                      this.PriceUnit,
                                                                      this.discAmount(),
                                                                      this.PurchQty,
                                                                      this.PurchQty,
                                                                      this.PurchMarkup,
                                                                      this.discPercent(),
                                                                      this.CurrencyCode,
                                                                      0,
                                                                      false);
        if (TaxCashDiscountParametersHelper::isCashDiscDeductedBeforeTaxCalculation(this.purchReqTable().TableId, this.purchReqTable().RecId))
        {
            cashDiscPercent = CashDisc::find(salesPurchTableInterface.parmCashDisc()).Percent;
        }

        if (this.inclTax())
        {
            lineAmount = Tax::baseAmountExclTax(this.TaxGroup,
                                                this.TaxItemGroup,
                                                this.taxDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),
                                                this.CurrencyCode,
                                                lineAmount,
                                                salesPurchTableInterface.parmTaxModuleType(), 
                                                this.PurchQty,
                                                UnitOfMeasure::find(this.PurchUnitOfMeasure).Symbol,
                                                this.ItemId,
                                                TaxDirection::OutgoingTax,
                                                cashDiscPercent);
        }

        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMarkupTransAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the charges for the line.
    /// </summary>
    /// <returns>
    /// The charges for the line.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display MarkupAmount displayMarkupTransAmount()
    {
        MarkupAmount markupAmount;
        MarkupTrans markupTrans;
        MarkupTable markupTable;

        while select markupTrans
            where markupTrans.TransTableId == this.TableId
               && markupTrans.TransRecId == this.RecId
            join TableId from markupTable
                where markupTable.MarkupCode    == markupTrans.MarkupCode
                   && markupTable.VendType      == MarkupType::CustVend
        {
            // The markup related to the vendor always have the same currency as the requisition line, so no need to do currency conversion.
            markupAmount += Markup::calcMarkupAmount(markupTrans, this.PurchQty, this.LineAmount, 0, false);
        }

        return markupAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPurchAgreementHeaderstatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets purchase agreement status.
    /// </summary>
    /// <returns>
    ///    The purchase agreement status corresponding to the record in <c>PurchReqLine</c> table.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display AgreementState displayPurchAgreementHeaderstatus()
    {
        return PurchAgreementHeader::find(AgreementLine::find(this.PurchAgreement).Agreement).AgreementState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPurchReqProcessingResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays relevant icon for the purchase requisition line based on budget check and/or RequisitionStatus of the line.
    /// </summary>
    /// <returns>
    ///     Container with the appropriate icon.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display container displayPurchReqProcessingResult()
    {
        ImageReference                  imageReference;
        container                       imageContainer;

        PurchReqLineProcessingError     purchReqLineProcessingError;
        BudgetCheckResult               budgetCheckResult;
        ProjBudgetCheckResult           projBudgetCheckResult;

        if (this.isConsumption())
        {
            select RecId from purchReqLineProcessingError
                where   purchReqLineProcessingError.Type            != PurchReqLineProcessingErrorType::BudgetWarning
                    &&  purchReqLineProcessingError.Type            != PurchReqLineProcessingErrorType::ProjectBudgetWarning
                    &&  purchReqLineProcessingError.Type            != PurchReqLineProcessingErrorType::ProjectBudgetRevenueWarning
                    &&  purchReqLineProcessingError.PurchReqLine    == this.RecId;

            if (purchReqLineProcessingError)
            {
                imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::Error);
            }
            else
            {
                projBudgetCheckResult = this.getProjBudgetCheckResult();
                budgetCheckResult     = this.getBudgetCheckResult();

                if (budgetCheckResult == BudgetCheckResult::PassedWithWarnings || projBudgetCheckResult == ProjBudgetCheckResult::PassedWithWarnings)
                {
                    imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::Warning);
                }
                else if (this.RequisitionStatus == PurchReqRequisitionStatus::Approved || this.RequisitionStatus == PurchReqRequisitionStatus::Closed)
                {
                    if (!this.lineNotPosted())
                    {
                        imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::Accept);
                    }
                }
                else if (budgetCheckResult == BudgetCheckResult::Passed || projBudgetCheckResult == ProjBudgetCheckResult::Passed)
                {
                    imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::Accept);
                }
            }
        }

        if (imageReference)
        {
            imageContainer = imageReference.pack();
        }

        return imageContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the tax amount for the line.
    /// </summary>
    /// <returns>
    /// The tax amount for the line.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display TaxAmountCur displayTaxAmount()
    {
        TaxAmountCur taxAmount = this.salesPurchLineInterface().calcTaxAmount();

        MarkupTrans markupTrans;
        MarkupTable markupTable;
        while select markupTrans
            where markupTrans.TransTableId == this.TableId
               && markupTrans.TransRecId == this.RecId
            join TableId from markupTable
                where markupTable.MarkupCode    == markupTrans.MarkupCode
                   && markupTable.VendType      == MarkupType::CustVend
        {
            const boolean IncludeUseTax = true;
            const boolean UseTransactionalCurrency = true;
            // The markup related to the vendor always have the same currency as the requisition line, so no need to do currency conversion.
            taxAmount += TaxUncommitted::getActualTaxAmountForSourceLineWithCompany(markupTrans.TableId, markupTrans.RecId, IncludeUseTax, UseTransactionalCurrency);
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxationOrigin_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to display the Taxation Origin.
    /// </summary>
    /// <returns>
    /// Returns Taxation Origin.
    /// </returns>
    display FITaxationOrigin_BR displayTaxationOrigin_BR()
    {
        return this.inventTable().TaxationOrigin_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxFiscalClassification_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to display the Fiscal Classification Code.
    /// </summary>
    /// <returns>
    /// Returns fiscal Classification Code.
    /// </returns>
    display TaxFiscalClassificationId_BR displayTaxFiscalClassification_BR()
    {
        return this.inventTable().TaxFiscalClassification_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the total amount for the line.
    /// </summary>
    /// <returns>
    /// The total amount for the line.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display PurchLineAmount displayTotalAmount()
    {
        return this.displayLineAmount() +
               this.displayMarkupTransAmount() +
               this.displayTaxAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doDistributionsExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a check whether any distributions exist for a line
    /// </summary>
    /// <returns>
    ///    True, if the line has at least one distribution; otherwise false.
    /// </returns>
    /// <exception cref="M:exception::Warning">
    ///    This action can only be completed after the line number %1 is fully distributed.
    /// </exception>
    public boolean doDistributionsExist()
    {
        boolean             doDistributionsExist;
        SourceDocumentLine  sourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine);

        doDistributionsExist = SourceDocumentLineProvider::isLineDistributed(sourceDocumentLine, this);

        return doDistributionsExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editItemName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    /// <summary>
    ///     For non catalog item: Gets and sets the ItemIdNonCatalog.
    ///     For catalog item: Gets product name from invent table.
    /// </summary>
    /// <param name="set">
    ///     true if the reason code is set; otherwise, false.
    /// </param>
    /// <param name="_productName">
    ///     The new product name when <paramref name="set" /> is true.
    /// </param>
    /// <returns>
    ///     For non catalog item: ItemIdNonCatalog <c>ItemNameDisplay</c>.
    ///     For catalog item: product name <c>EcoResProductName</c> from invent table.
    /// </returns>
    public edit ItemNameDisplay editItemName(boolean set, ItemNameDisplay _productName)
    {
        ItemNameDisplay productName;

        if (set)
        {
            if (this.LineType == PurchReqLineType::Category)
            {
                this.ItemIdNonCatalog   = _productName;
                productName             = _productName;
            }
        }
        else
        {
            if (this.LineType == PurchReqLineType::Item && this.BuyingLegalEntity)
            {
                changecompany(this.buyingLegalEntity2DataArea())
                {
                    productName =  this.inventTable().itemName(this.inventDim());
                }
            }
            else
            {
                productName = this.ItemIdNonCatalog;
            }
        }

        return productName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPurchAgreementId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets purchase agreement id.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether a new requisitioner should be set.
    /// </param>
    /// <param name="_purchAgreementId">
    ///    The id of purchase agreement.
    /// </param>
    /// <returns>
    ///    The purchase agreement id corresponding to the record in <c>PurchReqLine</c> table.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    edit PurchAgreementId editPurchAgreementId(boolean _set, PurchAgreementId _purchAgreementId)
    {
        if (!this.PurchAgreement)
        {
            return "";
        }

        return PurchAgreementHeader::find(AgreementLine::find(this.PurchAgreement).Agreement).PurchNumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason code.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that specifies whether the reason code is set.
    /// </param>
    /// <param name="_reasonCode">
    /// The new reason code when the <paramref name="set" /> parameter is true.
    /// </param>
    /// <returns>
    /// The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCode(boolean set, ReasonCode _reasonCode)
    {
        ReasonCode      reasonCode = strLRTrim(_reasonCode);
        int64           originalReasonRefRecID;

        this.setDefaultCompany();

        if (set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (this.ReasonRefRecId == 0)
            {
                this.ReasonRefRecId = ReasonTableRef::createFromCode(reasonCode);
            }
            else
            {
                // updateCode() will delete the code in case the new value is blank
                this.ReasonRefRecId = ReasonTableRef::updateCode(reasonCode, this.ReasonRefRecId);
            }
        }
        else
        {
            reasonCode = ReasonTableRef::find(this.ReasonRefRecId).Reason;
        }

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluatePurchAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates the foreign key reference to <c>AgreementLine</c> table.
    /// </summary>
    private void evaluatePurchAgreement()
    {
        if (this.LineType == PurchReqLineType::External)
        {
            return;
        }

        if (!this.isPurchAgreementLineLinkValid())
        {
            this.PurchAgreement = 0;
        }

        // When the BudgetRetainGBROnPurchReqLineRFQAcceptFlight flight is removed, consider
        // removing this whole block. It is dead code. The if statement below causes
        // the logic for purchase agreements to be skipped if there is an agreement
        // associated to the Requisition. This is the opposite of what should have been
        // implemented. Since this code does nothing in either scenario, except 
        // unassigning the budget reservation line when it should not, the whole
        // block should probably be removed

        if (!this.PurchAgreement)
        {
            AgreementLine agreementLine = AgreementLine::findLineForAutoMatch(this, 0 , true);

            this.initFromAgreementLine(agreementLine);

            if (this.BudgetReservationLine_PSN && !BudgetRetainGBROnPurchReqLineRFQAcceptFlight::instance().isEnabled())
            {
                this.BudgetReservationLine_PSN = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existFirmedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether there is any firmed order line relating to the requisition line.
    /// </summary>
    /// <returns>
    /// true if relations to firmed order lines exist ; otherwise, false.
    /// </returns>
    public boolean existFirmedLine()
    {
        RequisitionLineFirmedOrderLine  requisitionLineFirmedOrderLine;

        select firstonly RecId from requisitionLineFirmedOrderLine
            where requisitionLineFirmedOrderLine.RequisitionLine == this.RecId;

        return requisitionLineFirmedOrderLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existActiveByRequisitioner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether there are any active purchase requisition lines for specific requisitioner.
    /// </summary>
    /// <param name="_requisitioner">The reference requisitioner of the <c>HcmWorker</c> record.</param>
    /// <returns>true if active purchase requisition lines exist; otherwise, false.</returns>
    public static boolean existActiveByRequisitioner(PurchReqRequesterRefRecId _requisitioner)
    {
        return (select firstonly RecId from PurchReqLine
                    where PurchReqLine.Requisitioner == _requisitioner
                        && PurchReqLine.RequisitionStatus != PurchReqRequisitionStatus::Cancelled
                        && PurchReqLine.RequisitionStatus != PurchReqRequisitionStatus::Closed).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forInventory</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display PurchReqForInventory forInventory()
    {
        if (this.LineType == PurchReqLineType::Item)
        {
            return this.inventTable().modelGroup().isStocked();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>BudgetCheckResult</c> value for the specified <c>PurchReqLine</c> record.
    /// </summary>
    /// <returns>
    /// A <c>BudgetCheckResult</c> value which is calculated using the query.
    /// </returns>
    public BudgetCheckResult getBudgetCheckResult()
    {
        return BudgetSourceSourceDocumentLine::findBudgetCheckResult(this.SourceDocumentLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfirmReceiptText</Name>
				<Source><![CDATA[
    display Name getConfirmReceiptText()
    {
        PurchLine            purchLineLocal, purchLine;
        PurchTable           purchTableLocal;
        PurchReqLine         purchReqLine;
        Name                 returnValue = '';

        select RecId from purchLine
            join RecId from purchReqLine
                where  purchReqLine.LineRefId == purchLine.PurchReqLineRefId
                    && purchReqLine.RecId     == this.RecId;

        select RemainPurchPhysical, Recid from purchLineLocal
            where   purchLineLocal.Requester                == DirPersonUserEx::findUserWorkerReference()
                &&  purchLineLocal.Requester                != 0
                &&  purchLineLocal.RemainPurchPhysical      >  0
                &&  purchLineLocal.PurchaseType             == PurchaseType::Purch
                &&  purchLineLocal.PurchStatus              == PurchStatus::Backorder
            exists join RecId from purchTableLocal
            where   purchLineLocal.PurchId                  == purchTableLocal.PurchId
                &&  purchLineLocal.RecId                    == purchLine.RecId
                &&  purchTableLocal.DocumentState           == VersioningDocumentState::Confirmed;

        if (PurchCORPolicyTable::decentralized(purchLineLocal))
        {
            if (purchLineLocal.RemainPurchPhysical >= PurchReqLine::corRemainPurchQty(purchLineLocal.RecId))
            {
                returnValue = "@SYS332465";
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>corRemainPurchQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the remaining quantity.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID for which to calculate the quantity.
    /// </param>
    /// <returns>
    ///    The currently rejected quantity.
    /// </returns>
    private static Qty corRemainPurchQty(RefRecId _recId)
    {
        PurchCORRejectsTable    purchCORRejectsTable;
        PurchLine               purchLine;

        select sum(Qty) from purchCORRejectsTable
            where purchCORRejectsTable.RejectStatus == PurchCORRejectStatus::Rejected
            exists join InventTransId, RecId from purchLine
                where purchLine.InventTransId == purchCORRejectsTable.InventTransId
                   && purchLine.RecId         == _recId;

        return purchCORRejectsTable.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKmVirtualNetworkAnswerTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a record in <c>KmVirtualNetworkAnswerTable</c> table if a questionnaire has been completed.
    /// </summary>
    /// <param name="_kmCollectionId">
    ///    Reference to a record in <c>KMCollection</c> table.
    /// </param>
    /// <returns>
    ///    A record in <c>KmVirtualNetworkAnswerTable</c> table.
    /// </returns>
    public KMVirtualNetworkAnswerTable getKmVirtualNetworkAnswerTable(KMCollectionId _kmCollectionId)
    {
        PurchReqLineQuestionnaireResponse   purchReqLineQuestionnaireResponse;
        KMVirtualNetworkAnswerTable         kmVirtualNetworkAnswerTable;

        select firstonly RecId from purchReqLineQuestionnaireResponse where
                purchReqLineQuestionnaireResponse.PurchReqLine            == this.RecId
            join kmVirtualNetworkAnswerTable where
                kmVirtualNetworkAnswerTable.KmCollectionId                == _kmCollectionId                                                 &&
                kmVirtualNetworkAnswerTable.KmVirtualNetworkAnswerTableId == purchReqLineQuestionnaireResponse.kmVirtualNetworkAnswerTableId &&
                kmVirtualNetworkAnswerTable.DataAreaId                    == purchReqLineQuestionnaireResponse.kmVirtualNetworkAnswerTableIdDataArea;

        return kmVirtualNetworkAnswerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMiscChargesAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets charges amount.
    /// </summary>
    /// <returns>
    /// The charges amount.
    /// </returns>
    public Amount getMiscChargesAmount_IN()
    {
        return this.SalesPurchJournalLine::getMiscChargesAmountPlusLineAmount(this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderModifiedDate</Name>
				<Source><![CDATA[
    display ValidFromDateTime getOrderModifiedDate()
    {
        PurchReqLine        purchReqLine;
        PurchReqLineHistory purchReqLineHistory;
        PurchLineHistory    purchLineHistory;
        PurchLine           purchLine;
        ValidFromDateTime   orderCreatedDateTime;

        if (this.PurchId == '')
        {
            // if purchase order line does not exist for the select purch req id
            select firstonly RecId, PurchReqLine, CreatedDateTime from purchReqLineHistory
                join RecId from purchReqLine
                    where purchReqLineHistory.PurchReqLine == this.RecId;

            //if purchreqline has history then get latest datetime
            if (purchReqLineHistory)
            {
                orderCreatedDateTime = purchReqLineHistory.CreatedDateTime;
            }
            else
            {
                orderCreatedDateTime = this.CreatedDateTime;
            }
        }
        else
        {
            //if purchline exist for selected purchreqline then look for purchlinehistory
            select firstonly RecId, InventTransId, CreatedDateTime from purchLineHistory
                join RecId from purchReqLine
                    where purchLineHistory.PurchReqLineRefId == this.LineRefId;

            //if purchlinehistory exists for the current selected purchline record get latest datetime
            if (purchLineHistory)
            {
                orderCreatedDateTime = purchLineHistory.CreatedDateTime;
            }
            else
            {
                // get latest datetime from purchline for the selected purchreqline
                select firstonly RecId,PurchReqLineRefId, CreatedDateTime from purchLine
                    join RecId from purchReqLine
                        where purchLine.PurchReqLineRefId == purchReqLine.LineRefId
                            && purchReqLine.RecId == this.RecId;

                orderCreatedDateTime = purchLine.CreatedDateTime;
            }
        }
        return orderCreatedDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderStatus</Name>
				<Source><![CDATA[
    display CatPurchaseStatus getOrderStatus()
    {
        PurchReqLine purchReqLine;
        PurchLine purchLine;
        PurchTable purchTable;
        CatPurchaseStatus statusShownToUser;

        if (this.PurchId == '')
        {
            switch (this.RequisitionStatus)
            {
                case PurchReqRequisitionStatus::Draft:
                    statusShownToUser = CatPurchaseStatus::RequestCreated;
                    break;

                case PurchReqRequisitionStatus::InReview:
                    statusShownToUser=CatPurchaseStatus::RequestCreated;
                    break;

                case PurchReqRequisitionStatus::Approved:
                    statusShownToUser=CatPurchaseStatus::RequestApproved;
                    break;

                case PurchReqRequisitionStatus::Closed:
                    statusShownToUser=CatPurchaseStatus::RequestApproved;
                    break;
            }
        }
        else
        {
            select firstonly DocumentState, PurchId from purchTable
                    join RecId, PurchId, PurchStatus from purchLine
                    join RecId from purchReqLine
                        where purchReqLine.PurchId == purchLine.PurchId
                            && purchLine.PurchId == purchTable.PurchId
                            && purchReqLine.RecId == this.RecId;

            if (purchLine.isReceived())
            {
                statusShownToUser = CatPurchaseStatus::OrderReceived;
            }
            else
            {
                switch (purchTable.DocumentState)
                {
                    case VersioningDocumentState::Draft:
                        statusShownToUser = CatPurchaseStatus::OrderCreated;
                        break;

                    case VersioningDocumentState::InReview:
                        statusShownToUser = CatPurchaseStatus::OrderCreated;
                        break;

                    case VersioningDocumentState::Approved:
                        statusShownToUser = CatPurchaseStatus::OrderApproved;
                        break;

                    case VersioningDocumentState::Confirmed:
                        statusShownToUser = CatPurchaseStatus::OrderSentToVendor;
                        break;
                }
            }
        }
        return statusShownToUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>ProjBudgetCheckResult</c> value for the specified <c>PurchReqLine</c> record.
    /// </summary>
    /// <returns>
    /// A <c>ProjBudgetCheckResult</c> value that is calculated by using the query.
    /// </returns>
    public ProjBudgetCheckResult getProjBudgetCheckResult()
    {
        return ProjBudgetTransactionManager::getProjBudgetSourceCheckResult(this.SourceDocumentLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>TaxGroup</c> that should be associated with the line
    /// </summary>
    /// <param name="_vendTable">
    /// The <c>VendTable</c> the logic should be based on
    /// </param>
    /// <returns>
    /// The <c>TaxGroup</c> that should be associated with the line
    /// </returns>
    public TaxGroup getTaxGroup(VendTable _vendTable)
    {
        TaxGroup taxGroup;

        if (this.DeliveryPostalAddress)
        {
            DlvTerm dlvTerm = DlvTerm::find(_vendTable.DlvTerm);

            if (dlvTerm.TaxLocationRole == LogisticsLocationRoleType::Delivery)
            {
                taxGroup = LogisticsLocationExt::find(LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress).Location).TaxGroup;
            }
        }

        if (!taxGroup)
        {
            taxGroup = _vendTable.TaxGroup;
        }

        return taxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitPrice</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(false)]
    display PurchReqPrice getUnitPrice()
    {
        if (this.LineType == PurchReqLineType::Item)
        {
            return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Purch).price();
        }
        return this.PurchPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean inclTax()
    {
        return this.salesPurchLineInterface().inclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStandardQuantity</Name>
				<Source><![CDATA[
    private QtyStandard getStandardQuantity(InventTable _inventTable, InventDim _inventDim)
    {
        return this.isConsumption() ? _inventTable.purchStandardQty(_inventDim.InventDimId) : _inventTable.inventStandardQty(_inventDim.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetProcessedRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset rule for the current line.
    /// </summary>
    /// <returns></returns>
    public AssetProcessedRule assetProcessedRule()
    {
        container assetRules;
        if (!this.ProjId)
        {
            assetRules = this.findAndProcessRule();
        }
        return AssetProcessedRule::construct(assetRules);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndProcessRule</Name>
				<Source><![CDATA[
    public container findAndProcessRule()
    {
        return AssetRule::findAndProcessRule(
            this.ProcurementCategory,
            this.TransDate,
            this.CurrencyCode,
            this.PurchPrice,
            this.BuyingLegalEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAssetGroup</Name>
				<Source><![CDATA[
    public container initAssetGroup()
    {
        boolean   qualifierApplicable;
        str       qualifierQuestion;

        if (isConfigurationkeyEnabled(configurationKeyNum(Asset)) && this.ProcurementCategory && this.TransDate && this.CurrencyCode)
        {
            boolean assetRuleExists;
            boolean blankAssetGroupOnlyForConfigRuleFlight = PurchReqLineBlankAssetGroupOnlyForConfigRuleFlight::instance().isEnabled();

            if (blankAssetGroupOnlyForConfigRuleFlight)
            {
                assetRuleExists = AssetRule::existsAssetRuleForCategory(this.ProcurementCategory,
                    this.TransDate,
                    this.CurrencyCode,
                    this.PurchPrice,
                    this.BuyingLegalEntity);
            }

            if (!blankAssetGroupOnlyForConfigRuleFlight
                || assetRuleExists)
            {
                this.AssetGroup         = "";
                this.AssetGroupDataArea = "";
            }
            this.ReasonRefRecId = 0;
            var assetProcessedRule = this.assetProcessedRule();

            if (assetProcessedRule.isActive())
            {
                if (!assetProcessedRule.hasQualifier())
                {  
                    this.AssetGroup = assetProcessedRule.qualifierAssetGroup();
                    this.setDataAreaForModifiedField(fieldNum(PurchReqLine, AssetGroup));
                }
                else
                {
                    qualifierApplicable = true;
                    qualifierQuestion = assetProcessedRule.qualifierText();

                    this.setAssetRuleQualifierOptionFromQualifierString(this.selectedQualifierText(), assetProcessedRule);
                }
            }
        }

        return [qualifierApplicable, qualifierQuestion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCatalogItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new purchase requisition line with the item that is selected from the catalog.
    /// </summary>
    /// <param name="_catalogItem">
    ///    The product catalog item selected.
    /// </param>
    /// <param name="_lineNum">
    ///    The line number for a new purchase requisition line.
    /// </param>
    /// <param name="_sequenceNumber">
    ///    The sequence number for a new purchase requisition line.
    /// </param>
    /// <param name="_currencyCode">
    ///    The currency code that will be used on a new purchase requisition line.
    /// </param>
    public void initCatalogItem(InventTable     _catalogItem,
                                LineNum         _lineNum,
                                SequenceNumber  _sequenceNumber,
                                CurrencyCode    _currencyCode)
    {
        InventTable inventTable = _catalogItem;

        this.Name            = inventTable.itemName();
        this.ItemId          = _catalogItem.ItemId;
        this.ItemIdDataArea  = _catalogItem.DataAreaId;

        this.setInventDimIdFromInventDim(this.inventDim());

        this.initFromInventTable(inventTable, true, false);

        EcoResCategory ecoResCategory = EcoResProductCategory::findCategoryByProduct(inventTable.Product);
        this.initFromEcoResCategory(ecoResCategory.RecId);

        this.setAddressFromInventDim(this.inventDim());

        UnitOfMeasureSymbol symbol = this.isConsumption() ?inventTable.purchUnitId() : inventTable.inventUnitId();

        this.PurchUnitOfMeasure     = UnitOfMeasure::unitOfMeasureIdBySymbol(symbol);
        this.LineNum                = _lineNum;
        this.SequenceNumber         = _sequenceNumber;
        this.LineType               = PurchReqLineType::Item;
        PurchQty purchQty           = this.isConsumption() ? inventTable.purchStandardQty(this.InventDimId)
                                                           : inventTable.inventStandardQty(this.InventDimId);

        this.PurchQty               = max(purchQty, 1);
        this.modifiedField(fieldNum(PurchReqLine,PurchQty));

        if (this.VendAccount != this.orig().VendAccount)
        {
            this.modifiedField(fieldNum(PurchReqLine,VendAccount));
        }

        this.LineRefId = newGuid();

        if (this.isConsumption())
        {
            this.initFromVendExternalItemDescription(this.inventDim());
        }
        this.setDefaultDimension();

        if (this.ProjId)
        {
            this.setProjSalesPrice();
        }

        if (!this.CurrencyCode && this.isConsumption())
        {
            this.CurrencyCode = _currencyCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PurchReqLine</c> record from the <c>AgreementLine</c> record.
    /// </summary>
    /// <param name="_agreementLine">
    /// The <c>AgreementLine</c> record from which to initialize the <c>PurchReqLine</c> record.
    /// </param>
    public void initFromAgreementLine(AgreementLine _agreementLine)
    {
        if (_agreementLine)
        {
            this.PurchAgreement = _agreementLine.RecId;
            this.salesPurchLineInterface().setAgreementQtyAndPrice(_agreementLine, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxItemGroup</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void initTaxItemGroup(RefRecId _categoryRecId)
    {
        if (!this.TaxItemGroup)
        {
            TaxItemGroupHeading taxItemGroupHeading = EcoResCategory::getProcurementCategoryItemTaxGroup(_categoryRecId, this.BuyingLegalEntity);
            if (taxItemGroupHeading)
            {
                this.TaxItemGroup = taxItemGroupHeading.TaxItemGroup;
                this.setDataAreaForModifiedField(fieldNum(PurchReqLine, TaxItemGroup));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEcoResCategory</Name>
				<Source><![CDATA[
    void initFromEcoResCategory(RefRecId _categoryRecId)
    {
        this.ProcurementCategory = _categoryRecId;

        this.initTaxItemGroup(_categoryRecId);

        if (this.ProjId)
        {
            ProjInventJournalTransMapForm::construct(this).initFromEcoResCategory(this.procurementCategory());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromForecastSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a purchase requisition line from a forecast sales line.
    /// </summary>
    /// <param name = "_forecastSales"><c>ForecastSales</c> record to initialize from.</param>
    /// <param name = "_copyPrecisely">Boolean determining if Name should be copied; defaults to true</param>
    /// <param name = "_copyPriceDisc">Boolean determining if price and discount should be initialized; defaults to true</param>
    /// <param name = "_copyQty">Boolean determining if quantity and purchase unit should be copied; defaults to true</param>
    /// <param name = "_qty">Quantity to initialize from; defaults to SalesQty from _forecastSales.</param>
    public void initFromForecastSales(ForecastSales _forecastSales,
                                        boolean     _copyPrecisely = true,
                                        boolean     _copyPriceDisc = true,
                                        boolean     _copyQty       = true,
                                        Qty         _qty           = _forecastSales.SalesQty)
    {
        InventTable tInvent = InventTable::find(_forecastSales.ItemId);

        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return;
        }

        this.ItemId                 = _forecastSales.ItemId;
        this.CurrencyCode           = _forecastSales.Currency;
        // init from invent table
        this.ProjCategoryId         = tInvent.ProjCategoryId;
        this.PurchUnitOfMeasure     = UnitOfMeasure::unitOfMeasureIdBySymbol(tInvent.purchUnitId());
        this.ProjSalesUnitOfMeasure = UnitOfMeasure::unitOfMeasureIdBySymbol(tInvent.salesUnitId());

        this.Name               = tInvent.itemName();

        this.PurchQty           = this.PurchQty
                                ? this.PurchQty
                                : this.getStandardQuantity(tInvent, this.inventDim());

        this.LineAmount        = 0;
        this.calcLineAmount();

        if (_copyQty)
        {
            this.PurchQty    = _qty;
            this.PurchUnitOfMeasure   = UnitOfMeasure::unitOfMeasureIdBySymbol(_forecastSales.SalesUnitId);
        }

        if (_copyPriceDisc)
        {
            this.PurchPrice = _forecastSales.CostPrice;
            // The LineAmount should be calculated like this: Quantity*CostPrice.
            this.LineAmount = this.PurchQty * this.PurchPrice;

            // Copy the SalePrice from the budget lines to the Purchase Request.
            this.ProjSalesPrice = _forecastSales.SalesPrice;
        }

        if (_copyPrecisely)
        {
            this.Name       = _forecastSales.itemName();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Updates the <c>PurchReqLine</c> record based on the given item.
    /// </summary>
    /// <param name = "_inventTable">The <c>InventTable</c> buffer to initialize from.</param>
    /// <param name = "_initInventDim">A boolean that specifies whether to initialize inventory dimensions; optional.</param>
    /// <param name = "_initVendAccount">A boolean that specifies whether to initialize vendor account related fields; optional.</param>
    /// <param name = "_executeOnlyIfProductIsFullySpecified">A boolean value indicating whether to perform variant validation; optional.</param>
    public void initFromInventTable(InventTable _inventTable, boolean _initInventDim = true, boolean _initVendAccount = true, boolean _executeOnlyIfProductIsFullySpecified = false)
    {
        this.initReleasedProductSpecificDefaulting(_inventTable);

        InventDim inventDim = InventDim::findOrCreate(this.inventDim());
        if (!_executeOnlyIfProductIsFullySpecified || InventDistinctProductValidator::construct().isDistinctProductFullySpecified(_inventTable.ItemId, inventDim))
        {
            if (_initInventDim)
            {
                if (_inventTable)
                {
                    inventDim.initFromInventTable(_inventTable, this.getInventItemOrderSetupType(), inventDim);
                }
                this.setInventDimIdFromInventDim(inventDim);
            }
            this.initDimensionsSpecificDefaulting(_inventTable, _initVendAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventItemOrderSetupType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the type of inventory item order setup based on consumption.
    /// </summary>
    /// <returns>Returns the type of inventory item order setup.</returns>
    public InventItemOrderSetupType getInventItemOrderSetupType()
    {
        return this.isConsumption() ? InventItemOrderSetupType::Purch : InventItemOrderSetupType::Invent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns module type based on consumption setting.
    /// </summary>
    /// <returns>Module type.</returns>
    public ModuleInventPurchSales moduleType()
    {
        return this.isConsumption() ? ModuleInventPurchSales::Purch : ModuleInventPurchSales::Invent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceDisc</Name>
				<Source><![CDATA[
    void initFromPriceDisc(PriceDisc_Price _priceDisc, PriceDiscPolicyCheckPolicy _checkPolicy = null, boolean _initDateFields = true)
    {
        SchedDate           schedDate;
        WorkCalendarSched   workCalendarSched;

        this.PurchPrice  = _priceDisc.price();
        this.PriceUnit   = _priceDisc.priceUnit();
        this.PurchMarkup = _priceDisc.priceMarkup();

        if (!this.RequiredDate)
        {
            this.RequiredDate = PurchReqTable::find(this.PurchReqTable).RequiredDate;
        }

        if (_priceDisc.deliveryDays())
        {
            if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
            {
                this.calculateRequiredDate(
                    DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                    SchedDirection::Forward, 
                    _priceDisc.deliveryDays(), 
                    _priceDisc.calendarDays());
            }
            else
            {
                workCalendarSched = new WorkCalendarSched();
                schedDate = workCalendarSched.schedDate(SchedDirection::Forward,
                                                        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                        _priceDisc.deliveryDays(),
                                                        _priceDisc.calendarDays(),
                                                        VendTable::find(this.VendAccount).PurchCalendarId,
                                                        '');

                this.RequiredDate = max(schedDate, this.RequiredDate);
            }
        }
        else 
        {
            this.calculateRequiredDate(PurchReqTable::find(this.PurchReqTable).RequiredDate);
        }

        this.setTransDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateRequiredDate</Name>
				<Source><![CDATA[
    internal void recalculateRequiredDate()
    {
        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            PriceDisc_Price priceDisc = this.salesPurchLineInterface().priceDisc_PriceCache();

            if ((this.isConsumption() || !PurchReqLineConsumptionRecalculateDateFlight::instance().isEnabled())
                && priceDisc.deliveryDays())
            {
                this.calculateRequiredDate(
                        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                        SchedDirection::Forward, 
                        priceDisc.deliveryDays(), 
                        priceDisc.calendarDays());
            }
            else
            {
                this.calculateRequiredDate(PurchReqTable::find(this.PurchReqTable).RequiredDate);
            }

            this.setTransDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the category of the journal line with the default category of the project activity passed in as a parameter.
    /// </summary>
    /// <param name="_projActivity">
    ///    The project activity used to initialize the category of the journal line.
    /// </param>
    public void initFromProjActivity(ProjActivity _projActivity)
    {
        if (!_projActivity || !_projActivity.CategoryDefault ||
                ProjCategory::find(_projActivity.CategoryDefault).CategoryType != ProjCategoryType::Item)
        {
            return;
        }

        this.ProjCategoryId = _projActivity.CategoryDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    public void initFromProjTable(ProjTable _projTable)
    {
        InventTable         inventTable;
        InventTableModule   inventTableModule;
        PriceMarkup         markUpDummy;
        PriceUnit           salesUnitDummy;

        this.ProjId = _projTable.ProjId;
       
        ProjInventJournalTransMapForm projInventJournalTransMapForm = ProjInventJournalTransMapForm::construct(this);
        this.setProjCategory(projInventJournalTransMapForm);
        
        this.setDataAreaForModifiedField(fieldNum(PurchReqLine, ProjId));

        projInventJournalTransMapForm.initFromProjTable(_projTable);
        this.setDataAreaForModifiedField(fieldNum(PurchReqLine, ProjLinePropertyId));
        this.setDataAreaForModifiedField(fieldNum(PurchReqLine, ProjTaxGroupId));

        this.ProjSalesCurrencyId = _projTable.currencyId();
        inventTable = this.inventTable();
        if (inventTable)
        {
            inventTableModule           = InventTableModule::find(this.ItemId,ModuleInventPurchSales::Sales);

            this.setDataAreaForModifiedField(fieldNum(PurchReqLine, ProjCategoryId));

            this.ProjSalesUnitOfMeasure = UnitOfMeasure::unitOfMeasureIdBySymbol(inventTableModule.UnitId);

            if (ProjMultipleContractLinesForProjectFeatureHelper::isInternalProject(_projTable))
            {
                this.ProjSalesPrice     = 0;
            }
            else
            {
                [this.ProjSalesPrice,
                salesUnitDummy,
                markUpDummy]   = this.inventTable().salesPriceAgreement(
                                    this.RequiredDate,
                                    this.inventDim(),
                                    this.PurchQty,
                                    this.inventTable().inventUnitId(),
                                    _projTable.CustAccount,
                                    this.ProjSalesCurrencyId,
                                    ProjTable::findPriceGroup(_projTable.ProjId));
            }
        }
        else
        {
            if (!this.ProjSalesUnitOfMeasure && this.PurchUnitOfMeasure)
            {
                this.ProjSalesUnitOfMeasure = this.PurchUnitOfMeasure;
            }
            if (!this.ProjSalesPrice && ProjParameters::find().DefaultCostPriceAsSalesPrice)
            {
                this.setProjSalesPrice();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchReqLine</Name>
				<Source><![CDATA[
    public void initFromPurchReqLine(PurchReqLine _purchReqLine)
    {
        this.BuyingLegalEntity  = _purchReqLine.BuyingLegalEntity;
        this.RequisitionPurpose = _purchReqLine.RequisitionPurpose;

        if (_purchReqLine.LineType == PurchReqLineType::Item)
        {
            InventTable inventTable         = InventTable::find(_purchReqLine.ItemId);
            this.initFromInventTable(inventTable, true, false);
            EcoResCategory ecoResCategory   = EcoResProductCategory::findCategoryByProduct(inventTable.Product);
            this.ProcurementCategory        = ecoResCategory.RecId;
        }

        else
        {
            this.PurchMarkup                = _purchReqLine.PurchMarkup;
            this.PurchPrice                 = _purchReqLine.PurchPrice;
            this.PriceUnit                  = _purchReqLine.PriceUnit;
            this.LineDisc                   = _purchReqLine.LineDisc;
            this.LinePercent                = _purchReqLine.LinePercent;
            this.LineAmount                 = _purchReqLine.LineAmount;
            this.initFromEcoResCategory(_purchReqLine.ProcurementCategory);
        }

        this.InventDimId                = _purchReqLine.InventDimId;
        this.InventDimIdDataArea        = _purchReqLine.InventDimIdDataArea;
        this.ItemId                     = _purchReqLine.ItemId;
        this.ItemIdNonCatalog           = _purchReqLine.ItemIdNonCatalog;
        this.ItemIdDataArea             = _purchReqLine.ItemIdDataArea;
        this.PurchUnitOfMeasure         = _purchReqLine.PurchUnitOfMeasure;

        this.PurchQty                   = _purchReqLine.PurchQty;
        this.LineType                   = _purchReqLine.LineType;
        this.modifiedField(fieldNum(PurchReqLine,PurchQty));
        this.Name                       = _purchReqLine.Name;
        this.LineRefId                  = _purchReqLine.LineRefId;
        this.VendAccount                = _purchReqLine.VendAccount;
        this.VendAccountDataArea        = _purchReqLine.VendAccountDataArea;
        this.CurrencyCode               = _purchReqLine.CurrencyCode;
        this.LineComplete               = _purchReqLine.LineComplete;
        this.Attention                  = _purchReqLine.Attention;
        this.ExternalItemId             = _purchReqLine.ExternalItemId;
        this.url                        = _purchReqLine.url;
        this.Requisitioner              = _purchReqLine.Requisitioner;
        this.DefaultDimension           = _purchReqLine.DefaultDimension;

        if (PurchReqLineCopyTaxGroupFromAddressFlight::instance().isEnabled())
        {
            this.AddressRefRecId            = _purchReqLine.AddressRefRecId;
            this.AddressRefTableId          = _purchReqLine.AddressRefTableId;
        }

        this.DeliveryPostalAddress      = _purchReqLine.DeliveryPostalAddress;
        this.DeliveryName               = _purchReqLine.DeliveryName;
        this.InventLocationId           = _purchReqLine.InventLocationId;
        this.IsSaved                    = _purchReqLine.IsSaved;
        this.BusinessJustification      = _purchReqLine.BusinessJustification;
        this.ReceivingOperatingUnit     = _purchReqLine.ReceivingOperatingUnit;

        if (this.isConsumption())
        {
            if (_purchReqLine.ProjId)
            {
                this.ProjId                     = _purchReqLine.ProjId;
                this.ProjIdDataArea             = _purchReqLine.ProjIdDataArea;
                this.ActivityNumber             = _purchReqLine.ActivityNumber;
                this.ActivityNumberDataArea     = _purchReqLine.ActivityNumberDataArea;
                this.ProjCategoryId             = _purchReqLine.ProjCategoryId;
                this.ProjCategoryIdDataArea     = _purchReqLine.ProjCategoryIdDataArea;
                this.ProjLinePropertyId         = _purchReqLine.ProjLinePropertyId;
                this.ProjLinePropertyIdDataArea = _purchReqLine.ProjLinePropertyIdDataArea;
                this.ProjSalesCurrencyId        = _purchReqLine.ProjSalesCurrencyId;
                this.ProjSalesUnitOfMeasure     = _purchReqLine.ProjSalesUnitOfMeasure;
                this.ProjSalesPrice             = _purchReqLine.ProjSalesPrice;
                this.ProjTaxGroupId             = _purchReqLine.ProjTaxGroupId;
                this.ProjTaxGroupIdDataArea     = _purchReqLine.ProjTaxGroupIdDataArea;
                this.ProjTaxItemGroupId         = _purchReqLine.ProjTaxItemGroupId;
                this.ProjTaxItemGroupIdDataArea = _purchReqLine.ProjTaxItemGroupIdDataArea;
            }

            this.initTransDate();
            this.initAssetGroup();

            // Sales Tax must not be copied over and must be defaulted for all line types.
            this.TaxItemGroup                   = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch).TaxItemGroupId;
            this.setDataAreaForModifiedField(fieldNum(PurchReqLine, TaxItemGroup));

            if (!this.TaxItemGroup)
            {
                this.TaxItemGroup               = EcoResCategory::getProcurementCategoryItemTaxGroup(this.ProcurementCategory, this.BuyingLegalEntity).TaxItemGroup;
                this.setDataAreaForModifiedField(fieldNum(PurchReqLine, TaxItemGroup));
            }

            this.setTaxGroup();
            if (PurchReqLineCopyTaxGroupFromAddressFlight::instance().isEnabled() && _purchReqLine.LineType == PurchReqLineType::Item)
            {
                this.setTaxGroupFromAddress(this.AddressRefRecId);
            }
           
            this.setOverrideSalesTax();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchReqTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies initial values from a purchase requisition header to a purchase requisition line.
    /// </summary>
    /// <param name="_purchReqTable">
    ///    The purchase requisition header from which to initiate the requisition line.
    /// </param>
    /// <remarks>
    ///    The <c>InventDimId</c> of the purchase requisition line is set in the header setup.
    /// </remarks>
    public void initFromPurchReqTable(PurchReqTable _purchReqTable)
    {
        this.PurchReqTable              = _purchReqTable.RecId;
        this.RequisitionStatus          = PurchReqRequisitionStatus::Draft;
        this.RequiredDate               = _purchReqTable.RequiredDate;
        this.BusinessJustification      = _purchReqTable.BusinessJustification;
        this.Requisitioner              = _purchReqTable.Originator;
        this.RequisitionPurpose         = _purchReqTable.RequisitionPurpose;

        InventDim inventDim = this.inventDim();
        if (inventDim)
        {
            this.setInventDimIdFromInventDim(inventDim);
        }

        if (_purchReqTable.ProjId && _purchReqTable.ProjIdDataArea)
        {
            changecompany(_purchReqTable.ProjIdDataArea)
            {
                this.BuyingLegalEntity  =  CompanyInfo::findDataArea(_purchReqTable.ProjIdDataArea).RecId;
                this.ProjId             = _purchReqTable.ProjId;
                this.ProjIdDataArea     = _purchReqTable.ProjIdDataArea;
                this.ProjCategoryId     = ProjParameters::find().ItemCategory;
                this.setDataAreaForModifiedField(fieldNum(PurchReqLine, ProjCategoryId));
                ProjTable projTable     = ProjTable::find(this.ProjId);
                this.initFromProjTable(projTable);
            }
        }

        if (this.isConsumption())
        {
            this.initTransDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchRFQLine</Name>
				<Source><![CDATA[
    void initFromPurchRFQLine(PurchRFQLine _purchRFQLine, boolean _newline = false)
    {
        PurchRFQReplyLine replyLine = PurchRFQReplyLine::findRFQLine(_purchRFQLine.RecId); 
        if (!replyLine)
        {
            throw error("@SYS106068");
        }

        if (_newline)
        {
            this.LineType               = _purchRFQLine.LineType == PurchRFQLineItemType::Item ? PurchReqLineType::Item : PurchReqLineType::Category;
            this.ItemId                 = _purchRFQLine.ItemId;
            this.Name                   = _purchRFQLine.ItemName;
            this.ExternalItemId         = _purchRFQLine.ExternalItemId;
            this.InventDimId            = _purchRFQLine.InventDimId;
            this.InventDimIdDataArea    = _purchRFQLine.DataAreaId;
            this.DefaultDimension       = _purchRFQLine.DefaultDimension;
        }

        if (_purchRFQLine.LineType == PurchRFQLineItemType::Category)
        {
            this.ItemIdNonCatalog = _purchRFQLine.ItemName;
        }

        this.VendAccount            = _purchRFQLine.vendAccount();
        this.setDataAreaForModifiedField(fieldNum(PurchReqLine, VendAccount));

        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformationHelper::copyTransTaxInformation(_purchRFQLine, this);

            if (!TransTaxInformationHelper::newHelper().findTransTaxInformation(this.TableId, this.RecId).VendorLocation)
            {
                TransTaxInformationHelper::initFromCustVendByRecord(this, VendTable::find(this.VendAccount));
            }
        }

        this.TaxGroup               = _purchRFQLine.TaxGroup;
        this.setDataAreaForModifiedField(fieldNum(PurchReqLine, TaxGroup));
        this.TaxItemGroup           = _purchRFQLine.TaxItemGroup;
        this.setDataAreaForModifiedField(fieldNum(PurchReqLine, TaxItemGroup));
        this.OverrideSalesTax       = _purchRFQLine.OverrideSalesTax;

        // update reqLine with values from accepted RFQReply
        this.CurrencyCode       = replyLine.rfqReplyCurrencyCode();
        this.PriceUnit          = replyLine.PriceUnit;
        this.PurchUnitOfMeasure = UnitOfMeasure::unitOfMeasureIdBySymbol(replyLine.PurchUnit);

        this.PurchPrice         = replyLine.PurchPrice;

        if (PurchReqLinePriceUpdFromRFQAssetGroupPopulatedFlight::instance().isEnabled())
        {
            this.modifiedField(fieldNum(PurchReqLine, PurchPrice));
        }

        this.PurchQty           = replyLine.PurchQty;
        this.PurchMarkup        = replyLine.PurchMarkup;

        this.ProjSalesCurrencyId = _purchRFQLine.ProjSalesCurrencyId;

        this.LinePercent        = replyLine.LinePercent;
        this.LineDisc           = replyLine.LineDisc;
        this.LineAmount         = replyLine.LineAmount;

        this.RequiredDate       = replyLine.DeliveryDate;

        this.setTransDate();

        this.ExternalItemId     = replyLine.ExternalItemId;

        this.Name               = replyLine.Name; //update line item description

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.cfopTable_BR       = _purchRFQLine.cfopTable_BR;
            this.TaxServiceCode_BR  = _purchRFQLine.TaxServiceCode_BR;
            this.SalesPurchOperationType_BR = _purchRFQLine.purchRFQTable().SalesPurchOperationType_BR;
        }
        // </GBR>

        if (this.ProjId)
        {
            this.setProjSalesPrice();
        }

        this.evaluatePurchAgreement();
        this.setDefaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendExternalItemDescription</Name>
				<Source><![CDATA[
    void initFromVendExternalItemDescription(InventDim _inventDim = this.inventDim())
    {
        VendExternalItemDescription vendExternalItemDescription = new VendExternalItemDescription(this.ItemId, _inventDim, this.VendAccount);
        
        if (!PurchReqLineExternalItemDescriptionRevertChangesFlight::instance().isEnabled())
        {
            this.ExternalItemId = '';
        }

        if (vendExternalItemDescription.findExternalDescription())
        {
            this.ExternalItemId = vendExternalItemDescription.externalItemId();
            if (vendExternalItemDescription.externalItemFreeTxt())
            {                
                if (!PurchReqLineExternalItemDescriptionRevertChangesFlight::instance().isEnabled())
                {
                    this.initName();
                }
                if (VendFormletterParameters::find().ExternalItemOverwriteAppend == OverwriteAppend::Overwrite)
                {
                    this.Name =  vendExternalItemDescription.externalItemFreeTxt();
                }
                else
                {
                    this.initName(this.inventTable());
                    if (this.Name)
                    {
                        this.Name += '\n';
                    }
                    this.Name += vendExternalItemDescription.externalItemFreeTxt();
                }                
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    void initFromVendTable(VendTable _vendTable)
    {
        this.url                    = _vendTable.url();

        if (this.CurrencyCode != _vendTable.Currency)
        {
            this.PurchPrice         = this.PurchPrice ? ExchangeRateHelper::curPrice2CurPrice(this.PurchPrice, this.CurrencyCode, _vendTable.Currency) : this.PurchPrice;
            this.LineAmount         = this.LineAmount ? this.calcLineAmountForced() : this.LineAmount;
            this.CurrencyCode       = _vendTable.Currency;
        }

        this.VendAccount            = _vendTable.AccountNum;
        this.VendAccountDataArea    = _vendTable.DataAreaId;

        this.setTaxGroup();
        this.setOverrideSalesTax();
        this.setDefaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initName</Name>
				<Source><![CDATA[
    void initName(InventTable _inventTable = InventTable::find(this.ItemId), EcoResCategoryId _procurementCategory = this.ProcurementCategory)
    {
        this.Name = PurchParameters::nameAndOrDescription(_inventTable, CompanyInfo::languageId(), this.InventDimId, EcoResCategory::find(_procurementCategory));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNonCatalogItemWithExplicitMandatoryFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new purchase requisition line by using the selected non-catalog item and a specify separate in a container the mandatory fields.
    /// </summary>
    /// <param name="_nonCatalogItem">
    ///    The non-catalog item.
    /// </param>
    /// <param name="_lineNum">
    ///    The line number for a new purchase requisition line.
    /// </param>
    /// <param name="_mandatoryFieldsContainer">
    ///    Container holding procurement category, product name and unit of measure.
    /// </param>
    public void initNonCatalogItemWithExplicitMandatoryFields(PurchReqLine _nonCatalogItem, LineNum _lineNum, container _mandatoryFieldsContainer)
    {
        PurchReqItemIdNonCatalog productName;
        UnitOfMeasureRecId purchaseUnit;
        RefRecId procurementCategoryRecId;
        [procurementCategoryRecId, productName, purchaseUnit] = _mandatoryFieldsContainer;

        _nonCatalogItem.ProcurementCategory = procurementCategoryRecId;
        _nonCatalogItem.ItemIdNonCatalog = productName;
        _nonCatalogItem.PurchUnitOfMeasure = purchaseUnit;

        this.initNonCatalogItem(_nonCatalogItem, _lineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNonCatalogItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new purchase requisition line by using the selected non-catalog item.
    /// </summary>
    /// <param name="_nonCatalogItem">
    ///    The non-catalog item.
    /// </param>
    /// <param name="_lineNum">
    ///    The line number for a new purchase requisition line.
    /// </param>
    public void initNonCatalogItem(PurchReqLine _nonCatalogItem, LineNum _lineNum)
    {
        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            PurchReqLineTaxExtensionIN purchReqLineTaxExtensionIN = this.purchReqLineTaxExtensionIN();
            purchReqLineTaxExtensionIN.MaximumRetailPrice = purchReqLineTaxExtensionIN.getMaximumRetailPrice_IN(InventTableModule::find(_nonCatalogItem.ItemId, ModuleInventPurchSales::Purch).MaximumRetailPrice_IN,
                                                                                            _nonCatalogItem.CurrencyCode);
        }
        // </GIN>

        InventDim inventDim   = this.inventDim();
        PurchQty purchQty    = _nonCatalogItem.PurchQty;

        this.Requisitioner = _nonCatalogItem.Requisitioner;
        this.BuyingLegalEntity = _nonCatalogItem.BuyingLegalEntity;
        this.ReceivingOperatingUnit = _nonCatalogItem.ReceivingOperatingUnit;

        this.LineType         = PurchReqLineType::Category;
        this.LineNum          = _lineNum;
        this.SequenceNumber   = any2int(_lineNum);

        this.Name             = _nonCatalogItem.Name;
        this.ItemIdNonCatalog = _nonCatalogItem.ItemIdNonCatalog;

        this.setInventDimIdFromInventDim(inventDim);
        this.ExternalItemId     = _nonCatalogItem.ExternalItemId;
        this.PurchUnitOfMeasure = _nonCatalogItem.PurchUnitOfMeasure;
        this.ProjSalesUnitOfMeasure = _nonCatalogItem.PurchUnitOfMeasure;

        this.setAddressFromInventDim(inventDim);

        this.PurchQty           = purchQty > 0 ? purchQty : 1;
        this.modifiedField(fieldNum(PurchReqLine, PurchQty));

        this.VendAccount         = _nonCatalogItem.VendAccount;
        this.setDataAreaForModifiedField(fieldNum(PurchReqLine, VendAccount));
        this.modifiedField(fieldNum(PurchReqLine, VendAccount));

        this.PurchAgreement      = _nonCatalogItem.PurchAgreement;

        this.CurrencyCode        = _nonCatalogItem.CurrencyCode;

        this.initFromEcoResCategory(_nonCatalogItem.ProcurementCategory);
        this.ProjCategoryId      = _nonCatalogItem.ProjCategoryId;

        this.url            = _nonCatalogItem.url;
        this.PurchPrice     = _nonCatalogItem.PurchPrice;
        this.ProjSalesPrice = _nonCatalogItem.ProjSalesPrice;
        this.LineAmount     = this.calcLineAmountForced();
        this.LineRefId      = newGuid();

        this.setDefaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies a default value to the transaction date field.
    /// </summary>
    void initTransDate()
    {
        int64 orgArray[];

        if (this.isConsumption())
        {
            orgArray[1] = this.BuyingLegalEntity;
            orgArray[2] = this.ReceivingOperatingUnit;

            if (PurchReqControlRule::findPurchReqControlRuleParameters(orgArray).IsReqDateTransDate)
            {
                this.TransDate = this.purchReqTable().RequiredDate;
            }
            else
            {
                this.TransDate = this.purchReqTable().TransDate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            this.SalesPurchJournalLine::initFromCompanyInformation();
        }
        // </GIN>
        this.RequisitionStatus = PurchReqRequisitionStatus::Draft;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>VendAccount</c> field on <c>PurchReqLine</c> record and, optionally, runs logic to update Purchase agreement linking.
    /// </summary>
    /// <param name = "_updateAgreementLinking">
    /// Determines whether logic should also be run to update Purchase agreement linking; defaults to true.
    /// </param>
    public void initVendAccount(boolean _updateAgreementLinking = true)
    {
        VendAccount defaultVend;
        
        void useDefaultIfNotBlocked()
        {
            if (defaultVend && VendTable::isVendorBlocked(defaultVend, CustVendorBlocked::Requisition))
            {
                this.PurchAgreement = 0;
                defaultVend = '';
            }
        }

        AgreementLine agreementLine;

        if (this.LineType != PurchReqLineType::External && (this.ItemId || this.ProcurementCategory))
        {
            agreementLine = AgreementLine::findLineForAutoMatch(this, 0, true);

            PurchAgreementHeader agreementHeader = agreementLine.agreementHeader() as PurchAgreementHeader;
            defaultVend = agreementHeader.VendAccount;
            useDefaultIfNotBlocked();
        }

        if (this.LineType == PurchReqLineType::Item)
        {
            if (!defaultVend)
            {
                defaultVend = PurchReqLine::findCheapestVendor(this).AccountNum;
                useDefaultIfNotBlocked();
            }

            if (!defaultVend)
            {
                defaultVend = PurchReqLine::findPrimaryVendor(this).AccountNum;
                useDefaultIfNotBlocked();
            }
        }
                
        if (this.VendAccount != defaultVend)
        {
            this.VendAccount = defaultVend;
            if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
            {
                this.ShipCalendarId = VendTable::find(this.VendAccount).PurchaseShipCalendarId;
            }
            this.setDataAreaForModifiedField(fieldNum(PurchReqLine, VendAccount));
        }

        if (_updateAgreementLinking)
        {
            if (agreementLine)
            {
                this.initFromAgreementLine(agreementLine);
            }
            else
            {
                this.PurchAgreement = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        PurchReqInstrumentationLogger purchReqInstrumentationLogger = PurchReqLine::instrumentationLogger();

        PurchReqLineInstrumentationActivities requisitionLineActivities = purchReqInstrumentationLogger.requisitionLine();
        
        using (var activityContext = requisitionLineActivities.insert(this))
        {
            if (!this.SequenceNumber)
            {
                this.LineNum = PurchReqLine::lastLineNum(this.PurchReqTable) + 1;
                this.SequenceNumber = any2int(this.LineNum);
            }
            else
            {
                this.LineNum = this.SequenceNumber;
            }

            this.LineRefId = newGuid();

            this.createSourceDocumentLine();

            if (this.ProjId)
            {
                ProjInventJournalTransMapForm::construct(this).insertPost();
                this.ProjTransId            = ProjParameters::newTransId();
                this.setDataAreaForModifiedField(fieldNum(PurchReqLine, ProjTransId));
            }

            this.initFromEcoResCategory(this.ProcurementCategory);

            requisitionLineActivities.logRequisitionLine(activityContext, this);
            
            super();

            if (this.canGenerateRFQ())
            {
                this.rfqRequirement = new PurchReqLineEvaluateRFQRequirement(this).getRFQRequirement();
            }

            if (this.rfqRequirement != PurchReqRFQRequirement::None)
            {
                this.doUpdate();
            }

            this.createMarkupTrans();

            this.copyBusinessJustification(tableNum(PurchReqTable), this.PurchReqTable);

            if (this.isConsumption())
            {
                PurchReqLineKMCollection::fill(this.RecId, this.ProcurementCategory, this.BuyingLegalEntity, this.ReceivingOperatingUnit);
            }

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                this.markCurrentTaxDocumentTaxStatusDirty();
            }

            this.IsPriceDiscCalculated = NoYes::No;

            // <GIN>
            #ISOCountryRegionCodes
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                PurchReqLineTaxExtensionIN::insertTaxExtensionRecord(this);

                if (this.isFormDataSource())
                {
                    this.dataSource().research(true);
                }
            }
            // </GIN>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>internalCalendarId</Name>
				<Source><![CDATA[
    public CalendarId internalCalendarId()
    {
        CalendarId          internalCalendarId;
        ReqGroup            reqGroup;
        InventDim           inventDim;
        InventTable         inventTable;

        inventTable         = InventTable::find(this.ItemId);
        inventDim           = InventDim::find(this.InventDimId);

        reqGroup            = ReqGroup::defaultTable(inventTable.ReqGroupId, ReqItemTable::find(this.ItemId, inventDim.reqCovDimId(InventDimGroupSetup::newInventTable(inventTable))).ReqGroupId);
        internalCalendarId  = reqGroup.CalendarId;

        if (!internalCalendarId)
        {
            if (inventDim.InventLocationId)
            {
                internalCalendarId = InventLocation::find(inventDim.InventLocationId).ReqCalendarId;
            }
        }

        return internalCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    InventDim inventDim(boolean _update = false)
    {
        return InventDim::find(this.InventDimId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    InventTable inventTable(ItemId _itemId = this.ItemId, boolean _update = false)
    {
        return InventTable::findInLegalEntity(_itemId, this.buyingLegalEntity2DataArea());
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModule</Name>
				<Source><![CDATA[
    private InventTableModule inventTableModule(ItemId _itemId = this.ItemId)
    {
        return InventTableModule::find(_itemId, this.moduleType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatalogItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line type is a <c>PurchReqLineType::Item</c> value.
    /// </summary>
    /// <returns>
    /// true if the line type is a <c>PurchReqLineType::Item</c> value; otherwise, false.
    /// </returns>
    boolean isCatalogItem()
    {
        return this.LineType == PurchReqLineType::Item ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order line is category based.
    /// </summary>
    /// <returns>
    /// true if the order line is category based; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isCategoryBased()
    {
        return this.salesPurchLineInterface().isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the purpose of the requisition line is <c>RequisitionPurpose::Consumption</c>.
    /// </summary>
    /// <returns>
    /// true if the purpose of the requisition line is <c>RequisitionPurpose::Consumption</c>; otherwise false.
    /// </returns>
    public boolean isConsumption()
    {
        return this.RequisitionPurpose == RequisitionPurpose::Consumption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionLineEntityChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any of the line entities have changed.
    /// </summary>
    /// <returns>
    /// true if a line entity has changed; otherwise, false.
    /// </returns>
    private boolean isDimensionLineEntityChanged()
    {
        PurchReqLine originalLine = this.orig();

        return ((this.Requisitioner      != originalLine.Requisitioner)
            || (this.ItemId              != originalLine.ItemId)
            || (this.VendAccount         != originalLine.VendAccount)
            || (this.AssetGroup          != originalLine.AssetGroup)
            || (this.ProjId              != originalLine.ProjId)
            || (this.ProjCategoryId      != originalLine.ProjCategoryId)
            || (this.ProcurementCategory != originalLine.ProcurementCategory));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFullyDistributed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a check whether line is fully distributed.
    /// </summary>
    /// <returns>
    ///    True, if the line is full distributed; otherwise false.
    /// </returns>
    /// <exception cref="M:exception::Warning">
    ///    This action can only be completed after the line number %1 is fully distributed.
    /// </exception>
    public boolean isFullyDistributed()
    {
        SourceDocumentLine  sourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine);

        if (!SourceDocumentLineProvider::isLineFullyDistributed(sourceDocumentLine, this))
        {
            //This action can only be completed after the line number %1 is fully distributed
            return checkFailed(strFmt("@SYS341833", this.SequenceNumber));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInferredDraft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a true/false value indicating whether the record is to be treated as if in Draft status.
    /// </summary>
    /// <returns>
    /// true, if status is draft or rejected otherwise false;
    /// </returns>
    /// <remarks>
    /// If a record is in rejected status then at the time of resubmission the workflow starts from scratch.
    /// </remarks>
    public boolean isInferredDraft()
    {
        if (this.RequisitionStatus == PurchReqRequisitionStatus::Draft)
        {
            return true;
        }

        if (this.RequisitionStatus == PurchReqRequisitionStatus::Rejected)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchAgreementLineLinkValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates the foreign key reference to <c>AgreementLine</c> table.
    /// </summary>
    /// <returns>
    /// True, if PurchAgreement reference is valid; otherwise false.
    /// </returns>
    private boolean isPurchAgreementLineLinkValid()
    {
        boolean isValid = true;

        if (this.PurchAgreement)
        {
            isValid = AgreementLine::findLineForAutoMatch(this, 0).RecId;

            if (isValid && !AgreementLine::find(this.PurchAgreement).isLinkValid(this, false))
            {
                isValid = false;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRFQPending</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the request for quote is pending.
    /// </summary>
    /// <returns>
    /// true if the request for quote is pending; otherwise, false.
    /// </returns>
    public boolean isRFQPending()
    {
        PurchRFQCaseLine    purchRFQCaseLine = this.purchRFQCaseLine();
        boolean             isRFQPending;

        if (purchRFQCaseLine                                        &&
            purchRFQCaseLine.StatusHigh != PurchRFQStatus::Accepted &&
            purchRFQCaseLine.StatusHigh != PurchRFQStatus::Rejected)
        {
            isRFQPending = !(purchRFQCaseLine.StatusHigh == PurchRFQStatus::Declined
                && ((purchRFQCaseLine.StatusLow == PurchRFQStatus::Accepted || purchRFQCaseLine.StatusLow == PurchRFQStatus::Rejected)
                    || purchRFQCaseLine.hasRejectedOrAcceptedRFQLine()));
        }

        return isRFQPending;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendAccountEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes whether <c>VendAccount</c> field is enabled for editing on forms.
    /// </summary>
    /// <returns>
    /// true if the field is enabled for editing; otherwise, false.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public boolean isVendAccountEnabled()
    {
        boolean ret = true;

        if (this.LineType == PurchReqLineType::External
            || !this.isConsumption()
            )
        {
            ret = false;
        }
        else if (this.LineType == PurchReqLineType::Category)
        {
            if ((this.isInferredDraft()) && (this.procCategoryPolicyParameter().VendorSelection == ProcCategoryVendorSelection::SelectionNotAllowed))
            {
                ret = false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendorBlocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the vendor is blocked.
    /// </summary>
    /// <param name="_vendAccount">
    ///    The <c>VendAccount</c> to check; optional.
    /// </param>
    /// <returns>
    ///    true if the vendor is blocked; otherwise, false.
    /// </returns>
    public boolean isVendorBlocked(VendAccount _vendAccount = this.VendAccount)
    {
        return VendTable::isVendorBlocked(_vendAccount, CustVendorBlocked::Requisition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendorProposalEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the vendor proposal functionality is enabled for editing on forms.
    /// </summary>
    /// <returns>
    /// true if the functionality is enabled for editing; otherwise, false.
    /// </returns>

    public boolean isVendorProposalEnabled()
    {
        boolean ret;

        if (this.BuyingLegalEntity)
        {
            if (this.rfqRequirement == PurchReqRFQRequirement::Formal || this.LineType == PurchReqLineType::Category)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowOnPurchReqTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the workflow is on the <c>PurchReqTable</c> record that corresponds to the
    /// current <c>PurchReqLine</c> record.
    /// </summary>
    /// <returns>
    /// A Boolean value that indicates whether the workflow is on the <c>PurchReqTable</c> record.
    /// </returns>
    public boolean isWorkflowOnPurchReqTable()
    {
        if (!this.RecId)
        {
            return true;
        }

        return this.purchReqTable().isWorkflowOnPurchReqTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLineDisc</Name>
				<Source><![CDATA[
    LineDiscCode itemLineDisc()
    {
        return this.inventTable().purchLineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ItemNameDisplay itemName()
    {
        return this.editItemName(false, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionItemExtendParm_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a ledger dimension from invent posting for an invent account type with site.
    /// </summary>
    /// <param name="_inventAccountType">
    /// The posting account type.
    /// </param>
    /// <returns>
    /// The posting ledger dimension for the account type.
    /// </returns>
    public LedgerDimensionDefaultAccount ledgerDimensionItemExtendParm_CN(InventAccountType _inventAccountType)
    {
        return InventPosting::accountItemLedgerDimensionExtendParmFromParameter_CN(
            this.buildAccountItemLedgerDimensionParameter(_inventAccountType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting account ledger dimension for an item.
    /// </summary>
    /// <param name="_inventAccountType">An inventory account type.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(InventAccountType _inventAccountType)
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            this.ItemId,
            this.inventTable().itemGroupId(),
            this.ProcurementCategory,
            this.VendAccount,
            VendTable::find(this.VendAccount).VendGroup,
            this.TaxGroup,
            null,
            InventPostingExtendParm_CN::constructInventDim(this.inventDim()).parmInventSiteId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns the line discount group.
    /// </summary>
    /// <returns>
    /// The line discount group associated with the vendor on the <c>PurchReqLine</c> record.
    /// </returns>
    LineDiscCode lineDisc()
    {
        return VendTable::find(this.VendAccount).LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineNotPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the line is not confirmed or finalized.
    /// </summary>
    /// <returns>
    /// <c>true</c> if the line is not confirmed or finalized
    /// </returns>
    public boolean lineNotPosted()
    {
        SourceDocumentLine sourceDocumentLine;

        select RecId from sourceDocumentLine where
            sourceDocumentLine.AccountingStatus != SourceDocumentLineAccountingStatus::Completed &&
            sourceDocumentLine.AccountingStatus != SourceDocumentLineAccountingStatus::Finalized &&
            sourceDocumentLine.RecId            == this.SourceDocumentLine;

        return sourceDocumentLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default <c>PurchLine.dimension</c> values, depending on the <c>InventDim</c> record buffer
    ///    values.
    /// </summary>
    /// <param name="_newInventDim">
    ///    The <c>InventDim</c> record buffer linked to the current <c>PurchReqLine</c> record buffer.
    /// </param>
    /// <param name="_oldInventDim">
    ///    The <c>InventDim</c> record buffer that was previously linked to the current <c>PurchReqLine</c>
    ///    record buffer.
    /// </param>
    public void linkInventDim2Dimension(InventDim _newInventDim, InventDim _oldInventDim)
    {
        _newInventDim.setInventSiteFromParentIfModified(this, _oldInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayUnitPricePBUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the purchase price.
    /// </summary>
    /// <returns>
    /// The purchase price.
    /// </returns>
    public display PurchPrice mcrDisplayUnitPricePBUOM()
    {
        return this.PurchPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set that should be merged with the current <c>defaultDimension</c> field on this
    /// table; optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was previously instantiated by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when merging.
    /// Additional the entity specifier defaulting will be taken into consideration
    /// </remarks>
    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this, this.BuyingLegalEntity)
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysDefaultingProcessor::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        // [field that needs defaulting,
            // [fields that affect the default value]]
        
        return [
            // DataArea fields
            [fieldNum(PurchReqLine, AssetGroupDataArea),
                [fieldNum(PurchReqLine, AssetGroup)]],
            
            [fieldNum(PurchReqLine, ActivityNumberDataArea),
                [fieldNum(PurchReqLine, ActivityNumber)]],

            [fieldNum(PurchReqLine, InventDimIdDataArea),
                [fieldNum(PurchReqLine, InventDimId)]],

            [fieldNum(PurchReqLine, InventLocationIdDataArea),
                [fieldNum(PurchReqLine, InventLocationId)]],

            [fieldNum(PurchReqLine, ItemIdDataArea),
                [fieldNum(PurchReqLine, ItemId)]],

            [fieldNum(PurchReqLine, ProjCategoryIdDataArea),
                [fieldNum(PurchReqLine, ProjCategoryId)]],

            [fieldNum(PurchReqLine, ProjTransIdDataArea),
                [fieldNum(PurchReqLine, ProjTransId)]],

            [fieldNum(PurchReqLine, ProjLinePropertyIdDataArea),
                [fieldNum(PurchReqLine, ProjLinePropertyId)]],

            [fieldNum(PurchReqLine, ProjIdDataArea),
                [fieldNum(PurchReqLine, ProjId)]],

            [fieldNum(PurchReqLine, ProjTaxGroupIdDataArea),
                [fieldNum(PurchReqLine, ProjTaxGroupId)]],

            [fieldNum(PurchReqLine, ProjTaxItemGroupIdDataArea),
                [fieldNum(PurchReqLine, ProjTaxItemGroupId)]],

            [fieldNum(PurchReqLine, PurchRFQCaseIdDataArea),
                [fieldNum(PurchReqLine, PurchRFQCaseId)]],

            [fieldNum(PurchReqLine, PurchIdDataArea),
                [fieldNum(PurchReqLine, PurchId)]],

            [fieldNum(PurchReqLine, TaxGroupDataArea),
                [fieldNum(PurchReqLine, TaxGroup)]],

            [fieldNum(PurchReqLine, TaxItemGroupDataArea),
                [fieldNum(PurchReqLine, TaxItemGroup)]],

            [fieldNum(PurchReqLine, VendAccountDataArea),
                [fieldNum(PurchReqLine, VendAccount)]],

            // Prices and discounts
            [fieldNum(PurchReqLine, LineAmount),
                [fieldNum(PurchReqLine, PurchQty), fieldNum(PurchReqLine, PurchPrice), fieldNum(PurchReqLine, PriceUnit), fieldNum(PurchReqLine, LinePercent), fieldNum(PurchReqLine, LineDisc),
                fieldNum(PurchReqLine, PurchMarkup), fieldNum(PurchReqLine, CurrencyCode)]],

            [fieldNum(PurchReqLine, PurchPrice),
                [fieldNum(PurchReqLine, ItemId), fieldNum(PurchReqLine, VendAccount), fieldNum(PurchReqLine, InventDimId), fieldNum(PurchReqLine, PurchQty),fieldNum(PurchReqLine, PurchAgreement),
                fieldNum(PurchReqLine, LineAmount), fieldNum(PurchReqLine, RequiredDate), fieldNum(PurchReqLine, CurrencyCode)]],

            [fieldNum(PurchReqLine, LinePercent),
                [fieldNum(PurchReqLine, ItemId), fieldNum(PurchReqLine, VendAccount), fieldNum(PurchReqLine, InventDimId), fieldNum(PurchReqLine, PurchQty),fieldNum(PurchReqLine, PurchAgreement),
                fieldNum(PurchReqLine, LineAmount), fieldNum(PurchReqLine, RequiredDate), fieldNum(PurchReqLine, CurrencyCode)]],

            [fieldNum(PurchReqLine, LineDisc),
                [fieldNum(PurchReqLine, ItemId), fieldNum(PurchReqLine, VendAccount), fieldNum(PurchReqLine, InventDimId), fieldNum(PurchReqLine, PurchQty),fieldNum(PurchReqLine, PurchAgreement),
                fieldNum(PurchReqLine, LineAmount), fieldNum(PurchReqLine, RequiredDate), fieldNum(PurchReqLine, CurrencyCode)]],

            // PriceUnit can also be affected by Purchase + Trade Agreements, but since price/discount related fields are all set together in case an agreement applies there is no need to spedify more dependencies.
            [fieldNum(PurchReqLine, PriceUnit),
                [fieldNum(PurchReqLine, ItemId)]],

            // Remaining fields
            [fieldNum(PurchReqLine, AccountingDistributionTemplate),
                [fieldNum(PurchReqLine, ProjId)]],

            [fieldNum(PurchReqLine, ActivityNumber),
                [fieldNum(PurchReqLine, BuyingLegalEntity)]],

            [fieldNum(PurchReqLine, AssetGroup),
                [fieldNum(PurchReqLine, PriceUnit), fieldNum(PurchReqLine, BuyingLegalEntity), fieldNum(PurchReqLine, ReceivingOperatingUnit), fieldNum(PurchReqLine, PurchPrice), fieldNum(PurchReqLine, AssetRuleQualifierOption), fieldNum(PurchReqLine, AssetRuleQualifierOptionLocal)]],

            [fieldNum(PurchReqLine, AssetRuleQualifierOption),
                [fieldNum(PurchReqLine, AssetRuleQualifierOptionName), fieldNum(PurchReqLine, PriceUnit), fieldNum(PurchReqLine, ProcurementCategory), fieldNum(PurchReqLine, TransDate), fieldNum(PurchReqLine, CurrencyCode), fieldNum(PurchReqLine, PurchPrice), fieldNum(PurchReqLine, BuyingLegalEntity)]],
            
            [fieldNum(PurchReqLine, AssetRuleQualifierOptionLocal),
                [fieldNum(PurchReqLine, AssetRuleQualifierOptionName), fieldNum(PurchReqLine, PriceUnit), fieldNum(PurchReqLine, ProcurementCategory), fieldNum(PurchReqLine, TransDate), fieldNum(PurchReqLine, CurrencyCode), fieldNum(PurchReqLine, PurchPrice), fieldNum(PurchReqLine, BuyingLegalEntity)]],

            [fieldNum(PurchReqLine, Attention),
                [fieldNum(PurchReqLine, Requisitioner)]],

            [fieldNum(PurchReqLine, BuyingLegalEntity),
                [fieldNum(PurchReqLine, Requisitioner)]],

            [fieldNum(PurchReqLine, cfopTable_BR),
                [fieldNum(PurchReqLine, VendAccount)]],
            
            [fieldNum(PurchReqLine, CurrencyCode),
                [fieldNum(PurchReqLine, ItemId), fieldNum(PurchReqLine, VendAccount), fieldNum(PurchReqLine, BuyingLegalEntity),
                fieldNum(PurchReqLine, ReceivingOperatingUnit)]],

            [fieldNum(PurchReqLine, DefaultDimension),
                [fieldNum(PurchReqLine, ProcurementCategory), fieldNum(PurchReqLine, ItemId), fieldNum(PurchReqLine, Requisitioner), fieldNum(PurchReqLine, VendAccount),
                fieldNum(PurchReqLine, ProjId)]],

            [fieldNum(PurchReqLine, DeliveryPostalAddress),
                [fieldNum(PurchReqLine, InventDimId), fieldNum(PurchReqLine, Requisitioner)]],

            [fieldNum(PurchReqLine, InventDimId),
                [fieldNum(PurchReqLine, ItemId), fieldNum(PurchReqLine, BuyingLegalEntity), fieldNum(PurchReqLine, ReceivingOperatingUnit)]],

            [fieldNum(PurchReqLine, InventLocationId),
                [fieldNum(PurchReqLine, BuyingLegalEntity), fieldNum(PurchReqLine, ReceivingOperatingUnit)]],

            [fieldNum(PurchReqLine, ItemId),
                [fieldNum(PurchReqLine, BuyingLegalEntity), fieldNum(PurchReqLine, ReceivingOperatingUnit)]],

            [fieldNum(PurchReqLine, LineType),
                [fieldNum(PurchReqLine, ItemId), fieldNum(PurchReqLine, ProcurementCategory)]],

            [fieldNum(PurchReqLine, Name),
                [fieldNum(PurchReqLine, ItemId), fieldNum(PurchReqLine, ProcurementCategory)]],
   
            [fieldNum(PurchReqLine, ProcurementCategory),
                [fieldNum(PurchReqLine, ItemId), fieldNum(PurchReqLine, BuyingLegalEntity), fieldNum(PurchReqLine, ReceivingOperatingUnit)]],

            [fieldNum(PurchReqLine, ProjCategoryId),
                [fieldNum(PurchReqLine, BuyingLegalEntity), fieldNum(PurchReqLine, ReceivingOperatingUnit)]],
            
            [fieldNum(PurchReqLine, ProjId),
                [fieldNum(PurchReqLine, BuyingLegalEntity)]],
            
            [fieldNum(PurchReqLine, ProjLinePropertyId),
                [fieldNum(PurchReqLine, BuyingLegalEntity), fieldNum(PurchReqLine, ReceivingOperatingUnit)]],
            
            [fieldNum(PurchReqLine, ProjSalesPrice),
                [fieldNum(PurchReqLine, ItemId), fieldNum(PurchReqLine, PurchPrice), fieldNum(PurchReqLine, TransDate), fieldNum(PurchReqLine, ProjId), fieldNum(PurchReqLine, ProjCategoryId),
                fieldNum(PurchReqLine, ProjSalesCurrencyId)]],

            [fieldNum(PurchReqLine, ProjSalesUnitOfMeasure),
                [fieldNum(PurchReqLine, PurchUnitOfMeasure), fieldNum(PurchReqLine, BuyingLegalEntity), fieldNum(PurchReqLine, ReceivingOperatingUnit)]],

            [fieldNum(PurchReqLine, ProjTaxGroupId),
                [fieldNum(PurchReqLine, BuyingLegalEntity)]],
                        
            [fieldNum(PurchReqLine, ProjTaxItemGroupId),
                [fieldNum(PurchReqLine, BuyingLegalEntity), fieldNum(PurchReqLine, ReceivingOperatingUnit)]],
            
            [fieldNum(PurchReqLine, ProjTransId),
                [fieldNum(PurchReqLine, BuyingLegalEntity), fieldNum(PurchReqLine, ReceivingOperatingUnit)]],
        
            [fieldNum(PurchReqLine, PurchAgreement),
                [fieldNum(PurchReqLine, VendAccount), fieldNum(PurchReqLine, RequiredDate), fieldNum(PurchReqLine, PurchQty), fieldNum(PurchReqLine, InventDimId)]],

            [fieldNum(PurchReqLine, PurchQty),
                [fieldNum(PurchReqLine, ItemId), fieldNum(PurchReqLine, InventDimId), fieldNum(PurchReqLine, BuyingLegalEntity), fieldNum(PurchReqLine, ReceivingOperatingUnit)]],

            [fieldNum(PurchReqLine, PurchUnitOfMeasure),
                [fieldNum(PurchReqLine, ItemId), fieldNum(PurchReqLine, BuyingLegalEntity), fieldNum(PurchReqLine, ReceivingOperatingUnit)]],
            
            [fieldNum(PurchReqLine, ReasonRefRecId),
                [fieldNum(PurchReqLine, PriceUnit)]],

            [fieldNum(PurchReqLine, ReceivingOperatingUnit),
                [fieldNum(PurchReqLine, BuyingLegalEntity), fieldNum(PurchReqLine, Requisitioner)]],
            
            [fieldNum(PurchReqLine, TaxGroup),
                [fieldNum(PurchReqLine, VendAccount), fieldNum(PurchReqLine, DeliveryPostalAddress), fieldNum(PurchReqLine, BuyingLegalEntity), fieldNum(PurchReqLine, ReceivingOperatingUnit)]],

            [fieldNum(PurchReqLine, TaxItemGroup),
                [fieldNum(PurchReqLine, ItemId), fieldNum(PurchReqLine, BuyingLegalEntity), fieldNum(PurchReqLine, ReceivingOperatingUnit)], fieldNum(PurchReqLine, InventDimId)],
            
            [fieldNum(PurchReqLine, TransDate),
                [fieldNum(PurchReqLine, ItemId), fieldNum(PurchReqLine, RequiredDate)]],

            [fieldNum(PurchReqLine, URL),
                [fieldNum(PurchReqLine, VendAccount)]],

            [fieldNum(PurchReqLine, VendAccount),
                [fieldNum(PurchReqLine, ProcurementCategory), fieldNum(PurchReqLine, ItemId), fieldNum(PurchReqLine, PurchQty), fieldNum(PurchReqLine, BuyingLegalEntity),
                fieldNum(PurchReqLine, ReceivingOperatingUnit)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        DataAreaId companyId;
        if (this.BuyingLegalEntity)
        {
            companyId = CompanyInfo::findRecId(this.BuyingLegalEntity).DataArea;
        }
        else
        {
            companyId = curExt();
        }

        changecompany(companyId)
        {
            super(_fieldId);

            switch (_fieldId)
            {
                // DataAreas
                case fieldNum(PurchReqLine, ActivityNumberDataArea),
                    fieldNum(PurchReqLine, AssetGroupDataArea),
                    fieldNum(PurchReqLine, InventDimIdDataArea),
                    fieldNum(PurchReqLine, InventLocationIdDataArea),
                    fieldNum(PurchReqLine, ItemIdDataArea),
                    fieldNum(PurchReqLine, ProjCategoryIdDataArea),
                    fieldNum(PurchReqLine, ProjTransIdDataArea),
                    fieldNum(PurchReqLine, ProjLinePropertyIdDataArea),
                    fieldNum(PurchReqLine, ProjIdDataArea),
                    fieldNum(PurchReqLine, ProjTaxGroupIdDataArea),
                    fieldNum(PurchReqLine, ProjTaxItemGroupIdDataArea),
                    fieldNum(PurchReqLine, PurchRFQCaseIdDataArea),
                    fieldNum(PurchReqLine, PurchIdDataArea),
                    fieldNum(PurchReqLine, TaxGroupDataArea),
                    fieldNum(PurchReqLine, TaxItemGroupDataArea),
                    fieldNum(PurchReqLine, VendAccountDataArea):
                    this.defaultDataArea(_fieldId);
                    break;

                // Prices and discounts
                case fieldNum(PurchReqLine, LineAmount):
                    this.defaultLineAmount();
                    break;

                case fieldNum(PurchReqLine, PurchPrice),
                    fieldNum(PurchReqLine, LinePercent),
                    fieldNum(PurchReqLine, LineDisc):
                    this.defaultPriceAndDiscount();
                    break;
   
                // Remaining fields
                case fieldNum(PurchReqLine, AccountingDistributionTemplate) :
                    this.defaultAccountingDistributionTemplate();
                    break;

                case fieldNum(PurchReqLine, ActivityNumber):
                    this.defaultActivityNumber();
                    break;

                case fieldNum(PurchReqLine, AssetGroup):
                    this.defaultAssetGroup();
                    break;

                case fieldNum(PurchReqLine, AssetRuleQualifierOption):
                case fieldNum(PurchReqLine, AssetRuleQualifierOptionLocal):
                    this.defaultGlobalAndLocalAssetRuleQualifierOptions();
                    break;

                case fieldNum(PurchReqLine, Attention):
                    this.defaultAttention();
                    break;
            
                case fieldNum(PurchReqLine, BuyingLegalEntity):
                    this.defaultBuyingLegalEntity();
                    break;
            
                case fieldNum(PurchReqLine, CFOPTable_BR):
                    this.defaultCFOPTable_BR();
                    break;

                case fieldNum(PurchReqLine, CurrencyCode):
                    this.defaultCurrencyCode();
                    break;

                case fieldNum(PurchReqLine, DefaultDimension):
                    this.defaultDefaultDimension();
                    break;

                case fieldNum(PurchReqLine, DeliveryPostalAddress):
                    this.defaultDeliveryPostalAddress();
                    break;

                case fieldNum(PurchReqLine, InventDimId):
                    this.defaultInventDimId();
                    break;

                case fieldNum(PurchReqLine, InventLocationId):
                    this.defaultInventLocationId();
                    break;

                case fieldNum(PurchReqLine, ItemId):
                    this.defaultItemId();
                    break;

                case fieldNum(PurchReqLine, LineType):
                    this.defaultLineType();
                    break;

                case fieldNum(PurchReqLine, Name):
                    this.defaultName();
                    break;

                case fieldNum(PurchReqLine, PriceUnit):
                    this.defaultPriceUnit();
                    break;

                case fieldNum(PurchReqLine, ProcurementCategory):
                    this.defaultProcurementCategory();
                    break;

                case fieldNum(PurchReqLine, ProjCategoryId):
                    this.defaultProjCategoryId();
                    break;

                case fieldNum(PurchReqLine, ProjId):
                    this.defaultProjId();
                    break;

                case fieldNum(PurchReqLine, ProjLinePropertyId):
                    this.defaultProjLinePropertyId();
                    break;

                case fieldNum(PurchReqLine, ProjSalesPrice):
                    this.defaultProjSalesPrice();
                    break;
         
                case fieldNum(PurchReqLine, ProjTaxGroupId):
                    this.defaultProjTaxGroupId();
                    break;

                case fieldNum(PurchReqLine, ProjTaxItemGroupId):
                    this.defaultProjTaxItemGroupId();
                    break;

                case fieldNum(PurchReqLine, ProjTransId):
                    this.defaultProjTransId();
                    break;

                case fieldNum(PurchReqLine, PurchAgreement):
                    this.defaultPurchAgreement();
                    break;

                case fieldNum(PurchReqLine, PurchQty):
                    this.defaultPurchQty();
                    break;

                case fieldNum(PurchReqLine, PurchUnitOfMeasure):
                    this.defaultPurchUnitOfMeasure();
                    break;

                case fieldNum(PurchReqLine, ProjSalesUnitOfMeasure):
                    this.defaultProjSalesUnitOfMeasure();
                    break;

                case fieldNum(PurchReqLine, ReasonRefRecId):
                    this.defaultReasonRefRecId();
                    break;

                case fieldNum(PurchReqLine, ReceivingOperatingUnit):
                    this.defaultReceivingOperatingUnit();
                    break;

                case fieldNum(PurchReqLine, TaxGroup):
                    this.defaultTaxGroup();
                    break;

                case fieldNum(PurchReqLine, TaxItemGroup):
                    this.defaultTaxItemGroup();
                    break;
            
                case fieldNum(PurchReqLine, TransDate):
                    this.defaultTransDate();
                    break;

                case fieldNum(PurchReqLine, URL):
                    this.defaultURL();
                    break;

                case fieldNum(PurchReqLine, VendAccount):
                    this.defaultVendAccount();
                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAccountingDistributionTemplate</Name>
				<Source><![CDATA[
    private void defaultAccountingDistributionTemplate()
    {
        if (this.ProjId
            && this.isFieldSet(fieldNum(PurchReqLine, ProjId)))
        {
            this.AccountingDistributionTemplate = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultActivityNumber</Name>
				<Source><![CDATA[
    private void defaultActivityNumber()
    {
        if (!this.RecId
            && this.isFieldSet(fieldNum(PurchReqLine, BuyingLegalEntity))
            && this.orig().BuyingLegalEntity)
        {
            this.ActivityNumber = '';
            this.ActivityNumberDataArea = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAssetGroup</Name>
				<Source><![CDATA[
    private void defaultAssetGroup()
    {
        if (this.isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert()
            || (this.isFieldSet(fieldNum(PurchReqLine, PriceUnit)) && this.RequisitionStatus <= PurchReqRequisitionStatus::InReview)
            )
        {
            this.AssetGroup = '';
        }
        
        if ( (this.RequisitionStatus == PurchReqRequisitionStatus::Draft || this.RequisitionStatus == PurchReqRequisitionStatus::InReview)
          && (   this.isFieldSet(fieldNum(PurchReqLine, PriceUnit)) 
              || this.isFieldSet(fieldNum(PurchReqLine, PurchPrice))
              || this.isFieldSet(fieldNum(PurchReqLine, AssetRuleQualifierOption))
              || this.isFieldSet(fieldNum(PurchReqLine, AssetRuleQualifierOptionLocal))))
        {
            this.updateAssetGroup(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultGlobalAndLocalAssetRuleQualifierOptions</Name>
				<Source><![CDATA[
    private void defaultGlobalAndLocalAssetRuleQualifierOptions()
    {
        if (   this.isFieldSet(fieldNum(PurchReqLine, AssetRuleQualifierOptionName))
            && this.AssetRuleQualifierOptionName != '')
        {
            var assetProcessedRule = this.assetProcessedRule();

            if (!assetProcessedRule.isActive())
            {
                this.AssetRuleQualifierOption = 0;
                this.AssetRuleQualifierOptionLocal = 0;
            }
            else 
            {
                Description description = this.findAssetRuleQualifierOptionDescriptionByOptionName(this.AssetRuleQualifierOptionName, assetProcessedRule.isGlobal());
                this.setAssetRuleQualifierOptionFromQualifierString(description, assetProcessedRule);                
            }
        }
        else if (this.isFieldSet(fieldNum(PurchReqLine, PriceUnit))
            && this.RequisitionStatus <= PurchReqRequisitionStatus::InReview)
        {
            this.AssetRuleQualifierOption = 0;
            this.AssetRuleQualifierOptionLocal = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAssetRuleQualifierOptionDescriptionByOptionName</Name>
				<Source><![CDATA[
    private Description findAssetRuleQualifierOptionDescriptionByOptionName(AssetRuleQualifierOptionName _optionName, boolean _isGlobalRule)
    {
        if (_isGlobalRule)
        {
            return AssetRuleQualifierOption::findByName(_optionName).DefaultText;
        }
        else
        {
            return AssetRuleQualifierOptionLocal::findByNameAndLegalEntity(_optionName,
                                                                           this.buyingLegalEntity2DataArea()).DefaultText;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAttention</Name>
				<Source><![CDATA[
    private void defaultAttention()
    {
        if (this.Requisitioner
            && this.isFieldSet(fieldNum(PurchReqLine, Requisitioner)))
        {
            this.Attention = HcmWorkerTitle::findByWorker(this.Requisitioner).OfficeLocation;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBuyingLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the buying legal entity.
    /// </summary>
    protected void defaultBuyingLegalEntity()
    {
        if (this.isFieldSet(fieldNum(PurchReqLine, Requisitioner))
            && !this.isFormDataSource())    // Form has code to set BuyingLegalEntity. Don't overwrite.
        {
            this.BuyingLegalEntity = HcmWorkerHelper::getLegalEntity(this.Requisitioner).RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCFOPTable_BR</Name>
				<Source><![CDATA[
    private void defaultCFOPTable_BR()
    {
        if (BrazilParameters::isEnabled()
            && this.isFieldSet(fieldNum(PurchReqLine, VendAccount)))
        {
            this.setCFOP_BR();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCurrencyCode</Name>
				<Source><![CDATA[
    private void defaultCurrencyCode()
    {
        // When ItemId is modified, this affects both VendAccount and CurrencyCode. Since CurrencyCode also depends on VendAccount, need to ensure VendAccount is defaulted first.
        if (!this.isFieldSet(fieldNum(PurchReqLine, VendAccount)))
        {
            this.defaultField(fieldNum(PurchReqLine, VendAccount));
        }

        if (this.isFieldSet(fieldNum(PurchReqLine, VendAccount)))
        {
            if (this.VendAccount == '')
            {
                this.CurrencyCode = Ledger::accountingCurrency();
            }
            else
            {
                this.CurrencyCode = VendTable::find(this.VendAccount).Currency;
            }
        }
        else if (this.isFieldSet(fieldNum(PurchReqLine, ItemId))
                && this.isConsumption())
        {
            this.CurrencyCode = Ledger::accountingCurrency();
        }
        else if (this.isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert())
        {
            this.CurrencyCode = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDefaultDimension</Name>
				<Source><![CDATA[
    private void defaultDefaultDimension()
    {
        if (!this.isFieldSet(fieldNum(PurchReqLine, VendAccount)))
        {
            this.defaultField(fieldNum(PurchReqLine, VendAccount));
        }
        
        if (this.isFieldSet(fieldNum(PurchReqLine, ProcurementCategory))
            || this.isFieldSet(fieldNum(PurchReqLine, VendAccount))
            || this.isFieldSet(fieldNum(PurchReqLine, Requisitioner))
            || this.isFieldSet(fieldNum(PurchReqLine, ItemId))
            || this.isFieldSet(fieldNum(PurchReqLine, ProjId))
            )
        {
            this.setDefaultDimension(this.isFieldSet(fieldNum(PurchReqLine, Requisitioner)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDeliveryPostalAddress</Name>
				<Source><![CDATA[
    private void defaultDeliveryPostalAddress()
    {
        if (this.isFieldSet(fieldNum(PurchReqLine, Requisitioner))          // for line type category delivery address is found based on location of worker or company
            || (this.ItemId                                                 // for line type Item delivery address is is found based on warehouse, site or company
                && this.isFieldSet(fieldNum(PurchReqLine, InventDimId))
                && this.inventDimChangeShouldCauseAddressDefaulting())
            )
        {
            this.setAddressFromInventDim(this.inventDim());
            this.recalculateRequiredDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimChangeShouldCauseAddressDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates new and original inventory dimensions to determine if delivery address should be defaulted as a result of the change.
    /// </summary>
    /// <returns>true if the change in inventory dimensions should cause address to be defaulted; otherwise, false.</returns>
    private boolean inventDimChangeShouldCauseAddressDefaulting()
    {
        InventDim inventDimOrig = InventDim::find(this.orig().InventDimId);
        
        if (!inventDimOrig)
        {
            return true;
        }

        InventDim inventDimNew = this.inventDim();
        
        if (inventDimOrig.InventSiteId != inventDimNew.InventSiteId
            || inventDimOrig.InventLocationId != inventDimNew.InventLocationId)
        {
            return true;
        }
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults <c>InventDimId</c> field.
    /// </summary>
    /// <remarks>Method assumes caller has set company context.</remarks>
    private void defaultInventDimId()
    {
        if (this.ItemId
            && this.isFieldSet(fieldNum(PurchReqLine, ItemId)))
        {
            this.InventDimId = InventDim::findOrCreateBlank().inventDimId;

            // Default the product dimensions from item master
            InventTable inventTable = InventTable::find(this.ItemId);
            InventDim   inventDim   = inventTable.getDefaultProductDimensions(this.inventDim());

            this.setInventDimId(inventDim.InventDimId, inventDim);

            // Default the storage dimensions
            if (InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, inventDim))
            {
                if (inventTable)
                {
                    inventDim.initFromInventTable(inventTable, this.getInventItemOrderSetupType(), inventDim);
                }

                this.setInventDimIdFromInventDim(inventDim);
            }
        }
        else if (this.isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert())
        {
            this.InventDimId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventLocationId</Name>
				<Source><![CDATA[
    private void defaultInventLocationId()
    {
        if (this.isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert())
        {
            this.InventLocationId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemId</Name>
				<Source><![CDATA[
    private void defaultItemId()
    {
        if (this.isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert())
        {
            this.ItemId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLineType</Name>
				<Source><![CDATA[
    private void defaultLineType()
    {
        if (this.ItemId
            && this.isFieldSet(fieldNum(PurchReqLine, ItemId)))
        {
            this.LineType = PurchReqLineType::Item;
        }
        else if (this.isFieldSet(fieldNum(PurchReqLine, ProcurementCategory)))
        {
            this.LineType = PurchReqLineType::Category;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultName</Name>
				<Source><![CDATA[
    private void defaultName()
    {        
       if ((this.isFieldSet(fieldNum(PurchReqLine, ItemId)) && this.ItemId)
            || (this.isFieldSet(fieldNum(PurchReqLine, ProcurementCategory)) && this.ProcurementCategory))
        {
            this.initName();
        }

        if (((this.isFieldSet(fieldNum(PurchReqLine, ItemId)) && this.ItemId)
            || (this.isFieldSet(fieldNum(PurchReqLine, ProcurementCategory)) && this.ProcurementCategory)
            || (this.isFieldSet(fieldNum(PurchReqLine, VendAccount)) && this.VendAccount))
            && !PurchReqLineExternalItemDescriptionRevertChangesFlight::instance().isEnabled()
            && this.isConsumption())
        {       
            InventDim inventDim = InventDim::find(this.InventDimId);
            this.initFromVendExternalItemDescription(inventDim);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLineAmount</Name>
				<Source><![CDATA[
    private void defaultLineAmount()
    {
        if (!this.IsPriceDiscCalculated)
        {
            this.defaultPriceAndDiscount();
        }

        if (this.IsPriceDiscCalculated
            && !this.isFieldSet(fieldNum(PurchReqLine, LineAmount)))
        {
            if (this.isFieldSet(fieldNum(PurchReqLine, PurchQty))
                || this.isFieldSet(fieldNum(PurchReqLine, PurchPrice))
                || this.isFieldSet(fieldNum(PurchReqLine, PriceUnit))
                || this.isFieldSet(fieldNum(PurchReqLine, LinePercent))
                || this.isFieldSet(fieldNum(PurchReqLine, LineDisc))
                || this.isFieldSet(fieldNum(PurchReqLine, PurchMarkup))
                )
            {
                this.LineAmount = this.calcLineAmountForced();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPriceAndDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults PurchPrice, LineDisc and LinePct.
    /// Also sets PurchMarkup, PriceUnit and LineAmount in some cases via calls to price calculations.
    /// </summary>
    private void defaultPriceAndDiscount()
    {
        if (!this.IsPriceDiscCalculated)
        {
            // PurchAgreement and TradeAgreements depend on PurchQty and PurchUnitOfMeasure
            if (!this.isFieldSet(fieldNum(PurchReqLine, PurchQty)))
            {
                this.defaultField(fieldNum(PurchReqLine, PurchQty));
            }

            if (!this.isFieldSet(fieldNum(PurchReqLine, PurchUnitOfMeasure)))
            {
                this.defaultField(fieldNum(PurchReqLine, PurchUnitOfMeasure));
            }

            // Ensure PurchAgreement is defaulted, in case there is a match
            if (!this.isFieldSet(fieldNum(PurchReqLine, PurchAgreement)))
            {
                this.defaultField(fieldNum(PurchReqLine, PurchAgreement));
            }

            // Ensure Currency is defaulted, as it is required to find prices
            if (!this.isFieldSet(fieldNum(PurchReqLine, CurrencyCode)))
            {
                this.defaultField(fieldNum(PurchReqLine, CurrencyCode));
            }

            // Ensure LineType is defaulted, as it is required below
            if (!this.isFieldSet(fieldNum(PurchReqLine, LineType)))
            {
                this.defaultField(fieldNum(PurchReqLine, LineType));
            }

            if (this.PurchAgreement
                && (this.isFieldSet(fieldNum(PurchReqLine, ItemId))
                || this.isFieldSet(fieldNum(PurchReqLine, PurchAgreement))
                || this.isFieldSet(fieldNum(PurchReqLine, PurchQty))
                || this.isFieldSet(fieldNum(PurchReqLine, RequiredDate))
                || this.isFieldSet(fieldNum(PurchReqLine, InventDimId)))
                )
            {
                this.salesPurchLineInterface().setAgreementQtyAndPrice(AgreementLine::find(this.PurchAgreement), false /*setQty*/);
                this.IsPriceDiscCalculated = NoYes::Yes;
            }
            else if ((this.isConsumption() && this.LineType == PurchReqLineType::Item)
                    && (this.isFieldSet(fieldNum(PurchReqLine, ItemId))
                     || this.isFieldSet(fieldNum(PurchReqLine, PurchQty))
                     || this.isFieldSet(fieldNum(PurchReqLine, VendAccount))
                     || this.isFieldSet(fieldNum(PurchReqLine, InventDimId))
                    )
                )
            {
                if (this.VendAccount)
                {
                    this.initCurrencyFromTradeAgreement();
                }

                this.setPriceDisc(this.inventDim());
                this.IsPriceDiscCalculated = NoYes::Yes;

                if (this.VendAccount)
                {
                    this.initFromVendTable(VendTable::find(this.VendAccount));
                }
            }
            // If moving the date has caused unlikning
            else if (this.isConsumption()
                    && !this.PurchAgreement
                    && this.orig().PurchAgreement
                    && this.isFieldSet(fieldNum(PurchReqLine, RequiredDate)))
            {
                this.setPriceDisc(this.inventDim());
                this.IsPriceDiscCalculated = NoYes::Yes;
            }
            // Manually setting LineAmount should clear the other fields
            else if (!this.IsPriceDiscCalculated
                    && this.LineAmount != this.calcLineAmountForced()
                    && this.isFieldSet(fieldNum(PurchReqLine, LineAmount)))
            {
                this.PurchPrice     = 0;
                this.LineDisc       = 0;
                this.LinePercent    = 0;
                this.PurchMarkup    = 0;
            }

            this.IsPriceDiscCalculated = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRequiredDate</Name>
				<Source><![CDATA[
    internal void calculateRequiredDate(
        DlvDate         _requiredDate,
        SchedDirection  _calculateDirection = SchedDirection::Forward,
        Days            _leadtime = 0,
        CalendarDays    _useCalendarDays = NoYes::No)
    {
        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            VendCustTransportPointCalculateInput input = this.createTransportPointInput(_calculateDirection, _leadtime, _useCalendarDays);
            input.RequestedShipDate = _requiredDate;
            VendCustTransportPointCalculateOutput output = VendCustTransportPointLine::calculateRequestedShipAndReceiptDate(input);
            this.RequiredDate = output.RequestedReceiptDate;
            this.setTransDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSearchPriceForPurchaseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines whether price for Purchase Line should be searched/defaulted.
    /// </summary>
    /// <param name = "_purchLine">An <c>PurchLine</c> value.</param>
    /// <returns>
    /// True if price should be searched, otherwise false.
    /// </returns>
    internal final boolean mustSearchPriceForPurchaseLine(PurchLine _purchLine)
    {
        return !this.isReferencedByBudgetReservation() && !RequisitionPurchaseOrderGeneration::isPurchReqLinePrice2PurchaseOrder(this, _purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransportPointInput</Name>
				<Source><![CDATA[
    private VendCustTransportPointCalculateInput createTransportPointInput(
        SchedDirection  _calculateDirection = SchedDirection::Forward,
        Days            _leadtime = 0,
        CalendarDays    _useCalendarDays = NoYes::No)
    {
        VendTable localVendTable = VendTable::find(this.VendAccount);

        VendCustTransportPointCalculateInput input = VendCustTransportPointCalculateInput::construct();
        input.ShippingAddress = localVendTable.postalAddress();
        input.ReceivingAddress = LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress);
        input.PurchaseCalendarId = localVendTable.PurchCalendarId;
        input.VendorShipCalendarId = this.ShipCalendarId;
        if (this.ItemId)
        {
            input.ItemCoverageGroupCalendarId = this.internalCalendarId();
        }
        input.CalculateDirection = _calculateDirection;
        input.LeadTime = _leadtime;
        input.UseCalendarDays = _useCalendarDays;
        input.RequestedShipDateInPast = PurchParameters::find().RequestedShipDateInPast;
        return input;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPriceUnit</Name>
				<Source><![CDATA[
    private void defaultPriceUnit()
    {
        if (this.ItemId
            && this.isFieldSet(fieldNum(PurchReqLine, ItemId)))
        {
            this.PriceUnit = this.inventTableModule().getPriceUnit();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProcurementCategory</Name>
				<Source><![CDATA[
    private void defaultProcurementCategory()
    {
        if (this.isFieldSet(fieldNum(PurchReqLine, ItemId)))
        {
            if (this.ItemId)
            {
                this.ProcurementCategory  = EcoResProductCategory::findCategoryByProduct(this.inventTable().Product).RecId;
            }
            else
            {
                this.ProcurementCategory = 0;
            }
        }
        else if (this.isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert())
        {
            this.ProcurementCategory = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProjCategoryId</Name>
				<Source><![CDATA[
    private void defaultProjCategoryId()
    {
        if (this.isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert())
        {
            this.ProjCategoryId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProjId</Name>
				<Source><![CDATA[
    private void defaultProjId()
    {
        if (!this.RecId
            && this.isFieldSet(fieldNum(PurchReqLine, BuyingLegalEntity))
            && this.orig().BuyingLegalEntity)
        {
            this.ProjId = '';
            this.ProjIdDataArea = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProjLinePropertyId</Name>
				<Source><![CDATA[
    private void defaultProjLinePropertyId()
    {
        if (this.isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert())
        {
            this.ProjLinePropertyId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProjSalesPrice</Name>
				<Source><![CDATA[
    private void defaultProjSalesPrice()
    {
        if (this.isFieldSet(fieldNum(PurchReqLine, ItemId))
            || this.isFieldSet(fieldNum(PurchReqLine, PurchPrice))
            || this.isFieldSet(fieldNum(PurchReqLine, TransDate))
            || this.isFieldSet(fieldNum(PurchReqLine, ProjId))
            || this.isFieldSet(fieldNum(PurchReqLine, ProjCategoryId))
            || this.isFieldSet(fieldNum(PurchReqLine, ProjSalesCurrencyId))
            || this.isFieldSet(fieldNum(PurchReqLine, CurrencyCode))
            )
        {
            this.setProjSalesPrice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProjTaxGroupId</Name>
				<Source><![CDATA[
    private void defaultProjTaxGroupId()
    {
        if (!this.RecId
            && this.isFieldSet(fieldNum(PurchReqLine, BuyingLegalEntity))
            && this.orig().BuyingLegalEntity)
        {
            this.ProjTaxGroupId = '';
            this.ProjTaxGroupIdDataArea = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProjTaxItemGroupId</Name>
				<Source><![CDATA[
    private void defaultProjTaxItemGroupId()
    {
        if (this.isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert())
        {
            this.ProjTaxItemGroupId = '';
            this.ProjTaxItemGroupIdDataArea = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProjTransId</Name>
				<Source><![CDATA[
    private void defaultProjTransId()
    {
        if (this.isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert())
        {
            this.ProjTransId = '';
            this.ProjTransIdDataArea = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchUnitOfMeasure</Name>
				<Source><![CDATA[
    private void defaultPurchUnitOfMeasure()
    {
        if (this.isFieldSet(fieldNum(PurchReqLine, ItemId))
            && this.ItemId
            && !this.PurchUnitOfMeasure)
        {
            this.PurchUnitOfMeasure = UnitOfMeasure::unitOfMeasureIdBySymbol(this.inventTableModule().UnitId);
        }
        else if (this.isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert())
        {
            this.PurchUnitOfMeasure = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchAgreement</Name>
				<Source><![CDATA[
    private void defaultPurchAgreement()
    {
        if (this.isFieldSet(fieldNum(PurchReqLine, VendAccount)))
        {
            this.PurchAgreement = 0;
        }

        if (   ( this.VendAccount && this.isFieldSet(fieldNum(PurchReqLine, VendAccount)))
            || (!this.VendAccount && this.isFieldSet(fieldNum(PurchReqLine, PurchQty)))
            || this.isFieldSet(fieldNum(PurchReqLine, RequiredDate))
            || this.isFieldSet(fieldNum(PurchReqLine, InventDimId)))
        {
            AgreementLine agreementLine = AgreementLine::findLineForAutoMatch(this, 0 , true);
            if (this.PurchAgreement != agreementLine.RecId)
            {
                this.PurchAgreement = agreementLine.RecId;

                if (this.PurchAgreement)
                {
                    this.salesPurchLineInterface().setAgreementQtyAndPrice(AgreementLine::find(this.PurchAgreement), false /*setQty*/);

                    PurchAgreementHeader agreementHeader = agreementLine.agreementHeader() as PurchAgreementHeader;
                    // If a new PurchAgreement was set, and the PurchAgreement vendor is not already on the PurchReqLine, then set it
                    if (this.VendAccount != agreementHeader.VendAccount)
                    {
                        this.VendAccount = agreementHeader.VendAccount;
                    }
                }
            }
        }

        if (VendSkipVendorResetOnPurchAgreementUpdateFlight::instance().isEnabled()
            && (   this.isFieldSet(fieldNum(PurchReqLine, LineAmount))
                || this.isFieldSet(fieldNum(PurchReqLine, PurchPrice))))
        {
            AgreementLine agreementLine = AgreementLine::findLineForAutoMatch(this, 0 , true);
            if (this.PurchAgreement != agreementLine.RecId)
            {
                this.PurchAgreement = agreementLine.RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchQty</Name>
				<Source><![CDATA[
    private void defaultPurchQty()
    {
        if (this.ItemId
            && this.PurchQty == 0
            && (this.isFieldSet(fieldNum(PurchReqLine, ItemId))
                || this.isFieldSet(fieldNum(PurchReqLine, InventDimId))))
        {
            if (InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, this.inventDim()))
            {
                this.PurchQty = this.getStandardQuantity(this.inventTable(), this.inventDim());
            }
        }
        else if (this.isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert())
        {
            this.PurchQty = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProjSalesUnitOfMeasure</Name>
				<Source><![CDATA[
    private void defaultProjSalesUnitOfMeasure()
    {
        if (this.isFieldSet(fieldNum(PurchReqLine, PurchUnitOfMeasure))
            && this.ProjId
            && this.PurchUnitOfMeasure
            && !this.ItemId
            && !this.ProjSalesUnitOfMeasure)
        {
            this.ProjSalesUnitOfMeasure = this.PurchUnitOfMeasure;
        }
        else if (this.isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert())
        {
            this.ProjSalesUnitOfMeasure = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultReasonRefRecId</Name>
				<Source><![CDATA[
    private void defaultReasonRefRecId()
    {
        if (this.isFieldSet(fieldNum(PurchReqLine, PriceUnit))
            && this.RequisitionStatus <= PurchReqRequisitionStatus::InReview)
        {
            this.ReasonRefRecId = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultReceivingOperatingUnit</Name>
				<Source><![CDATA[
    private void defaultReceivingOperatingUnit()
    {
        if (this.isFieldSet(fieldNum(PurchReqLine, Requisitioner)))
        {
            this.ReceivingOperatingUnit = HcmWorkerHelper::getPrimaryDepartmentRecId(this.Requisitioner);
        }
        else if (!this.RecId
            && this.isFieldSet(fieldNum(PurchReqLine, BuyingLegalEntity))
            && this.orig().BuyingLegalEntity)
        {
            this.ReceivingOperatingUnit = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxGroup</Name>
				<Source><![CDATA[
    private void defaultTaxGroup()
    {
        if ((this.isFieldSet(fieldNum(PurchReqLine, VendAccount))
                || this.isFieldSet(fieldNum(PurchReqLine, DeliveryPostalAddress))))
        {
            this.setTaxGroup();
        }
        else if (this.isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert())
        {
            this.TaxGroup = '';
            this.TaxGroupDataArea = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxItemGroup</Name>
				<Source><![CDATA[
    private void defaultTaxItemGroup()
    {
        if (EcoResProductVariantItemSalesTaxGroupFeature::isFeatureEnabled()
            && (this.isFieldSet(fieldNum(PurchReqLine, ItemId))
                || this.isFieldSet(fieldNum(PurchReqLine, InventDimId)))
            && this.ItemId
            && this.InventDimId
            && InventDim::areProductVariantsDifferent(this.ItemId, this.orig().InventDimId, this.InventDimId)
            && (!EcoResProductVariantItemSalesTaxGroupNoBRFlight::instance().isEnabled() || !(BrazilParameters::isEnabled() && this.CFOPTable_BR)))
        {
            if (this.isConsumption())
            {
                this.TaxItemGroup = InventTable::getTaxItemGroupId(this.moduleType(), this.ItemId, this.InventDimId);
                this.setDataAreaForModifiedField(fieldNum(PurchReqLine, TaxItemGroup));
            }
        }
        else if (this.isFieldSet(fieldNum(PurchReqLine, ItemId)))
        {
            if (this.ItemId)
            {
                InventTableModule inventTableModule = InventTableModule::find(this.ItemId, this.moduleType());
                
                if (this.isConsumption())
                {
                    this.TaxItemGroup = inventTableModule.TaxItemGroupId;
                    this.setDataAreaForModifiedField(fieldNum(PurchReqLine, TaxItemGroup));
                }
            }
        }
        else if (this.isFieldSet(fieldNum(PurchReqLine, ProcurementCategory))
                && this.ProcurementCategory)
        {
            TaxItemGroupHeading taxItemGroupHeading = EcoResCategory::getProcurementCategoryItemTaxGroup(this.ProcurementCategory, this.BuyingLegalEntity);
            if (taxItemGroupHeading)
            {
                this.TaxItemGroup = taxItemGroupHeading.TaxItemGroup;
                this.setDataAreaForModifiedField(fieldNum(PurchReqLine, TaxItemGroup));
            }
        }
        else if (this.isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert())
        {
            this.TaxItemGroup = '';
            this.TaxItemGroupDataArea = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransDate</Name>
				<Source><![CDATA[
    private void defaultTransDate()
    {
        if ( (this.isConsumption()
              && this.isFieldSet(fieldNum(PurchReqLine, ItemId)))
           || this.isFieldSet(fieldNum(PurchReqLine, RequiredDate)))
        {
            this.setTransDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultVendAccount</Name>
				<Source><![CDATA[
    private void defaultVendAccount()
    {
        if (this.isConsumption())
        {
            if (this.isFieldSet(fieldNum(PurchReqLine, ProcurementCategory)))
            {
                this.VendAccount = '';
                this.VendAccountDataArea = '';
            }
        
            if ( (this.isFieldSet(fieldNum(PurchReqLine, ProcurementCategory)) && this.ProcurementCategory)
                || ((this.isFieldSet(fieldNum(PurchReqLine, ItemId))
                    || this.isFieldSet(fieldNum(PurchReqLine, PurchQty))
                    || this.isFieldSet(fieldNum(PurchReqLine, RequiredDate)))
                    && this.LineType == PurchReqLineType::Item)
                || (this.isFieldSet(fieldNum(PurchReqLine, PurchAgreement)) && this.PurchAgreement)
                )
            {
                this.initVendAccount(true);
            }
            else if (this.isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert())
            {
                this.VendAccount = '';
                this.VendAccountDataArea = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultURL</Name>
				<Source><![CDATA[
    private void defaultURL()
    {
        if (this.VendAccount
            && this.isFieldSet(fieldNum(PurchReqLine, VendAccount)))
        {
            this.URL = VendTable::find(this.VendAccount).url();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if <c>BuyingLegalEntity</c> or <c>ReceivingOperatingUnit</c> fields are changed on new records.
    /// </summary>
    /// <remarks>
    /// BuyingLegalEntity and ReceivingOperating unit can only be changed on new records. If they are changed after certain other fields
    /// were set, some of those other fields need to be reset. This method can be used for that check.
    /// </remarks>
    /// <returns>true if BuyingLegalEntity or ReceivingOperating is set for a new record; otherwise, false.</returns>
    private boolean isBuyingLegalEntityOrReceivingOperatingUnitChangedOnInsert()
    {
        if (!this.RecId
            && (  (this.isFieldSet(fieldNum(PurchReqLine, BuyingLegalEntity))      && this.orig().BuyingLegalEntity)
               || (this.isFieldSet(fieldNum(PurchReqLine, ReceivingOperatingUnit)) && this.orig().ReceivingOperatingUnit))
            )
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the reaction on a changed field value.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field number in the <c>PurchReqLine</c> table.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PurchReqLine, CurrencyCode):
                if (PurchReqCurrencyChangedPromptToBreakLinkShownFlight::instance().isEnabled())
                {
                    this.promptAndBreakPurchaseAgreementLink(_fieldId);
                }
                this.promptAndConvertCurrencyCode();
                break;

            case fieldNum(PurchReqLine, ProcurementCategory) :
                if (PurchReqLineInitItemTaxGroupFlight::instance().isEnabled())
                {
                    this.initTaxItemGroup(this.ProcurementCategory);
                }
                if (this.ProjId)
                {
                    ProjInventJournalTransMapForm::construct(this).initFromEcoResCategory(this.procurementCategory());
                    this.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(this.ProjId, this.ProjCategoryId);
                    this.setProjSalesPrice();
                }
                if (!this.isFieldSet(fieldNum(PurchReqLine, ItemId)))
                {
                    this.initDefaultPriceUnit();
                    this.recalculateRequiredDate();
                }
                break;

            case fieldNum(PurchReqLine, ProjId):
                if (this.ProjId && this.LineType == PurchReqLineType::Category)
                {
                    ProjInventJournalTransMapForm::construct(this).initFromEcoResCategory(this.procurementCategory());                   
                }
                break;

            case fieldNum(PurchReqLine, ItemId):
                this.modifiedFieldItemId();
                this.recalculateRequiredDate();
                break;

            case fieldNum(PurchReqLine, TransDate):
                this.updateAccountingDate();
                break;

            case fieldNum(PurchReqLine, BudgetReservationLine_PSN) :
                if (this.BudgetReservationLine_PSN && this.orig().BudgetReservationLine_PSN != this.BudgetReservationLine_PSN)
                {
                    this.initFromBudgetReservationLine(BudgetReservationLine_PSN::find(this.BudgetReservationLine_PSN));
                }
                else if (!this.BudgetReservationLine_PSN)
                {
                    this.resetProjectFields();
                }
                break;

            case fieldNum(PurchReqLine, VendAccount):
                if (this.isConsumption())
                {
                    InventDim inventDim  = InventDim::find(this.InventDimId);
                    this.initFromVendExternalItemDescription(inventDim);
                }
                this.updateTaxTransInformationFromVendor();
                this.setOverrideSalesTax();
                if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
                {
                    this.ShipCalendarId = VendTable::find(this.VendAccount).PurchaseShipCalendarId;
                    this.recalculateRequiredDate();
                }
                break;

            case fieldNum(PurchReqLine, DeliveryPostalAddress):
                if (PurchReqLineUpdateDeliveryNameAgainstCreatedAddressFlight::instance().isEnabled())
                {
                    LogisticsLocationSelectForm_PurchReqLine::construct(this).copyAddressToCaller(this.getDeliveryEntityRecord(), this.DeliveryPostalAddress);
                }
                if (TaxIntegrationUtils::isTaxInformationEnabled())
                {
                    TransTaxInformationHelper::newHelper().UpdateCompanyLocationFromTransTable(this, this.DeliveryPostalAddress);
                }
                this.recalculateRequiredDate();
                break;

            case fieldNum(PurchReqLine, BuyingLegalEntity):
                this.DefaultDimension = 0;              
                if (PurchReqLineAddressChangeOnEntityChangeFlight::instance().isEnabled())
                {
                    changecompany(this.buyingLegalEntity2DataArea())
                    {
                        this.setAddressFromInventDim(this.inventDim());
                    }
                }
                break;

            case fieldNum(PurchReqLine, ShipCalendarId):
                this.recalculateRequiredDate();
                break;
        }

        // For UI interactions ensure flag is reset before next field is modified, allowing prices to calculate again if needed
        this.IsPriceDiscCalculated = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptAndBreakPurchaseAgreementLink</Name>
				<Source><![CDATA[
    private void promptAndBreakPurchaseAgreementLink(FieldId _fieldId)
    {
        DictField dictField = new DictField(tableNum(PurchReqLine), _fieldId);

        if (this.RecId && this.PurchAgreement)
        {
            AgreementLine localAgreementLine = AgreementLine::find(this.PurchAgreement);

            if (!localAgreementLine.isLinkValid(this, false))
            {
                boolean unlink = true;

                if (appl.ttsLevel() == 0 && this.isFormDataSource())
                {
                    unlink = Box::okCancel(strFmt("@SYS306897", dictField.label()), DialogButton::Cancel, "@SYS306896") == DialogButton::Ok;
                }

                if (unlink)
                {
                    this.PurchAgreement = 0;
                }
                else
                {
                    this.(_fieldId) = this.orig().(_fieldId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultPriceUnit</Name>
				<Source><![CDATA[
    private void initDefaultPriceUnit()
    {
        if (PurchReqLinePriceUnitDefaultedFlight::instance().isEnabled()
            && !this.PriceUnit
            && this.LineType == PurchReqLineType::Category)
        {
            this.PriceUnit = 1.00;  //default value for category based lines
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxTransInformationFromVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the vendor tax information when vendor has been modified.
    /// </summary>
    private void updateTaxTransInformationFromVendor()
    {
        ttsbegin;
        TransTaxInformation transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(this, true);
        if (TaxIntegrationUtils::isTaxInformationEnabled() && transTaxInformation)
        {
            if (this.vendAccount)
            {
                VendTable vendTable = VendTable::find(this.vendAccount);
                TransTaxInformationHelper::initDefaultCustVendTaxInformation(transTaxInformation, vendTable);
            }
            else
            {
                transTaxInformation.VendorLocation = 0;
                transTaxInformation.VendorTaxInformation = 0;
            }
            transTaxInformation.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets value of price fields on <c>PurchReqLine</c> record.
    /// </summary>
    void modifiedFieldLineAmount()
    {
        this.PurchPrice     = 0;
        this.LineDisc       = 0;
        this.LinePercent    = 0;
        this.PurchMarkup    = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the line when ItemId has been modified.
    /// </summary>
    public void modifiedFieldItemId()
    {
        this.InventDimId = InventDim::findOrCreateBlank().inventDimId;

        if (PurchReqLineDefaultDimensionUpdateOnModifiedItemIdFlight::instance().isEnabled()
            && PurchParameters::find().DefaultDimensionUpdateOnModifiedItemId)
        {
            this.resetDefaultDimension();
        }

        if (this.isConsumption() && (!this.VendAccount || !InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, InventDim::findOrCreate(this.inventDim()))))
        {
            this.CurrencyCode = Ledger::accountingCurrency();
        }

        this.initFromInventTable(this.inventTable(), true, true, true);
        this.setAddressFromInventDim(this.inventDim());

        if (this.isConsumption())
        {
            this.setTransDate();
            this.setDefaultDimension();
        }

        if (this.ProjId)
        {
            this.setProjSalesPrice();
            this.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(this.ProjId, this.ProjCategoryId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetDefaultDimension</Name>
				<Source><![CDATA[
    private void resetDefaultDimension()
    {
        this.DefaultDimension = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reinitializes field related to <c>VendAccount</c> on <c>PurchReqLine</c> record.
    /// </summary>
    /// <param name="_searchAgreement">
    ///    Indicates whether agreement should be searched.
    /// </param>
    /// <param name="_skipCurrencyCodePrompt">
    ///    Indicates that we want to silently apply both exchange rate and trade agreements. This applies for consolidation.
    /// </param>
    void modifiedFieldVendAccount(boolean _searchAgreement, boolean _skipCurrencyCodePrompt = false)
    {
        this.PurchAgreement = 0;

        if (this.LineType == PurchReqLineType::Category && this.VendAccount == "")
        {
            this.CurrencyCode = Ledger::accountingCurrency();
        }
        else
        {
            this.initFromVendTable(VendTable::find(this.VendAccount));

            if (!this.CurrencyCode)
            {
                this.CurrencyCode = Ledger::accountingCurrency();
            }

            if (this.LineType == PurchReqLineType::Item)
            {
                this.setPriceDisc(this.inventDim());
            }
        }

        this.setDefaultDimension();

        if (_searchAgreement && this.VendAccount != "")
        {
            this.evaluatePurchAgreement();
        }

        if (this.LineType == PurchReqLineType::Category)
        {
            if (_skipCurrencyCodePrompt)
            {
                this.convertCurrencyCode(this.orig().CurrencyCode, this.CurrencyCode, TradeCurencyConversion::ExchRate);
            }
            else
            {
                this.promptAndConvertCurrencyCode();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Occurs when a <c>inventDim</c> value has changed.
    /// </summary>
    /// <param name="_inventDim">
    /// The new <c>InventDim</c> record.
    /// </param>
    /// <param name="_dimFieldId">
    /// The ID of the changed field.
    /// </param>
    /// <param name="_resetPrice">
    /// true if the price should be recalculated for the line.
    /// </param>
    public boolean modifyInventDim(
        InventDim                           _inventDim,
        FieldId                             _dimFieldId,
        boolean                             _resetPrice = true)
    {
        Set dimFieldIdSet = new Set(Types::Integer);
        dimFieldIdSet.add(_dimFieldId);

        boolean inventDimModified = this.modifyInventDimSet(_inventDim, dimFieldIdSet, _resetPrice);

        this.setVendAccountOnInventDim(_inventDim);

        return inventDimModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDimSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the related fields when one or more inventory dimension fields are modified.
    /// </summary>
    /// <param name="_inventDim">
    /// The new inventory dimension record.
    /// </param>
    /// <param name="_dimFieldIdSet">
    /// A set containing the ID's of the modified <c>InventDim</c> field.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that indicates whether the price agreements are to be reset; optional.
    /// </param>
    /// <returns>
    /// true if dimensions were modified; Otherwise false.
    /// </returns>
    public boolean modifyInventDimSet(
        InventDim   _inventDim,
        Set         _dimFieldIdSet,
        boolean     _resetPrice = true)
    {
        if (!this.ItemId)
        {
            return false;
        }

        InventDim inventDimLocal = InventDim::findOrCreate(_inventDim);

        if (!InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, inventDimLocal))
        {
            return false;
        }

        InventDimId         oldInventDimId      = this.InventDimId;
        boolean             isProductModified   = InventDim::doesFieldSetContainProductDimension(_dimFieldIdSet);
        boolean             isSiteModified      = _dimFieldIdSet.in(fieldNum(InventDim, InventSiteId));
        boolean             isWarehouseModified = _dimFieldIdSet.in(fieldNum(InventDim, InventLocationId));
        boolean             priceUpdateRequired = InventDim::doesFieldSetContainActiveEnabledPurchPriceDisc(_dimFieldIdSet, InventDimGroupSetup::newItemId(this.ItemId));
        boolean             addressUpdateNeeded = (!this.isTmp()
                                                    && (isProductModified || isSiteModified || isWarehouseModified));

        if (isProductModified || isSiteModified || isWarehouseModified)
        {
            if (isProductModified)
            {
                inventDimLocal.clearStorageDimensions();
                this.setInventDimIdFromInventDim(inventDimLocal);
            }

            inventDimLocal.initFromInventTable(this.inventTable(), this.getInventItemOrderSetupType(), inventDimLocal);
            inventDimLocal = this.mergeDimensionDefaultingValues(InventDim::find(oldInventDimId), inventDimLocal);

            this.setInventDimIdFromInventDim(inventDimLocal);

            this.initDimensionsSpecificDefaulting(this.inventTable());

            _inventDim.refreshFormDataSource(this.inventDimId);

            if (EcoResProductVariantItemSalesTaxGroupFeature::isFeatureEnabled()
                && isProductModified
                && this.isConsumption()
                && (!EcoResProductVariantItemSalesTaxGroupNoBRFlight::instance().isEnabled() || !(BrazilParameters::isEnabled() && this.CFOPTable_BR)))
            {
                this.TaxItemGroup = InventTable::getTaxItemGroupId(ModuleInventPurchSales::Purch, this.inventTable().ItemId, inventDimLocal.inventDimId);
                
                if (!this.TaxItemGroup)
                {
                    this.TaxItemGroup = EcoResCategory::getProcurementCategoryItemTaxGroup(this.ProcurementCategory, this.BuyingLegalEntity).TaxItemGroup;
                }

                this.setDataAreaForModifiedField(fieldNum(PurchReqLine, TaxItemGroup));
            }
        }

        if (isProductModified)
        {
            this.ExternalItemId = '';
            this.initName();
            this.initFromVendExternalItemDescription(inventDimLocal);
        }

        if (!this.isPurchAgreementLineLinkValid())
        {
            this.PurchAgreement = 0;
        }

        if (_resetPrice && priceUpdateRequired)
        {
            this.salesPurchLineInterface().resetPriceAgreement();
            this.setPriceDisc(inventDimLocal);
        }

        this.evaluatePurchAgreement();

        if (addressUpdateNeeded)
        {
            this.setAddressFromInventDim(inventDimLocal);
            this.recalculateRequiredDate();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimensionDefaultingValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges dimension defaulting values.
    /// </summary>
    /// <param name = "_originalInventDim">Original dimension values.</param>
    /// <param name = "_modifiedInventDim">Modified dimension values.</param>
    /// <returns></returns>
    private InventDim mergeDimensionDefaultingValues(InventDim _originalInventDim, InventDim _modifiedInventDim)
    {
        if (_originalInventDim.inventSiteId != _modifiedInventDim.InventSiteId)
        {
            if (!_modifiedInventDim.InventSiteId)
            {
                _modifiedInventDim.InventSiteId     = _originalInventDim.InventSiteId;
                _modifiedInventDim.InventLocationId = _originalInventDim.inventLocationId;
            }
        }
        else if (!_modifiedInventDim.InventLocationId)
        {
            _modifiedInventDim.InventLocationId = _originalInventDim.InventLocationId;
        }

        return InventDim::findOrCreate(_modifiedInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReleasedProductSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes settings that are based on the released product.
    /// </summary>
    /// <param name = "_inventTable">The <c>InventTable</c> record to use for initializing base dimensions.</param>
    public void initReleasedProductSpecificDefaulting(InventTable _inventTable)
    {
        if (!_inventTable)
        {
            return;
        }

        InventTableModule   inventTableModule   = InventTableModule::find(_inventTable.ItemId, this.moduleType());
        InventDim           inventDim           = _inventTable.getDefaultProductDimensions(this.inventDim());

        this.setInventDimId(inventDim.InventDimId, inventDim);

        this.ItemId                 = _inventTable.ItemId;
        this.setDataAreaForModifiedField(fieldNum(PurchReqLine, ItemId));

        if (this.isConsumption())
        {
            this.TaxItemGroup           = inventTableModule.TaxItemGroupId;
            this.setDataAreaForModifiedField(fieldNum(PurchReqLine, TaxItemGroup));
        }

        this.ProcurementCategory  = EcoResProductCategory::findCategoryByProduct(_inventTable.Product).RecId;

        if (!this.RecId)
        {
            this.TaxGroup = '';
            this.setDataAreaForModifiedField(fieldNum(PurchReqLine, TaxGroup));
        }

        if (this.isConsumption() && !this.TaxItemGroup)
        {
            this.TaxItemGroup           = EcoResCategory::getProcurementCategoryItemTaxGroup(this.ProcurementCategory, this.BuyingLegalEntity).TaxItemGroup;
            this.setDataAreaForModifiedField(fieldNum(PurchReqLine, TaxItemGroup));
        }

        this.PurchUnitOfMeasure     = UnitOfMeasure::unitOfMeasureIdBySymbol(inventTableModule.UnitId);
        this.PriceUnit              = inventTableModule.getPriceUnit();
        this.LineAmount             = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes dimension specific order defaulting.
    /// </summary>
    /// <param name = "_inventTable"><c>InventTable</c> record to use for initialization.</param>
    /// <param name = "_initVendAccount">true if vendor specific information should be initialized; otherwise false; optional.</param>
    public void initDimensionsSpecificDefaulting(InventTable _inventTable, boolean _initVendAccount = true)
    {
        InventDim           inventDim           = InventDim::find(this.InventDimId);

        this.PurchQty = this.PurchQty ? this.PurchQty : this.getStandardQuantity(_inventTable, inventDim);

        if (this.LineType == PurchReqLineType::Item)
        {
            if (this.isConsumption() && _initVendAccount)
            {
                this.initVendAccount();
            }

            this.initName(_inventTable);

            this.setPriceDisc(inventDim);
        }

        if (this.isConsumption())
        {
            this.initFromVendExternalItemDescription(inventDim);
        }

        if (this.VendAccount)
        {
            if (this.LineType == PurchReqLineType::Item)
            {
                this.initCurrencyFromTradeAgreement();
                this.setPriceDisc(inventDim);
            }

            this.initFromVendTable(VendTable::find(this.VendAccount));

            this.setDefaultDimension();
        }

        if (this.ProjId)
        {
            ProjInventJournalTransMapForm::construct(this).initFromInventTable(_inventTable);
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.setCFOP_BR();

            if (this.LineType == PurchReqLineType::Item)
            {
                this.TaxServiceCode_BR  = _inventTable.TaxServiceCode_BR;
            }
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyWMSLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies an <c>InventDim</c> record with WMS values.
    /// </summary>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record to modify.
    /// </param>
    /// <param name="_resetWMSLocationId">
    /// A Boolean value that indicates whether the <c>wMSLocationId</c> field is to be reset even when the
    /// <c>LocationId</c> field is unchanged; optional.
    /// </param>
    /// <param name="_defaultInventDirection">
    ///    Indicates whether it is per default an issue or a receipt transaction.
    /// </param>
    /// <param name="_positiveInventDirection">
    ///    Indicates whether it is an issue or a receipt transaction for a positive quantity ordered amount.
    /// </param>
    /// <remarks>
    /// When changing the warehouse on a purchase requisition line, the location is updated with default WMS
    /// values for items where the attached dimension group has the location set to active.
    /// </remarks>
    [Hookable(false), Wrappable(false)]
    public void modifyWMSLocation(
        InventDim           _inventDim,
        boolean             _resetWMSLocationId,
        InventDirection     _defaultInventDirection,
        InventDirection     _positiveInventDirection)
    {
        this.salesPurchLineInterface().modifyWMSLocation(_inventDim, _resetWMSLocationId, InventDirection::Receipt, InventDirection::Receipt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCFOPChange_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets executed when cfop is changed and sets the Item Sales Tax and Sales Tax groups
    /// </summary>
    /// <param name="_modifiedField">
    /// The field id which is changed
    /// </param>

    public void onCFOPChange_BR(FieldId _modifiedField = fieldNum(PurchReqLine, cfopTable_BR))
    {
        if (this.cfopTable_BR)
        {
            this.setTaxGroupAndTaxItemGroupFields_BR();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDeliveryPostalAddressChange_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets executed when the delivery postal address is changed and sets the CFOP lookup accordingly
    /// </summary>
    public void onDeliveryPostalAddressChange_BR()
    {
        CFOPValidation_BR       cfopValidation;
        LogisticsPostalAddress  currentAddress, originAddress;

        currentAddress      = LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress);
        originAddress       = LogisticsPostalAddress::findRecId(this.orig().DeliveryPostalAddress);

        if (currentAddress.State != originAddress.State || currentAddress.CountryRegionId != originAddress.CountryRegionId)
        {
            cfopValidation      = CFOPValidation_BR::construct(this);
            this.cfopTable_BR   = cfopValidation.getDefaultCFOP();

            this.onCFOPChange_BR(fieldNum(PurchReqLine, DeliveryPostalAddress));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>operatingUnit2DataArea</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the name of the selected record.
    /// </summary>
    /// <returns>
    /// The name of the selected record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display Name operatingUnit2DataArea()
    {
        return DirPartyTable::findRec(this.ReceivingOperatingUnit).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    CustVendAC orderAccount()
    {
        return this.VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    public AccountingDate parmExchangeRateDate()
    {
        return this.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return enumStr(SourceDocumentLine_ProductRequisition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return SourceDocumentLine_ProductRequisition::PurchaseRequisitionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        return SourceDocumentHeader::find(this.purchReqTable().SourceDocumentHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBudgetCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs budget check for the line
    /// </summary>
    /// <param name="_forceCheck">
    /// Do the budget check on the line even if automatic line level budget check
    /// is turned off.
    /// </param>
    public void performBudgetCheck(boolean _forceCheck = false)
    {
        if (!this.isConsumption())
        {
            return;
        }

        PurchReqInstrumentationLogger purchReqInstrumentationLogger = PurchReqLine::instrumentationLogger();

        var PurchReqProcessState = PurchReqProcessState::instance();
        try
        {
            using (var activityContextSourceDocument = purchReqInstrumentationLogger.requisitionLine().submitSourceDocument(this))
            {
                PurchReqProcessState.startLinePerformBudgetCheckInProcess();

                if (_forceCheck)
                {
                    SourceDocumentProcessorFacade::submitOnDemandSourceDocLineImpl(this);
                }
                else
                {
                    SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(
                        this,
                        false,
                        SourceDocumentLineAccountingStatus::None);
                }
            }

            using (var activityContextTotals = purchReqInstrumentationLogger.requisitionLine().totals(this))
            {
                // Make sure tax has been calculated before budget check.
                PurchReqTotals_Trans totals = PurchReqTotals_Trans_LineTax::construct(this.purchReqTable());
                totals.setPurchReqLine(this);
                totals.calc();
            }

            if (!_forceCheck && this.BudgetReservationLine_PSN && PublicSectorUtils::isBudgetReservationEnabled())
            {
                PurchReqTable purchReqTable = PurchReqTable::findPurchReqId(this.purchReqId());

                using (var activityContextBalance = purchReqInstrumentationLogger.requisitionLine().checkBudgetReservationBalance(this))
                {
                    BudgetReservation_PSN::checkBudgetReservationBalance(this.BudgetReservationLine_PSN, purchReqTable.SourceDocumentHeader);
                }
            }
            this.purchReqTable().logBudgetErrors();
        }
        finally
        {
            using (var activityContextComplete = purchReqInstrumentationLogger.requisitionLine().completeLinePerformBudgetCheckInProcess(this))
            {
                PurchReqProcessState.completeLinePerformBudgetCheckInProcess();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the date for which to calculate the price according to the <c>PriceDateType</c> field.
    /// </summary>
    /// <returns>
    /// The date for which to calculate the price.
    /// </returns>
    /// <remarks>
    /// The <c>PriceDateType</c> field can be set up to <c>Today</c> or <c>DeliveryDate</c> as a price date.
    /// </remarks>
    public PurchReqRequiredDate priceDate()
    {
        PurchParameters purchParameters = PurchParameters::find();

        switch (purchParameters.PriceDateType)
        {
            case PurchPriceDateType::DeliveryDate:
                return this.RequiredDate;

            case PurchPriceDateType::Today:
                return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.priceDateDelegate(purchParameters.PriceDateType, result);

                if (result.hasResult())
                {
                    return result.result();
                }
                else
                {
                    throw error(strFmt("@SCM:PurchReqPriceDateNotFound", purchParameters.PriceDateType));
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDateDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for providing the date for which to calculate the price.
    /// </summary>
    /// <param name = "_purchPriceDateType">An <c>PurchPriceDateType</c> value.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> to provide the result.</param>
    delegate void priceDateDelegate(
        PurchPriceDateType          _purchPriceDateType,
        EventHandlerResult          _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>PriceGroupId</c> corresponding to the vendor on the <c>PurchReqLine</c> record.
    /// </summary>
    /// <returns>
    /// <c>PriceGroupId</c> corresponding to the vendor on the <c>PurchReqLine</c> record.
    /// </returns>
    public PriceGroupId priceGroupId()
    {
        PriceGroupId priceGroupId;

        if (this.VendAccount)
        {
            priceGroupId = VendTable::find(this.VendAccount).PriceGroup;
        }

        return priceGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>procCategoryPolicyParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>procCategoryPolicyParameter</c> record that is associated with the
    /// <c>PurchReqLine</c> record.
    /// </summary>
    /// <returns>
    /// The <c>procCategoryPolicyParameter</c> record.
    /// </returns>

    public ProcCategoryPolicyParameter procCategoryPolicyParameter()
    {
        ProcCategoryPolicyParameter procCategoryPolicyParameter;

        if (this.LineType == PurchReqLineType::Category)
        {
            procCategoryPolicyParameter = EcoResCategory::getProcCategoryPolicyParameter(this.ProcurementCategory,
                                                                                         this.BuyingLegalEntity,
                                                                                         this.ReceivingOperatingUnit,
                                                                                         this.ReceivingOperatingUnit? ProcCategoryOrganizationOption::BuyingLegalEntityAndCombination : ProcCategoryOrganizationOption::BuyingLegalEntity);
        }

        return procCategoryPolicyParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>procurementCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    returns a record in <c>EcoResCategory</c> table corresponding to the <c>ProcurementCategory</c> on a record in <c>PurchReqLine</c> table.
    /// </summary>
    /// <returns>
    ///    A record in <c>EcoResCategory</c> table corresponding to the <c>ProcurementCategory</c> on a record in <c>PurchReqLine</c> table.
    /// </returns>
    public EcoResCategory procurementCategory()
    {
        EcoResCategory ecoResCategory;

        if (this.ProcurementCategory)
        {
            ecoResCategory = EcoResCategory::find(this.ProcurementCategory);
        }

        return ecoResCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>procurementCategoryCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Display Purchase requisition procurement category name.
    /// </summary>
    /// <returns>
    ///    Name of the procurement category corresponding to the record in <c>PurchReqLine</c> table.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display EcoResCategoryCommodityCode procurementCategoryCode()
    {
        EcoResCategoryCommodityCode  code;

        if (this.ProcurementCategory)
        {
            code = this.procurementCategory().Code;
        }

        return code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>procurementCategoryFriendlyName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Display Purchase requisition procurement category friendly name.
    /// </summary>
    /// <returns>
    ///    Friendly name of the procurement category corresponding to the record in <c>PurchReqLine</c> table.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display EcoResCategoryFriendlyName procurementCategoryFriendlyName()
    {
        EcoResCategoryFriendlyName  name;

        if (this.ProcurementCategory)
        {
            name = EcoResCategoryTranslation::getProcureCategoryNameProcCategory(this.ProcurementCategory);
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptAndConvertCurrencyCode</Name>
				<Source><![CDATA[
    private void promptAndConvertCurrencyCode()
    {
        Dialog                  dialog;
        DialogField             dialogField;
        DialogButton            dialogButton;
        boolean                 doConversion;

        TradeCurencyConversion  tradeCurencyConversion = TradeCurencyConversion::ExchRate;

        if (!this.RecId || this.CurrencyCode == this.orig().CurrencyCode)
        {
            return;
        }

        if (!isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
        {
            // Currency code has been changed. Purchase requisition lines and charges will be recalculated.
            dialogButton = Box::okCancel("@SYS113395", DialogButton::Ok);

            if (dialogButton == DialogButton::Ok)
            {
                doConversion = true;
            }
        }
        else
        {
            // Currency code has been changed. Purchase requisition lines and charges will be recalculated.
            dialog = new Dialog("@SYS113395");

            // Currency code has been changed. Purchase requisition lines and charges will be recalculated.
            dialog.addText("@SYS113395");

            dialogField = dialog.addField(enumStr(TradeCurencyConversion));

            if (dialog.run())
            {
                doConversion = true;
                tradeCurencyConversion = dialogField.value();
            }
        }

        if (doConversion)
        {
            this.convertCurrencyCode(this.orig().CurrencyCode, this.CurrencyCode, tradeCurencyConversion);
            if (this.ProjId)
            {
                this.setProjSalesPrice();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaEditActivityPurpose</Name>
				<Source><![CDATA[
    public edit smmActivityPurpose psaEditActivityPurpose(boolean _set, ProjActivityNumber _activityNumber)
    {
        smmActivities smmActivities;
        str name;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if (_set)
            {
                this.ActivityNumber = _activityNumber;
                this.initFromProjActivity(ProjActivity::find(_activityNumber));
            }
            else
            {
                smmActivities = smmActivities::find(this.ActivityNumber);
                name = smmActivities.Purpose;
            }
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a record in <c>PurchLine</c> table associated with the current <c>PurchReqLine</c> record.
    /// </summary>
    /// <returns>
    /// A record in <c>PurchLine</c> table if found; otherwise an empty buffer.
    /// </returns>
    public PurchLine purchLine()
    {
        PurchLine purchLine;

        if (this.PurchId && this.LineRefId)
        {
            select firstonly purchLine
                    where purchLine.PurchId           == this.PurchId    &&
                          purchLine.PurchReqLineRefId == this.LineRefId  &&
                         !purchLine.IsDeleted;
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLineStatus</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(false)]
    display PurchStatus purchLineStatus()
    {
        PurchStatus ret;

        if (this.PurchLineCreated == NoYes::Yes)
        {
            changecompany(this.buyingLegalEntity2DataArea())
            {
                ret = this.purchLine().PurchStatus;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the purchase requisition ID of the selected record.
    /// </summary>
    /// <returns>
    /// The purchase requisition ID of the selected record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display PurchReqId purchReqId()
    {
        return this.purchReqTable().PurchReqId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the purchase requisition name of the selected record.
    /// </summary>
    /// <returns>
    /// The purchase requisition name of the selected record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display PurchReqName purchReqName()
    {
        return this.purchReqTable().PurchReqName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqTable</Name>
				<Source><![CDATA[
    PurchReqTable purchReqTable(boolean  update = false)
    {
        return PurchReqTable::find(this.PurchReqTable, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQCaseLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds record in the <c>purchRFQCaseLine</c> table that corresponds to the specified record in the
    ///    <c>PurchReqLine</c> table.
    /// </summary>
    /// <returns>
    ///    The specified record in the <c>purchRFQCaseLine</c> table; otherwise, an empty record.
    /// </returns>

    public PurchRFQCaseLine purchRFQCaseLine()
    {
        PurchRFQCaseLine purchRFQCaseLine;

        if (this.PurchRFQCaseId)
        {
            purchRFQCaseLine = PurchRFQCaseLine::findByAddressAndRFQCaseId(this.TableId, this.RecId, this.PurchRFQCaseId);
        }

        return purchRFQCaseLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQStatus</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(false)]
    display PurchReqPurchRFQStatus purchRFQStatus()
    {
        PurchReqPurchRFQStatus   purchREQRFQStatus;

        if (this.BuyingLegalEntity)
        {
            changecompany(this.buyingLegalEntity2DataArea())
            {
                if (this.purchRFQCaseLine())
                {
                    purchREQRFQStatus = new DictEnum(enumNum(PurchRFQStatus)).value2Label(this.purchRFQCaseLine().StatusHigh);
                }
            }
        }

        return purchREQRFQStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchStatus</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(false)]
    display PurchStatus purchStatus()
    {
        return this.purchTable().PurchStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable</Name>
				<Source><![CDATA[
    public PurchTable purchTable()
    {
        PurchTable purchTable;

        if (this.PurchId)
        {
            purchTable = PurchTable::find(this.PurchId);
        }

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>questionnaireAggregateStatus</Name>
				<Source><![CDATA[
    display PurchReqQuestionnaireAggregateStatus questionnaireAggregateStatus()
    {
        PurchReqQuestionnaireAggregateStatus    aggregateStatus         = PurchReqQuestionnaireAggregateStatus::NotRequired;
        PurchReqLineKMCollection                questionnaireCollectionSummary, questionnaireCollection;

        select count(RecId) from questionnaireCollectionSummary
            where questionnaireCollectionSummary.PurchReqLine == this.RecId;

        if (questionnaireCollectionSummary.RecId)
        {
            aggregateStatus = PurchReqQuestionnaireAggregateStatus::RequiredComplete;

            while select PurchReqLine, kmCollectionId, kmCollectionIdDataArea from questionnaireCollection
                where questionnaireCollection.PurchReqLine == this.RecId
            {
                if (questionnaireCollection.questionnaireStatus() == PurchReqQuestionnaireStatus::NotStarted)
                {
                    aggregateStatus = PurchReqQuestionnaireAggregateStatus::RequiredIncomplete;
                    break;
                }
            }
        }

        return aggregateStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requiredAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the required action for the task that is assigned to the <c>PurchReqLine</c> record.
    /// </summary>
    /// <returns>
    /// A string that contains the required action.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display PurchReqRequiredAction requiredAction()
    {
        WorkflowWorkItemTable   workflowWorkItemTable;
        PurchReqRequiredAction  text;
        select firstonly RecId from workflowWorkItemTable
                    where   workflowWorkItemTable.RefTableId == this.TableId &&
                            workflowWorkItemTable.RefRecId   == this.RecId   &&
                            workflowWorkItemTable.UserId     == curUserId()  &&
                            workflowWorkItemTable.Status     == WorkflowWorkItemStatus::Pending;

        if (workflowWorkItemTable.RecId)
        {
            switch (this.RequisitionStatus)
            {
                case PurchReqRequisitionStatus::InReview :
                    text = "@SYS109994";
                    break;

                default :
            }
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requiredActionDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the due date for the required action on the <c>PurchReqLine</c> record.
    /// </summary>
    /// <returns>
    /// A string that contains the due date for the required action.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display PurchReqRequiredActionDueDateStr requiredActionDueDate()
    {
        WorkflowWorkItemTable               workflowWorkItemTable;
        PurchReqRequiredActionDueDateStr    dueDateStr;
        select firstonly DueDateTime from workflowWorkItemTable
                    where   workflowWorkItemTable.RefTableId == this.TableId &&
                            workflowWorkItemTable.RefRecId   == this.RecId &&
                            workflowWorkItemTable.CompanyId  == this.buyingLegalEntity2DataArea() &&
                            workflowWorkItemTable.UserId     == curUserId() &&
                            workflowWorkItemTable.Status     == WorkflowWorkItemStatus::Pending;

        if (workflowWorkItemTable.DueDateTime != DateTimeUtil::minValue())
        {
            dueDateStr = strFmt("%1",datetime2str(DateTimeUtil::applyTimeZoneOffset(workflowWorkItemTable.DueDateTime, DateTimeUtil::getUserPreferredTimeZone()),DateFlags::FormatAll));
        }

        return dueDateStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requisitionerName</Name>
				<Source><![CDATA[
    /// <summary>
    /// This provides the Requisitioner Name for display
    /// </summary>
    /// <returns>
    /// The requisitioner name that corresponds to the <c>Requisitioner</c> field on <c>PurchReqLine</c>
    /// record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display HcmWorkerName requisitionerName()
    {
        return HcmWorker::find(this.Requisitioner).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveProductName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the product name based on the product information on the current record.
    /// </summary>
    /// <returns>
    /// The product name.
    /// </returns>
    public ItemFreeTxt resolveProductName()
    {
        ItemFreeTxt productName;

        if (this.Name && VendFormletterParameters::find().itemNameAndTxt2Description)
        {
            if (this.ItemIdNonCatalog)
            {
                productName = strFmt("@SYS53184", this.ItemIdNonCatalog, this.Name);
            }
            else
            {
                productName = this.Name;
            }
        }
        else
        {
            productName = this.ItemIdNonCatalog;
        }

        return productName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rfqCaseId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(false)]
    display PurchRFQCaseId rfqCaseId()
    {
        PurchRFQCaseId  purchRFQCaseId;

        if (this.BuyingLegalEntity)
        {
            changecompany(this.buyingLegalEntity2DataArea())
            {
                purchRFQCaseId = this.purchRFQCaseLine().rfqCaseId;
            }
        }

        return purchRFQCaseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchTable</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public SalesPurchTable salesPurchTable()
    {
        return this.salesPurchLineInterface().salesPurchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedQualifierText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the description of the selected qualifier.
    /// </summary>
    /// <returns>
    /// The description of the qualifier, if found; otherwise, an empty string.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public Description selectedQualifierText()
    {
        Description description;

        if (this.AssetRuleQualifierOption)
        {
            description = AssetRuleQualifierOption::getDescription(this.AssetRuleQualifierOption);
        }
        else if (this.AssetRuleQualifierOptionLocal)
        {
            description = AssetRuleQualifierOptionLocal::getDescription(this.AssetRuleQualifierOptionLocal);
        }

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the address on a line. Depending on requisition or line type, address is set either based on the inventory dimension, or on the location
    /// of the requisitioner. Also updates the sales tax group, which may need to be set based on delivery address.
    /// </summary>
    /// <param name="_inventDim">
    ///    The inventory dimension record to use in case address needs to be set based on the inventory dimensions.
    /// </param>
    [HookableAttribute(true)]
    void setAddressFromInventDim(InventDim _inventDim)
    {
        if (_inventDim || this.Requisitioner)
        {
            LogisticsLocation location = this.defaultAddress(_inventDim);

            if (location)
            {
                this.AddressRefRecId         = location.RecId;
                this.AddressRefTableId       = location.TableId;
                this.DeliveryPostalAddress   = LogisticsPostalAddress::addressRecIdFromLocationRecId(location.RecId);
                this.DeliveryName            = location.Description;

                this.setTaxGroupFromAddress(location.RecId);
            }

            if (!this.TaxGroup)
            {
                this.setTaxGroup();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCFOP_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// It is responsible for setting CFOP code
    /// </summary>
    /// <param name="_askToUser">
    /// Boolean to define if should request user interaction
    /// </param>
    private void setCFOP_BR(boolean _askToUser = false)
    {
        CFOPValidation_BR cfopValidation = CFOPValidation_BR::construct(this);
        this.CFOPTable_BR = cfopValidation.getDefaultCFOP(_askToUser);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataAreaForModifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the <c>DataArea</c> field if a corresponding field value is modified.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field number in the <c>PurchReqTable</c> table.
    /// </param>
    public void setDataAreaForModifiedField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(PurchReqLine, AssetGroup)         : this.AssetGroupDataArea           = this.AssetGroup           ? getCompany(tableNum(AssetGroup)) : ''; break;
            case fieldNum(PurchReqLine, InventDimId)        : this.InventDimIdDataArea          = this.InventDimId          ? getCompany(tableNum(InventDim)) : ''; break;
            case fieldNum(PurchReqLine, InventLocationId)   : this.InventLocationIdDataArea     = this.InventLocationId     ? getCompany(tableNum(InventLocation)) : ''; break;
            case fieldNum(PurchReqLine, ItemId)             : this.ItemIdDataArea               = this.ItemId               ? getCompany(tableNum(InventTable)) : ''; break;
            case fieldNum(PurchReqLine, ProjCategoryId)     : this.ProjCategoryIdDataArea       = this.ProjCategoryId       ? getCompany(tableNum(ProjCategory)) : ''; break;
            case fieldNum(PurchReqLine, ProjTransId)        : this.ProjTransIdDataArea          = this.ProjTransId          ? getCompany(tableNum(ProjItemTrans)) : ''; break;
            case fieldNum(PurchReqLine, ProjLinePropertyId) : this.ProjLinePropertyIdDataArea   = this.ProjLinePropertyId   ? getCompany(tableNum(ProjLineProperty)) : ''; break;
            case fieldNum(PurchReqLine, ProjId)             : this.ProjIdDataArea               = this.ProjId               ? getCompany(tableNum(ProjTable)) : ''; break;
            case fieldNum(PurchReqLine, ProjTaxGroupId)     : this.ProjTaxGroupIdDataArea       = this.ProjTaxGroupId       ? getCompany(tableNum(TaxGroupHeading)) : ''; break;
            case fieldNum(PurchReqLine, ProjTaxItemGroupId) : this.ProjTaxItemGroupIdDataArea   = this.ProjTaxItemGroupId   ? getCompany(tableNum(TaxItemGroupHeading)) : ''; break;
            case fieldNum(PurchReqLine, PurchRFQCaseId)     : this.PurchRFQCaseIdDataArea       = this.PurchRFQCaseId       ? getCompany(tableNum(PurchRFQCaseTable)) : ''; break;
            case fieldNum(PurchReqLine, PurchId)            : this.PurchIdDataArea              = this.PurchId              ? getCompany(tableNum(PurchTable)) : ''; break;
            case fieldNum(PurchReqLine, ActivityNumber)     : this.ActivityNumberDataArea       = this.ActivityNumber       ? getCompany(tableNum(smmActivities)) : ''; break;
            case fieldNum(PurchReqLine, TaxGroup)           : this.TaxGroupDataArea             = this.TaxGroup             ? getCompany(tableNum(TaxGroupHeading)) : ''; break;
            case fieldNum(PurchReqLine, TaxItemGroup)       : this.TaxItemGroupDataArea         = this.TaxItemGroup         ? getCompany(tableNum(TaxItemGroupHeading)) : ''; break;
            case fieldNum(PurchReqLine, VendAccount)        : this.VendAccountDataArea          = this.VendAccount          ? getCompany(tableNum(VendTable)) : ''; break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDataArea</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the value of the DataArea field based on the corresponding data field.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field id of the DataArea field to default.
    /// </param>
    public void defaultDataArea(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(PurchReqLine, AssetGroupDataArea):
                this.AssetGroupDataArea = this.AssetGroup ? getCompany(tableNum(AssetGroup)) : '';
                break;

            case fieldNum(PurchReqLine, InventDimIdDataArea):
                this.InventDimIdDataArea = this.InventDimId ? getCompany(tableNum(InventDim)) : '';
                break;

            case fieldNum(PurchReqLine, InventLocationIdDataArea):
                this.InventLocationIdDataArea = this.InventLocationId ? getCompany(tableNum(InventLocation)) : '';
                break;

            case fieldNum(PurchReqLine, ItemIdDataArea):
                this.ItemIdDataArea = this.ItemId ? getCompany(tableNum(InventTable)) : '';
                break;

            case fieldNum(PurchReqLine, ProjCategoryIdDataArea):
                this.ProjCategoryIdDataArea = this.ProjCategoryId ? getCompany(tableNum(ProjCategory)) : '';
                break;

            case fieldNum(PurchReqLine, ProjTransIdDataArea):
                this.ProjTransIdDataArea = this.ProjTransId ? getCompany(tableNum(ProjItemTrans)) : '';
                break;

            case fieldNum(PurchReqLine, ProjLinePropertyIdDataArea):
                this.ProjLinePropertyIdDataArea = this.ProjLinePropertyId ? getCompany(tableNum(ProjLineProperty)) : '';
                break;

            case fieldNum(PurchReqLine, ProjIdDataArea):
                this.ProjIdDataArea = this.ProjId ? getCompany(tableNum(ProjTable)) : '';
                break;

            case fieldNum(PurchReqLine, ProjTaxGroupIdDataArea):
                this.ProjTaxGroupIdDataArea = this.ProjTaxGroupId ? getCompany(tableNum(TaxGroupHeading)) : '';
                break;

            case fieldNum(PurchReqLine, ProjTaxItemGroupIdDataArea):
                this.ProjTaxItemGroupIdDataArea = this.ProjTaxItemGroupId ? getCompany(tableNum(TaxItemGroupHeading)) : '';
                break;

            case fieldNum(PurchReqLine, PurchRFQCaseIdDataArea):
                this.PurchRFQCaseIdDataArea = this.PurchRFQCaseId ? getCompany(tableNum(PurchRFQCaseTable)) : '';
                break;

            case fieldNum(PurchReqLine, PurchIdDataArea):
                this.PurchIdDataArea = this.PurchId ? getCompany(tableNum(PurchTable)) : '';
                break;

            case fieldNum(PurchReqLine, ActivityNumberDataArea):
                this.ActivityNumberDataArea = this.ActivityNumber ? getCompany(tableNum(smmActivities)) : '';
                break;

            case fieldNum(PurchReqLine, TaxGroupDataArea):
                this.TaxGroupDataArea = this.TaxGroup ? getCompany(tableNum(TaxGroupHeading)) : '';
                break;

            case fieldNum(PurchReqLine, TaxItemGroupDataArea):
                this.TaxItemGroupDataArea = this.TaxItemGroup ? getCompany(tableNum(TaxItemGroupHeading)) : '';
                break;

            case fieldNum(PurchReqLine, VendAccountDataArea):
                this.VendAccountDataArea = this.VendAccount ? getCompany(tableNum(VendTable)) : '';
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default company corresponding to the buying legal entity of <c>PurchReqLine</c> record,
    /// otherwise sets the default company to the value specified by the <paramref name="_dataAreaId" />
    /// parameter.
    /// </summary>
    /// <param name="_dataAreaId">
    /// The <c>DataAreaId</c> value to switch company context.
    /// </param>
    public void setDefaultCompany(DataAreaId _dataAreaId = curext())
    {
        DataAreaId  dataAreaId;

        if (this.BuyingLegalEntity)
        {
            dataAreaId = CompanyInfo::findRecId(this.BuyingLegalEntity).DataArea;
        }
        else
        {
            dataAreaId = _dataAreaId;
        }

        if (dataAreaId != curext())
        {
            appl.setDefaultCompany(dataAreaId, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the default dimension by using the entity dimension specifiers from the line.
    /// </summary>
    /// <param name="_currentDefaultDimensionAfterRequisitioner">
    /// A <c>Boolean</c> for indicating if the current default dimension should be added to the dimension source list
    /// after the requisitioner; optional.
    /// </param>
    public void setDefaultDimension(boolean _currentDefaultDimensionAfterRequisitioner = false)
    {
        if (!this.isConsumption())
        {
            return;
        }

        this.DefaultDimension = LedgerDimensionDefaultingEngine::getDefaultDimension(this.buildDefaultDimensionSources(_currentDefaultDimensionAfterRequisitioner));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDefaultDimensionSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a list of dimension sources.
    /// </summary>
    /// <param name="_currentDefaultDimensionAfterRequisitioner">
    /// A <c>Boolean</c> for indicating if the current default dimension should be added to the dimension source list
    /// after the requisitioner.
    /// </param>
    /// <returns>
    /// The <c>List</c> object whose elements are maps of dimension specifiers.
    /// </returns>
    protected List buildDefaultDimensionSources(boolean _currentDefaultDimensionAfterRequisitioner)
    {
        List dimensionSources = new List(Types::Class);

        if (!_currentDefaultDimensionAfterRequisitioner && this.orig().ProjId == this.ProjId)
        {
            dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(this.DefaultDimension));
        }

        // Apply defaults from project
        if (this.ProjId)
        {
            dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(this.retrieveProjTableDefaultDimension()));
        }

        // Employee
        HcmEmployment employee = HcmEmployment::findByWorkerLegalEntity(this.Requisitioner, this.BuyingLegalEntity);
        if (employee)
        {
            dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(employee.DefaultDimension));
        }

        if (_currentDefaultDimensionAfterRequisitioner)
        {
            dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(this.DefaultDimension));
        }

        // Vendor
        if (this.VendAccount)
        {
            VendTable vendor = VendTable::findByCompany(this.buyingLegalEntity2DataArea(), this.VendAccount);
            dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(vendor.DefaultDimension));
        }

        // Product
        if (this.ItemId)
        {
            InventTable inventTable = InventTable::findInLegalEntity(this.ItemId, this.buyingLegalEntity2DataArea());
            dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(inventTable.DefaultDimension));
        }

        // Apply defaults from agreementLine
        if (this.PurchAgreement)
        {
            AgreementLine agreementLine = AgreementLine::find(this.PurchAgreement);
            dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(agreementLine.DefaultDimension));
        }

        return dimensionSources;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveProjTableDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>DimensionDefault</c> value from the <c>ProjTable</c> record associated with the current <c>PurchReqLine</c> record.
    /// </summary>
    /// <returns>
    /// The <c>DimensionDefault</c> value from the <c>ProjTable</c> record associated with the current <c>PurchReqLine</c> record.
    /// </returns>
    protected DimensionDefault retrieveProjTableDefaultDimension()
    {
        ProjTable projTable;
        if (this.ProjIdDataArea && Project::checkDataAreaAccessible(this.ProjIdDataArea))
        {
            changecompany(this.ProjIdDataArea)
            {
                projTable = ProjTable::find(this.ProjId);
            }
        }
        else
        {
            projTable = ProjTable::find(this.ProjId);
        }
        return projTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the delivery name field based on the specified logistic location.
    /// </summary>
    /// <param name="_skipDeliveryRoleCheck">
    ///     A flag indicating whether to skip the check for determining the delivery role; optional.
    /// </param>
    public void setDeliveryName(boolean _skipDeliveryRoleCheck = false)
    {
        this.TradePostalAddress::setDeliveryName(_skipDeliveryRoleCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the <c>InventDimId</c> parameter to the <c>PurchReqLine.inventDimId</c> field and assigns
    ///    default values that are based on the new inventory dimensions.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> value that should be applied to the <c>PurchReqLine.InventDimId</c> field.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record buffer related to the <c>InventDimId</c> parameters; optional.
    /// </param>
    public void setInventDimId(InventDimId _inventDimId, InventDim _inventDim = InventDim::find(_inventDimId))
    {
        InventDim   currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();
        this.InventDimId         = _inventDimId;
        this.InventDimIdDataArea = currentInventDim.DataAreaId;
        this.linkInventDim2Dimension(_inventDim, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates an <c>InventDimId</c> value for the <c>InventDim</c> parameter and applies the
    ///    found <c>InventDimId</c> to the <c>PurchReqLine.inventDimId</c> field.
    /// </summary>
    /// <param name="_inventDim">
    ///    An <c>InventDim</c> record buffer that should be referenced by the current <c>PurchReqLine</c>
    ///    record buffer.
    /// </param>
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim   inventDim;

        inventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocation</Name>
				<Source><![CDATA[
    [SysObsolete('Method is not used anymore. To set address fields use setAddressFromInventDim()', false, 31\01\2016)]
    void setLocation(LogisticsLocationRecId _locationRecId)
    {
        LogisticsLocation location = LogisticsLocation::find(_locationRecId);

        this.AddressRefRecId        = location.RecId;
        this.AddressRefTableId      = location.TableId;

        location = this.defaultAddress(this.inventDim());

        this.DeliveryPostalAddress  = LogisticsPostalAddress::addressRecIdFromLocationRecId(location.RecId);
        this.DeliveryName           = location.Description;

        this.setTaxGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>setPriceAgreement</c> method of the <c>SalesPurchLine</c> table map.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record that contains the dimensions the price disc should apply for.
    /// </param>
    /// <param name="_doCallPriceDate">
    /// A Boolean value that specifies whether to use the price date or the system date for the price calculation; optional.
    /// </param>
    /// <param name="_checkPolicy">
    /// An instance of the <c>PriceDiscPolicyCheckPolicy</c> class defining if price and discount fields should be updated; optional.
    /// </param>
    /// <param name="_initDateFields">
    /// Indicates if the dates related to prices should be set or not; optional.
    /// </param>
    public void setPriceAgreement(
        InventDim					_inventDim,
        boolean						_doCallPriceDate	= false,
        PriceDiscPolicyCheckPolicy  _checkPolicy		= null,
        boolean						_initDateFields		= true)
    {
        this.salesPurchLineInterface().setPriceAgreement(_inventDim, _doCallPriceDate, _checkPolicy, _initDateFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc</Name>
				<Source><![CDATA[
    public void setPriceDisc(InventDim _inventDim)
    {
        if (this.isConsumption()
            && (!this.PurchAgreement || AgreementLine::find(this.PurchAgreement).AgreementLineType == CommitmentType::ProductVolume))
        {
            this.setPriceAgreement(_inventDim, true);

            this.LineAmount = this.calcLineAmountForced();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate and set the project sales price field.
    /// </summary>
    private void setProjSalesPrice()
    {
        if (this.BuyingLegalEntity && this.ProjId)
        {
            changeCompany(this.buyingLegalEntity2DataArea())
            {
                ProjTable projTable = projTable::find(this.ProjId);
                if (!projTable || ProjMultipleContractLinesForProjectFeatureHelper::isInternalProject(projTable))
                {
                    this.ProjSalesPrice = 0;
                }
                else
                {
                    if (!this.ItemId && ProjParameters::find().DefaultCostPriceAsSalesPrice && ProjCategory::isProjCategoryTypeItem(this.ProjCategoryId))
                    {
                        if (this.PurchPrice)
                        {
                            if (this.ProjSalesCurrencyId != this.CurrencyCode)
                            {
                                this.ProjSalesPrice = ExchangeRateHelper::curPrice2CurPrice(this.PurchPrice,
                                                                                   this.CurrencyCode,
                                                                                   this.ProjSalesCurrencyId,
                                                                                   this.TransDate,
                                                                                   true);
                            }
                            else
                            {
                                this.ProjSalesPrice = this.PurchPrice;
                            }
                        }
                    }
                    else
                    {
                        this.setProjSalesPriceBasedOnCategoryType();
                    }
                    if (!this.PurchPrice)
                    {
                        this.setProjCostSalesPriceFromPriceSetup();
                    }
                }
            }
        }
        else
        {
            this.ProjSalesPrice = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjSalesPriceFromPriceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates project sales price based on sales price agreement.
    /// </summary>
    /// <returns>
    /// true if a price agreement is found; otherwise, false.
    /// </returns>
    private boolean setProjSalesPriceFromPriceAgreement()
    {
        InventTable inventTableLoc = this.inventTable(this.ItemId);
        if (inventTableLoc)
        {
            PriceUnit salesUnitDummy;
            PriceMarkup markUpDummy;
            ProjTable projTableLoc = ProjTable::find(this.projId);

            [this.ProjSalesPrice,
                salesUnitDummy,
                markUpDummy]   = inventTableLoc.salesPriceAgreement(
                                    this.RequiredDate,
                                    this.inventDim(),
                                    this.PurchQty,
                                    inventTableLoc.inventUnitId(),
                                    projTableLoc.CustAccount,
                                    this.ProjSalesCurrencyId ? this.ProjSalesCurrencyId : projTableLoc.currencyId(),
                                    ProjTable::findPriceGroup(projTableLoc.ProjId));

            return this.ProjSalesPrice != 0;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the sales price of the item based on either the cost or purchase price.
    /// </summary>
    /// <param name="_inventTable">
    ///    The <c>InventTable</c> table that contains the parameters for how to calculate the sales price.
    /// </param>
    /// <param name="_unitPrice">
    ///    Unit price of this purchase order.
    /// </param>
    /// <returns>
    /// The new sales price.
    /// </returns>
    private Price updateSalesPrice(InventTable _inventTable, Price _unitPrice)
    {
        Price salesPriceInBasicUnit;
        Price markupInbasicUnit;
        
        switch (_inventTable.SalesModel)
        {
            case SalesPriceModel::Contributionratio:
                if (_inventTable.SalesContributionRatio >= 100)
                {
                    return 0;
                }

                salesPriceInBasicUnit = (_unitPrice * 100) / (100 - _inventTable.SalesContributionRatio);

                markupInbasicUnit = ((this.PurchMarkup * 100) / (100 - _inventTable.SalesContributionRatio));
                break;

            case SalesPriceModel::PercentMarkup:
                salesPriceInBasicUnit = _unitPrice  + ((_unitPrice * _inventTable.SalesPercentMarkup)/100);

                markupInbasicUnit = this.PurchMarkup + (this.PurchMarkup * _inventTable.SalesPercentMarkup / 100);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        PurchUnit purchUnit = UnitOfMeasure::find(this.PurchUnitOfMeasure).Symbol;

        PriceConvertFactory priceConvertFactory = PriceConvertFactory::newItemPrice(_inventTable.ItemId, purchUnit, salesPriceInBasicUnit, this.PriceUnit, markupInbasicUnit, this.PurchQty, '');
        priceConvertFactory.parmNewPriceUnit(this.PriceUnit);
        priceConvertFactory.parmNewUnitId(purchUnit);
        priceConvertFactory.parmIntermediateUnitId(_inventTable.inventUnitId());
        priceConvertFactory.parmInventDimId(this.InventDimId);

        PriceConvert priceConvert = priceConvertFactory.priceConvert();

        return priceConvert.parmPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjSalesPriceBasedOnItemSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the project sales price based on parameters like SalesModel, SalesPriceModel set for the item
    /// </summary>
    private void setProjSalesPriceBasedOnItemSettings()
    {
        if (this.PurchPrice && this.ProjCategoryId)
        {
            Price actualCostPrice = (this.LineDisc || this.LinePercent) ?
                    ProjectSourceDocumentLineItemHelper::getCostPriceWithDiscountApplied(this.PurchPrice, this.LineDisc, this.LinePercent):
                    this.PurchPrice;

            InventTable inventTable = this.inventTable(this.ItemId);
            boolean modelFound;
            boolean salesPriceFound;

            if (inventTable && inventTable.SalesPriceModelBasic == SalesPriceModelBasic::PurchPrice &&
                inventTable.SalesModel != SalesPriceModel::None &&
                !(inventTable.SalesModel == SalesPriceModel::Contributionratio && inventTable.SalesContributionRatio >= 100))
            {
                this.ProjSalesPrice = this.updateSalesPrice(inventTable, actualCostPrice);
                modelFound = true;
            }
            else
            {
                this.ProjSalesPrice = 0;
                salesPriceFound = this.setProjSalesPriceFromPriceAgreement();
            }

            // If a sales agreement price is found, it already uses project sales currency
            if (this.CurrencyCode != this.ProjSalesCurrencyId && !salesPriceFound)
            {
                this.ProjSalesPrice =  ExchangeRateHelper::curPrice2CurPrice(modelFound ? this.ProjSalesPrice : actualCostPrice,
                                                                           this.CurrencyCode,
                                                                           this.ProjSalesCurrencyId,
                                                                           this.RequiredDate,
                                                                           true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjSalesPriceBasedOnCategoryType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the project sales price based on project category type.
    /// </summary>
    protected void setProjSalesPriceBasedOnCategoryType()
    {
        boolean priceFound;
        ProjCategory category = ProjCategory::find(this.ProjCategoryId);
        ProjPriceParameters priceParams;
        boolean featureEnabled = FeatureStateProvider::isFeatureEnabled(ProjSetPurchReqProjSalesPriceFromPurchPrice::instance());
        switch (category.CategoryType)
        {
            case ProjCategoryType::Item:
                if (featureEnabled)
                {
                    this.setProjSalesPriceBasedOnItemSettings();
                }
                else
                {
                    ProjTable projTable = projTable::find(this.ProjId);
                    PriceDiscParameters parameters = this.createAndInitPriceDiscParameters(projTable);
                    PriceDisc priceDisc =  this.createPriceDiscInstance(parameters);

                    if (!priceDisc.findPrice(ProjTable::findPriceGroup(projTable.ProjId)))
                    {
                        priceDisc.findItemPrice();
                    }

                    this.ProjSalesPrice = priceDisc.price();
                }
                break;

            case ProjCategoryType::Hour:
                priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
                    this.ProjId,
                    0,
                    this.ProjCategoryId,
                    this.ProjLinePropertyId,
                    this.PurchPrice,
                    this.ProjSalesCurrencyId);
                [this.ProjSalesPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams);

                if (featureEnabled && !this.ProjSalesPrice)
                {
                    this.setProjSalesPriceFromPriceAgreement();
                }
                break;

            case ProjCategoryType::Cost:
                priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
                    this.ProjId,
                    0,
                    this.ProjCategoryId,
                    this.PurchPrice,
                    this.CurrencyCode,
                    this.ProjSalesCurrencyId);
                [this.ProjSalesPrice, priceFound] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams);

                if (featureEnabled && !this.ProjSalesPrice)
                {
                    this.setProjSalesPriceFromPriceAgreement();
                }
                break;
            default:
                this.ProjSalesPrice = 0;
                priceFound = false;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createPriceDiscParameters()
    {
        return PriceDiscParameters::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <param name = "_projTable">A <c>ProjTable</c> record.</param>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createAndInitPriceDiscParameters(ProjTable _projTable)
    {
        PriceDiscParameters parameters = this.createPriceDiscParameters();

        parameters.parmModuleType(ModuleInventPurchSales::Sales);
        parameters.parmItemId(this.ItemId);
        parameters.parmInventDim(this.inventDim());
        parameters.parmUnitID(this.unitOfMeasureSymbolById());
        parameters.parmPriceDiscDate(this.TransDate);
        parameters.parmQty(this.PurchQty);
        parameters.parmAccountNum(_projTable.CustAccount);
        parameters.parmCurrencyCode(_projTable.currencyId());

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDisc</c> class.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>PriceDiscParameters</c> class.</param>
    /// <returns>An instance of the <c>PriceDisc</c> class.</returns>
    protected PriceDisc createPriceDiscInstance(PriceDiscParameters _parameters)
    {
        return PriceDisc::newFromPriceDiscParameters(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets value for <c>TaxGroup</c> and <c>TaxGroupDataArea</c> fields.
    /// </summary>
    public void setTaxGroup()
    {
        TaxGroup taxGroup = this.getTaxGroup(VendTable::find(this.VendAccount));

        if (taxGroup)
        {
            this.TaxGroup   = taxGroup;

            this.setDataAreaForModifiedField(fieldNum(PurchReqLine, TaxGroup));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroupFromAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Sales tax group on a line based on the address.
    /// </summary>
    /// <param name = "_recId">The address system identifier or the address <c>RecId</c> field value.</param>
    private void setTaxGroupFromAddress(LogisticsLocationRecId _recId)
    {
        TaxGroup taxGroupFromAddress = LogisticsLocationExt::find(_recId).TaxGroup;
        if (taxGroupFromAddress)
        {
            this.TaxGroup = taxGroupFromAddress;
            this.setDataAreaForModifiedField(fieldNum(PurchReqLine, TaxGroup));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOverrideSalesTax</Name>
				<Source><![CDATA[
    public void setOverrideSalesTax()
    {
        this.OverrideSalesTax = VendTable::find(this.VendAccount).OverrideSalesTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroupAndTaxItemGroupFields_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets PurchReqLine.TaxGroup and PurchReqLine.TaxItemGroup based on <c>TaxesMatrix</c>
    /// </summary>
    public void setTaxGroupAndTaxItemGroupFields_BR()
    {
        TaxGroup            taxGroup;
        TaxItemGroup        taxItemGroup;

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00020, funcName());

        [taxGroup, taxItemGroup] = TaxesMatrix_BR::findTaxGroupAndTaxItemGroup(this.cfopTable_BR,
                                                                               0,
                                                                               SalesPurchTrntype_BR::Purchase,
                                                                               CustVendType_BR::Vendor,
                                                                               this.orderAccount(),
                                                                               this.ItemId,
                                                                               this.inventDim().inventSite().fiscalEstablishment().fiscalEstablishmentGroup());

        this.TaxGroup      = taxGroup;
        this.TaxItemGroup  = taxItemGroup ? taxItemGroup : this.inventTable().purchTaxItemGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransDate</Name>
				<Source><![CDATA[
    public void setTransDate(boolean _setAccountingDate = true)
    {
        TransDate       origTransDate;
        int64           orgArray[];

        orgArray[1] = this.BuyingLegalEntity;
        orgArray[2] = this.ReceivingOperatingUnit;

        origTransDate = this.TransDate;

        if (PurchReqControlRule::findPurchReqControlRuleParameters(orgArray).IsReqDateTransDate)
        {
            this.TransDate = this.RequiredDate;
            if (_setAccountingDate)
            {
                this.updateAccountingDate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendAccountOnInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set <c>VendAccount</c> field on <c>PurchReqLine</c> record based on new <c>InventDim</c> record's values and,
    /// optionally, runs logic to update Purchase agreement linking.
    /// </summary>
    /// <param name = "_inventDim">
    /// The new <c>InventDim</c> record.
    /// </param>
    /// <param name = "_updateAgreementLinking">
    /// Determines whether logic should also be run to update Purchase agreement linking; defaults to true.
    /// </param>
    public void setVendAccountOnInventDim(InventDim _inventDim, boolean _updateAgreementLinking = true)
    {
        InventDimId               savedInventDimId = this.InventDimId;
        VendAccount               savedVendAccount = this.VendAccount;
        PurchVendorShipCalendarId savedShipCalendarId = this.ShipCalendarId;

        this.InventDimId = inventDim::findDim(_inventDim).inventDimId;
        this.VendAccount = "";

        this.initVendAccount(_updateAgreementLinking);
        if (!this.VendAccount)
        {
            this.VendAccount = savedVendAccount;
            if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
            {
                this.ShipCalendarId = savedShipCalendarId;
            }
        }
        this.InventDimId = savedInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipToOption</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display ShipToOptions shipToOption()
    {
        if (this.InventLocationId != "")
        {
            return ShipToOptions::companyLocation;
        }

        return ShipToOptions::alternateAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDate</Name>
				<Source><![CDATA[
    TransDate taxDate(TransDate transDate)
    {
        return TaxParameters::find().TaxCalculationDateType == TaxCalculationDateType::DeliveryDate ?
            this.RequiredDate :
            DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.CreatedDateTime,DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPcsPrice</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public PriceCur taxPcsPrice(TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().taxPcsPrice(transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitOfMeasureSymbolById</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the unit symbol of the selected record.
    /// </summary>
    /// <returns>
    /// The unit symbol of the selected record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display UnitOfMeasureSymbol unitOfMeasureSymbolById()
    {
        return UnitOfMeasure::find(this.PurchUnitOfMeasure).Symbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that the 'Transaction date' is valid before updating the record, reduces the budget for approved project related purchase requisition lines.
    /// </summary>
    /// <param name = "_doVersioning">
    /// If true then a version of the record needs to be stored.
    /// </param>
    /// <param name = "_createMarkupTrans">
    /// If true then records in table <c>MarkUpTrans</c> are being created.
    /// </param>
    /// <remarks>
    /// This method calls the <c>CostControlPostingItemPurchReq</c> class for budget reduction of approved purchase requisition lines that are associated with projects.
    /// value of _createMarkupTrans will be false when RFQ is being accepted.
    /// </remarks>
    public void update(boolean _doVersioning = true, boolean _createMarkupTrans = true)
    {
        VersioningPurchReq              versioningPurchReq;
        PurchReqLine                    this_Orig = this.orig();
        VendAccount                     origVendAccount;

        PurchReqInstrumentationLogger purchReqInstrumentationLogger = PurchReqLine::instrumentationLogger();
        PurchReqLineInstrumentationActivities requisitionLineActivities = purchReqInstrumentationLogger.requisitionLine();

        using (var activityContext = requisitionLineActivities.update(this))
        {
            if (this.canGenerateRFQ()
                && (this.LineAmount != this.orig().LineAmount || this.CurrencyCode != this.orig().CurrencyCode))
            {
                this.rfqRequirement = new PurchReqLineEvaluateRFQRequirement(this).getRFQRequirement();
            }

            this.IsModified = NoYes::Yes;

            this.markModifiedPurchReqTable();
            
            if (PurchReqLineClearNotExistedWmsLocationFlight::instance().isEnabled())
            {
                InventDim inventDimLocal = this.inventdim();
                if (inventDimLocal.wmsLocationId      
                    && !WMSLocation::exist(inventDimLocal.wmsLocationId, inventDimLocal.InventLocationId))
                {
                    inventDimLocal.wmsLocationId = ''; // clear the illegal location    
                    this.setInventDimIdFromInventDim(inventDimLocal);
                }
            }

            if (this.orig().RequisitionStatus != this.RequisitionStatus)
            {
                if (this.RequisitionStatus == PurchReqRequisitionStatus::Approved && !this.canRecordPreEncumbrance())
                {
                    this.IsPreEncumbranceRequired = UnknownNoYes::No;
                }
                else if (this.RequisitionStatus == PurchReqRequisitionStatus::Cancelled)
                {
                    using (var activityContextCancelled = purchReqInstrumentationLogger.requisitionLine().updateStatusCancelled(this))
                    {
                        PurchReqLineProcessingError::clearProcessingError(this.RecId, PurchReqLineProcessingErrorType::PreEncumbranceError);
                        this.createCancelEventAndDistributions();
                    }
                }
                else if (this.RequisitionStatus == PurchReqRequisitionStatus::Rejected)
                {
                    using (var activityContextRejected = purchReqInstrumentationLogger.requisitionLine().updateStatusRejected(this))
                    {
                        BudgetControlSourceDocumentProcessor::submitSourceDocumentLineToRemoveBudget(SourceDocumentLine::find(this.SourceDocumentLine));
                    }
                }
            }

            if (this.ProjId && !this.ProjTransId)
            {
                this.ProjTransId         = ProjParameters::newTransId();
                this.setDataAreaForModifiedField(fieldNum(PurchReqLine, ProjTransId));
            }
            else if (!this.ProjId && this.ProjTransId)
            {
                this.ProjTransId         = "";
                this.ProjTransIdDataArea = "";
            }

            if (this.LineAmount           != this.orig().LineAmount           ||
                this.PurchQty             != this.orig().PurchQty             ||
                this.VendAccount          != this.orig().VendAccount          ||
                this.TaxItemGroup         != this.orig().TaxItemGroup         ||
                this.TaxGroup             != this.orig().TaxGroup             ||
                this.ProjTaxGroupId       != this.orig().ProjTaxGroupId       ||
                this.ProjTaxItemGroupId   != this.orig().ProjTaxItemGroupId   ||
                // <GIN>
                this.hasIndirectTaxFieldChanged_IN(this.orig())
                // </GIN>
            )
            {
                TaxUncommitted::deleteForDocumentLine(this.TableId, this.RecId);

                if (!(FormDataUtil::isFormDataSource(this) && FormDataUtil::getFormDataSource(this).formRun().name() == formStr(PurchReqTable)))
                {
                    SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
                }
            }

            origVendAccount = this.orig().VendAccount;
            
            requisitionLineActivities.logRequisitionLine(activityContext, this);
       
            super();

            if (_createMarkupTrans && (origVendAccount != this.VendAccount && this.VendAccount != ""))
            {
                this.createMarkupTrans();
            }

            if (_doVersioning && PurchReqTable::find(this.PurchReqTable).RequisitionStatus >= PurchReqRequisitionStatus::Approved)
            {
                versioningPurchReq = VersioningPurchReq::newVersioningPurchReq(this.PurchReqTable);
                versioningPurchReq.archiveCurrentVersion();
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                if (this.RequisitionStatus == PurchReqRequisitionStatus::Cancelled)
                {
                    ProjFundingLimitTrackingManager::updateUsingSourceDocumentLine(this.SourceDocumentLine, ProjFundingLimitTrackingAction::Release, false);
                }

                if (this.RequisitionStatus == PurchReqRequisitionStatus::Closed && this_Orig.RequisitionStatus != PurchReqRequisitionStatus::Closed)
                {
                    if (this.purchLine().RecId == 0)
                    {
                        // Close or Cancel of line - Condition will not be true when reopening line from deleted PO
                        ProjFundingLimitTrackingManager::updateUsingSourceDocumentLine(this.SourceDocumentLine, ProjFundingLimitTrackingAction::Release, false);
                    }
                }
            }

            this.IsPriceDiscCalculated = NoYes::No;

            if ((this_Orig.BudgetReservationLine_PSN != this.BudgetReservationLine_PSN) && PublicSectorUtils::isBudgetReservationEnabled())
            {
                using (var activityContextReset = purchReqInstrumentationLogger.requisitionLine().updateResetDistributions(this))
                {
                    BudgetReservation_PSN::resetDistributions(this.SourceDocumentLine);
                }
            }

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                if (this.SalesPurchJournalLine::taxRecalculationNeeded(this_Orig))
                {
                    this.markCurrentTaxDocumentTaxStatusDirty();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markModifiedPurchReqTable</Name>
				<Source><![CDATA[
    private void markModifiedPurchReqTable()
    {
        PurchReqTable purchreqTable = this.purchReqTable(true);

        ttsbegin;
        purchreqTable.IsModified = true;
        purchreqTable.doUpdate();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the current accounting date of the source document line of a purchase requisition line.
    /// </summary>
    public void updateAccountingDate()
    {
        AccountingDistribution  accountingDistribution;

        if (this.SourceDocumentLine != 0)
        {
            select forupdate accountingDistribution where
                accountingDistribution.AccountingEvent == 0 &&
                accountingDistribution.SourceDocumentLine == this.SourceDocumentLine;

            if (accountingDistribution.RecId != 0)
            {
                ttsbegin;
                accountingDistribution.AccountingDate = this.TransDate;
                accountingDistribution.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the asset group based on policy
    /// </summary>
    /// <param name="_force">
    /// Forces update regardless of requisition status and existing asset group
    /// </param>
    void updateAssetGroup(boolean _force = false)
    {
        if (   !this.isConsumption()
            || (this.RequisitionStatus != PurchReqRequisitionStatus::Draft && !_force))
        {
            return;
        }
                
        var assetProcessedRule = this.assetProcessedRule();
        if (assetProcessedRule.isActive())
        {
            if (!this.ProjId && ((!assetProcessedRule.hasQualifier() && !this.AssetGroup) || _force))
            {
                this.initAssetGroup();
            }
        }
        else
        {
            this.initAssetGroup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (!this.checkDelete())
        {
            ret = checkFailed("@SYS137746");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        if (!this.BuyingLegalEntity)
        {
            ret = checkFailed("@SYS301955");
        }
        else
        {
            ret = super(_fieldIdToCheck);

            if (ret)
            {
                switch (_fieldIdToCheck)
                {
                    case fieldNum(PurchReqLine, Requisitioner):
                        ret = this.checkSubmitOnBehalf();
                        break;

                    case fieldNum(PurchReqLine, BuyingLegalEntity):
                        if (!this.isConsumption() && !RequisitionPurposeRule::canBeReplenishmentRequisition(this.BuyingLegalEntity))
                        {
                            ret = checkFailed(strFmt("@SYS4050046",this.buyingLegalEntity2DataArea()));
                        }
                        break;
                    
                    case fieldNum(PurchReqLine, LineType):
                        if (!this.isConsumption() 
                            && this.LineType != PurchReqLineType::Item)
                        {
                            ret = checkFailed(strFmt("@SCM:PurchReqReplenishmentDoesNotSupportLineType", this.LineType));
                        }
                        break;
                    
                    case fieldNum(PurchReqLine, BudgetReservationLine_PSN):
                        ret = this.validateBudgetReservationLine_PSN();
                        break;

                    case fieldNum(PurchReqLine, TransDate):
                        if (this.BudgetReservationLine_PSN)
                        {
                            ret = this.validateBudgetReservationLine_PSN();
                        }
                        break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        PurchReqLineValidate    purchReqLineValidate;
        int64                   orgArray[];

        boolean isProjectAssetCoExists()
        {
            if (this.ProjId && this.AssetGroup)
            {
                //Asset group cannot be specified on lines that reference a project id
                return checkFailed("@SYS342067");
            }

            return true;
        }

        boolean ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            orgArray[1] = this.BuyingLegalEntity;
            orgArray[2] = this.ReceivingOperatingUnit;

            switch (_fieldName)
            {
                case fieldStr(PurchReqLine, AssetGroup):
                    ret = isProjectAssetCoExists();
                    break;

                case fieldStr(PurchReqLine, ItemId):
                    purchReqLineValidate = PurchReqLineValidate::newPurchReqLineValidate(this);
                    ret = purchReqLineValidate.checkItemId();
                    break;

                case fieldStr(PurchReqLine, VendAccount) :
                    ret = this.validateVendAccount();
                    break;

                case fieldStr(PurchReqLine, RequiredDate)  :
                    if (this.RequiredDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                    {
                        // Required date must not be before today's date
                        ret = checkFailed("@SYS112276");
                    }
                    break;

                case fieldStr(PurchReqLine, PurchPrice)  :
                    if (this.PurchPrice < 0)
                    {
                        // Unit price may not be negative.
                        ret = checkFailed("@SYS113045");
                    }
                    break;

                case fieldStr(PurchReqLine, PurchQty)  :
                    if (this.PurchQty < 0)
                    {
                        // Quantity may not be negative.
                        ret = checkFailed("@SYS53966");
                    }
                    break;

                case fieldStr(PurchReqLine, ProcurementCategory):
                    purchReqLineValidate = PurchReqLineValidate::newPurchReqLineValidate(this);

                    if (!purchReqLineValidate.checkCategoryAvailability())
                    {
                        ret = checkFailed("@SYS310589");
                    }
                    break;

                case fieldStr(PurchReqLine, ProjId):
                    ret = isProjectAssetCoExists();

                    if (!this.isPurchAgreementLineLinkValid())
                    {
                        ret = checkFailed("@SYS335596");
                    }
                    if (ret && this.ProjId)
                    {
                        ret = ProjTable::find(this.ProjId).status().validateWritePurchReqTable();
                    }

                //code fall through expected.
                case fieldStr(PurchReqLine, ProjCategoryId):
                case fieldStr(PurchReqLine, ActivityNumber):
                    if (ret && this.ProjId)
                    {
                        ret = ProjInventJournalTransMapForm::construct(this).validateFieldPost(_fieldName);
                    }
                    break;

                // <GIN>
                case fieldStr(PurchLine, TaxItemGroup):
                    ret = TaxItemGroupHeading::validatePOTForGTA_IN(VendTable::find(this.VendAccount), this.TaxItemGroup);
                    break;
                // </GIN>
                case fieldStr(PurchReqLine, PurchAgreement):
                    if (!this.isPurchAgreementLineLinkValid())
                    {
                        ret = checkFailed("@SYS339263");
                    }
                    break;

                case fieldStr(PurchReqLine, PurchUnitOfMeasure):
                    purchReqLineValidate = PurchReqLineValidate::newPurchReqLineValidate(this);
                    ret = purchReqLineValidate.validateUnit();
                    break;

                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendAccount</Name>
				<Source><![CDATA[
    boolean validateVendAccount()
    {
        boolean ret = true;

        if (this.VendAccount)
        {
            if (this.LineType == PurchReqLineType::Category && !this.ProcurementCategory)
            {
                ret = checkFailed("@SYS307671");
            }
            else if (this.LineType == PurchReqLineType::Item && !this.ItemId)
            {
                ret = checkFailed("@SYS307672");
            }

            PurchReqLineValidate purchReqLineValidate = PurchReqLineValidate::newPurchReqLineValidate(this);

            ret = purchReqLineValidate.validateVendor();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the Accounting date is not empty on the <c>PurchReqLine</c> record.
    /// </summary>
    public void validateAccountingDate()
    {
        if (this.RequisitionPurpose == RequisitionPurpose::Consumption
            && this.TransDate == dateNull())
        {
            throw error ("@SCM:AccountingDateIsMissingOnPurchaseRequisitionLine");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the data is valid and ready to be written.
    /// </summary>
    /// <param name="_validateAlways">
    /// If the record is temporary the validation is skipped unless _validateAlways is
    /// </param>
    /// <returns>
    /// Returns true if data is valid, otherwise false.
    /// </returns>
    public boolean validateWrite(boolean _validateAlways = false)
    {
        boolean         ret;
        PurchLineAmount lineAmount;
        InventItemOrderSetupMap inventItemOrderSetupMap;

        ret = super();

        if (this.LineType == PurchReqLineType::Item)
        {
            if (!this.ItemId)
            {
                //Field 'Item number' must be filled in.
                ret = checkFailed(strFmt("@SYS84753", fieldPName(PurchReqLine, ItemId)));
            }
        
            if (PdsGlobal::pdsIsCWItem(this.ItemId))
            {
                return checkFailed(strFmt("@SCM:ErrorCatchWeightItemNotAllowedOnRequisitionLine", this.ItemId));
            }
        }

        if (!this.validateNonCatalogItemId())
        {
            ret = checkFailed(strFmt("@SYS84753", fieldPName(PurchReqLine, ItemIdNonCatalog)));
        }

        if (this.isConsumption() && !this.CurrencyCode)
        {
            //Field 'Currency' must be filled in.
            ret = checkFailed(strFmt("@SYS84753", fieldPName(PurchReqLine, CurrencyCode)));
        }

        if (this.isConsumption() && !this.ProcurementCategory)
        {
            //Field 'Procurement category' must be filled in.
            ret = checkFailed(strFmt("@SYS84753", fieldPName(PurchReqLine, ProcurementCategory)));
        }

        if (this.ProcurementCategory && InactiveProcurementCategoryCannotBeUsedFlight::instance().isEnabled())
        {
            PurchReqLineValidate    purchReqLineValidate = PurchReqLineValidate::newPurchReqLineValidate(this);
            
            if (!purchReqLineValidate.checkCategoryActivationStatus())
            {
                ret = checkFailed("@SCM:PurchLineInactiveProcurementCategoryAssignedError");
            }
        }

        // if the record is tmp we are skipping other validations
        if (this.isTmp() && !_validateAlways)
        {
            return ret;
        }

        if (ret)
        {
            lineAmount = this.calcLineAmountForced();
            if (lineAmount < 0)
            {
                // The sign on Quantity and Net amount have to be the same
                ret = checkFailed("@SYS78848");
            }
        }

        if (ret)
        {
            ret = this.inventDim().validateWriteMandatoryAndProductDim(this.ItemId);
        }

        if (ret)
        {
            inventItemOrderSetupMap = InventItemOrderSetupMap::find(this.ItemId, this.getInventItemOrderSetupType(), this.InventDimId);
            ret = InventItemOrderSetupMap.checkNotStopped();
        }

        if (ret)
        {
            // Check site and warehouse setup
            if (inventItemOrderSetupMap)
            {
                ret = inventItemOrderSetupMap.checkInventSiteId(this.inventDim().InventSiteId, true, this.inventTable())
                    && inventItemOrderSetupMap.checkInventLocationId(this.inventDim().InventLocationId, true, true, this.inventTable());;
            }
        }

        if (ret && this.ProjId)
        {
            ret = ProjInventJournalTransMapForm::construct(this).validateWritePost();
        }
                
        if (ret)
        {
            PurchReqInternalOrgManager_LegalEntity orgManager_LegalEntity = new PurchReqInternalOrgManager_LegalEntity();
            ret = orgManager_LegalEntity.validate(this.Requisitioner, this.BuyingLegalEntity);
        }

        if (ret && this.ReceivingOperatingUnit)
        {
            PurchReqInternalOrgManager_OperatingUnit orgManager_OperatingUnit = new PurchReqInternalOrgManager_OperatingUnit();
            ret = orgManager_OperatingUnit.validate(this.Requisitioner, this.ReceivingOperatingUnit);
        }

        if (ret)
        {
            ret = this.validateAssetRuleQualifierOptionFields();
        }

        

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNonCatalogItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the product name is specified for category based lines.
    /// </summary>
    /// <returns>
    /// true if the product name is specified; otherwise, false.
    /// </returns>
    protected boolean validateNonCatalogItemId()
    {
        return !(this.LineType == PurchReqLineType::Category && !this.ItemIdNonCatalog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssetRuleQualifierOptionFields</Name>
				<Source><![CDATA[
    private boolean validateAssetRuleQualifierOptionFields()
    {
        if (this.AssetRuleQualifierOptionName)
        {
            if (this.AssetRuleQualifierOption && this.AssetRuleQualifierOptionLocal)
            {
                return checkFailed("@SCM:ErrorPurchaseRequisitionLineFixedAssetQualifierOptionsBothSet");
            }
            else if (!this.AssetRuleQualifierOption && !this.AssetRuleQualifierOptionLocal)
            {
                return checkFailed("@SCM:ErrorPurchaseRequisitionLineFixedAssetQualifierOptionNotValid");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendCategoryStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// This provides the Vendor Category Status
    /// </summary>
    /// <returns>
    /// The VendCategoryStatus from the current <c>PurchReqLine</c> record.
    /// </returns>
    public VendCategoryStatus vendCategoryStatus()
    {
        VendProcurementCategoryStatus       vendProcurementCategoryStatus;
        VendCategory                        vendCategory;
        VendCategoryStatus                  vendCategoryStatus = VendCategoryStatus::Standard;
        CompanyInfo                         legalEntity        = CompanyInfo::findRecId(this.BuyingLegalEntity);
        date                                effectiveDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (this.BuyingLegalEntity && this.ProcurementCategory && this.VendAccount)
        {
            changecompany (legalEntity.DataArea)
            {
                select firstonly validTimeState(effectiveDate) VendorCategoryStatus, RecId from vendProcurementCategoryStatus
                    join RecId from vendCategory
                        where vendProcurementCategoryStatus.VendorCategory  == vendCategory.RecId
                            && vendCategory.VendorAccount                   == this.VendAccount
                            && vendCategory.VendorDataArea                  == getCompany(tableNum(VendTable))
                            && vendCategory.Category                        == this.ProcurementCategory;

                if (vendProcurementCategoryStatus)
                {
                    vendCategoryStatus = vendProcurementCategoryStatus.VendorCategoryStatus;
                }
            }
        }

        return vendCategoryStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(false)]
    display VendInvoiceId vendInvoiceId()
    {
        VendInvoiceId       ret;
        InvoiceId           internalInvoiceId;
        VendInvoiceJour     vendInvoiceJour;
        VendInvoiceTrans    vendInvoiceTrans;

        if (this.PurchLineCreated == NoYes::Yes && this.PurchId)
        {
            if (this.BuyingLegalEntity)
            {
                changecompany(this.buyingLegalEntity2DataArea())
                {
                    vendInvoiceJour = VendInvoiceJour::findFromPurchId(this.PurchId);
                    ret = vendInvoiceJour.InvoiceId;
                    if (ret)
                    {
                        select count(RecId) from vendInvoiceTrans where vendInvoiceTrans.LineNum          == this.LineNum &&
                                                                       vendInvoiceTrans.PurchID          == vendInvoiceJour.PurchId &&
                                                                       vendInvoiceJour.InternalInvoiceId != internalInvoiceId;
                        if (vendInvoiceTrans.RecId >= 2)
                        {
                            ret += '*';
                        }
                    }
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceJour</Name>
				<Source><![CDATA[
    public VendInvoiceJour vendInvoiceJour()
    {
        VendInvoiceJour vendInvoiceJour;

        if (this.PurchId)
        {
            vendInvoiceJour = VendInvoiceJour::findFromPurchId(this.PurchId);
        }

        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceStatus</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(false)]
    display VendInvoiceStatus vendInvoiceStatus()
    {
        VendInvoiceId   ret;
        VendInvoiceJour vendInvoiceJour;

        if (this.PurchId)
        {
            changecompany(this.buyingLegalEntity2DataArea())
            {
                vendInvoiceJour = this.vendInvoiceJour();
            }
            if (vendInvoiceJour.InvoiceDate != dateNull())
            {
                ret = '@SYS14205';
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the vendor name to display.
    /// </summary>
    /// <returns>
    /// The vendor name found in the <c>VendAccount</c> extended date type from the current
    /// <c>PurchReqLine</c> table.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display PurchReqVendName vendName()
    {
        if (this.VendAccount == "")
        {
            return "";
        }
        else
        {
            changecompany(this.buyingLegalEntity2DataArea())
            {
                return VendTable::find(this.VendAccount).name();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the vendor status for display.
    /// </summary>
    /// <returns>
    /// The <c>VendCategoryStatus</c> value from the item ID of the current instance of the
    /// <c>PurchReqLine</c> class.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display PurchReqVendorStatus vendStatus()
    {
        PurchReqVendorStatus                  purchReqVendorStatus;

        if (this.BuyingLegalEntity && this.ProcurementCategory && this.VendAccount)
        {
            purchReqVendorStatus = enum2str(this.vendCategoryStatus());
        }

        return purchReqVendorStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCatalogPolicyRuleToCatalogQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will add catalog policy filtering to a query, this is currently used in the
    /// PurchReqAddItem form in client, and in the lookupItemId method.
    /// </summary>
    /// <param name="_query">
    /// The query the policy should be applied to
    /// </param>
    /// <param name="_catalogId">
    /// The catalog used for filtering
    /// </param>
    /// <param name="_isConsumption">
    /// boolean indicating if the requisition is of purpose consumption
    /// </param>
    /// <param name="_buyingLegalEntity">
    /// <c>RefRecId</c> for a legal entity
    /// </param>
    /// <param name="_recievingOperatingUnit">
    /// <c>RefRecId</c> for a department
    /// </param>
    public static void addCatalogPolicyRuleToCatalogQuery(Query _query, RecId _catalogId, boolean _isConsumption, RefRecId _buyingLegalEntity, RefRecId _recievingOperatingUnit)
    {
        QueryBuildDataSource    qbdsCatProcurementCatalogProductSiteAll;
        QueryBuildDataSource    qbdsProcCategoryAccessPolicyParameter;
        CatProcureCatalogTable  catProcureCatalogTable;
        SysPolicyRuleTypeEnum   policyRuleType;

        RefRecId                purchasingPolicyRuleRecId;
        QueryBuildRange         queryBuildRange;
        TableId                 tableIdParameter;
        FieldId                 fieldIdCategory, fieldIdAccessPolicyRule;

        if (!_isConsumption && RequisitionReplenishCatAccessPolicyRule::findForLegalEntity(_buyingLegalEntity))
        {
            tableIdParameter        = tableNum(RequisitionRepCatAccessPolicyRuleData);
            fieldIdCategory         = fieldNum(RequisitionRepCatAccessPolicyRuleData, Category);
            fieldIdAccessPolicyRule = fieldNum(RequisitionRepCatAccessPolicyRuleData, RequisitionReplenishCatAccessPolicyRule);
            policyRuleType          = SysPolicyRuleTypeEnum::RequisitionReplenishCatAccessPolicyRule;
        }

        if (!tableIdParameter)
        {
            tableIdParameter        = tableNum(ProcCategoryAccessPolicyParameter);
            fieldIdCategory         = fieldNum(ProcCategoryAccessPolicyParameter, ProcurementCategory);
            fieldIdAccessPolicyRule = fieldNum(ProcCategoryAccessPolicyParameter, ProcurementCategoryAccessPolicyRule);
            policyRuleType          = SysPolicyRuleTypeEnum::CategoryAccessPolicyRule;
        }

        qbdsProcCategoryAccessPolicyParameter = _query.dataSourceTable(tableIdParameter);

        if (_buyingLegalEntity && _recievingOperatingUnit)
        {
            purchasingPolicyRuleRecId = SysPolicyRule::findPurchasingPolicyRule(policyRuleType, _buyingLegalEntity, _recievingOperatingUnit);

            // if there is any CategoryAccessPolicyRule, then only ProcurementCategory nodes specified in the policy are included.
            if (purchasingPolicyRuleRecId)
            {
                if (!qbdsProcCategoryAccessPolicyParameter)
                {
                    qbdsProcCategoryAccessPolicyParameter = _query.dataSourceTable(tableNum(EcoResProductCategory)).addDataSource(tableIdParameter);
                    qbdsProcCategoryAccessPolicyParameter.addLink(fieldNum(EcoResProductCategory, Category), fieldIdCategory);
                    qbdsProcCategoryAccessPolicyParameter.joinMode(JoinMode::ExistsJoin);
                }
                else
                {
                    qbdsProcCategoryAccessPolicyParameter.enabled(true);
                    qbdsProcCategoryAccessPolicyParameter.clearRanges();
                }
                queryBuildRange = qbdsProcCategoryAccessPolicyParameter.addRange(fieldIdAccessPolicyRule);
                queryBuildRange.value(queryValue(purchasingPolicyRuleRecId));
                queryBuildRange.status(RangeStatus::Hidden);
            }
        }
        else
        {
            if (qbdsProcCategoryAccessPolicyParameter)
            {
                qbdsProcCategoryAccessPolicyParameter.enabled(false);
            }
        }

        qbdsCatProcurementCatalogProductSiteAll = _query.dataSourceTable(tableNum(CatProcurementCatalogProductSiteAll));

        if (_catalogId
            && (_isConsumption
                || RequisitionReplenishCatAccessPolicyRule::findForLegalEntity(_buyingLegalEntity).RecId == 0))
        {
            if (!qbdsCatProcurementCatalogProductSiteAll)
            {
                qbdsCatProcurementCatalogProductSiteAll = _query.dataSourceTable(tableNum(EcoResProduct)).addDataSource(tableNum(CatProcurementCatalogProductSiteAll));
                qbdsCatProcurementCatalogProductSiteAll.addLink(fieldNum(EcoResProduct, RecId), fieldNum(CatProcurementCatalogProductSiteAll, ProductRecId));
                qbdsCatProcurementCatalogProductSiteAll.joinMode(JoinMode::ExistsJoin);
            }
            else
            {
                qbdsCatProcurementCatalogProductSiteAll.enabled(true);
                qbdsCatProcurementCatalogProductSiteAll.clearRanges();
            }

            // If the catalog is published, restrict to items associated with the catalog; otherwise display all items from all catalogs
            catProcureCatalogTable = CatProcureCatalogTable::findByRecId(_catalogId);

            if (catProcureCatalogTable.PublishingStatus == ProcureCatalogPublishingStatus::Active)
            {
                queryBuildRange = qbdsCatProcurementCatalogProductSiteAll.addRange(fieldNum(CatProcurementCatalogProductSiteAll, Catalog));
                queryBuildRange.value(queryValue(_catalogId));
                queryBuildRange.status(RangeStatus::Hidden);
            }
        }
        else
        {
            if (qbdsCatProcurementCatalogProductSiteAll)
            {
                qbdsCatProcurementCatalogProductSiteAll.enabled(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPurchLineRef</Name>
				<Source><![CDATA[
    static void clearPurchLineRef(PurchReqLineRefId _purchReqLineRefId)
    {
        #OCCRetryCount
        PurchReqLine purchReqLine;
        
        try
        {
            if (_purchReqLineRefId)
            {
                ttsbegin;

                select forupdate firstonly purchReqLine
                    where purchReqLine.LineRefId == _purchReqLineRefId;

                if (purchReqLine)
                {
                    purchReqLine.PurchId                         = '';
                    purchReqLine.PurchIdDataArea                 = '';
                    purchReqLine.PurchLineCreated                = false;
                    purchReqLine.IsPurchaseOrderGenerationManual = true;
                    purchReqLine.update(false);

                    if (purchReqLine.RequisitionStatus != PurchReqRequisitionStatus::Cancelled)
                    {
                        PurchReqWFStatusTransitionHelper::setPurchReqLineStatus(purchReqLine.RecId, PurchReqRequisitionStatus::Approved, false);
                    }
                    PurchReqWFStatusTransitionHelper::setPurchReqTable2Approved(purchReqLine.PurchReqTable, true);
                }
                ttscommit;
            }
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
        catch(Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(RecId  _purchReqLineRecId)
    {
        return (select firstonly RecId from purchReqLine 
            where purchReqLine.RecId == _purchReqLineRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether there is any line to copy for a purchase requisition.
    /// </summary>
    /// <returns>
    /// true if the records are available; otherwise, false.
    /// </returns>
    static boolean existLine()
    {
        return (select firstonly RecId from purchReqLine).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a requisition line exists with a specific status for a requisition.
    /// </summary>
    /// <param name="_purchReqTableRecId">
    /// The <c>RecId</c> for the <c>PurchReqTable</c> to determine for.
    /// </param>
    /// <param name="_requisitionStatus">
    /// The <c>PurchReqRequisitionStatus</c> to determine for.
    /// </param>
    /// <returns>
    /// true if lines exist with the status; otherwise, false.
    /// </returns>
    public static boolean existsStatus(RefRecId _purchReqTableRecId, PurchReqRequisitionStatus  _requisitionStatus)
    {
        PurchReqLine purchReqLine;

        select firstonly RecId from purchReqLine
                where purchReqLine.PurchReqTable     == _purchReqTableRecId
                    && purchReqLine.RequisitionStatus == _requisitionStatus;

        return purchReqLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static PurchReqLine find(RecId            _purchReqLineRecId,
                             boolean          _forUpdate            = false,
                             ConcurrencyModel _concurrencyModel     = ConcurrencyModel::Auto)
    {
        PurchReqLine  purchReqLine;

        if (_purchReqLineRecId)
        {
            if (_forUpdate)
            {
                purchReqLine.selectForUpdate(_forUpdate);

                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    purchReqLine.concurrencyModel(_concurrencyModel);
                }
            }

            purchReqLine.selectLocked(_forUpdate);

            select firstonly purchReqLine where purchReqLine.RecId == _purchReqLineRecId;
        }

        return purchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>PurchReqLine</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// A record ID of the <c>SourceDocumentLine</c> record.
    /// </param>
    /// <returns>
    /// A <c>PurchReqLine</c> record.
    /// </returns>
    public static PurchReqLine findBySourceDocumentLine(RefRecId _sourceDocumentLine)
    {
        PurchReqLine     purchReqLine;

        select firstonly purchReqLine
            where purchReqLine.SourceDocumentLine == _sourceDocumentLine;

        return purchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCheapestVendor</Name>
				<Source><![CDATA[
    public static VendTable findCheapestVendor(PurchReqLine _purchReqLine)
    {
        PriceDiscTable priceDiscTable = PriceDiscTable::findPurchPriceDiscTable(
                                                            _purchReqLine.ItemId,
                                                            _purchReqLine.InventDimId,            
                                                            _purchReqLine.PurchQty,        
                                                            _purchReqLine.RequiredDate,
                                                            ReqSearchTradeMethod::LowestPcsPrice,
                                                            UnitOfMeasure::find(_purchReqLine.PurchUnitOfMeasure).Symbol);

        return VendTable::find(priceDiscTable.AccountRelation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PurchReqLine</c> table.
    /// </summary>
    /// <param name="_purchReqTableRecId">
    /// The record ID of the <c>PurchReqLine</c> record.
    /// </param>
    /// <param name="_lineNum">
    /// The line number of the <c>PurchReqLine</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the program reads the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PurchReqTable</c> table; otherwise, an empty record.
    /// </returns>
    static PurchReqLine findLine(RefRecId         _purchReqTableRecId,
                                 LineNum          _lineNum,
                                 boolean          _forUpdate        = false,
                                 ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PurchReqLine  purchReqLine;

        if (_purchReqTableRecId)
        {
            if (_forUpdate)
            {
                purchReqLine.selectForUpdate(_forUpdate);
                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    purchReqLine.concurrencyModel(_concurrencyModel);
                }
            }
            purchReqLine.selectLocked(_forUpdate);

            select firstonly purchReqLine where purchReqLine.PurchReqTable == _purchReqTableRecId && purchReqLine.LineNum == _lineNum;
        }

        return purchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLineRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PurchReqLine</c> table.
    /// </summary>
    /// <param name="_purchReqLineRefId">
    /// The reference ID of the <c>PurchReqLine</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PurchReqTable</c> table; otherwise, an empty record.
    /// </returns>
    static PurchReqLine findLineRefId(PurchReqLineRefId _purchReqLineRefId, boolean _forUpdate = false)
    {
        PurchReqLine purchReqLine;

        if (_purchReqLineRefId)
        {
            purchReqLine.selectForUpdate(_forUpdate);

            select firstonly purchReqLine where purchReqLine.LineRefId == _purchReqLineRefId;
        }

        return purchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrimaryVendor</Name>
				<Source><![CDATA[
    public static VendTable findPrimaryVendor(PurchReqLine _purchReqLine)
    {
        InventTable inventTable = InventTable::find(_purchReqLine.ItemId);
        return VendTable::find(inventTable.primaryVendorId(_purchReqLine.InventDimId, _purchReqLine.inventDim()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendors</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the default and cheapest vendor applicable for an item.
    /// </summary>
    /// <param name="_purchReqLine">
    ///    A record in <c>PurchReqLine</c> table.
    /// </param>
    /// <returns>
    ///    A container containing record ID of the record in <c>VendTable</c> table.
    /// </returns>
    static container findVendors(PurchReqLine _purchReqLine)
    {
        container            con;
        VendTable            primaryVendTable;
        VendTable            cheapVendtable;
        List                 agreementLineList;
        ListEnumerator       le;
        AgreementLine        agreementLine;
        PurchAgreementHeader purchAgreementHeader;
        PurchReqLine         purchReqLineAgreement;

        primaryVendTable = PurchReqLine::findPrimaryVendor(_purchReqLine);
        cheapVendtable   = PurchReqLine::findCheapestVendor(_purchReqLine);

        if (primaryVendTable)
        {
            con = conIns(con, 1, primaryVendTable.RecId);
        }

        if (cheapVendtable)
        {
            //the order of storage in the container does not matter
            con = conIns(con, 1, cheapVendtable.RecId);
        }

        buf2Buf(_purchReqLine, purchReqLineAgreement);
        //for validate vendor getting a complete list does not hurt, however for lookup we must have a complete list.
        purchReqLineAgreement.VendAccount = "";
        purchReqLineAgreement.setDataAreaForModifiedField(fieldNum(PurchReqLine, VendAccount));

        agreementLineList = AgreementLine::getAgreementLinesForPurchReqLine(purchReqLineAgreement);
        le                = agreementLineList.getEnumerator();

        while (le.moveNext())
        {
            agreementLine = le.current();

            purchAgreementHeader = agreementLine.agreementHeader() as PurchAgreementHeader;

            if (purchAgreementHeader && (purchAgreementHeader.VendAccount != primaryVendTable.AccountNum && purchAgreementHeader.VendAccount != cheapVendtable.AccountNum))
            {
                con = conIns(con, 1, VendTable::find(purchAgreementHeader.VendAccount).RecId);
            }
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and returns a query object used to fetch applicable agreements to a <c>PurchReqLine</c> record.
    /// </summary>
    /// <param name = '_purchReqLine'>
    /// A record in <c>PurchReqLine</c> table.
    /// </param>
    /// <returns>
    /// A query to fetch applicable agreements to a <c>PurchReqLine</c> record.
    /// </returns>
    public static Query getAgreementLookupQuery(PurchReqLine _purchReqLine)
    {
        container                       con;
        Query                           query                           = new Query();
        QueryBuildDataSource            qbds                            = query.addDataSource(tableNum(AgreementLine));
        int                             i;
        List                            agreementLineList               = new List(Types::Record);
        ListEnumerator                  le;
        PurchReqLine                    purchReqLineAgreement;
        AgreementLine                   agreementLine;

        #define.Zero(0)

        buf2Buf(_purchReqLine, purchReqLineAgreement);
        //for agreement lookup we do not need purchAgreement otherwise we will get back just one record.
        purchReqLineAgreement.PurchAgreement = 0;

        agreementLineList = AgreementLine::getAgreementLinesForPurchReqLine(purchReqLineAgreement);

        le                = agreementLineList.getEnumerator();

        while (le.moveNext())
        {
            agreementLine = le.current();

            con = conIns(con, 1, agreementLine.RecId);
        }

        if (conLen(con) == 0)
        {
            qbds.addRange(fieldNum(VendTable, RecId)).value(queryValue(#Zero));
        }
        else
        {
            for (i =1; i <= conLen(con); i++)
            {
                qbds.addRange(fieldNum(AgreementLine, RecId)).value(queryValue(conPeek(con, i)));
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatalogPolicyRuleRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns <c>RecId</c> of the applicable catalog rule.
    /// </summary>
    /// <param name="_le">
    ///    Record ID of legal entity.
    /// </param>
    /// <param name="_ou">
    ///    Record ID of operating unit.
    /// </param>
    /// <param name="_requiredDate">
    ///    Required date used for retrieving the policy.
    /// </param>
    /// <returns>
    /// Record ID of the applicable policy.
    /// </returns>
    public static RefRecId getCatalogPolicyRuleRecId(RefRecId _le, RefRecId _ou, PurchReqRequiredDate _requiredDate)
    {
        if (_requiredDate > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            return CatCatalogPolicyRule::findCatalogByPolicy(_le, _ou, DateTimeUtil::newDateTime(_requiredDate,0));
        }
        else
        {
            return CatCatalogPolicyRule::findCatalogByPolicy(_le, _ou);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEditableDimensionAttributeSetId</Name>
				<Source><![CDATA[
    public static RecId getEditableDimensionAttributeSetId()
    {
        DimensionAttributeSetStorage    dimensionAttributeSetStorage;
        DimensionAttribute              dimAttr;

        dimensionAttributeSetStorage = new DimensionAttributeSetStorage();
        while select RecId, BackingEntityType, HashKey
            from dimAttr order by Name
            where dimAttr.Type == DimensionAttributeType::CustomList ||
                dimAttr.Type == DimensionAttributeType::ExistingList
        {
            switch (dimAttr.BackingEntityType)
            {
                //Filter out the dimensions that are not editable and return the
                //set of editable dimensions.
                case tableNum(DimAttributeHcmWorker):
                case tableNum(DimAttributeInventTable):
                case tableNum(DimAttributeAssetGroup):
                case tableNum(DimAttributeProjTable):
                case tableNum(DimAttributeVendTable):
                    dimensionAttributeSetStorage.addItem(dimAttr.RecId, dimAttr.HashKey, NoYes::No);
                    break;

                default:
                    dimensionAttributeSetStorage.addItem(dimAttr.RecId, dimAttr.HashKey, NoYes::Yes);
            }
        }
        return dimensionAttributeSetStorage.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorLookupQuery</Name>
				<Source><![CDATA[
    static Query getVendorLookupQuery(PurchReqLine _purchReqLine, boolean _isFilteredLookup = true)
    {
        container                       con;
        Query                           query                           = new Query();
        ProcCategoryPolicyParameter     procCategoryPolicyParameter;
        QueryBuildDataSource            qbds;
        int                             i;
        #define.Zero(0)

        void addLockedRangeToQueryBuildDataSource(QueryBuildDataSource _queryBuildDataSource, Map _fieldToQueryValue)
        {
            MapEnumerator en = new MapEnumerator(_fieldToQueryValue);

            while (en.moveNext())
            {
                QueryBuildRange range = _queryBuildDataSource.addRange(en.currentKey());
                range.value(en.currentValue());
                range.status(RangeStatus::Locked);
            }
        }

        if (_isFilteredLookup)
        {
            Map fieldToQueryValue = new Map(Types::Integer, Types::String);

            procCategoryPolicyParameter = _purchReqLine.procCategoryPolicyParameter();

            qbds = query.addDataSource(tableNum(ProcCategoryVendorView));

            fieldToQueryValue.insert(fieldNum(ProcCategoryVendorView, VendDataAreaId),
                queryValue(getCompany(tableNum(VendTable), _purchReqLine.buyingLegalEntity2DataArea())));

            if (procCategoryPolicyParameter.VendorSelection == ProcCategoryVendorSelection::PreferredOnly)
            {
                fieldToQueryValue.insert(fieldNum(ProcCategoryVendorView, VendCategoryStatus), queryValue(VendCategoryStatus::Preferred));
            }

            fieldToQueryValue.insert(fieldNum(ProcCategoryVendorView, Category), queryValue(_purchReqLine.ProcurementCategory));
            fieldToQueryValue.insert(fieldNum(ProcCategoryVendorView, ValidFrom), '..'+ queryValue(_purchReqLine.RequiredDate));
            fieldToQueryValue.insert(fieldNum(ProcCategoryVendorView, ValidTo), queryValue(_purchReqLine.RequiredDate)+'..');
            fieldToQueryValue.insert(fieldNum(ProcCategoryVendorView, LegalEntity), queryValue(_purchReqLine.BuyingLegalEntity));

            addLockedRangeToQueryBuildDataSource(qbds, fieldToQueryValue);
        }

        else
        {
            qbds = query.addDataSource(tableNum(VendTable));

            if (_purchReqLine.isInferredDraft() && _purchReqLine.LineType == PurchReqLineType::Item)
            {
                con = PurchReqLine::findVendors(_purchReqLine);

                if (conLen(con) == 0)
                {
                    qbds.addRange(fieldNum(VendTable, RecId)).value(queryValue(#Zero));
                }
                else
                {
                    for (i =1; i <= conLen(con); i++)
                    {
                        qbds.addRange(fieldNum(VendTable, RecId)).value(queryValue(conPeek(con, i)));
                    }
                }
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    static LineNum lastLineNum(RefRecId _purchReqTableRecId)
    {
        return (select maxof(LineNum) from purchReqLine 
            where purchReqLine.PurchReqTable == _purchReqTableRecId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastSequenceNumber</Name>
				<Source><![CDATA[
    static SequenceNumber lastSequenceNumber(RefRecId _purchReqTableRecId)
    {
        return (select maxof(SequenceNumber) from purchReqLine 
            where purchReqLine.PurchReqTable == _purchReqTableRecId).SequenceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates a lookup for the agreement field.
    /// </summary>
    /// <param name="_ctrl">
    ///    The form control that will use the lookup.
    /// </param>
    /// <param name="_purchReqLine">
    ///    A record in table <c>PurchReqLine</c>
    /// </param>

    static void lookupAgreementLine(FormStringControl _ctrl, PurchReqLine _purchReqLine)
    {
        Args args = new Args();
        args.name(formStr(PurchReqPurchAgreementLookup));
        args.caller(_ctrl);
        args.record(_purchReqLine);
        Object formRun = classfactory.formRunClass(args);
        formRun.init();

        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up and executes a Query that will pull back all of the records
    /// from <c>CatProcurementCatalogProductSiteAll</c> that filtered with catalog policy if exists.
    /// </summary>
    /// <param name="_ctrl">
    /// The current selected form control.
    /// </param>
    /// <param name="_legalEntityRecId">
    /// The buying legal entity of the purchase requisition line.
    /// </param>
    /// <param name="_operatingUnitRecId">
    /// The receiving operating unit of the purchase requisition line.
    /// </param>
    /// <param name="_requiredDate">
    /// The required date of the purchase requisition line.
    /// </param>
    /// <param name="_requisitionPurpose">
    /// The requisition purpose of the purchase requisition line.
    /// </param>
    public static void lookupItemId(
		FormStringControl    _ctrl,
        RefRecId             _legalEntityRecId,
        RefRecId             _operatingUnitRecId,
        PurchReqRequiredDate _requiredDate,
        RequisitionPurpose   _requisitionPurpose	= RequisitionPurpose::Consumption)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSourceInventTable;
        QueryBuildDataSource    queryBuildDataSourceEcoResProduct;
        QueryBuildDataSource    queryBuildDataSourceEcoResProductCategory;
        QueryBuildDataSource    queryBuildDataSourceEcoResCategory;
        QueryBuildDataSource    qbdsInventModelGroupItem;
        QueryBuildDataSource    qbdsInventModelGroup;
        QueryBuildRange         qbrInventModelGroup;
        SysTableLookup          sysTableLookup;

        EcoResCategory              ecoResCategory;
        ProcCategoryTmpPolicyRule   procCategoryTmpPolicyRule;
        QueryBuildDataSource        qbdsProcCategoryAccessPolicyParameter;
        str                         categoryRules = queryValue(0);
        boolean                     found = false;
        TableId                     tableIdParameter;
        FieldId                     fieldIdCategory, fieldIdAccessPolicyRule;
        SysPolicyRuleTypeEnum       sysPolicyRuleTypeEnum;
        RequisitionReplenishCatAccessPolicyRule requisitionReplenishCatAccessPolicyRule;
        EcoResCategoryHierarchy     categoryHierarchy;

        sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _ctrl);

        sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _ctrl);
        queryBuildDataSourceInventTable = query.addDataSource(tableNum(InventTable));
        queryBuildDataSourceEcoResProduct = queryBuildDataSourceInventTable.addDataSource(tableNum(EcoResProduct));
        queryBuildDataSourceEcoResProduct.relations(true);
        queryBuildDataSourceEcoResProduct.joinMode(JoinMode::ExistsJoin);
        queryBuildDataSourceEcoResProduct.addRange(fieldNum(EcoResProduct, PdsCWProduct)).value(SysQuery::value(NoYes::No));

        queryBuildDataSourceEcoResProductCategory = queryBuildDataSourceEcoResProduct.addDataSource(tableNum(EcoResProductCategory));
        queryBuildDataSourceEcoResProductCategory.relations(true);
        queryBuildDataSourceEcoResProductCategory.joinMode(JoinMode::ExistsJoin);

        if (_requisitionPurpose == RequisitionPurpose::Replenishment)
        {
            if (RequisitionReplenishCatAccessPolicyRule::findForLegalEntity(_legalEntityRecId).RecId)
            {
                tableIdParameter        = tableNum(RequisitionRepCatAccessPolicyRuleData);
                fieldIdCategory         = fieldNum(RequisitionRepCatAccessPolicyRuleData, Category);
                fieldIdAccessPolicyRule = fieldNum(RequisitionRepCatAccessPolicyRuleData, RequisitionReplenishCatAccessPolicyRule);
                sysPolicyRuleTypeEnum   = SysPolicyRuleTypeEnum::RequisitionReplenishCatAccessPolicyRule;
                requisitionReplenishCatAccessPolicyRule = RequisitionReplenishCatAccessPolicyRule::findForLegalEntity(_legalEntityRecId);
                categoryHierarchy = EcoResCategoryHierarchy::find(requisitionReplenishCatAccessPolicyRule.EcoResCategoryHierarchy);
            }
            if (!tableIdParameter)
            {
                tableIdParameter        = tableNum(ProcCategoryAccessPolicyParameter);
                fieldIdCategory         = fieldNum(ProcCategoryAccessPolicyParameter, ProcurementCategory);
                fieldIdAccessPolicyRule = fieldNum(ProcCategoryAccessPolicyParameter, ProcurementCategoryAccessPolicyRule);
                sysPolicyRuleTypeEnum = SysPolicyRuleTypeEnum::CategoryAccessPolicyRule;
                categoryHierarchy = EcoResCategoryHierarchy::find(EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Procurement).CategoryHierarchy);
            }

            ecoResCategory  = EcoResCategory::getRoot(categoryHierarchy.RecId);

            queryBuildDataSourceEcoResCategory = queryBuildDataSourceEcoResProductCategory.addDataSource(tableNum(EcoResCategory));
            queryBuildDataSourceEcoResCategory.relations(true);
            queryBuildDataSourceEcoResCategory.joinMode(JoinMode::ExistsJoin);

            procCategoryTmpPolicyRule = EcoResCategory::getProcCategoryRules(sysPolicyRuleTypeEnum, _legalEntityRecId, _operatingUnitRecId);
            while select procCategoryTmpPolicyRule
            {
                found = true;
                categoryRules += strFmt(',%1',  queryValue(procCategoryTmpPolicyRule.PolicyRule));
            }

            if (found)
            {
                qbdsProcCategoryAccessPolicyParameter = queryBuildDataSourceEcoResCategory.addDataSource(tableIdParameter);
                qbdsProcCategoryAccessPolicyParameter.addLink(fieldNum(EcoResCategory, RecId), fieldIdCategory);
                qbdsProcCategoryAccessPolicyParameter.joinMode(JoinMode::InnerJoin);

                qbdsProcCategoryAccessPolicyParameter.addRange(fieldIdAccessPolicyRule).value(categoryRules);
            }

            queryBuildDataSourceEcoResCategory.clearRanges();
            queryBuildDataSourceEcoResCategory.addRange(fieldNum(EcoResCategory,NestedSetLeft)).value(queryRange(ecoResCategory.NestedSetLeft, ecoResCategory.NestedSetRight));
            queryBuildDataSourceEcoResCategory.addRange(fieldNum(EcoResCategory, CategoryHierarchy)).value(queryValue(ecoResCategory.CategoryHierarchy));
            queryBuildDataSourceEcoResCategory.addRange(fieldNum(EcoResCategory, IsActive)).value(queryValue(NoYes::Yes));

            qbdsInventModelGroupItem = queryBuildDataSourceInventTable.addDataSource(tableNum(InventModelGroupItem));
            qbdsInventModelGroupItem.relations(true);
            qbdsInventModelGroupItem.joinMode(JoinMode::ExistsJoin);

            qbdsInventModelGroup = qbdsInventModelGroupItem.addDataSource(tableNum(InventModelGroup));
            qbdsInventModelGroup.relations(true);
            qbdsInventModelGroup.joinMode(JoinMode::ExistsJoin);
            qbrInventModelGroup = qbdsInventModelGroup.addRange(fieldNum(InventModelGroup, StockedProduct));
            qbrInventModelGroup.value(SysQuery::value(NoYes::Yes));
        }

        PurchReqLine::addCatalogPolicyRuleToCatalogQuery(query,
            PurchReqLine::getCatalogPolicyRuleRecId(_legalEntityRecId, _operatingUnitRecId, _requiredDate),
            _requisitionPurpose == RequisitionPurpose::Consumption,
            _legalEntityRecId,
            _operatingUnitRecId);

        sysTableLookup.addLookupfield(fieldNum(InventTable, ItemId));
        sysTableLookup.addLookupfield(fieldNum(InventTable, Product));
        sysTableLookup.addLookupMethod(tableMethodStr(InventTable, itemName));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableItems</Name>
				<Source><![CDATA[
    internal static List getAvailableItems(
        RefRecId             _legalEntityRecId,
        RefRecId             _operatingUnitRecId,
        PurchReqRequiredDate _requiredDate,
        RequisitionPurpose   _requisitionPurpose = RequisitionPurpose::Consumption)
    {
        List itemList = new List(Types::Record);

        QueryRun queryRun = new QueryRun(PurchReqLine::composeLookupItemQuery(_legalEntityRecId, _operatingUnitRecId, _requiredDate, _requisitionPurpose));
        while (queryRun.next())
        {
            itemList.addEnd(queryRun.get(tableNum(InventTable)) as InventTable);
        }

        return itemList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>composeLookupItemQuery</Name>
				<Source><![CDATA[
    private static Query composeLookupItemQuery(
        RefRecId             _legalEntityRecId,
        RefRecId             _operatingUnitRecId,
        PurchReqRequiredDate _requiredDate,
        RequisitionPurpose   _requisitionPurpose	= RequisitionPurpose::Consumption)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSourceInventTable;
        QueryBuildDataSource    queryBuildDataSourceEcoResProduct;
        QueryBuildDataSource    queryBuildDataSourceEcoResProductCategory;
        QueryBuildDataSource    queryBuildDataSourceEcoResCategory;
        QueryBuildDataSource    qbdsInventModelGroupItem;
        QueryBuildDataSource    qbdsInventModelGroup;
        QueryBuildRange         qbrInventModelGroup;

        EcoResCategory              ecoResCategory;
        ProcCategoryTmpPolicyRule   procCategoryTmpPolicyRule;
        QueryBuildDataSource        qbdsProcCategoryAccessPolicyParameter;
        str                         categoryRules = queryValue(0);
        boolean                     found = false;
        TableId                     tableIdParameter;
        FieldId                     fieldIdCategory, fieldIdAccessPolicyRule;
        SysPolicyRuleTypeEnum       sysPolicyRuleTypeEnum;
        RequisitionReplenishCatAccessPolicyRule requisitionReplenishCatAccessPolicyRule;
        EcoResCategoryHierarchy     categoryHierarchy;

        queryBuildDataSourceInventTable = query.addDataSource(tableNum(InventTable));
        queryBuildDataSourceEcoResProduct = queryBuildDataSourceInventTable.addDataSource(tableNum(EcoResProduct));
        queryBuildDataSourceEcoResProduct.relations(true);
        queryBuildDataSourceEcoResProduct.joinMode(JoinMode::ExistsJoin);
        queryBuildDataSourceEcoResProduct.addRange(fieldNum(EcoResProduct, PdsCWProduct)).value(SysQuery::value(NoYes::No));

        queryBuildDataSourceEcoResProductCategory = queryBuildDataSourceEcoResProduct.addDataSource(tableNum(EcoResProductCategory));
        queryBuildDataSourceEcoResProductCategory.relations(true);
        queryBuildDataSourceEcoResProductCategory.joinMode(JoinMode::ExistsJoin);

        if (_requisitionPurpose == RequisitionPurpose::Replenishment)
        {
            if (RequisitionReplenishCatAccessPolicyRule::findForLegalEntity(_legalEntityRecId).RecId)
            {
                tableIdParameter        = tableNum(RequisitionRepCatAccessPolicyRuleData);
                fieldIdCategory         = fieldNum(RequisitionRepCatAccessPolicyRuleData, Category);
                fieldIdAccessPolicyRule = fieldNum(RequisitionRepCatAccessPolicyRuleData, RequisitionReplenishCatAccessPolicyRule);
                sysPolicyRuleTypeEnum   = SysPolicyRuleTypeEnum::RequisitionReplenishCatAccessPolicyRule;
                requisitionReplenishCatAccessPolicyRule = RequisitionReplenishCatAccessPolicyRule::findForLegalEntity(_legalEntityRecId);
                categoryHierarchy = EcoResCategoryHierarchy::find(requisitionReplenishCatAccessPolicyRule.EcoResCategoryHierarchy);
            }
            if (!tableIdParameter)
            {
                tableIdParameter        = tableNum(ProcCategoryAccessPolicyParameter);
                fieldIdCategory         = fieldNum(ProcCategoryAccessPolicyParameter, ProcurementCategory);
                fieldIdAccessPolicyRule = fieldNum(ProcCategoryAccessPolicyParameter, ProcurementCategoryAccessPolicyRule);
                sysPolicyRuleTypeEnum = SysPolicyRuleTypeEnum::CategoryAccessPolicyRule;
                categoryHierarchy = EcoResCategoryHierarchy::find(EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Procurement).CategoryHierarchy);
            }

            ecoResCategory  = EcoResCategory::getRoot(categoryHierarchy.RecId);

            queryBuildDataSourceEcoResCategory = queryBuildDataSourceEcoResProductCategory.addDataSource(tableNum(EcoResCategory));
            queryBuildDataSourceEcoResCategory.relations(true);
            queryBuildDataSourceEcoResCategory.joinMode(JoinMode::ExistsJoin);

            procCategoryTmpPolicyRule = EcoResCategory::getProcCategoryRules(sysPolicyRuleTypeEnum, _legalEntityRecId, _operatingUnitRecId);
            while select procCategoryTmpPolicyRule
            {
                found = true;
                categoryRules += strFmt(',%1',  queryValue(procCategoryTmpPolicyRule.PolicyRule));
            }

            if (found)
            {
                qbdsProcCategoryAccessPolicyParameter = queryBuildDataSourceEcoResCategory.addDataSource(tableIdParameter);
                qbdsProcCategoryAccessPolicyParameter.addLink(fieldNum(EcoResCategory, RecId), fieldIdCategory);
                qbdsProcCategoryAccessPolicyParameter.joinMode(JoinMode::InnerJoin);

                qbdsProcCategoryAccessPolicyParameter.addRange(fieldIdAccessPolicyRule).value(categoryRules);
            }

            queryBuildDataSourceEcoResCategory.clearRanges();
            queryBuildDataSourceEcoResCategory.addRange(fieldNum(EcoResCategory,NestedSetLeft)).value(queryRange(ecoResCategory.NestedSetLeft, ecoResCategory.NestedSetRight));
            queryBuildDataSourceEcoResCategory.addRange(fieldNum(EcoResCategory, CategoryHierarchy)).value(queryValue(ecoResCategory.CategoryHierarchy));
            queryBuildDataSourceEcoResCategory.addRange(fieldNum(EcoResCategory, IsActive)).value(queryValue(NoYes::Yes));

            qbdsInventModelGroupItem = queryBuildDataSourceInventTable.addDataSource(tableNum(InventModelGroupItem));
            qbdsInventModelGroupItem.relations(true);
            qbdsInventModelGroupItem.joinMode(JoinMode::ExistsJoin);

            qbdsInventModelGroup = qbdsInventModelGroupItem.addDataSource(tableNum(InventModelGroup));
            qbdsInventModelGroup.relations(true);
            qbdsInventModelGroup.joinMode(JoinMode::ExistsJoin);
            qbrInventModelGroup = qbdsInventModelGroup.addRange(fieldNum(InventModelGroup, StockedProduct));
            qbrInventModelGroup.value(SysQuery::value(NoYes::Yes));
        }

        PurchReqLine::addCatalogPolicyRuleToCatalogQuery(query,
            PurchReqLine::getCatalogPolicyRuleRecId(_legalEntityRecId, _operatingUnitRecId, _requiredDate),
            _requisitionPurpose == RequisitionPurpose::Consumption,
            _legalEntityRecId,
            _operatingUnitRecId);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableProcCategories</Name>
				<Source><![CDATA[
    internal static List getAvailableProcCategories(
        RefRecId             _legalEntityRecId,
        RefRecId             _operatingUnitRecId)
    {
        List categoryList = new List(Types::Int64);

        if (_legalEntityRecId || _operatingUnitRecId)
        {
            ProcCategoryTmpPolicyRule procCategoryTmpPolicyRule;
            procCategoryTmpPolicyRule.setTmpData(EcoResCategory::getProcCategoryRules(SysPolicyRuleTypeEnum::CategoryAccessPolicyRule,
                                                                            _legalEntityRecId,
                                                                            _operatingUnitRecId));

            select count(RecId) from procCategoryTmpPolicyRule;

            if (procCategoryTmpPolicyRule.RecId)
            {
                EcoResCategory subCategory, superCategory;
                ProcCategoryAccessPolicyParameter procCategoryAccessPolicyParameter;

                while select procCategoryTmpPolicyRule
                    join procCategoryAccessPolicyParameter
                        where procCategoryTmpPolicyRule.PolicyRule == procCategoryAccessPolicyParameter.ProcurementCategoryAccessPolicyRule
                    join subCategory
                        where subCategory.RecId == procCategoryAccessPolicyParameter.ProcurementCategory
                    join superCategory
                group by superCategory.RecId
                    where superCategory.NestedSetLeft <= subCategory.NestedSetLeft
                        && superCategory.NestedSetRight >= subCategory.NestedSetRight
                        && superCategory.CategoryHierarchy == subCategory.CategoryHierarchy
                {
                    categoryList.addEnd(superCategory.RecId);
                }
            }
            else
            {
                //when there are no category access rules, all categories should be available
                EcoResCategory category;
                EcoResCategoryHierarchy categoryHierarchy;
                EcoResCategoryHierarchyRole categoryHierarchyRole;
                while select RecId from category
                    exists join categoryHierarchy
                        where category.CategoryHierarchy == categoryHierarchy.RecId
                    exists join categoryHierarchyRole
                        where categoryHierarchy.RecId == categoryHierarchyRole.CategoryHierarchy
                            && categoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Procurement
                {
                    categoryList.addEnd(category.RecId);
                }
            }
        }

        return categoryList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRequester</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and displays a lookup from which the user can select a requester
    /// </summary>
    /// <param name="_formReferenceControl">
    ///    The calling form reference control.
    /// </param>
    /// <returns>
    /// The selected record in the case of record mode selection; otherwise null.
    /// </returns>
    public static Common lookupRequester(FormReferenceControl _formReferenceControl)
    {
        Args args = new Args();
        args.name(formStr(PurchReqRequesterLookup));
        args.caller(_formReferenceControl);

        FormRun formRun = classfactory.formRunClass(args);
        formRun.init();

        _formReferenceControl.performFormLookup(formRun);

        return formRun.selectRecordModeSelectedRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Presents user with a lookup displaying records from <c>VendTable</c> table.
    /// </summary>
    /// <param name="_ctrl">
    ///    The form control from where the lookup was called.
    /// </param>
    /// <param name="_purchReqLine">
    ///    A record in <c>PurchReqLine</c> table.
    /// </param>

    static void lookupVendAccount(FormStringControl _ctrl, PurchReqLine _purchReqLine)
    {
        SysTableLookup                  sysTableLookup;
        ProcCategoryPolicyParameter     procCategoryPolicyParameter;

        void initUnFilteredLookup()
        {
            sysTableLookup = SysTableLookup::newParameters(tableNum(VendTable), _ctrl);
            sysTableLookup.addLookupfield(fieldNum(VendTable, AccountNum));
            sysTableLookup.addLookupfield(fieldNum(VendTable, Party));

            sysTableLookup.parmQuery(PurchReqLine::getVendorLookupQuery(_purchReqLine, false));
        }
        void initFilteredLookup()
        {
            sysTableLookup = SysTableLookup::newParameters(tableNum(ProcCategoryVendorView), _ctrl);
            sysTableLookup.addLookupfield(fieldNum(ProcCategoryVendorView, VendAccountNum));
            sysTableLookup.addLookupfield(fieldNum(ProcCategoryVendorView, Name));
            sysTableLookup.addLookupfield(fieldNum(ProcCategoryVendorView, VendCategoryStatus));

            sysTableLookup.parmQuery(PurchReqLine::getVendorLookupQuery(_purchReqLine, true));
        }

        if (_purchReqLine.LineType == PurchReqLineType::Item)
        {
            initUnFilteredLookup();
        }
        else
        {
            procCategoryPolicyParameter = _purchReqLine.procCategoryPolicyParameter();

            if (procCategoryPolicyParameter.RecId && procCategoryPolicyParameter.VendorSelection != ProcCategoryVendorSelection::Any)
            {
                if (procCategoryPolicyParameter.VendorSelection != ProcCategoryVendorSelection::SelectionNotAllowed ||
                    _purchReqLine.RequisitionStatus == PurchReqRequisitionStatus::InReview)
                {
                    initFilteredLookup();
                }
            }
            else
            {
                initUnFilteredLookup();
            }
        }

        if (sysTableLookup)
        //SysTableLookup will be null where vendorSelection is selection not allowed.
        {
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventLocation</Name>
				<Source><![CDATA[
    static void modifyInventLocation(PurchReqLine _purchReqLine, InventLocationId _inventLocationId)
    {
        _purchReqLine.InventLocationId = _inventLocationId;
        _purchReqLine.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPurchQty</Name>
				<Source><![CDATA[
    public static void  modifyPurchQty(PurchReqLine _purchReqLine, InventDim _inventDim)
    {
        InventItemOrderSetupMap     inventItemOrderSetupMap;
        int64                       orgArray[2];
        int64                       purchReqControlRuleRecId;
        PurchReqControlRule         purchReqControlRule;

        if (_purchReqLine.isConsumption()) //do not default vendor for replenishment requisitions.
        {
            orgArray[1] = _purchReqLine.BuyingLegalEntity;
            orgArray[2] = _purchReqLine.ReceivingOperatingUnit;

            purchReqControlRuleRecId = SysPolicies::getPolicyRuleID(
                                         orgArray,
                                         SysPolicyRuleType::findByRuleTypePolicyType(
                                            SysPolicyRuleTypeEnum::PurchReqControlRule,
                                            SysPolicyTypeEnum::PurchasingPolicy
                                            ).RecId,
                                         SysPolicyTypeEnum::PurchasingPolicy);

            purchReqControlRule      = PurchReqControlRule::find(purchReqControlRuleRecId);

            inventItemOrderSetupMap = InventItemOrderSetupMap::find(_purchReqLine.ItemId, _purchReqLine.getInventItemOrderSetupType(), _inventDim.InventDimId );
            using (PurchReqLineCalculateOrderQuantityContext purchReqLineCalculateOrderQuantityContext = PurchReqLineCalculateOrderQuantityContext::construct())
            {
                purchReqLineCalculateOrderQuantityContext.parmCheckZeroQuantity(!_purchReqLine.isCategoryBased());
                
                // Only display information to user if we are in the client
                if (_purchReqLine.PurchUnitOfMeasure)
                {
                    _purchReqLine.PurchQty = InventTable::calculateOrderQuantity(inventItemOrderSetupMap,
                                                                             _purchReqLine.InventDimId,
                                                                             _purchReqLine.PurchQty,
                                                                             UnitOfMeasure::find(_purchReqLine.PurchUnitOfMeasure).Symbol,
                                                                             true,
                                                                             purchReqControlRule.IsFixedMinimumOrderQuantity,
                                                                             purchReqControlRule.IsFixedMaximumOrderQuantity,
                                                                             purchReqControlRule.IsFixedMultipleOrderQuantity);
                }
            }
        }

        _purchReqLine.modifiedField(fieldNum(PurchReqLine,PurchQty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendSearchName2AccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor account that matches the search name that is passed in to the method.
    /// </summary>
    /// <param name="_vendSearchName">
    /// A string that contains the vendor search name.
    /// </param>
    /// <returns>
    /// A container that has the vendor account numbers.
    /// </returns>
    static container vendSearchName2AccountNum(VendName _vendSearchName)
    {
        VendTable           vendTable;
        DirPartyTable       partyTable;
        container           res;

        while select AccountNum,Party from vendTable
            join NameAlias from partyTable
                where partyTable.NameAlias like _vendSearchName
        {
            res += vendTable.AccountNum;
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssetRuleQualifierOptionFromQualifierString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the asset rule qualifier option and resolves the related asset group (if there is one)
    /// </summary>
    /// <param name="_qualifierString">The qualifier string to set the option based on.</param>
    /// <param name="_assetProcessedRule">The processed asset rules.</param>    
    public void setAssetRuleQualifierOptionFromQualifierString(Description _qualifierString, AssetProcessedRule _assetProcessedRule)
    {
        AssetRuleTmpAssetQualifierLookup assetRuleTmpAssetQualifierLookup = this.buildAssetRuleTmpAssetQualifierLookupFromProcessedRule(_assetProcessedRule, _qualifierString);
        this.setAssetRuleQualifierOption(assetRuleTmpAssetQualifierLookup, _assetProcessedRule.isGlobal());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssetRuleQualifierOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the asset rule qualifier option and resolves the related asset group (if there is one)
    /// </summary>
    /// <param name = "_lookup">The AssetRuleTmpAssetQualifierLookup record</param>
    /// <param name = "_isGlobalRule">A Boolean value that indicates whether the asset rule is a global rule</param>
    public void setAssetRuleQualifierOption(AssetRuleTmpAssetQualifierLookup _lookup, boolean _isGlobalRule)
    {
        this.AssetRuleQualifierOption      = 0;
        this.AssetRuleQualifierOptionLocal = 0;

        if (_isGlobalRule)
        {
            this.AssetRuleQualifierOption = _lookup.RefRecId;
            this.AssetGroup = AssetRule::getAssetGroupIdFromQualifier(this.AssetRuleQualifierOption, true, this.BuyingLegalEntity);
        }
        else
        {
            this.AssetRuleQualifierOptionLocal = _lookup.RefRecId;
            this.AssetGroup = AssetRule::getAssetGroupIdFromQualifier(this.AssetRuleQualifierOptionLocal, false, this.BuyingLegalEntity);
        }

        this.setDataAreaForModifiedField(fieldNum(PurchReqLine, AssetGroup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqLineTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>PurchReqLineTaxExtensionIN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>PurchReqLineTaxExtensionIN</c> associated with the current record.
    /// </returns>
    public PurchReqLineTaxExtensionIN purchReqLineTaxExtensionIN()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(PurchReqLineTaxExtensionIN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>packPurchReqLineTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="PurchReqLineTaxExtensionIN">
    /// The extension table record.
    /// </param>
    public void packPurchReqLineTaxExtensionIN(PurchReqLineTaxExtensionIN _purchReqLineTaxExtensionIN)
    {
        _purchReqLineTaxExtensionIN.PurchReqLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_purchReqLineTaxExtensionIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packExtensionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_extensionTable">
    /// The extension table record.
    /// </param>
    /// <returns>
    /// true if success; otherwise false.
    /// </returns>
    public boolean packExtensionTable(SysExtensionSerializerExtensionMap _extensionTable)
    {
        boolean ret = false;

        if (_extensionTable.SysExtensionSerializerExtensionMap::baseTableId() == this.TableId)
        {
            ret = this.SysExtensionSerializerMap::packExtensionTable(_extensionTable);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjCostSalesPriceFromPriceSetup</Name>
				<Source><![CDATA[
    private void setProjCostSalesPriceFromPriceSetup()
    {
        boolean		priceFound;

        if (this.ProjId && !this.ItemId)
        {
            ProjCategoryType projCategoryType = ProjCategory::find(this.ProjCategoryId).CategoryType;
            ProjPriceParameters priceParams;
            switch (projCategoryType)
            {
                case ProjCategoryType::Cost :
                    priceParams = ProjCostPriceExpense::constructPriceParametersForFindCostPrice(
                        this.ProjId,
                        0,
                        this.ProjCategoryId);
                    this.PurchPrice = ProjCostPriceExpense::findCostPriceByPriceParameters(priceParams);

                    this.LineAmount = this.calcLineAmountForced();

                    priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
                        this.ProjId,
                        0,
                        this.ProjCategoryId,
                        this.PurchPrice,
                        this.currencyCode,
                        this.ProjSalesCurrencyId);
                    [this.ProjSalesPrice, priceFound] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams);
                    break;

                case ProjCategoryType::Hour :
                    priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(
                        this.ProjId,
                        0,
                        this.ProjCategoryId,
                        this.ProjLinePropertyId);
                    this.PurchPrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams);

                    this.LineAmount = this.calcLineAmountForced();

                    priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
						this.ProjId,
                        0,
                        this.ProjCategoryId,
                        this.ProjLinePropertyId,
                        this.PurchPrice,
                        this.ProjSalesCurrencyId);
                    [this.ProjSalesPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark current tax status of <c> PurchReqLine </c> to dirty
    /// </summary>
    private void markCurrentTaxDocumentTaxStatusDirty()
    {
        TaxableDocumentDescriptor descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this);
        ITaxableDocument taxableDocument = TaxableDocumentObject::construct(descriptor);
        TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the header table.
    /// </summary>
    /// <returns>The recode for PurchReqTable.</returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        return this.purchReqTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c> PurchReqLine </c> table will update the Tax
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The <c>Transaction table</c> record, optional.
    /// </param>
    /// <returns>True if current line tax should be recalculated, otherwise false </returns>
    private boolean taxRecalculationNeeded(Common _origTransactionTable = this.orig())
    {
        PurchReqLine    purchReqLine_Orig = _origTransactionTable ? _origTransactionTable : this.orig();

        boolean         updateNeeded =
                            (
                            (this.AssetGroup            != purchReqLine_Orig.AssetGroup) ||
                            (this.CurrencyCode          != purchReqLine_Orig.CurrencyCode) ||
                            (this.DeliveryName          != purchReqLine_Orig.DeliveryName)  ||
                            (this.DeliveryPostalAddress != purchReqLine_Orig.DeliveryPostalAddress)  ||
                            (this.ExternalItemId        != purchReqLine_Orig.ExternalItemId)  ||
                            (this.InventDimId           != purchReqLine_Orig.InventDimId)  ||
                            (this.InventLocationId      != purchReqLine_Orig.InventLocationId)  ||
                            (this.ItemId                != purchReqLine_Orig.ItemId)||
                            (this.TransDate             != purchReqLine_Orig.TransDate) ||
                            (this.LineAmount            != purchReqLine_Orig.LineAmount)||
                            (this.LineComplete          != purchReqLine_Orig.LineComplete)||
                            (this.LineDisc              != purchReqLine_Orig.LineDisc)||
                            (this.LineNum               != purchReqLine_Orig.LineNum)||
                            (this.LinePercent           != purchReqLine_Orig.LinePercent)||
                            (this.LineType              != purchReqLine_Orig.LineType)||
                            (this.Name                  != purchReqLine_Orig.Name)||
                            (this.PriceUnit             != purchReqLine_Orig.PriceUnit)||
                            (this.ProjId                != purchReqLine_Orig.ProjId)||
                            (this.ProjSalesPrice        != purchReqLine_Orig.ProjSalesPrice)||
                            (this.PurchId               != purchReqLine_Orig.PurchId)||
                            (this.PurchMarkup           != purchReqLine_Orig.PurchMarkup)||
                            (this.PurchPrice            != purchReqLine_Orig.PurchPrice)||
                            (this.PurchQty              != purchReqLine_Orig.PurchQty)||
                            (this.RequiredDate          != purchReqLine_Orig.RequiredDate)||
                            (this.RequisitionStatus     != purchReqLine_Orig.RequisitionStatus)||
                            (this.TaxGroup              != purchReqLine_Orig.TaxGroup)||
                            (this.TaxItemGroup          != purchReqLine_Orig.TaxItemGroup)||
                            (this.TransDate             != purchReqLine_Orig.TransDate)||
                            (this.VendAccount           != purchReqLine_Orig.VendAccount) ||
                            !DimensionDefaultFacade::areEqual(this.DefaultDimension, purchReqLine_Orig.DefaultDimension)
                            );

        return updateNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIndirectTaxFieldChanged_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>PurchReqLine</c> table buffer on india fields should update the associated <c>SourceDocumentDistribution</c> table.
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The <c>Transaction table</c> record, optional.
    /// </param>
    /// <returns>
    /// True if the associated <c>SourceDocumentDistribution</c> records should be updated, otherwise false.
    /// </returns>
    private boolean hasIndirectTaxFieldChanged_IN(Common _origTransactionTable = this.orig())
    {
        boolean                     indirectTaxChanged = false;
        PurchReqLineTaxExtensionIN  purchReqLineTaxExtension_IN;
        PurchReqLineTaxExtensionIN  purchReqLineTaxExtension_Orig_IN;
        PurchReqLine                purchReqLine_Orig = _origTransactionTable ? _origTransactionTable : this.orig();

        if (TaxParameters::checkTaxParameters_IN())
        {
            purchReqLineTaxExtension_IN = this.purchReqLineTaxExtensionIN();
            purchReqLineTaxExtension_Orig_IN = purchReqLine_Orig.purchReqLineTaxExtensionIN();

            indirectTaxChanged = purchReqLineTaxExtension_IN.MaximumRetailPrice != purchReqLineTaxExtension_Orig_IN.MaximumRetailPrice;
        }

        return indirectTaxChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax model doc line by this purch Req line record.
    /// </summary>
    /// <returns>The <c>TaxModelDocLinePurchReqImpl</c> object </returns>
    public TaxModelDocLinePurchReqImpl initTaxModelDocLine()
    {
        TaxModelDocLinePurchReqImpl taxModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(this) as TaxModelDocLinePurchReqImpl;

        return taxModelDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxModelDocLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax model doc line by this purch Req line record for Indian.
    /// </summary>
    /// <returns>The <c>TaxModelDocLinePurchReqImpl_IN</c> object </returns>
    public TaxModelDocLinePurchReqImpl_IN initTaxModelDocLine_IN()
    {
        TaxModelDocLinePurchReqImpl_IN taxModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(this) as TaxModelDocLinePurchReqImpl_IN;

        return taxModelDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizePurchaseRequisitionLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transitions the current purchase requisition line to a closed state and finalizes the purchase requisition line.
    /// </summary>
    public void finalizePurchaseRequisitionLine()
    {
        ttsBegin;

        if (this.RecId)
        {
            // Finalize the purchase requisition line.
            this.createCancelEventAndDistributions();

            PurchReqWFStatusTransitionHelper::setPurchReqLineStatus(this.RecId, PurchReqRequisitionStatus::Closed);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBudgetReservationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the purchase requisition line from a budget reservation line.
    /// </summary>
    /// <param name="_budgetReservationLine">
    /// The <c>BudgetReservationLine_PSN</c> record buffer from which to initialize the <c>PurchReqLine</c> record buffer.
    /// </param>
    public void initFromBudgetReservationLine(BudgetReservationLine_PSN _budgetReservationLine)
    {
        if (_budgetReservationLine.RecId)
        {
            // Copying the project field values from the budget reservation line to the purchase requisition line.
            this.ProjId                 = _budgetReservationLine.ProjId;
            this.setDataAreaForModifiedField(fieldNum(PurchReqLine, ProjId));

            this.ActivityNumber         = _budgetReservationLine.ActivityNumber;
            this.setDataAreaForModifiedField(fieldNum(PurchReqLine, ActivityNumber));

            this.ProjCategoryId         = _budgetReservationLine.ProjCategoryId;
            this.setDataAreaForModifiedField(fieldNum(PurchReqLine, ProjCategoryId));

            this.ProjLinePropertyId     = _budgetReservationLine.ProjLinePropertyId;
            this.setDataAreaForModifiedField(fieldNum(PurchReqLine, ProjLinePropertyId));

            this.ProjSalesCurrencyId    = _budgetReservationLine.ProjSalesCurrencyId;
            this.ProjSalesUnitOfMeasure = UnitOfMeasure::findBySymbol(_budgetReservationLine.ProjSalesUnitId).RecId;

            this.ProjTaxGroupId         = _budgetReservationLine.ProjTaxGroupId;
            this.setDataAreaForModifiedField(fieldNum(PurchReqLine, ProjTaxGroupId));

            this.ProjTaxItemGroupId     = _budgetReservationLine.ProjTaxItemGroupId;
            this.setDataAreaForModifiedField(fieldNum(PurchReqLine, ProjTaxItemGroupId));

            if (ProjParameters::find().DefaultCostPriceAsSalesPrice == NoYes::No)
            {
                this.ProjSalesPrice = _budgetReservationLine.ProjSalesPrice;
            }
            else
            {
                if (this.ProjId)
                {
                    this.ProjSalesPrice = this.PurchPrice;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetReservationLineReferenced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the budget reservation line is referenced on the purchase requisition line or not.
    /// </summary>
    /// <returns>
    /// true if the budget reservation line is referenced; otherwise, false.
    /// </returns>
    public boolean isBudgetReservationLineReferenced()
    {
        boolean isReferenced;

        isReferenced = this.BudgetReservationLine_PSN != 0 && PublicSectorUtils::isBudgetReservationEnabled();

        return isReferenced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReferencedByBudgetReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current purchase requisition line is referenced by a budget reservation line.
    /// </summary>
    /// <returns>
    /// true if the current purchase requisition line is referenced by a budget reservation line; otherwise, false.
    /// </returns>
    public boolean isReferencedByBudgetReservation()
    {
        boolean isReferenced;

        if (this.RecId != 0)
        {
            BudgetReservationLine_PSN budgetReservationLine = BudgetReservationLine_PSN::findByPurchaseRequisitionLine(this.RecId);
            isReferenced = (budgetReservationLine.RecId != 0);
        }

        return isReferenced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewOrDifferentBudgetReservationLineSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a new or different budget reservation line selected on the purchase requisition line.
    /// </summary>
    /// <returns>
    /// true if the budget reservation line is different from the original line reference and it is referenced on the purchase requisition line; otherwise, false.
    /// </returns>
    private boolean isNewOrDifferentBudgetReservationLineSelected()
    {
        boolean isNewOrDifferentBudgetResLineSelected;

        isNewOrDifferentBudgetResLineSelected = this.orig().BudgetReservationLine_PSN != this.BudgetReservationLine_PSN
        && this.isBudgetReservationLineReferenced();

        return isNewOrDifferentBudgetResLineSelected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSelectedBudgetReservationLineValidForPurchAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the selected budget reservation line is valid based on the purchase agreement line.
    /// </summary>
    /// <param name="_budgetReservationLineRecId">
    /// The record ID of a budget reservation line.
    /// </param>
    /// <returns>
    /// true if the purchase agreement line does not exist or the purchase agreement line references no budget
    /// reservation and matches the budget reservation line; otherwise, false.
    /// </returns>
    private boolean isSelectedBudgetReservationLineValidForPurchAgreement(BudgetReservationLineRecId_PSN _budgetReservationLineRecId)
    {
        boolean isSelBudgetResLnValidForPurchAgreement;

        isSelBudgetResLnValidForPurchAgreement = !this.PurchAgreement
        || BudgetResLineAgreementLine_PSN::doesAgreementLineRefNoOrSpecificBdgtRes(_budgetReservationLineRecId, this.PurchAgreement);

        return isSelBudgetResLnValidForPurchAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetProjectFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the project field values on the current purchase requisition line.
    /// </summary>
    private void resetProjectFields()
    {
        this.ProjId                 = '';
        this.ActivityNumber         = '';
        this.ProjCategoryId         = '';
        this.ProjLinePropertyId     = '';
        this.ProjSalesCurrencyId    = '';
        this.ProjSalesUnitOfMeasure = 0;
        this.ProjSalesPrice         = 0;
        this.ProjTaxGroupId         = '';
        this.ProjTaxItemGroupId     = '';
        this.ProjTransId            = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetReservationLine_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validations on the <c>BudgetReservationLine_PSN</c> field on the <c>PurchReqLine</c> table.
    /// </summary>
    /// <returns>
    /// true if all validations pass or the budget reservation feature is disabled; otherwise, false.
    /// </returns>
    private boolean validateBudgetReservationLine_PSN()
    {
        boolean isValid = true;

        if (this.isNewOrDifferentBudgetReservationLineSelected())
        {
            BudgetReservationLine_PSN budgetReservationLine = BudgetReservationLine_PSN::find(this.BudgetReservationLine_PSN);

            isValid = BudgetReservation_PSN::validateBudgetReservationToBeRelieved(
                this.TransDate,
                budgetReservationLine.BudgetReservationHeader_PSN,
                BudgetReservationRelievingDocument_PSN::PurchaseRequisition,
                this.messageWithPurchReqLineIdentified("@Budgeting_BudgetReservationPS:PRAccountingDateNotInFiscalYearErrorWithIdentifier"),
                this.messageWithPurchReqLineIdentified("@Budgeting_BudgetReservationPS:PRAccountingDateNotWithinGBRDatesErrorWithIdentifier"));

            if (isValid && !this.isSelectedBudgetReservationLineValidForPurchAgreement(budgetReservationLine.RecId))
            {
                isValid = checkFailed(strFmt(
                    "@Budgeting_BudgetReservationPS:PRCannotReferenceSelectedGBRErrorWithIdentifier",
                    this.purchReqId(),
                    num2Str(this.LineNum, 1, 0, DecimalSeparator::Auto, ThousandSeparator::Auto)));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageWithPurchReqLineIdentified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills identifying information of the purchase requisition line into the given message.
    /// </summary>
    /// <param name = "_message">
    /// The message to be filled with the identifying information of the purchase requisition line. Message must have three wild cards, with %1 to be replaced with
    /// the purchReqId, %2 to be replaced with the LineNum, and %3 to be replaced with %1 so that it can be filled in later.
    /// </param>
    /// <returns>
    /// The message after it has been filled with the identifying information of the purchase requisition line.
    /// </returns>
    private str messageWithPurchReqLineIdentified(str _message)
    {
        return strFmt(_message, this.purchReqId(), num2Str(this.LineNum, 1, 0, DecimalSeparator::Auto, ThousandSeparator::Auto), '%1');
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPurchaseRequisitionChildLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the purchase requisition line has child lines e.g. tax, charges.
    /// </summary>
    /// <param name="_purchReqLineRefRecId">
    /// The record ID of the purchase requisition line to check.
    /// </param>
    /// <returns>
    /// true, if the purchase requisition line has child lines; otherwise, false.
    /// </returns>
    public static boolean existPurchaseRequisitionChildLines(RefRecId _purchReqLineRefRecId)
    {
        PurchReqLine        purchReqLine;
        SourceDocumentLine  childLines;

        if (_purchReqLineRefRecId != 0)
        {
            select firstonly SourceDocumentLine from purchReqLine
            where purchReqLine.RecId == _purchReqLineRefRecId
            join RecId from childLines
                where childLines.ParentSourceDocumentLine == purchReqLine.SourceDocumentLine;
        }

        return (childLines.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPurchaseRequisitionDiscountOrChargeOnPurchase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the purchase requisition line has a discount or charges on purchases.
    /// </summary>
    /// <param name="_purchReqLineRefRecId">
    /// The record ID of the purchase requisition line to check.
    /// </param>
    /// <returns>
    /// true if the purchase requisition line has a discount or charges on purchases; otherwise, false.
    /// </returns>
    public static boolean existPurchaseRequisitionDiscountOrChargeOnPurchase(RefRecId _purchReqLineRefRecId)
    {
        PurchReqLine purchReqLine;

        if (_purchReqLineRefRecId != 0)
        {
            select firstonly RecId from purchReqLine
            where purchReqLine.RecId == _purchReqLineRefRecId
                && (purchReqLine.LinePercent != 0
                    || purchReqLine.LineDisc != 0
                    || purchReqLine.PurchMarkup != 0);
        }

        return (purchReqLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchaseRequisitionStatusToReferencedByBudgetReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all purchase requisition lines that are associated with the specified budget reservation header to have a status of budget reserved.
    /// </summary>
    /// <param name="_budgetReservationHeaderRecId">
    /// The budget reservation header to update purchase requisition line statuses for.
    /// </param>
    public static void updatePurchaseRequisitionStatusToReferencedByBudgetReservation(BudgetReservationRecId_PSN _budgetReservationHeaderRecId)
    {
        PurchReqLine                purchReqLine;
        BudgetReservationLine_PSN   budgetReservationLine;

        purchReqLine.skipDataMethods(true);

        update_recordSet purchReqLine
    setting
        RequisitionStatus = PurchReqRequisitionStatus::ReferencedByBudgetReservation_PSN
    exists join budgetReservationLine
        where budgetReservationLine.BudgetReservationHeader_PSN == _budgetReservationHeaderRecId
            && purchReqLine.RecId == budgetReservationLine.PurchReqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAnyClosedLineByHeaderRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds any purchase requisition line which is closed for the specific purchase requisition.
    /// </summary>
    /// <param name = "_purchReqTableRecId">
    /// The specific purchase requisition record ID.
    /// </param>
    /// <returns>
    /// Returns any closed purchase requisition line with record ID and requisition purpose values for the specific purchase requisition
    /// when its requisition status is Closed or is referenced by budget reservation.
    /// </returns>
    public static PurchReqLine findAnyClosedLineByHeaderRecId(RefRecId _purchReqTableRecId)
    {
        PurchReqLine purchReqLineClosed;
        
        select firstonly RecId, RequisitionPurpose from purchReqLineClosed
            where purchReqLineClosed.PurchReqTable == _purchReqTableRecId
                && (purchReqLineClosed.RequisitionStatus == PurchReqRequisitionStatus::Closed
                     || (PublicSectorUtils::isBudgetReservationEnabled()
                        && purchReqLineClosed.RequisitionStatus == PurchReqRequisitionStatus::ReferencedByBudgetReservation_PSN));

        return purchReqLineClosed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesPurchLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchLineInterface</c> object.
    /// </returns>
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return this.SalesPurchLine::salesPurchLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>PurchReqLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>PurchReqLineInterface</c> object.
    /// </returns>
    public PurchReqLineInterface purchReqLineInterface()
    {
        return this.PurchReqLineMap::purchReqLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCurrencyFromTradeAgreement</Name>
				<Source><![CDATA[
    private void initCurrencyFromTradeAgreement()
    {
        if (this.PurchAgreement == 0)
        {
            PriceDiscTable priceDiscTable = PriceDiscTable::findPurchPriceDiscTable(
                                                                this.ItemId,
                                                                this.InventDimId,
                                                                this.PurchQty,
                                                                this.RequiredDate,
                                                                ReqSearchTradeMethod::LowestPcsPrice,
                                                                UnitOfMeasure::find(this.PurchUnitOfMeasure).Symbol);

            if (priceDiscTable)
            {
                VendTable vendTable = VendTable::find(priceDiscTable.AccountRelation);
                if (vendTable && vendTable.AccountNum == this.VendAccount)
                {
                    this.CurrencyCode = priceDiscTable.Currency;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private static PurchReqInstrumentationLogger instrumentationLogger()
    {
        return PurchReqInstrumentationLogger::createLogger(tableStr(PurchReqLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjCategory</Name>
				<Source><![CDATA[
    private void setProjCategory(ProjInventJournalTransMapForm projInventJournalTransMapForm)
    {
        if(this.ProjId && !this.ProjCategoryId)
        {
            InventTable inventTable = this.inventTable();
            this.ProjCategoryId = inventTable ? inventTable.projCategoryId
                                                :this.ProjCategoryId;
            if(!this.ProjCategoryId && ProjCategorySetupOnPurchReqImportFlight::instance().isEnabled())
            {
                projInventJournalTransMapForm.initFromEcoResCategory(this.procurementCategory());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>impliedDataAreaFieldNameDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DimensionObjectStorageTableReferenceProcessor), delegatestr(DimensionObjectStorageTableReferenceProcessor, impliedDataAreaFieldNameDelegate))]
    static void impliedDataAreaFieldNameDelegate(TableId _tableId, FieldId _fieldId, EventHandlerResult _result)
    {
        if (_tableId == tableNum(PurchReqLine))
        {
            _result.result(fieldStr(PurchReqLine, VendAccountDataArea));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryEntityRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the delivery entity record based on the postal address.
    /// </summary>
    /// <returns>
    ///    A <c>CompanyInfo</c>, <c>InventLocation</c> or <c>InventSite</c> record.
    /// </returns>
    private Common getDeliveryEntityRecord()
    {
        return this.TradePostalAddress::getDeliveryEntityRecord();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchReq</ConfigurationKey>
	<DeveloperDocumentation>@SYS124557</DeveloperDocumentation>
	<FormRef>PurchReqTable</FormRef>
	<Label>@SYS109460</Label>
	<SingularLabel>@SYS109460</SingularLabel>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>PurchReqTable</TitleField1>
	<TitleField2>SequenceNumber</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>LineIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>PositionIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PurchReqBusJustification</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PurchReqBusJustification</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PurchReqConsolidationLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PurchReqConsolidationLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PurchReqLineKMCollection</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PurchReqLineKMCollection</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PurchReqLineQuestionnaireResponse</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PurchReqLineQuestionnaireResponse</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PurchReqLineVendorProposal</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PurchReqLineVendorProposal</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PurchReqLineVendorSuggestion</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PurchReqLineVendorSuggestion</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsModified</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequiredDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BusinessJustification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchReqTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchUnitOfMeasure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchReqTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountingDistributionTemplate</Name>
			<Label>@SYS300391</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressDisplay</Name>
			<Label>@SYS9362</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressLookup</Name>
			<Label>@SYS88672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>purchReqId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>purchReqName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressReference</Name>
			<Label>@SYS88679</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AddressRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressRefTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS20515</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>forInventory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequiredDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineComplete</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BuyingLegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceivingOperatingUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administrator</Name>
			<Label>@SYS40777</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Requisitioner</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BuyingLegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceivingOperatingUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequisitionStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Aggregation</Name>
			<Label>@SYS131462</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchReqConsolidationStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendQuoteNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AllVar</Name>
			<Label>@MCR36253</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS6928</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetGroup</Name>
			<Label>@SYS127400</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetRuleQualifierOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetRuleQualifierOptionLocal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Attention</Name>
			<Label>@SYS1593</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attention</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BusinessJustification</Name>
			<Label>@SYS107376</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusinessJustification</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CurrencyCode</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dates</Name>
			<Label>@SYS134383</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequiredDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryAddress</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryPostalAddress</Name>
			<Label>@SYS323263</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryRef</Name>
			<Label>@SYS78577</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineRefId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@SYS11829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInformation_BR</Name>
			<Label>@GLS56</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CFOPTable_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CFPSTable_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxServiceCode_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayTaxationOrigin_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayTaxFiscalClassification_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPurchOperationType_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InternalInformation</Name>
			<Label>@SYS112221</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>forInventory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequiredDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineComplete</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>URL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS135014</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>URL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemDetails</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>URL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchSupplierAuxId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MarkUP</Name>
			<Label>@SYS23451</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchMarkup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NonCatalogItem</Name>
			<Label>@SYS112498</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemIdNonCatalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>nonCatalogItemDetails</Name>
			<Label>@SYS135071</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchUnitOfMeasure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>URL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Organization</Name>
			<Label>@SYS334011</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RFQRequirement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPurchaseOrderGenerationManual</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrePaymentDetails</Name>
			<Label>@SYS304900</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsPrepayment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrePaymentDetails</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchUnitOfMeasure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PriceDiscountTransfer</Name>
			<Label>@SYS4004675</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceDiscountTransfer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProcurementCategory</Name>
			<Label>@SYS332830</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>procurementCategoryCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>procurementCategoryFriendlyName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectCostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectIdentification</Name>
			<Label>@SYS89920</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjSalesCurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesUnitOfMeasure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectTransaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseAgreement</Name>
			<Label>@SYS304901</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchAgreement</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseQuantity</Name>
			<Label>@SYS11187</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchUnitOfMeasure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseReqLines</Name>
			<Label>@SYS109460</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>URL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchRFQCaseId</Name>
			<Label>@SYS130401</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchRFQCaseId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>rfqCaseId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayConsolidationOpportunityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>vendInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editPurchAgreementId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReferenceStatus</Name>
			<Label>@SYS136833</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>purchRFQStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayConsolidationStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>purchLineStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>vendInvoiceStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displaypurchAgreementHeaderstatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RequiredDate</Name>
			<Label>@SYS108789</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequiredDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Requisitioner</Name>
			<Label>@SYS108788</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Requisitioner</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RequisitionPurpose</Name>
			<Label>@GLS160310</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequisitionPurpose</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RFQType</Name>
			<Label>@SYS304891</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SequenceNumber</Name>
			<Label>@SYS134384</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SequenceNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ShipTo</Name>
			<Label>@SYS50712</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>shipToOption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SourceDocumentLine</Name>
			<Label>@SYS132694</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequisitionStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsModified</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TableGroup</Name>
			<Label>@SYS21958</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UnitPrice</Name>
			<Label>@SYS23884</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>URL</Name>
			<Label>@SYS37016</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>URL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Vendor</Name>
			<Label>@SYS71494</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>vendName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>vendStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFQRequirement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCalendarId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowPreview</Name>
			<Label>@SYS116253</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>purchReqId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Requisitioner</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BuyingLegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceivingOperatingUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequisitionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>requiredAction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>requiredActionDueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetReservation_PSN</Name>
			<Label>@Budgeting_BudgetReservationPS:GeneralBudgetReservation</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetReservationLine_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountingDistributionTemplateRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumberDataArea</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AddressRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AddressRefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressRefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS136007</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetGroupDataArea</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetRuleQualifierOption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SCM:AssetRuleQualifierOption</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetRuleQualifierOptionLocal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SCM:AssetRuleQualifierOptionLocal</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetRuleQualifierOptionName</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>AssetRuleQualifierOptionName</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Attention</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqAttention</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BusinessJustification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BusinessJustificationRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BuyingLegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS304469</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CFOPTable_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<CountryRegionContextField>BuyingLegalEntity</CountryRegionContextField>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS200</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CFPSTable_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<CountryRegionContextField>BuyingLegalEntity</CountryRegionContextField>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS60379</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqDefaultDimensionValueSet</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExternalItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimIdDataArea</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationIdDataArea</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsModified</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VersioningIsModified</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPreEncumbranceRequired</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>UnknownNoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPrepayment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS304899</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPurchaseOrderGenerationManual</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS330312</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSaved</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdSmall</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemIdDataArea</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemIdNonCatalog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqItemIdNonCatalog</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineAmount</ExtendedDataType>
			<RelationContext>CurrencyCode</RelationContext>
			<CurrencyCode>CurrencyCodeField</CurrencyCode>
			<CurrencyCodeField>CurrencyCode</CurrencyCodeField>
			<CurrencyCodeTable>Currency</CurrencyCodeTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineComplete</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineComplete</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineDisc</ExtendedDataType>
			<RelationContext>CurrencyCode</RelationContext>
			<CurrencyCode>CurrencyCodeField</CurrencyCode>
			<CurrencyCodeField>CurrencyCode</CurrencyCodeField>
			<CurrencyCodeTable>Currency</CurrencyCodeTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LinePercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLinePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>LineRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqLineRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchReqLineType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemFreeTxt</ExtendedDataType>
			<Label>@SYS58702</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrePaymentDetails</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqLinePrePaymentDetails</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PriceDiscountTransfer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchReqPriceDiscountTransfer</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProcurementCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS333196</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryIdDataArea</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjIdDataArea</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjLinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjLinePropertyIdDataArea</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesCurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS56480</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjSalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceCost</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
			<CurrencyCode>CurrencyCodeField</CurrencyCode>
			<CurrencyCodeField>CurrencyCode</CurrencyCodeField>
			<CurrencyCodeTable>Currency</CurrencyCodeTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjSalesUnitOfMeasure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SCM:SalesUnit</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SCM:ProjectSalesTaxGroup</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxGroupIdDataArea</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SCM:ProjectItemSalesTaxGroup</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxItemGroupIdDataArea</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjItemTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransIdDataArea</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchAgreement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS304901</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchIdDataArea</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchLineCreated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqPurchLineCreated</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchMarkup</ExtendedDataType>
			<RelationContext>CurrencyCode</RelationContext>
			<CurrencyCode>CurrencyCodeField</CurrencyCode>
			<CurrencyCodeField>CurrencyCode</CurrencyCodeField>
			<CurrencyCodeTable>Currency</CurrencyCodeTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqPrice</ExtendedDataType>
			<RelationContext>CurrencyCode</RelationContext>
			<CurrencyCode>CurrencyCodeField</CurrencyCode>
			<CurrencyCodeField>CurrencyCode</CurrencyCodeField>
			<CurrencyCodeTable>Currency</CurrencyCodeTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchReqConsolidationStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchReqConsolidationStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchReqTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SCM:PurchaseRequisitionReference</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchRFQCaseId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQCaseId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchRFQCaseIdDataArea</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchUnitOfMeasure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonRefRecId</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReasonRefRecID</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReceivingOperatingUnit</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS304468</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RequiredDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqRequiredDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Requisitioner</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqRequesterRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RequisitionPurpose</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RequisitionPurpose</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RequisitionStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchReqRequisitionStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RFQRequirement</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqRFQRequirementType</ExtendedDataType>
			<EnumType>PurchReqRFQRequirement</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesPurchOperationType_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPurchOperationTypeRecId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SequenceNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SequenceNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS132694</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupDataArea</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupDataArea</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxServiceCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxServiceCodeId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqAccountingDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>URL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>URL</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccountDataArea</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendQuoteNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendQuoteNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPriceDiscCalculated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqIsPriceDiscCalculated</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetReservationLine_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetReservationLineRecId_PSN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CompanyLocation_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExciseRecordType_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>ExciseRecordType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExciseTariffCodes_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExciseType_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>ExciseType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Exempt_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HSNCodeTable_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ITCCategory_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>ITCCategory_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NonBusinessUsagePercentage_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>Percent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesTaxFormTypes_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>SalesTaxFormTypesRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ServiceAccountingCodeTable_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ServiceCodeTable_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ServiceCategory_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>ServiceCategory_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GTAServiceCategory_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>GTAServiceCategory_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATGoodsType_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>VATGoodsType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NonRecoverablePercent_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>Percent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendorLocation_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendorTaxInformation_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DSA_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsTariffCodeTable_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumRetailPrice_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>MaximumRetailPrice_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchSupplierAuxId</Name>
			<ExtendedDataType>PurchSupplierAuxId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipCalendarId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchVendorShipCalendarId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchReqTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PositionIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchReqTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SequenceNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LineRefIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>LineRefId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LineStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchLineCreated</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RequisitionStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CFOPTable_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CFOPTable_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CFPSTable_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CFPSTable_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PlanningIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>Req</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BuyingLegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RequisitionPurpose</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RequisitionStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RequiredDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PlanningReqIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>BuyingLegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RequisitionPurpose</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RequisitionStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RequiredDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>ProjInventJournalTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
					<MapFieldTo>ActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BudgetReservationLine_PSN</MapField>
					<MapFieldTo>BudgetReservationLine_PSN</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EcoResCategory</MapField>
					<MapFieldTo>ProcurementCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>ProjCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostMarkup</MapField>
					<MapFieldTo>PurchMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostPrice</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjLinePropertyId</MapField>
					<MapFieldTo>ProjLinePropertyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjPriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesCurrencyId</MapField>
					<MapFieldTo>ProjSalesCurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesPrice</MapField>
					<MapFieldTo>ProjSalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesUnitId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxGroupId</MapField>
					<MapFieldTo>ProjTaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxItemGroupId</MapField>
					<MapFieldTo>ProjTaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTransId</MapField>
					<MapFieldTo>ProjTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>RequiredDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
					<MapFieldTo>ProjSalesUnitOfMeasure</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PurchReqLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Attention</MapField>
					<MapFieldTo>Attention</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CFPSTable_BR</MapField>
					<MapFieldTo>CFPSTable_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Requisitioner</MapField>
					<MapFieldTo>Requisitioner</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustVendAC</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrderLine2PriceHistoryRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCalculationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchSalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequiredDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariantId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TradePostalAddress</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>ProcurementCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverrideSalesTax</MapField>
					<MapFieldTo>OverrideSalesTax</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AccountingDistributionTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ActivityNumber</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmActivities</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmActivities_ActivityNumber</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjIdDataArea</Name>
					<Field>ProjIdDataArea</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetGroup_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetGroupDataArea</Name>
					<Field>AssetGroupDataArea</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetGroup</Name>
					<Field>AssetGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetRuleQualifierOption</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetRuleQualifierOption</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetRuleQualifierOption</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetRuleQualifierOption_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetRuleQualifierOption</Name>
					<Field>AssetRuleQualifierOption</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetRuleQualifierOptionLocal</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetRuleQualifierOptionLocal</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetRuleQualifierOptionLocal</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetRuleQualifierOptionLocal_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetRuleQualifierOptionLocal</Name>
					<Field>AssetRuleQualifierOptionLocal</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CFOPTable_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CFOPTable_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CFOPTable_BR</Name>
					<Field>CFOPTable_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CFPSTable_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CFPSTable_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CFPSTable_BR</Name>
					<Field>CFPSTable_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Common</Name>
			<RelatedTable>Common</RelatedTable>
			<RelatedTableRole>Common</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>Common_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefTableId</Name>
					<Field>AddressRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefRecId</Name>
					<Field>AddressRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CompanyInfo_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BuyingLegalEntity</Name>
					<Field>BuyingLegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjSalesCurrencyId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CurrencyCode</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesCurrencyId</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>ProjSalesCurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CurrencyCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Currency_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategory_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcurementCategory</Name>
					<Field>ProcurementCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventDim_1_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimIdDataArea</Name>
					<Field>InventDimIdDataArea</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationIdDataArea</Name>
					<Field>InventLocationIdDataArea</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable_1_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemIdDataArea</Name>
					<Field>ItemIdDataArea</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OMOperatingUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>OMOperatingUnit</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OMOperatingUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>OMOperatingUnit_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReceivingOperatingUnit</Name>
					<Field>ReceivingOperatingUnit</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjCategory_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryIdDataArea</Name>
					<Field>ProjCategoryIdDataArea</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjItemTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjItemTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjItemTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjItemTrans_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransIdDataArea</Name>
					<Field>ProjTransIdDataArea</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<Field>ProjTransId</Field>
					<RelatedField>ProjTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjLineProperty</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjLineProperty_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLinePropertyIdDataArea</Name>
					<Field>ProjLinePropertyIdDataArea</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLinePropertyId</Name>
					<Field>ProjLinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjSalesUnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure_2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesUnitOfMeasure</Name>
					<Field>ProjSalesUnitOfMeasure</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjTable_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjIdDataArea</Name>
					<Field>ProjIdDataArea</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxGroupHeading_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxGroupIdDataArea</Name>
					<Field>ProjTaxGroupIdDataArea</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxGroupId</Name>
					<Field>ProjTaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxItemGroupHeading_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxItemGroupIdDataArea</Name>
					<Field>ProjTaxItemGroupIdDataArea</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxItemGroupId</Name>
					<Field>ProjTaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchaseAgreement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AgreementLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AgreementLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchAgreementLine_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchAgreement</Name>
					<Field>PurchAgreement</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchReqBusinessJustificationCodes</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PurchReqBusinessJustificationCodes</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchReqBusinessJustificationCodes</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchReqBusinessJustificationCodes_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BusinessJustification</Name>
					<Field>BusinessJustification</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchReqTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchReqTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PurchReqTable_1</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>PurchReqTable_1_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchReqTable</Name>
					<Field>PurchReqTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchRFQCaseTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchRFQCaseTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchRFQCaseTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQCaseTable_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchRFQCaseIdDataArea</Name>
					<Field>PurchRFQCaseIdDataArea</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchRFQCaseId</Name>
					<Field>PurchRFQCaseId</Field>
					<RelatedField>RFQCaseId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RFQCaseIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTable_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchTable_1_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchIdDataArea</Name>
					<Field>PurchIdDataArea</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchUnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchUnitOfMeasure</Name>
					<Field>PurchUnitOfMeasure</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReasonTableRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ReasonTableRef_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonRefRecId</Name>
					<Field>ReasonRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Requisitioner</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Requisitioner</Name>
					<Field>Requisitioner</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesPurchOperationType_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesPurchOperationType_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesPurchOperationType_BR</Name>
					<Field>SalesPurchOperationType_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjActivity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjActivity_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumberDataArea</Name>
					<Field>ActivityNumberDataArea</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SourceDocumentLine_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxGroupHeading_1_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupDataArea</Name>
					<Field>TaxGroupDataArea</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeading_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxItemGroupHeading_1_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupDataArea</Name>
					<Field>TaxItemGroupDataArea</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxServiceCode_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxServiceCode_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchReqLine_TaxServiceCode_BR</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchReqLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxServiceCode_BR</Name>
					<Field>TaxServiceCode_BR</Field>
					<RelatedField>ServiceCodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable_PurchReqLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccountDataArea</Name>
					<Field>VendAccountDataArea</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsPostalAddressBaseEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddressBaseEntity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>AddressRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetReservationLine_PSN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetReservationLine_PSN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetReservationLine_PSN</Name>
					<Field>BudgetReservationLine_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>