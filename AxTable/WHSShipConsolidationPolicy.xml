<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConsolidationPolicy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSShipConsolidationPolicy extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>anyPolicyExists</Name>
				<Source><![CDATA[
    internal static boolean anyPolicyExists()
    {
        WHSShipConsolidationPolicy shipConsolidationPolicy;

        select firstonly RecId from shipConsolidationPolicy;
   
        return shipConsolidationPolicy.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPolicyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Work Transactions type and Shipment consolidation sequence number fields.
    /// </summary>
    /// <param name="_policyType">
    /// A shipment consolidation policy type of the Shipment consolidation policy record.
    /// </param>
    internal void initFromPolicyType(WHSShipConsolidationPolicyType _policyType)
    {
        WHSShipConsolidationPolicy shipConsolidationPolicy;

        this.ShipConsolidationPolicyType = _policyType;

        select firstonly ShipConsolidationPolicySeqNum from shipConsolidationPolicy
            order by ShipConsolidationPolicySeqNum desc
            where shipConsolidationPolicy.ShipConsolidationPolicyType == this.ShipConsolidationPolicyType;

        this.ShipConsolidationPolicySeqNum = shipConsolidationPolicy.ShipConsolidationPolicySeqNum + 1;

        this.initCriteriaQueryFromPolicyType(_policyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCriteriaQueryFromPolicyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes shipment consolidation policy query from work transaction type.
    /// </summary>
    /// <param name="_policyType">
    /// Shipment consolidation policy type that the query will be based on.
    /// </param>
    internal void initCriteriaQueryFromPolicyType(WHSShipConsolidationPolicyType _policyType)
    {
        QueryRun queryRun = new QueryRun(WHSShipConsolidationPolicyProvider::buildCriteriaQueryFromPolicyType(_policyType));

        this.ShipConsolidationPolicyQuery = queryRun.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePolicyFields</Name>
				<Source><![CDATA[
    private boolean validatePolicyFields(boolean _showInfo = false)
    {
        boolean ret = true;

        WHSShipConsolidationPolicyField shipConsolidationPolicyField;
        Set existingPolicyFields = new Set(Types::Container);

        while select shipConsolidationPolicyField
            order by shipConsolidationPolicyField.SourceTableName, shipConsolidationPolicyField.SourceFieldName
            where shipConsolidationPolicyField.ShipConsolidationPolicyName == this.ShipConsolidationPolicyName
            &&    shipConsolidationPolicyField.ShipConsolidationPolicyType == this.ShipConsolidationPolicyType
        {
            ret = shipConsolidationPolicyField.validatePolicyField(_showInfo) && ret;;

            existingPolicyFields.add([tableName2Id(shipConsolidationPolicyField.SourceTableName), fieldName2Id(tableName2Id(shipConsolidationPolicyField.SourceTableName), shipConsolidationPolicyField.SourceFieldName)]);
        }

        if (!existingPolicyFields.empty())
        {
            WHSShipConsolidationPolicyTypeProvider policyTypeProvider = WHSShipConsolidationPolicyTypeProvider::singletonFromType(this.ShipConsolidationPolicyType);
            Set mandatoryPolicyFields = policyTypeProvider.mandatoryShipConsolidationPolicyFields(this);
            Set forbiddenPolicyFields = policyTypeProvider.forbiddenShipConsolidationPolicyFields(this);
            TableId tableId;
            FieldId fieldId;

            if (!forbiddenPolicyFields.empty())
            {
                forbiddenPolicyFields = Set::intersection(existingPolicyFields, forbiddenPolicyFields);
            
                if (!forbiddenPolicyFields.empty())
                {
                    SetEnumerator policyFieldEnumerator = forbiddenPolicyFields.getEnumerator();

                    while (policyFieldEnumerator.moveNext())
                    {
                        [tableId, fieldId] = policyFieldEnumerator.current();

                        ret = checkFailed(strFmt("@WAX:ShipmentConsolidationPolicyFieldIsForbidden", fieldId2PName(tableId, fieldId), fieldId2Name(tableId, fieldId), tableId2PName(tableId), tableId2Name(tableId)));
                    }
                }
            }

            if (!mandatoryPolicyFields.empty())
            {
                mandatoryPolicyFields = Set::difference(Set::intersection(existingPolicyFields, mandatoryPolicyFields), mandatoryPolicyFields);
            
                if (!mandatoryPolicyFields.empty())
                {
                    SetEnumerator policyFieldEnumerator = mandatoryPolicyFields.getEnumerator();

                    while (policyFieldEnumerator.moveNext())
                    {
                        [tableId, fieldId] = policyFieldEnumerator.current();

                        ret = checkFailed(strFmt("@WAX:ShipmentConsolidationPolicyFieldIsMandatory", fieldId2PName(tableId, fieldId), fieldId2Name(tableId, fieldId), tableId2PName(tableId), tableId2Name(tableId)));
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the policy record.
    /// </summary>
    /// <param name="_showInfo">
    /// Boolean indicating that errors are shown in case of failure.
    /// </param>
    /// <returns>
    /// True if the the record is validated, false otherwise.
    /// </returns>
    internal boolean validatePolicy(boolean _showInfo = false)
    {
        boolean                 ret = true;

        if (ret)
        {
            ret = this.validatePolicyFields(_showInfo);
        }

        this.Valid = ret ? WHSShipConsolidationPolicyValidationStatus::Valid : WHSShipConsolidationPolicyValidationStatus::Invalid;

        if (_showInfo && ret)
        {
            info(strFmt("@WAX:ShipmentConsolidationPolicyIsInvalid", this.ShipConsolidationPolicyName));
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        WHSShipConsolidationPolicy  shipConsolidationPolicy;
        boolean                     ret = super();

        select firstonly TableId from shipConsolidationPolicy
            where shipConsolidationPolicy.ShipConsolidationPolicyType   == this.ShipConsolidationPolicyType
            &&    shipConsolidationPolicy.ShipConsolidationPolicySeqNum == this.ShipConsolidationPolicySeqNum
            &&    shipConsolidationPolicy.RecId                         != this.RecId;

        if (shipConsolidationPolicy)
        {
            ret = checkFailed("@WAX1350");
        }                              

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyShipConsolidationPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies shipment consolidation policy info for a new shipment consolidation policy code.
    /// </summary>
    /// <param name="_policyType">
    /// Shipment consolidation policy type of the shipment consolidation policy to be copied.
    /// </param>
    /// <param name="_shipConsolidationPolicyName">
    /// Code of the shipment consolidation policy to be copied.
    /// </param>
    /// <param name="_copyShipConsolidationPolicyName">
    /// Code of the copied shipment consolidation policy.
    /// </param>
    /// <returns>
    /// The record that is copied.
    /// </returns>
    internal static WHSShipConsolidationPolicy copyShipConsolidationPolicy(
        WHSShipConsolidationPolicyType          _policyType,
        WHSShipConsolidationPolicyName          _shipConsolidationPolicyName,
        WHSShipConsolidationPolicyName          _copyShipConsolidationPolicyName)
    {
        ttsbegin;

        // Copy the header
        WHSShipConsolidationPolicy shipConsolidationPolicy = WHSShipConsolidationPolicy::find(_shipConsolidationPolicyName, _policyType);
        WHSShipConsolidationPolicy copyShipConsolidationPolicy;

        buf2Buf(shipConsolidationPolicy, copyShipConsolidationPolicy);

        copyShipConsolidationPolicy.ShipConsolidationPolicyName   = _copyShipConsolidationPolicyName;
        copyShipConsolidationPolicy.ShipConsolidationPolicySeqNum = WHSShipConsolidationPolicy::getMaxSeqNum(_policyType) + 1;

        if (!copyShipConsolidationPolicy.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSShipConsolidationPolicy)));
        }
        else
        {
            copyShipConsolidationPolicy.insert();

            // Copy the fields
            WHSShipConsolidationPolicyField shipConsolidationPolicyField;
            WHSShipConsolidationPolicyField copyShipConsolidationPolicyField;
            RecordInsertList                copyShipConsolidationPolicyFieldInsertList = new RecordInsertList(copyShipConsolidationPolicyField.TableId);

            while select shipConsolidationPolicyField
                where shipConsolidationPolicyField.ShipConsolidationPolicyName == shipConsolidationPolicy.ShipConsolidationPolicyName
                &&    shipConsolidationPolicyField.ShipConsolidationPolicyType == shipConsolidationPolicy.ShipConsolidationPolicyType
            {
                copyShipConsolidationPolicyField.clear();

                buf2Buf(shipConsolidationPolicyField, copyShipConsolidationPolicyField);

                copyShipConsolidationPolicyField.ShipConsolidationPolicyName   = _copyShipConsolidationPolicyName;
                copyShipConsolidationPolicyFieldInsertList.add(copyShipConsolidationPolicyField);
            }

            copyShipConsolidationPolicyFieldInsertList.insertDatabase();

            copyShipConsolidationPolicy.validatePolicy();
            copyShipConsolidationPolicy.update();
        }

        ttscommit;

        return copyShipConsolidationPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
    /// Checks if a specific <c>WHSShipConsolidationPolicy</c> record exists.
	/// </summary>
    /// <param name="_shipConsolidationPolicyName">
    /// Shipment consolidation policy code of the record.
	/// </param>
    /// <param name="_policyType">A shipment consolidation policy type.</param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    internal static boolean exist(WHSShipConsolidationPolicyName _shipConsolidationPolicyName, WHSShipConsolidationPolicyType _policyType)
    {
        return _shipConsolidationPolicyName &&
               (select firstonly RecId from whsShipConsolidationPolicy
                where whsShipConsolidationPolicy.ShipConsolidationPolicyName == _shipConsolidationPolicyName
                &&    whsShipConsolidationPolicy.ShipConsolidationPolicyType == _policyType).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>WHSShipConsolidationPolicy</c> record exists.
    /// </summary>
    /// <param name="_shipConsolidationPolicyRecId">
    /// Shipment consolidation policy code of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    internal static boolean existRecId(WHSShipConsolidationPolicyRecId _shipConsolidationPolicyRecId)
    {
        return _shipConsolidationPolicyRecId &&
               (select firstonly RecId from whsShipConsolidationPolicy
                where whsShipConsolidationPolicy.RecId == _shipConsolidationPolicyRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
    /// Finds a specific <c>WHSShipConsolidationPolicy</c> record with given parameters.
	/// </summary>
    /// <param name="_shipConsolidationPolicyName">
    /// Shipment consolidation policy code of the record.
    /// </param>
    /// <param name="_policyType">A shipment consolidation policy type.</param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    internal static WHSShipConsolidationPolicy find(
        WHSShipConsolidationPolicyName          _shipConsolidationPolicyName,
        WHSShipConsolidationPolicyType          _policyType,
        boolean                                 _forupdate			= false)
    {
        WHSShipConsolidationPolicy shipConsolidationPolicy;

        if (_shipConsolidationPolicyName)
        {
            shipConsolidationPolicy.selectForUpdate(_forupdate);

            select firstonly shipConsolidationPolicy
                where shipConsolidationPolicy.ShipConsolidationPolicyName == _shipConsolidationPolicyName
                &&    shipConsolidationPolicy.ShipConsolidationPolicyType == _policyType;
        }

        return shipConsolidationPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the WHSShipConsolidationPolicy table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the shipment consolidation policy table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// Does not vary.
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the WHSShipConsolidationPolicy table; otherwise, an empty record.
    /// </returns>
    internal static WHSShipConsolidationPolicy findByRecId(RecId _recId, boolean _forUpdate = false)
    {
        WHSShipConsolidationPolicy shipConsolidationPolicy;

        if (_recId)
        {
            shipConsolidationPolicy.selectForUpdate(_forUpdate);

            select firstonly shipConsolidationPolicy
                where shipConsolidationPolicy.RecId == _recId;
        }

        return shipConsolidationPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxSeqNum</Name>
				<Source><![CDATA[
	/// <summary>
    /// Finds the highest shipment consolidation policy priority among the policies with the same transaction type.
	/// </summary>
    /// <param name="_policyType">A shipment consolidation policy type.</param>
	/// <returns>
    /// The highest shipment consolidation policy priority among the templates with the same transaction type.
	/// </returns>
    internal static WHSShipConsolidationPolicySeqNum getMaxSeqNum(WHSShipConsolidationPolicyType _policyType)
    {
        WHSShipConsolidationPolicy shipConsolidationPolicy;

        select firstonly ShipConsolidationPolicySeqNum from shipConsolidationPolicy
            order by ShipConsolidationPolicySeqNum desc
            where shipConsolidationPolicy.ShipConsolidationPolicyType == _policyType;

        return shipConsolidationPolicy.ShipConsolidationPolicySeqNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.validatePolicy(false);

        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.validatePolicy(false);

        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarehouseReleasePolicyLockName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static str getWarehouseReleasePolicyLockName(WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        return strFmt('%1#%2#%3#%4', 
                        funcName(), 
                        curExt(), 
                        enum2Symbol(enumNum(WHSShipConsolidationPolicyType), _shipConsolidationPolicy.ShipConsolidationPolicyType), 
                        _shipConsolidationPolicy.ShipConsolidationPolicyName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:Table_WHSShipmentConsolidationPolicy_DeveloperDocumentation</DeveloperDocumentation>
	<FormRef>WHSShipConsolidationPolicy</FormRef>
	<Label>@WAX:ShipmentConsolidationPolicies</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ShipConsolidationPolicySeqNum</TitleField1>
	<TitleField2>ShipConsolidationPolicyName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>WorkTransTypePolicyName</PrimaryIndex>
	<ReplacementKey>WorkTransTypePolicyName</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicySeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsolidateWithExistingShipments</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicySeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsolidateWithExistingShipments</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@WAX1461</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicySeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyDesc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@WAX3670</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicySeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ShipConsolidationPolicyName</Name>
			<Label>@WAX:ConsolidationPolicy</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicyName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipConsolidationPolicyName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShipConsolidationPolicyName</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@WAX:PolicyName</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShipConsolidationPolicyType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSShipConsolidationPolicyType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ShipConsolidationPolicySeqNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShipConsolidationPolicySeqNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ShipConsolidationPolicyQuery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShipConsolidationPolicyQuery</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipConsolidationPolicyDesc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShipConsolidationPolicyDesc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Valid</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSShipConsolidationPolicyValidationStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConsolidateWithExistingShipments</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@WAX:ConsolidateWithOpenShipments</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkTransTypePolicySeqNum</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ShipConsolidationPolicyType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ShipConsolidationPolicySeqNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Valid</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkTransTypePolicyName</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ShipConsolidationPolicyType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ShipConsolidationPolicyName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>