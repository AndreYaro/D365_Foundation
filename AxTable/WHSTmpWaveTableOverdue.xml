<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTmpWaveTableOverdue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSTmpWaveTableOverdue extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateToProcessWavesOverdue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts one record in the <c>WHSTmpWaveTableOverdue</c> table for each wave which will be delayed due to not having been processed yet.
    /// </summary>
    /// <returns>
    /// The temporary <c>WHSTmpWaveTableOverdue</c> buffer created.
    /// </returns>
    /// <remarks>
    /// Populates the data for all WHS enabled warehouses for which there is non-zero capacity setup for outbound work execution.
    /// </remarks>
    public static WHSTmpWaveTableOverdue populateToProcessWavesOverdue()
    {
        WHSWaveTable                    waveTable;
        WHSOutboundWorkloadCapacity     warehouseCapacity;
        WHSWaveLine                     waveLine;
        WHSTmpWaveTableOverdue          tmpWaveTableOverdue;
        TransDateTime                   minDateTime, currentWaveStartDateTime, currentWaveLineDateTime;
        int                             loadLinesOnCurrentWaveCount;
        boolean                         waveSchedTimeBeforeStartDateTime;
        WHSWaveId                       previousWaveId;

        while select warehouseCapacity
            where warehouseCapacity.InventLocationId != ''
                && warehouseCapacity.LoadLinesPerHour > 0
        {
            Timezone currentSiteTimeZone = InventSite::timeZoneSite(InventLocation::find(warehouseCapacity.InventLocationId).InventSiteId);

            currentWaveStartDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), currentSiteTimeZone);
            loadLinesOnCurrentWaveCount = 0;

            ttsbegin;

            while select WaveId from waveTable
                where waveTable.waveStatus == WHSWaveStatus::Created
                    && waveTable.InventLocationId == warehouseCapacity.InventLocationId
                join waveLine
                    order by waveLine.WaveId
                    where waveLine.WaveId == waveTable.WaveId
            {
                if (previousWaveId != waveTable.WaveId)
                {
                    currentWaveStartDateTime = WHSTmpWaveTableOverdue::insertWaveData(
                                                                        tmpWaveTableOverdue,
                                                                        warehouseCapacity.InventLocationId,
                                                                        loadLinesOnCurrentWaveCount,
                                                                        warehouseCapacity.LoadLinesPerHour,
                                                                        currentWaveStartDateTime,
                                                                        waveSchedTimeBeforeStartDateTime,
                                                                        minDateTime,
                                                                        previousWaveId);

                    previousWaveId = waveTable.WaveId;
                    loadLinesOnCurrentWaveCount = 0;
                    waveSchedTimeBeforeStartDateTime = false;
                    minDateTime = DateTimeUtil::maxValue();
                }

                loadLinesOnCurrentWaveCount += waveLine.totalLoadLinesNotWithAllQuantityOnWork();

                if (!waveSchedTimeBeforeStartDateTime)
                {
                    currentWaveLineDateTime = waveLine.scheduledShipmentDateTime();

                    //If at least one wave line has scheduled time before the earliest time that the current wave can get started
                    //we already know that it will be delayed and we only need to count its load lines to estimate the finished time.
                    if (currentWaveLineDateTime < currentWaveStartDateTime)
                    {
                        waveSchedTimeBeforeStartDateTime = true;
                    }
                    else if (currentWaveLineDateTime < minDateTime)
                    {
                        minDateTime = currentWaveLineDateTime;
                    }
                }
            }

            currentWaveStartDateTime = WHSTmpWaveTableOverdue::insertWaveData(
                                                                    tmpWaveTableOverdue,
                                                                    warehouseCapacity.InventLocationId,
                                                                    loadLinesOnCurrentWaveCount,
                                                                    warehouseCapacity.LoadLinesPerHour,
                                                                    currentWaveStartDateTime,
                                                                    waveSchedTimeBeforeStartDateTime,
                                                                    minDateTime,
                                                                    previousWaveId);

            WHSTmpWaveTableOverdue::deleteWavesNotOverdue(tmpWaveTableOverdue, currentWaveStartDateTime);

            ttscommit;
        }

        return tmpWaveTableOverdue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateToReleaseWavesOverdue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts one record in the <c>WHSTmpWaveTableOverdue</c> table for each wave which has already been processed,
    /// but will be delayed due to not having been released yet.
    /// </summary>
    /// <returns>
    /// The temporary <c>WHSTmpWaveTableOverdue</c> buffer created.
    /// </returns>
    /// <remarks>
    /// Populates the data for all WHS enabled warehouses for which there is non-zero capacity setup for outbound work execution.
    /// </remarks>
    public static WHSTmpWaveTableOverdue populateToReleaseWavesOverdue()
    {
        WHSWaveTable                    waveTable;
        WHSOutboundWorkloadCapacity     warehouseCapacity;
        WHSWaveLine                     waveLine;
        WHSTmpWaveTableOverdue          tmpWaveTableOverdue;
        TransDateTime                   minDateTime, currentWaveStartDateTime, currentWaveLineDateTime;
        int                             loadLinesOnCurrentWaveCount;
        boolean                         waveSchedTimeBeforeStartDateTime;

        while select warehouseCapacity
            where warehouseCapacity.InventLocationId != ''
                && warehouseCapacity.LoadLinesPerHour > 0
        {
            Timezone currentSiteTimeZone = InventSite::timeZoneSite(InventLocation::find(warehouseCapacity.InventLocationId).InventSiteId);

            currentWaveStartDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), currentSiteTimeZone);

            ttsbegin;

            while select WaveId from waveTable
                where (waveTable.waveStatus == WHSWaveStatus::Executing
                    || waveTable.waveStatus == WHSWaveStatus::Held)
                    && waveTable.InventLocationId == warehouseCapacity.InventLocationId
            {
                loadLinesOnCurrentWaveCount = waveTable.totalLoadLinesWithWorkLineNotCancelled();
                waveSchedTimeBeforeStartDateTime = false;
                minDateTime = DateTimeUtil::maxValue();

                while select waveLine
                    where waveLine.WaveId == waveTable.WaveId
                {
                    if (!waveSchedTimeBeforeStartDateTime)
                    {
                        currentWaveLineDateTime = waveLine.scheduledShipmentDateTime();

                        //If at least one wave line has scheduled time before the earliest time that the current wave can get started
                        //we already know that it will be delayed and since we already have the total number of load lines on the current wave
                        //we do not need to traverse the remaining wave lines.
                        if (currentWaveLineDateTime < currentWaveStartDateTime)
                        {
                            waveSchedTimeBeforeStartDateTime = true;
                            break;
                        }
                        else if (currentWaveLineDateTime < minDateTime)
                        {
                            minDateTime = currentWaveLineDateTime;
                        }
                    }
                }

                currentWaveStartDateTime = WHSTmpWaveTableOverdue::insertWaveData(
                                                                        tmpWaveTableOverdue,
                                                                        warehouseCapacity.InventLocationId,
                                                                        loadLinesOnCurrentWaveCount,
                                                                        warehouseCapacity.LoadLinesPerHour,
                                                                        currentWaveStartDateTime,
                                                                        waveSchedTimeBeforeStartDateTime,
                                                                        minDateTime,
                                                                        waveTable.WaveId);
            }

            WHSTmpWaveTableOverdue::deleteWavesNotOverdue(tmpWaveTableOverdue, currentWaveStartDateTime);

            ttscommit;
        }

        return tmpWaveTableOverdue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWaveData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>WHSTmpWaveTableOverdue</c> table and calculates the new date time that will
    /// be used as a starting point for the next wave.
    /// </summary>
    /// <param name = "_tmpWaveTableOverdue">The current buffer</param>
    /// <param name = "_inventLocationId">The warehouse of the wave.</param>
    /// <param name = "_loadLinesOnCurrentWaveCount">The total number of load lines on the current wave</param>
    /// <param name = "_loadLinesPerHour">The configured load lines per hour</param>
    /// <param name = "_currentWaveStartDateTime">The current starting date time.</param>
    /// <param name = "_waveSchedTimeBeforeStartDateTime">True if the current wave was scheduled before the current starting date; otherwise false.</param>
    /// <param name = "_minDateTime">The minimum scheduled date time among all the wave lines of the current wave</param>
    /// <param name = "_waveId">The current wave Id.</param>
    /// <returns>The date time which should be used as a starting point for the next wave.</returns>
    private static utcdatetime insertWaveData(
                                WHSTmpWaveTableOverdue  _tmpWaveTableOverdue,
                                InventLocationId        _inventLocationId,
                                int                     _loadLinesOnCurrentWaveCount,
                                int                     _loadLinesPerHour,
                                utcdatetime             _currentWaveStartDateTime,
                                boolean                 _waveSchedTimeBeforeStartDateTime,
                                TransDateTime           _minDateTime,
                                WHSWaveId               _waveId)
    {
        utcdatetime             currentWaveStartDateTime = _currentWaveStartDateTime;

        if (_loadLinesOnCurrentWaveCount > 0)
        {
            WHSTmpWaveTableOverdue  tmpWaveTableOverdue;

            tmpWaveTableOverdue.linkPhysicalTableInstance(_tmpWaveTableOverdue);

            int estimatedMinutesNeeded = any2Int(60 * _loadLinesOnCurrentWaveCount / _loadLinesPerHour);
            utcdatetime estimatedFinishedTime = DateTimeUtil::addMinutes(currentWaveStartDateTime, estimatedMinutesNeeded);

            //Next wave must start after the current one will finish. If it is already calculcated that the wave is overdue,
            //we want to already update the variables accordingly and start the next wave after the current one is processed.
            if (_waveSchedTimeBeforeStartDateTime)
            {
                currentWaveStartDateTime = estimatedFinishedTime;
                tmpWaveTableOverdue.ScheduledTime = currentWaveStartDateTime;
                tmpWaveTableOverdue.EstimatedMinutesNeeded = 0;
            }
            else
            {
                tmpWaveTableOverdue.ScheduledTime = _minDateTime;
                tmpWaveTableOverdue.EstimatedMinutesNeeded = estimatedMinutesNeeded;
            }

            tmpWaveTableOverdue.WaveId = _waveId;
            tmpWaveTableOverdue.InventLocationId = _inventLocationId;
            tmpWaveTableOverdue.insert();
        }

        return currentWaveStartDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWavesNotOverdue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Orders for each site all the created <c>WHSTmpWaveTableOverdue</c> records by scheduled time and wave id
    /// and deletes the ones that will not be overdue.
    /// </summary>
    private static void deleteWavesNotOverdue(WHSTmpWaveTableOverdue _tmpWaveTable, TransDateTime _waveStartDateTime)
    {
        WHSTmpWaveTableOverdue  tmpWaveTableOverdue;
        TransDateTime           estimatedFinishedDateTime = _waveStartDateTime;

        tmpWaveTableOverdue.linkPhysicalTableInstance(_tmpWaveTable);

        while select forupdate tmpWaveTableOverdue
            order by tmpWaveTableOverdue.InventLocationId,
                     tmpWaveTableOverdue.ScheduledTime,
                     tmpWaveTableOverdue.WaveId
            where tmpWaveTableOverdue.EstimatedMinutesNeeded > 0 // We've already increased _waveStartDateTime for those that were already delayed (and they have EstimatedMinutesNeeded == 0)
        {
            estimatedFinishedDateTime = DateTimeUtil::addMinutes(estimatedFinishedDateTime, tmpWaveTableOverdue.EstimatedMinutesNeeded);

            if (estimatedFinishedDateTime < tmpWaveTableOverdue.ScheduledTime)
            {
                tmpWaveTableOverdue.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@WAX:WavesOverdue</Label>
	<TitleField1>WaveId</TitleField1>
	<TitleField2>ScheduledTime</TitleField2>
	<Visible>No</Visible>
	<ClusteredIndex>WaveIdIdx</ClusteredIndex>
	<ReplacementKey>WaveIdIdx</ReplacementKey>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WaveId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSWaveId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ScheduledTime</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>EstimatedMinutesNeeded</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSInventLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WaveIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>WaveId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventLocationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>