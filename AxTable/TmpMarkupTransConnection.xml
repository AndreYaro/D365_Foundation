<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpMarkupTransConnection</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpMarkupTransConnection extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fill</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>TmpMarkupTransConnection</c> table with records from related records in the
    /// <c>MarkupTrans</c> table.
    /// </summary>
    /// <param name="_purchTableId">
    /// The table identifier of the parent record of the <c>MarkupTrans</c> table record.
    /// </param>
    /// <param name="_purchRecId">
    /// The record identifier of the parent record of the <c>MarkupTrans</c> table record.
    /// </param>
    /// <param name="_connectedRecId">
    /// The record identifier of the currently connected <c>MarkupTrans</c> table record.
    /// </param>
    public void fill(RefTableId _purchTableId, RefRecId _purchRecId, RefRecId _connectedRecId)
    {
        PurchIdOrig purchId;
        MarkupTrans purchMarkupTrans; // MarkupTrans associated with Purch{Table,Line}
        HeadingLine headingLine;

        // Is the PurchTable MarkupTrans connect from a VendInvoiceInfoSubTable MarkupTrans?
        boolean connectedFromVendInvoiceInfoSubTable(MarkupTrans _purchMarkupTrans)
        {
            VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
            VendInvoiceInfoTable vendInvoiceInfoTable;
            MarkupTrans vendInvoiceInfoMarkupTrans;

            select firstonly RecId from vendInvoiceInfoMarkupTrans
                where vendInvoiceInfoMarkupTrans.TransTableId == tablenum(VendInvoiceInfoSubTable)
                   && vendInvoiceInfoMarkupTrans.OrigTableId == _purchMarkupTrans.TableId
                   && vendInvoiceInfoMarkupTrans.OrigRecId == _purchMarkupTrans.RecId
                   && !vendInvoiceInfoMarkupTrans.IsDeleted
                join TableRefId from vendInvoiceInfoSubTable
                    where
                        vendInvoiceInfoSubTable.RecId == vendInvoiceInfoMarkupTrans.TransRecId
                exists join vendInvoiceInfoTable
                    where
                        vendInvoiceInfoTable.ParmId == vendInvoiceInfoSubTable.ParmId
                        && vendInvoiceInfoTable.TableRefId == vendInvoiceInfoSubTable.TableRefId
                        && (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting
                        || vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::ContainErrors);

            return vendInvoiceInfoMarkupTrans.RecId != 0;
        }

        // Is the PurchLine MarkupTrans connect from a VendInvoiceInfoLine MarkupTrans?
        boolean connectedFromVendInvoiceInfoLine(MarkupTrans _purchMarkupTrans)
        {
            VendInvoiceInfoLine vendInvoiceInfoLine;
            VendInvoiceInfoTable vendInvoiceInfoTable;
            MarkupTrans vendInvoiceInfoMarkupTrans;

            select firstonly RecId from vendInvoiceInfoMarkupTrans
                where vendInvoiceInfoMarkupTrans.TransTableId == tablenum(VendInvoiceInfoLine)
                   && vendInvoiceInfoMarkupTrans.OrigTableId == _purchMarkupTrans.TableId
                   && vendInvoiceInfoMarkupTrans.OrigRecId == _purchMarkupTrans.RecId
                   && !vendInvoiceInfoMarkupTrans.IsDeleted
                join TableRefId from vendInvoiceInfoLine
                    where
                        vendInvoiceInfoLine.RecId == vendInvoiceInfoMarkupTrans.TransRecId
                exists join vendInvoiceInfoTable
                    where
                        vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                        && vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId
                        && (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting
                        || vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::ContainErrors);
            return vendInvoiceInfoMarkupTrans.RecId != 0;
        }

        delete_from this;

        // Make sure we have access to these records,
        // they will be displayed to the user in a grid
        // on form MarkupTransConnect
        purchMarkupTrans.recordLevelSecurity(true);

        headingLine = _purchTableId == tablenum(PurchTable) ? HeadingLine::Heading : HeadingLine::Line;

        // Get the PO Id
        if (headingLine == HeadingLine::Heading)
        {
            purchId = PurchTable::findRecId(_purchRecId).PurchId;
        }
        else
        {
            purchId = PurchLine::findRecId(_purchRecId).PurchId;
        }

        // for each MarkupTrans on the PO (associated with the Purch* table)
        //    if the MarkupTrans is keep or is currently connected add it to the list
        //    else if there are no MarkupTrans from the set of invoices found above connected to this Purch MarkupTran add it to the list
        while select purchMarkupTrans
            where purchMarkupTrans.TransTableId == _purchTableId && purchMarkupTrans.TransRecId == _purchRecId && !purchMarkupTrans.IsDeleted
        {
            // If "Keep" then any number of MarkupTrans can be connected or
            // if the record is the "connected" record, include it.  Otherwise
            // check to ensure that the record is not connected by a "working invoice" (PurchParm*) or
            // to a "saved invoice" (VendInvoiceInfo*).
            if (!purchMarkupTrans.Keep && purchMarkupTrans.RecId != _connectedRecId)
            {
                switch (headingLine)
                {
                    case HeadingLine::Heading:
                        // Ensure no {PurchParm,VendInvoiceInfo}SubTable MarkupTrans are connected to this PurchTable MarkupTrans
                        if (connectedFromVendInvoiceInfoSubTable(purchMarkupTrans))
                        {
                            continue;
                        }
                        break;
                    case HeadingLine::Line:
                        // Ensure no {PurchParm,VendInvoiceInfo}Line MarkupTrans are connected to this PurchLine MarkupTrans
                        if (connectedFromVendInvoiceInfoLine(purchMarkupTrans))
                        {
                            continue;
                        }
                        break;
                }
            }
            this.clear();
            this.IsConnected = purchMarkupTrans.RecId == _connectedRecId;
            this.MarkupCode = purchMarkupTrans.MarkupCode;
            this.Txt = purchMarkupTrans.Txt;
            this.MarkupCategory = purchMarkupTrans.MarkupCategory;
            this.Value = purchMarkupTrans.Value;
            this.CurrencyCode = purchMarkupTrans.CurrencyCode;
            this.MarkupTransRecId = purchMarkupTrans.RecId;
            this.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Markup</ConfigurationKey>
	<Label>@SYS120068</Label>
	<TableGroup>Transaction</TableGroup>
	<ClusteredIndex>RecIdIdx</ClusteredIndex>
	<PrimaryIndex>RecIdIdx</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsConnected</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsConnected</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsConnected</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MarkupIsConnected</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MarkupCategory</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MarkupCategoryType</ExtendedDataType>
			<EnumType>MarkupCategory</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupCode</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MarkupCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MarkupTransRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MarkupTransRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Value</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MarkupValue</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RecIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>MarkupTransRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>