<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAssetDistribution</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RAssetDistribution extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkLocationTaxCode</Name>
				<Source><![CDATA[
    public boolean checkLocationTaxCode()
    {
        boolean ret = true;

        TaxAuthorityOKATO_RU taxAuthorityOKATO;
        TaxTable taxTable;
        TaxPeriodHead taxPeriodHead;
        RAssetLocation assetLocation;

        if (this.Location
            && this.TaxCode)
        {
            select firstonly RecId from taxAuthorityOKATO
                exists join TableId from taxTable
                    where taxTable.TaxCode == this.TaxCode
                exists join TableId from taxPeriodHead
                    where taxPeriodHead.TaxPeriod == taxTable.TaxPeriod
                exists join TableId from assetLocation
                    where assetLocation.Location == this.Location
                       && taxAuthorityOKATO.TaxAuthority == taxPeriodHead.TaxAuthority
                       && taxAuthorityOKATO.okato == assetLocation.okato;

                ret = taxAuthorityOKATO.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        RAssetTable assetTable;

        super();

        ttsbegin;

        select firstonly forupdate assetTable
            where assetTable.AccountNum == this.AssetId;

        assetTable.TaxCode = '';
        assetTable.LandTaxCode = '';
        assetTable.TaxBase = 0;
        assetTable.NumeratorShare = 0;
        assetTable.DenominatorShare = 0;
        assetTable.doUpdate();
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>okato</Name>
				<Source><![CDATA[
    public display OKATO_RU okato()
    {
        return RAssetLocation::find(this.Location).okato;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(RAssetDistribution, NumeratorShare):
            case fieldNum(RAssetDistribution, DenominatorShare):
                if (this.NumeratorShare > this.DenominatorShare)
                {
                    ret = checkFailed("@GLS117061");
                }

                if (RAssetTable::find(this.AssetId).AssetType != RAssetType::Land)
                {
                    real total;
                    RAssetDistribution distr;

                    while select NumeratorShare, DenominatorShare from distr
                        where distr.AssetId == this.AssetId
                            && distr.RecId != this.RecId
                    {
                        if (distr.DenominatorShare)
                        {
                            total += (distr.NumeratorShare / distr.DenominatorShare);
                        }

                    }

                    if (ret
                        && (total + this.DenominatorShare ? this.NumeratorShare / this.DenominatorShare : 0) > 1)
                    {
                        ret = checkFailed("@GLS116788");
                    }
                }
                break;

            case fieldNum(RAssetDistribution, Location):
            case fieldNum(RAssetDistribution, TaxCode):
                if(!this.checkLocationTaxCode())
                {
                    ret = checkFailed(strFmt("@GLS114722",
                        this.Location,
                        RAssetLocation::find(this.Location).okato,
                        this.TaxCode));
                }
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (RAssetTable::find(this.AssetId).AssetType != RAssetType::Land
            && !this.NumeratorShare)
        {
            ret = checkFailed("@GLS117121");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static RAssetDistribution find(RAssetId _assetId,
        RAssetLocationId _assetLocationId,
        RAssetOwner _assetOwner,
        TaxCode _taxCode,
        boolean _forUpdate = false)
    {
        RAssetDistribution assetDistribution;

        if (_assetId
            && _assetLocationId
            && _assetOwner
            && _taxCode)
        {
            assetDistribution.selectForUpdate(_forUpdate);

            select firstonly assetDistribution
                where assetDistribution.AssetId == _assetId
                    && assetDistribution.Location == _assetLocationId
                    && assetDistribution.Owner == _assetOwner
                    && assetDistribution.TaxCode == _taxCode;
        }

        return assetDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLocationTaxCode</Name>
				<Source><![CDATA[
    public static RAssetDistribution findLocationTaxCode(RAssetId _assetId,
        RAssetLocationId _location,
        TaxCode _taxCode,
        boolean _forUpdate = false)
    {
        RAssetDistribution assetDistribution;

        if (_assetId
            && _location
            && _taxCode)
        {
            assetDistribution.selectForUpdate(_forUpdate);

            select firstonly assetDistribution
                where assetDistribution.AssetId == _assetId
                    && assetDistribution.Location == _location
                    && assetDistribution.TaxCode == _taxCode
                    && !assetDistribution.Owner;
        }

        return assetDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxCode</Name>
				<Source><![CDATA[
    public static RAssetDistribution findTaxCode(RAssetId _assetId,
        TaxCode _taxCode,
        boolean _forUpdate = false)
    {
        RAssetDistribution assetDistribution;

        if (_assetId
            && _taxCode)
        {
            assetDistribution.selectForUpdate(_forUpdate);

            select firstonly assetDistribution
                where assetDistribution.AssetId == _assetId
                    && assetDistribution.TaxCode == _taxCode
                    && !assetDistribution.Owner;
        }

        return assetDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>denominatorShareEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// An edit method for a DenominatorShare field.
    /// </summary>
    /// <param name="_set">
    /// true if the value was changed; false otherwise.
    /// </param>
    /// <param name="_denominatorShare">
    /// The field value.
    /// </param>
    /// <returns>
    /// The value to show in the DenominatorShare field.
    /// </returns>
    /// <remarks>
    /// If the value in the field on the history table is empty, the method works as a DenominatorShare field for RAssetDistribution.
    /// If not, the field becomes locked for editing, and it fetches the value from the history table.
    /// </remarks>
    [SysClientCacheDataMethod(true)]
    public edit RAssetOwnedShare denominatorShareEdit(boolean _set, RAssetOwnedShare _denominatorShare)
    {
        return this.getSetFieldValue(_set, fieldNum(RAssetDistribution, DenominatorShare), fieldNum(RAssetTaxAllowanceHistory, DenominatorShareOwned), _denominatorShare);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSetFieldValue</Name>
				<Source><![CDATA[
    private anytype getSetFieldValue(boolean _set, FieldId _fixedAssetFieldId, FieldId _historyFieldId, anytype _value)
    {
        str ret;

        RAssetTaxAllowanceHistory assetTaxDataHistory = this.RecId != 0
            ? RAssetTaxAllowanceHistory::findLastWithDistribution(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), this.AssetId, false, this.RecId)
            : null;

        if (assetTaxDataHistory.(_historyFieldId))
        {
            ret = assetTaxDataHistory.(_historyFieldId);
        }
        else
        {
            if (_set)
            {
                this.(_fixedAssetFieldId) = _value;
            }

            ret = this.(_fixedAssetFieldId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numeratorShareEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// An edit method for a NumeratorShare field.
    /// </summary>
    /// <param name="_set">
    /// true if the value was changed; false otherwise.
    /// </param>
    /// <param name="_numeratorShare">
    /// The field value.
    /// </param>
    /// <returns>
    /// The value to show in the NumeratorShare field.
    /// </returns>
    /// <remarks>
    /// If the value in the field on the history table is empty, the method works as a NumeratorShare field for RAssetDistribution.
    /// If not, the field becomes locked for editing, and it fetches the value from the history table.
    /// </remarks>
    [SysClientCacheDataMethod(true)]
    public edit RAssetOwnedShare numeratorShareEdit(boolean _set, RAssetOwnedShare _numeratorShare)
    {
        return this.getSetFieldValue(_set, fieldNum(RAssetDistribution, NumeratorShare), fieldNum(RAssetTaxAllowanceHistory, NumeratorShareOwned), _numeratorShare);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// An edit method for a TaxBase field.
    /// </summary>
    /// <param name="_set">
    /// true if the value was changed; false otherwise.
    /// </param>
    /// <param name="_taxBase">
    /// The field value.
    /// </param>
    /// <returns>
    /// The value to show in the TaxBase field.
    /// </returns>
    /// <remarks>
    /// If the value in the field on the history table is empty, the method works as a TaxBase field for RAssetDistribution.
    /// If not, the field becomes locked for editing, and it fetches the value from the history table.
    /// </remarks>
    [SysClientCacheDataMethod(true)]
    public edit TaxBase taxBaseEdit(boolean _set, TaxBase _taxBase)
    {
        return this.getSetFieldValue(_set, fieldNum(RAssetDistribution, TaxBase), fieldNum(RAssetTaxAllowanceHistory, TaxBase), _taxBase);
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributionsExistForAsset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if distributions exist for a provided asset.
    /// </summary>
    /// <param name="_assetId">
    /// An asset id for which to search distributions.
    /// </param>
    /// <returns>
    /// true if distributions exist for the asset; false otherwise.
    /// </returns>
    public static boolean distributionsExistForAsset(RAssetId _assetId)
    {
        return (select firstonly RecId from rAssetDistribution
			where rAssetDistribution.AssetId == _assetId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static RAssetDistribution findRecId(RecId _recId, boolean _forUpdate = false)
    {
        RAssetDistribution assetDistribution;

        if (_recId)
        {
            assetDistribution.selectForUpdate(_forUpdate);

            select firstonly assetDistribution
				where assetDistribution.RecId == _recId;
        }

        return assetDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCodePercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the owned land share (numerator and denominator) from the asset distribution
    /// or asset (if not set on distributions or no distributions exist).
    /// </summary>
    /// <param name="_assetId">
    /// An asset id.
    /// </param>
    /// <param name="_taxCode">
    /// A tax code.
    /// </param>
    /// <param name="_okato">
    /// An OKATO code.
    /// </param>
    /// <returns>
    /// A container with value of owned share formed like [Numerator, Denominator].
    /// </returns>
    /// <remarks>
    /// A value is searched from a history record first.
    /// If not found, is taken from the asset distribution or asset record.
    /// </remarks>
    public static container taxCodePercent(
        RAssetId _assetId,
        TaxCode  _taxCode,
        OKATO_RU _okato)
    {
        return RAssetDistribution::taxCodePercentByPeriod(_assetId, _taxCode,_okato);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCodePercentByPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the owned land share (numerator and denominator) from the asset distribution
    /// or asset (if not set on distributions or no distributions exist).
    /// </summary>
    /// <param name="_assetId">
    /// An asset id.
    /// </param>
    /// <param name="_taxCode">
    /// A tax code.
    /// </param>
    /// <param name="_okato">
    /// An OKATO code.
    /// </param>
    /// <param name="_periodDate">
    /// An period on which to find the owned share.
    /// </param>
    /// <returns>
    /// A container with value of owned share formed like [Numerator, Denominator].
    /// </returns>
    /// <remarks>
    /// A value is searched from a history record first.
    /// If not found, is taken from the asset distribution or asset record.
    /// </remarks>
    public static container taxCodePercentByPeriod(
        RAssetId _assetId,
        TaxCode  _taxCode,
        OKATO_RU _okato,
        TransDate _periodDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        RAssetDistribution assetDistribution = RAssetDistribution::findLocationTaxCode(_assetId, RAssetLocation::findOKATO(_okato).Location, _taxCode);
        RAssetTaxInfoValue assetTaxInfoValue = RAssetTaxInfoValue::newParameters(_assetId, assetDistribution.RecId, _periodDate);

        RAssetOwnedShare numeratorShare = assetTaxInfoValue.getNumeratorShare();
        RAssetOwnedShare denominatorShare = assetTaxInfoValue.getDenominatorShare();

        return numeratorShare != 0
            ? [numeratorShare, denominatorShare]
            : [1, 1];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionShare</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the distribution property share (numerator and denominator) from the asset distribution
    /// </summary>
    /// <param name="_assetId">
    /// An asset id.
    /// </param>
    /// <param name="_taxCode">
    /// A tax code.
    /// </param>
    /// <param name="_okato">
    /// An OKATO code.
    /// </param>
    /// <returns>
    /// A container with value of distribution property share formed like [Numerator, Denominator].
    /// </returns>
    public static container getDistributionShare(
        RAssetId _assetId,
        TaxCode  _taxCode,
        OKATO_RU _okato)
    {
        RAssetDistribution assetDistribution = RAssetDistribution::findLocationTaxCode(_assetId, RAssetLocation::findOKATO(_okato).Location, _taxCode);

        return assetDistribution.numeratorShare != 0
            ? [assetDistribution.numeratorShare, assetDistribution.denominatorShare]
            : [1, 1];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RAsset</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@GLS111616</DeveloperDocumentation>
	<FormRef>RAssetDistribution</FormRef>
	<Label>@GLS111616</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Location</TitleField1>
	<TitleField2>Owner</TitleField2>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>RAsset</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RAssetTaxAllowanceHistory</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RAssetTaxAllowanceHistory</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Location</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Owner</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssessedTax</Name>
			<Label>@SYS21877</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Asset</Name>
			<Label>@SYS12578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CadastralCost</Name>
			<Label>@GLS117021</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxBase</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Location</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Owner</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>okato</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Share</Name>
			<Label>@GLS117059</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumeratorShare</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DenominatorShare</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DenominatorShare</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetDistributionShare</ExtendedDataType>
			<Label>@RussianFixedAssets:OwnedShareDenominator</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Location</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumeratorShare</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetDistributionShare</ExtendedDataType>
			<Label>@RussianFixedAssets:OwnedShareNumerator</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Owner</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetOwner</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBase</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBase</ExtendedDataType>
			<Label>@GLS117034</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DistributionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Owner</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Location</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>RAssetLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetLocation</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>RAssetDistribution</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LocationType_Extern</Name>
					<RelatedField>LocationType</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Location</Name>
					<SourceEDT>RAssetLocationId</SourceEDT>
					<Field>Location</Field>
					<RelatedField>Location</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>RAssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>TaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>