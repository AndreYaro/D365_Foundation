<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPaymSchedLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustPaymSchedLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromPaymSchedLine</Name>
				<Source><![CDATA[
    void initFromPaymSchedLine(PaymSchedLine _paymSchedLine)
    {
        this.CustVendPaymentSchedLine::initFromPaymSchedLine(_paymSchedLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayDetailedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the payment status of the payment record associated with the transaction.
    /// </summary>
    /// <returns>
    /// Payment status of the related payment record.
    /// </returns>
    public display MCRCustPaymDetailedStatus mcrDisplayDetailedStatus()
    {
        MCRCustPaymTable mcrCustPaymTable;

        mcrCustPaymTable = MCRCustPaymTable::findByRefRecIDRefTableID(this.RecId, this.TableId);

        if (mcrCustPaymTable)
        {
            return mcrCustPaymTable.displayDetailedStatus();
        }

        return "@MCR30684";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayIsBilled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates if a continuity payment schedule line has been billed.
    /// </summary>
    /// <returns>
    /// "Yes" if the continuity payment schedule line has been billed; otherwise "No".
    /// </returns>
    public display NoYes mcrDisplayIsBilled()
    {
        if (this.MCRContinuityPaymRecID)
        {
            return NoYes::Yes;
        }
        else
        {
            return NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayPaymMthd</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns the payment method of the payment record associated with the transaction.
    /// </summary>
    /// <returns>
    ///  <c>PaymMode</c> of the related payment record if one exists;otherwise blank.
    /// </returns>
    public display PaymMode mcrDisplayPaymMthd()
    {
        MCRCustPaymTable mcrCustPaymTable;

        mcrCustPaymTable = MCRCustPaymTable::findByRefRecIDRefTableID(this.RecId, this.TableId);

        if (mcrCustPaymTable)
        {
            return mcrCustPaymTable.TenderTypeId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayPaymStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and displays the payment status of the payment record associated with a transaction.
    /// </summary>
    /// <returns>
    /// <c>MCRCustPaymStats</c> of the associated payment.If a status is not found returns
    /// status of "NotSubmitted".
    /// </returns>
    public display MCRCustPaymStatus mcrDisplayPaymStatus()
    {
        MCRCustPaymTable mcrCustPaymTable;

        mcrCustPaymTable = MCRCustPaymTable::findByRefRecIDRefTableID(this.RecId, this.TableId);

        if (mcrCustPaymTable)
        {
            return mcrCustPaymTable.Status;
        }

        return MCRCustPaymStatus::NotSubmitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayPostedAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and displays the amount posted on a payment associated with the transaction.
    /// </summary>
    /// <returns>
    /// <c>AmountCur</c> that represents the posted amount on a payment if an amount
    ///     is posted; otherwise zero.
    /// </returns>
    public display AmountCur mcrDisplayPostedAmt()
    {
        MCRCustPaymTable mcrCustPaymTable;

        mcrCustPaymTable = MCRCustPaymTable::findByRefRecIDRefTableID(this.RecId, this.TableId);
        if (mcrCustPaymTable)
        {
            return(mcrCustPaymTable.PostedAmount);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and displays the invoiced and unsettled amount.
    /// </summary>
    /// <returns>
    /// Amount owed by the customer.
    /// </returns>
    public display MCRRemainingAmount mcrDisplayRemaining()
    {
        CustTransOpen custTransOpen;
        MCRPaymSchedLink mcrPaymSchedLink;

        select sum (AmountCur) from custTransOpen
            exists join mcrPaymSchedLink
            where mcrPaymSchedLink.CustTransOpenRefRecId == custTransOpen.RecId
               && mcrPaymSchedLink.CustPaymSchedLineRefRecId == this.RecId;

        return custTransOpen.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrHasBeenPaid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the schedule line has been paid or
    ///     the line has been fully returned
    /// If the dueAmount is 0, then it cannot be paid
    ///     however if the dueAmount minus the returned amount
    ///     is 0, it is considered "paid" and will not be adjusted.
    /// </summary>
    /// <param name="_considerZeroPaid">
    /// A <c>boolean</c> value for whether zero was paid; optional.
    /// </param>
    /// <param name="_delUnposted">
    /// A <c>boolean</c> value for deleting unposted schedules; optional.
    /// </param>
    /// <param name="_ignoreDate">
    /// A <c>boolean</c> value for ignoring the date; optional.
    /// </param>
    /// <param name="_acceleratePmt">
    /// A <c>boolean</c> value for accelerating payment; optional.
    /// </param>
    /// <returns>
    /// true if payment has been posted; otherwise false.
    /// </returns>
    /// <remarks>
    /// This is only for installment lines.
    /// </remarks>
    public boolean mcrHasBeenPaid(
        boolean _considerZeroPaid = true,
        boolean _delUnposted = true,
        boolean _ignoreDate = false,
        boolean _acceleratePmt = false)
    {
        MCRCustPaymTable mcrCustPaymTable;

        mcrCustPaymTable = MCRCustPaymTable::findByRefRecIDRefTableID(this.RecId,
                                                                     this.TableId);

        // If the due date has passed, consider the line paid
        // Need to execute code when accelerating payments therefore, disregard date check.
        if (_ignoreDate || this.DueDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            // Only consider posted payments paid.
            if (mcrCustPaymTable)
            {
                if (mcrCustPaymTable.PostedAmount != 0)
                {
                    return true;
                }

                return false;
            }
            // Need to consider fully returned lines as paid
            else if (this.DueAmount && this.DueAmount == this.MCRRetAmount)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and displays the <c>SalesID</c> associated with the <c>CustPaymSched</c>.
    /// </summary>
    /// <returns>
    /// <c>SalesID</c> if one is associated with the payment schedule; otherwise blank.
    /// </returns>
    public display SalesId mcrSalesID()
    {
        CustPaymSched   custPaymSched;
        SalesId         returnSalesID;

        custPaymSched = CustPaymSched::mcrFindRecID(this.ParentRecID);

        switch  (custPaymSched.ExtTableId)
        {
            case tableNum(SalesTable):
                returnSalesID = SalesTable::findRecId(custPaymSched.ExtRecId).SalesId;
                break;
            case tableNum(MCRContinuityCustHeader):
                returnSalesID = MCRContinuityCustHeader::findRecId(custPaymSched.ExtRecId).SalesId;
                break;
            default:
                returnSalesID = "";
                break;
        }

        return returnSalesID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrScheduleID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and displays the payment schedule ID for the associated payment schedule line.
    /// </summary>
    /// <returns>
    /// <c>PaymSchedID</c> associated with the given payment schedule line if one is found;otherwise blank.
    /// </returns>
    public display PaymSchedId mcrScheduleID()
    {
        CustPaymSched  custPaymSched;
        PaymSchedId    returnPaymSched = "";

        custPaymSched = CustPaymSched::mcrFindRecID(this.ParentRecID);

        if (custPaymSched)
        {
            returnPaymSched = custPaymSched.Name;
        }

        return returnPaymSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        CustPaymSchedLine   custPaymSchedLine;
        boolean             ret;

        ret = super(_fieldIdToCheck);
        if (ret)
        {
            //Shipping may only be checked if it is the only line on that schedule.
            switch (_fieldIdToCheck)
            {
                case fieldNum(CustPaymSchedLine, MCRShipping) :
                    if (this.MCRShipping)
                    {
                        select firstonly RecId from custPaymSchedLine
                                where custPaymSchedLine.ParentRecID == this.ParentRecID
                                && custPaymSchedLine.MCRShipping == NoYes::Yes
                                && custPaymSchedLine.RecId != this.RecId;

                        if (custPaymSchedLine.RecId)
                        {
                            ret = checkFailed("@MCR12144");
                        }
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(CustPaymSchedParentRecID _parentRecID, DueDate _dueDate, recId _recId )
    {
        boolean ret = true;

        if (!CustPaymSchedLine::exist(_parentRecID, _dueDate, _recId))
        {
            ret = checkFailed(strFmt(CustPaymSchedLine::txtNotExist(), _parentRecID, date2StrUsr(_dueDate, DateFlags::FormatAll), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(CustPaymSchedParentRecID _parentRecID, DueDate _dueDate, recId _recId )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     custPaymSchedLine
                 where
                     custPaymSchedLine.ParentRecID == _parentRecID &&
                    custPaymSchedLine.DueDate == _dueDate &&
                    custPaymSchedLine.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static CustPaymSchedLine find(
    CustPaymSchedParentRecID _parentRecID,
    DueDate _dueDate,
    recId _recId ,
    boolean                 _forupdate = false,
    ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustPaymSchedLine custPaymSchedLine;

        custPaymSchedLine.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custPaymSchedLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            custPaymSchedLine
            where
            custPaymSchedLine.ParentRecID == _parentRecID &&
                    custPaymSchedLine.DueDate == _dueDate &&
                    custPaymSchedLine.RecId == _recId;

        return custPaymSchedLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDoesPaymentRecordExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates if a payment record exists for the passed in continuity parent transaction.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecID</c> of the continuity parent.
    /// </param>
    /// <returns>
    /// true if a payment record exists; otherwise, false.
    /// </returns>
    public static boolean mcrDoesPaymentRecordExist(CustPaymSchedParentRecID _recId)
    {
        CustPaymSchedLine custPaymSchedLine;

        if (_recId)
        {
            select firstonly RecId from custPaymSchedLine
                where custPaymSchedLine.ParentRecID == _recId &&
                        custPaymSchedLine.MCRContinuityPaymRecID != 0;
        }

        if (custPaymSchedLine.RecId)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindByRecID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CustPaymSchedLine</c> given the <c>RecID</c>.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecID</c> to be used to find the associated <c>CustPaymSchedLine</c>.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>boolean</c> value to indicate if the record retrieved has to be selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>CustPaymSchedLine</c> if one is found;otherwise empty buffer.
    /// </returns>
    public static CustPaymSchedLine mcrFindByRecID(RecId _recId, boolean _forUpdate = false)
    {
        CustPaymSchedLine custPaymSchedLine;

        if (_recId)
        {
            custPaymSchedLine.selectForUpdate(_forUpdate);

            select firstonly custPaymSchedLine
                where custPaymSchedLine.RecId == _recId;
        }
        return custPaymSchedLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindFirstIntallmentSchedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the first schedule payment line that is tied to
    /// an installment plan of a sales order.
    /// </summary>
    /// <param name="_salesId">
    /// The sales order ID of the order if paid by installment.
    /// </param>
    /// <param name="_paymSchedId">
    ///  The payment schedule ID tied to the installment order.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>boolean</c> value to indicate if the <c>CustPaymSchedLine</c> has to be selected for update; Optional.
    /// </param>
    /// <returns>
    ///  A <c>CustPaymSchedLine</c> buffer if found; otherwise empty buffer.
    /// </returns>
    public static CustPaymSchedLine mcrFindFirstIntallmentSchedLine(SalesId    _salesId,
                                                                    PaymSchedId _paymSchedId,
                                                                    boolean    _forUpdate = false)
    {
        MCRInstallmentPlanSalesTable  mcrInstallmentPlanSalesTable;
        CustPaymSched                 custPaymSched;
        CustPaymSchedLine             custPaymSchedLine;

        if (_salesId && _paymSchedId)
        {
            custPaymSchedLine.selectForUpdate(_forUpdate);

            select firstonly custPaymSchedLine
                order by DueDate asc
                exists join custPaymSched
                where custPaymSched.ExtTableId == tableNum(SalesTable)
                   && custPaymSchedLine.ParentRecID == custPaymSched.RecId
                exists join mcrInstallmentPlanSalesTable
                    where mcrInstallmentPlanSalesTable.SalesId == _salesId
                        && mcrInstallmentPlanSalesTable.PaymSchedId == _paymSchedId
                        && custPaymSched.MCRRefTableID == mcrInstallmentPlanSalesTable.TableId
                        && custPaymSched.MCRRefRecID == mcrInstallmentPlanSalesTable.RecId;
        }
        return custPaymSchedLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindShippingRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and retuns the shippable line on the schedule of a continuity order.
    /// </summary>
    /// <param name="_recId">
    /// Record identifier that is a reference to the paym sched lines parent ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>boolean</c> value to indicate if the <c>CustPaymSchedLine</c> buffer has to selected for update; optional.
    /// </param>
    /// <returns>
    /// A <c>CustPaymSchedLine</c> buffer if one is found; otherwise empty buffer.
    /// </returns>
    public static  CustPaymSchedLine mcrFindShippingRecord(RecId _recId, boolean _forUpdate = false)
    {
        CustPaymSchedLine custPaymSchedLine;
        CustPaymSched     custPaymSched;

        if (_recId)
        {
            custPaymSchedLine.selectForUpdate(_forUpdate);

            select firstonly custPaymSchedLine
                join RecId from custPaymSched
                where custPaymSched.ExtTableId == tableNum(MCRContinuityCustLine)
                 && custPaymSched.ExtRecId == _recId
                 && custPaymSched.RecId == custPaymSchedLine.ParentRecID
                 && custPaymSchedLine.MCRShipping == true;
        }
        return custPaymSchedLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetTotalOfScheduleLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total amount due for a given payment schedule associated with a transaction.
    /// </summary>
    /// <param name="_recId">
    /// <c>RecID</c> of the payment schedule.
    /// </param>
    /// <returns>
    /// Total amount due if any; otherwise zero.
    /// </returns>
    public static real mcrGetTotalOfScheduleLines(CustPaymSchedParentRecID _recId)
    {
        CustPaymSchedLine   custPaymSchedLine;

        if (_recId)
        {
            select sum(DueAmount) from custPaymSchedLine
                where custPaymSchedLine.ParentRecID == _recId;
        }
        return custPaymSchedLine.DueAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102194";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendPaymSched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current customer payment schedule line from the payment schedule header record.
    /// </summary>
    /// <param name="_custVendPaymentSched">
    /// The payment schedule header record.
    /// </param>
    public void initFromCustVendPaymSched(CustVendPaymentSched _custVendPaymentSched)
    {
        this.CustVendPaymentSchedLine::initFromCustVendPaymSched(_custVendPaymentSched);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PaymSched</ConfigurationKey>
	<DeveloperDocumentation>@SYS127239</DeveloperDocumentation>
	<FormRef>CustPaymSchedule</FormRef>
	<Label>@SYS28013</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>LineNum</TitleField1>
	<TitleField2>DueDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ExtDueDateIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Bank</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>MCRCustPaymTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MCRCustPaymTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DueAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustomerPaymentScheduleLines</Name>
			<Label>@SYS28013</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParentRecID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParentRecID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRContinuityPaymRecID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRAll</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRShipping</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRContinuityPaymRecID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRInstallmentPaymRecID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRRetAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRPercentChange</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRAmountDueChanged</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentSchedule</Name>
			<Label>@SYS23027</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>mcrDisplayIsBilled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRShipping</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentType_ES</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CFMPrepayment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SplitPayment_IT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCashDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DiscDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCashDiscDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DueAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS9458</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRAmountDueChanged</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@MCR30645</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MCRContinuityPaymRecID</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MCRInstallmentPaymRecID</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@MCR30791</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MCRPercentChange</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@MCR30644</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MCRRetAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRReturnAmtAdj</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRShipping</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRPaymSchedShipping</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentRecID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustPaymSchedParentRecID</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PaymentType_ES</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PaymentType_ES</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SplitPayment_IT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SplitPayment_IT</ExtendedDataType>
			<FeatureClass>TaxBookToggle</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CFMPrepayment</Name>
			<ExtendedDataType>CFMPrepayment</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ExtDueDateIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ParentRecID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DueDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendPaymentSchedLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CFMPrepayment</MapField>
					<MapFieldTo>CFMPrepayment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscAmount</MapField>
					<MapFieldTo>DiscAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscDate</MapField>
					<MapFieldTo>DiscDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DueAmount</MapField>
					<MapFieldTo>DueAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DueDate</MapField>
					<MapFieldTo>DueDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipping</MapField>
					<MapFieldTo>MCRShipping</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParentRecID</MapField>
					<MapFieldTo>ParentRecID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentType_ES</MapField>
					<MapFieldTo>PaymentType_ES</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>CustPaymentSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127172</EntityRelationshipRole>
			<RelatedTable>CustPaymSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustPaymentSched</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CustPaymSchedLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentRecID</Name>
					<Field>ParentRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRContinuityPayment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>MCRContinuityPayment</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RecId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MCRContinuityPaymRecID</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRContinuityPaymRecID</Name>
					<Field>MCRContinuityPaymRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRInstallmentPayment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRInstallmentPayment</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustPaymTableRecID</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MCRInstallmentPaymRecID</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRInstallmentPaymRecID</Name>
					<Field>MCRInstallmentPaymRecID</Field>
					<RelatedField>CustPaymTableRecID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>