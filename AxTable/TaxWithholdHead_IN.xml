<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdHead_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdHead_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean                         ret;
        TaxWithholdReportVoucher_IN     taxWithholdReportVoucher;

        ret = super();

        select firstonly TaxWithholdSettlementPeriod from taxWithholdReportVoucher
            where taxWithholdReportVoucher.TaxType                      == this.TaxType
               && taxWithholdReportVoucher.TaxWithholdSettlementPeriod  == this.RecId;

        if (taxWithholdReportVoucher.TaxWithholdSettlementPeriod)
        {
            ret = ret && checkFailed(strfmt("@GLS5452",this.Period));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(TaxWithholdHead_IN, TaxWithholdAuthorities):
                if (this.TaxWithholdAuthorities)
                {
                    if (!TaxWithholdAuthorities_IN::exist(this.TaxType, TaxWithholdAuthorities_IN::find(this.TaxWithholdAuthorities).Authority))
                    {
                        ret = ret && checkFailed(strfmt("@GLS5457", TaxWithholdAuthorities_IN::find(this.TaxWithholdAuthorities).Authority, this.TaxType));
                    }
                }
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field; optional.
    /// </param>
    /// <returns>
    /// Returns true if the field passes value validation; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(TaxWithholdHead_IN, TaxWithholdAuthorities):
                if (this.TaxWithholdAuthorities)
                {
                    if (!TaxWithholdAuthorities_IN::exist(this.TaxType, TaxWithholdAuthorities_IN::find(this.TaxWithholdAuthorities).Authority))
                    {
                        ret = ret && checkFailed(strfmt("@GLS5457", TaxWithholdAuthorities_IN::find(this.TaxWithholdAuthorities).Authority, this.TaxType));
                    }
                }
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = TaxWithholdParameters_IN::checkParameter(this.TaxType);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdHead_IN</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_taxWithholdPeriod_IN">
    /// Tax period used to find the record.
    /// </param>
    /// <param name="_taxType">
    /// Tax type used to find the record.
    /// </param>
    /// <returns>
    /// Return true if record exists otherwise false.
    /// </returns>
    public static boolean exist(TaxWithholdPeriod_IN    _taxWithholdPeriod_IN,
                                TaxWithholdType_IN      _taxType)
    {
        return (select firstonly RecId from taxWithholdHead_IN
                    where taxWithholdHead_IN.Period     == _taxWithholdPeriod_IN
                       && taxWithholdHead_IN.TaxType    ==_taxType).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdHead_IN</c> table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdHead_IN</c> table.
    /// </returns>
    public static TaxWithholdHead_IN find(RefRecId            _recId,
                                          boolean             _forupdate        = false,
                                          ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdHead_IN taxWithholdHead;

        taxWithholdHead.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdHead.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdHead
            where taxWithholdHead.RecId == _recId;

        return taxWithholdHead;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxPeriodHead</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdHead_IN</c> table for the specified parameters.
    /// </summary>
    /// <param name="_taxWithholdPeriod_IN">
    /// Settlement period used to find the record.
    /// </param>
    /// <param name="_taxType">
    /// Tax type used to find the record.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <returns>
    ///  A buffer containing <c>TaxWithholdHead_IN</c> table.
    /// </returns>
    public static TaxWithholdHead_IN findByTaxPeriodHead(TaxWithholdPeriod_IN  _taxWithholdPeriod_IN,
                                                         TaxWithholdType_IN    _taxType,
                                                         boolean               _forUpdate = false)
    {
        TaxWithholdHead_IN  taxWithholdHead_IN;

        if (_taxWithholdPeriod_IN)
        {
            taxWithholdHead_IN.selectForUpdate(_forUpdate);
            select firstonly taxWithholdHead_IN
                where taxWithholdHead_IN.Period  == _taxWithholdPeriod_IN
                   && taxWithholdHead_IN.TaxType == _taxType;
        }
        return taxWithholdHead_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs "Go to main table" operation
    /// </summary>
    /// <param name="_period">
    /// Period used to pass as args parameter.
    /// </param>
    /// <param name="_taxType">
    /// Tax Type used to pass as args parameter.
    /// </param>
    public static void jumpRef(TaxWithholdPeriod_IN _period,
                               TaxWithholdType_IN   _taxType)
    {
        Args    args = new Args();

        args.parm(_period);
        args.parmEnumType(enumnum(TaxWithholdType_IN));
        args.parmEnum(_taxType);
        new MenuFunction(menuitemdisplaystr(TaxWithholdPeriods_IN), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAuthority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and shows a lookup form for the <c>TaxWithholdAuthorities_IN</c> field.
    /// </summary>
    /// <param name="_ctrl">
    ///  The calling form control.
    /// </param>
    /// <param name="_taxType">
    ///  Tax type used to filter the records in lookup form.
    /// </param>
    /// <returns>
    /// Return the selected buffer.
    /// </returns>
    public static Common lookupAuthority(FormReferenceControl   _ctrl,
                                                TaxWithholdType_IN     _taxType)
    {
        Common                  selectedRecord;
        SysReferenceTableLookup sysTableLookup  = SysReferenceTableLookup::newParameters(tablenum(TaxWithholdAuthorities_IN), _ctrl, true);
        Query                   query           = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        sysTableLookup.addLookupfield(fieldnum(TaxWithholdAuthorities_IN, Authority));
        sysTableLookup.addLookupfield(fieldnum(TaxWithholdAuthorities_IN, Name));

        queryBuildDataSource = query.addDataSource(tablenum(TaxWithholdAuthorities_IN));
        queryBuildDataSource.addRange(fieldnum(TaxWithholdAuthorities_IN, TaxType)).value(queryValue(_taxType));

        sysTableLookup.parmQuery(query);
        selectedRecord = sysTableLookup.performFormLookup();

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and shows a lookup form for the <c>TaxWithholdHead_IN</c> field.
    /// </summary>
    /// <param name="_ctrl">
    ///  The calling form control.
    /// </param>
    /// <param name="_taxType">
    /// Tax type used to filter the records in lookup form.
    /// </param>
    /// <returns>
    /// Return selected buffer.
    /// </returns>
    public static Common lookupPeriod(FormControl          _ctrl,
                                             TaxWithholdType_IN   _taxType)
    {
        Common                  selectedRecord;
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(TaxWithholdHead_IN), _ctrl, true);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        sysTableLookup.addLookupfield(fieldnum(TaxWithholdHead_IN, Period));
        sysTableLookup.addLookupfield(fieldnum(TaxWithholdHead_IN, Name));

        queryBuildDataSource = query.addDataSource(tablenum(TaxWithholdHead_IN));
        queryBuildDataSource.addRange(fieldnum(TaxWithholdHead_IN, TaxType)).value(queryValue(_taxType));

        sysTableLookup.parmQuery(query);
        selectedRecord = sysTableLookup.performFormLookup();

        return selectedRecord;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63812</DeveloperDocumentation>
	<FormRef>TaxWithholdPeriods_IN</FormRef>
	<Label>@GLS5483</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Period</TitleField1>
	<TitleField2>TaxWithholdAuthorities</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>PeriodTypeIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TaxWithholdPeriods_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxWithholdPeriods_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxWithholdTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>TaxWithholdTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdAuthorities</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Period</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Period</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Authority</Name>
			<Label>@SYS21937</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdAuthorities</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS41042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Period</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxInformation</Name>
			<Label>@SYS33550</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:HeadINDescriptionHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Period</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdPeriod_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:HeadINSettlementPeriodHelpText</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PeriodUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxWithholdParameters:HeadINPeriodIntervalHelpText</HelpText>
			<Label>@SYS23339</Label>
			<EnumType>PeriodUnit</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>QtyUnit</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Days</ExtendedDataType>
			<Label>@SYS23075</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdAuthorities</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdAuthorityRecId_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PeriodTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Period</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxWithholdAuthoritiesIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdAuthorities</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdAuthorities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdAuthorities_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdAuthorities_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdAuthorities_IN_TaxWithholdHead_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdAuthorities</Name>
					<Field>TaxWithholdAuthorities</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>