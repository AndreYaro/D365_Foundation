<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceCurrency</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjInvoiceCurrency extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editExchRate</Name>
				<Source><![CDATA[
    public edit ExchRate editExchRate(boolean set, ExchRate _exchRate)
    {
        ExchRate            exchRate = _exchRate;
        ExchangeRateHelper  exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyId);

        if (set)
        {
            this.ExchRate = exchangeRateHelper.prepareExchangeRateForStorage(exchRate);
        }
        else
        {
            exchRate = exchangeRateHelper.displayStoredExchangeRate(this.ExchRate);
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(ProjInvoiceCurrency, CurrencyId) :
                this.ExchRate = ExchangeRateHelper::exchRate(this.CurrencyId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), UnknownNoYes::Unknown, false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (CompanyInfoHelper::standardCurrency() == this.CurrencyId)
        {
            return checkFailed("@SYS56466");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(ProjInvoiceProjId projInvoiceProjId, CurrencyCode currencyId)
    {
        return projInvoiceProjId && currencyId && (select projInvoiceCurrency where projInvoiceCurrency.ProjInvoiceProjId == projInvoiceProjId && projInvoiceCurrency.CurrencyId == currencyId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjInvoiceCurrency find(ProjInvoiceProjId     _projInvoiceProjId,
                                           CurrencyCode          _currencyId,
                                           boolean               _forupdate = false)
    {
        ProjInvoiceCurrency projInvoiceCurrency = null;

        projInvoiceCurrency.selectForUpdate(_forupdate);

        if (_projInvoiceProjId && _currencyId)
        {
            select firstonly projInvoiceCurrency
                where projInvoiceCurrency.ProjInvoiceProjId == _projInvoiceProjId &&
                      projInvoiceCurrency.CurrencyId        == _currencyId;
        }

        return projInvoiceCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFixedRateAgreementForReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets fixed rate agreements record for the given project contract.
    /// </summary>
    /// <param name = "_projInvoiceProjId">Project contract number.</param>
    /// <returns>
    /// Fixed rate agreements record.
    /// </returns>
    internal static ProjInvoiceCurrency getFixedRateAgreementForReportingCurrency(ProjInvoiceProjId _projInvoiceProjId)
    {
        ProjInvoiceCurrency projInvoiceCurrency;

        if (Ledger::accountingCurrency() == Ledger::reportingCurrency())
        {
            projInvoiceCurrency = ProjInvoiceCurrency::find(_projInvoiceProjId, ProjInvoiceTable::find(_projInvoiceProjId).CurrencyId);
        }
        else
        {
            projInvoiceCurrency = ProjInvoiceCurrency::find(_projInvoiceProjId, Ledger::reportingCurrency());
        }

        return projInvoiceCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyReciprocalForFixedExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reciprocal exchange rate value from fixed exchange rate defined in project contract.
    /// </summary>
    /// <param name="_exchangeRateTypeId">
    /// The ID of the exchange rate type.
    /// </param>
    /// <param name="_fromCurrencyCode">
    /// The from currency code.
    /// </param>
    /// <param name="_toCurrencyCode">
    /// The to currency code.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_projInvoiceCurrency">
    /// The project invoice currency.
    /// </param>
    /// <returns>
    /// Returns reciprocal exchange rate value from fixed exchange rate defined in project contract.
    /// </returns>
    internal static ExchRate applyReciprocalForFixedExchangeRate(
        ExchangeRateTypeId _exchangeRateTypeId,
        CurrencyCode _fromCurrencyCode,
        CurrencyCode _toCurrencyCode,
        ValidFromDate _fromDate,
        ProjInvoiceCurrency _projInvoiceCurrency)
    {
        ExchangeRateCurrencyPair exchangeRateCurrencyPair;
        ValidToDate toDate = dateMax();
        ExchRate exchangeRate;

        select firstonly validtimestate(_fromDate, toDate) RecId
            from exchangeRateCurrencyPair
                where exchangeRateCurrencyPair.FromCurrencyCode == _fromCurrencyCode
                    && exchangeRateCurrencyPair.ToCurrencyCode == _toCurrencyCode
                    && exchangeRateCurrencyPair.ExchangeRateType == _exchangeRateTypeId;

        exchangeRate = _projInvoiceCurrency.ExchRate;

        if(!exchangeRateCurrencyPair)
        {
            // Since the currency pair wasn't found, search for a reciprocal pair
            select firstonly validtimestate(_fromDate, toDate) RecId
                from exchangeRateCurrencyPair
                    where exchangeRateCurrencyPair.FromCurrencyCode == _toCurrencyCode
                        && exchangeRateCurrencyPair.ToCurrencyCode == _fromCurrencyCode
                        && exchangeRateCurrencyPair.ExchangeRateType == _exchangeRateTypeId;

            if (exchangeRateCurrencyPair)
            {
                exchangeRate = ExchangeRateCalculation::calculateReciprocalExchangeRate(_projInvoiceCurrency.ExchRate);
            }
        }

        return exchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFixedExchRate</Name>
				<Source><![CDATA[
    internal static ExchRate getFixedExchRate(ProjInvoiceProjId _projInvoiceProjId, CurrencyCode _currencyId)
    {
        ExchRate exchRate;
        ProjInvoiceCurrency projInvoiceCurrency = ProjInvoiceCurrency::find(_projInvoiceProjId, _currencyId);
                
        if (projInvoiceCurrency)
        {
            exchRate = projInvoiceCurrency.ExchRate;
        }

        return exchRate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124972</DeveloperDocumentation>
	<FormRef>ProjInvoiceCurrency</FormRef>
	<Label>@SYS54068</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CurrencyId</TitleField1>
	<TitleField2>ExchRate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ProjInvoiceCurIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>ProjInvoiceCurIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hedgenumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hedgenumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AdministrationShow</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hedgenumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Hedgenumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankHedge</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjInvoiceProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjInvoiceCurIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CurrencyId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjInvoiceCurrency</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjInvoiceTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProjInvoiceCurrency</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjInvoiceProjId</Name>
					<SourceEDT>ProjInvoiceProjId</SourceEDT>
					<Field>ProjInvoiceProjId</Field>
					<RelatedField>ProjInvoiceProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjInvoiceIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>