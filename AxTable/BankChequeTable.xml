<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankChequeTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankChequeTable extends Common 
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a bank document can be created from the table in current status.
    /// </summary>
    /// <returns>
    /// true if a bank document can be created from the table in current status; otherwise, false.
    /// </returns>
    public boolean canCreateBankDocument()
    {
        return this.ChequeStatus == ChequeStatus::Payment
            || this.ChequeStatus == ChequeStatus::Cancelled
            || this.ChequeStatus == ChequeStatus::CancelPending;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    void delete()
    {
        if (this.ChequeStatus != ChequeStatus::Created)
        {
            throw error(strfmt("@SYS25812", ChequeStatus::Created));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRemittanceAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the vendor remittance address that is associated with the vendor <c>RemittanceAddress</c>
    ///    field on the <c>BankChequeTable</c> table.
    /// </summary>
    /// <returns>
    ///    The remittance address.
    /// </returns>
    public display RemittanceAddressing displayRemittanceAddress()
    {
        if (!hasFieldAccess(tablenum(LogisticsPostalAddress), fieldnum(LogisticsPostalAddress, Address), AccessType::View))
        {
            error("@SYS57330");
        }

        // Address based off of the address table recid on the table
        return LogisticsPostalAddress::addressFromRecId(this.RemittanceAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRemittanceLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the vendor remittance location name that is associated with the vendor
    ///    <c>RemittanceAddress</c> field on the <c>BankChequeTable</c> table.
    /// </summary>
    /// <returns>
    ///    The remittance location name.
    /// </returns>
    public display RemittanceLocationName displayRemittanceLocation()
    {
        return LogisticsPostalAddress::locationNameFromRecId(this.RemittanceAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.RecipientType = BankChequeRecipientType::Unknown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank account id.
    /// </summary>
    /// <returns>
    /// The bank accound id.
    /// </returns>
    public CompanyBankAccountId parmBankAccount()
    {
        return this.AccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank currency amount.
    /// </summary>
    /// <returns>
    /// The bank currency amount.
    /// </returns>
    public AmountCur parmBankCurrencyAmount()
    {
        return -this.BankCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankDocumentBookType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank document type.
    /// </summary>
    /// <returns>
    /// The bank document type.
    /// </returns>
    public BankDocumentBookType parmBankDocumentBookType()
    {
        return BankDocumentBookType::Cheque;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBankTransCleared</Name>
				<Source><![CDATA[
    internal boolean isBankTransCleared()
    {
        return BankAccountTrans::findByAccountIDAndChequeNum(this.AccountID, this.ChequeNum).Included;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes a bank document from a table.
    /// </summary>
    private void processBankDocument()
    {
        if (this.orig().ChequeStatus == ChequeStatus::Created
            && this.ChequeStatus == ChequeStatus::Payment)
        {
            // submit bank cheque document
            BankDocumentProcessor::submitBankDocumentTable(this);
        }

        if (this.orig().ChequeStatus == ChequeStatus::Payment)
        {
            if (this.ChequeStatus == ChequeStatus::CancelPending)
            {
                BankDocumentProcessor::submitBankDocumentTable(this, BankDocumentStatusChangeType::Cancel);
            }
            else if (this.ChequeStatus == ChequeStatus::Cancelled)
            {
                BankDocumentTable bankDocumentTable = BankDocumentTable::findBySource(tableNum(BankChequeTable), this.RecId);
                if (bankDocumentTable.RecId != 0)
                {
                    BankDocument bankDocument = BankDocument::newFromBankDocumentTable(bankDocumentTable);
                    if (bankDocument != null)
                    {
                        BankDocumentState bankDocumentState = bankDocument.getCurrentBankDocumentState();
                        if (bankDocumentState is BankDocumentStateNone)
                        {
                            BankDocumentProcessor::submitBankDocumentTable(this, BankDocumentStatusChangeType::Cancel);
                        }
                    }
                }
            }
        }


        if (this.orig().ChequeStatus == ChequeStatus::CancelPending
            && this.ChequeStatus == ChequeStatus::Payment)
        {
            BankDocumentProcessor::submitBankDocumentTable(this, BankDocumentStatusChangeType::ReverseCancel);
        }

        if (this.ChequeStatus == ChequeStatus::Created
            && this.SourceTableId
            && this.SourceRecId)
        {
            //release the link to journal line
            this.SourceTableId  = 0;
            this.SourceRecId    = 0;

            BankDocumentProcessor::deleteBankDocument(this.TableId, this.RecId);
        }

        if (this.orig().ChequeStatus == ChequeStatus::Payment
            && this.ChequeStatus == ChequeStatus::Rejected)
        {
            BankDocumentProcessor::submitBankDocumentTable(this, BankDocumentStatusChangeType::Clear);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates bank cheque table.
    /// </summary>
    public void update()
    {
        this.processBankDocument();

        this.updateBridgingStatus();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBridgingStatus</Name>
				<Source><![CDATA[
    private void updateBridgingStatus()
    {
        if (this.orig().ChequeStatus != ChequeStatus::Cancelled
            && this.ChequeStatus == ChequeStatus::Cancelled)
        {
            BankBridgingTrans bankBridgingTrans = BankBridgingTrans::findByBankChequeTableRecId(this.RecId, true);
            if (bankBridgingTrans && bankBridgingTrans.BridgingStatus != BankBridgingStatus::Canceled)
            {
                bankBridgingTrans.updateBridgingStatus(BankBridgingStatus::Canceled);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChequeStatusToCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates bank cheque status to cancel.
    /// </summary>
    /// <param name="_reasonRefRecId">
    /// RefRecID of the reason.
    /// </param>
    /// <param name="_dataAreaId">
    /// Company ID.
    /// </param>
    public void updateChequeStatusToCancelled(ReasonRefRecID _reasonRefRecId, DataAreaId _dataAreaId)
    {
        ttsBegin;

        this.ChequeStatus = ChequeStatus::Cancelled;
        this.ReasonRefRecID = ReasonTableRef::checkCreateInCompany(_reasonRefRecId, _dataAreaId);
        this.voidPositivePay();
        this.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidPositivePay</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This voids the checks which are processed by Positive pay by setting it to No.
    /// </summary>
    public void voidPositivePay()
    {
        BankPositivePayTrans    bankPositivePayTrans;

        //Update the ProcessedByPositivePay to No. This check will be included in the next Positive pay file craetion
        if (this.ProcessedByPositivePay == NoYes::Yes)
        {
            this.ProcessedByPositivePay = NoYes::No;

            select firstonly forupdate bankPositivePayTrans
                where bankPositivePayTrans.BankChequeTableRefRecId == this.RecId
                    && bankPositivePayTrans.VoidedUser == '';

            if (bankPositivePayTrans)
            {
                bankPositivePayTrans.VoidedUser = curUserId();
                bankPositivePayTrans.VoidedDate = DateTimeUtil::getSystemDateTime();
                bankPositivePayTrans.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(BankAccountID _accountID, BankChequeNum _chequeNum )
    {
        boolean ret = true;
        if (!BankChequeTable::exist(_accountID, _chequeNum))
        {
            ret = checkFailed(strfmt(BankChequeTable::txtNotExist(), _accountID, _chequeNum));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCheque</Name>
				<Source><![CDATA[
    public static BankChequeTable createCheque(BankChequeNum _chequeNum,
        CompanyBankAccountId  _accountID)
    {
        BankChequeTable  bankChequeTable;
        bankChequeTable.clear();
        bankChequeTable.ChequeNum       = _chequeNum;
        bankChequeTable.ChequeStatus    = ChequeStatus::Created;
        bankChequeTable.AccountID       = _accountID;
        bankChequeTable.RecipientType   = BankChequeRecipientType::Unknown;

        if (BankChequeTable::exist(_accountID, _chequeNum))
        {
            checkFailed(strfmt("@SYS24139", bankChequeTable.ChequeNum));
            throw error("@SYS18447");
        }
        bankChequeTable.insert();

        return bankChequeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(BankAccountID _accountID, BankChequeNum _chequeNum )
    {
        boolean found;
        found = (select firstonly RecId from bankChequeTable
                    where bankChequeTable.AccountID == _accountID
                        && bankChequeTable.ChequeNum == _chequeNum).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static BankChequeTable find(
        CompanyBankAccountId    _accountID,
        BankChequeNum           _chequeNum,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankChequeTable bankChequeTable;

        bankChequeTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            bankChequeTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly bankChequeTable
            where bankChequeTable.AccountID == _accountID
                && bankChequeTable.ChequeNum == _chequeNum;

        return bankChequeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>BankChequeTable</c> record by record id.
    /// </summary>
    /// <param name="_bankChequeRecordId">
    /// The bank cheque table record id.
    /// </param>
    /// <param name="_forupdate">
    /// Whetehr to update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model.
    /// </param>
    /// <returns>
    /// The found <c>BankChequeTable</c> record.
    /// </returns>
    public static BankChequeTable findByRecId(
        RefRecId                _bankChequeRecordId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankChequeTable bankChequeTable;

        bankChequeTable.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            bankChequeTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly bankChequeTable
            where bankChequeTable.RecId == _bankChequeRecordId;

        return bankChequeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastChequeNum</Name>
				<Source><![CDATA[
    public static BankChequeNum findLastChequeNum(CompanyBankAccountId _accountID)
    {
        BankChequeTable bankChequeTable;

        select maxof(ChequeNum) from bankChequeTable
            where bankChequeTable.AccountID == _accountID;

        return bankChequeTable.ChequeNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextFree</Name>
				<Source><![CDATA[
    public static BankChequeNum findNextFree(CompanyBankAccountId _accountID)
    {
        BankChequeTable  bankChequeTable;

        select firstonly ChequeNum from bankChequeTable
            index AccountChequeIdx
            where bankChequeTable.AccountID == _accountID
                && bankChequeTable.ChequeStatus == ChequeStatus::Created;

        return bankChequeTable.ChequeNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerJournalTrans</Name>
				<Source><![CDATA[
    public static BankChequeTable findByLedgerJournalTrans(
        BankChequeNum _bankChequeNum,
        RecId _ledgerJournalTransRecId,
        CompanyId _companyId = curExt(),
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankChequeTable bankChequeTable;

        bankChequeTable.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            bankChequeTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly crosscompany bankChequeTable
            where bankChequeTable.ChequeNum == _bankChequeNum
                && bankChequeTable.SourceTableId == tableNum(LedgerJournalTrans)
                && bankChequeTable.SourceRecId == _ledgerJournalTransRecId
                && bankChequeTable.DataAreaId == _companyId;

        return bankChequeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearChequeRecipientNameAndAddress</Name>
				<Source><![CDATA[
    internal static void clearChequeRecipientNameAndAddress(
        CompanyBankAccountId _accountID,
        BankChequeNum _chequeNum)
    {
        BankChequeTable bankChequeTable = BankChequeTable::find(_accountID, _chequeNum, true);

        bankChequeTable.RemittanceAddress = 0;
        bankChequeTable.BankNegInstRecipientName = '';
        bankChequeTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChequeStatus</Name>
				<Source><![CDATA[
    public static void setChequeStatus(
        CompanyBankAccountId        _accountID,
        BankChequeNum               _chequeNum,
        ChequeStatus                _chequeStatus,
        TransDate                   _transDate,
        Voucher                     _voucher,
        BankChequeRecipientType     _recipientType,
        CompanyId                   _recipientCompany,
        CustVendAC                  _recipientAccountNum,
        CurrencyCode                _currencyCode,
        AmountCur                   _amountCur,
        BankNegInstRecipientName    _recipientName,
        RemittanceAddress           _remittanceAddress = 0,
        RefTableId                  _sourceTableId = 0,
        RefRecId                    _sourceRecId = 0)
    {
        BankChequeTable  bankChequeTable;

        select firstonly forupdate bankChequeTable
            where bankChequeTable.AccountID == _accountID
                && bankChequeTable.ChequeNum == _chequeNum;

        if (!bankChequeTable)
        {
            throw error(strfmt("@SYS76941", _accountID, _chequeNum));
        }

        bankChequeTable.ChequeStatus                = _chequeStatus;
        bankChequeTable.TransDate                   = _transDate;
        bankChequeTable.Voucher                     = _voucher;
        bankChequeTable.RecipientType               = _recipientType;
        bankChequeTable.RecipientCompany            = _recipientCompany;
        bankChequeTable.RecipientAccountNum         = _recipientAccountNum;
        bankChequeTable.RecipientTransVoucher       = _voucher;
        bankChequeTable.CurrencyCode                = _currencyCode;
        bankChequeTable.AmountCur                   = _amountCur;

        if (_recipientName)
        {
            bankChequeTable.BankNegInstRecipientName = _recipientName;
        }

        if (_remittanceAddress)
        {
            bankChequeTable.RemittanceAddress = _remittanceAddress;
        }

        if (_sourceTableId
            && _sourceRecId)
        {
            bankChequeTable.SourceTableId           = _sourceTableId;
            bankChequeTable.SourceRecId             = _sourceRecId;
        }

        bankChequeTable.BankCurrency = BankAccountTable::find(_accountID).CurrencyCode;
        if (_currencyCode == bankChequeTable.BankCurrency)
        {
            bankChequeTable.BankCurrencyAmount = _amountCur;
        }
        else
        {
            bankChequeTable.BankCurrencyAmount = CurrencyExchangeHelper::curAmount2CurAmount(_amountCur, _currencyCode, bankChequeTable.BankCurrency, bankChequeTable.TransDate);
        }

        if (_chequeStatus == ChequeStatus::Cancelled
            || _chequeStatus == ChequeStatus::Rejected
            || _chequeStatus == ChequeStatus::Void)
        {
            bankChequeTable.voidPositivePay();
        }

        bankChequeTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS28260";
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a <c>BankChequeTable</c> table record exists for the bank account.
    /// </summary>
    /// <param name = "_bankAccountId">The ID of the bank account.</param>
    /// <returns>true if the record exists; otherwise, false.</returns>
    public static boolean existForBankAccount(CompanyBankAccountId _bankAccountId)
    {
        BankChequeTable bankChequeTable;

        select firstOnly RecId from bankChequeTable
            where bankChequeTable.AccountID == _bankAccountId;

        return bankChequeTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFurtherPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the bridge posting flag that is associated with the payment <c>RemittanceAddress</c>
    /// field on the <c>VendPaymModeTable</c> table.
    /// </summary>
    /// <returns>
    ///  Bridge posting type.
    /// </returns>
    [SysClientCacheDataMethod]
    public display FurtherPostingType displayFurtherPosting()
    {
        FurtherPostingType furtherPosting;

        if (this.SourceTableId == tableNum(LedgerJournalTrans))
        {
            PaymMode ledgerPaymentMode = LedgerJournalTrans::findRecId(this.SourceRecId, false).PaymMode;

            if (ledgerPaymentMode)
            {
                furtherPosting = VendPaymModeTable::find(ledgerPaymentMode).FurtherPosting;
            }
        }

        return furtherPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRemittanceAddressDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the vendor remittance address description that is associated with the vendor <c>RemittanceAddress</c>
    /// field on the <c>BankChequeTable</c> table.
    /// </summary>
    /// <returns>
    /// The remittance address description.
    /// </returns>
    [SysClientCacheDataMethod]
    public display Description255 displayRemittanceAddressDescription()
    {
        //Concatenate the address on single line
        return BankBridgingVendorTransactionDetails::getRemittanceAddressDescription(this.RemittanceAddress);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BankCheque</ConfigurationKey>
	<DeveloperDocumentation>@SYS127023</DeveloperDocumentation>
	<FormRef>BankChequeTable</FormRef>
	<Label>@SYS24207</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ChequeNum</TitleField1>
	<TitleField2>ChequeStatus</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Bank</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>AccountChequeIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>BankChequePaymTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BankChequePaymTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChequeStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChequeNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChequeNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChequeStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankDocument</Name>
			<Label>@GLS221638</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCurrency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankPositivePayProcessed</Name>
			<Label>@SYS4004485</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcessedByPositivePay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Check</Name>
			<Label>@SYS22495</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ChequeStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChequeNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChequeNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChequeStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecipientAccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecipientType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecipientAccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankNegInstRecipientName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecipientCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecipientTransVoucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reason</Name>
			<Label>@SYS107174</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReasonRefRecID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Remittance</Name>
			<Label>@sys152838</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RemittanceAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SystemInfo</Name>
			<Label>@SYS10575</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>modifiedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>modifiedBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Voucher</Name>
			<Label>@SYS12371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS6928</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BankCurrencyAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankNegInstRecipientName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>BankNegInstRecipientName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ChequeNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankChequeNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ChequeStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS25532</Label>
			<EnumType>ChequeStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProcessedByPositivePay</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS4004485</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonRefRecID</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReasonRefRecID</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RecipientAccountNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<Label>@SYS4466</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RecipientCompany</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<Label>@SYS10499</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RecipientTransVoucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RecipientType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BankChequeRecipientType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RemittanceAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RemittanceAddress</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReversalRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ReversalTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountChequeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ChequeNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ChequeStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProcessedByPositivePay</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProcessedByPositivePay</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ChequeStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RecipientChequeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ChequeNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecipientType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecipientCompany</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ChequeStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ChequeStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>BankDocumentTableMap</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>BankNegInstTableMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BankNegInstNum</MapField>
					<MapFieldTo>ChequeNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CompanyBankAccountId</MapField>
					<MapFieldTo>AccountID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendAccount</MapField>
					<MapFieldTo>RecipientAccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AmountCur</MapField>
					<MapFieldTo>AmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendAccountMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Account</MapField>
					<MapFieldTo>RecipientAccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Num</MapField>
					<MapFieldTo>ChequeNum</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>BankAccounts</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123560</EntityRelationshipRole>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BankAccounts</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>BankChequeTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountID</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>AccountID</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankAccountTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127022</EntityRelationshipRole>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankAccountTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>BankChequeTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecipientAccountNum</Name>
					<Field>RecipientAccountNum</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>RecipientType</Name>
					<Field>RecipientType</Field>
					<ValueStr>BankChequeRecipientType::Bank</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankDocumentTableView</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>BankDocumentTableView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>SourceRelationType</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>SourceRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CheckNum</Name>
			<EntityRelationshipRole>@SYS127010</EntityRelationshipRole>
			<RelatedTable>BankChequeTable</RelatedTable>
			<RelatedTableRole>CheckNum</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>BankChequeTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountID</Name>
					<Field>AccountID</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ChequeNum</Name>
					<Field>ChequeNum</Field>
					<RelatedField>ChequeNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127022</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankChequeTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>RecipientType</Name>
					<Field>RecipientType</Field>
					<ValueStr>BankChequeRecipientType::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecipientAccountNum</Name>
					<Field>RecipientAccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecipientCompany</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>RecipientCompany</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReasonRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127012</EntityRelationshipRole>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReasonRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankChequeTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonRefRecID</Name>
					<SourceEDT>ReasonRefRecID</SourceEDT>
					<Field>ReasonRefRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RemittanceAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RemittanceAddress_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankChequeTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RemittanceAddress</Name>
					<Field>RemittanceAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127022</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankChequeTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>RecipientType</Name>
					<Field>RecipientType</Field>
					<ValueStr>BankChequeRecipientType::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecipientAccountNum</Name>
					<Field>RecipientAccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>