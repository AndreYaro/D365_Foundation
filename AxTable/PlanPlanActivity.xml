<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlanPlanActivity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PlanPlanActivity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        LeanProdFlowPlanActivityRelation    leanProdFlowPlanActivityRelation;
        LeanProductionFlow                  leanProductionFlow;
        PlanActivityRelationship            planActivityRelationship;
        PlanActivity                        planActivity;
        PlanPlanActivity                    planPlanActivity;
        PlanConstraint                      planConstraint;

        if (this.validateDelete())
        {
            ttsbegin;

            super();

            planActivity = this.planActivity();

            if (planActivity.PlanActivityType == PlanActivityType::Process ||
                planActivity.PlanActivityType == PlanActivityType::Transfer)
            {
                delete_from planPlanActivity
                exists join planActivity
                    where planActivity.PlanActivityType                    != PlanActivityType::Process
                       && planActivity.PlanActivityType                    != PlanActivityType::Transfer
                       && planActivity.RecId                               == planPlanActivity.PlanActivity
                       && planPlanActivity.Plan                            == this.Plan
                exists join planActivityRelationship
                    where planActivityRelationship.DependentPlanActivity   == planActivity.RecId
                       && planActivityRelationship.IndependentPlanActivity == this.PlanActivity
                exists join planConstraint
                    where planActivityRelationship.Constraint              == planConstraint.RecId
                       && planConstraint.ConstraintType                    == ConstraintTypes::Aggregation;
            }

            // Relations which use this record should be deleted
            delete_from leanProdFlowPlanActivityRelation
            exists join leanProductionFlow
            exists join planActivityRelationship
                where leanProductionFlow.Plan                                   == this.Plan
                   && leanProdFlowPlanActivityRelation.PlanActivityRelationship == planActivityRelationship.RecId
                   && leanProdFlowPlanActivityRelation.ProductionFlow           == leanProductionFlow.RecId
                   && (planActivityRelationship.IndependentPlanActivity         == this.PlanActivity
                   ||  planActivityRelationship.DependentPlanActivity           == this.PlanActivity);

            ttscommit;
        }
        else
        {
            throw error("@SYS138340");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>plan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record in the <c>Plan</c> table that is referred to by the current record.
    /// </summary>
    /// <returns>
    /// A record in the <c>Plan</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Plan plan()
    {
        return Plan::find(this.Plan);
    }

]]></Source>
			</Method>
			<Method>
				<Name>planActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record in the <c>PlanActivity</c> table that is referred to by the current record.
    /// </summary>
    /// <returns>
    /// A record in the <c>PlanActivity</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivity planActivity()
    {
        return PlanActivity::find(this.PlanActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>planReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the referred record in the <c>PlanReference</c> table.
    /// </summary>
    /// <returns>
    /// A record in the <c>PlanReference</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanReference planReference()
    {
        return PlanReference::findPlanPlanActivity(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productionFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record in the <c>LeanProductionFlow</c> table that is referred to by the current
    /// record.
    /// </summary>
    /// <returns>
    /// A record in the <c>LeanProductionFlow</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanProductionFlow productionFlow()
    {
        return LeanProductionFlow::findPlan(this.Plan);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        Plan            plan;
        boolean         result;

        result = super();

        if (   result
            && this.RecId)
        {
            plan = this.plan();

            // Record from active plan shouldn't be deleted unless it is expired
            if (   plan
                && plan.Status == PlanStatus::Active
                && !plan.isExpired())
            {
                // Cannot remove plan activity from active production flow version
                result = checkFailed("@SYS305565");
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateForNewPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a duplicate of all the <c>PlanPlanActivity</c> records of the specified <c>Plan</c> record.
    /// </summary>
    /// <param name="_oldPlan">
    /// The record ID of the <c>Plan</c> record from which to copy.
    /// </param>
    /// <param name="_newPlan">
    /// The record ID of the <c>Plan</c> record to which to copy.
    /// </param>
    /// <returns>
    /// A map that contains mappings from the old element record IDs to the new element record IDs.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static Map duplicateForNewPlan(
        PlanRefRecId _oldPlan,
        PlanRefRecId _newPlan)
    {
        PlanPlanActivity     planPlanActivity;
        PlanPlanActivity     newPlanPlanActivity;
        Map                  changes = new Map(Types::Int64, Types::Int64);

        ttsbegin;
        while select planPlanActivity
            where planPlanActivity.Plan == _oldPlan
        {
            newPlanPlanActivity.data(planPlanActivity);

            newPlanPlanActivity.RecId   = 0;
            newPlanPlanActivity.Plan    = _newPlan;

            newPlanPlanActivity.insert();

            changes.insert(planPlanActivity.RecId, newPlanPlanActivity.RecId);
        }
        ttscommit;

        return changes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>PlanPlanActivity</c> table exists.
    /// </summary>
    /// <param name="_refRecId">
    /// The record ID of the <c>PlanPlanActivity</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(PlanPlanActivityRefRecId _refRecId)
    {
        return _refRecId &&
               (select firstonly RecId from planPlanActivity
                    where planPlanActivity.RecId == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PlanPlanActivity</c> table.
    /// </summary>
    /// <param name="_refRecId">
    /// The record ID of the <c>PlanPlanActivity</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PlanPlanActivity</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanPlanActivity find(
        PlanPlanActivityRefRecId _refRecId,
        boolean                  _forUpdate = false)
    {
        PlanPlanActivity    planPlanActivity;

        if (_refRecId)
        {
            planPlanActivity.selectForUpdate(_forUpdate);

            select firstonly planPlanActivity
                where planPlanActivity.RecId == _refRecId;
        }

        return planPlanActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PlanPlanActivity</c> table.
    /// </summary>
    /// <param name="_plan">
    /// The record ID of the <c>Plan</c> table record to find.
    /// </param>
    /// <param name="_planActivity">
    /// The record ID of the <c>PlanActivity</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PlanPlanActivity</c> table; otherwise, an empty record.
    /// </returns>
    public static PlanPlanActivity findPlanActivity(
        PlanRefRecId         _plan,
        PlanActivityRefRecId _planActivity,
        boolean              _forUpdate = false)
    {
        PlanPlanActivity    planPlanActivity;

        if (   _plan != 0
            && _planActivity != 0)
        {
            planPlanActivity.selectForUpdate(_forUpdate);

            select firstonly planPlanActivity
                where planPlanActivity.Plan         == _plan
                   && planPlanActivity.PlanActivity == _planActivity;
        }

        return planPlanActivity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS323999</DeveloperDocumentation>
	<FormRef>LeanProductionFlow</FormRef>
	<Label>@SYS152583</Label>
	<SingularLabel>@SYS152584</SingularLabel>
	<TableGroup>Main</TableGroup>
	<TitleField1>Plan</TitleField1>
	<TitleField2>PlanActivity</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>PlanPlanActivityIdx</ClusteredIndex>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>PlanPlanActivityIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>KanbanFlow</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>KanbanFlow</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Plan</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanActivity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Plan</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanActivity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlanActivity</Name>
			<Label>@SYS152578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Plan</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanActivity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Plan</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PlanActivity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanActivityRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PlanActivityIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanActivity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Plan</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PlanPlanActivityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Plan</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PlanActivity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Plan</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Plan</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ParentPlan</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssignedToPlanActivity</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Plan</Name>
					<Field>Plan</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlanActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlanActivity</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Activity</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>AssignedToPlanActivity</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanActivity</Name>
					<Field>PlanActivity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>