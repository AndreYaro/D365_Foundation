<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventFixedLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSInventFixedLocation extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayItemName</Name>
				<Source><![CDATA[
	/// <summary>
	/// Display method for the item name field.
	/// </summary>
    display ItemName displayItemName()
    {
        return InventTable::find(this.ItemId).itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        WMSLocation     wmsLocation;

        wmsLocation = WMSLocation::find(this.WMSLocationId, this.InventLocationId);

        if (!wmsLocation)
        {
            throw error("@WAX890");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
	/// <summary>
	/// Contains code to execute when a field value is modified.
	/// </summary>
	/// <param name="_fieldName">
	/// Name of the modified field.
	/// </param>
	/// <param name="_arrayIndex">
	/// Index of the modified field.
	/// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(WHSInventFixedLocation, InventLocationId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventLocationId));
                break;
            case fieldStr(WHSInventFixedLocation, InventSiteId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventSiteId));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        WMSLocation     wmsLocation;

        wmsLocation = WMSLocation::find(this.WMSLocationId, this.InventLocationId);

        if (!wmsLocation)
        {
            throw error("@WAX890");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WHSInventFixedLocation, InventLocationId):
                ret = this.InventStorageDimMap::validateField(fieldNum(InventStorageDimMap, InventLocationId));
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks whether a specific <c>WHSInventFixedLocation</c> record exists.
	/// </summary>
	/// <param name="_itemId">
	/// Item id of the record.
	/// </param>
	/// <param name="_inventLocationId">
	/// Warehouse id of the record.
	/// </param>
	/// <param name="_inventSiteId">
	/// Site id of the record.
	/// </param>
	/// <param name="_wmsLocationId">
	/// Location id of the field.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(ItemId              _itemId,
                                InventLocationId    _inventLocationId,
                                InventSiteId        _inventSiteId,
                                WMSLocationId       _wmsLocationId)
    {
        return (_itemId && _inventLocationId && _inventSiteId && _wmsLocationId) &&
               (select firstOnly RecId from WHSInventFixedLocation
                where WHSInventFixedLocation.ItemId             == _itemId              &&
                      WHSInventFixedLocation.InventLocationId   == _inventLocationId    &&
                      WHSInventFixedLocation.InventSiteId       == _inventSiteId        &&
                      WHSInventFixedLocation.WMSLocationId      == _wmsLocationId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForItemInWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if a fixed location exists for the provided product at the specified warehouse.
    /// </summary>
    /// <param name = "_itemId">Item number.</param>
    /// <param name = "_inventLocationId">Warehouse.</param>
    /// <returns>True, if at least one fixed location exists for this product at this warehouse; otherwise, false.</returns>
    /// <remarks>Transaction scope caching is implemented to improve performance when dealing with large loads that have the same item + dimensions repeated many times.</remarks>
    public static boolean existsForItemInWarehouse(ItemId _itemId, InventLocationId _inventLocationId)
    {
        if (_itemId && _inventLocationId)
        {
            UnknownNoYes    recordExists = UnknownNoYes::Unknown;
            str             cacheKey     = WHSInventFixedLocation::getCacheKey(_itemId, _inventLocationId);
            recordExists = SysTransactionScopeCache::get(tableStr(WHSInventFixedLocation), cacheKey, recordExists);

            if (recordExists == UnknownNoYes::Unknown)
            {
                WHSInventFixedLocation fixedLocation;

                select firstonly RecId from fixedLocation
                    where fixedLocation.ItemId == _itemId
                        && fixedLocation.InventLocationId == _inventLocationId;
        
                recordExists = fixedLocation.RecId != 0 ? UnknownNoYes::Yes : UnknownNoYes::No;

                SysTransactionScopeCache::set(tableStr(WHSInventFixedLocation), cacheKey, recordExists);
            }

            return recordExists == UnknownNoYes::Yes;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheKey</Name>
				<Source><![CDATA[
    private static str getCacheKey(ItemId _itemId, InventLocationId _inventLocationId)
    {
        return _itemId + '#' + _inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSInventFixedLocation</c> record with given parameters.
	/// </summary>
	/// <param name="_itemId">
	/// Item id of the record.
	/// </param>
	/// <param name="_inventLocationId">
	/// Warehouse id of the record.
	/// </param>
	/// <param name="_inventSiteId">
	/// Site id of the record.
	/// </param>
	/// <param name="_wmsLocationId">
	/// Location id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSInventFixedLocation find(ItemId            _itemId,
                                              InventLocationId  _inventLocationId,
                                              InventSiteId      _inventSiteId,
                                              WMSLocationId     _wmsLocationId,
                                              boolean           _forupdate = false)
    {
        WHSInventFixedLocation      inventFixedLocation;

        if (_itemId &&
            _inventLocationId &&
            _inventSiteId &&
            _wmsLocationId)
        {
            inventFixedLocation.selectForUpdate(_forupdate);

            select firstOnly inventFixedLocation
                where inventFixedLocation.ItemId            == _itemId              &&
                      inventFixedLocation.InventLocationId  == _inventLocationId    &&
                      inventFixedLocation.InventSiteId      == _inventSiteId        &&
                      inventFixedLocation.WMSLocationId     == _wmsLocationId;
        }

        return inventFixedLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@SYP4980018</DeveloperDocumentation>
	<Label>@SYP4980013</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>WMSLocationId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ItemWarehouseSiteLocationIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ItemWarehouseSiteLocationIdx</PrimaryIndex>
	<ReplacementKey>ItemWarehouseSiteLocationIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemWarehouseSiteLocationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventSiteId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WMSLocationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventStorageDimMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<SourceEDT>InventSiteId</SourceEDT>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationId</Name>
					<Field>WMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>