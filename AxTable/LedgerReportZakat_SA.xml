<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerReportZakat_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerReportZakat_SA extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(
        LedgerFiscalYearZakat_SA   _fiscalYear,
        LedgerReportTypeZakat_SA   _reportType)
    {
        boolean ret = true;

        if (! LedgerReportZakat_SA::exist(_fiscalYear, _reportType))
        {
            ret = checkFailed(strfmt(LedgerReportZakat_SA::txtNotExist(), _reportType, _fiscalYear));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSelectNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether empty select year of records are not exist.
    /// </summary>
    /// <returns>
    /// true if the empty select year records are not exits; otherwise, false.
    /// </returns>
    public static boolean checkSelectNotExist()
    {
        LedgerReportZakat_SA  ledgerReportZakat;

        select firstonly RecId from ledgerReportZakat;
        if (!ledgerReportZakat.RecID)
        {
            return true;
        }

        return (select firstonly RecId
                    from ledgerReportZakat_SA
                        where ! ledgerReportZakat_SA.SelectYear).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkYearExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the record exists in the table with specified fiscal year.
    /// </summary>
    /// <param name="_fiscalYear">
    /// The fiscal year.
    /// </param>
    /// <returns>
    /// true if the record exits; otherwise, false.
    /// </returns>
    public static boolean checkYearExist(LedgerFiscalYearZakat_SA _fiscalYear)
    {
        return ((select firstonly RecId
                    from ledgerReportZakat_SA
                        where ledgerReportZakat_SA.FiscalYear == _fiscalYear).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkZakatReports</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the record exists in the table with specified fiscal year,
    /// and whether delete records before regenerate.
    /// </summary>
    /// <param name="_fiscalYear">
    /// The fiscal year.
    /// </param>
    /// <returns>
    /// true if the record exits; otherwise, false.
    /// </returns>
    public static boolean checkZakatReports(LedgerFiscalYearZakat_SA  _fiscalYear)
    {
        LedgerReportZakat_SA    ledgerReportZakat;
        boolean                 ret;

        if (_fiscalYear && LedgerReportZakat_SA::checkYearExist(_fiscalYear))
        {
            if (Box::okCancel("@SYS322400", DialogButton::Cancel) == DialogButton::Ok)
            {
                delete_from ledgerReportZakat
                    where ledgerReportZakat.FiscalYear == _fiscalYear;

                ret = true;
            }
        }
        else if (!ret && _fiscalYear)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the table.
    /// </summary>
    /// <param name="_fiscalYear">
    /// The fiscal year of the <c>LedgerReportZakat_SA</c> table record.
    /// </param>
    /// <param name="_reportType">
    /// The report type of the <c>LedgerReportZakat_SA</c> table record.
    /// </param>
    /// <returns>
    /// true if the record exits; otherwise, false.
    /// </returns>
    public static boolean exist(
        LedgerFiscalYearZakat_SA  _fiscalYear,
        LedgerReportTypeZakat_SA  _reportType)
    {
        return (_fiscalYear
            && _reportType
            && (select firstonly RecId
                    from ledgerReportZakat_SA
                        where ledgerReportZakat_SA.FiscalYear == _fiscalYear
                           && ledgerReportZakat_SA.ReportType == _reportType).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>LedgerReportZakat_SA</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>LedgerReportZakat_SA</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerReportZakat_SA</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerReportZakat_SA find(
        recId               _recId,
        boolean             _forUpdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerReportZakat_SA  ledgerReportZakat;

        ledgerReportZakat.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerReportZakat.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerReportZakat
            where ledgerReportZakat.RecId == _recId;

        return ledgerReportZakat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByYrReportType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in <c>LedgerReportZakat_SA</c> table with specified fiscal year and report type.
    /// </summary>
    /// <param name="_fiscalYear">
    /// The fiscal year of the <c>LedgerReportZakat_SA</c> record.
    /// </param>
    /// <param name="_reportType">
    /// The report type of the <c>LedgerReportZakat_SA</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerReportZakat_SA</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerReportZakat_SA findByYrReportType(
        LedgerFiscalYearZakat_SA    _fiscalYear,
        LedgerReportTypeZakat_SA    _reportType,
        boolean                     _forUpdate        = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerReportZakat_SA  ledgerReportZakat;

        if ( _fiscalYear != 0)
        {
            ledgerReportZakat.selectForUpdate(_forUpdate);

            if (_forUpdate
                && _concurrencyModel != ConcurrencyModel::Auto)
            {
                ledgerReportZakat.concurrencyModel(_concurrencyModel);
            }

            select firstonly ledgerReportZakat
                where ledgerReportZakat.FiscalYear   == _fiscalYear
                   && ledgerReportZakat.ReportType   == _reportType;
        }

        return ledgerReportZakat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS322401";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePeriodStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates period status to closed.
    /// </summary>
    public static void updatePeriodStatus()
    {
        FiscalCalendarYear          fiscalCalendarYear;
        LedgerFiscalCalendarYear    ledgerFiscalCalendarYear;
        LedgerReportZakat_SA        ledgerReportZakat;

        while select EndDate from fiscalCalendarYear
            exists join ledgerFiscalCalendarYear
                where ledgerFiscalCalendarYear.FiscalCalendarYear == fiscalCalendarYear.RecId
                   && ledgerFiscalCalendarYear.Ledger == Ledger::current()
                   && ledgerFiscalCalendarYear.Status == FiscalYearStatus::Close
        {
            update_recordset ledgerReportZakat
                setting Status = FiscalPeriodStatus::Closed
                where ledgerReportZakat.FiscalYear == year(fiscalCalendarYear.EndDate)
                   && ledgerReportZakat.Status     != FiscalPeriodStatus::Closed;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateZakatReports</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the select year of the record of <c>LedgerReportZakat_SA</c> record.
    /// </summary>
    /// <param name="_noYes">
    /// The select year.
    /// </param>
    public static void updateZakatReports(NoYesId _noYes)
    {
        LedgerReportZakat_SA ledgerReportZakat;

        update_recordset ledgerReportZakat
            setting SelectYear = _noYes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeZakatReports</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes Zakat report records with specified fiscal year and description.
    /// </summary>
    /// <param name="_fiscalYear">
    /// The fiscal year.
    /// </param>
    /// <param name="_description">
    /// The description.
    /// </param>
    public static void writeZakatReports(
        LedgerFiscalYearZakat_SA    _fiscalYear,
        Description                 _description)
    {
        FiscalPeriodStatus          periodStatus;
        FiscalCalendarYear          fiscalCalendarYear;
        LedgerFiscalCalendarYear    ledgerFiscalCalendarYear;
        LedgerReportIndexZakat_SA   ledgerReportIndexZakat;
        LedgerReportZakat_SA        ledgerReportZakat;
        FiscalPeriodEnd             periodEnd;

        while select EndDate from fiscalCalendarYear
            exists join ledgerFiscalCalendarYear
                where ledgerFiscalCalendarYear.FiscalCalendarYear == fiscalCalendarYear.RecId
                   && ledgerFiscalCalendarYear.Ledger == Ledger::current()
                   && ledgerFiscalCalendarYear.Status == FiscalYearStatus::Close
        {
            if (year(fiscalCalendarYear.EndDate) == _fiscalYear)
            {
                periodStatus = FiscalPeriodStatus::Open;
                periodEnd    = fiscalCalendarYear.EndDate;
                break;
            }
        }

        while select ReportType from ledgerReportIndexZakat
        {
            ledgerReportZakat.FiscalYear          = _fiscalYear;
            ledgerReportZakat.Description         = _description;
            ledgerReportZakat.Status              = periodStatus;
            ledgerReportZakat.ReportType          = ledgerReportIndexZakat.ReportType;
            ledgerReportZakat.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>SA</CountryRegionCodes>
	<DeveloperDocumentation>@SYS322148</DeveloperDocumentation>
	<FormRef>LedgerReportZakat_SA</FormRef>
	<Label>@SYS321609</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ReportType</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>YrReportTypeIdx</ClusteredIndex>
	<Modules>Ledger</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SelectYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Select</Name>
			<Label>@SYS7444</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Zakat</Name>
			<Label>@SYS321586</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SelectYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FiscalYear</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerFiscalYearZakat_SA</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReportType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerReportTypeZakat_SA</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SelectYear</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS2245</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS131469</Label>
			<EnumType>FiscalPeriodStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>YrReportTypeIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>FiscalYear</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReportType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>