<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSRFDefaultData</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSRFDefaultData extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupWMSLocationId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Contains code for WMSLocation table lookup.
	/// </summary>
	/// <param name="_ctrl">
	/// Form control that lookup belongs to.
	/// </param>
	/// <param name="_inventLocationId">
	/// Warehouse id to be used as a criterion.
	/// </param>
    void lookupWMSLocationId(FormStringControl _ctrl, InventLocationId _inventLocationId)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        sysTableLookup          = SysTableLookup::newParameters(tablenum(WMSLocation), _ctrl);
        query                   = new Query();
        queryBuildDataSource    = query.addDataSource(tablenum(WMSLocation));

        sysTableLookup.addLookupfield(fieldnum(WMSLocation, WMSLocationId));
        sysTableLookup.addLookupfield(fieldnum(WMSLocation, locationType));
        queryBuildDataSource.addRange(fieldnum(WMSLocation, InventLocationId)).value(_inventLocationId ? _inventLocationId : SysQuery::valueEmptyString());

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean     ret;

        ret = super();

        if (ret && !this.DefaultDataValue && (this.DefaultDataField   != WHSDefaultDataField::FromInventStatus  &&
                                              this.DefaultDataField   != WHSDefaultDataField::ToInventStatus))
        {
            ret = checkFailed("@WAX1129");
        }

        if (ret && WHSRFDefaultDataValueValidateValueLenghtFlight::instance().isEnabled())
        {
            int baseEDTLen = this.getDefaultDataFieldMaximumValueLength();
            if (baseEDTLen && strLen(this.DefaultDataValue) > baseEDTLen)
            {
                ret = checkFailed(strFmt("@SYS88485", fieldId2PName(this.TableId, fieldNum(WHSRFDefaultData, DefaultDataValue))));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDataFieldMaximumValueLength</Name>
				<Source><![CDATA[
    public int getDefaultDataFieldMaximumValueLength()
    {
        if (this.DefaultDataField && this.DefaultDataValue)
        {
            switch (this.DefaultDataField)
            {
                case WHSDefaultDataField::ToLocation:
                case WHSDefaultDataField::FromLocation:
                    return SysDictType::newName(extendedTypeStr(InventLocationId)).stringLen();

                case WHSDefaultDataField::FromInventStatus:
                case WHSDefaultDataField::ToInventStatus:
                    return SysDictType::newName(extendedTypeStr(WHSInventStatusId)).stringLen();

                case WHSDefaultDataField::Color:
                    return SysDictType::newName(extendedTypeStr(EcoResItemColorName)).stringLen();

                case WHSDefaultDataField::Config:
                    return SysDictType::newName(extendedTypeStr(EcoResItemConfigurationName)).stringLen();

                case WHSDefaultDataField::Size:
                    return SysDictType::newName(extendedTypeStr(EcoResItemSizeName)).stringLen();

                case WHSDefaultDataField::UOM:
                    return SysDictType::newName(extendedTypeStr(UnitOfMeasureSymbol)).stringLen();

                case WHSDefaultDataField::Item:
                    return SysDictType::newName(extendedTypeStr(ItemId)).stringLen();

                case WHSDefaultDataField::Style:
                    return SysDictType::newName(extendedTypeStr(EcoResItemStyleName)).stringLen();

                case WHSDefaultDataField::Version:
                    return SysDictType::newName(extendedTypeStr(EcoResItemVersionName)).stringLen();

                case WHSDefaultDataField::Disposition:
                    return SysDictType::newName(extendedTypeStr(WHSDispositionCode)).stringLen();

                case WHSDefaultDataField::ContainerType:
                    return SysDictType::newName(extendedTypeStr(WHSContainerTypeCode)).stringLen();

				default:
					return 0;
            }
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if a specific <c>WHSRFDefaultData</c> record exists.
	/// </summary>
	/// <param name="_menuItemName">
	/// Menu item name of the record.
	/// </param>
	/// <param name="_field">
	/// Default data field of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(WHSMenuItemName         _menuItemName,
                                WHSDefaultDataField     _field)
    {
        return (_menuItemName && _field) &&
               (select firstonly WHSRFDefaultData
                where WHSRFDefaultData.MenuItemName      == _menuItemName &&
                      WHSRFDefaultData.DefaultDataField  == _field).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSRFDefaultData</c> record with given parameters.
	/// </summary>
	/// <param name="_menuItemName">
	/// Menu item name of the record.
	/// </param>
	/// <param name="_field">
	/// Default data field of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSRFDefaultData find(WHSMenuItemName         _menuItemName,
                                        WHSDefaultDataField     _field,
                                        boolean                 _forupdate = false)
    {
        WHSRFDefaultData    defaultData;

        if (_menuItemName && _field)
        {
            defaultData.selectForUpdate(_forupdate);

            select firstonly defaultData
                where defaultData.MenuItemName       == _menuItemName    &&
                      defaultData.DefaultDataField   == _field;
        }

        return defaultData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarehouseForDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the warehouse from a <c>WHSRFDefaultData</c> record.
    /// </summary>
    /// <param name="_menuItemName">
    /// Menu item name of the record.
    /// </param>
    /// <param name="_defaultDataField">
    /// Default data field of the record.
    /// </param>
    /// <returns>Warehouse id of the record.</returns>
    public static InventLocationId getWarehouseForDefaultValue(WHSMenuItemName         _menuItemName,
                                                               WHSDefaultDataField     _defaultDataField)
    {
        return WHSRFDefaultData::find(_menuItemName, _defaultDataField).InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultValue</Name>
				<Source><![CDATA[
	/// <summary>
	/// Gets the default value from a <c>WHSRFDefaultData</c> record.
	/// </summary>
	/// <param name="_menuItemName">
	/// Menu item name of the record.
	/// </param>
	/// <param name="_defaultDataField">
	/// Default data field of the record.
	/// </param>
	/// <param name="_userId">
	/// Current user id.
	/// </param>
	/// <param name="_inventLocationId">
	/// Warehouse id of the record.
	/// </param>
	/// <param name="_locationId">
	/// Location id of the record.
	/// </param>
	/// <param name="_pass">
	/// Map containing pass through information.
	/// </param>
	/// <returns>
	/// Default value of the field.
	/// </returns>
    static WHSDefaultDataValue getDefaultValue(WHSMenuItemName          _menuItemName,
                                               WHSDefaultDataField      _defaultDataField,
                                               WHSUserId                _userId,
                                               InventLocationId         _inventLocationId,
                                               WMSLocationId            _locationId,
                                               WHSRFPassthrough         _pass = null)
    {
        #WHSRF
        WHSRFDefaultData        defaultData;
        boolean                 found = false;
        WHSRFPassthrough        pass = _pass;

        select firstOnly DefaultDataValue from defaultData
            where defaultData.MenuItemName       == _menuItemName        &&
                    defaultData.DefaultDataField   == _defaultDataField    &&
                    defaultData.InventLocationId   == _inventLocationId    &&
                    defaultData.WMSLocationId      == _locationId;

        if (defaultData)
        {
            found = true;
        }

        if (!found)
        {
            select firstOnly DefaultDataValue from defaultData
                where defaultData.MenuItemName       == _menuItemName        &&
                      defaultData.DefaultDataField   == _defaultDataField    &&
                      defaultData.InventLocationId   == _inventLocationId;

            if (defaultData)
            {
                found = true;
            }
        }

        if (!found)
        {
            select firstOnly DefaultDataValue from defaultData
                where defaultData.MenuItemName       == _menuItemName        &&
                      defaultData.DefaultDataField   == _defaultDataField;

            if (defaultData)
            {
                found = true;
            }
        }

        if (pass != null && found)
        {
            pass.insert(#DefaultDataFound, 1);
        }

        return defaultData.DefaultDataValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultValueForWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default value from a <c>WHSRFDefaultData</c> record for a specific warehouse.
    /// </summary>
    /// <param name="_menuItemName">
    /// Menu item name of the record.
    /// </param>
    /// <param name="_defaultDataField">
    /// Default data field of the record.
    /// </param>
    /// <param name="_inventLocationId">
    /// Warehouse id of the record.
    /// </param>
    /// <returns>
    /// Default value of the field.
    /// </returns>
    [Hookable(false)]
    static internal WHSDefaultDataValue findDefaultValueForWarehouse(WHSMenuItemName          _menuItemName,
                                                                   WHSDefaultDataField      _defaultDataField,
                                                                   InventLocationId         _inventLocationId)
    {
        WHSRFDefaultData        defaultData;
        
        select firstonly DefaultDataValue from defaultData
            where defaultData.MenuItemName       == _menuItemName        
                  && defaultData.DefaultDataField   == _defaultDataField  
                  && (defaultData.InventLocationId   == _inventLocationId 
                        || defaultData.InventLocationId   == '');

        return defaultData.DefaultDataValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4424</DeveloperDocumentation>
	<Label>@WAX1119</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>MenuItemName</TitleField1>
	<TitleField2>DefaultDataField</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>MenuItemNameDefaultDataFieldIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>MenuItemNameDefaultDataFieldIdx</PrimaryIndex>
	<ReplacementKey>MenuItemNameDefaultDataFieldIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MenuItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDataField</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDataValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MenuItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDataField</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MenuItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDataField</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDataValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DefaultDataField</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSDefaultDataField</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultDataValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDefaultDataValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MenuItemName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMenuItemName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>MenuItemNameDefaultDataFieldIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>MenuItemName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DefaultDataField</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSRFMenuItemTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSRFMenuItemTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MenuItemName</Name>
					<SourceEDT>WHSMenuItemName</SourceEDT>
					<Field>MenuItemName</Field>
					<RelatedField>MenuItemName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>