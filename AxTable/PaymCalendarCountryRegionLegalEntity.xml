<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymCalendarCountryRegionLegalEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PaymCalendarCountryRegionLegalEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the current record.
    /// </summary>
    /// <remarks>
    /// This method was overridden to flush the necessary caches upon table change.
    /// </remarks>
    public void delete()
    {
        super();

        // Flush cache
        PaymCalendarProcessor::calendarForLocationChanged();
        PaymCalendarProcessor::paymCalendarRuleChanged();
        PaymCalendarProcessor::paymCalendarChanged();
        PaymCalendarProcessor::stateHolidayChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the table buffer contents as a new database record.
    /// </summary>
    /// <remarks>
    /// This method was overridden to flush the necessary caches upon table change.
    /// </remarks>
    public void insert()
    {
        super();

        // Flush cache
        PaymCalendarProcessor::calendarForLocationChanged();
        PaymCalendarProcessor::paymCalendarRuleChanged();
        PaymCalendarProcessor::paymCalendarChanged();
        PaymCalendarProcessor::stateHolidayChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the table buffer to the database record.
    /// </summary>
    /// <remarks>
    /// This method was overridden to flush the necessary caches upon table change.
    /// </remarks>
    public void update()
    {
        super();

        // Flush cache
        PaymCalendarProcessor::calendarForLocationChanged();
        PaymCalendarProcessor::paymCalendarRuleChanged();
        PaymCalendarProcessor::paymCalendarChanged();
        PaymCalendarProcessor::stateHolidayChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>PaymCalendarCountryRegionLegalEntity</c> table; if not, an error
    /// message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>PaymCalendarCountryRegionLegalEntity</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean isExisting = true;

        if (!PaymCalendarCountryRegionLegalEntity::exist(_recId))
        {
            isExisting = checkFailed(strFmt(PaymCalendarCountryRegionLegalEntity::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>PaymCalendarCountryRegionLegalEntity</c>
    /// table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of a <c>PaymCalendarCountryRegionLegalEntity</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        PaymCalendarCountryRegionLegalEntity paymCalendarCountryRegionLegalEntity;

        select firstonly RecId from paymCalendarCountryRegionLegalEntity
            where paymCalendarCountryRegionLegalEntity.RecId == _recId;

        return paymCalendarCountryRegionLegalEntity != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>PaymCalendarCountryRegionLegalEntity</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>PaymCalendarCountryRegionLegalEntity</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PaymCalendarCountryRegionLegalEntity</c> table; otherwise, an empty record.
    /// </returns>
    public static PaymCalendarCountryRegionLegalEntity find(
        recId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PaymCalendarCountryRegionLegalEntity paymCalendarCountryRegionLegalEntity;

        paymCalendarCountryRegionLegalEntity.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            paymCalendarCountryRegionLegalEntity.concurrencyModel(_concurrencyModel);
        }

        select firstonly paymCalendarCountryRegionLegalEntity
            where paymCalendarCountryRegionLegalEntity.RecId == _recId;

        return paymCalendarCountryRegionLegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLegalEntityTypePaymentCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>PaymCalendarCountryRegionLegalEntity</c> table.
    /// </summary>
    /// <param name="_legalEntity">
    /// The record ID of a <c>CompanyInfo</c> record.
    /// </param>
    /// <param name="_moduleType">
    /// The module associated to the payment calendar.
    /// </param>
    /// <param name="_paymCalendarCountryRegion">
    /// The record ID of a <c>PaymCalendarCountryRegion</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PaymCalendarCountryRegionLegalEntity</c> table; otherwise, an empty record.
    /// </returns>
    public static PaymCalendarCountryRegionLegalEntity findByLegalEntityTypePaymentCalendar(
        DataAreaId _dataAreaId,
        PaymCalendarModuleType _moduleType,
        PaymCalendarCountryRegionRecId _paymCalendarCountryRegion,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PaymCalendarCountryRegionLegalEntity paymCalendarCountryRegionLegalEntity;

        changecompany(_dataAreaId)
        {
            paymCalendarCountryRegionLegalEntity.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                paymCalendarCountryRegionLegalEntity.concurrencyModel(_concurrencyModel);
            }

            select firstonly paymCalendarCountryRegionLegalEntity
                where paymCalendarCountryRegionLegalEntity.ModuleType == _moduleType
                    && paymCalendarCountryRegionLegalEntity.PaymCalendarCountryRegion == _paymCalendarCountryRegion;
        }

        return paymCalendarCountryRegionLegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>PaymCalendarCountryRegionLegalEntity</c> table does not exist.
    /// </summary>
    /// <returns>
    /// The message that indicates a record does not exists.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PaymCalendar</ConfigurationKey>
	<DeveloperDocumentation>@CashManagement:GLS220122</DeveloperDocumentation>
	<Label>@CashManagement:GLS220121</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>ModuleType</TitleField1>
	<TitleField2>DataAreaId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>Bank</Modules>
	<ReplacementKey>LegalEntityModuleCalendarIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IncludeStateHoliday</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymCalendarCountryRegion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CountryCalendar</Name>
			<Label>@GLS220125</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymCalendarCountryRegion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeStateHoliday</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeStateHoliday</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS220123</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>PaymCalendarModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PaymCalendarCountryRegion</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PaymCalendarCountryRegionRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>LegalEntityRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LegalEntityModuleCalendarIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ModuleType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PaymCalendarCountryRegion</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymCalendarCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PaymCalendarCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymCalendarCountryRegion</Name>
					<Field>PaymCalendarCountryRegion</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>