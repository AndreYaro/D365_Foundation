<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferTableFiscalInfo_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransferTableFiscalInfo_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateReceiveFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns if the transfer order creates fiscal document when received
    /// </summary>
    /// <returns>
    ///     True if a fiscal document can be created, otherwise false
    /// </returns>
    public boolean canCreateReceiveFiscalDocument()
    {
        return InventTransferTable::canCreateReceiveFiscalDocument_BR(this.InventTransferOrderType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateShipmentFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns if the transfer order creates fiscal document when shipped
    /// </summary>
    /// <returns>
    ///     True if a fiscal document can be created, otherwise false
    /// </returns>
    public boolean canCreateShipmentFiscalDocument()
    {
        return InventTransferTable::canCreateShipmentFiscalDocument_BR(this.InventTransferOrderType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRejectedThirdPartyTransferFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns rejected third party transfer fiscal document related to the <c>InventTransferTableFiscalInfo_BR</c>.
    /// </summary>
    /// <returns>
    ///     The <c>FiscalDocument_BR</c> record.
    /// </returns>
    public FiscalDocument_BR getRejectedThirdPartyTransferFiscalDocument()
    {
        FiscalDocument_BR fiscalDocument;

        if (this.InventTransferOrderType == InventTransferOrderType_BR::ThirdPartyReturn)
        {
            Query query = new Query();
            QueryBuildDataSource qbdsFiscalDocument = query.addDataSource(tableNum(FiscalDocument_BR));
            qbdsFiscalDocument.firstOnly(true);
            qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, Status)).value(queryValue(FiscalDocumentStatus_BR::Rejected));
            qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, Status)).value(queryValue(FiscalDocumentStatus_BR::RejectedNoFix));
            qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, FiscalDocumentIssuer)).value(queryValue(FiscalDocumentIssuer_BR::OwnEstablishment));
            qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, Direction)).value(queryValue(FiscalDocDirection_BR::Outgoing));

            QueryBuildDataSource qbdsFiscalReference = qbdsFiscalDocument.addDataSource(tableNum(FiscalReferenceParm_BR));
            qbdsFiscalReference.relations(true);
            qbdsFiscalReference.joinMode(JoinMode::ExistsJoin);
            qbdsFiscalReference.addRange(fieldNum(FiscalReferenceParm_BR, SourceTableId)).value(queryValue(tableNum(InventTransferTable)));
            qbdsFiscalReference.addRange(fieldNum(FiscalReferenceParm_BR, SourceRecId)).value(queryValue(this.InventTransferTable));

            QueryRun queryRun = new QueryRun(query);

            if (queryRun.next())
            {
                fiscalDocument = queryRun.get(tableNum(FiscalDocument_BR));
            }
        }

        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalEstablishmentRecId</Name>
				<Source><![CDATA[
    private RecId fiscalEstablishmentRecId(InventLocationId _inventLocationId)
    {
        FiscalEstablishmentInventSite_BR    fiscalEstablishmentInventSite;
        InventSite                          inventSite;
        InventLocation                      inventLocation;
        FiscalEstablishment_BR              fiscalEstablishment;

        select RecId from fiscalEstablishment
            exists join fiscalEstablishmentInventSite
                where fiscalEstablishmentInventSite.FiscalEstablishment_BR == fiscalEstablishment.RecId
            exists join inventSite
                where inventSite.SiteId == fiscalEstablishmentInventSite.InventSite
            exists join inventLocation
                where inventLocation.InventSiteId == inventSite.SiteId
                    && inventLocation.InventLocationId == _inventLocationId;

        return fiscalEstablishment.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromFiscalEstablishmentRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>Fiscalestablishment_BR</c> recId related to the 'From warehouse'.
    /// </summary>
    /// <returns>
    /// The recId of the related <c>Fiscalestablishment_BR</c>.
    /// </returns>

    public RecId fromFiscalEstablishmentRecId()
    {
        return this.fiscalEstablishmentRecId(this.inventTransferTable().InventLocationIdFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromLocationIsThirdParty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates if the from warehouse of the transfer order is a customer or vendor.
    /// </summary>
    /// <returns>
    ///     True if the warehouse is a third party, otherwise false.
    /// </returns>
    public boolean fromLocationIsThirdParty()
    {
        InventLocation                      inventLocation;
        InventTransferTable                 inventTransferTable;

        inventTransferTable = this.inventTransferTable();

        select InventCountingGroup_BR from inventLocation
            where inventLocation.InventLocationId == inventTransferTable.InventLocationIdFrom;

        return inventLocation.InventCountingGroup_BR == InventCountingGroup_BR::OwnStockInOtherPower;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.InventTransferOrderType = InventTransferOrderType_BR::WarehouseTransfer;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (!FormDataUtil::isFormDataSource(this) && !this.InventTransferOrderType)
        {
            this.setOrderType();
            this.setFiscalDocumentType();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransferTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>InventTransferTable</c> record related to the <c>InventTransferTableFiscalInfo_BR</c>.
    /// </summary>
    /// <returns>
    ///     The <c>InventTransferTable</c> record.
    /// </returns>
    public InventTransferTable inventTransferTable()
    {
        return this.SysExtensionSerializerExtensionMap::getBaseTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFiscalEstablishmentOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns if the transfer order is a fiscal establishment transfer
    /// </summary>
    /// <returns>
    ///     True if the transfer order is a fiscal establishment transfer, otherwise false
    /// </returns>
    public boolean isFiscalEstablishmentOrder()
    {
        return this.InventTransferOrderType == InventTransferOrderType_BR::FiscalEstablishmentReturn
                    || this.InventTransferOrderType == InventTransferOrderType_BR::FiscalEstablishmentTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns if the transfer order is a return order
    /// </summary>
    /// <returns>
    ///     True if the transfer order is a return order, otherwise false
    /// </returns>
    public boolean isReturnOrder()
    {
        return this.InventTransferOrderType == InventTransferOrderType_BR::ThirdPartyReturn
                    || this.InventTransferOrderType == InventTransferOrderType_BR::FiscalEstablishmentReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isThirdPartyOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns if the transfer order is a third party transfer
    /// </summary>
    /// <returns>
    ///     True if the transfer order is a third party transfer, otherwise false
    /// </returns>
    public boolean isThirdPartyOrder()
    {
        return this.InventTransferOrderType == InventTransferOrderType_BR::ThirdPartyReturn
                    || this.InventTransferOrderType == InventTransferOrderType_BR::ThirdPartyTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFiscalDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Set the fiscal document type based on default fiscal document type configuration.
    /// </summary>
    public void setFiscalDocumentType()
    {
        InventTransferTable inventTransferTable;
        InventLocation inventLocation;

        if (!this.canCreateShipmentFiscalDocument())
        {
            this.ShipFiscalDocumentType_BR = 0;
            return;
        }

        inventTransferTable = this.inventTransferTable();

        if (inventTransferTable.InventLocationIdFrom && inventTransferTable.InventLocationIdTo)
        {
            this.ShipFiscalDocumentType_BR = this.getRelatedFiscalDocumentType(inventTransferTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedFiscalDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets related document type recId.
    /// </summary>
    /// <param name="_inventTransferTable">Invent transfer table recored.</param>
    /// <returns>RecId of related document type.</returns>
    protected FiscalDocumentTypeRecID_BR getRelatedFiscalDocumentType(InventTransferTable _inventTransferTable)
    {
        FiscalDocumentTypeRecID_BR ret;
        InventLocation inventLocation;

        switch (this.InventTransferOrderType)
        {
            case InventTransferOrderType_BR::FiscalEstablishmentTransfer :
            case InventTransferOrderType_BR::FiscalEstablishmentReturn :
                ret = FiscalEstablishmentFiscalDocumentType_BR::findFiscalDocumentType(
                                FiscalEstablishment_BR::find(this.fromFiscalEstablishmentRecId()),
                                FiscalEstablishment_BR::find(this.toFiscalEstablishmentRecId()).FiscalEstablishmentId);
                break;

            case InventTransferOrderType_BR::ThirdPartyTransfer :
            case InventTransferOrderType_BR::ThirdPartyReturn :
                inventLocation = InventLocation::find(_inventTransferTable.InventLocationIdTo);

                if (inventLocation.VendAccount)
                {
                    ret = VendFiscalDocumentType_BR::findFiscalDocumentType(
                                        inventLocation.VendAccount,
                                        FiscalEstablishment_BR::find(this.fromFiscalEstablishmentRecId()));
                }
                else
                {
                    ret = CustFiscalDocumentType_BR::findFiscalDocumentType(
                                        inventLocation.CustAccount_BR,
                                        FiscalEstablishment_BR::find(this.fromFiscalEstablishmentRecId()),
                                        ItemType::Item);
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the order type based on 'From warehouse' and 'To warehouse'
    /// </summary>
    public void setOrderType()
    {
        this.InventTransferOrderType = InventTransferOrderType_BR::WarehouseTransfer;

        if (this.fromLocationIsThirdParty() || this.toLocationIsThirdParty_BR())
        {
            this.InventTransferOrderType = InventTransferOrderType_BR::ThirdPartyTransfer;
        }
        else if (this.fromFiscalEstablishmentRecId() != this.toFiscalEstablishmentRecId())
        {
            this.InventTransferOrderType = InventTransferOrderType_BR::FiscalEstablishmentTransfer;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toFiscalEstablishmentRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>Fiscalestablishment_BR</c> recId related to the 'From warehouse'.
    /// </summary>
    /// <returns>
    /// The recId of the related <c>Fiscalestablishment_BR</c>.
    /// </returns>
    public RecId toFiscalEstablishmentRecId()
    {
        return this.fiscalEstablishmentRecId(this.inventTransferTable().InventLocationIdTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toLocationIsThirdParty_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates if the to warehouse of the transfer order is a customer or vendor.
    /// </summary>
    /// <returns>
    ///     True if the warehouse is a third party, otherwise false.
    /// </returns>
    public boolean toLocationIsThirdParty_BR()
    {
        InventLocation                      inventLocation;
        InventTransferTable                 inventTransferTable;

        inventTransferTable = this.inventTransferTable();

        select InventCountingGroup_BR from inventLocation
            where inventLocation.InventLocationId == inventTransferTable.InventLocationIdTo;

        return inventLocation.InventCountingGroup_BR == InventCountingGroup_BR::OwnStockInOtherPower;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        InventLocation inventLocation;

        boolean ret;

        ret = super();

        if (this.isThirdPartyOrder())
        {
            inventLocation = InventLocation::find(this.inventTransferTable().InventLocationIdTo);

            if (inventLocation.VendAccount && VendTable::find(inventLocation.VendAccount).NonTaxable_BR)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00033, funcName());
                ret = checkFailed("@GLS222879");
            }
            else if (inventLocation.CustAccount_BR && CustTable::find(inventLocation.CustAccount_BR).GenerateIncomingFiscalDocument_BR)
            {
                ret = checkFailed("@GLS222898");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesCarrierFromTmsCarrier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales carrier code field based on the tms carrier code
    /// </summary>
    /// <param name="_tmsCarrierCode">
    /// Tms carrier code.
    /// </param>
    /// <remarks>
    /// The sales carrier field will be set with the sales carrier that contains the same
    /// vendor of the tms carrier identified by the carrier code.
    /// </remarks>
    public void initSalesCarrierFromTmsCarrier(TMSCarrierCode _tmsCarrierCode)
    {
        TMSCarrier tmsCarrier = TMSCarrier::find(_tmsCarrierCode);

        this.SalesCarrier = tmsCarrier.getSalesCarrierNameByVendor_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>InventTransferOrders</ConfigurationKey>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@GLS222365</DeveloperDocumentation>
	<Label>@SYS78286</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>InventTransferTable</TitleField1>
	<TitleField2>InventTransferOrderType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Inventory</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransferTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransferOrderType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipFiscalDocumentType_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesCarrier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CarrierInformation</Name>
			<Label>@SYS50767</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesCarrier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightChargeTerms</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInformation</Name>
			<Label>@GLS56</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransferTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransferOrderType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipFiscalDocumentType_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FreightChargeTerms</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WMSFreightChargeTerms</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FreightedBy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WMSFreightedBy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventTransferOrderType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTransferOrderType_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventTransferTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesCarrier</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSCarrierName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ShipFiscalDocumentType_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalDocumentTypeRecID_BR</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FiscalDocumentType_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ShipFiscalDocumentType_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransferTableIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransferTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerExtensionMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BaseRecId</MapField>
					<MapFieldTo>InventTransferTable</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalDocumentType_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalDocumentType_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipFiscalDocumentType_BR</Name>
					<Field>ShipFiscalDocumentType_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransferTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTransferTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransferTable</Name>
					<Field>InventTransferTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesCarrier</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesCarrier</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesCarrier</Name>
					<Field>SalesCarrier</Field>
					<RelatedField>CarrierName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CarrierNameIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>