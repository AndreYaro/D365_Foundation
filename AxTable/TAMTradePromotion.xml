<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMTradePromotion</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TAMTradePromotion extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the trade allowance can be submitted to workflow or not.
    /// </summary>
    /// <param name="_workflowType">
    /// The workflow type of the trade allowance.
    /// </param>
    /// <returns>
    /// A boolean value that defines whether the trade allowance can be submitted to workflow or not.
    /// </returns>
    public boolean canSubmitToWorkflow(str _workflowType = '')
    {
        return this.RecId != 0
            && this.wfApprovalStatus == TAMPromoMgmtApprovalStatus::NotSubmitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMerchEventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether there have been any transactions created against the merchandise events
    /// that are related to the Trade Allowance Agreement with the passed <c>TAMPromotionID</c>.
    /// </summary>
    /// <param name="_tamPromotionID">
    /// The <c>TAMPromotionID</c> value of the Trade Allowance Agreement for which to validate the merchandising
    /// events for transactions.
    /// </param>
    /// <returns>
    /// true if there have been transactions created against the related merchandising events; otherwise, false.
    /// </returns>
    public boolean checkMerchEventTrans(TAMPromotionID _tamPromotionID)
    {
        TAMMerchandisingEvent   tamMerchandisingEvent;
        TAMMerchEventTrans      tamMerchEventTrans;
        PdsRebateTable          pdsRebateTable;
        SalesLine               salesLine;
        MCRPriceHistory         priceHistory;
        MCRPriceHistoryRef      priceHistoryRef;
        CustInvoiceTrans        custInvoiceTrans;

        if (_tamPromotionID)
        {
            select firstonly RecId from tamMerchEventTrans
                exists join tamMerchandisingEvent
                    where tamMerchEventTrans.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
                        && tamMerchandisingEvent.PromotionID      == _tamPromotionID;

            if (tamMerchEventTrans)
            {
                return true;
            }

            select firstonly RecId from pdsRebateTable
                exists join tamMerchandisingEvent
                    where pdsRebateTable.tamMerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
                        && tamMerchandisingEvent.PromotionID     == _tamPromotionID;

            if (pdsRebateTable)
            {
                return true;
            }

            select firstonly RecId from tamMerchandisingEvent
                where tamMerchandisingEvent.PromotionID == _tamPromotionID
                exists join priceHistory
                    where priceHistory.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
                exists join priceHistoryRef
                    where priceHistoryRef.PriceHistoryRecId == priceHistory.RecId
                exists join salesLine
                    where salesLine.mcrOrderLine2PriceHistoryRef == priceHistoryRef.mcrOrderLine2PriceHistoryRef
                exists join custInvoiceTrans
                    where custInvoiceTrans.InventTransId == salesLine.InventTransId;

            if (tamMerchandisingEvent)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPerformanceDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the current date is valid for posting lump sum amounts against the trade allowance agreement.
    /// </summary>
    /// <param name="_tamTradePromotion">
    /// The trade allowance agreement record for which to check the performance dates.
    /// </param>
    /// <returns>
    /// true if the current date is valid for posting lump sum amounts; otherwise, false.
    /// </returns>
    public boolean checkPerformanceDates(TAMTradePromotion _tamTradePromotion)
    {
        date    currentDate;
        boolean ret = true;

        currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (_tamTradePromotion.PerformanceStartDate > currentDate
            || (_tamTradePromotion.PerformanceEndDate < currentDate
                && _tamTradePromotion.PerformanceEndDate != dateNull()))
        {
            ret = checkFailed("@MCR4410368");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCalcShipQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the quantity expected to sell during promotion period with lift.
    /// </summary>
    /// <returns>
    /// The expected quantity.
    /// </returns>
    public display MCROverriddenShipQty displayCalcShipQty()
    {
        return  this.BaseUnits * (1 + (this.LiftPercent * 0.01));
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the name of the customer.
    /// </summary>
    /// <returns>
    /// The name of the customer.
    /// </returns>
    public display CustName displayCustName()
    {
        return CustTable::find(this.CustAccount).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current record.
    /// </summary>
    /// <remarks>
    /// A trade promotion's currency should always default to company's currency.
    /// The worker should default to the worker of the current user.
    /// </remarks>
    public void initValue()
    {
        this.Currency = Ledger::accountingCurrency(CompanyInfo::current());
        this.HcmWorkerId = HcmWorker::userId2Worker(curUserId());
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs processing when a field has been modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>fieldId</c> value of the field that has been modified.
    /// </param>
    /// <remarks>
    /// Initializes dates by promotion period.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws if there is an error when updating the promotion status.
    /// </exception>
    public void modifiedField(FieldId _fieldId)
    {
        TAMPromotionPeriod      tamPromotionPeriod;
        TAMCalcMerchandiseCost  tamCalcMerchandiseCost;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(TAMTradePromotion, OverriddenShipQty):
                this.QtyOverridden = true;
                break;

            case fieldNum(TAMTradePromotion, PromotionPeriod):
                tamPromotionPeriod = TAMPromotionPeriod::find(this.PromotionPeriod);

                this.OrdersStartDate = tamPromotionPeriod.OrderStartDate;
                this.OrdersEndDate = tamPromotionPeriod.OrderEndDate;
                this.PerformanceStartDate = tamPromotionPeriod.PerformanceStartDate;
                this.PerformanceEndDate = tamPromotionPeriod.PerformanceEndDate;
                this.ShipmentStartDate = tamPromotionPeriod.ShipmentStartDate;
                this.ShipmentEndDate = tamPromotionPeriod.ShipmentEndDate;
                this.RequestedShipmentStartDate = tamPromotionPeriod.RequestedShipmentStartDate;
                this.RequestedShipmentEndDate = tamPromotionPeriod.RequestedShipmentEndDate;
                break;

            case fieldNum(TAMTradePromotion, CustAccount):
                this.Currency = CustTable::find(this.CustAccount).Currency;
                break;

            case fieldNum(TAMTradePromotion, BaseUnits):
            case fieldNum(TAMTradePromotion, LiftPercent):
                if (!this.OverriddenShipQty || !this.QtyOverridden)
                {
                    this.OverriddenShipQty = this.displayCalcShipQty();
                }
                break;

            case fieldNum(TAMTradePromotion, PromotionStatus):
                if (this.PromotionStatus != this.orig().PromotionStatus)
                {
                    try
                    {
                        // Calculate merchandise cost.
                        tamCalcMerchandiseCost = new TAMCalcMerchandiseCost(
                            TAMPromoMerchEvent::Promotion,
                            '',
                            this.PromotionID,
                            this.CustAccount);

                        tamCalcMerchandiseCost.calcPromotionCost();
                        this.statusChanged();
                    }
                    catch
                    {
                        this.PromotionStatus = this.orig().PromotionStatus;
                        throw error("@SYS78886");
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRebateAgreementStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status of the rebate agreement based on the related promotion status.
    /// </summary>
    public void setRebateAgreementStatus()
    {
        TAMMerchandisingEvent       tamMerchEvent;
        PdsRebateAgreement          pdsRebateAgreementLocal;
        PdsRebateTable              pdsRebateTable;
        RecId                       workerId;
        boolean                     invalidated = false;
        date						dateMin = dateNull();
        date						dateMax = maxDate();

        void invalidateAgreement()
        {
            pdsRebateAgreementLocal.Validated                      = false;
            pdsRebateAgreementLocal.Verifier                       = 0;
            pdsRebateAgreementLocal.tamCustRebateApprovalStatus    = TAMCustRebateApprovalStatus::NotSubmitted;

            pdsRebateAgreementLocal.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
            pdsRebateAgreementLocal.doUpdate();

            invalidated = true;
        }

        if (this.PromotionStatus == TAMStatus::InProcess)
        {
            ttsbegin;
            while select MerchandisingEventID from tamMerchEvent
                where tamMerchEvent.PromotionID == this.PromotionID
                    && tamMerchEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::BillBack
                join forupdate pdsRebateAgreementLocal
                    where pdsRebateAgreementLocal.tamMerchandisingEventID == tamMerchEvent.MerchandisingEventID
                        && pdsRebateAgreementLocal.Validated != false
                notexists join pdsRebateTable
                    where pdsRebateTable.PdsRebateAgreementRefRecId == pdsRebateAgreementLocal.RecId
            {
                invalidateAgreement();
            }

            ttscommit;
        }
        else if (this.PromotionStatus == TAMStatus::Closed)
        {
            ttsbegin;
            while select MerchandisingEventID from tamMerchEvent
                where tamMerchEvent.PromotionID == this.PromotionID
                    && tamMerchEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::BillBack
                join forupdate pdsRebateAgreementLocal
                    where pdsRebateAgreementLocal.tamMerchandisingEventID == tamMerchEvent.MerchandisingEventID
                        && pdsRebateAgreementLocal.Validated != false
            {
                invalidateAgreement();
            }
            ttscommit;
        }
        else if (this.PromotionStatus == TAMStatus::CustomerApproved)
        {
            workerId = HcmWorker::userId2Worker(curUserId());
            ttsbegin;
            if (workerId)
            {
                while select validtimestate(dateMin, dateMax) MerchandisingEventID from tamMerchEvent
                    where tamMerchEvent.PromotionID == this.PromotionID
                        && tamMerchEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::BillBack
                    join forupdate pdsRebateAgreementLocal
                        where pdsRebateAgreementLocal.tamMerchandisingEventID == tamMerchEvent.MerchandisingEventID
                            && pdsRebateAgreementLocal.Validated != true
                    notexists join pdsRebateTable
                        where pdsRebateTable.PdsRebateAgreementRefRecId == pdsRebateAgreementLocal.RecId
                {
                    if (pdsRebateAgreementLocal.checkIfLineExists()
                        && pdsRebateAgreementLocal.checkLineBreaks()
                        && pdsRebateAgreementLocal.checkUOMConvert())
                    {
                        pdsRebateAgreementLocal.Validated = true;
                        pdsRebateAgreementLocal.Verifier = workerId;

                        pdsRebateAgreementLocal.update();
                    }
                    else
                    {
                        this.PromotionStatus = TAMStatus::InProcess;
                        this.update();
                        break;
                    }
                }
            }
            else
            {
                this.PromotionStatus = TAMStatus::InProcess;
                this.update();

                error("@SYS335749");
            }
            ttscommit;
        }
        if (invalidated)
        {
            info("@PDS1408");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and processes when the status changes on a trade promotion.
    /// </summary>
    /// <param name="_endOfPeriodPromotion">
    /// A <c>Boolean</c> value indicating whether it is an end of period promotion.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws if the promotion is missing a unit of measure.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws if a merchandising event unit of measure cannot be converted to
    /// the promotion's unit of measure.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws if the rebate of a billback merchanding event is not valid.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws if lump sum merchandising event is missing required fields.
    /// </exception>
    public void statusChanged(boolean _endOfPeriodPromotion = false)
    {
        TAMCreateTradeAgreements tamCreateTradeAgreements = new TAMCreateTradeAgreements(this);
        TAMMerchandisingEvent    tamMerchandisingEvent;
        TAMMerchEventPricing     tamMerchEventPricing;
        TAMPromotionItem         tamPromotionItem;
        boolean                  valid = true;

        if (this.PromotionStatus == TAMStatus::CustomerApproved)
        {
            // Validate status change.
            try
            {
                if (!this.UnitID)
                {
                    throw error("@MCR28566");
                }

                // Validate that correct dates are provided based on the merch event categories.
                // Validate rebate.
                while select MerchandisingEventID, UnitID, ItemID, InventDimID from tamPromotionItem
                    join MerchandisingEventCategory, MerchandisingEventID from tamMerchandisingEvent
                    where tamPromotionItem.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
                       && tamMerchandisingEvent.PromotionID    == this.PromotionID
                {
                    valid = EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(tamPromotionItem.ItemID,
																										 tamPromotionItem.InventDimID,
																										 tamPromotionItem.UnitID,
																										 this.UnitID);
                    if (!valid)
                    {
                        throw error(strFmt("@MCR28570",
                            tamPromotionItem.UnitID,
                            tamPromotionItem.MerchandisingEventID,
                            this.UnitID));
                    }

                    if (tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::LumpSum)
                    {
                        ttsbegin;
                        tamMerchEventPricing = TAMMerchEventPricing::findMerchEvent(tamMerchandisingEvent.MerchandisingEventID, true);
                        // Approved amount should not include overhead cost
                        if (tamMerchEventPricing && tamMerchEventPricing.LumpSumApprovedAmount !=0)
                        {
                            tamMerchEventPricing.LumpSumApprovedAmount = tamMerchEventPricing.LumpSumAmount;

                            if (tamMerchEventPricing.validateWrite())
                            {
                                tamMerchEventPricing.update();
                            }
                            else
                            {
                                throw error("@SYS18447");
                            }
                        }

                        ttscommit;
                    }
                    else
                    {
                        TAMCreateTradeAgreements::validateDiscountSetup(tamMerchandisingEvent.MerchandisingEventID);
                    }
                }

                // Checks the following:
                // Customers on merchandising event are also on all funds.
                // Items on merchandising event are also on funds.
                // Items on merchandising event are also on funds.
                // The fund is approved.
                // Each merchandising event has 100% assigned for funds.
                // Each merchandising event has a costing level.
                if (valid)
                {
                    valid = this.validateFundCostLevel();
                }

                if (!this.OverriddenShipQty && !_endOfPeriodPromotion)
                {
                    warning("@MCR28485");
                }
            }
            catch
            {
                this.PromotionStatus = this.orig().PromotionStatus;
                if (_endOfPeriodPromotion)
                {
                    info("@MCR28602");
                    info("@MCR27824");
                }
                valid = false;
            }

            if (valid)
            {
                this.Activity = true;
                // Create trade agreements/rebates/lumpsum pricing bassed on type.  As part of this
                // all merchandising events must have items and discount info.
                tamCreateTradeAgreements.createTradeAgreements();
            }
        }
        else
        {
            while select MerchandisingEventID from tamMerchandisingEvent
                    where tamMerchandisingEvent.PromotionID   == this.PromotionID
                       && tamMerchandisingEvent.PromotionCust == this.CustAccount
            {
                TAMCreateTradeAgreements::deleteTradeAgreements(tamMerchandisingEvent.MerchandisingEventID);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        TAMCalcMerchandiseCost tamCalcMerchandiseCost;
        TAMPromotionStatus     tamPromotionStatus;

        tamPromotionStatus = this.orig().PromotionStatus;
        if (this.PromotionStatus == TAMStatus::CustomerApproved)
        {
            this.Activity = NoYes::Yes;
        }
        tamPromotionStatus = this.orig().PromotionStatus;

        if (this.PromotionStatus != tamPromotionStatus )
        {
            this.statusChanged();
        }
       
        this.updatePdsRebateAgreementsOrdersDate();

        appl.onTtsNotifyCommit += eventhandler(this.onUpdateCommitted);
        super();

        if (this.PromotionStatus != tamPromotionStatus )
        {
            try
            {
                // Calculate merchandise cost
                tamCalcMerchandiseCost = new TAMCalcMerchandiseCost(
                    TAMPromoMerchEvent::Promotion,
                    '',
                    this.PromotionID,
                    this.CustAccount);

                tamCalcMerchandiseCost.calcPromotionCost();

                if (this.PromotionStatus == TAMStatus::CustomerApproved)
                {
                    TAMFundTable::validateFundBudget(this.PromotionID);
                }
            }
            catch
            {
                 this.PromotionStatus = this.orig().PromotionStatus;
                 throw error("@SYS78886");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePdsRebateAgreementsOrdersDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the date (ValidFrom and ValidTo) of related PdsRebateAgreements
    /// </summary>
    private void updatePdsRebateAgreementsOrdersDate()
    {
        if (this.OrdersEndDate < this.orig().OrdersStartDate)
        {
            if (this.OrdersStartDate != this.orig().OrdersStartDate)
            {
                this.updatePdsRebateAgreementsStartDate();
            }

            if (this.OrdersEndDate != this.orig().OrdersEndDate)
            {
                this.updatePdsRebateAgreementsEndDate();
            }
        }
        else
        {
            if (this.OrdersEndDate != this.orig().OrdersEndDate)
            {
                this.updatePdsRebateAgreementsEndDate();
            }

            if (this.OrdersStartDate != this.orig().OrdersStartDate)
            {
                this.updatePdsRebateAgreementsStartDate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePdsRebateAgreementsStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the starting date (ValidFrom) of related PdsRebateAgreements
    /// </summary>
    private void updatePdsRebateAgreementsStartDate()
    {
        PdsRebateAgreement      pdsRebateAgreement;
        TAMMerchandisingEvent   tamMerchandisingEvent;

        update_recordset pdsRebateAgreement
            setting ValidFrom = this.OrdersStartDate
        join tamMerchandisingEvent
            where pdsRebateAgreement.TAMMerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
                    && tamMerchandisingEvent.PromotionID == this.PromotionID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePdsRebateAgreementsEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the ending date (ValidTo) of related PdsRebateAgreements
    /// </summary>
    private void updatePdsRebateAgreementsEndDate()
    {
        PdsRebateAgreement      pdsRebateAgreement;
        TAMMerchandisingEvent   tamMerchandisingEvent;

        update_recordset pdsRebateAgreement
            setting ValidTo = this.OrdersEndDate
        join tamMerchandisingEvent
            where pdsRebateAgreement.TAMMerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
                    && tamMerchandisingEvent.PromotionID == this.PromotionID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that all dates on a promotion are entered so that the from date
    /// is less than the to date.
    /// </summary>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <returns>
    /// true if the dates are valid; otherwise, false.
    /// </returns>
    private boolean validateDates(TransDate _fromDate, TransDate _toDate)
    {
        if ((_toDate < _fromDate)
            && _toDate
            && _fromDate)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record is valid and ready to be deleted
    /// from the database.
    /// </summary>
    /// <returns>
    /// true if the record is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Only allow the deletion of trade promotions that do not have any sales
    /// orders that have hit against the trade promotion.
    /// </remarks>
    public boolean validateDelete()
    {
        boolean                ret;
        TAMMerchandisingEvent tamMerchandisingEvent;
        MCRPriceHistory        mcrPriceHistory;

        ret = super();

        select firstonly RecId from tamMerchandisingEvent
            where tamMerchandisingEvent.PromotionID   == this.PromotionID
            join RecId from mcrPriceHistory
                where mcrPriceHistory.MerchandisingEventID== tamMerchandisingEvent.MerchandisingEventID;

        if (mcrPriceHistory.RecId)
        {
            ret = checkFailed("@MCR26268");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFundCostLevel</Name>
				<Source><![CDATA[
    private boolean validateFundCostLevel()
    {
        TAMMerchandisingEvent   tamMerchandisingEvent;
        TAMPromotionItem        tamPromotionItem;
        TAMPromotionFund        tamPromotionFund;
        TAMPromotionFund        tamPromotionFundPct;
        TAMFundInvent           tamFundInvent;
        TAMFundTable            tamFundTable;
        TAMFundCustCategory     tamFundCustCategory;
        TAMPromotionCust        tamPromotionCust;
        CustTable               custTable;
        InventDim               inventDim;
        InventDim               inventDimItem;
        InventDimId             blankInventDim;
        boolean                 ret = true;

        // When a fund is specified on a merchandising event and the fund is not approved,
        // but the trade promotion is trying to go to customer approval status, then throw
        // an error.
        select firstonly RecId from tamMerchandisingEvent
            where tamMerchandisingEvent.PromotionID   == this.PromotionID
            exists join tamPromotionFund
                where tamPromotionFund.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
            notexists join tamFundTable
                where tamFundTable.FundID == tamPromotionFund.Fund
                   && tamFundTable.Status == TAMFundStatus::Approved;
        if (tamMerchandisingEvent)
        {
           ret = false;
           throw error("@MCR26301");
        }

        blankInventDim = InventDim::findOrCreateBlank().InventDimId;
        InventDimParm prodDims = InventDimParm::allProductDim();
        InventDimParm noDims;

        Query query = this.buildPromotionMerchandisingEventFundQuery();
        QueryRun queryRun = new QueryRun(query);
        while(queryRun.next())
        {
            tamMerchandisingEvent = queryRun.get(tableNum(TAMMerchandisingEvent));
            tamPromotionFund = queryRun.get(tableNum(TAMPromotionFund));

            select firstonly InventDimID, RecId from tamPromotionItem
                where tamPromotionItem.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
            join inventDimItem
                where inventDimItem.InventDimId == tamPromotionItem.InventDimID
            exists join tamFundInvent
                where tamFundInvent.FundID == tamPromotionFund.Fund
                   && tamFundInvent.ItemID == tamPromotionItem.ItemID
            exists join inventDim
                where ((inventDim.InventDimId == tamFundInvent.InventDimID
                       && #InventDimRanges(inventDim, inventDimItem, prodDims, noDims))
                    || tamFundInvent.InventDimID == blankInventDim);
            if (!tamPromotionItem)
            {
                ret = false;
                throw error("@MCR26299");
            }
        }

        // When the customer on the promotion does not exist on the fund(s) specified
        // for the merchandising events, then throw an error.
        select firstonly RecId, MerchandisingEventID, PromotionID from tamMerchandisingEvent
            where tamMerchandisingEvent.PromotionID   == this.PromotionID
            exists join tamPromotionFund
                where tamPromotionFund.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
            exists join tamPromotionCust
                where tamPromotionCust.PromotionID == this.PromotionID
            exists join custTable
                where custTable.AccountNum == tamPromotionCust.CustAccount
            notexists join tamFundCustCategory
                where tamFundCustCategory.FundID   == tamPromotionFund.Fund
                   && tamFundCustCategory.Customer == custTable.RecId;
        if (tamMerchandisingEvent)
        {
            ret = false;
            throw error("@MCR26300");
        }
        
        while select MerchandisingEventID from tamMerchandisingEvent
            where tamMerchandisingEvent.PromotionID == this.PromotionID
            exists join tamPromotionFund
                where tamPromotionFund.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
        {
            select sum(Percent) from tamPromotionFundPct
                where tamPromotionFundPct.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID;

            if (tamPromotionFundPct.Percent != 100)
            {
                throw error ("@MCR4410349");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPromotionMerchandisingEventFundQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to get merchandising event ID.
    /// </summary>
    /// <returns>The query.</returns>
    protected Query buildPromotionMerchandisingEventFundQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(TAMMerchandisingEvent));
        qbds.addRange(fieldNum(TAMMerchandisingEvent, PromotionID)).value(queryValue(this.PromotionID));
        qbds.addRange(fieldNum(TAMMerchandisingEvent, MerchandisingEventCategory)).value(SysQuery::valueNot(MCRMerchandisingEventCategory::LumpSum));
        query.clearAllFields();
        qbds.addSelectionField(fieldNum(TAMMerchandisingEvent, MerchandisingEventID));

        QueryBuildDataSource qdbsFund = qbds.addDataSource(tableNum(TAMPromotionFund));
        qdbsFund.joinMode(JoinMode::InnerJoin);
        qdbsFund.relations(true);
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOrderDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that order dates on a promotion are entered so that the from
    /// date is less than the to date and that the to date is greater than the current date.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Throws if from date is greater than the to date.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws if current date is greater than the to date.
    /// </exception>
    public void validateOrderDates()
    {
        boolean datesValid;

        datesValid = this.validateDates(this.OrdersStartDate, this.OrdersEndDate);

        if (!datesValid)
        {
            throw error(strFmt("@MCR25961", "@MCR25206", "@MCR25207"));
        }

        if (this.OrdersEndDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
            && this.OrdersEndDate != dateNull())
        {
            throw error("@MCR4410371");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePerformanceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that performance dates on a promotion are entered so that the
    /// from date is less than the to date.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Throws if the performance dates are not valid.
    /// </exception>
    public void validatePerformanceDate()
    {
        boolean datesValid;

        datesValid = this.validateDates(this.PerformanceStartDate, this.PerformanceEndDate);

        if (!datesValid)
        {
            throw error(strFmt("@MCR25961", "@MCR25203", "@MCR25202"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePromotionDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates promotion dates of a merchandising event and rebate.
    /// </summary>
    /// <param name="_tamMerchandisingEvent">
    /// The <c>TAMMerchandisingEvent</c> record to validate.
    /// </param>
    /// <returns>
    /// true if the dates are valid; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws if the merchandising event is lump sum but no performance dates are
    /// specified.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws if the merchandising event is billback but but order start and end
    /// dates are not specified.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws if the merchandising event is billback but but requested ship dates
    /// are not specified.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws if the merchandising event is billback but shipment dates are not
    /// specified.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws if  the merchandising event is off invoice but promotion dates are
    /// specified.
    /// </exception>
    private boolean validatePromotionDates(TAMMerchandisingEvent _tamMerchandisingEvent)
    {
        boolean ret = true;

        if (_tamMerchandisingEvent.MerchandisingEventCategory == MCRMerchandisingEventCategory::LumpSum)
        {
            if (!this.PerformanceStartDate || !this.PerformanceEndDate)
            {
                ret = false;
                throw error("@MCR28387");
            }
        }
        else
        {
            if (!this.OrdersStartDate || !this.OrdersEndDate)
            {
                ret = false;
                throw error("@MCR28391");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRequestedShipDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that requested ship dates on a promotion are entered so that
    /// the from date is less than the to date.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Throws if the dates are not valid.
    /// </exception>
    public void validateRequestedShipDate()
    {
        boolean datesValid;

        datesValid = this.validateDates(this.RequestedShipmentStartDate, this.RequestedShipmentEndDate);

        if (!datesValid)
        {
            throw error(strFmt("@MCR25961", "@MCR25204", "@MCR25809"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShipDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that ship dates on a promotion are entered so that the from date
    /// is less than the to date.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Throws if dates are not valid.
    /// </exception>
    public void validateShipDate()
    {
        boolean datesValid;

        datesValid = this.validateDates(this.ShipmentStartDate, this.ShipmentEndDate);

        if (!datesValid)
        {
            throw error(strFmt("@MCR25961", "@MCR25205", "@MCR25201"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDeductAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total deduction amount associated with the promotion.
    /// </summary>
    /// <param name="_tamPromotionID">
    /// The <c>TAMPromotionId</c> of the promotion for which to calculate the total associated deduction amount; optional.
    /// </param>
    /// <param name="_fromDate">
    /// The start date for the calculation period; optional.
    /// </param>
    /// <param name="_toDate">
    /// The end date for the calculation period; optional.
    /// </param>
    /// <param name="_tamStatus">
    /// The promotion status parameter that defines the status criteria for the calculation; optional.
    /// </param>
    /// <param name="_tamStatusFilter">
    /// The promotion status filter parameter used to define the status criteria for the calculation; optional.
    /// </param>
    /// <returns>
    /// The total deduction amount associated with the promotion.
    /// </returns>
    public static MCRClaimAmount calcDeductAmt(TAMPromotionID   _tamPromotionID = '',
                                                      FromDate         _fromDate = dateNull(),
                                                      ToDate           _toDate = dateNull(),
                                                      TAMStatus        _tamStatus = TAMStatus::InProcess,
                                                      TAMStatusFilter  _tamStatusFilter = TAMStatusFilter::All)
    {
        TAMTradePromotion       localTradePromotion;
        TAMDeduction            deduction;
        MCRClaimAmount          localDeductAmt = 0;

        select sum(RemainAmountMST) from deduction
            exists join localTradePromotion
            where localTradePromotion.PromotionID == deduction.tamPromotionID
                && ((localTradePromotion.PromotionID == _tamPromotionID && _tamPromotionID)
                    || (localTradePromotion.PromotionID && !_tamPromotionID))
                    && (localTradePromotion.PromotionStatus == _tamStatus
                        || _tamStatusFilter == TAMStatusFilter::All)
                && ((localTradePromotion.OrdersStartDate >= _fromDate && _fromDate) || (!_fromDate))
                && ((localTradePromotion.OrdersEndDate <= _toDate && _toDate) || (!_toDate));

        localDeductAmt = deduction.RemainAmountMST;

        return localDeductAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoiceAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total invoiced amount associated with the promotion.
    /// </summary>
    /// <param name="_tamPromotionID">
    /// The <c>TAMPromotionId</c> of the promotion for which to calculate the total associated invoice amount; optional.
    /// </param>
    /// <param name="_fromDate">
    /// The start date for the calculation period; optional.
    /// </param>
    /// <param name="_toDate">
    /// The end date for the calculation period; optional.
    /// </param>
    /// <param name="_tamStatus">
    /// The promotion status parameter that defines the status criteria for the calculation; optional.
    /// </param>
    /// <param name="_tamStatusFilter">
    /// The promotion status filter parameter used to define the status criteria for the calculation; optional.
    /// </param>
    /// <returns>
    /// The total invoiced amount associated with the promotion.
    /// </returns>
    public static MCRClaimAmount calcInvoiceAmt(TAMPromotionID   _tamPromotionID = '',
                                                       FromDate         _fromDate = dateNull(),
                                                       ToDate           _toDate = dateNull(),
                                                       TAMStatus        _tamStatus = TAMStatus::InProcess,
                                                       TAMStatusFilter  _tamStatusFilter = TAMStatusFilter::All)
    {
        TAMTradePromotion       localTradePromotion;
        PdsRebateTable          localPdsRebateTable;
        TAMMerchandisingEvent   tamMerchandisingEvents;
        CustInvoiceTrans        custInvoiceTransLocal;
        MCRPriceHistory         priceHistory;
        MCRPriceHistoryRef      priceHistoryRef;
        SalesLine               salesLine;
        MCRClaimAmount          localInvAmt = 0;

        // Bill back Invoice amount
        select sum(LineAmount) from custInvoiceTransLocal
            where custInvoiceTransLocal.InventTransId != ''
            exists join localPdsRebateTable
            where custInvoiceTransLocal.InventTransId == localPdsRebateTable.InventTransId
                && ((localPdsRebateTable.RebateCalcDate >= _fromDate && _fromDate) || (!_fromDate))
                && ((localPdsRebateTable.RebateCalcDate <= _toDate && _toDate) || (!_toDate))
            exists join tamMerchandisingEvents
            where tamMerchandisingEvents.MerchandisingEventID == localPdsRebateTable.tamMerchandisingEventID
                && ((tamMerchandisingEvents.PromotionID == _tamPromotionID && _tamPromotionID)
                || (tamMerchandisingEvents.PromotionID && !_tamPromotionID))
            exists join localTradePromotion
                where localTradePromotion.PromotionID == tamMerchandisingEvents.PromotionID
                    && (localTradePromotion.PromotionStatus == _tamStatus
                    || _tamStatusFilter == TAMStatusFilter::All);

        localInvAmt = custInvoiceTransLocal.LineAmount;

        // Off invoice invoice amount
        select sum(LineAmount) from custInvoiceTransLocal
            where ((custInvoiceTransLocal.InvoiceDate >= _fromDate && _fromDate) || (!_fromDate))
               && ((custInvoiceTransLocal.InvoiceDate <= _toDate && _toDate) || (!_toDate))
            exists join salesLine
                where salesLine.SalesId == custInvoiceTransLocal.SalesId
            exists join priceHistoryRef
                where salesLine.mcrOrderLine2PriceHistoryRef == priceHistoryRef.mcrOrderLine2PriceHistoryRef
            exists join priceHistory
                where priceHistory.RecId == priceHistoryRef.PriceHistoryRecId
            exists join tamMerchandisingEvents
            where tamMerchandisingEvents.MerchandisingEventID == priceHistory.MerchandisingEventID
                && ((tamMerchandisingEvents.PromotionID == _tamPromotionID && _tamPromotionID)
                || (tamMerchandisingEvents.PromotionID && !_tamPromotionID))
            exists join localTradePromotion
                where localTradePromotion.PromotionID == tamMerchandisingEvents.PromotionID
                    && (localTradePromotion.PromotionStatus == _tamStatus
                    || _tamStatusFilter == TAMStatusFilter::All);
        localInvAmt += custInvoiceTransLocal.LineAmount;

        return localInvAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPromotionSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the summary amounts for the promotion.
    /// </summary>
    /// <param name="_tamPromotionID">
    /// The <c>TAMPromotionId</c> of the promotion for which to calculate the total summary amounts; optional.
    /// </param>
    /// <param name="_fromDate">
    /// The start date for the calculation period; optional.
    /// </param>
    /// <param name="_toDate">
    /// The end date for the calculation period; optional.
    /// </param>
    /// <param name="_tamStatus">
    /// The promotion status parameter that defines the status criteria for the calculation; optional.
    /// </param>
    /// <param name="_tamStatusFilter">
    /// The promotion status filter parameter used to define the status criteria for the calculation; optional.
    /// </param>
    /// <returns>
    /// A container of the total summary amounts for the promotion.
    /// </returns>
    public static container calcPromotionSummary(TAMPromotionID   _tamPromotionID = '',
                                                        FromDate         _fromDate = dateNull(),
                                                        ToDate           _toDate = dateNull(),
                                                        TAMStatus        _tamStatus = TAMStatus::InProcess,
                                                        TAMStatusFilter  _tamStatusFilter = TAMStatusFilter::All)
    {
        MCRClaimAmount  lsCreditAmt;
        MCRClaimAmount  bbCreditAmt;
        MCRClaimAmount  invoiceAmt;
        MCRClaimAmount  deductionAmt;

        [lsCreditAmt, bbCreditAmt] = TAMTradePromotion::calcTransactionAmt(_tamPromotionID,
                                                     _fromDate,
                                                     _toDate,
                                                     _tamStatus,
                                                     _tamStatusFilter);

        invoiceAmt = TAMTradePromotion::calcInvoiceAmt(_tamPromotionID,
                                                     _fromDate,
                                                     _toDate,
                                                     _tamStatus,
                                                     _tamStatusFilter);

        deductionAmt = TAMTradePromotion::calcDeductAmt(_tamPromotionID,
                                                     _fromDate,
                                                     _toDate,
                                                     _tamStatus,
                                                     _tamStatusFilter);

        return [lsCreditAmt, bbCreditAmt, invoiceAmt, deductionAmt];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTransactionAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total credit and vendor payment amount paid for the promotion.
    /// </summary>
    /// <param name="_tamPromotionID">
    /// The <c>TAMPromotionId</c> of the promotion for which to calculate the total credit amount paid; optional.
    /// </param>
    /// <param name="_fromDate">
    /// The start date for the calculation period; optional.
    /// </param>
    /// <param name="_toDate">
    /// The end date for the calculation period; optional.
    /// </param>
    /// <param name="_tamStatus">
    /// The promotion status parameter that defines the status criteria for the calculation; optional.
    /// </param>
    /// <param name="_tamStatusFilter">
    /// The promotion status filter parameter used to define the status criteria for the calculation; optional.
    /// </param>
    /// <returns>
    /// A container holding the total credit and payment amount for the promotion.
    /// </returns>
    public static container calcTransactionAmt(TAMPromotionID        _tamPromotionID = '',
                                                      FromDate              _fromDate = dateNull(),
                                                      ToDate                _toDate = dateNull(),
                                                      TAMStatus             _tamStatus = TAMStatus::InProcess,
                                                      TAMStatusFilter       _tamStatusFilter = TAMStatusFilter::All)
    {
        TAMTradePromotion       localTradePromotion;
        PdsRebateTrans          localPdsRebateTrans;
        PdsRebateTable          localPdsRebateTable;
        TAMMerchandisingEvent   tamMerchandisingEvents;
        TAMMerchEventTrans      tamMerchEventTrans;
        MCRClaimAmount          lsCreditAmount = 0;
        MCRClaimAmount          bbCreditAmount = 0;

        while select sum(PdsRebateAmt), PdsRebateTransaction  from localPdsRebateTrans
            group by PdsRebateTransaction
            where localPdsRebateTrans.PdsRebateTransaction == PdsRebateTransaction::CreditNote
                || localPdsRebateTrans.PdsRebateTransaction == PdsRebateTransaction::PassToAP
            exists join localPdsRebateTable
            where localPdsRebateTable.PdsRebateId == localPdsRebateTrans.PdsRebateId
                && ((localPdsRebateTable.RebateCalcDate >= _fromDate && _fromDate) || (!_fromDate))
                && ((localPdsRebateTable.RebateCalcDate <= _toDate && _toDate) || (!_toDate))
            exists join tamMerchandisingEvents
            where tamMerchandisingEvents.MerchandisingEventID == localPdsRebateTable.tamMerchandisingEventID
            exists join localTradePromotion
            where localTradePromotion.PromotionID == tamMerchandisingEvents.PromotionID
                && ((localTradePromotion.PromotionID == _tamPromotionID && _tamPromotionID)
                    || (localTradePromotion.PromotionID && !_tamPromotionID))
                && (localTradePromotion.PromotionStatus == _tamStatus
                    || _tamStatusFilter == TAMStatusFilter::All)
        {
            bbCreditAmount = localPdsRebateTrans.PdsRebateAmt;
        }

        select sum(Amount) from tamMerchEventTrans
            where (tamMerchEventTrans.PromotionID == _tamPromotionID && _tamPromotionID)
                || (tamMerchEventTrans.PromotionID && !_tamPromotionID);

        lsCreditAmount = tamMerchEventTrans.Amount;

        return [lsCreditAmount, bbCreditAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TAMTradePromotion</c> table.
    /// </summary>
    /// <param name="_tamPromotionID">
    /// The promotion ID of the <c>TAMTradePromotion</c> table record to find.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account of the <c>TAMTradePromotion</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in <c>TAMTradePromotion</c>; otherwise, an empty record.
    /// </returns>
    public static TAMTradePromotion find(
        TAMPromotionID _tamPromotionID,
        CustAccount    _custAccount,
        boolean        _forUpdate = false)
    {
        TAMTradePromotion tamTradePromotion;

        if (_tamPromotionID)
        {
            tamTradePromotion.selectForUpdate(_forUpdate);

            select firstonly tamTradePromotion
                where tamTradePromotion.PromotionID == _tamPromotionID
                   && tamTradePromotion.CustAccount == _custAccount;
        }

        return tamTradePromotion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPromoID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TAMTradePromotion</c> table.
    /// </summary>
    /// <param name="_tamPromotionID">
    /// The promotion ID of the <c>TAMTradePromotion</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in <c>TAMTradePromotion</c>; otherwise, an empty record.
    /// </returns>
    public static TAMTradePromotion findByPromoID(
        TAMPromotionID _tamPromotionID,
        boolean        _forUpdate = false)
    {
        TAMTradePromotion  tamTradePromotion;

        if (_tamPromotionID)
        {
            tamTradePromotion.selectForUpdate(_forUpdate);

            select firstonly tamTradePromotion
                where tamTradePromotion.PromotionID == _tamPromotionID;
        }
        return tamTradePromotion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns a trade allowance record based on the passed in <c>RecId</c>.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> value for which to search the <c>TAMTradePromotion</c> table.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that defines whether or not the trade allowance record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// A trade allowance record based on the passed in <c>RecId</c>.
    /// </returns>
    public static TAMTradePromotion findByRecId(RecId _recId, boolean _forUpdate = false)
    {
        TAMTradePromotion tamTradePromotion;

        if (_recId)
        {
            tamTradePromotion.selectForUpdate(_forUpdate);

            select firstonly tamTradePromotion
                where tamTradePromotion.RecId == _recId;
        }

        return tamTradePromotion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMerchEventID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TAMTradePromotion</c> table.
    /// </summary>
    /// <param name="_tamPromotionID">
    /// The promotion ID of the <c>TAMTradePromotion</c> table record to find.
    /// </param>
    /// <param name="_mcrMerhandisingEventID">
    /// The merchandising event ID of the <c>TAMTradePromotion</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in <c>TAMTradePromotion</c>; otherwise, an empty record.
    /// </returns>
    private static TAMTradePromotion findMerchEventID(
        TAMPromotionID          _tamPromotionID,
        MCRMerchandisingEventID _mcrMerhandisingEventID,
        boolean                 _forUpdate = false)
    {
        TAMTradePromotion       tamTradePromotion;
        TAMMerchandisingEvent  tamMerchandisingEvent;

        if (_tamPromotionID && _mcrMerhandisingEventID)
        {
            tamTradePromotion.selectForUpdate(_forUpdate);

            select firstonly tamTradePromotion
                where tamTradePromotion.PromotionID == _tamPromotionID
                join PromotionID, MerchandisingEventID from tamMerchandisingEvent
                    where tamMerchandisingEvent.PromotionID          == _tamPromotionID
                       && tamMerchandisingEvent.MerchandisingEventID == _mcrMerhandisingEventID;
        }

        return tamTradePromotion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupActiveTAM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a lookup for trade promotions.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormStringControl</c> control that the lookup should attach to.
    /// </param>
    public static void lookupActiveTAM(FormStringControl _formControl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        sysTableLookup = SysTableLookup::newParameters(
            tableNum(TAMTradePromotion),
            _formControl);

        query = new Query();
        queryBuildDataSource = query.addDataSource(tableNum(TAMTradePromotion));
        queryBuildDataSource.addRange(fieldNum(TAMTradePromotion, PromotionStatus)).value(SysQuery::value(TAMStatus::CustomerApproved));
        queryBuildDataSource.addRange(fieldNum(TAMTradePromotion, Template)).value(SysQuery::value(NoYes::No));

        sysTableLookup.addLookupfield(fieldNum(TAMTradePromotion, PromotionID));
        sysTableLookup.addLookupfield(fieldNum(TAMTradePromotion, PromotionDescription));
        sysTableLookup.addLookupfield(fieldNum(TAMTradePromotion, PromotionStatus));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInvoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a lookup for promotions that match customer when given an invoice account.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormStringControl</c> control that the lookup should attach to.
    /// </param>
    /// <param name="_custInvoiceAccount">
    /// The customer invoice account used to find promotions.
    /// </param>
    /// <param name="_excludeOneTimePromotions">
    /// If true, then exclude one time promotions from the lookup.
    /// </param>
    /// <remarks>
    /// Find all sales orders with a customer account equal to _custInvoiceAccount.
    /// Include all trade promotions with customer account equal to the customer account
    /// of those sales orders.
    /// </remarks>
    /// <seealso>
    /// Table <c>TAMMerchandisingEvent</c> method <c>lookupInvoiceAccount</c>.
    /// </seealso>
    public static void lookupInvoiceAccount(
        FormControl         _formControl,
        CustInvoiceAccount  _custInvoiceAccount,
        boolean             _excludeOneTimePromotions)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSourceTAMMerchandisingEvent;
        QueryBuildDataSource    queryBuildDataSourceTAMMerchEventPricing;
        QueryBuildDataSource    queryBuildDataSourceTAMTradePromotion;
        QueryBuildDataSource    queryBuildDataSourceTAMPromotionCust;
        QueryBuildDataSource    queryBuildDataSourceSalesTable;
        QueryBuildRange         queryBuildRange;

        //  Note that to work properly, the fetchMode of the datasource must be set and
        //  the exists join with the SalesTable must come first.
        sysTableLookup = SysTableLookup::newParameters(tableNum(TAMTradePromotion), _formControl);
        sysTableLookup.addLookupfield(fieldNum(TAMTradePromotion, PromotionID));
        sysTableLookup.addLookupfield(fieldNum(TAMTradePromotion, PromotionDescription));
        sysTableLookup.addLookupfield(fieldNum(TAMTradePromotion, PromotionStatus));

        query = new Query();
        queryBuildDataSourceTAMTradePromotion = query.addDataSource(tableNum(TAMTradePromotion));
        queryBuildDataSourceTAMTradePromotion.addRange(fieldNum(TAMTradePromotion, Template)).value(SysQuery::value(NoYes::No));

        queryBuildDataSourceTAMPromotionCust = queryBuildDataSourceTAMTradePromotion.addDataSource(tableNum(TAMPromotionCust));
        queryBuildDataSourceTAMPromotionCust.clearLinks();
        queryBuildDataSourceTAMPromotionCust.addLink(fieldNum(TAMPromotionCust, PromotionID), fieldNum(TAMTradePromotion, PromotionID));
        queryBuildDataSourceTAMPromotionCust.addRange(fieldNum(TAMPromotionCust, CustAccount)).value(SysQuery::value(_custInvoiceAccount));

        // Exist join promotion to sales orders.
        queryBuildDataSourceSalesTable = queryBuildDataSourceTAMPromotionCust.addDataSource(tableNum(SalesTable));
        queryBuildDataSourceSalesTable.joinMode(JoinMode::ExistsJoin);
        queryBuildDataSourceSalesTable.fetchMode(QueryFetchMode::One2One);
        queryBuildDataSourceSalesTable.addLink(fieldNum(TAMPromotionCust, CustAccount),
                                fieldNum(SalesTable, CustAccount));
        queryBuildRange = queryBuildDataSourceSalesTable.addRange(fieldNum(SalesTable, InvoiceAccount));
        queryBuildRange.value(SysQuery::value(_custInvoiceAccount));

        if (_excludeOneTimePromotions)
        {
            // Join to merchandising event.
            queryBuildDataSourceTAMMerchandisingEvent = queryBuildDataSourceTAMTradePromotion.addDataSource(tableNum(TAMMerchandisingEvent));
            queryBuildDataSourceTAMMerchandisingEvent.addLink(fieldNum(TAMTradePromotion, PromotionID),
                                            fieldNum(TAMMerchandisingEvent, PromotionID));
            queryBuildDataSourceTAMMerchandisingEvent.joinMode(JoinMode::NoExistsJoin);
            queryBuildDataSourceTAMMerchandisingEvent.fetchMode(QueryFetchMode::One2One);

            // One time lump sum will have just one merchandising event and one merchandising
            // event pricing record with the one time lump sum flag set to yes.  ThereforeME and one ME pricing record with OneTimeLumpSum flag yes
            // so sufficient to join with ME pricing with a value of No
            queryBuildDataSourceTAMMerchEventPricing =
                queryBuildDataSourceTAMMerchandisingEvent.addDataSource(tableNum(TAMMerchEventPricing));
            queryBuildDataSourceTAMMerchEventPricing.relations(true);
            queryBuildDataSourceTAMMerchEventPricing.joinMode(JoinMode::InnerJoin);
            queryBuildDataSourceTAMMerchEventPricing.addRange(fieldNum(TAMMerchEventPricing, OneTimeLumpSum)).
                value(SysQuery::value(NoYes::Yes));
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTemplatePromotions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up trade allowance records that are created as templates.
    /// </summary>
    /// <param name="_formControl">
    /// The form control for which to lookup the trade allowance templates.
    /// </param>
    public static void lookupTemplatePromotions(FormControl _formControl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSourceTAMTradePromotion;

        sysTableLookup = SysTableLookup::newParameters(tableNum(TAMTradePromotion), _formControl);
        sysTableLookup.addLookupfield(fieldNum(TAMTradePromotion, PromotionID));
        sysTableLookup.addLookupfield(fieldNum(TAMTradePromotion, PromotionDescription));

        query = new Query();
        queryBuildDataSourceTAMTradePromotion = query.addDataSource(tableNum(TAMTradePromotion));
        queryBuildDataSourceTAMTradePromotion.addRange(fieldNum(TAMTradePromotion, Template)).value(enum2str(NoYes::Yes));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupNonTemplatePromotions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up trade allowance records that are created as non templates.
    /// </summary>
    /// <param name="_formControl">
    /// The form control for which to lookup the trade allowances.
    /// </param>
    public static void lookupNonTemplatePromotions(FormControl _formControl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSourceTAMTradePromotion;

        sysTableLookup = SysTableLookup::newParameters(tableNum(TAMTradePromotion), _formControl);
        sysTableLookup.addLookupfield(fieldNum(TAMTradePromotion, PromotionID));
        sysTableLookup.addLookupfield(fieldNum(TAMTradePromotion, PromotionDescription));

        query = new Query();
        queryBuildDataSourceTAMTradePromotion = query.addDataSource(tableNum(TAMTradePromotion));
        queryBuildDataSourceTAMTradePromotion.addRange(fieldNum(TAMTradePromotion, Template)).value(enum2str(NoYes::No));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the workflow status for an approval status.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>TAMTradePromotion</c> record for which to set the workflow status.
    /// </param>
    /// <param name="_approvalStatus">
    /// The workflow status to set.
    /// </param>
    public static void setWorkflowStatus(RecId _recId, TAMPromoMgmtApprovalStatus _approvalStatus)
    {
        TAMTradePromotion tamTradePromotion = TAMTradePromotion::findByRecId(_recId, true);

        ttsbegin;
        tamTradePromotion.wfApprovalStatus = _approvalStatus;
        tamTradePromotion.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferCurrencyCodeToMerchEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Propagates the currency on the current trade promotion to its merchandising events.
    /// </summary>
    public void transferCurrencyCodeToMerchEvents()
    {
        TAMMerchandisingEvent childMerchEvents;

        while select childMerchEvents where
            childMerchEvents.PromotionID == this.PromotionID
        {
            childMerchEvents.updateCurrencyCode(this.Currency);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onUpdateCommitted</Name>
				<Source><![CDATA[
    private void onUpdateCommitted()
    {
        TAMTradePromotion::publishUpdateCommittedEvent();
        appl.onTtsNotifyCommit -= eventhandler(this.onUpdateCommitted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishUpdateCommittedEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// An event which is fired when an update is committed.
    /// </summary>
    static delegate void publishUpdateCommittedEvent(){}

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        appl.onTtsNotifyCommit += eventhandler(this.onDeleteCommitted);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDeleteCommitted</Name>
				<Source><![CDATA[
    private void onDeleteCommitted()
    {
        TAMTradePromotion::publishDeleteCommittedEvent();
        appl.onTtsNotifyCommit -= eventhandler(this.onDeleteCommitted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishDeleteCommittedEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// An event which is fired when a delete is committed.
    /// </summary>
    static delegate void publishDeleteCommittedEvent(){}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TAMPromotionsManagement</ConfigurationKey>
	<DeveloperDocumentation>@MCR25818</DeveloperDocumentation>
	<FormRef>TAMPromotionsManagmentMenu</FormRef>
	<Label>@MCR25818</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>PromotionID</TitleField1>
	<TitleField2>PromotionDescription</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>PromoID</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>PromoID</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TAMMerchandisingEvent</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TAMMerchandisingEvent</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TAMPromotionCust</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TAMPromotionCust</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TAMPromotionFund</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TAMPromotionFund</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TAMPromotionItem</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TAMPromotionItem</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromotionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromotionDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromotionDetails</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrdersStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrdersEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedShipmentEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PerformanceEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PerformanceStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedShipmentStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Template</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromotionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromotionDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromotionID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromotionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromotionDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromotionDetails</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrdersStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrdersEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedShipmentEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PerformanceEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PerformanceStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedShipmentStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Template</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromotionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromotionPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarketingObjective</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MerchandiseCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyOverridden</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Activity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndOfPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HcmWorkerId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HierarchyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WFApprovalStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Cost</Name>
			<Label>@SYS4249</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS24704</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dates</Name>
			<Label>@SYS80293</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromotionPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrdersStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrdersEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedShipmentStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedShipmentEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PerformanceStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PerformanceEndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromotionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromotionDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromotionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarketingObjective</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VerifyPerformance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Promotion</Name>
			<Label>@MCR25498</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromotionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromotionDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromotionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromotionDetails</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarketingObjective</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Statistics</Name>
			<Label>@SYS326</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BaseUnits</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LiftPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverriddenShipQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Activity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS38381</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BaseUnits</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRBaseUnits</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMPromotionCustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndOfPeriod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@MCR28858</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HcmWorkerId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>HcmApprover</ExtendedDataType>
			<Label>@SYS77709</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HierarchyName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>String30</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LiftPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRLiftPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarketingObjective</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRMarketingObjective</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MerchandiseCost</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@MCR27855</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>OrdersEndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCROrderEndDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>OrdersStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCROrderStartDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverriddenShipQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCROverriddenShipQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PerformanceEndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRPerformanceEndDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PerformanceStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRPerformanceStartDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PromotionDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PromotionDetails</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRNotes</ExtendedDataType>
			<Label>@SYS80118</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PromotionID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMPromotionID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PromotionPeriod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMPromotionPeriodId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PromotionStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TAMStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>QtyOverridden</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@MCR27267</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RequestedShipmentEndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRRequestedShipEndDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RequestedShipmentStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRRequestedShipStartDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShipmentEndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRShipmentEndDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShipmentStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRShipmentStartDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Template</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS53423</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VerifyPerformance</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@MCR27841</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WFApprovalStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TAMPromoMgmtApprovalStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PromoID</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PromotionID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>HcmWorkerId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>TAMPromotionCustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorkerId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TAMTradePromotion</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HcmWorkerId</Name>
					<Field>HcmWorkerId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MarketingObjective</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TAMMarketingObjective</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Marketing</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Marketing</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarketingObjective</Name>
					<SourceEDT>MCRMarketingObjective</SourceEDT>
					<Field>MarketingObjective</Field>
					<RelatedField>MarketingObjective</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>MarketingObj</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PromotionPeriod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TAMPromotionPeriod</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PromotionPeriod</Name>
					<SourceEDT>TAMPromotionPeriodId</SourceEDT>
					<Field>PromotionPeriod</Field>
					<RelatedField>PromotionPeriod</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TAMTradePromotion</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>TAMTradePromotion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<Field>CustAccount</Field>
					<RelatedField>CustAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PromotionID</Name>
					<Field>PromotionID</Field>
					<RelatedField>PromotionID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitID</Name>
					<SourceEDT>UnitOfMeasureSymbol</SourceEDT>
					<Field>UnitID</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>