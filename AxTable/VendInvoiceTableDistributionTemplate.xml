<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceTableDistributionTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceTableDistributionTemplate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayDistributionLineTotalAmount</Name>
				<Source><![CDATA[
    public display AmountCur displayDistributionLineTotalAmount(VendInvoiceTableDistributionTemplate _vendInvoiceTableDistributionTemplate)
    {
        return VendInvoiceTableDistributionTemplate::sumDistributionLineAmount(_vendInvoiceTableDistributionTemplate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDistributionLineTotalPercentage</Name>
				<Source><![CDATA[
    public display Percent displayDistributionLineTotalPercentage(VendInvoiceTableDistributionTemplate _vendInvoiceTableDistributionTemplate)
    {
        return VendInvoiceTableDistributionTemplate::sumDistributionLinePercentage(_vendInvoiceTableDistributionTemplate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        VendInvoiceTemplate vendInvoiceTemplate;
        VendInvoiceTableMarkUPTransTemplate vendInvoiceTableMarkUPTransTemplate;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(VendInvoiceTableDistributionTemplate, Percentage):
                vendInvoiceTableMarkUPTransTemplate = VendInvoiceTableMarkUPTransTemplate::find(this.VendInvoiceTableMarkupTrans);
                vendInvoiceTemplate = VendInvoiceTemplate::find(vendInvoiceTableMarkupTransTemplate.TransRecId);
                this.AmountCur = CurrencyExchange::round(((this.Percentage / 100) * vendInvoiceTableMarkUPTransTemplate.Value), vendInvoiceTemplate.CurrencyCode);
                break;

            case fieldNum(VendInvoiceTableDistributionTemplate, AmountCur):
                vendInvoiceTableMarkUPTransTemplate = VendInvoiceTableMarkUPTransTemplate::find(this.VendInvoiceTableMarkupTrans);

                if (vendInvoiceTableMarkUPTransTemplate.Value != 0.0)
                {
                    this.Percentage = (this.AmountCur / vendInvoiceTableMarkUPTransTemplate.Value) * 100;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;
        Percent linePercentage, totalPercentage;
        AmountCur lineAmount, totalAmount;
        VendInvoiceTemplate vendInvoiceTemplate;
        VendInvoiceTableMarkupTransTemplate vendInvoiceTableMarkupTransTable;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(VendInvoiceTableDistributionTemplate, Percentage):

                    vendInvoiceTableMarkupTransTable = VendInvoiceTableMarkupTransTemplate::find(this.VendInvoiceTableMarkupTrans);
                    if (vendInvoiceTableMarkupTransTable.Value != 0.0)
                    {
                        vendInvoiceTemplate = VendInvoiceTemplate::find(vendInvoiceTableMarkupTransTable.TransRecId);
                        lineAmount = CurrencyExchange::round(((this.Percentage / 100) * vendInvoiceTableMarkupTransTable.Value), vendInvoiceTemplate.CurrencyCode);

                        totalAmount = (select sum(AmountCur) from vendInvoiceTableDistributionTemplate
                                            where vendInvoiceTableDistributionTemplate.vendInvoiceTableMarkupTrans == vendInvoiceTableMarkupTransTable.RecId
                                                && vendInvoiceTableDistributionTemplate.RecId != this.RecId ).AmountCur;

                        totalAmount += lineAmount;

                        if (totalAmount <= vendInvoiceTableMarkupTransTable.Value)
                        {
                            this.AmountCur = lineAmount;
                        }
                    }
                    break;

                case fieldNum(VendInvoiceTableDistributionTemplate, AmountCur):
                    vendInvoiceTableMarkupTransTable = VendInvoiceTableMarkUPTransTemplate::find(this.VendInvoiceTableMarkupTrans);

                    if (vendInvoiceTableMarkupTransTable.Value != 0.0)
                    {
                        linePercentage = (this.AmountCur / vendInvoiceTableMarkupTransTable.Value) * 100;

                        totalPercentage = (select sum(Percentage) from vendInvoiceTableDistributionTemplate
                                            where vendInvoiceTableDistributionTemplate.VendInvoiceTableMarkupTrans == vendInvoiceTableMarkupTransTable.RecId
                                                && vendInvoiceTableDistributionTemplate.RecId != this.RecId ).Percentage;

                        totalPercentage += linePercentage;

                        if (totalPercentage <= 100)
                        {
                            this.Percentage = linePercentage;
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(recId _vendInvoiceTableDistributionTemplateRecId)
    {
        boolean ret = true;

        if (!VendInvoiceTableDistributionTemplate::exist(_vendInvoiceTableDistributionTemplateRecId))
        {
            ret = checkFailed(strFmt(VendInvoiceTableDistributionTemplate::txtNotExist(), _vendInvoiceTableDistributionTemplateRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(recId _vendInvoiceTableDistributionTemplateRecId)
    {
        boolean found;

        found = (select firstonly RecId from vendInvoiceTableDistributionTemplate
                    where vendInvoiceTableDistributionTemplate.RecId == _vendInvoiceTableDistributionTemplateRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static VendInvoiceTableDistributionTemplate find(
        recId _vendInvoiceTableDistributionTemplateRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendInvoiceTableDistributionTemplate vendInvoiceTableDistributionTemplate;

        vendInvoiceTableDistributionTemplate.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendInvoiceTableDistributionTemplate.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendInvoiceTableDistributionTemplate
            where vendInvoiceTableDistributionTemplate.RecId == _vendInvoiceTableDistributionTemplateRecId;

        return vendInvoiceTableDistributionTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumDistributionLineAmount</Name>
				<Source><![CDATA[
    public static AmountCur sumDistributionLineAmount(VendInvoiceTableDistributionTemplate _vendInvoiceTableDistributionTemplate)
    {
        AmountCur totalDistributedAmount;

        totalDistributedAmount = (select sum(AmountCur) from vendInvoiceTableDistributionTemplate
                                    where vendInvoiceTableDistributionTemplate.VendInvoiceTableMarkupTrans == _vendInvoiceTableDistributionTemplate.VendInvoiceTableMarkupTrans).AmountCur;

        return totalDistributedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordCountForTemplateLine</Name>
				<Source><![CDATA[
    static int recordCountForTemplateLine(RefRecId _vendInvoiceTableMarkupTransTemplateRecId)
    {
        return any2int(
            (select count(RecId) from vendInvoiceTableDistributionTemplate
                where vendInvoiceTableDistributionTemplate.VendInvoiceTableMarkupTrans == _vendInvoiceTableMarkupTransTemplateRecId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumDistributionLinePercentage</Name>
				<Source><![CDATA[
    public static Percent sumDistributionLinePercentage(VendInvoiceTableDistributionTemplate _vendInvoiceTableDistTemplateLine)
    {
        Percent totalDistributedPercentage;

        totalDistributedPercentage = (select sum(Percentage) from vendInvoiceTableDistributionTemplate
                                        where vendInvoiceTableDistributionTemplate.VendInvoiceTableMarkupTrans == _vendInvoiceTableDistTemplateLine.VendInvoiceTableMarkupTrans).Percentage;

        return totalDistributedPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDistributionLineAmount</Name>
				<Source><![CDATA[
    public static void updateDistributionLineAmount(VendInvoiceTableMarkupTransTemplate _vendInvoiceTableMarkuPTransTemplate)
    {
        VendInvoiceTemplate vendInvoiceTemplate;
        VendInvoiceTableDistributionTemplate vendInvoiceTableDistributionTemplate;
        AmountCur totalDistributedAmount;

        ttsbegin;

        if (!isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (_vendInvoiceTableMarkuPTransTemplate.Value == 0.0)
            {
                delete_from vendInvoiceTableDistributionTemplate where vendInvoiceTableDistributionTemplate.VendInvoiceTableMarkupTrans == _vendInvoiceTableMarkuPTransTemplate.RecId;
            }
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                || ( !isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && _vendInvoiceTableMarkuPTransTemplate.Value != 0.0))
        {
            vendInvoiceTemplate = VendInvoiceTemplate::find(_vendInvoiceTableMarkuPTransTemplate.TransRecId);

            // Update the invoice line template distribution amount by percentage.
            while select forupdate vendInvoiceTableDistributionTemplate
                where vendInvoiceTableDistributionTemplate.VendInvoiceTableMarkupTrans == _vendInvoiceTableMarkuPTransTemplate.RecId
            {
                vendInvoiceTableDistributionTemplate.AmountCur =
                CurrencyExchange::round(((vendInvoiceTableDistributionTemplate.Percentage / 100) * _vendInvoiceTableMarkuPTransTemplate.Value),
                                                        vendInvoiceTemplate.CurrencyCode);
                vendInvoiceTableDistributionTemplate.update();
                totalDistributedAmount += vendInvoiceTableDistributionTemplate.AmountCur;
            }

            // Handle panney difference at last distribution line.
            if (totalDistributedAmount != 0.0 && totalDistributedAmount != _vendInvoiceTableMarkuPTransTemplate.Value)
            {
                vendInvoiceTableDistributionTemplate.clear();
                select forupdate vendInvoiceTableDistributionTemplate
                    order by RecId desc
                        where vendInvoiceTableDistributionTemplate.VendInvoiceTableMarkupTrans == _vendInvoiceTableMarkuPTransTemplate.RecId;

                vendInvoiceTableDistributionTemplate.AmountCur += (_vendInvoiceTableMarkuPTransTemplate.Value - totalDistributedAmount);
                _vendInvoiceTableMarkuPTransTemplate.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    protected static InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(InventAccountType _inventAccountType, VendInvoiceStandardLineTemplate _vendInvoiceStandardLineTemplate)
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(_inventAccountType,
                                                                                    _vendInvoiceStandardLineTemplate.ItemId, 
                                                                                    InventTable::find(_vendInvoiceStandardLineTemplate.ItemId).itemGroupId(),
                                                                                    _vendInvoiceStandardLineTemplate.ProcurementCategory, 
                                                                                    '', 
                                                                                    '',
                                                                                    _vendInvoiceStandardLineTemplate.TaxGroup
                                                                                    );
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultDistributionTemplate</Name>
				<Source><![CDATA[
    public static void createDefaultDistributionTemplate(VendInvoiceTableMarkupTransTemplate _vendInvoiceTableMarkupTransTemplate, LedgerDimensionAccount _ledgerDimension)
    {
        VendInvoiceTableDistributionTemplate vendInvoiceTableDistributionTemplate;
        vendInvoiceTableDistributionTemplate.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_ledgerDimension, VendInvoiceTemplate::find(_vendInvoiceTableMarkupTransTemplate.TransRecId).DefaultDimension);
        vendInvoiceTableDistributionTemplate.Percentage = 100.0;
        vendInvoiceTableDistributionTemplate.AmountCur = _vendInvoiceTableMarkupTransTemplate.value;
        vendInvoiceTableDistributionTemplate.VendInvoiceTableMarkupTrans = _vendInvoiceTableMarkupTransTemplate.RecId;
        vendInvoiceTableDistributionTemplate.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDistributionsFromLine</Name>
				<Source><![CDATA[
    public static void createDistributionsFromLine(VendInvoiceTableMarkupTransTemplate _vendInvoiceLineTemplate, SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        AccountingDistribution accountingDistribution;
        boolean distributionFound;
        MonetaryAmount monetaryAmount;
        LedgerDimensionAccount defaultLedgerDimension;

        // Get default values, depending on the type of line
        VendInvoiceTableMarkupTransTemplate markupLineTemplate = _vendInvoiceLineTemplate;
        monetaryAmount = MonetaryAmount::Charge;
        defaultLedgerDimension = MarkupTable::find(MarkupModuleType::Vend, markupLineTemplate.MarkupCode).CustomerLedgerDimension;

        // Create a distribution template for each accounting distribution on the source document line
        while select accountingDistribution
            where accountingDistribution.SourceDocumentLine == _sourceDocumentLineRecId &&
                accountingDistribution.MonetaryAmount == monetaryAmount
        {
            VendInvoiceTableDistributionTemplate::createFromAccountingDistribution(_vendInvoiceLineTemplate.RecId, accountingDistribution);

            distributionFound = true;
        }

        if (!distributionFound)
        {
            VendInvoiceTableDistributionTemplate::createDefaultDistributionTemplate(_vendInvoiceLineTemplate, defaultLedgerDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromAccountingDistribution</Name>
				<Source><![CDATA[
    public static void createFromAccountingDistribution(RefRecId _vendInvoicTableMarkupRecId, AccountingDistribution _accountingDistribution)
    {
        VendInvoiceTableDistributionTemplate distributionTemplate;

        distributionTemplate.VendInvoiceTableMarkupTrans = _vendInvoicTableMarkupRecId;
        distributionTemplate.LedgerDimension = _accountingDistribution.LedgerDimension;
        distributionTemplate.Percentage = _accountingDistribution.percentage();
        distributionTemplate.AmountCur = _accountingDistribution.TransactionCurrencyAmount;

        distributionTemplate.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@AccountsPayable:VendInvoiceTableDistributionTemplateTableDevDoc</DeveloperDocumentation>
	<FormRef>VendInvoiceDistributionTemplate</FormRef>
	<Label>@AccountsPayable:VendorInvoiceTableDistributionTemplate</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>LedgerDimension</TitleField1>
	<TitleField2>AmountCur</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>AccountsPayable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Percentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Distribution</Name>
			<Label>@SYS81056</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Percentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS177138</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PercentPositive</ExtendedDataType>
			<Label>@SYS67344</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceTemplate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceTableMarkupTrans</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SourceDocumentDistribution</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceTableMarkupTransTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceTableMarkupTransTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceMarkupTransTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceTemplate_VendInvoiceTableTemplateDistributionLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceTableMarkupTrans</Name>
					<Field>VendInvoiceTableMarkupTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>