<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxItemGroupHeading</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxItemGroupHeading extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        super();
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            // On First creation it's None.
            this.ServiceTaxBasis_IN                   = ServiceTaxBasis_IN::None;
            this.ReverseChargePercentage_IN = 0;
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGTAVendorTaxItemGroup_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates GTA and foreign vendors for reverse cahrge mechanism.
    /// </summary>
    /// <returns>
    /// True if validation passes.
    /// </returns>
    public boolean isGTAVendorTaxItemGroup_IN()
    {
        return
            (this.ServiceTaxBasis_IN == ServiceTaxBasis_IN::CashBasis
             || (this.ServiceTaxBasis_IN == ServiceTaxBasis_IN::POTBasis
                 && this.ReverseChargePercentage_IN == 100));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReverseChargeInScope_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method identifies if its a valid reverse charge transaction for service tax.
    /// </summary>
    /// <returns>
    /// True if its a valid reverse charge transaction for service tax.
    /// </returns>

    public boolean isReverseChargeInScope_IN()
    {
        return this.ServiceTaxBasis_IN == ServiceTaxBasis_IN::POTBasis
               && this.ReverseChargePercentage_IN > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            // <GIN>
            case fieldStr(TaxItemGroupHeading, ReverseChargePercentage_IN):

                if (this.ServiceTaxBasis_IN == ServiceTaxBasis_IN::POTBasis)
                {
                    this.ReverseChargePercentage_IN = min(100, max(0, this.ReverseChargePercentage_IN));
                }
                break;
            case fieldStr(TaxItemGroupHeading, ServiceTaxBasis_IN):

                if ((this.ServiceTaxBasis_IN == ServiceTaxBasis_IN::CashBasis) || (this.ServiceTaxBasis_IN == ServiceTaxBasis_IN::None))
                {
                    this.ReverseChargePercentage_IN = 0;
                }
                break;
            // </GIN>
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    public void renamePrimaryKey()
    {
        boolean             isVirtual;
        DataArea            company;
        TaxItemGroupHeading originalTaxItemGroupHeading;
        LedgerJournalTrans  ledgerJournalTrans;
        VirtualDataAreaList virtualCompanies;
        container           concreteCompanies;
        int                 concreteCompanyCount;
        CompanyId           outerCompany;
        int                 innerLoopCounter;
        CompanyId           innerCompany;
        ;

        // Capture the renamed record
        originalTaxItemGroupHeading = this.orig();

        super();

        select firstonly company where company.Id == this.DataAreaId;
        isVirtual = company.IsVirtual;

        if (isVirtual)
        {
            // TaxItemGroupHeading is in a virtual company

            // Capture the concrete companies that are part of the TaxItemGroupHeading's virtual company
            while select Id from virtualCompanies where virtualCompanies.VirtualDataArea == this.DataAreaId
            {
                concreteCompanies += virtualCompanies.Id;
            }

            this.renameTaxItemGroupForLedgerJournalTrans(this.TaxItemGroup, originalTaxItemGroupHeading.TaxItemGroup, concreteCompanies);
        }
        else
        {
            // TaxItemGroupHeading that is being updated is not in a virtual company
            // If intercompany is enabled, must update the intercompany transactions for all other companies
            if (isConfigurationkeyEnabled(configurationkeynum(LedgerAdvIntercompanyAccounting)))
            {
                this.renameTaxItemGroupForLedgerJournalTrans(this.TaxItemGroup, originalTaxItemGroupHeading.TaxItemGroup, [originalTaxItemGroupHeading.DataAreaId]);
                this.renameTaxItemGroupForLedgerJournalTransCrossCompany(this.TaxItemGroup, originalTaxItemGroupHeading.TaxItemGroup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renameTaxItemGroupForLedgerJournalTrans</Name>
				<Source><![CDATA[
    private void renameTaxItemGroupForLedgerJournalTrans(TaxItemGroup _newTaxItemGroup, TaxItemGroup _oldTaxItemGroup, container _dataAreaIds)
    {
        DataArea company;
        LedgerJournalTrans ledgerJournalTrans;

        while select Id from company
            where company.IsVirtual == false
        {
            CompanyId outerCompany = company.Id;

            // Update related records for each concrete company
            changecompany(outerCompany)
            {
                // Reset the ledgerJournalTrans
                ledgerJournalTrans = null;
                ledgerJournalTrans.skipDataMethods(true);

                // Loop over companies in the company container
                for (int i = 1; i <= conLen(_dataAreaIds); i++)
                {
                    // Update records with this TaxItemGroupHeading as primary account
                    update_recordset ledgerJournalTrans
                            setting TaxItemGroup = _newTaxItemGroup
                        where ledgerJournalTrans.Company == conPeek(_dataAreaIds, i) &&
                            ledgerJournalTrans.TaxItemGroup == _oldTaxItemGroup;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renameTaxItemGroupForLedgerJournalTransCrossCompany</Name>
				<Source><![CDATA[
    private void renameTaxItemGroupForLedgerJournalTransCrossCompany(TaxItemGroup _newTaxItemGroup, TaxItemGroup _oldTaxItemGroup)
    {
        if (TaxItemGroupHeadingCrossCompanyFlight::instance().isEnabled())
        {
            SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
            if (policy.RecId && policy.IsEnabled)
            {
                Query query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this, policy.RecId);
                QueryRun queryRun = new QueryRun(query);
        
                container sharingCompanies;
                while (queryRun.Next())
                {
                    TaxItemGroupHeading taxItemGroupHeading = queryRun.get(this.TableId);
                    DataAreaId dataAreaId = taxItemGroupHeading.DataAreaId;

                    if (taxItemGroupHeading && dataAreaId)
                    {
                        sharingCompanies += dataAreaId;
                    }
                }

                this.renameTaxItemGroupForLedgerJournalTrans(_newTaxItemGroup, _oldTaxItemGroup, sharingCompanies);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean             ret;
        FormulaDesigner_IN  formulaDesignerIN;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                // <GIN>
                case fieldnum(TaxItemGroupHeading, ReverseChargePercentage_IN):
                    formulaDesignerIN = FormulaDesigner_IN::findPriceInclTax(this.TaxItemGroup);
                    if (this.ReverseChargePercentage_IN
                        && this.ServiceTaxBasis_IN == ServiceTaxBasis_IN::POTBasis
                        && formulaDesignerIN.RecId)
                    {
                        ret = checkFailed("@SYS4002034");
                    }
                break;
                // </GIN>

                default :
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index.
    /// </param>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                // <GIN>
                case fieldStr(TaxItemGroupHeading, TaxItemGroup):
                    if (TaxParameters::checkTaxParameters_IN()
                        && TaxParameters::find().ServiceTaxACBasis_IN == ServiceTaxACBasis_IN::Both)
                    {
                        if (TaxItemGroupHeading::checkIfServiceTaxAvailable_IN(this.TaxItemGroup))
                        {
                            if (this.ServiceTaxBasis_IN == ServiceTaxBasis_IN::None)
                            {
                                ret = false;
                            }
                        }
                        else
                        {
                            if (this.ServiceTaxBasis_IN != ServiceTaxBasis_IN::None)
                            {
                                ret = false;
                            }
                        }
                        if (ret == false)
                        {
                            checkFailed("@GLS222480");
                        }
                    }
                break;
                // <GIN>
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(TaxItemGroup _taxItemGroup )
    {
        boolean ret = true;
        ;

        if (!TaxItemGroupHeading::exist(_taxItemGroup))
        {
            ret = checkFailed(strfmt(TaxItemGroupHeading::txtNotExist(), _taxItemGroup));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfServiceTaxAvailable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// True if at least one service tax code is available for a TaxItemGroup
    /// </summary>
    /// <param name="_taxItemGroup">
    /// The TaxItemGroup passed in.
    /// </param>
    /// <returns>
    /// True if at least one service tax code is available for a TaxItemGroup
    /// </returns>

    public static boolean checkIfServiceTaxAvailable_IN(TaxItemGroup _taxItemGroup)
    {
        TaxTable            serviceTaxTableLoc;
        TaxonItem           taxonItemNew;

        if (TaxParameters::isServiceTaxEnable_IN())
        {
            select firstOnly RecId from taxonItemNew
                where taxonItemNew.TaxItemGroup    == _taxItemGroup
                    exists join serviceTaxTableLoc
                        where serviceTaxTableLoc.TaxCode    == taxonItemNew.TaxCode
                            && serviceTaxTableLoc.TaxType_IN == TaxType_IN::ServiceTax;
        }

        return taxonItemNew.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(TaxItemGroup _taxItemGroup )
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                from
                     taxItemGroupHeading
                 where
                     taxItemGroupHeading.TaxItemGroup == _taxItemGroup).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TaxItemGroupHeading find(
        TaxItemGroup _taxItemGroup ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxItemGroupHeading taxItemGroupHeading;
        ;

        taxItemGroupHeading.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxItemGroupHeading.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            taxItemGroupHeading
            where
            taxItemGroupHeading.TaxItemGroup == _taxItemGroup;

        return taxItemGroupHeading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static TaxItemGroupHeading findRecId(
        recId   _recId,
        boolean _forUpdate = false)
    {
        TaxItemGroupHeading taxItemGroupHeading;

        if (_recId)
        {
            taxItemGroupHeading.selectForUpdate(_forUpdate);

            select firstonly taxItemGroupHeading
                where taxItemGroupHeading.RecId == _recId;
        }

        return taxItemGroupHeading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecoverableExpChkBoxUnMarked_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if Purchase Order has lines with POTBasis with reverse Charge percentage is attached and recoverable/expense on settlement checkbox is unmarked.
    /// </summary>
    /// <param name="_headingTableId">
    /// The heading table Id.
    /// </param>
    /// <param name="_headingRecId">
    /// The heading recId.
    /// </param>
    /// <param name="_taxTrans">
    /// The taxTrans buffer.
    /// </param>
    /// <returns>
    /// Boolean value, true if recoverable/Expense on settlement checkbox is unmarked for Purchase order line.
    /// </returns>
    public static boolean isRecoverableExpChkBoxUnMarked_IN(
    TableId     _headingTableId,
    RefRecId    _headingRecId,
    TaxTrans    _taxTrans = null)
    {
        boolean                                         ret;
        PurchTable                                      purchTableRecoverable;
        PurchLine                                       purchLineRecoverable;
        TaxItemGroupHeading                             taxItemGroupHeadingRev;
        TransitDocumentTransTaxInfoRelation_IN          relation;
        TransTaxInformation                             transTaxInformation;

        // Check if the recoverable/Expense on the tax settlement checkbox is unmarked.
        // and the ItemTaxGroup is of POT and reverseCharge percentage is defined on the itemTaxGroup.
        if (!_taxTrans)
        {
            select firstonly RecId from purchTableRecoverable
                where purchTableRecoverable.RecId   == _headingRecId
                   && purchTableRecoverable.TableId == _headingTableId
                exists join purchLineRecoverable
                    where purchLineRecoverable.PurchId == purchTableRecoverable.PurchId
                exists join relation
                    where relation.TransactionTableId == purchLineRecoverable.TableId
                        && relation.TransactionRecId == purchLineRecoverable.RecId
                exists join transTaxInformation
                    where transTaxInformation.RecId == relation.TransTaxInformationRecId
                        && !transTaxInformation.ServiceTaxIsRecoverable
                        && transTaxInformation.ServiceTaxGTAServiceCategory != GTAServiceCategory_IN::Others
                exists join RecId from taxItemGroupHeadingRev
                    where taxItemGroupHeadingRev.TaxItemGroup == purchLineRecoverable.TaxItemGroup
                        && taxItemGroupHeadingRev.ServiceTaxBasis_IN == ServiceTaxBasis_IN::POTBasis
                        && taxItemGroupHeadingRev.ReverseChargePercentage_IN != 0;
        }
        else
        {
            select firstonly RecId from purchTableRecoverable
                exists join purchLineRecoverable
                    where purchLineRecoverable.InventTransId == _taxTrans.InventTransId
                exists join relation
                        where relation.TransactionTableId == purchLineRecoverable.TableId
                            && relation.TransactionRecId == purchLineRecoverable.RecId
                exists join transTaxInformation
                    where transTaxInformation.RecId == relation.TransTaxInformationRecId
                        && !transTaxInformation.ServiceTaxIsRecoverable;
        }

        ret = (purchTableRecoverable.RecId != 0);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGrouplookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Displays the item tax group lookup.
    /// </summary>
    /// <param name="_ctrl">
    ///    The <c>Object</c> object that is calling the method.
    /// </param>
    /// <param name="_company">
    ///    The <c>CompanyId</c> object is the current company.
    /// </param>
    public static void taxItemGrouplookup(Object _ctrl, CompanyId _company)
    {
        Args args;
        CompanyId company;
        FormRun formRun;
        ;

        company = _company;

        if (company == '')
        {
            company = curext();
        }

        changecompany(_company)
        {
            args = new Args();
            args.name(formstr(TaxItemGroupLookup));
            args.caller(_ctrl);
            formRun = classfactory.formRunClass(args);
            formRun.init();
            _ctrl.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS21973";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePOTForGTA_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that--> Item sales tax group with 'Point of taxation' basis cannot be selected for GTA or Foreign vendor.
    /// </summary>
    /// <param name="_vendor">
    /// The vendor table buffer.
    /// </param>
    /// <param name="_taxItemGroup">
    /// The TaxItem group attached t the order line.
    /// </param>
    /// <returns>
    /// false if GTA vendor is selected for POT  transaction.
    /// </returns>
    public static boolean validatePOTForGTA_IN(
        VendTable    _vendor,
        TaxItemGroup _taxItemGroup)
    {
        boolean             ret = true;
        TaxItemGroupHeading taxItemGroupHeadingRev = TaxItemGroupHeading::find(_taxItemGroup);

        if (_taxItemGroup != ''
            && TaxParameters::isServiceTaxEnable_IN()
            && (_vendor.isGTA() || _vendor.isForeign())
            && taxItemGroupHeadingRev.ServiceTaxBasis_IN == ServiceTaxBasis_IN::POTBasis
            && taxItemGroupHeadingRev.ReverseChargePercentage_IN != 100)
        {
            ret = checkFailed("@SYS4002039");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccruePayableAtInvoicing_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the specific salex tax item group is marked as Accrue Payable at Invoicing.
    /// </summary>
    /// <param name="_taxItemGroup">
    /// The name of Sales Tax Item Group.
    /// </param>
    /// <returns>
    /// True or False.
    /// </returns>
    public static boolean isAccruePayableAtInvoicing_IN(TaxItemGroup _taxItemGroup)
    {
        TaxItemGroupHeading taxItemGroupHeading;
        boolean             result = false;
        taxItemGroupHeading = TaxItemGroupHeading::find(_taxItemGroup);

        if (taxItemGroupHeading.RecId != 0)
        {
            result = (taxItemGroupHeading.ServiceTaxBasis_IN == ServiceTaxBasis_IN::POTBasis) && taxItemGroupHeading.AccruePayableAtInvoicing_IN;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();
    
        RetailAttributesLegalEntityLookup retailAttributesLegalEntityLookup;

        select firstonly retailAttributesLegalEntityLookup
            where (retailAttributesLegalEntityLookup.ItemSalesTaxGroupPurch == this.TaxItemGroup
                || retailAttributesLegalEntityLookup.ItemSalesTaxGroupSales == this.TaxItemGroup)
                && retailAttributesLegalEntityLookup.LegalEntity == CompanyInfo::current();

        if (retailAttributesLegalEntityLookup)
        {
            return checkFailed(strfmt(("@Retail:RetailAttributesLegalEntityLookupPropertiesDeleteValidation"), this.TaxItemGroup, EcoResCategory::find(retailAttributesLegalEntityLookup.Category).Name));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<DeveloperDocumentation>@SYS126032</DeveloperDocumentation>
	<FormRef>TaxItemGroup</FormRef>
	<Label>@SYS21932</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxItemGroup</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>TaxItemGroupIdx</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Tax</Modules>
	<PrimaryIndex>TaxItemGroupIdx</PrimaryIndex>
	<ReplacementKey>TaxItemGroupIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>FormulaDesigner_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>FormulaDesigner_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxOnItem</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxOnItem</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EUSalesListType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceTax_IN</Name>
			<Label>@GLS5006</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceTaxBasis_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReverseChargePercentage_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccruePayableAtInvoicing_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SubscriptionContinuousTax</Name>
			<Label>@SYS14482</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Continuous_HU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Source</Name>
			<Label>@SYS11258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Continuous_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>HU</CountryRegionCodes>
			<Label>@SYS4082021</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EUSalesListType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EUSalesListType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReverseChargePercentage_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ServiceTaxRevPercentage_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ServiceTaxBasis_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ServiceTaxBasis_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccruePayableAtInvoicing_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AccruePayableAtInvoicing_IN</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Source</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>TaxMasterDataSource</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxItemGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxItemGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>