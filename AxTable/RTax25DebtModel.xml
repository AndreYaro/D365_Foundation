<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25DebtModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RTax25DebtModel extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        RTax25RegisterTable rTax25RegisterTable;

        ret = super();

        if (this.PeriodType == RTax25PeriodType::NineMonths)
        {
            ret = checkFailed("@RTax25BadDebtReserve:BadDebtCalcWrongPeriodType");
        }

        while select RegisterType, PeriodType from rTax25RegisterTable
        {
            if (! ret)
            {
                break;
            }

            ret = RTax25DebtModel::checkRegisterType(rTax25RegisterTable.RegisterType, rTax25RegisterTable.PeriodType, this) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method checks if a record meeting parameter values exists.
    /// </summary>
    /// <param name = "_modelId">A reference to a debt model.</param>
    /// <returns>A <c>Boolean</c> value indicating if the record exists.</returns>
    public static boolean checkExist(RTax25DebtModelId _modelId)
    {
        boolean ret = true;

        if (!RTax25DebtModel::exist(_modelId))
        {
            ret = checkFailed(strfmt(RTax25DebtModel::txtNotExist(), _modelId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRegisterType</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method checks compatibility of debt model setup and tax registers setup.
    /// </summary>
    /// <param name="_registerType">
    /// The tax register type to validate.
    /// </param>
    /// <param name="_periodType">
    /// The tax period type.
    /// </param>
    /// <param name="_debtModel">
    /// A buffer containing debt model header.
    /// </param>
    /// <returns>
    /// A boolean value indicating if the check of compatibility of debt model setup and tax registers setup
    /// was successful.
    /// </returns>
    public static boolean checkRegisterType(
        RTax25RegisterType _registerType,
        RTax25PeriodType _periodType,
        RTax25DebtModel _debtModel = null)
    {
        boolean ret = true;
        RTax25DebtModel rTax25DebtModel;

        switch (_registerType)
        {
            case RTax25RegisterType::DebtDebitInventory,
                RTax25RegisterType::DebtDebitReservation,
                RTax25RegisterType::DebtDebitReservMovement,
                RTax25RegisterType::DebtDebitMovement,
                RTax25RegisterType::DebtDebitReservationDetail,
                RTax25RegisterType::DebtDebitReservMovementDetail :
                rTax25DebtModel = _debtModel ? _debtModel : RTax25DebtModel::findRecId(CustParameters::rTax25DebtModelTax());
                if (! rTax25DebtModel)
                    return true;

                if (! _debtModel.RecId || _debtModel.RecId != CustParameters::rTax25DebtModelTax())
                {
                    break;
                }

                if (((_registerType == RTax25RegisterType::DebtDebitReservation     ||
                      _registerType == RTax25RegisterType::DebtDebitReservMovement) &&
                    rTax25DebtModel.AccountingPolicy != RTax25DebtPolicy::Total)          ||
                    ((_registerType == RTax25RegisterType::DebtDebitReservationDetail     ||
                      _registerType == RTax25RegisterType::DebtDebitReservMovementDetail) &&
                    rTax25DebtModel.AccountingPolicy != RTax25DebtPolicy::Document))
                {
                    ret = checkFailed("@RTax25BadDebtReserve:BadDebtTaxModelIncompatible");
                }

                if (rTax25DebtModel.PeriodType < _periodType)
                {
                    ret = checkFailed(strFmt("@RTax25BadDebtReserve:TaxRegPeriodMoreThanModel", _registerType));
                }
                break;
            case RTax25RegisterType::DebtDebitInventoryRAP,
                RTax25RegisterType::DebtDebitReservationRAP,
                RTax25RegisterType::DebtDebitReservMovementRAP,
                RTax25RegisterType::DebtDebitMovementRAP,
                RTax25RegisterType::DebtDebitReservationDetailRAP,
                RTax25RegisterType::DebtDebitReservMovementDetailRAP :
                rTax25DebtModel = _debtModel ? _debtModel : RTax25DebtModel::findRecId(CustParameters::rTax25DebtModel());
                if (! rTax25DebtModel)
                    return true;

                if (! _debtModel.RecId || _debtModel.RecId != CustParameters::rTax25DebtModel())
                {
                    break;
                }

                if (((_registerType == RTax25RegisterType::DebtDebitReservationRAP      ||
                      _registerType == RTax25RegisterType::DebtDebitReservMovementRAP)  &&
                    rTax25DebtModel.AccountingPolicy != RTax25DebtPolicy::Total)             ||
                    ((_registerType == RTax25RegisterType::DebtDebitReservationDetailRAP     ||
                      _registerType == RTax25RegisterType::DebtDebitReservMovementDetailRAP) &&
                    rTax25DebtModel.AccountingPolicy != RTax25DebtPolicy::Document))
                {
                    ret = checkFailed("@RTax25BadDebtReserve:BadDebtAccPolicyDoesNotMatch");
                }

                if (rTax25DebtModel.PeriodType < _periodType)
                {
                    ret = checkFailed(strFmt("@RTax25BadDebtReserve:TaxRegPeriodMoreThanModel", _registerType));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns a boolean value indicating if the record exists.
    /// </summary>
    /// <param name="_modelId">
    /// The debt model ID.
    /// </param>
    /// <returns>
    /// A boolean value indicating if the record exists.
    /// </returns>

    public static boolean exist(RTax25DebtModelId _modelId)
    {
        boolean found;

        found = (select firstonly RecId
                from RTax25DebtModel
                where RTax25DebtModel.ModelId == _modelId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RTax25DebtModel</c> table.
    /// </summary>
    /// <param name="_modelId">
    /// The debt model ID.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model.
    /// </param>
    /// <returns>
    /// A record in the <c>RTax25DebtModel</c> table; otherwise, an empty record.
    /// </returns>

    public static RTax25DebtModel find(
    RTax25DebtModelId       _modelId,
    boolean                 _forupdate = false,
    ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        RTax25DebtModel debtModel;

        debtModel.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            debtModel.concurrencyModel(_concurrencyModel);
        }

        select firstonly debtModel
            where debtModel.ModelId == _modelId;

        return debtModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RTax25DebtModel</c> table.
    /// </summary>
    /// <param name="_modelRecId">
    /// The debt model record ID.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model.
    /// </param>
    /// <returns>
    /// A record in the <c>RTax25DebtModel</c> table; otherwise, an empty record.
    /// </returns>

    public static RTax25DebtModel findRecId(
        RefRecId            _modelRecId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        RTax25DebtModel debtModel;

        debtModel.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            debtModel.concurrencyModel(_concurrencyModel);
        }

        select firstonly debtModel
            where debtModel.RecId == _modelRecId;

        return debtModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container with starting and ending dates of the tax period including the specified date.
    /// </summary>
    /// <param name="_periodType">
    /// The tax period type.
    /// </param>
    /// <param name="_transDate">
    /// A date in the tax period.
    /// </param>
    /// <returns>
    /// A container with starting and ending dates of the tax period including the specified date.
    /// </returns>

    public static container periodDates(RTax25PeriodType _periodType, TransDate _transDate)
    {
        TransDate fromDate, toDate;
        int periodNum;
        int mthPeriod = RTax25RegisterJournalTable::periodMthLength(_periodType);

        periodNum = mthOfYr(_transDate) div mthPeriod;
        if (mthOfYr(_transDate) mod mthPeriod)
        {
            periodNum++;
        }

        toDate = endmth(mkdate(1, periodNum * mthPeriod, year(_transDate)));
        fromDate = mkDate(1, mthOfYr(toDate) - mthPeriod + 1, year(_transDate));

        return [fromDate, toDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@RTax25BadDebtReserve:DebtModelNotExists";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@RTax25BadDebtReserve:DebtCalcModelsDevDoc</DeveloperDocumentation>
	<FormRef>RTax25DebtModel</FormRef>
	<Label>@RTax25BadDebtReserve:DebtCalcModels</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Group</TableGroup>
	<TitleField1>ModelId</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>ModelIdx</ClusteredIndex>
	<Modules>RTax25</Modules>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<Relation>RTax25DebtModel</Relation>
			<Table>CustParameters</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction2</Name>
			<Relation>RTax25DebtModelTax</Relation>
			<Table>CustParameters</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction3</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>RTax25DebtModel</Relation>
			<Table>RTax25DebtLedgerAccounts</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction4</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>RTax25DebtModel</Relation>
			<Table>RTax25DebtModelPeriod</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingPolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingPolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModelId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerPosting</Name>
			<Label>@SYS114861</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnrealisedExpenseLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnrealisedRevenueLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BadDebtReserveLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SummaryLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RTax25ProfitTableLoss</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RTax25ProfitTableProfit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Revenue</Name>
			<Label>@RTax25BadDebtReserve:ReserveLimit</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RevenueSeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReserveLimitOnDelta</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountingPolicy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RTax25DebtPolicy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BadDebtReserveLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<HelpText>@GLS104205</HelpText>
			<Label>@GLS104204</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RTax25DebtModelId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PeriodType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RTax25PeriodType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReserveLimitOnDelta</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@RTax25BadDebtReserve:ReserveLimitOnPeriodHelp</HelpText>
			<Label>@RTax25BadDebtReserve:ReserveLimitOnPeriod</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RevenueSeqNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumBase_RU</ExtendedDataType>
			<HelpText>@RTax25BadDebtReserve:ReserveLimitSeqHelp</HelpText>
			<Label>@RTax25BadDebtReserve:ReserveLimitSeq</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RTax25ProfitTableLoss</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RTax25ProfitTableLoss</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RTax25ProfitTableProfit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RTax25ProfitTableProfit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SummaryLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<HelpText>@SYS27775</HelpText>
			<Label>@SYS11733</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UnrealisedExpenseLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@GLS104202</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UnrealisedRevenueLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<HelpText>@RTax25BadDebtReserve:UnrealIncomeAccountHelp</HelpText>
			<Label>@RTax25BadDebtReserve:UnrealIncomeAccount</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ModelIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ModelId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BadDebtReserveLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BadDebtReserveLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BadDebtReserveLedgerDimension</Name>
					<Field>BadDebtReserveLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RTax25ProfitTableLoss</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RTax25ProfitTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RTax25ProfitTableLoss</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RTax25ProfitTableLoss</Name>
					<Field>RTax25ProfitTableLoss</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RTax25ProfitTableProfit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RTax25ProfitTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RTax25ProfitTableProfit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RTax25ProfitTableProfit</Name>
					<Field>RTax25ProfitTableProfit</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RTax25StdSeq</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RTax25StdSeq</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RevenueSeqNum</Name>
					<Field>RevenueSeqNum</Field>
					<RelatedField>SeqNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>ModuleType</Name>
					<RelatedField>ModuleType</RelatedField>
					<Value>2</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SummaryLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SummaryLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SummaryLedgerDimension</Name>
					<Field>SummaryLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnrealisedExpenseLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnrealisedExpenseLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnrealisedExpenseLedgerDimension</Name>
					<Field>UnrealisedExpenseLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnrealisedRevenueLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnrealisedRevenueLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnrealisedRevenueLedgerDimension</Name>
					<Field>UnrealisedRevenueLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>