<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupAutoLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MarkupAutoLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCustomerMarkup_BR</Name>
				<Source><![CDATA[
    public boolean checkCustomerMarkup_BR()
    {
        MarkupTable markupTable = this.markupTable();
        if (this.ModuleCategory    == HeadingLine::Heading &&
            markupTable.ModuleType == MarkupModuleType::Cust &&
            markupTable.checkCustMiscCharge_BR())
        {
            return checkFailed("@GLS63621");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFromAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the value of the <c>FromAmount</c> field is set correctly.
    /// </summary>
    /// <returns>true if the <c>FromAmount</c> field contains valid values; otherwise, false.</returns>
    private boolean checkFromAmount()
    {
        boolean ret = true;

        if (this.MarkupCategory != MarkupCategory::Fixed &&
            this.MarkupCategory != MarkupCategory::Percent &&
            this.FromAmount != 0)
        {
            ret = checkFailed("@RET170014");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFromAndToAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the values of the <c>FromAmount</c> and <c>ToAmount</c> fields are set correctly.
    /// </summary>
    /// <returns>true if the <c>FromAmount</c> and <c>ToAmount</c> fields contain valid values; otherwise, false.</returns>
    private boolean checkFromAndToAmount()
    {
        boolean ret = true;

        if (ret && !this.checkFromAmount())
        {
            ret  = false;
        }

        if (ret && !this.checkToAmount())
        {
            ret = false;
        }

        // If both FromAmount and ToAmount are provided, then FromAmount should not be greater than ToAmount
        if (ret &&
            this.FromAmount != 0 && this.ToAmount != 0 &&
            this.FromAmount > this.ToAmount)
        {
            ret = checkFailed("@RET170016");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMarkupCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the value of the <c>MarkupCode</c> field is set correctly.
    /// </summary>
    /// <returns>
    /// True if advanced auto charge is disabled or the <c>MarkupCode</c> field avoids the same code with cancellation charge when advanced auto charge is enabled; otherwise, false.
    /// </returns>
    private boolean validateMarkupCode()
    {
        boolean ret = true;

        RetailParameters retailParameters = RetailParameters::find();

        // skip validation if advanced auto charges is disabled.
        // Avoid using cancellation charge code
        if (retailParameters.UseAdvancedAutoCharges == NoYes::Yes && this.ModuleType == MarkupModuleType::Cust && retailParameters.CancellationChargeCode == this.MarkupCode)
        {
            ret = checkFailed(strFmt("@RetailCharge:ChargeCodeHasBeenUsedByCancellationChargeWarning", this.MarkupCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkKeep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the value of the <c>Keep</c> field is set correctly.
    /// </summary>
    /// <returns>true if the <c>Keep</c> field contains a valid value; otherwise, false.</returns>
    private boolean checkKeep()
    {
        boolean ret = true;

        if (ret
            && this.ModuleType == MarkupModuleType::Vend
            && this.Keep != (this.MarkupCategory != MarkupCategory::Fixed))
        {
            ret = checkFailed(strFmt("@SYS136412", fieldId2pname(tableNum(MarkupAutoLine), fieldNum(MarkupAutoLine, Keep)), this.Keep));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupCategory</Name>
				<Source><![CDATA[
    public boolean  checkMarkupCategory()
    {
        boolean  ok = true;

        if (this.ModuleCategory == HeadingLine::Heading)
        {
            if (this.MarkupCategory == MarkupCategory::Pcs)
            {
                ok = checkFailed("@SYS28725");
            }

            if (this.MarkupCategory == MarkupCategory::InterCompanyPercent)
            {
                ok = checkFailed("@SYS98798");
            }

            if (AutoChargesSetupLineLevelUnitOfMeasureFeature::instance().isEnabled()
                && (this.MarkupCategory == MarkupCategory::UnitSpecific || this.MarkupCategory == MarkupCategory::UnitSpecificMatch))
            {
                ok = checkFailed("@SCM:AutoChargeHeaderLevelSpecificUnitError");
            }
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            // External charges are only allowed for Delivery charges
            if (this.ModuleType != MarkupModuleType::Delivery && this.MarkupCategory == MarkupCategory::External)
            {
                ok = checkFailed("@RET261315");
            }
        }

        // Do not allow Proportional category to be used for other than for purchase orders
        if (this.ModuleType!= MarkupModuleType::Vend && this.MarkupCategory == MarkupCategory::Proportional)
        {
            ok = checkFailed("@SCM:ProportionalChargeCategoryError");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupCurrencyCode</Name>
				<Source><![CDATA[
    private boolean checkMarkupCurrencyCode()
    {
        boolean ok = true;

        if (!this.allowEditMarkupCurrencyCode() && this.MarkupCurrencyCode != this.CurrencyCode)
        {
            ok = checkFailed(strFmt("@SCM:ChargeCurrencyCodeAndOrderCurrencyCodeDifferentErrorMessage", fieldPName(MarkupAutoLine, MarkupCurrencyCode), fieldPName(MarkupAutoLine, CurrencyCode)));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMaxAmountLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates miscellaneous charges against the maximum amount limit of the <c>MarkupCode</c> field.
    /// </summary>
    /// <returns>
    /// true if miscellaneous charges are larger than the maximum amount limit; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method converts the miscellaneous charges into the company base currency and validates the
    /// miscellaneous charges against the maximum amount limit.
    /// </remarks>
    public boolean  checkMaxAmountLimit()
    {
        boolean                 ret = true;
        MarkupValue             miscChargesValue = this.Value;
        CurrencyExchangeHelper  currencyExchangeHelper;

        //Fix for bug#15627
        if (!Ledger::accountingCurrency(CompanyInfo::current()))
        {
            throw error("@SYS26296");
        }

        if (this.MarkupCategory == MarkupCategory::Fixed && this.ModuleType == MarkupModuleType::Vend)
        {
            if (this.MarkupCurrencyCode != Ledger::accountingCurrency(CompanyInfo::current()))
            {
                currencyExchangeHelper = CurrencyExchangeHelper::construct();
                currencyExchangeHelper.parmLedgerRecId(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId));
                miscChargesValue = currencyExchangeHelper.calculateTransactionToAccounting(this.MarkupCurrencyCode, this.Value ,  true);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSiteAndWarehouseRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the value of the <c>InventSiteId</c> field is set correctly.
    /// </summary>
    /// <returns>true if the <c>InventSiteId</c> field contains valid values; otherwise, false.</returns>
    private boolean checkSiteAndWarehouseRelation()
    {
        boolean ret = true;

        if (this.InventSiteId)
        {
            if (this.InventLocationId
             && InventLocation::find(this.InventLocationId).InventSiteId != this.InventSiteId)
            {
                ret = checkFailed(strFmt("@SYS104861", this.InventLocationId, this.InventSiteId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkToAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the value of the <c>ToAmount</c> field is set correctly.
    /// </summary>
    /// <returns>true if the <c>ToAmount</c> field contains valid values; otherwise, false.</returns>
    private boolean checkToAmount()
    {
        boolean ret = true;

        if (this.MarkupCategory != MarkupCategory::Fixed &&
            this.MarkupCategory != MarkupCategory::Percent &&
            this.ToAmount != 0)
        {
            ret = checkFailed("@RET170015");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(MarkupAutoLine, MarkupCurrencyCode):
                this.defaultMarkupCurrencyCode();
                break;

            case fieldNum(MarkupAutoLine, Keep):
                this.defaultKeep();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMarkupCurrencyCode</Name>
				<Source><![CDATA[
    private void defaultMarkupCurrencyCode()
    {
        if (!(this.isFieldSet(fieldNum(MarkupAutoLine, CurrencyCode))   ||
              this.isFieldSet(fieldNum(MarkupAutoLine, MarkupCode))     ||
              this.isFieldSet(fieldNum(MarkupAutoLine, ModuleType))))
        {
            return;
        }

        if (!this.allowEditMarkupCurrencyCode())
        {
            this.MarkupCurrencyCode = this.CurrencyCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultKeep</Name>
				<Source><![CDATA[
    private void defaultKeep()
    {
        if (!(this.isFieldSet(fieldNum(MarkupAutoLine, ModuleType))  ||
              this.isFieldSet(fieldNum(MarkupAutoLine, MarkupCategory))))
        {
            return;
        }

        if (this.ModuleType == MarkupModuleType::Vend)
        {
            this.Keep = this.MarkupCategory != MarkupCategory::Fixed;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
                    [fieldNum(MarkupAutoLine, MarkupCurrencyCode), this.markupCurrencyCodeDefaultingDependencies()],
                    [fieldNum(MarkupAutoLine, Keep), this.keepDefaultingDependencies()]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupCurrencyCodeDefaultingDependencies</Name>
				<Source><![CDATA[
    private container markupCurrencyCodeDefaultingDependencies()
    {
        return [fieldNum(MarkupAutoLine, CurrencyCode), fieldNum(MarkupAutoLine, MarkupCode), fieldNum(MarkupAutoLine, ModuleType)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>keepDefaultingDependencies</Name>
				<Source><![CDATA[
    private container keepDefaultingDependencies()
    {
        return [fieldNum(MarkupAutoLine, ModuleType), fieldNum(MarkupAutoLine, MarkupCategory)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAutoTable</Name>
				<Source><![CDATA[
    public void  initFromAutoTable(MarkupAutoTable markupAutoTable)
    {
        this.TableTableId   = markupAutoTable.TableId;
        this.TableRecId     = markupAutoTable.RecId;
        this.ModuleType     = markupAutoTable.ModuleType;
        this.ModuleCategory = markupAutoTable.ModuleCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void  initValue()
    {
        super();
        this.CurrencyCode = Ledger::accountingCurrency(CompanyInfo::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void  insert()
    {
        this.LineNum = this.LineNum ? this.LineNum : MarkupAutoLine::lastLineNum(this.TableTableId, this.TableRecId) + 1;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditMarkupCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the <c>MarkupCurrencyCode</c> may be edited to have a different value than the <c>CurrencyCode</c>.
    /// </summary>
    /// <returns>
    /// True if the <c>MarkupCurrencyCode</c> may be edited; otherwise, false.
    /// </returns>
    public boolean allowEditMarkupCurrencyCode()
    {
        return this.markupTable().allowEditCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTable</Name>
				<Source><![CDATA[
    MarkupTable  markupTable()
    {
        MarkupTable  markupTable;

        select markupTable
            index ModuleCodeIdx
            where markupTable.MarkupCode == this.MarkupCode  &&
                  markupTable.ModuleType == this.ModuleType;

        return markupTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modify a specified field.
    /// </summary>
    /// <param name="_fieldName">
    /// The field Name of the field to modify.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        // <GIN>
        boolean         isMiscChargeEnabled = LedgerParameters::isMiscellaneouscharges_IN();
        // </GIN>
        super(_fieldName, _arrayIndex);

        // <GIN>
        switch (_fieldName)
        {
            case fieldStr(MarkupAutoLine, MarkupCode):
                if (isMiscChargeEnabled)
                {
                    this.NotionalCharges_IN     = NoYes::No;
                    this.NotionalPct_IN         = 0;
                }
                break;

            case fieldStr(MarkupAutoLine, MarkupCategory):
                if (isMiscChargeEnabled)
                {
                    this.NotionalCharges_IN     = NoYes::No;
                    this.NotionalPct_IN         = 0;
                }
                break;

            case fieldStr(MarkupAutoLine, CurrencyCode):
                if (isMiscChargeEnabled)
                {
                    this.NotionalCharges_IN     = NoYes::No;
                    this.NotionalPct_IN         = 0;
                }
                break;
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch(_fieldId)
        {
            case fieldnum(MarkupAutoLine, MarkupCategory) :
                if (AutoChargesSetupLineLevelUnitOfMeasureFeature::instance().isEnabled() 
                    && (this.MarkupCategory != MarkupCategory::UnitSpecific && this.MarkupCategory != MarkupCategory::UnitSpecificMatch))
                {
                    this.SpecificUnitSymbol = '';
                }

                if (AutoChargesSetupSequenceCompoundFeature::instance().isEnabled()
                    && (this.MarkupCategory != MarkupCategory::Percent))
                {
                    this.IsCompound = NoYes::No;
                }
                
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useInMatching</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a <c>MarkupAutoLine</c> record can participate in transaction matching.
    /// </summary>
    /// <returns>
    ///    true if the current record can participate in transaction matching; otherwise, false.
    /// </returns>
    public display MarkupUseInMatching useInMatching()
    {
        return this.markupTable().UseInMatching;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(MarkupAutoLine, MarkupCategory):
                ret = this.checkMarkupCategory();
                break;

            case fieldNum(MarkupAutoLine, Keep):
                ret = this.checkKeep();
                break;
            // <GIN>
            case(fieldNum(MarkupAutoLine, NotionalPct_IN)) :
                if (TaxParameters::checkParameterForPosting_IN(TaxType_IN::Customs) &&
                    this.NotionalPct_IN > 999.99)
                {
                    ret = false;
                }
                break;
            // </GIN>
            case fieldNum(MarkupAutoLine, FromAmount):
                ret = this.checkFromAmount();
                break;
            case fieldNum(MarkupAutoLine, ToAmount):
                ret = this.checkToAmount();
                break;
            case fieldNum(MarkupAutoLine, MarkupCurrencyCode):
                ret = this.checkMarkupCurrencyCode() && ret;
                break;
            case fieldNum(MarkupAutoLine, InventSiteId):
                ret = this.checkSiteAndWarehouseRelation() && ret;
                break;
            case fieldNum(MarkupAutoLine, InventLocationId):
                ret = this.checkSiteAndWarehouseRelation() && ret;
                break;
            case fieldNum(MarkupAutoLine, IsCompound):
                if (this.IsCompound == NoYes::Yes
                    && (this.MarkupCategory != MarkupCategory::Percent || this.ModuleCategory != HeadingLine::Heading)
                    && AutoChargesSetupSequenceCompoundFeature::instance().isEnabled())
                {
                    ret = checkFailed("@SCM:AutoChargeHeaderIsCompundError");
                }
                break;
            case fieldNum(MarkupAutoLine, SpecificUnitSymbol):
                if (this.SpecificUnitSymbol
                    && (this.ModuleCategory != HeadingLine::Line
                        || !(this.MarkupCategory == MarkupCategory::UnitSpecific || this.MarkupCategory == MarkupCategory::UnitSpecificMatch))
                    && AutoChargesSetupLineLevelUnitOfMeasureFeature::instance().isEnabled())
                {
                    ret = checkFailed("@SCM:AutoChargeLineUnitError");
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a specified field.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name of the field to check.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field.
    /// </param>
    /// <returns>
    /// Returns true if the field passes validation; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret = super(_fieldName, _arrayIndex);

        // <GIN>
        switch (_fieldName)
        {
            case fieldStr(MarkupAutoLine, NotionalPct_IN) :
                if (TaxParameters::checkParameterForPosting_IN(TaxType_IN::Customs) &&
                    this.NotionalPct_IN > 999.99)
                {
                    ret = false;
                }
                break;
        }
        // </GIN>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (!this.checkMarkupCategory())
        {
            ret = false;
        }

        // This should be for validateWrite, and not in checkMarkupCategory,
        // since we do not want this for validateField causing the create charge to fail in the UI.
        if (ret
            && this.ModuleCategory == HeadingLine::Line
            && AutoChargesSetupLineLevelUnitOfMeasureFeature::instance().isEnabled()
            && (this.MarkupCategory == MarkupCategory::UnitSpecific || this.MarkupCategory == MarkupCategory::UnitSpecificMatch)
            && !this.SpecificUnitSymbol)
        {
            ret = checkFailed("@SCM:AutoChargeLineUnitMustBeSpecifiedError");
        }


        if (!this.checkMaxAmountLimit())
        {
            ret = false;
            Markup::showMiscChargeMaximumLimitWarning(this.TableId);
        }

        if (!this.checkFromAndToAmount())
        {
            ret = false;
        }

        if (!this.validateMarkupCode())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>MarkupAutoLine</c> record for Brazilian localization.
    /// </summary>
    /// <param name="_returnValue">
    /// A boolean value that is the result of the main <c>validateWrite</c> method.
    /// </param>
    /// <returns>
    /// True if it is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite_BR(boolean _returnValue)
    {
        boolean ret = _returnValue;

        ret = this.checkCustomerMarkup_BR();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets a record from the <c>MarkupAutoLine</c> table.
    /// </summary>
    /// <param name="markupModule">
    ///   A element from the <c>MarkupModule</c> enum.
    /// </param>
    /// <param name="markupCode">
    ///   A markup code.
    /// </param>
    /// <param name="_forUpdate">
    ///   true if the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///   A <c>MarkupAutoLine</c> record.
    /// </returns>
    /// <remarks>
    ///   The <c>ModuleInventCustVend</c> enum was replaced with a more specific enum for markup functionality, use the <c>MarkupModuleType</c> enum
    /// </remarks>
    static MarkupAutoLine find(MarkupModule markupModule,
                               MarkupCode   markupCode,
                               boolean      _forUpdate = false)
    {
        MarkupAutoLine  markupAutoLine;

        if (markupCode)
        {
            markupAutoLine.selectForUpdate(_forUpdate);

            select firstonly markupAutoLine
                where markupAutoLine.ModuleType == markupModule &&
                      markupAutoLine.MarkupCode == markupCode;
        }

        return markupAutoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static MarkupAutoLine findByRecId(RecId _recId, boolean _forUpdate = false)
    {
        MarkupAutoLine markupAutoLine;

        if (_recId)
        {
            markupAutoLine.selectForUpdate(_forUpdate);

            select firstonly markupAutoLine
                where markupAutoLine.recId == _recId;
        }

        return markupAutoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    static LineNum  lastLineNum(MarkupAutoLineTableRefRecId   tableTableId,
                                       MarkupAutoLineRefRecId        tableRecId)
    {
        return (select maxof(LineNum) from markupAutoLine
                    index hint TableIdx
                    where markupAutoLine.TableTableId  == tableTableId &&
                          markupAutoLine.TableRecId    == tableRecId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturnCodeCharged</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks whether selected disposition code has any charge configured.
    /// </summary>
    /// <param name = "_returnCode">
    /// Selected disposition code.
    /// </param>
    /// <returns>
    /// True if charge exist. Else false.
    /// </returns>
    internal static boolean isReturnCodeCharged(ReturnCode _returnCode)
    {
        boolean chargeFound;
        MarkupAutoLine markupAutoLine;
        MarkupAutoTable markupAutoTable;

        select firstonly markupAutoLine
            exists join markupAutoTable
                where markupAutoTable.TableId == markupAutoLine.TableTableId
                    && markupAutoTable.RecId == markupAutoLine.TableRecId
                    && markupAutoTable.MarkupReturn == ReturnCodeType::Disposition
                    && markupAutoTable.ModuleType == MarkupModuleType::Cust
                    && markupAutoTable.ModuleCategory == HeadingLine::Line
                    && markupAutoTable.ReturnRelation == _returnCode
                    && markupAutoLine.Value != 0;

        if (markupAutoLine)
        {
            chargeFound = true;
        }

        return chargeFound;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Markup</ConfigurationKey>
	<DeveloperDocumentation>@SYS124468</DeveloperDocumentation>
	<FormRef>MarkupAutoSetup</FormRef>
	<Label>@SYS24268</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ModuleCategory</TitleField1>
	<TitleField2>CurrencyCode</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>TableIdx</ClusteredIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>TableIdx</PrimaryIndex>
	<ReplacementKey>TableIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TableRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Keep</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Charges_IN</Name>
			<Label>@SYS8371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NotionalCharges_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NotionalPct_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customs_IN</Name>
			<Label>@GLS5007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomsAssessableValue_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MiscCharges</Name>
			<Label>@SYS8371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Return</Name>
			<Label>@SYS16512</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRReturnMarkup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustomsAssessableValue_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS5298</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FromAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupFromAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Keep</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupKeep</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MarkupCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupCategoryType</ExtendedDataType>
			<EnumType>MarkupCategory</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupCurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRReturnMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@MCR21956</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleCategory</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupModuleCategory</ExtendedDataType>
			<EnumType>HeadingLine</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupModule</ExtendedDataType>
			<EnumType>MarkupModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NotionalCharges_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS5298</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NotionalPct_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NotionalPct_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TableRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MarkupAutoLineRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TableTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupAutoLineTableRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ToAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupToAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Value</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCompound</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupIsCompound</ExtendedDataType>
			<FeatureClass>AutoChargesSetupSequenceCompoundFeature</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Sequence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupSequence</ExtendedDataType>
			<FeatureClass>AutoChargesSetupSequenceCompoundFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SpecificUnitSymbol</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupSpecificUnitSymbol</ExtendedDataType>
			<FeatureClass>AutoChargesSetupLineLevelUnitOfMeasureFeature</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TableIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TableRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupAutoLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MarkupAutoTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupAutoTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRecId</Name>
					<Field>TableRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableTableId</Name>
					<Field>TableTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MarkupCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MarkupCurrency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupAutoLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupCurrencyCode</Name>
					<SourceEDT>MarkupCurrencyCode</SourceEDT>
					<Field>MarkupCurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MarkupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MarkupTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupAutoLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModuleType</Name>
					<Field>ModuleType</Field>
					<RelatedField>ModuleType</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupCode</Name>
					<Field>MarkupCode</Field>
					<RelatedField>MarkupCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SpecificUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SpecificUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MarkupAutoLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecificUnitSymbol</Name>
					<Field>SpecificUnitSymbol</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>