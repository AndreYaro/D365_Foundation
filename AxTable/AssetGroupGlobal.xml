<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetGroupGlobal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetGroupGlobal extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>AssetGroupGlobal</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID in the <c>AssetGroupGlobal</c> table to check for existance.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>

    public static boolean checkExist(recId _recId)
    {
        boolean isExisting = true;

        if (!AssetGroupGlobal::exist(_recId))
        {
            isExisting = checkFailed(strfmt(AssetGroupGlobal::txtNotExist(), _recId, tableid2name(tablenum(AssetGroupGlobal))));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>AssetGroupGlobal</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID in the <c>AssetGroupGlobal</c> table to check for existance.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>

    public static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                 from
                     assetGroupGlobal
                 where
                     assetGroupGlobal.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the AssetGroupGlobal table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID in the <c>AssetGroupGlobal</c> table to check for retrieve.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in <c>AssetGroupGlobal</c>, if found; otherwise, an empty record.
    /// </returns>

    public static AssetGroupGlobal find(
        recId                 _recId,
        boolean               _forUpdate = false,
        ConcurrencyModel      _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetGroupGlobal      assetGroupGlobal;

        assetGroupGlobal.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetGroupGlobal.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            assetGroupGlobal
        where
            assetGroupGlobal.RecId == _recId;

        return assetGroupGlobal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the name that is represented by a specified record in the <c>AssetGroupGlobal</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record find.
    /// </param>
    /// <returns>
    ///    The name of the <c>AssetGroupGlobal</c> table; otherwise, an empty string.
    /// </returns>

    public static AssetGroupName findName(recId _recId)
    {
        AssetGroupGlobal      assetGroupGlobal;

        select firstonly Name from
            assetGroupGlobal
        where
            assetGroupGlobal.RecId == _recId;

        return assetGroupGlobal.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>AssetGroupGlobal</c> table does not exist.
    /// </summary>
    /// <returns>
    /// The message that states that a record does not exist.
    /// </returns>
    public static str txtNotExist()
    {
        return "@SYS113080";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<DeveloperDocumentation>@SYS330957</DeveloperDocumentation>
	<FormRef>AssetGroupGlobalMapping</FormRef>
	<Label>@SYS334901</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>GroupId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>GroupIdIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>AssetGroup</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>AssetGroup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetGroupGlobalMapping</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetGroupGlobalMapping</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetRule</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>AssetRule</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetRuleQualifierOption</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>AssetRuleQualifierOption</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysGroup</ExtendedDataType>
			<Label>@SYS334895</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetGroupName</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GroupIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>GroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>