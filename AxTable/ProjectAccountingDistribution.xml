<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectAccountingDistribution</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjectAccountingDistribution extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the transaction currency amount of the <c>ProjectAccountingDistribution</c> record
    /// </summary>
    /// <param name="_accountingDistribution">
    /// A record of the <c>AccountingDistribution</c> table.
    /// </param>
    /// <param name="_accDistSourceDocumentLineItem">
    /// An instance of the <c>SourceDocumentLineItem</c> class; optional
    /// </param>
    private void calcTransactionCurrencyAmount(AccountingDistribution _accountingDistribution, SourceDocumentLineItem _accDistSourceDocumentLineItem = null)
    {
        this.TransactionCurrencyAmount = CurrencyExchangeHelper::amount(ProjectAccountingDistribution::quantity(_accountingDistribution, _accDistSourceDocumentLineItem) * this.TransactionCurrencyPrice, Currency::findRecId(this.Currency).CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkActivityNumber</Name>
				<Source><![CDATA[
    private boolean checkActivityNumber()
    {
        boolean         ret = true;
        smmActivities   smmActivities;

        if (this.SmmActivities)
        {
            smmActivities = smmActivities::findWithRecId(this.SmmActivities);
            if (!smmActivities)
            {
                ret = checkFailed("@SYS50966");
            }

            if (smmActivityParentLinkTable::findByActivityAndParent(smmActivities.ActivityNumber, smmActivityParentType::Project, this.ProjTable, tableNum(ProjTable)).RecId == 0)
            {
                ret = checkFailed(strFmt("@SYS105858", smmActivities.ActivityNumber, ProjTable::findRecId(this.ProjTable).ProjId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCategoryId</Name>
				<Source><![CDATA[
    private boolean checkCategoryId(AccountingDistribution _accountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem)
    {
        boolean         ret = true;
        ProjCategory    projCategory;

        if (this.ProjCategory)
        {
            projCategory = ProjCategory::findRecId(this.ProjCategory);
            if (!projCategory)
            {
                ret = checkFailed(strFmt("@SYS1434", this.ProjCategory));
            }
            else
            {
                if (projCategory.CategoryType != ProjectSourceDocumentLineItemHelper::projCategoryType(_sourceDocumentLineItem))
                {
                    ret = checkFailed(strFmt("@SYS54897", projCategory.CategoryId));
                }

                if (ret && (projCategory.SetupEstimate || projCategory.SetupSubscription))
                {
                    ret = checkFailed("@SYS88806");
                }

                ret = ret && projCategory.validateIfInactiveAllowed();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyVarianceTransactionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the transaction currency amount of a quantity variance
    /// <c>ProjectAccountingDistribution</c> record for a vendor invoice.
    /// </summary>
    /// <param name = "_accountingDistribution">
    /// A record of the <c>AccountingDistribution</c> table.
    /// </param>
    /// <param name = "_accDistSourceDocumentLineItem">
    /// A source document line item for a line on a vendor invoice.
    /// </param>
    public void calcQtyVarianceTransactionAmount(AccountingDistribution               _accountingDistribution,
                                                 VendorInvoiceLineSourceDocLineItem   _accDistSourceDocumentLineItem)
    {
        AccountingDistribution  parentDistribution = AccountingDistribution::find(_accountingDistribution.ParentDistribution);
        AccountingDistribution  parentReferenceDistribution = AccountingDistribution::find(parentDistribution.ReferenceDistribution);
        SourceDocumentLineItem  parentReferenceSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(SourceDocumentLine::find(parentReferenceDistribution.SourceDocumentLine));

        Qty quantityDifference = ProjectAccountingDistribution::quantity(_accountingDistribution, _accDistSourceDocumentLineItem) -
                                 ProjectAccountingDistribution::quantity(parentReferenceDistribution, parentReferenceSourceDocumentLineItem);

        this.TransactionCurrencyAmount = this.TransactionCurrencyPrice * quantityDifference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjFundingSource</Name>
				<Source><![CDATA[
    private boolean checkProjFundingSource(AccountingDistribution _accountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem)
    {
        ProjInvoiceTable    projInvoiceTable;
        ProjFundingSource   projFundingSource;
        CustVendAC          custAccount;
        boolean             ret = true;

        if (this.ProjFundingSource)
        {
            projInvoiceTable = ProjTable::findRecId(this.ProjTable).projInvoice();
            if (projInvoiceTable)
            {
                projFundingSource = ProjFundingSource::find(this.ProjFundingSource);
                if (!projFundingSource)
                {
                    ret = checkFailed("@SYS152805");
                }
                else
                {
                    if (projFundingSource.ContractId != projInvoiceTable.ProjInvoiceProjId)
                    {
                        ret = checkFailed("@SYS152804");
                    }

                    if (ret)
                    {
                        custAccount = ProjectSourceDocumentLineItemHelper::custAccount(_sourceDocumentLineItem);
                        if (custAccount &&
                            ((projFundingSource.FundingType == ProjFundingType::Customer && projFundingSource.CustAccount != custAccount) ||
                                (projFundingSource.FundingType == ProjFundingType::Grant && ProjGrant::find(projFundingSource.ProjGrant).CustAccount != custAccount)))
                        {
                            ret = checkFailed("@SYS152804");
                        }
                    }
                }
            }
            else
            {
                ret = checkFailed("@SYS152804");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjId</Name>
				<Source><![CDATA[
    private boolean checkProjId(AccountingDistribution _accountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem)
    {
        ProjTable                   projTable;
        int                         enumId;
        SourceDocumentTypeEnumValue sourceDocumentTypeEnumValue;
        boolean                     ret = true;

        if (this.ProjTable)
        {
            projTable = ProjTable::findRecId(this.ProjTable);
            if (!projTable)
            {
                ret = checkFailed(strFmt("@SYS11217", this.ProjTable));
            }

            if (ret && !projTable.status().activeInTree())
            {
                ret = checkFailed(strFmt("@Proj:ProjectIsHeaderOrFinished", projTable.ProjId));
            }

            if (ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
            {
                enumId = enumName2Id(_sourceDocumentLineItem.parmSourceDocument().parmSourceDocumentHeader().TypeEnumName);
                sourceDocumentTypeEnumValue = _sourceDocumentLineItem.parmSourceDocument().parmSourceDocumentHeader().TypeEnumValue;

                if ((enumId == enumNum(SourceDocument_ProductRequisition) && sourceDocumentTypeEnumValue == SourceDocument_ProductRequisition::PurchaseRequisition) ||
                    (enumId == enumNum(SourceDocument_ProductOrder) && sourceDocumentTypeEnumValue == SourceDocument_ProductOrder::PurchaseOrder) ||
                    (enumId == enumNum(SourceDocument_VendorInvoice) && sourceDocumentTypeEnumValue == SourceDocument_VendorInvoice::VendorInvoice ))
                {
                    if (ret)
                    {
                        ret = projTable.status().validateWritePurchTable();
                    }
                }
                else if (enumId == enumNum(SourceDocument_CustomerInvoice) && sourceDocumentTypeEnumValue == SourceDocument_CustomerInvoice::CustomerFreeTextInvoice)
                {
                    if (ret)
                    {
                        ret = projTable.status().validateWriteCreateJournal();
                    }

                    if (ret && !projTable.status().activeInTreeRevenue())
                    {
                        ret = checkFailed(strFmt("@Proj:ProjectCannotBeSelected", projTable.ProjId));
                    }
                }
                else if ((enumId == enumNum(SourceDocument_TravelRequisition) && sourceDocumentTypeEnumValue == SourceDocument_TravelRequisition::TravelRequisition) ||
                    (enumId == enumNum(SourceDocument_ExpenseReport) && sourceDocumentTypeEnumValue == SourceDocument_ExpenseReport::ExpenseReport))
                {
                    if (ret)
                    {
                        ret = projTable.status().validateWriteCreateJournal();
                    }

                    if (ret && projTable.Type == ProjType::Time)
                    {
                        ret = checkFailed(strFmt("@SYS53011", ProjType::Time));
                    }
                }
                else if (enumId == enumNum(SourceDocument_ProjectTimesheets) && sourceDocumentTypeEnumValue == SourceDocument_ProjectTimesheets::Timesheets)
                {
                    if (ret)
                    {
                        ret = projTable.status().validateWriteCreateJournal();
                    }
                }
                else if ((enumId == enumNum(SourceDocument_EarningStatement) && sourceDocumentTypeEnumValue == SourceDocument_EarningStatement::EarningStatement)
                    || (enumId == enumNum(SourceDocument_PayrollPayStatement) && sourceDocumentTypeEnumValue == SourceDocument_PayrollPayStatement::PayStatement))
                {
                    if (ret)
                    {
                        ret = projTable.status().validateWriteCreateJournal();
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReqActivity</Name>
				<Source><![CDATA[
    public boolean checkReqActivity(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem)
    {
        boolean ret = true;

        void check(TableId _tableId)
        {
            RequireActivity requireActivity;

            requireActivity = ProjTable::checkRequireActivity(ProjTable::findRecId(_projectAccountingDistribution.ProjTable).ProjId, _tableId);

            if (requireActivity && (!_projectAccountingDistribution.SmmActivities))
            {
                ret = false;
            }
        }

        switch (ProjectSourceDocumentLineItemHelper::projTransType(_sourceDocumentLineItem))
        {
            case ProjTransType::Cost:
                check(tableNum(ProjCostTrans));
                ret = (ret ? ret : checkFailed("@Expense:ActivityNumberMissing"));
                break;

            case ProjTransType::Item:
                check(tableNum(ProjItemTrans));
                ret = (ret ? ret : checkFailed("@SYS104471"));
                break;

            case ProjTransType::Revenue:
                break;

            case ProjTransType::Hour:
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                    || isConfigurationkeyEnabled(configurationKeyNum(Project))
                    || isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration))
                   )
                {
                    check(tableNum(ProjEmplTrans));
                    ret = (ret ? ret : checkFailed("@SYS104469"));
                    break;
                }

            default:
                throw error(strFmt("@SYS22828", funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        AccountingDistribution  accountingDistribution = AccountingDistribution::find(this.AccountingDistribution);

        if (ProjInvoiceTable::hasFundingLimits(ProjTable::findRecId(this.ProjTable).ProjInvoiceProjId))
        {
            ProjFundingLimitTrackingManager::updateUsingProjAccountingDistribution(this, accountingDistribution, ProjFundingLimitTrackingAction::Release);
        }

        ProjectCommitmentFacade::deleteProjectCommitments(accountingDistribution.SourceDocumentLine);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProjId</Name>
				<Source><![CDATA[
    public display ProjId displayProjId()
    {
        ProjTable projTable;

        // ProjTable is company bound table. Hence need to change company to handle cross company scenarios
        if (this.AccountingDistribution != 0)
        {
            changecompany(CompanyInfo::findRecId(AccountingDistribution::find(this.AccountingDistribution).AccountingLegalEntity).DataArea)
            {
                projTable = ProjTable::findRecId(this.ProjTable);
            }
        }

        return projTable.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProjectCategoryId</Name>
				<Source><![CDATA[
    public edit ProjCategoryId editProjectCategoryId(boolean _set, ProjCategoryId _projCategoryId)
    {
        ProjCategory    projCategory;
        ProjCategoryId  projCategoryId;

        if (!_set)
        {
            if (this.ProjCategory)
            {
                select firstonly crossCompany CategoryId from projCategory where projCategory.RecId == this.ProjCategory;
                projCategoryId = projCategory.CategoryId;
            }
        }

        return projCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProjectId</Name>
				<Source><![CDATA[
    public edit ProjId editProjectId(boolean _set, ProjId _projId)
    {
        ProjTable   projTable;
        ProjId      projId;

        if (!_set)
        {
            if (this.ProjTable)
            {
                select firstonly crossCompany ProjId from projTable where projTable.RecId == this.ProjTable;
                projId = projTable.ProjId;
            }
        }

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingDistribution</Name>
				<Source><![CDATA[
    public AccountingDistribution getAccountingDistribution(
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        return AccountingDistribution::find(this.AccountingDistribution, _forupdate, _concurrencyModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrackedAmtVendInvoiceActiveDocLine</Name>
				<Source><![CDATA[
    private AmountCur getTrackedAmtVendInvoiceActiveDocLine(AccountingDistributionRecId accountingDistributionRecId)
    {
        AccountingDistribution          accountingDistribution;
        AccountingDistribution          activeAccountingDistribution;
        AccountingDistribution          topAccountingDistribution;
        AccountingDistribution          taxAccountingDistribution;
        ProjectAccountingDistribution   projectAccountingDistribution;
        SourceDocumentLine              sourceDocumentLine;
        VendInvoiceInfoLine             vendInvoiceInfoLine;
        VendInvoiceInfoLine             activeVendInvoiceInfoLine;

        AmountCur               retValue = 0.0;

        if (accountingDistributionRecId)
        {
            accountingDistribution = AccountingDistribution::find(accountingDistributionRecId);
            if (accountingDistribution)
            {
                topAccountingDistribution = accountingDistribution;
                if (accountingDistribution.ParentDistribution)
                {
                    topAccountingDistribution = AccountingDistribution::find(accountingDistribution.ParentDistribution);
                }
            }

            select SourceRelationType from sourceDocumentLine where sourceDocumentLine.RecId == topAccountingDistribution.SourceDocumentLine;

            if (sourceDocumentLine.SourceRelationType == tableNum(VendInvoiceInfoLine))
            {
                vendInvoiceInfoLine = VendInvoiceInfoline::findSourceDocumentLine(topAccountingDistribution.SourceDocumentLine);
                if (VendInvoiceInfoline)
                {
                    select RecId, SourceDocumentLine from activeVendInvoiceInfoLine
                        where activeVendInvoiceInfoLine.ParmId != '' &&
                              activeVendInvoiceInfoLine.TableRefId == VendInvoiceInfoline.TableRefId;

                    if (activeVendInvoiceInfoLine)
                    {
                        // This is not the real tracked amount for the accounting distribution, This is testing for existence
                        select firstOnly RecId from activeAccountingDistribution
                            where activeAccountingDistribution.SourceDocumentLine == activeVendInvoiceInfoLine.SourceDocumentLine;

                        if (activeAccountingDistribution)
                        {
                            projectAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(activeAccountingDistribution.RecId);
                            retValue = ProjFundingLimitTrackingManager::getTrackedAmountForPADistribution(projectAccountingDistribution.RecId);
                        }
                    }
                }

                // tax distribution may not computed even when the other accounting distributions are computed.
                if (retValue)
                {
                    select SourceRelationType from sourceDocumentLine where sourceDocumentLine.RecId == accountingDistribution.SourceDocumentLine;

                    if (sourceDocumentLine.SourceRelationType == tableNum(TaxUncommitted))
                    {
                        select firstOnly RecId from taxAccountingDistribution
                            where taxAccountingDistribution.ParentDistribution == topAccountingDistribution.Recid &&
                                (taxAccountingDistribution.MonetaryAmount == MonetaryAmount::Tax                        ||
                                 taxAccountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable          ||
                                 taxAccountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverableVariance  ||
                                 taxAccountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance);
                        if (!taxAccountingDistribution)
                        {
                            // No tax records being tracked
                            retValue = 0.00;
                        }
                    }
                }
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAccountingDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project accounting distribution fields from the accounting distribution record.
    /// </summary>
    /// <param name="_accountingDistribution">
    /// The accounting distribution record.
    /// </param>
    public void initFromAccountingDistribution(AccountingDistribution _accountingDistribution)
    {
        this.AccountingDistribution = _accountingDistribution.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSourceDocumentLineItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjectAccountingDistribution</c> record from the <c>SourceDocumentLineItem</c> instance.
    /// </summary>
    /// <param name="_topSourceDocumentLineItem">
    /// An instance of the <c>SourceDocumentLineItem</c> class
    /// </param>
    public void initFromSourceDocumentLineItem(SourceDocumentLineItem _topSourceDocumentLineItem)
    {
        SourceDocumentLineItemIProject          sourceDocumentLineItemIProject;
        SourceDocumentLineItemIProjectRevenue   sourceDocumentLineItemIProjectRevenue;
        SourceDocumentLineItemIProduct          sourceDocumentLineItemIProduct;
        SourceDocumentLineItemIExpenseReport    sourceDocumentLineItemIExpenseReport;
        TrvExpTrans                             trvExpTrans;

        sourceDocumentLineItemIProject = _topSourceDocumentLineItem as SourceDocumentLineItemIProject;

        this.ProjTable = ProjectSourceDocumentLineItemHelper::projTable(_topSourceDocumentLineItem).RecId;

        sourceDocumentLineItemIExpenseReport = _topSourceDocumentLineItem as SourceDocumentLineItemIExpenseReport;
        if (sourceDocumentLineItemIExpenseReport != null)
        {
            trvExpTrans = sourceDocumentLineItemIExpenseReport.parmExpenseLine() as TrvExpTrans;
        }

        if (trvExpTrans &&
            trvExpTrans.InterCompanyLE &&
            trvExpTrans.InterCompanyCategory &&
            TrvParameters::find().UseInterCompanyExpense &&
            sourceDocumentLineItemIExpenseReport != null)
        {
            changecompany (trvExpTrans.InterCompanyLE)
            {
                this.ProjCategory = ProjCategory::find(trvExpTrans.InterCompanyCategory).RecId;
            }
        }
        else
        {
            this.ProjCategory = ProjectSourceDocumentLineItemHelper::projCategory(_topSourceDocumentLineItem).RecId;
        }
        this.SmmActivities = ProjectSourceDocumentLineItemHelper::smmActivities(_topSourceDocumentLineItem).RecId;
        this.ProjLineProperty = ProjectSourceDocumentLineItemHelper::projLineProperty(_topSourceDocumentLineItem).RecId;
        switch (ProjectSourceDocumentLineItemHelper::projTransType(_topSourceDocumentLineItem))
        {
            case ProjTransType::Cost:
            case ProjTransType::Item:
                if (!ProjectSourceDocumentLineItemHelper::implementsProjectRevenue(_topSourceDocumentLineItem))
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                sourceDocumentLineItemIProjectRevenue = _topSourceDocumentLineItem as SourceDocumentLineItemIProjectRevenue;

                this.Currency = ProjectSourceDocumentLineItemHelper::salesCurrency(_topSourceDocumentLineItem).RecId;
                
                if (_topSourceDocumentLineItem is SourceDocumentLineItemIProduct &&
                    ProjParameters::find().DefaultCostPriceAsSalesPrice && !this.Currency)
                {
                    sourceDocumentLineItemIProduct = _topSourceDocumentLineItem as SourceDocumentLineItemIProduct;
                    if (!sourceDocumentLineItemIProduct.parmItemId())
                    {
                        this.Currency = Currency::find(_topSourceDocumentLineItem.parmTransactionCurrencyCode()).RecId;
                    }
                }

                this.TransactionCurrencyPrice = sourceDocumentLineItemIProjectRevenue.parmProjectSalesPrice();
                this.TaxGroupHeading = ProjectSourceDocumentLineItemHelper::salesTaxGroupHeading(_topSourceDocumentLineItem).RecId;
                this.TaxItemGroupHeading = ProjectSourceDocumentLineItemHelper::salesTaxItemGroupHeading(_topSourceDocumentLineItem).RecId;
                break;

            case ProjTransType::Revenue:
                ProjTable projTableLoc = ProjTable::findRecId(this.ProjTable);
                if ((projTableLoc.ProjInvoiceProjId || !ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled()) && ProjRevRecHelper::postWIPFeeForProject(projTableLoc))
                {
                    sourceDocumentLineItemIProjectRevenue = _topSourceDocumentLineItem as SourceDocumentLineItemIProjectRevenue;
                    this.Currency = Currency::find(_topSourceDocumentLineItem.parmTransactionCurrencyCode()).RecId;
                    this.TransactionCurrencyPrice = sourceDocumentLineItemIProjectRevenue.parmProjectSalesPrice();
                }
                else
                {
                    this.Currency = 0;
                    this.TransactionCurrencyPrice = 0;
                }
                this.TaxGroupHeading = ProjectSourceDocumentLineItemHelper::salesTaxGroupHeading(_topSourceDocumentLineItem).RecId;
                this.TaxItemGroupHeading = ProjectSourceDocumentLineItemHelper::salesTaxItemGroupHeading(_topSourceDocumentLineItem).RecId;
                break;

            case ProjTransType::Hour:
                //  this needs to be changed, when the Cost and Item logic block changes @ sys layer
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                || isConfigurationkeyEnabled(configurationKeyNum(Project))
                || isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration))
                )
                {
                    if (!ProjectSourceDocumentLineItemHelper::implementsProjectRevenue(_topSourceDocumentLineItem))
                    {
                        throw error(Error::wrongUseOfFunction(funcName()));
                    }

                    sourceDocumentLineItemIProjectRevenue = _topSourceDocumentLineItem as SourceDocumentLineItemIProjectRevenue;

                    this.Currency = ProjectSourceDocumentLineItemHelper::salesCurrency(_topSourceDocumentLineItem).RecId;
                    if (_topSourceDocumentLineItem is SourceDocumentLineItemIProduct &&
                        ProjParameters::find().DefaultCostPriceAsSalesPrice && !this.Currency)
                    {
                        sourceDocumentLineItemIProduct = _topSourceDocumentLineItem as SourceDocumentLineItemIProduct;
                        if (!sourceDocumentLineItemIProduct.parmItemId())
                        {
                            this.Currency = Currency::find(_topSourceDocumentLineItem.parmTransactionCurrencyCode()).RecId;
                        }
                    }
                    this.TransactionCurrencyPrice = sourceDocumentLineItemIProjectRevenue.parmProjectSalesPrice();
                    this.TaxGroupHeading = ProjectSourceDocumentLineItemHelper::salesTaxGroupHeading(_topSourceDocumentLineItem).RecId;
                    this.TaxItemGroupHeading = ProjectSourceDocumentLineItemHelper::salesTaxItemGroupHeading(_topSourceDocumentLineItem).RecId;
                    break;
                }

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(boolean _skipUpdateFundingSource = false)
    {
        FormDataSource                      formDataSource;
        FormDataSource                      accDistFormDataSource;
        FormRun                             formRun;
        Object                              callingForm;
        int                                 i;
        AccountingDistribution              accountingDistribution;
        AccountingDistribution              parentAccountingDistribution;
        AccountingDistribution              topAccountingDistribution;
        AccountingDistribution              refAccountingDistribution;
        ProjectAccountingDistribution       refProjectAccountingDistribution;
        AccDistProcessorProjectExtension    accDistProcessorProjectExtension;
        SourceDocumentLineItem              sourceDocumentLineItem;
        AmountCur                           trxAmount;
        boolean                             limitError      = false;
        boolean                             updateRefTrans  = true;

        this.roundTransactionCurrencyAmount();

        if (this.ProjTable)
        {
            super();

            formDataSource = FormDataUtil::getFormDataSource(this);
            if (formDataSource)
            {
                formRun = formDataSource.formRun();
                if (formRun)
                {
                    callingForm = formRun;
                    if (formHasMethod(callingForm, identifierStr(getAccountingDistribution)))
                    {
                        accountingDistribution = Global::con2Buf(callingForm.getAccountingDistribution());
                    }
                    else
                    {
                        for (i=1; i<= formRun.dataSourceCount(); i++)
                        {
                            accDistFormDataSource = formRun.dataSource(i);
                            if (accDistFormDataSource.table() == tableNum(AccountingDistribution))
                            {
                                accountingDistribution = accDistFormDataSource.cursor() as AccountingDistribution;
                                break;
                            }
                        }
                    }
                }

                accDistProcessorProjectExtension = AccDistProcessorProjectExtension::construct();
                accDistProcessorProjectExtension.createChildDistributions(accountingDistribution, this);

                AccDistProcessorProjectExtension::allocateExistingDistribution(accountingDistribution, this);
            }

            if (!_skipUpdateFundingSource && ProjInvoiceTable::hasFundingLimits(ProjTable::findRecId(this.ProjTable).ProjInvoiceProjId))
            {
                accountingDistribution = AccountingDistribution::find(this.AccountingDistribution);
                sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(accountingDistribution.SourceDocumentLine);
                if (!(sourceDocumentLineItem is ProjectRevenueSourceDocLineItem))
                {
                    //
                    // Funding Limit tracking on saved copies of Vendor invoice is only used for pending transactions
                    // Funding limit tracking is on the active documents
                    //
                    topAccountingDistribution = accountingDistribution;
                    if (accountingDistribution.ParentDistribution)
                    {
                        topAccountingDistribution = AccountingDistribution::find(accountingDistribution.ParentDistribution);
                    }

                    if (accountingDistribution &&
                    (!ProjFundingLimitTrackingManager::isVendorInvoiceLineSavedOrBeingSaved(sourceDocumentLineItem.parmSourceDocumentLineImplementation()) ||
                    (ProjFundingLimitTrackingManager::isVendorInvoiceSavedDocLine(topAccountingDistribution.SourceDocumentLine) &&
                     this.getTrackedAmtVendInvoiceActiveDocLine(accountingDistribution.RecId) == 0.0)))
                    {
                        if (!(accountingDistribution.MonetaryAmount == MonetaryAmount::Discount             ||
                        accountingDistribution.MonetaryAmount == MonetaryAmount::DiscountVariance           ||
                        accountingDistribution.MonetaryAmount == MonetaryAmount::TotalDiscount              ||
                        accountingDistribution.MonetaryAmount == MonetaryAmount::TotalDiscountRounding      ||
                        accountingDistribution.MonetaryAmount == MonetaryAmount::TotalDiscountVariance      ||
                        accountingDistribution.MonetaryAmount == MonetaryAmount::CashDiscount               ||
                        accountingDistribution.MonetaryAmount == MonetaryAmount::CashDiscountVariance))
                        {
                            //
                            // Taxes and Charges may be posted without going through the funding engine creating limit errors
                            //
                            // Other types are processed by funding engine handles the limit errors
                            // When discounts or unit prices are included in this check they could throw false errors.
                            //
                            // e.g Limit of 100.00,  Unit Price of 110.00 and discount of 10%
                            //  Unit price exceeds the limit -- error
                            //  Discount is a negative transaction and would be treated as a credit. Which maynot be valid
                            //  Net Amount is 99.00 which is within the limit and should not generate an eror.
                            //
                            if (accountingDistribution)
                            {
                                trxAmount = ProjectAccountingDistribution::transactionCurrencySalesAmt(accountingDistribution, this);
                            }

                            if ((!SysTransactionScopeCache::get(classStr(AccDistProcessorProjectExtension), 
                                [sourceDocumentLineItem.parmSourceDocumentLine().RecId, sourceDocumentLineItem.parmSourceDocumentLine().recVersion])) &&
                                this.limitCheckRequiredOnInsert(accountingDistribution) &&
                                trxAmount != 0.0)
                            {
                                if (accountingDistribution.ReferenceDistribution &&
                                    accountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching &&
                                    trxAmount != 0.0)
                                {
                                    //
                                    // Need to release the tracking records for reference document
                                    // Special case for confirmed Purchase Order as the link to Purchase Requisition is no
                                    // longer maintained after a Purchase Order has been confirmed once.
                                    //
                                    if (!(ProjFundingLimitTrackingManager::isPurchaseOrderAccDistribution(accountingDistribution) &&
                                      ProjFundingLimitTrackingManager::hasPurchaseOrderBeenConfirmed(accountingDistribution)))
                                    {
                                        refAccountingDistribution = AccountingDistribution::find(accountingDistribution.ReferenceDistribution);
                                        refProjectAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(refAccountingDistribution.RecId);
                                        ProjFundingLimitTrackingManager::updateUsingProjAccountingDistribution(refProjectAccountingDistribution, refAccountingDistribution, ProjFundingLimitTrackingAction::Release, false);
                                    }
                                }

                                if (!ProjFundingLimitTrackingManager::isWithinFundingLimitProjAcctDist(this, accountingDistribution))
                                {
                                    // Only report the limit error oncee
                                    if (!ProjFundingLimitTrackingManager::hasLimitErrorSourceDocumentLine(accountingDistribution.SourceDocumentLine))
                                    {
                                        if (accountingDistribution.ParentDistribution)
                                        {
                                            parentAccountingDistribution = AccountingDistribution::find(accountingDistribution.ParentDistribution);
                                        }

                                        if (accountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching ||
                                        (parentAccountingDistribution && parentAccountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching))
                                        {
                                            limitError = !checkFailed("@SYS4110061");
                                        }
                                        else
                                        {
                                            limitError = !checkFailed("@SYS4110062");
                                        }
                                    }
                                }

                                if (accountingDistribution.ReferenceDistribution &&
                                    accountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching &&
                                    trxAmount != 0.0)
                                {
                                    //
                                    // Need to reallocate the tracking records for reference document
                                    // Special case for confirmed Purchase Order as the link to Purchase Requisition is no
                                    // longer maintained after a Purchase Order has been confirmed once.
                                    //
                                    if (!(ProjFundingLimitTrackingManager::isPurchaseOrderAccDistribution(accountingDistribution) &&
                                      ProjFundingLimitTrackingManager::hasPurchaseOrderBeenConfirmed(accountingDistribution)))
                                    {
                                        ProjFundingLimitTrackingManager::updateUsingProjAccountingDistribution(refProjectAccountingDistribution, refAccountingDistribution, ProjFundingLimitTrackingAction::Allocate, false);
                                    }
                                }
                            }
                        }

                        ProjFundingLimitTrackingManager::updateUsingProjAccountingDistribution(this, accountingDistribution, ProjFundingLimitTrackingAction::Allocate, updateRefTrans);

                        if (limitError)
                        {
                            ProjFundingLimitTrackingManager::setLimitErrorFlag(this.RecId, NoYes::Yes);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>limitCheckRequiredOnInsert</Name>
				<Source><![CDATA[
    private boolean limitCheckRequiredOnInsert(AccountingDistribution   _accountingDistribution)
    {
        AccountingDistribution          parentAccountingDistribution;
        AccountingDistribution          reversingEntryAccountingDistribution;
        AmountCur                       distributionAmount;
        AmountCur                       parentAmount;
        ProjectAccountingDistribution   parentProjectAccountingDistribution;
        boolean                         retValue = true;

        if (!_accountingDistribution)
        {
            retValue = false;
        }

        if (retValue && _accountingDistribution.AccountingEvent == AccountingEventType::Correction)
        {
            retValue = false;
        }

        if (retValue && _accountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Reversing)
        {
            retValue = false;
        }

        if (retValue && ProjectAccountingDistribution::transactionCurrencySalesAmt(_accountingDistribution, this) == 0.0)
        {
            retValue = false;
        }

        if (retValue)
        {
            parentAccountingDistribution = AccountingDistribution::find(_accountingDistribution.ParentDistribution);
            if (parentAccountingDistribution)
            {
                parentProjectAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(parentAccountingDistribution.RecId);
                parentAmount = ProjectAccountingDistribution::transactionCurrencySalesAmt(parentAccountingDistribution, parentProjectAccountingDistribution);
            }
            distributionAmount = ProjectAccountingDistribution::transactionCurrencySalesAmt(_accountingDistribution, this);

            switch (_accountingDistribution.MonetaryAmount)
            {
                case MonetaryAmount::PriceVariance                  :
                case MonetaryAmount::PriceAdjustment                :
                case MonetaryAmount::TaxVariance                    :
                case MonetaryAmount::TaxNonRecoverableVariance      :
                case MonetaryAmount::Charge                         :

                    if (((parentAmount >= 0.0)         &&
                         (distributionAmount <= 0.0))     ||
                        ((parentAmount < 0.0)          &&
                         (distributionAmount > 0.0)))
                    {
                        retValue = false;
                    }
                    break;

                case MonetaryAmount::PriceAdjustmentVariance        :
                    if (((parentAmount <= 0.0)         &&
                         (distributionAmount <= 0.0))     ||
                        ((parentAmount > 0.0)          &&
                         (distributionAmount > 0.0)))
                    {
                        retValue = false;
                    }
                    break;

                case MonetaryAmount::ExtendedPrice  :
                    // Purchase orders do not support Price Variance - delete/insert changes, need to validate extended price
                    if (!ProjFundingLimitTrackingManager::isVendorInvoiceActiveDocument(_accountingDistribution.SourceDocumentHeader)  &&
                        !(ProjFundingLimitTrackingManager::isPurchaseOrderAccDistribution(_accountingDistribution)                     &&
                        _accountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching))
                    {
                        // Is there a reversing entry?
                        select firstonly RecId from reversingEntryAccountingDistribution
                            where reversingEntryAccountingDistribution.SourceDocumentLine == _accountingDistribution.SourceDocumentLine &&
                              reversingEntryAccountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Reversing;

                        if (!reversingEntryAccountingDistribution)
                        {
                            // Only check Extend Price for Reversing entries for transaction type other than Purchase Order
                            retValue = false;
                        }
                    }

                case MonetaryAmount::ChargeVariance  :
                    if (((parentAmount >= 0.0)         &&
                         (distributionAmount <= 0.0))     ||
                        ((parentAmount < 0.0)          &&
                         (distributionAmount > 0.0)))
                    {
                        retValue = false;
                    }
            }
        }

        return      retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>limitCheckRequiredOnUpdate</Name>
				<Source><![CDATA[
    private boolean limitCheckRequiredOnUpdate()
    {
        AccountingDistribution          accountingDistribution;
        AmountCur                       originalAmount;
        AmountCur                       newAmount;
        boolean                         retValue = true;

        if (this.orig().ProjTable != this.ProjTable)
        {
            //
            // Distributions will be recreated on ProjId change
            // No need to validate limits as it will be handled by funding engine.
            //
            retValue = false;
        }

        if (retValue && !this.AccountingDistribution)
        {
            retValue = false;
        }
        else if (retValue)
        {
            accountingDistribution = AccountingDistribution::find(this.AccountingDistribution);

            retvalue = accountingDistribution.RecId ? retValue : false;

            if (!retvalue)
            {
                ProjTable projTable = ProjTable::findRecId(this.ProjTable);

                str stringvalue = strFmt("@Expense:AccountingDistributionMissing", projTable.ProjId);

                var logger = SysInstrumentationLoggerFactory::createLogger(tablestr(ProjectAccountingDistribution));
                logger.logInformation(stringvalue);
            }
        }

        if (retValue && accountingDistribution.AccountingEvent == AccountingEventType::Correction)
        {
            retValue = false;
        }

        if (retValue && accountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Reversing)
        {
            retValue = false;
        }

        if (retValue && ProjectAccountingDistribution::transactionCurrencySalesAmt(accountingDistribution, this) == 0.0)
        {
            retValue = false;
        }

        if (retValue)
        {
            originalAmount  = ProjFundingLimitTrackingManager::getTrackedAmountForPADistribution(this.RecId);
            newAmount       = ProjectAccountingDistribution::transactionCurrencySalesAmt(accountingDistribution, this);
        }
        
        if (retValue                                                    &&
            (this.orig().ProjTable          == this.ProjTable)          &&
            (this.orig().ProjCategory       == this.ProjCategory)       &&
            (this.orig().SmmActivities      == this.SmmActivities)      &&
            (this.orig().ProjLineProperty   == this.ProjLineProperty)   &&
            (this.orig().ProjFundingSource  == this.ProjFundingSource))
        {
            if (((originalAmount >= 0.0) &&
                 (originalAmount > newAmount))  ||
                ((originalAmount < 0.0) &&
                 (originalAmount < newAmount)))
            {
                retValue = false;
            }
        }

        if (retValue                                                                        &&
            ((accountingDistribution.MonetaryAmount == MonetaryAmount::Discount) ||
            (accountingDistribution.MonetaryAmount == MonetaryAmount::DiscountVariance)))
        {
            // Discounts are normally a deduction to the unit price
            retValue = false;
        }

        if (retValue                                                                        &&
            (accountingDistribution.MonetaryAmount == MonetaryAmount::PriceVariance     ||
            accountingDistribution.MonetaryAmount == MonetaryAmount::PriceAdjustment    ||
            accountingDistribution.MonetaryAmount == MonetaryAmount::PriceAdjustmentVariance))
        {
            if (((originalAmount >= 0.0) &&
                 (originalAmount <= newAmount))  ||
                ((originalAmount < 0.0) &&
                 (originalAmount >= newAmount)))
            {
                retValue = false;
            }
        }

        if (retValue                                                                        &&
            (accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable ||
            accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverableVariance))
        {
            if (((originalAmount >= 0.0) &&
                 (originalAmount >= newAmount))  ||
                ((originalAmount < 0.0) &&
                 (originalAmount <= newAmount)))
            {
                retValue = false;
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldCategoryId</Name>
				<Source><![CDATA[
    private void modifiedFieldCategoryId(AccountingDistribution _accountingDistribution)
    {
        SourceDocumentLineItem  sourceDocumentLineItem;

        sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_accountingDistribution.SourceDocumentLine);

        this.setTaxItemGroupId(_accountingDistribution, sourceDocumentLineItem);
        this.setLinePropertyId();
        this.setTransactionCurrencyPrice(_accountingDistribution, sourceDocumentLineItem);
        this.setLedgerDimension(_accountingDistribution, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategoryId</Name>
				<Source><![CDATA[
    private void setCategoryId(AccountingDistribution _accountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem)
    {
        ProjParameters  projParameters;

        if (!this.ProjCategory ||
            (this.ProjCategory && !ProjCategory::findRecId(this.ProjCategory)))
        {
            projParameters = ProjParameters::find();

            switch (ProjectSourceDocumentLineItemHelper::projTransType(_sourceDocumentLineItem))
            {
                case ProjTransType::Cost:
                    this.ProjCategory = ProjCategory::find(projParameters.CostCategory).RecId;
                    break;

                case ProjTransType::Item:
                    this.ProjCategory = ProjCategory::find(projParameters.ItemCategory).RecId;
                    break;

                case ProjTransType::Revenue:
                    this.ProjCategory = ProjCategory::find(projParameters.RevenueCategory).RecId;
                    break;

                case ProjTransType::Hour:
                    if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                    || isConfigurationkeyEnabled(configurationKeyNum(Project))
                    || isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration))
                    )
                    {
                        this.ProjCategory = ProjCategory::find(projParameters.EmplCategory).RecId;
                        break;
                    }
                default:
                    throw error(strFmt("@SYS22828", funcName()));
            }

            if (this.ProjCategory)
            {
                this.setTaxItemGroupId(_accountingDistribution, _sourceDocumentLineItem);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerDimension</Name>
				<Source><![CDATA[
    public void setLedgerDimension(AccountingDistribution _accountingDistribution, boolean _resetDefaultDimension = true)
    {
        LedgerDimensionDefaultAccount        defaultLedgerDimension;
        ProjTable                            projTable;
        ProjCategory                         projCategory;
        ProjFundingSource                    projFundingSource;
        ProjLineProperty                     projLineProperty;
        SourceDocumentLine                   sourceDocumentLine;
        SourceDocumentLineItem               accDistSourceDocumentLineItem;
        InventTable                          inventTable;
        TrvExpTransSourceDocLineItem         trvExpTransSourceDocLineItem;
        DimensionDefault                     dimensionDefault;
        boolean                              isIntercompany = false;

        if (this.ProjTable && this.ProjCategory && this.ProjLineProperty)
        {
            projTable = ProjTable::findRecId(this.ProjTable);
            projCategory = ProjCategory::findRecId(this.ProjCategory);
            projFundingSource = ProjFundingSource::find(this.ProjFundingSource);
            projLineProperty = ProjLineProperty::findRecId(this.ProjLineProperty);
            sourceDocumentLine = SourceDocumentLine::find(_accountingDistribution.SourceDocumentLine);
            accDistSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(sourceDocumentLine);

            isIntercompany = ProjectSourceDocumentLineItemHelper::hasIntercompanyLedgerAccount(accDistSourceDocumentLineItem);

            defaultLedgerDimension = ProjectPosting::getProjectLedgerDimension(
                                        projTable,
                                        projCategory,
                                        projFundingSource,
                                        projLineProperty,
                                        isIntercompany);

            this.processDefaultDimension(_accountingDistribution, 
                projTable, 
                projFundingSource, 
                accDistSourceDocumentLineItem, 
                _resetDefaultDimension, 
                defaultLedgerDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDefaultDimension</Name>
				<Source><![CDATA[
    protected void processDefaultDimension(
        AccountingDistribution _accountingDistribution, 
        ProjTable _projTable, 
        ProjFundingSource _projFundingSource, 
        SourceDocumentLineItem _accDistSourceDocumentLineItem, 
        boolean _resetDefaultDimension, 
        LedgerDimensionDefaultAccount _defaultLedgerDimension)
    {
        DimensionDefault dimensionDefault;

        if (_resetDefaultDimension)
        {
            if (_accDistSourceDocumentLineItem is TrvExpTransSourceDocLineItem)
            {
                TrvExpTransSourceDocLineItem trvExpTransSourceDocLineItem = _accDistSourceDocumentLineItem as TrvExpTransSourceDocLineItem;
                TrvExpTrans trvExpTrans = trvExpTransSourceDocLineItem.parmExpenseLine() as TrvExpTrans;

                // merge the project, worker, fundingsource, expense dimensions
                dimensionDefault = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(_projTable.DefaultDimension, HcmEmployment::findByWorkerLegalEntity(trvExpTrans.CreatingWorker, _accountingDistribution.AccountingLegalEntity).DefaultDimension, _projFundingSource.DefaultDimension, _accDistSourceDocumentLineItem.parmDefaultDimension());

                _accountingDistribution.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultLedgerDimension, dimensionDefault);
            }
            else
            {
                InventTable inventTable;
                if (_accDistSourceDocumentLineItem is SourceDocumentLineItemIProduct)
                {
                    SourceDocumentLineItemIProduct sourceDocumentLineItemIProduct = _accDistSourceDocumentLineItem as SourceDocumentLineItemIProduct;
                    inventTable = sourceDocumentLineItemIProduct.parmInventTable();
                }

                dimensionDefault = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(inventTable.DefaultDimension, _projTable.DefaultDimension, _projFundingSource.DefaultDimension, _accDistSourceDocumentLineItem.parmDefaultDimension());

                _accountingDistribution.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultLedgerDimension, dimensionDefault);
            }
        }
        else
        {
            _accountingDistribution.LedgerDimension = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(_defaultLedgerDimension, _accountingDistribution.LedgerDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLinePropertyId</Name>
				<Source><![CDATA[
    private void setLinePropertyId()
    {
        ProjTable           projTable;
        ProjCategory        projCategory;

        if (!this.ProjLineProperty ||
            (this.ProjLineProperty && !ProjLineProperty::findRecId(this.ProjLineProperty)))
        {
            projTable = ProjTable::findRecId(this.ProjTable);
            projCategory = ProjCategory::findRecId(this.ProjCategory);
            this.ProjLineProperty = ProjLineProperty::find(ProjLinePropertySetup::findLinePropertyId(projTable.ProjId, projCategory.CategoryId)).RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjFundingSource</Name>
				<Source><![CDATA[
    private void setProjFundingSource(AccountingDistribution _accountingDistribution, SourceDocumentLineItem _topSourceDocumentLineItem)
    {
        ProjInvoiceTable    projInvoiceTable;
        ProjFundingSource   projFundingSource;
        CustVendAC          custAccount;

        projInvoiceTable = ProjTable::findRecId(this.ProjTable).projInvoice();
        if (projInvoiceTable)
        {
            custAccount = ProjectSourceDocumentLineItemHelper::custAccount(_topSourceDocumentLineItem);
            if (custAccount)
            {
                this.ProjFundingSource = ProjFundingSource::getCustomerDefaultFundingSource(projInvoiceTable.ProjInvoiceProjId, custAccount);
                if (!this.ProjFundingSource)
                {
                    this.ProjFundingSource = ProjFundingSource::createFundingSource(projInvoiceTable.ProjInvoiceProjId, custAccount);
                }
            }
            else
            {
                select firstonly RecId from projFundingSource where projFundingSource.ContractId == projInvoiceTable.ProjInvoiceProjId;
                this.ProjFundingSource = projFundingSource.RecId;
            }
        }
        else
        {
            this.ProjFundingSource = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroupId</Name>
				<Source><![CDATA[
    private void setTaxGroupId(AccountingDistribution _accountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem)
    {
        switch (ProjectSourceDocumentLineItemHelper::projTransType(_sourceDocumentLineItem))
        {
            case ProjTransType::Cost:
            case ProjTransType::Item:
                this.TaxGroupHeading = TaxGroupHeading::find(ProjParameters::taxGroupInvoice(ProjTable::findRecId(this.ProjTable).ProjId)).RecId;
                break;

            case ProjTransType::Revenue:
                this.TaxGroupHeading = 0;
                break;

            case ProjTransType::Hour:
                //  this needs to be changed, when the Cost and Item logic block changes @ sys layer
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                    || isConfigurationkeyEnabled(configurationKeyNum(Project))
                    || isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration))
                )
                {
                    this.TaxGroupHeading = TaxGroupHeading::find(ProjParameters::taxGroupInvoice(ProjTable::findRecId(this.ProjTable).ProjId)).RecId;
                    break;
                }
            default:
                throw error(strFmt("@SYS22828", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxItemGroupId</Name>
				<Source><![CDATA[
    private void setTaxItemGroupId(AccountingDistribution _accountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem)
    {
        switch (ProjectSourceDocumentLineItemHelper::projTransType(_sourceDocumentLineItem))
        {
            case ProjTransType::Cost:
            case ProjTransType::Item:
                this.TaxItemGroupHeading = TaxItemGroupHeading::find(ProjCategory::findRecId(this.ProjCategory).TaxItemGroupId).RecId;
                break;
            case ProjTransType::Revenue:
                this.TaxItemGroupHeading = 0;
                break;
            case ProjTransType::Hour:
                //  this needs to be changed, when the Cost and Item logic block changes @ sys layer
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                    || isConfigurationkeyEnabled(configurationKeyNum(Project))
                    || isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration))
                )
                {
                    this.TaxItemGroupHeading = TaxItemGroupHeading::find(ProjCategory::findRecId(this.ProjCategory).TaxItemGroupId).RecId;
                    break;
                }
            default:
                throw error(strFmt("@SYS22828", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionCurrency</Name>
				<Source><![CDATA[
    private void setTransactionCurrency(AccountingDistribution _accountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem)
    {
        ProjTable                       projTable;
        ProjInvoiceTable                projInvoiceTable;
        SourceDocumentLineItemIProduct  sourceDocumentLineItemIProduct;

        switch (ProjectSourceDocumentLineItemHelper::projTransType(_sourceDocumentLineItem))
        {
            case ProjTransType::Cost:
            case ProjTransType::Item:
                if (_sourceDocumentLineItem is SourceDocumentLineItemIProduct &&
                    ProjParameters::find().DefaultCostPriceAsSalesPrice)
                {
                    sourceDocumentLineItemIProduct = _sourceDocumentLineItem as SourceDocumentLineItemIProduct;
                    if (!sourceDocumentLineItemIProduct.parmItemId())
                    {
                        this.Currency = Currency::find(_accountingDistribution.TransactionCurrency).RecId;
                    }
                }
                else
                {
                    projTable = ProjTable::findRecId(this.ProjTable);
                    projInvoiceTable = projTable.projInvoice();
                    if (projInvoiceTable.CurrencyId)
                    {
                        this.Currency = Currency::find(projInvoiceTable.CurrencyId).RecId;
                    }
                    else
                    {
                        this.Currency = Currency::find(Ledger::accountingCurrency(CompanyInfo::current())).RecId;
                    }
                }
                break;

            case ProjTransType::Revenue:
                this.Currency = 0;
                break;
            case ProjTransType::Hour:
                //  this needs to be changed, when the Cost and Item logic block changes @ sys layer
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                    || isConfigurationkeyEnabled(configurationKeyNum(Project))
                    || isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration))
                )
                {
                    if (_sourceDocumentLineItem is SourceDocumentLineItemIProduct &&
                        ProjParameters::find().DefaultCostPriceAsSalesPrice)
                    {
                        sourceDocumentLineItemIProduct = _sourceDocumentLineItem as SourceDocumentLineItemIProduct;
                        if (!sourceDocumentLineItemIProduct.parmItemId())
                        {
                            this.Currency = Currency::find(_accountingDistribution.TransactionCurrency).RecId;
                        }
                    }
                    else
                    {
                        projTable = ProjTable::findRecId(this.ProjTable);
                        projInvoiceTable = projTable.projInvoice();
                        if (projInvoiceTable.CurrencyId)
                        {
                            this.Currency = Currency::find(projInvoiceTable.CurrencyId).RecId;
                        }
                        else
                        {
                            this.Currency = Currency::find(Ledger::accountingCurrency(CompanyInfo::current())).RecId;
                        }
                    }
                    break;
                }
            default:
                throw error(strFmt("@SYS22828", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionCurrencyPrice</Name>
				<Source><![CDATA[
    private void setTransactionCurrencyPrice(AccountingDistribution _accountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem)
    {
        SourceDocumentLineItemIProject          sourceDocumentLineItemIProject;
        SourceDocumentLineItemIProjectRevenue   sourceDocumentLineItemIProjectRevenue;
        SourceDocumentLineItemIProduct          sourceDocumentLineItemIProduct;
        InventTable                             inventTable;
        InventDim                               inventDim;
        ProjTable                               projTable;
        boolean                                 priceFound;
        PriceUnit                               priceUnit;
        PriceMarkup                             priceMarkup;
        ProjPriceParameters						priceParams;

        PriceCur transactionCurrencyPrice()
        {
            Qty         quantity;
            PriceCur    ret;

            quantity = ProjectAccountingDistribution::quantity(_accountingDistribution);
            if (quantity)
            {
                ret = CurrencyExchangeHelper::price(_accountingDistribution.TransactionCurrencyAmount / quantity, _accountingDistribution.TransactionCurrency);
            }

            return ret;
        }

        sourceDocumentLineItemIProject = _sourceDocumentLineItem as SourceDocumentLineItemIProject;

        switch (ProjectSourceDocumentLineItemHelper::projTransType(_sourceDocumentLineItem))
        {
            case ProjTransType::Cost:
                priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
                    ProjTable::findRecId(this.ProjTable).ProjId,
                    sourceDocumentLineItemIProject.parmProjectResourceRecId(),
                    ProjCategory::findRecId(this.ProjCategory).CategoryId,
                    transactionCurrencyPrice(),
                    _accountingDistribution.TransactionCurrency,
                    Currency::findRecId(this.Currency).CurrencyCode,
                    _sourceDocumentLineItem.parmAccountingDate());
                [this.TransactionCurrencyPrice, priceFound] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams);
                break;

            case ProjTransType::Item:
                if (!(_sourceDocumentLineItem is SourceDocumentLineItemIProduct))
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                sourceDocumentLineItemIProduct = _sourceDocumentLineItem as SourceDocumentLineItemIProduct;

                if (sourceDocumentLineItemIProduct.parmItemId())
                {
                    if (!ProjectSourceDocumentLineItemHelper::implementsProjectRevenue(_sourceDocumentLineItem))
                    {
                        throw error(Error::wrongUseOfFunction(funcName()));
                    }

                    sourceDocumentLineItemIProjectRevenue = _sourceDocumentLineItem as SourceDocumentLineItemIProjectRevenue;

                    inventTable = ProjectSourceDocumentLineItemHelper::inventTable(_sourceDocumentLineItem);
                    inventDim = ProjectSourceDocumentLineItemHelper::inventDim(_sourceDocumentLineItem);
                    projTable = ProjTable::findRecId(this.ProjTable);

                    [this.TransactionCurrencyPrice, priceUnit, priceMarkup] =
                        inventTable.salesPriceAgreement(
                            _sourceDocumentLineItem.parmAccountingDate(),
                            inventDim,
                            ProjectAccountingDistribution::quantity(_accountingDistribution),
                            sourceDocumentLineItemIProjectRevenue.parmProjectSalesUnit(),
                            projTable.CustAccount,
                            Currency::findRecId(this.Currency).CurrencyCode,
                            ProjTable::findPriceGroup(projTable.ProjId));
                }
                break;

            case ProjTransType::Revenue:
                this.TransactionCurrencyPrice = 0;
                break;

            case ProjTransType::Hour:
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                    || isConfigurationkeyEnabled(configurationKeyNum(Project))
                    || isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
                {
                    priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
                        ProjTable::findRecId(this.ProjTable).ProjId,
                        sourceDocumentLineItemIProject.parmProjectResourceRecId(),
                        ProjCategory::findRecId(this.ProjCategory).CategoryId,
                        ProjLineProperty::findRecId(this.ProjLineProperty).LinePropertyId,
                        transactionCurrencyPrice(),
                        Currency::findRecId(this.Currency).CurrencyCode,
                        _sourceDocumentLineItem.parmAccountingDate());
                    [this.TransactionCurrencyPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams);
                    break;
                }
            default:
                throw error(strFmt("@SYS22828", funcName()));
        }

        this.calcTransactionCurrencyAmount(_accountingDistribution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        FormDataSource                      formDataSource;
        FormDataSource                      accDistFormDataSource;
        FormRun                             formRun;
        Object                              callingForm;
        int                                 i;
        AccountingDistribution              accountingDistribution;
        AccountingDistribution              accountingDistributionCheckError;
        AccountingDistribution              childAccountingDistribution;
        AccountingDistribution              parentAccountingDistribution;
        AccountingEvent                     accountingEvent;
        ProjectAccountingDistribution       childrenProjectAccountingDistribution;
        ProjectAccountingDistribution       projectAccountingDistributionCheckError;
        RefRecId                            origProjTable;
        AccDistProcessorProjectExtension    accDistProcessorProjectExtension;
        NoYes                               limitErrorValue;
        AmountCur                           parentAmount;
        AmountCur                           childAmount;
        ProjFundingLimitTrackingAction      projFundingLimitTrackingAction;
        boolean                             hasFundingLimits;
        boolean                             limitError              = false;
        boolean                             updateRefTrans          = false;
        boolean                             processUpdateEvent      = true;

        boolean                             isUsingDocumentMatching        = false;
        SourceDocumentLineItem              topSourceDocumentLine;
        Map                                 referenceAccountingDistributionMap = new Map(Types::Int64, Types::Class);
        List                                listFundingLimits = new List(Types::Record);
        SourceDocumentLineItemList          sourceDocumentLineItemList;

        this.roundTransactionCurrencyAmount();

        if (this.ProjTable)
        {
            accountingDistribution = AccountingDistribution::find(this.AccountingDistribution);

            topSourceDocumentLine = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(accountingDistribution.SourceDocumentLine);

            if (ProjFundingLimitTrackingManager::isUsingDocumentMatching(topSourceDocumentLine))
            {
                isUsingDocumentMatching = true;
            }

            origProjTable = this.orig().ProjTable;
            hasFundingLimits = ProjInvoiceTable::hasFundingLimits(ProjTable::findRecId(this.ProjTable).ProjInvoiceProjId);

            if (hasFundingLimits)
            {
                if (accountingDistribution.AccountingEvent)
                {
                    accountingEvent = AccountingEvent::find(accountingDistribution.AccountingEvent);
                    if (accountingEvent && accountingEvent.State != AccountingEventState::Started)
                    {
                        // Accounting distribion window was closed after journalize or posting of source document
                        processUpdateEvent = false;
                    }

                    if (accountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Reversing)
                    {
                        // There is no processing which should be updating amounts for a reversal entry
                        processUpdateEvent = false;
                    }

                    if (ProjFundingLimitTrackingManager::isVendorInvoiceSavedDocLine(accountingDistribution.SourceDocumentLine))
                    {
                        // There is no processing which should be updating amounts for a saved vendor invoices
                        processUpdateEvent = false;
                    }
                }

                if (processUpdateEvent)
                {
                    if (!isUsingDocumentMatching)
                    {
                        accountingDistribution = AccountingDistribution::find(this.orig().AccountingDistribution);

                        projFundingLimitTrackingAction = ProjFundingLimitTrackingAction::Delete;

                        if (ProjFundingLimitTrackingManager::isVendorInvoiceActiveDocLine(accountingDistribution.SourceDocumentLine))
                        {
                            projFundingLimitTrackingAction = ProjFundingLimitTrackingAction::Release;
                        }

                        ProjFundingLimitTrackingManager::updateUsingProjAccountingDistribution(this.orig(), accountingDistribution, projFundingLimitTrackingAction);
                    }
                }
            }

            this.setLedgerDimension(accountingDistribution);

            super();

            if (isUsingDocumentMatching && hasFundingLimits && processUpdateEvent)
            {
                sourceDocumentLineItemList = ProjectAccountingDistribution::getSourceDocumentLineItemList(accountingDistribution.SourceDocumentHeader);
                accDistProcessorProjectExtension = AccDistProcessorProjectExtension::construct();

                accDistProcessorProjectExtension.processing(sourceDocumentLineItemList);
                accDistProcessorProjectExtension.processed(sourceDocumentLineItemList);
                return;
            }

            formDataSource = FormDataUtil::getFormDataSource(this);
            if (formDataSource)
            {
                formRun = formDataSource.formRun();
                if (formRun)
                {
                    callingForm = formRun;
                    if (formHasMethod(callingForm, identifierStr(getAccountingDistribution)))
                    {
                        accountingDistribution = Global::con2Buf(callingForm.getAccountingDistribution());
                    }
                    else
                    {
                        for (i=1; i<= formRun.dataSourceCount(); i++)
                        {
                            accDistFormDataSource = formRun.dataSource(i);
                            if (accDistFormDataSource.table() == tableNum(AccountingDistribution))
                            {
                                accountingDistribution = accDistFormDataSource.cursor() as AccountingDistribution;
                                break;
                            }
                        }
                    }
                }

                accDistProcessorProjectExtension = AccDistProcessorProjectExtension::construct();
                accDistProcessorProjectExtension.updateChildDistributions(accountingDistribution, this);

                if (origProjTable != this.ProjTable)
                {
                    if (ProjInvoiceTable::hasFundingLimits(ProjTable::findRecId(origProjTable).ProjInvoiceProjId))
                    {
                        // Need to release all the children records prior to allocating to a new project ID
                        while select childAccountingDistribution
                                where childAccountingDistribution.ParentDistribution == accountingDistribution.RecId
                        {
                            childrenProjectAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(childAccountingDistribution.RecId);
                            ProjFundingLimitTrackingManager::updateUsingProjAccountingDistribution(childrenProjectAccountingDistribution, childAccountingDistribution, ProjFundingLimitTrackingAction::Release, false);
                        }
                    }

                    AccDistProcessorProjectExtension::allocateExistingDistribution(accountingDistribution, this);
                }
            }

            if (hasFundingLimits)
            {
                if (processUpdateEvent)
                {
                    //
                    // Funding Limit tracking on saved copies of Vendor invoice is only used for pending transactions
                    // Funding limit tracking is on the active documents
                    //
                    if (!ProjFundingLimitTrackingManager::isVendorInvoiceSavedDocLine(accountingDistribution.SourceDocumentLine))
                    {
                        if (ProjectAccountingDistribution::transactionCurrencySalesAmt(accountingDistribution, this) != 0.0)
                        {
                            //
                            // Purchase Orders linked to Purchase Requisitions do not track amount variances
                            //
                            if (ProjFundingLimitTrackingManager::isPurchaseOrderAccDistribution(accountingDistribution)
                                || ProjFundingLimitTrackingManager::isVendorInvoiceActiveDocument(accountingDistribution.SourceDocumentHeader))
                            {
                                updateRefTrans = true;
                            }

                            accountingDistribution = AccountingDistribution::find(this.AccountingDistribution);
                            ProjFundingLimitTrackingManager::updateUsingProjAccountingDistribution(this, accountingDistribution, ProjFundingLimitTrackingAction::Allocate, updateRefTrans);
                        }

                        // Funding limit check passed so set the limit error flag to No.
                        if (limitError)
                        {
                            ProjFundingLimitTrackingManager::setLimitErrorFlag(this.RecId, NoYes::Yes);
                        }
                        else
                        {
                            ProjFundingLimitTrackingManager::setLimitErrorFlag(this.RecId, NoYes::No);

                            // Check other source document lines which might now be valid
                            while select accountingDistributionCheckError where
                                accountingDistributionCheckError.SourceDocumentLine == accountingDistribution.SourceDocumentLine        &&
                                accountingDistributionCheckError.ReferenceRole      != AccountingDistributionReferenceRole::Reversing   &&
                                accountingDistributionCheckError.AccountingEvent    == 0
                            {
                                projectAccountingDistributionCheckError = ProjectAccountingDistribution::findByAccountingDistribution(accountingDistributionCheckError.RecId);
                                parentAmount = ProjectAccountingDistribution::transactionCurrencySalesAmt(accountingDistributionCheckError, projectAccountingDistributionCheckError);

                                while select childAccountingDistribution
                                        where childAccountingDistribution.ParentDistribution == accountingDistributionCheckError.RecId
                                {
                                    // Recheck if there is an error on the line
                                    if (ProjFundingLimitTrackingManager::hasLimitErrorSourceDocumentLine(childAccountingDistribution.SourceDocumentLine))
                                    {
                                        limitErrorValue = NoYes::No;
                                        childrenProjectAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(childAccountingDistribution.RecId);
                                        if (!ProjFundingLimitTrackingManager::isWithinFundingLimitProjAcctDist(childrenProjectAccountingDistribution, childAccountingDistribution))
                                        {
                                            limitErrorValue = NoYes::Yes;
                                        }

                                        if (childAccountingDistribution.MonetaryAmount == MonetaryAmount::PriceAdjustment           ||
                                            childAccountingDistribution.MonetaryAmount == MonetaryAmount::PriceAdjustmentVariance   ||
                                            childAccountingDistribution.MonetaryAmount == MonetaryAmount::PriceVariance             ||
                                            childAccountingDistribution.MonetaryAmount == MonetaryAmount::Charge                    ||
                                            childAccountingDistribution.MonetaryAmount == MonetaryAmount::ChargeVariance            ||
                                            childAccountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverableVariance)
                                        {
                                            childAmount = ProjectAccountingDistribution::transactionCurrencySalesAmt(childAccountingDistribution, childrenProjectAccountingDistribution);
                                            if (((parentAmount >= 0.0)          &&
                                                 (childAmount <= 0.0))     ||
                                                ((parentAmount < 0.0)           &&
                                                 (childAmount > 0.0)))
                                            {
                                                limitErrorValue = NoYes::No;
                                            }
                                        }
                                        ProjFundingLimitTrackingManager::setLimitErrorFlag(projectAccountingDistributionCheckError.RecId, limitErrorValue);
                                    }
                                }

                                // Recheck if there is an error on the line
                                if (ProjFundingLimitTrackingManager::hasLimitErrorSourceDocumentLine(accountingDistributionCheckError.sourcedocumentLine))
                                {
                                    limitErrorValue = NoYes::No;
                                    if (!ProjFundingLimitTrackingManager::isWithinFundingLimitProjAcctDist(projectAccountingDistributionCheckError, accountingDistributionCheckError))
                                    {
                                        limitErrorValue = NoYes::Yes;
                                    }
                                    ProjFundingLimitTrackingManager::setLimitErrorFlag(projectAccountingDistributionCheckError.RecId, limitErrorValue);
                                }
                            }
                        }
                    }
                }
            }
        }
        else
        {
            if (this.orig().ProjTable)
            {
                // Need to release the tracking before deleting the record and not allocate to referenced distribution
                accountingDistribution = AccountingDistribution::find(this.orig().AccountingDistribution);
                if (isUsingDocumentMatching)
                {
                    ProjFundingLimitTrackingManager::deleteFundingLimitTracking(this.orig());
                }
                else
                {
                    ProjFundingLimitTrackingManager::updateUsingProjAccountingDistribution(this.orig(), accountingDistribution, ProjFundingLimitTrackingAction::Release, false);
                }
            }

            this.delete();

            if (FormDataUtil::getFormDataSource(this))
            {
                accDistProcessorProjectExtension = AccDistProcessorProjectExtension::construct();
                accDistProcessorProjectExtension.deleteChildDistributions(this.AccountingDistribution);
            }
        }

        //
        // Funding Limit tracking on saved copies of Vendor invoice is only used for pending transactions.
        // Funding limit tracking is on the active documents.
        // Funding limit validation will be done when all funding limit tracking records are updated.
        //
        if (hasFundingLimits && processUpdateEvent && !ProjFundingLimitTrackingManager::isVendorInvoiceSavedDocLine(accountingDistribution.SourceDocumentLine))
        {
            // Check limits;
            if (this.limitCheckRequiredOnUpdate())
            {
                if (!ProjFundingLimitTrackingManager::isWithinFundingLimitProjAcctDist(this, accountingDistribution))
                {
                    if (this.ProjFundingSource == this.orig().ProjFundingSource)
                    {
                        boolean projFundingLimitErrorFlight = FeatureStateProvider::isFeatureEnabled(ProjPurchLineFundingLimitErrorFlight::instance());
                        boolean limitCheckResult = ProjFundingLimitTrackingManager::hasLimitErrorSourceDocumentLine(accountingDistribution.SourceDocumentLine);
                        if ((!projFundingLimitErrorFlight && !limitCheckResult)
                            || (projFundingLimitErrorFlight && limitCheckResult))
                        {
                            // Only report the limit error once
                            if (accountingDistribution.ParentDistribution)
                            {
                                parentAccountingDistribution = AccountingDistribution::find(accountingDistribution.ParentDistribution);
                            }

                            if (accountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching ||
                                (parentAccountingDistribution && parentAccountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching))
                            {
                                limitError = !checkFailed("@SYS4110061");
                            }
                            else
                            {
                                limitError = !checkFailed("@SYS4110062");
                            }
                        }
                        else
                        {
                            throw error("@SYS136009");
                        }
                    }
                    else
                    {
                        throw error("@SYS136009");
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        AccountingDistribution  accountingDistribution;
        SourceDocumentLineItem  sourceDocumentLineItem;
        SourceDocumentLine      sourceDocumentLine;
        ProjValCheckTrans       projValCheckTrans;
        TrvExpTable             trvExpTable;
        SysDictField            sysDictField;
        FormDataSource          formDataSource;
        FormDataSource          accDistFormDataSource;
        FormRun                 formRun;
        int                     i;
        boolean                 ret = true;

        if (this.ProjTable)
        {
            ret = super();

            if (ret && !this.AccountingDistribution)
            {
                sysDictField = SysDictField::newName(tableStr(ProjectAccountingDistribution), fieldStr(ProjectAccountingDistribution, AccountingDistribution));
                ret = checkFailed(strFmt("@SYS116347", sysDictField.label()));
            }

            formDataSource = FormDataUtil::getFormDataSource(this);
            if (formDataSource)
            {
                formRun = formDataSource.formRun();
                if (formRun)
                {
                    for (i=1; i<= formRun.dataSourceCount(); i++)
                    {
                        accDistFormDataSource = formRun.dataSource(i);
                        if (accDistFormDataSource.table() == tableNum(AccountingDistribution))
                        {
                            break;
                        }
                    }
                }
                if (accDistFormDataSource && accDistFormDataSource.table() == tableNum(AccountingDistribution))
                {
                    accountingDistribution = accDistFormDataSource.cursor() as AccountingDistribution;
                }
            }

            if (!accountingDistribution)
            {
                accountingDistribution = this.getAccountingDistribution();
            }

            sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(accountingDistribution.SourceDocumentLine);
            sourceDocumentLine     = sourceDocumentLineItem.parmSourceDocumentLine();

            if (ret && !this.ProjTable)
            {
                ret = checkFailed("@SYS81107");
            }

            if (ret && !this.ProjCategory)
            {
                ret = checkFailed("@SYS76856");
            }

            if (ret && !this.ProjLineProperty)
            {
                ret = checkFailed("@SYS76857");
            }

            if (ret &&
                ((accountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId &&
                    (accountingDistribution.MonetaryAmount != MonetaryAmount::PayrollCost
                    && accountingDistribution.MonetaryAmount != MonetaryAmount::PayrollLiability
                    && accountingDistribution.MonetaryAmount != MonetaryAmount::WorkInProcess
                    && accountingDistribution.MonetaryAmount != MonetaryAmount::ExtendedPrice))
                    ||
                    (accountingDistribution.SourceDocumentLine != sourceDocumentLine.RecId)) &&
                (this.TransactionCurrencyPrice || this.TransactionCurrencyAmount))
            {
                ret = checkFailed("@SYS6144");
            }

            // For expense, the category is not allowed to change for non-cross company distribution
            if (ret && (sourceDocumentLineItem is TrvExpTransSourceDocLineItem))
            {
                if (sourceDocumentLineItem.parmLegalEntityRecId() == accountingDistribution.AccountingLegalEntity)
                {
                    if (TrvExpTrans::findBySourceDocumentLine(accountingDistribution.SourceDocumentLine).CostType != ProjCategory::findRecId(this.ProjCategory).CategoryId)
                    {
                        ret = checkFailed("@Expense:CategoryChangeWarningOnProjectDistribution");
                    }
                }

                if (ret && this.ProjCategory)
                {
                    changecompany(CompanyInfo::findRecId(accountingDistribution.AccountingLegalEntity).DataArea)
                    {
                        if (CategoryTable::find(ProjCategory::findRecId(this.ProjCategory).CategoryId).UseInExpense == NoYes::No)
                        {
                            ret = checkFailed("@Expense:ProjCategoryNotUseInExpense");
                        }
                    }
                }
            }

            if (ret)
            {
                switch (ProjectSourceDocumentLineItemHelper::projTransType(sourceDocumentLineItem))
                {
                    case ProjTransType::Cost:
                    case ProjTransType::Item:
                        if (!this.Currency)
                        {
                            ret = checkFailed("@SYS76866");
                        }
                        break;

                    case ProjTransType::Revenue:
                        break;
                    case ProjTransType::Hour:
                        //  this needs to be changed, when the Cost and Item logic block changes @ sys layer
                        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                        || isConfigurationkeyEnabled(configurationKeyNum(Project))
                        || isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration))
                        )
                        {
                            if (!this.Currency)
                            {
                                ret = checkFailed("@SYS76866");
                            }
                            break;
                        }
                    default:
                        throw error(strFmt("@SYS22828", funcName()));
                }
            }

            changecompany (CompanyInfo::findRecId(accountingDistribution.AccountingLegalEntity).DataArea)
            {
                if (ret)
                {
                    if (ProjTable::findRecId(this.ProjTable).ProjInvoiceProjId && !this.ProjFundingSource)
                    {
                        sysDictField = SysDictField::newName(tableStr(ProjectAccountingDistribution), fieldStr(ProjectAccountingDistribution, ProjFundingSource));
                        ret = checkFailed(strFmt("@SYS116347", sysDictField.label()));
                    }
                }

                ret = ret && this.checkProjId(accountingDistribution, sourceDocumentLineItem);

                ret = ret && this.checkActivityNumber();

                ret = ret && this.checkCategoryId(accountingDistribution, sourceDocumentLineItem);

                ret = ret && this.checkProjFundingSource(accountingDistribution, sourceDocumentLineItem);

                if (ret)
                {
                    projValCheckTrans = new ProjValCheckTrans();
                    ret = projValCheckTrans.validateMandatory(this);
                }
            }

            //Validate amount within limits
            if (this.limitCheckRequiredOnUpdate())
            {
                //
                // If the projId has changed this check is not required as the amounts
                // will be reallocated by the funding engine
                //
                if (!ProjFundingLimitTrackingManager::isWithinFundingLimitProjAcctDist(this, accountingDistribution))
                {
                    ret = checkFailed("@SYS136009");
                }
            }
        }
        else if (this.RecId != 0)
        {
            select firstonly RecId from trvExpTable
                join accountingDistribution
                    where accountingDistribution.RecId == this.AccountingDistribution
                        && accountingDistribution.SourceDocumentHeader == trvExpTable.SourceDocumentHeader;

            // If the project distribution is not linked to expense report, don't allow the line to save without a project.
            if (trvExpTable.RecId == 0)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountingCurrencyCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting cost currency amount of the accounting distribution based on project source
    /// document line type.
    /// </summary>
    /// <param name="_accountingDistribution">
    /// An <c>AccountingDistribution</c> record.
    /// </param>
    /// <param name="_projectAccountingDistribution">
    /// A <c>ProjectAccountingDistribution</c> record.
    /// </param>
    /// <param name="_sourceDocumentLineItem">
    /// An instance of the <c>SourceDocumentLineItem</c> class; optional
    /// </param>
    /// <returns>
    /// The accounting cost currency amount of the accounting distribution based on project source document
    /// line type.
    /// </returns>
    public static AmountCur accountingCurrencyCostAmount(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem = null)
    {
        SourceDocumentLineItem  sourceDocumentLineItem;
        SourceDocumentLineItem  accDistSourceDocumentLineItem;
        CurrencyExchangeHelper  currencyExchangeHelper;
        AmountCur               accountingCurrencyCostAmount;

        if (_sourceDocumentLineItem)
        {
            sourceDocumentLineItem = _sourceDocumentLineItem;
        }
        else
        {
            sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_accountingDistribution.SourceDocumentLine);
        }

        switch (ProjectSourceDocumentLineItemHelper::projTransType(sourceDocumentLineItem))
        {
            case ProjTransType::Hour:
            case ProjTransType::Cost:
            case ProjTransType::Item:
                if (_accountingDistribution.SourceDocumentLine == sourceDocumentLineItem.parmSourceDocumentLine().RecId)
                {
                    accDistSourceDocumentLineItem = sourceDocumentLineItem;
                }
                else
                {
                    accDistSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(SourceDocumentLine::find(_accountingDistribution.SourceDocumentLine));
                }
                currencyExchangeHelper = CurrencyExchangeHelper::construct();
                
                if (sourceDocumentLineItem is PayrollEarningStatementSourceDocLineItem
                    || sourceDocumentLineItem is PayrollPayStatementSourceDocumentLine)
                {
                    currencyExchangeHelper.parmLedgerRecId(Ledger::primaryLedger(accDistSourceDocumentLineItem.parmLegalEntityRecId()));
                }
                else
                {
                    currencyExchangeHelper.parmLedgerRecId(Ledger::primaryLedger(_accountingDistribution.AccountingLegalEntity));
                }
                currencyExchangeHelper.parmExchangeDate(accDistSourceDocumentLineItem.parmSourceDocumentLine().ExchangeRateDate);
                currencyExchangeHelper.parmExchangeRate1(_accountingDistribution.getExchangeRate1(accDistSourceDocumentLineItem));
                
                boolean skipTaxVariance = ProjectAccountingDistribution::shouldSkipTaxVariance(_accountingDistribution);

                if (!skipTaxVariance)
                {
                    if (FeatureStateProvider::isFeatureEnabled(ProjEnableStreamlineCostAndSalesPriceCalcFeature::instance()))
                    {
                        accountingCurrencyCostAmount = _accountingDistribution.TransactionCurrencyAmount;
                    }
                    else if (ProjectAccountingDistribution::shouldUpdateTransactionCurrencyAmount(_accountingDistribution, sourceDocumentLineItem))
                    {
                        accountingCurrencyCostAmount = ProjectSourceDocumentLineItemHelper::getAmountWithDiscount(sourceDocumentLineItem, _accountingDistribution.TransactionCurrencyAmount);
                    }
                
                    // Calculate the amount if vendor retention cost amount calculation feature is disabled.
                    boolean isVendorInvoiceLine = _sourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem ? true : false;
                    if (isVendorInvoiceLine 
                        && !ProjVendorInvoiceRetentionCalcFeatureHelper::shouldProcessWithFeatureEnabledBySouceDocumentLineItem(
                            ProjVendorInvoiceRetentionCalcFeatureHelper::isFeatureEnabled(),
                            _sourceDocumentLineItem))                
                    {
                        accountingCurrencyCostAmount = ProjectAccountingDistribution::calcTransactionAmountForProjectVendorInvoiceRetention(sourceDocumentLineItem, _accountingDistribution, accountingCurrencyCostAmount);
                    }
              
			        if (accountingCurrencyCostAmount)
                    {
				        accountingCurrencyCostAmount = currencyExchangeHelper.calculateTransactionToAccounting(_accountingDistribution.TransactionCurrency, accountingCurrencyCostAmount, true);
                    }
                }
				break;

            case ProjTransType::Revenue:
                accountingCurrencyCostAmount = 0;
                break;

            default:
                throw error(strFmt("@SYS22828", funcName()));
        }

        return accountingCurrencyCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnOver</Name>
				<Source><![CDATA[
    private static AmountCur transTurnOver(SourceDocumentLineItem _sourceDocumentLineItem, AccountingDistribution _accountingDistribution)
    {
        AmountCur   transTurnOver;
        AmountCur   transCost;
        ProjSalesCurrencyCode   projSalesCurrencyCode = ProjectSourceDocumentLineItemHelper::salesCurrency(_sourceDocumentLineItem).CurrencyCode;

        if (_accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable)
        {
            transCost = _accountingDistribution.TransactionCurrencyAmount;
        }
        else
        {
            transCost = ProjectAccountingDistribution::totalTransactionCurrencyCostAmount(_accountingDistribution, _sourceDocumentLineItem);
        }

        if (projSalesCurrencyCode != _accountingDistribution.TransactionCurrency)
        {
            transTurnover = CurrencyExchangeHelper::curAmount2CurAmount(transCost,
                                                                        _accountingDistribution.TransactionCurrency,
                                                                        projSalesCurrencyCode,
                                                                        _accountingDistribution.AccountingDate,
                                                                        false);
        }
        else
        {
            transTurnover = transCost;
        }

        return transTurnOver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountingCurrencySalesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction sales currency amount of the accounting distribution based on project source
    /// document line type.
    /// </summary>
    /// <param name="_accountingDistribution">
    /// An <c>AccountingDistribution</c> record.
    /// </param>
    /// <param name="_projectAccountingDistribution">
    /// A <c>ProjectAccountingDistribution</c> record.
    /// </param>
    /// <param name="_sourceDocumentLineItem">
    /// An instance of the <c>SourceDocumentLineItem</c> class; optional
    /// </param>
    /// <returns>
    /// The transaction sales currency amount of the accounting distribution based on project source
    /// document line type.
    /// </returns>
    public static AmountCur accountingCurrencySalesAmount(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem = null)
    {
        SourceDocumentLineItem          sourceDocumentLineItem;
        AmountCur                       accountingCurrencySalesAmount;
        ProjTrans_Virtual               projTrans_Virtual;
        AmountCur                       transTurnover;

        if (_sourceDocumentLineItem)
        {
            sourceDocumentLineItem = _sourceDocumentLineItem;
        }
        else
        {
            sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_accountingDistribution.SourceDocumentLine);
        }

        switch (ProjectSourceDocumentLineItemHelper::projTransType(sourceDocumentLineItem))
        {
            case ProjTransType::Cost:
            case ProjTransType::Item:

                boolean skipTaxVarianceForItemTrans = ProjectAccountingDistribution::shouldSkipTaxVariance(_accountingDistribution);

                if (!skipTaxVarianceForItemTrans)
                {
                    transTurnover = _projectAccountingDistribution.TransactionCurrencyAmount;
                }

                projTrans_Virtual = ProjTrans_Virtual::construct();

                projTrans_Virtual.setCurrencyIdSales(ProjectAccountingDistribution::transactionSalesCurrency(_accountingDistribution, _projectAccountingDistribution, sourceDocumentLineItem));
                projTrans_Virtual.setProjId(ProjTable::findRecId(_projectAccountingDistribution.ProjTable).ProjId);
                projTrans_Virtual.setTransDate(sourceDocumentLineItem.parmAccountingDate());
                projTrans_Virtual.setTransTurnover(transTurnover);

                if (sourceDocumentLineItem is ProjAdvancedJournalSourceDocumentLineItem)
                {
                    projTrans_Virtual.setExchRateSales(ProjectAccountingDistribution::getExchangeRate1(_accountingDistribution, _projectAccountingDistribution, sourceDocumentLineItem, projTrans_Virtual.currencyIdSales()));
                }

                accountingCurrencySalesAmount = projTrans_Virtual.transTurnoverMST();                
                break;

            case ProjTransType::Revenue:
                accountingCurrencySalesAmount = _accountingDistribution.TransactionCurrencyAmount;
                break;

            case ProjTransType::Hour:
                //  this needs to be changed, when the Cost and Item logic block changes @ sys layer
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                    || isConfigurationkeyEnabled(configurationKeyNum(Project))
                    || isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration))

                )
                {
                    boolean skipTaxVarianceForHourTrans = ProjectAccountingDistribution::shouldSkipTaxVariance(_accountingDistribution);

                    if (!skipTaxVarianceForHourTrans)
                    {
                        transTurnover = _projectAccountingDistribution.TransactionCurrencyAmount;
                        if (sourceDocumentLineItem is SourceDocumentLineItemIProduct &&
                            ProjParameters::find().DefaultCostPriceAsSalesPrice &&
                            _accountingDistribution.MonetaryAmount == MonetaryAmount::ExtendedPrice)
                        {
                            if (ProjectSourceDocumentLineItemHelper::verifyCostPriceEqualsSalesPrice(sourceDocumentLineItem))
                            {
                                transTurnover = ProjectAccountingDistribution::transTurnOver(sourceDocumentLineItem, _accountingDistribution);
                            }
                        }
                    }

                    projTrans_Virtual = ProjTrans_Virtual::construct();

                    projTrans_Virtual.setCurrencyIdSales(ProjectAccountingDistribution::transactionSalesCurrency(_accountingDistribution, _projectAccountingDistribution, sourceDocumentLineItem));
                    projTrans_Virtual.setProjId(ProjTable::findRecId(_projectAccountingDistribution.ProjTable).ProjId);
                    projTrans_Virtual.setTransDate(sourceDocumentLineItem.parmAccountingDate());
                    projTrans_Virtual.setTransTurnover(transTurnover);

                    if (sourceDocumentLineItem is ProjAdvancedJournalSourceDocumentLineItem)
                    {
                        projTrans_Virtual.setExchRateSales(ProjectAccountingDistribution::getExchangeRate1(_accountingDistribution, _projectAccountingDistribution, sourceDocumentLineItem, projTrans_Virtual.currencyIdSales()));
                    }
                    
                    accountingCurrencySalesAmount = projTrans_Virtual.transTurnoverMST();
                    break;
                }
            default:
                throw error(strFmt("@SYS22828", funcName()));
        }

        return accountingCurrencySalesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryCurrency</Name>
				<Source><![CDATA[
    public static Query buildQueryCurrency(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        Query                   query;
        QueryBuildDataSource    currencyQbds;

        query = new Query();
        currencyQbds = query.addDataSource(tableNum(Currency));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryProjCategory</Name>
				<Source><![CDATA[
    public static Query buildQueryProjCategory(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        Query                   query;
        Args                    args;
        ProjValCheckTrans       projValCheckTrans;
        ProjCategoryLookup      projCategoryLookup;
        ProjId                  projId;
        ResourceRecId           resourceRecId;
        boolean                 serviceItem;
        ProjCategoryType        categoryType;
        boolean                 filterEstimate;
        boolean                 filterSubscription;
        boolean                 showActiveOrSubscription;
        boolean                 showInactiveCategories;
        NoYes                   subscription;
        boolean                 production;
        FormName                formName;

        projValCheckTrans = new ProjValCheckTrans();
        args = new Args();
        args.record(_projectAccountingDistribution);
        if (projValCheckTrans.checkBuffer(args))
        {
            projValCheckTrans.setVariablesFromBuffer(args, _accountingDistribution);
        }
        projId = projValCheckTrans.parmProjId();
        resourceRecId = projValCheckTrans.parmResource();
        serviceItem = projValCheckTrans.parmServiceItem();
        categoryType = projValCheckTrans.parmCategoryType();
        filterEstimate = projValCheckTrans.parmFilterEstimate();
        filterSubscription = projValCheckTrans.parmFilterSubscription();
        showActiveOrSubscription = projValCheckTrans.parmShowActiveOrSubscription();
        showInactiveCategories = ProjParameters::find().ShowInactiveCategories;
        subscription = projValCheckTrans.parmSubscription();
        production = projValCheckTrans.parmProduction();
        formName = '';

        projCategoryLookup = new ProjCategoryLookup();
        projCategoryLookup.parmCategoryType(categoryType);
        projCategoryLookup.parmFilterEstimate(filterEstimate);
        projCategoryLookup.parmFilterSubscription(filterSubscription);
        projCategoryLookup.parmShowActiveOrSubscription(showActiveOrSubscription);
        projCategoryLookup.parmShowInactiveCategories(showInactiveCategories);
        projCategoryLookup.parmSubscription(subscription);
        projCategoryLookup.parmProduction(production);
        projCategoryLookup.parmFormName(formName);

        resourceRecId = (serviceItem) ? 0 : resourceRecId;
        query = projCategoryLookup.buildQuery(tableNum(ProjectAccountingDistribution), projId, resourceRecId);

        query.allowCrossCompany(true);
        query.addCompanyRange(SysQuery::value(CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryProjFundingSource</Name>
				<Source><![CDATA[
    public static Query buildQueryProjFundingSource(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        SourceDocumentLineItem      sourceDocumentLineItem;
        CustVendAC                  custAccount;
        ProjTable                   projTable;
        Query                       query;
        QueryBuildDataSource        queryBuildDataSource;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_accountingDistribution.SourceDocumentLine);
        custAccount = ProjectSourceDocumentLineItemHelper::custAccount(sourceDocumentLineItem);

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            projTable = ProjTable::findRecId(_projectAccountingDistribution.ProjTable);
        }

        query = new Query();
        query.allowCrossCompany(true);
        query.addCompanyRange(SysQuery::value(projTable.DataAreaId));

        queryBuildDataSource = query.addDataSource(tableNum(ProjFundingSource));
        queryBuildDataSource.addRange(fieldNum(ProjFundingSource, ContractId)).value(queryValue(projTable.ProjInvoiceProjId));

        if (custAccount)
        {
            queryBuildDataSource.addRange(fieldNum(ProjFundingSource, CustAccount)).value(queryValue(custAccount));
            queryBuildDataSource.addRange(fieldNum(ProjFundingSource, FundingType)).value(queryValue(ProjFundingType::Customer));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryProjLineProperty</Name>
				<Source><![CDATA[
    public static Query buildQueryProjLineProperty(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        Query                   query;
        QueryBuildDataSource    projLinePropertyQbds;

        query = new Query();
        query.allowCrossCompany(true);
        query.addCompanyRange(SysQuery::value(CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea));
        projLinePropertyQbds = query.addDataSource(tableNum(ProjLineProperty));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryProjTable</Name>
				<Source><![CDATA[
    public static Query buildQueryProjTable(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        Query                   query;
        Args                    args;
        ProjValCheckTrans       projValCheckTrans;
        ProjTableLookup         projTableLookup;
        ProjType                projType;
        boolean                 useProjType;
        ProjCategoryId          projCategoryId;
        ResourceRecId           resource;

        projValCheckTrans = new ProjValCheckTrans();
        args = new Args();
        args.record(_projectAccountingDistribution);
        if (projValCheckTrans.checkBuffer(args))
        {
            projValCheckTrans.setVariablesFromBuffer(args, _accountingDistribution);
            if (projValCheckTrans.checkProjType())
            {
                projType = projValCheckTrans.parmProjType();
                useProjType = true;
            }
        }
        projCategoryId = projValCheckTrans.parmCategoryId();
        resource = projValCheckTrans.parmResource();

        projTableLookup = new ProjTableLookup();
        projTableLookup.parmProjType(projType);
        projTableLookup.parmUseProjType(useProjType);

        query = projTableLookup.buildProjTableQueryResource(tableNum(ProjectAccountingDistribution), projCategoryId, resource);

        query.allowCrossCompany(true);
        query.addCompanyRange(SysQuery::value(CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuerySmmActivities</Name>
				<Source><![CDATA[
    public static Query buildQuerySmmActivities(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        Query                   query;
        ProjTable               projTable;
        HierarchyTreeLookup     hierarchyTreeLookup;

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            projTable = ProjTable::findRecId(_projectAccountingDistribution.ProjTable);
        }

        hierarchyTreeLookup = new HierarchyTreeLookup();
        hierarchyTreeLookup.parmRefRecId(projTable.RecId);
        query = hierarchyTreeLookup.buildQueryListView();

        query.allowCrossCompany(true);
        query.addCompanyRange(SysQuery::value(projTable.DataAreaId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryTaxGroupHeading</Name>
				<Source><![CDATA[
    public static Query buildQueryTaxGroupHeading(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        Query                   query;
        QueryBuildDataSource    taxGroupHeadingQbds;

        query = new Query();
        query.allowCrossCompany(true);
        query.addCompanyRange(SysQuery::value(CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea));
        taxGroupHeadingQbds = query.addDataSource(tableNum(TaxGroupHeading));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryTaxItemGroupHeading</Name>
				<Source><![CDATA[
    public static Query buildQueryTaxItemGroupHeading(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        Query                   query;
        QueryBuildDataSource    taxItemGroupHeadingQbds;

        query = new Query();
        query.allowCrossCompany(true);
        query.addCompanyRange(SysQuery::value(CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea));
        taxItemGroupHeadingQbds = query.addDataSource(tableNum(TaxItemGroupHeading));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedActivityNumberPost</Name>
				<Source><![CDATA[
    public static void fieldModifiedActivityNumberPost(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        smmActivities    smmActivities;
        ProjActivity     projActivity;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            if (_projectAccountingDistribution.SmmActivities)
            {
                smmActivities = smmActivities::findWithRecId(_projectAccountingDistribution.SmmActivities);
                projActivity = ProjActivity::find(smmActivities.ActivityNumber);
                if (projActivity.CategoryDefault)
                {
                    _projectAccountingDistribution.ProjCategory = ProjCategory::find(projActivity.CategoryDefault).RecId;
                    _projectAccountingDistribution.modifiedFieldCategoryId(_accountingDistribution);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedCategoryIdPost</Name>
				<Source><![CDATA[
    public static void fieldModifiedCategoryIdPost(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            _projectAccountingDistribution.modifiedFieldCategoryId(_accountingDistribution);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedLegalEntityPost</Name>
				<Source><![CDATA[
    public static void fieldModifiedLegalEntityPost(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        _projectAccountingDistribution.ProjTable = 0;
        _projectAccountingDistribution.ProjCategory = 0;
        _projectAccountingDistribution.SmmActivities = 0;
        _projectAccountingDistribution.ProjFundingSource = 0;
        _projectAccountingDistribution.ProjLineProperty = 0;
        _projectAccountingDistribution.Currency = 0;
        _projectAccountingDistribution.TransactionCurrencyPrice = 0;
        _projectAccountingDistribution.TransactionCurrencyAmount = 0;
        _projectAccountingDistribution.TaxGroupHeading = 0;
        _projectAccountingDistribution.TaxItemGroupHeading = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedLinePropertyIdPost</Name>
				<Source><![CDATA[
    public static void fieldModifiedLinePropertyIdPost(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            _projectAccountingDistribution.setLedgerDimension(_accountingDistribution, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedPercentagePost</Name>
				<Source><![CDATA[
    public static void fieldModifiedPercentagePost(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        SourceDocumentLineItem  sourceDocumentLineItem;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_accountingDistribution.SourceDocumentLine);

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            _projectAccountingDistribution.setTransactionCurrencyPrice(_accountingDistribution, sourceDocumentLineItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProjFundingSource</Name>
				<Source><![CDATA[
    public static void fieldModifiedProjFundingSource(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            _projectAccountingDistribution.setLedgerDimension(_accountingDistribution);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProjIdPost</Name>
				<Source><![CDATA[
    public static void fieldModifiedProjIdPost(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        SourceDocumentLineItem  sourceDocumentLineItem;

        if (!_projectAccountingDistribution.AccountingDistribution)
        {
            if (!_accountingDistribution.RecId)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            _projectAccountingDistribution.AccountingDistribution = _accountingDistribution.RecId;
        }

        if (!_projectAccountingDistribution.ProjTable)
        {
            _projectAccountingDistribution.ProjCategory = 0;
            _projectAccountingDistribution.SmmActivities = 0;
            _projectAccountingDistribution.ProjFundingSource = 0;
            _projectAccountingDistribution.ProjLineProperty = 0;
            _projectAccountingDistribution.Currency = 0;
            _projectAccountingDistribution.TransactionCurrencyPrice = 0;
            _projectAccountingDistribution.TransactionCurrencyAmount = 0;
            _projectAccountingDistribution.TaxGroupHeading = 0;
            _projectAccountingDistribution.TaxItemGroupHeading = 0;

            ProjectAccountingDistribution::setDefaultLedgerDimension(_accountingDistribution);
        }
        else
        {
            if (!_accountingDistribution.AccountingLegalEntity)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_accountingDistribution.SourceDocumentLine);

            changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
            {
                _projectAccountingDistribution.SmmActivities = 0;
                _projectAccountingDistribution.setCategoryId(_accountingDistribution, sourceDocumentLineItem);
                _projectAccountingDistribution.setProjFundingSource(_accountingDistribution, sourceDocumentLineItem);
                _projectAccountingDistribution.setLinePropertyId();
                _projectAccountingDistribution.setTransactionCurrency(_accountingDistribution, sourceDocumentLineItem);
                _projectAccountingDistribution.setTransactionCurrencyPrice(_accountingDistribution, sourceDocumentLineItem);
                _projectAccountingDistribution.setLedgerDimension(_accountingDistribution);
                _projectAccountingDistribution.setTaxGroupId(_accountingDistribution, sourceDocumentLineItem);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQuantityPost</Name>
				<Source><![CDATA[
    public static void fieldModifiedQuantityPost(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        SourceDocumentLineItem  sourceDocumentLineItem;
        SourceDocumentLineItemITimesheets iTimesheets;
        CompanyInfo companyInfo;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_accountingDistribution.SourceDocumentLine);

        if (sourceDocumentLineItem is SourceDocumentLineItemITimesheets)
        {
            iTimesheets = sourceDocumentLineItem as SourceDocumentLineItemITimesheets;

            companyInfo = CompanyInfo::findRecId(iTimesheets.parmProjectLegalEntity());
        }
        else if (sourceDocumentLineItem is ProjAdvancedJournalSourceDocumentLineItem)
        {
            ProjAdvancedJournalSourceDocumentLineItem projAdvancedJournalSourceDocumentLineItem = sourceDocumentLineItem as ProjAdvancedJournalSourceDocumentLineItem;
            companyInfo = CompanyInfo::findDataArea(projAdvancedJournalSourceDocumentLineItem.parmProjectDataAreaId());
        }
        else
        {
            companyInfo = CompanyInfo::find(_accountingDistribution.AccountingLegalEntity);
        }

        changecompany (companyInfo.DataArea)
        {
            _projectAccountingDistribution.setTransactionCurrencyPrice(_accountingDistribution, sourceDocumentLineItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedTransCurrencyAmountPost</Name>
				<Source><![CDATA[
    public static void fieldModifiedTransCurrencyAmountPost(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        SourceDocumentLineItem  sourceDocumentLineItem;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_accountingDistribution.SourceDocumentLine);

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            _projectAccountingDistribution.setTransactionCurrencyPrice(_accountingDistribution, sourceDocumentLineItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedTransCurrencyPost</Name>
				<Source><![CDATA[
    public static void fieldModifiedTransCurrencyPost(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        SourceDocumentLineItem  sourceDocumentLineItem;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_accountingDistribution.SourceDocumentLine);

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            _projectAccountingDistribution.setTransactionCurrencyPrice(_accountingDistribution, sourceDocumentLineItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedTransCurrencyPricePost</Name>
				<Source><![CDATA[
    public static void fieldModifiedTransCurrencyPricePost(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution, SourceDocumentLineItem _accDistSourceDocumentLineItem = null)
    {
        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            _projectAccountingDistribution.calcTransactionCurrencyAmount(_accountingDistribution, _accDistSourceDocumentLineItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidateActivityNumberPost</Name>
				<Source><![CDATA[
    public static boolean fieldValidateActivityNumberPost(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        boolean ret;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            ret = _projectAccountingDistribution.checkActivityNumber();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidateCategoryIdPost</Name>
				<Source><![CDATA[
    public static boolean fieldValidateCategoryIdPost(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        SourceDocumentLineItem  sourceDocumentLineItem;
        boolean                 ret;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_accountingDistribution.SourceDocumentLine);

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            ret = _projectAccountingDistribution.checkCategoryId(_accountingDistribution, sourceDocumentLineItem);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidateProjFundingSourcePost</Name>
				<Source><![CDATA[
    public static boolean fieldValidateProjFundingSourcePost(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        SourceDocumentLineItem  sourceDocumentLineItem;
        boolean                 ret;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_accountingDistribution.SourceDocumentLine);

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            ret = _projectAccountingDistribution.checkProjFundingSource(_accountingDistribution, sourceDocumentLineItem);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidateProjIdPost</Name>
				<Source><![CDATA[
    public static boolean fieldValidateProjIdPost(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        SourceDocumentLineItem  sourceDocumentLineItem;
        boolean                 ret;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_accountingDistribution.SourceDocumentLine);

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            ret = _projectAccountingDistribution.checkProjId(_accountingDistribution, sourceDocumentLineItem);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjectAccountingDistribution</c> table.
    /// </summary>
    /// <param name="_projectAccountingDistribution">
    /// The record ID in the <c>ProjectAccountingDistribution</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ProjectAccountingDistribution</c> table; otherwise, an empty record.
    /// </returns>
    public static ProjectAccountingDistribution find(
        RecId               _projectAccountingDistribution,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        ProjectAccountingDistribution projectAccountingDistribution;

        projectAccountingDistribution.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projectAccountingDistribution.concurrencyModel(_concurrencyModel);
        }

        select firstonly
                projectAccountingDistribution
            where
                projectAccountingDistribution.RecId == _projectAccountingDistribution;

        return projectAccountingDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAccountingDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjectAccountingDistribution</c> table.
    /// </summary>
    /// <param name="_accountingDistribution">
    /// The record ID of the <c>AccountingDistribution</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ProjectAccountingDistribution</c> table; otherwise, an empty record.
    /// </returns>
    public static ProjectAccountingDistribution findByAccountingDistribution(
        RecId               _accountingDistribution,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        ProjectAccountingDistribution projectAccountingDistribution;

        projectAccountingDistribution.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projectAccountingDistribution.concurrencyModel(_concurrencyModel);
        }

        select firstonly
                projectAccountingDistribution
            where
                projectAccountingDistribution.AccountingDistribution == _accountingDistribution;

        return projectAccountingDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjectAccountingDistribution</c> table.
    /// </summary>
    /// <param name="_vendInvoiceInfoLineRecId">
    /// The record ID of the <c>VendInvoiceInfoLine</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ProjectAccountingDistribution</c> table; otherwise, an empty record.
    /// </returns>
    public static ProjectAccountingDistribution findByVendInvoiceInfoLine(
        RecId               _vendInvoiceInfoLineRecId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        ProjectAccountingDistribution projectAccountingDistribution;

        if (_vendInvoiceInfoLineRecId)
        {
            projectAccountingDistribution.selectForUpdate(_forupdate);
            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                projectAccountingDistribution.concurrencyModel(_concurrencyModel);
            }

            AccountingDistribution accountingDistribution;
            SourceDocumentLine sourceDocumentLine;
            VendInvoiceInfoLine vendInvoiceInfoLine;

            select firstonly projectAccountingDistribution
                exists join accountingDistribution
                    where accountingDistribution.RecId == projectAccountingDistribution.AccountingDistribution
                exists join sourceDocumentLine
                    where sourceDocumentLine.RecId == accountingDistribution.sourceDocumentLine
                exists join vendInvoiceInfoLine
                    where vendInvoiceInfoLine.sourceDocumentLine == sourceDocumentLine.RecId
                        && vendInvoiceInfoLine.RecId == _vendInvoiceInfoLineRecId;
        }

        return projectAccountingDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjFundingSource</Name>
				<Source><![CDATA[
    public static void initProjFundingSource(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution, SourceDocumentLineItem _topSourceDocumentLineItem)
    {
        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            _projectAccountingDistribution.setProjFundingSource(_accountingDistribution, _topSourceDocumentLineItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrimary</Name>
				<Source><![CDATA[
    public static boolean isPrimary(AccountingDistribution _accountingDistribution)
    {
        SourceDocumentLine      sourceDocumentLine;
        SourceDocumentLineItem  accDistSourceDocumentLineItem;
        boolean                 isPrimary;

        sourceDocumentLine = SourceDocumentLine::find(_accountingDistribution.SourceDocumentLine);
        accDistSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(sourceDocumentLine);
        if (ProjectSourceDocumentLineItemHelper::implementsProject(accDistSourceDocumentLineItem))
        {
            isPrimary = true;
        }

        return isPrimary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCategoryId</Name>
				<Source><![CDATA[
    public static void lookupCategoryId(FormStringControl _formControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        Args    args;
        FormRun formRun;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error("@SYS6144");
        }

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            args = new Args(formStr(ProjCategoryLookup));
            args.caller(_formControl);
            args.record(_projectAccountingDistribution);

            formRun = ClassFactory::formRunClassOnClient(args);
            formRun.init();
            _formControl.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProjId</Name>
				<Source><![CDATA[
    public static void lookupProjId(FormStringControl _formControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        Args    args;
        FormRun formRun;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error("@SYS6144");
        }

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            args = new Args(formStr(ProjTableLookup));
            args.caller(_formControl);
            args.record(_projectAccountingDistribution);

            formRun = ClassFactory::formRunClassOnClient(args);
            formRun.init();
            _formControl.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceCurrency</Name>
				<Source><![CDATA[
    public static Common lookupReferenceCurrency(FormReferenceControl _formReferenceControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        SysReferenceTableLookup     sysReferenceTableLookup;
        Query                       query;

        sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(Currency), _formReferenceControl);
        sysReferenceTableLookup.addLookupfield(fieldNum(Currency, CurrencyCode));

        query = ProjectAccountingDistribution::buildQueryCurrency(_accountingDistribution, _projectAccountingDistribution);
        sysReferenceTableLookup.parmQuery(query);

        return sysReferenceTableLookup.performFormLookup() as Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceProjCategory</Name>
				<Source><![CDATA[
    public static Common lookupReferenceProjCategory(FormReferenceControl _formReferenceControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        SysReferenceTableLookup     sysReferenceTableLookup;
        Query                       query;

        sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(ProjCategory), _formReferenceControl);
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjCategory, CategoryId));
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjCategory, Name));
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjCategory, CategoryType));

        query = ProjectAccountingDistribution::buildQueryProjCategory(_accountingDistribution, _projectAccountingDistribution);
        sysReferenceTableLookup.parmQuery(query);

        return sysReferenceTableLookup.performFormLookup() as ProjCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceProjFundingSource</Name>
				<Source><![CDATA[
    public static Common lookupReferenceProjFundingSource(FormReferenceControl _formReferenceControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        SysReferenceTableLookup     sysReferenceTableLookup;
        Query                       query;

        sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(ProjFundingSource), _formReferenceControl);
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjFundingSource, FundingSourceId));
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjFundingSource, FundingType));
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjFundingSource, CustAccount));

        query = ProjectAccountingDistribution::buildQueryProjFundingSource(_accountingDistribution, _projectAccountingDistribution);
        sysReferenceTableLookup.parmQuery(query);

        return sysReferenceTableLookup.performFormLookup() as ProjFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceProjLineProperty</Name>
				<Source><![CDATA[
    public static Common lookupReferenceProjLineProperty(FormReferenceControl _formReferenceControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        SysReferenceTableLookup     sysReferenceTableLookup;
        Query                       query;

        sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(ProjLineProperty), _formReferenceControl);
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjLineProperty, LinePropertyId));
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjLineProperty, Name));

        query = ProjectAccountingDistribution::buildQueryProjLineProperty(_accountingDistribution, _projectAccountingDistribution);
        sysReferenceTableLookup.parmQuery(query);

        return sysReferenceTableLookup.performFormLookup() as ProjLineProperty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceProjTable</Name>
				<Source><![CDATA[
    public static Common lookupReferenceProjTable(FormReferenceControl _formReferenceControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        SysReferenceTableLookup sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(ProjTable), _formReferenceControl);

        sysReferenceTableLookup.addLookupfield(fieldNum(ProjTable, ProjId));
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjTable, Name));
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjTable, Type));
        SysReferenceTableLookup.addLookupMethod(tableMethodStr(ProjTable, Stage));

        Query query = ProjectAccountingDistribution::buildQueryProjTable(_accountingDistribution, _projectAccountingDistribution);

        sysReferenceTableLookup.parmQuery(query);
        return sysReferenceTableLookup.performFormLookup() as ProjTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceSmmActivities</Name>
				<Source><![CDATA[
    public static Common lookupReferenceSmmActivities(FormReferenceControl _formReferenceControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        SysReferenceTableLookup     sysReferenceTableLookup;
        Query                       query;

        sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(smmActivities), _formReferenceControl);
        sysReferenceTableLookup.addLookupfield(fieldNum(smmActivities, ActivityNumber));
        sysReferenceTableLookup.addLookupfield(fieldNum(smmActivities, Purpose));
        sysReferenceTableLookup.addLookupfield(fieldNum(smmActivities, Category));

        query = ProjectAccountingDistribution::buildQuerySmmActivities(_accountingDistribution, _projectAccountingDistribution);
        sysReferenceTableLookup.parmQuery(query);

        return sysReferenceTableLookup.performFormLookup() as smmActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceTaxGroupHeading</Name>
				<Source><![CDATA[
    public static Common lookupReferenceTaxGroupHeading(FormReferenceControl _formReferenceControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        SysReferenceTableLookup     sysReferenceTableLookup;
        Query                       query;

        sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(TaxGroupHeading), _formReferenceControl);
        sysReferenceTableLookup.addLookupfield(fieldNum(TaxGroupHeading, TaxGroup));

        query = ProjectAccountingDistribution::buildQueryTaxGroupHeading(_accountingDistribution, _projectAccountingDistribution);
        sysReferenceTableLookup.parmQuery(query);

        return sysReferenceTableLookup.performFormLookup() as TaxGroupHeading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceTaxItemGroupHeading</Name>
				<Source><![CDATA[
    public static Common lookupReferenceTaxItemGroupHeading(FormReferenceControl _formReferenceControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        SysReferenceTableLookup     sysReferenceTableLookup;
        Query                       query;

        sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(TaxItemGroupHeading), _formReferenceControl);
        sysReferenceTableLookup.addLookupfield(fieldNum(TaxItemGroupHeading, TaxItemGroup));

        query = ProjectAccountingDistribution::buildQueryTaxItemGroupHeading(_accountingDistribution, _projectAccountingDistribution);
        sysReferenceTableLookup.parmQuery(query);

        return sysReferenceTableLookup.performFormLookup() as TaxItemGroupHeading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantity</Name>
				<Source><![CDATA[
    public static Qty quantity(AccountingDistribution _accountingDistribution, SourceDocumentLineItem _accDistSourceDocumentLineItem = null)
    {
        #SubledgerJournal

        SourceDocumentLine                      sourceDocumentLine;
        SourceDocumentLineItem                  accDistSourceDocumentLineItem;
        SourceDocumentLineItemIProductQuantity  sourceDocumentLineItemIProductQuantity;
        SourceDocumentLineItemIProduct          sourceDocumentLineItemIProduct;
        Qty                                     productQuantity;
        Decimals                                productQuantityDecimalPlaces;
        InventTable                             inventTable;
        SourceDocumentLineItemITimesheets       iTimesheets;
        AllocationFactor                        allocationFactor;
        boolean                                 calculateAllocationFactor;
        boolean                                 isTimesheetQuantity;

        #define.MinimumProductQuantityDecimalPlacesPS(6);

        if (_accDistSourceDocumentLineItem)
        {
            accDistSourceDocumentLineItem = _accDistSourceDocumentLineItem;
        }
        else
        {
            sourceDocumentLine = SourceDocumentLine::find(_accountingDistribution.SourceDocumentLine);
            accDistSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(sourceDocumentLine);
        }

        if (accDistSourceDocumentLineItem is SourceDocumentLineItemIProductQuantity)
        {
            // Don't recalculate the allocation factor for adjusting transactions with Extended price type
            if(_accountingDistribution.MonetaryAmount == MonetaryAmount::ExtendedPrice &&
                _accountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Adjusting)
            {
                calculateAllocationFactor = false;
            }
            else
            {
                calculateAllocationFactor = true;
            }

            sourceDocumentLineItemIProductQuantity = accDistSourceDocumentLineItem as SourceDocumentLineItemIProductQuantity;
            productQuantity = sourceDocumentLineItemIProductQuantity.parmQuantity();
            if (productQuantity == 0)
            {
                if (accDistSourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem)
                {
                    SourceDocumentLineItem vendorInvoiceLineSourceDocLineItem = accDistSourceDocumentLineItem as VendorInvoiceLineSourceDocLineItem;

                    //Update quatity to zero if release all retained amount is marked Yes and calculate vendor retention cost amount calculation feature is enabled.
                    NoYes PSAIsFinal = VendInvoiceInfoLine::findSourceDocumentLine(vendorInvoiceLineSourceDocLineItem.parmSourceDocumentLine().RecId).PSAIsFinal;
                    if (PSAIsFinal 
                        && ProjVendorInvoiceRetentionCalcFeatureHelper::shouldProcessWithFeatureEnabledBySouceDocumentLineItem(
                            ProjVendorInvoiceRetentionCalcFeatureHelper::isFeatureEnabled(),
                            accDistSourceDocumentLineItem))
                    {
                        productQuantity = 0;
                    }
                    else
                    {
                        productQuantity = 1;
                    }
                    
                }
                else
                {
                    productQuantity = 1;
                }
            }
        }
        else
        {
            productQuantity = 1;
        }

        if (accDistSourceDocumentLineItem is SourceDocumentLineItemIProduct)
        {
            sourceDocumentLineItemIProduct = accDistSourceDocumentLineItem as SourceDocumentLineItemIProduct;
            inventTable = sourceDocumentLineItemIProduct.parmInventTable();
        }

        if (inventTable)
        {
            changecompany(inventTable.company())
            {
                productQuantityDecimalPlaces = InventTable::inventDecimals(inventTable.ItemId);
            }
        }
        else
        {
            productQuantityDecimalPlaces = #MinimumProductQuantityDecimalPlaces;
        }

        if (accDistSourceDocumentLineItem is SourceDocumentLineItemITimesheets)
        {
            // need to case this to SourceDocumentLineItemIProjectRevenue so we can get the actual hours (SDL.parmQty)
            iTimesheets = accDistSourceDocumentLineItem as SourceDocumentLineItemITimesheets;
            productQuantity = iTimesheets.parmQuantity();
            isTimesheetQuantity = true;
        }
        else if (accDistSourceDocumentLineItem is ProjAdvancedJournalSourceDocumentLineItem)
        {
            ProjAdvancedJournalSourceDocumentLineItem projAdvancedJournalSourceDocumentLineItem = accDistSourceDocumentLineItem as ProjAdvancedJournalSourceDocumentLineItem;
            productQuantity = projAdvancedJournalSourceDocumentLineItem.parmQuantity();
        }

        //Maintain the minimum number of decimal places for the quantity proportion
        //for public sector and timesheet solution use Public sector macro
        int minimumProductQuantityDecimalPlaces = (isTimesheetQuantity || isConfigurationkeyEnabled(configurationKeyNum(PublicSector))) ? #MinimumProductQuantityDecimalPlacesPS : #MinimumProductQuantityDecimalPlaces;

        if (productQuantityDecimalPlaces < minimumProductQuantityDecimalPlaces)
        {
            productQuantityDecimalPlaces = minimumProductQuantityDecimalPlaces;
        }

        Factor productQuantityFactor = 0.1;

        if (_accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable)
        {
            allocationFactor = 1;
        }
        else
        {
            allocationFactor = _accountingDistribution.AllocationFactor;

            if (calculateAllocationFactor)
            {
                allocationFactor = ProjectAccountingDisTribution::getAllocationFactor(_accountingDistribution);
            }
        }

        real productAmount = allocationFactor * productQuantity;

        if (_accountingDistribution.TransactionCurrencyAmount == productAmount || allocationFactor == 1 ||
            ((accDistSourceDocumentLineItem is SourceDocumentLineItemITimesheets || 
               accDistSourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem || 
               accDistSourceDocumentLineItem is PurchOrderLineSourceDocumentLineItem ||
               accDistSourceDocumentLineItem is TrvExpTransSourceDocLineItem) &&
            allocationFactor <= 1))
        {
            productQuantityFactor = power(10, -productQuantityDecimalPlaces);
        }

        return round(productAmount, productQuantityFactor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceCurrency</Name>
				<Source><![CDATA[
    public static Common resolveReferenceCurrency(FormReferenceControl _formReferenceControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        Currency        currency;
        CurrencyCode    currencyCode;

        currencyCode = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(Currency, CurrencyCode), tableStr(Currency))).value();
        currency = Currency::find(currencyCode);

        return currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceProjCategory</Name>
				<Source><![CDATA[
    public static Common resolveReferenceProjCategory(FormReferenceControl _formReferenceControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        ProjCategory    projCategory;
        ProjCategoryId  categoryId;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        categoryId = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(ProjCategory, CategoryId), tableStr(ProjCategory))).value();

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            projCategory = ProjCategory::find(categoryId);
        }

        return projCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceProjFundingSource</Name>
				<Source><![CDATA[
    public static Common resolveReferenceProjFundingSource(FormReferenceControl _formReferenceControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            return ProjFundingSource::resolveReferenceByContractFSName(_formReferenceControl, ProjTable::findRecId(_projectAccountingDistribution.ProjTable).ProjInvoiceProjId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceProjLineProperty</Name>
				<Source><![CDATA[
    public static Common resolveReferenceProjLineProperty(FormReferenceControl _formReferenceControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        ProjLineProperty    projLineProperty;
        ProjLinePropertyId  linePropertyId;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        linePropertyId = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(ProjLineProperty, LinePropertyId), tableStr(ProjLineProperty))).value();

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            projLineProperty = ProjLineProperty::find(linePropertyId);
        }

        return projLineProperty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceProjTable</Name>
				<Source><![CDATA[
    public static Common resolveReferenceProjTable(FormReferenceControl _formReferenceControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        ProjTable   projTable;
        ProjId      projId;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        projId = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(ProjTable, ProjId), tableStr(ProjTable))).value();

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            projTable = ProjTable::find(projId);
        }

        return projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceSmmActivities</Name>
				<Source><![CDATA[
    public static Common resolveReferenceSmmActivities(FormReferenceControl _formReferenceControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        smmActivities       smmActivities;
        smmActivityNumber   activityNumber;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        activityNumber = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(smmActivities, ActivityNumber), tableStr(smmActivities))).value();

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            smmActivities = smmActivities::find(activityNumber);
        }

        return smmActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceTaxGroupHeading</Name>
				<Source><![CDATA[
    public static Common resolveReferenceTaxGroupHeading(FormReferenceControl _formReferenceControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        TaxGroupHeading taxGroupHeading;
        TaxGroup        taxGroup;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        taxGroup = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(TaxGroupHeading, TaxGroup), tableStr(TaxGroupHeading))).value();

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            taxGroupHeading = TaxGroupHeading::find(taxGroup);
        }

        return taxGroupHeading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceTaxItemGroupHeading</Name>
				<Source><![CDATA[
    public static Common resolveReferenceTaxItemGroupHeading(FormReferenceControl _formReferenceControl, AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        TaxItemGroupHeading taxItemGroupHeading;
        TaxItemGroup        taxItemGroup;

        if (!_accountingDistribution.AccountingLegalEntity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        taxItemGroup = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(TaxItemGroupHeading, TaxItemGroup), tableStr(TaxItemGroupHeading))).value();

        changecompany (CompanyInfo::findRecId(_accountingDistribution.AccountingLegalEntity).DataArea)
        {
            taxItemGroupHeading = TaxItemGroupHeading::find(taxItemGroup);
        }

        return taxItemGroupHeading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRate1</Name>
				<Source><![CDATA[
    private static ExchRate getExchangeRate1(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem, CurrencyCode _currencyId)
    {
        boolean projOpsEnableFixedRateAgreementsNonStockedFeature = FeatureStateProvider::IsFeatureEnabled(ProjOpsFixedRateAgreementsForNonStockedFeature::instance());
        ExchRate exchRate = _accountingDistribution.getExchangeRate1(_sourceDocumentLineItem);

        if (projOpsEnableFixedRateAgreementsNonStockedFeature)
        {
            ProjTable projTable;

            select firstonly ProjInvoiceProjId from projTable
                where projTable.RecId == _projectAccountingDistribution.ProjTable;
            
            if (projTable)
            {
                ExchRate fixedExchRate = ProjInvoiceCurrency::getFixedExchRate(projTable.ProjInvoiceProjId, _currencyId);

                // added this check to avoid overwriting exchrate as 0 when above line did not find the fixed rate mapping from the table.
                if (fixedExchRate)
                {
                    exchRate = fixedExchRate;
                }
            }
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultLedgerDimension</Name>
				<Source><![CDATA[
    private static void setDefaultLedgerDimension(AccountingDistribution _accountingDistribution)
    {
        SourceDocumentLine                      sourceDocumentLine;
        SourceDocumentLineItem                  sourceDocumentLineItem;
        AccountingDistributionRule              accountingDistributionRule;
        LedgerDimensionAllocationList           ledgerDimensionAllocationList;
        LedgerDimensionAllocationListEnumerator ledgerDimensionAllocationListEnumerator;
        LedgerDimensionAllocation               ledgerDimensionAllocation;
        SourceDocumentLineImplementation        sourceDocumentLineImplementation;
        PurchReqLine                            purchReqLine;
        PurchLine                               purchLine;
        VendInvoiceInfoLine                     vendInvoiceInfoLine;
        VendInvoiceInfoLine_Project             vendInvoiceInfoLine_Project;
        CustInvoiceLine                         custInvoiceLine;
        TrvExpTrans                             trvExpTrans;
        TrvRequisitionLine                      trvRequisitionLine;
        ProjId                                  projId;
        RefRecId                                projTable;

        sourceDocumentLine = SourceDocumentLine::find(_accountingDistribution.SourceDocumentLine);
        if (sourceDocumentLine)
        {
            ttsbegin;

            sourceDocumentLineImplementation = sourceDocumentLine.getSourceDocumentLineImplementation();
            switch (sourceDocumentLineImplementation.TableId)
            {
                case tableNum(PurchReqLine):
                    purchReqLine = sourceDocumentLineImplementation;
                    if (purchReqLine)
                    {
                        projId = purchReqLine.ProjId;
                        purchReqLine.selectForUpdate(true);
                        purchReqLine.ProjId = '';
                        purchReqLine.doUpdate();
                    }
                    break;
                case tableNum(PurchLine):
                    purchLine = sourceDocumentLineImplementation;
                    if (purchLine)
                    {
                        projId = purchLine.ProjId;
                        purchLine.selectForUpdate(true);
                        purchLine.ProjId = '';
                        purchLine.doUpdate();
                    }
                    break;
                case tableNum(VendInvoiceInfoLine):
                    vendInvoiceInfoLine = sourceDocumentLineImplementation;
                    if (vendInvoiceInfoLine)
                    {
                        if (vendInvoiceInfoLine.isNonPO())
                        {
                            vendInvoiceInfoLine_Project = VendInvoiceInfoLine_Project::findByVendInvoiceInfoLineRefRecId(vendInvoiceInfoLine.RecId, true);
                            if (vendInvoiceInfoLine_Project)
                            {
                                projId = vendInvoiceInfoLine_Project.ProjId;
                                vendInvoiceInfoLine_Project.ProjId = '';
                                vendInvoiceInfoLine_Project.doUpdate();
                            }
                        }
                        else
                        {
                            purchLine = vendInvoiceInfoLine.purchLine(true);
                            if (purchLine)
                            {
                                projId = purchLine.ProjId;
                                purchLine.ProjId = '';
                                purchLine.doUpdate();
                            }
                        }
                    }
                    break;
                case tableNum(CustInvoiceLine):
                    custInvoiceLine = sourceDocumentLineImplementation;
                    if (custInvoiceLine)
                    {
                        projId = custInvoiceLine.ProjId;
                        custInvoiceLine.selectForUpdate(true);
                        custInvoiceLine.ProjId = '';
                        custInvoiceLine.doUpdate();
                    }
                    break;
                case tableNum(TrvExpTrans):
                    trvExpTrans = sourceDocumentLineImplementation;
                    if (trvExpTrans)
                    {
                        projId = trvExpTrans.ProjId;
                        trvExpTrans.selectForUpdate(true);
                        trvExpTrans.ProjId = '';
                        trvExpTrans.doUpdate();
                    }
                    break;
                case tableNum(TrvRequisitionLine):
                    trvRequisitionLine = sourceDocumentLineImplementation;
                    if (trvRequisitionLine)
                    {
                        projTable = trvRequisitionLine.ProjTable;
                        trvRequisitionLine.selectForUpdate(true);
                        trvRequisitionLine.ProjTable = 0;
                        trvRequisitionLine.doUpdate();
                    }
                    break;
            }

            sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(sourceDocumentLine);
            accountingDistributionRule = AccountingDistributionRule::newRule(sourceDocumentLineItem, _accountingDistribution.MonetaryAmount);
            ledgerDimensionAllocationList = accountingDistributionRule.parmLedgerDimensionAllocList();
            if (ledgerDimensionAllocationList)
            {
                ledgerDimensionAllocationListEnumerator = ledgerDimensionAllocationList.getEnumerator();
                if (ledgerDimensionAllocationListEnumerator.moveNext())
                {
                    ledgerDimensionAllocation = ledgerDimensionAllocationListEnumerator.current();
                    _accountingDistribution.LedgerDimension = ledgerDimensionAllocation.parmLedgerDimension();
                }
            }

            switch (sourceDocumentLineImplementation.TableId)
            {
                case tableNum(PurchReqLine):
                    if (purchReqLine)
                    {
                        purchReqLine.ProjId = projId;
                        purchReqLine.doUpdate();
                    }
                    break;
                case tableNum(PurchLine):
                    if (purchLine)
                    {
                        purchLine.ProjId = projId;
                        purchLine.doUpdate();
                    }
                    break;
                case tableNum(VendInvoiceInfoLine):
                    if (vendInvoiceInfoLine_Project)
                    {
                        vendInvoiceInfoLine_Project.ProjId = projId;
                        vendInvoiceInfoLine_Project.doUpdate();
                    }
                    else if (purchLine)
                    {
                        purchLine.ProjId = projId;
                        purchLine.doUpdate();
                    }
                    break;
                case tableNum(CustInvoiceLine):
                    if (custInvoiceLine)
                    {
                        custInvoiceLine.ProjId = projId;
                        custInvoiceLine.doUpdate();
                    }
                    break;
                case tableNum(TrvExpTrans):
                    if (trvExpTrans)
                    {
                        trvExpTrans.ProjId = projId;
                        trvExpTrans.doUpdate();
                    }
                    break;
                case tableNum(TrvRequisitionLine):
                    if (trvRequisitionLine)
                    {
                        trvRequisitionLine.ProjTable = projTable;
                        trvRequisitionLine.doUpdate();
                    }
                    break;
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTransactionCurrencyCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total currency cost amount for the transaction.
    /// </summary>
    /// <param name = "_parentAccountingDistribution">An <c>AccountingDistribution</c> record.</param>
    /// <param name = "_sourceDocumentLineItem">An instance of the <c>SourceDocumentLineItem</c> class; optional</param>
    /// <param name = "_currency">The currency code of the transaction; optional</param>
    /// <returns>The total currency cost amount for the transaction.</returns>
    public static AmountCur totalTransactionCurrencyCostAmount(AccountingDistribution _parentAccountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem = null, CurrencyCode _currency = null)
    {
        List                            accountingDistributions;
        ListEnumerator                  listEnumerator;
        AccountingDistribution          childAccountingDistribution;
        ProjectAccountingDistribution   childProjectAccountingDistribution;
        Stack                           stack;
        AccountingDistribution          currentAccountingDistribution;
        SourceDocumentLineItem          sourceDocumentLineItem;
        AmountCur                       transactionCurrencyCostAmount;

        if (_parentAccountingDistribution)
        {
            if (_sourceDocumentLineItem)
            {
                sourceDocumentLineItem = _sourceDocumentLineItem;
            }
            else
            {
                sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_parentAccountingDistribution.SourceDocumentLine);
            }
                        
            switch (ProjectSourceDocumentLineItemHelper::projTransType(sourceDocumentLineItem))
            {
                case ProjTransType::Cost:
                case ProjTransType::Item:
                case ProjTransType::Hour:
                    accountingDistributions = new List(Types::Record);

                    stack = new Stack();
                    stack.push([_parentAccountingDistribution]);

                    while (stack.qty())
                    {
                        [currentAccountingDistribution] = stack.pop();

                        accountingDistributions.addEnd(currentAccountingDistribution);

                        while select childAccountingDistribution
                                where childAccountingDistribution.ParentDistribution == currentAccountingDistribution.RecId
                            exists join childProjectAccountingDistribution
                                where childProjectAccountingDistribution.AccountingDistribution == childAccountingDistribution.RecId
                        {
                            stack.push([childAccountingDistribution]);
                        }
                    }
                    
                    listEnumerator = accountingDistributions.getEnumerator();
                    while (listEnumerator.moveNext())
                    {
                        currentAccountingDistribution = listEnumerator.current();

                        if (currentAccountingDistribution.MonetaryAmount != MonetaryAmount::PriceVariance &&
                            currentAccountingDistribution.MonetaryAmount != MonetaryAmount::QuantityVariance &&
                            currentAccountingDistribution.MonetaryAmount != MonetaryAmount::TaxNonRecoverable &&
                            currentAccountingDistribution.MonetaryAmount != MonetaryAmount::TaxNonRecoverableVariance &&
                            currentAccountingDistribution.MonetaryAmount != MonetaryAmount::PriceAdjustment &&
                            currentAccountingDistribution.MonetaryAmount != MonetaryAmount::Discount)
                        {
                            AmountCur costAmount = ProjectSourceDocumentLineItemHelper::getAmountWithDiscount(sourceDocumentLineItem, currentAccountingDistribution.TransactionCurrencyAmount);

                            if (_currency)
                            {
                                transactionCurrencyCostAmount += CurrencyExchangeHelper::amountCur2MST(costAmount, _currency);
                            }
                            else
                            {
                                transactionCurrencyCostAmount += costAmount;
                            }
                        }
                    }
                    break;
                case ProjTransType::Revenue:
                    transactionCurrencyCostAmount = 0;
                    break;
                default:
                    throw error(strFmt("@SYS22828", funcName()));
            }
        }

        return transactionCurrencyCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionCostCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction cost currency of the accounting distribution based on project source document
    /// line type.
    /// </summary>
    /// <param name="_accountingDistribution">
    /// An <c>AccountingDistribution</c> record.
    /// </param>
    /// <param name="_projectAccountingDistribution">
    /// A <c>ProjectAccountingDistribution</c> record.
    /// </param>
    /// <param name="_sourceDocumentLineItem">
    /// An instance of the <c>SourceDocumentLineItem</c> class; optional
    /// </param>
    /// <returns>
    /// The transaction cost currency of the accounting distribution based on project source document line
    /// type.
    /// </returns>
    public static CurrencyCode transactionCostCurrency(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem = null)
    {
        SourceDocumentLineItem  sourceDocumentLineItem;
        CurrencyCode            transactionCostCurrency;

        if (_sourceDocumentLineItem)
        {
            sourceDocumentLineItem = _sourceDocumentLineItem;
        }
        else
        {
            sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_accountingDistribution.SourceDocumentLine);
        }

        switch (ProjectSourceDocumentLineItemHelper::projTransType(sourceDocumentLineItem))
        {
            case ProjTransType::Cost:
            case ProjTransType::Item:
            case ProjTransType::Revenue:
                transactionCostCurrency = _accountingDistribution.TransactionCurrency;
                break;

            case ProjTransType::Hour:
                //  this needs to be changed, when the Cost and Item logic block changes @ sys layer
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                    || isConfigurationkeyEnabled(configurationKeyNum(Project))
                    || isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration))
                )
                {
                    transactionCostCurrency = _accountingDistribution.TransactionCurrency;
                    break;
                }
            default:
                throw error(strFmt("@SYS22828", funcName()));
        }

        return transactionCostCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    private static boolean shouldUpdateTransactionCurrencyAmount(AccountingDistribution _accountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem)
    {
        boolean updateTransactionCurrencyAmt = false;

        if (ProjectCommitmentFacade::includeNonRecoverableTax(_accountingDistribution, _sourceDocumentLineItem) 
            || _accountingDistribution.MonetaryAmount != MonetaryAmount::TaxNonRecoverable
            || (!(_sourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem || _sourceDocumentLineItem is PurchOrderLineSourceDocumentLineItem)))
        {
            updateTransactionCurrencyAmt = true;
        }
            
        return updateTransactionCurrencyAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionCurrencyCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction cost currency amount of the accounting distribution based on project source
    /// document line type.
    /// </summary>
    /// <param name="_accountingDistribution">
    /// An <c>AccountingDistribution</c> record.
    /// </param>
    /// <param name="_projectAccountingDistribution">
    /// A <c>ProjectAccountingDistribution</c> record.
    /// </param>
    /// <param name="_sourceDocumentLineItem">
    /// An instance of the <c>SourceDocumentLineItem</c> class; optional
    /// </param>
    /// <returns>
    /// The transaction cost currency amount of the accounting distribution based on project source
    /// document line type.
    /// </returns>
    public static AmountCur transactionCurrencyCostAmount(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem = null)
    {
        SourceDocumentLineItem  sourceDocumentLineItem;
        AmountCur               transactionCurrencyCostAmount;

        if (_sourceDocumentLineItem)
        {
            sourceDocumentLineItem = _sourceDocumentLineItem;
        }
        else
        {
            sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_accountingDistribution.SourceDocumentLine);
        }

        switch (ProjectSourceDocumentLineItemHelper::projTransType(sourceDocumentLineItem))
        {
            case ProjTransType::Cost:
            case ProjTransType::Item:
                if (ProjectAccountingDistribution::shouldUpdateTransactionCurrencyAmount(_accountingDistribution, sourceDocumentLineItem))
                {
                    if (FeatureStateProvider::isFeatureEnabled(ProjEnableStreamlineCostAndSalesPriceCalcFeature::instance()))
                    {
                        transactionCurrencyCostAmount = _accountingDistribution.TransactionCurrencyAmount;
                    }
                    else
                    {
                        boolean skipTaxVariance = ProjectAccountingDistribution::shouldSkipTaxVariance(_accountingDistribution);
                    
                        if (!skipTaxVariance)
                        {
                            transactionCurrencyCostAmount = ProjectSourceDocumentLineItemHelper::getAmountWithDiscount(sourceDocumentLineItem, _accountingDistribution.TransactionCurrencyAmount);
                        }
                    }
                }
                break;

            case ProjTransType::Revenue:
                transactionCurrencyCostAmount = 0;
                break;
            case ProjTransType::Hour:
                //  this needs to be changed, when the Cost and Item logic block changes @ sys layer
                if ((isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                    || isConfigurationkeyEnabled(configurationKeyNum(Project))
                    || isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration))))
                {
                    if (ProjectAccountingDistribution::shouldUpdateTransactionCurrencyAmount(_accountingDistribution, sourceDocumentLineItem))
                    {
                        boolean skipTaxVariance = ProjectAccountingDistribution::shouldSkipTaxVariance(_accountingDistribution);
                    
                        if (!skipTaxVariance)
                        {
                            transactionCurrencyCostAmount = _accountingDistribution.TransactionCurrencyAmount;
                        }
                    }
                    break;
                }
            default:
                throw error(strFmt("@SYS22828", funcName()));
        }

        // For vendor retention sceanrio, cost price will be retained.
        transactionCurrencyCostAmount = ProjectAccountingDistribution::calcTransactionAmountForProjectVendorInvoiceRetention(sourceDocumentLineItem, _accountingDistribution, transactionCurrencyCostAmount);

        return transactionCurrencyCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipTaxVariance</Name>
				<Source><![CDATA[
    private static boolean shouldSkipTaxVariance(AccountingDistribution _accountingDistribution)
    {
        boolean skipTaxVariance;
        if (ProjVendorInvoiceRetentionCalcFeatureHelper::isTransitionFlightEnabled())
        {
            if (_accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverableVariance)
            {
                AccountingDistribution parentAccountingDistribution = AccountingDistribution::find(_accountingDistribution.ParentDistribution);
                if (parentAccountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable)
                {
                    AccountingDistribution grandParentAccountingDistribution = AccountingDistribution::find(parentAccountingDistribution.ParentDistribution);
                    SourceDocumentLineItem grandParentSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(SourceDocumentLine::find(grandParentAccountingDistribution.SourceDocumentLine));

                    if (grandParentSourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem
                        && !FeatureStateProvider::isFeatureEnabled(ProjEnableStreamlineCostAndSalesPriceCalcFeature::instance())
                        && ProjVendorInvoiceRetentionCalcFeatureHelper::shouldProcessWithFeatureEnabledBySouceDocumentLineItem(
                            ProjVendorInvoiceRetentionCalcFeatureHelper::isFeatureEnabled(),
                            grandParentSourceDocumentLineItem))
                    {
                        skipTaxVariance = true;
                    }
                }
            }
        }

        return skipTaxVariance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionCurrencySalesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction sales currency amount of the accounting distribution based on project source
    /// document line type.
    /// </summary>
    /// <param name="_accountingDistribution">
    /// An <c>AccountingDistribution</c> record.
    /// </param>
    /// <param name="_projectAccountingDistribution">
    /// S<c>ProjectAccountingDistribution</c> record.
    /// </param>
    /// <param name="_sourceDocumentLineItem">
    /// An instance of the <c>SourceDocumentLineItem</c> class; optional
    /// </param>
    /// <returns>
    /// The transaction sales currency amount of the accounting distribution based on project source
    /// document line type.
    /// </returns>
    public static AmountCur transactionCurrencySalesAmount(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem = null)
    {
        SourceDocumentLineItem          sourceDocumentLineItem;
        AmountCur                       transactionCurrencySalesAmount;

        if (_sourceDocumentLineItem)
        {
            sourceDocumentLineItem = _sourceDocumentLineItem;
        }
        else
        {
            sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_accountingDistribution.SourceDocumentLine);
        }

        switch (ProjectSourceDocumentLineItemHelper::projTransType(sourceDocumentLineItem))
        {
            case ProjTransType::Cost:
            case ProjTransType::Item:
                 
                if (ProjectAccountingDistribution::shouldUpdateTransactionCurrencyAmount(_accountingDistribution, sourceDocumentLineItem))
                 {
                     boolean skipTaxVariance = ProjectAccountingDistribution::shouldSkipTaxVariance(_accountingDistribution);

                     if (!skipTaxVariance)
                     {
                        transactionCurrencySalesAmount = _projectAccountingDistribution.TransactionCurrencyAmount;
                     }
                 }
                break;
            case ProjTransType::Revenue:
                 
                if (ProjectAccountingDistribution::shouldUpdateTransactionCurrencyAmount(_accountingDistribution, sourceDocumentLineItem))
                 {
                    transactionCurrencySalesAmount = _accountingDistribution.TransactionCurrencyAmount;
                 }
                break;
            case ProjTransType::Hour:
                //  this needs to be changed, when the Cost and Item logic block changes @ sys layer
                if ((isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                    || isConfigurationkeyEnabled(configurationKeyNum(Project))
                    || isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration))))
                {
                    if (ProjectAccountingDistribution::shouldUpdateTransactionCurrencyAmount(_accountingDistribution, sourceDocumentLineItem))
                    {
                        boolean skipTaxVariance = ProjectAccountingDistribution::shouldSkipTaxVariance(_accountingDistribution);

                        if (!skipTaxVariance)
                        {
                            transactionCurrencySalesAmount = _projectAccountingDistribution.TransactionCurrencyAmount;
                            if (sourceDocumentLineItem is SourceDocumentLineItemIProduct &&
                                ProjParameters::find().DefaultCostPriceAsSalesPrice &&
                                (
                                _accountingDistribution.MonetaryAmount == MonetaryAmount::ExtendedPrice ||
                                _accountingDistribution.MonetaryAmount == MonetaryAmount::PayrollCost ||
                                _accountingDistribution.MonetaryAmount == MonetaryAmount::PayrollLiability))
                            {
                                if (ProjectSourceDocumentLineItemHelper::verifyCostPriceEqualsSalesPrice(sourceDocumentLineItem))
                                {
                                    transactionCurrencySalesAmount = ProjectAccountingDistribution::transTurnOver(sourceDocumentLineItem, _accountingDistribution);
                                }
                            }
                        }
                    }
                    break;
                }
            default:
                throw error(strFmt("@SYS22828", funcName()));
        }

        return transactionCurrencySalesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionCurrencySalesAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the transaction sales currency amount of the accounting distribution based on project source document line type.
    /// </summary>
    /// <param name="_accountingDistribution">
    /// The <c>AccountingDistribution</c> record.
    /// </param>
    /// <param name="_projectAccountingDistribution">
    /// The <c>ProjectAccountingDistribution</c> record.
    /// </param>
    /// <param name="_sourceDocumentLineItem">
    /// An instance of the <c>SourceDocumentLineItem</c> class; optional
    /// </param>
    /// <returns>
    /// Transaction sales currency amount of the accounting distribution based on project source document line type.
    /// </returns>
    public static AmountCur transactionCurrencySalesAmt(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem = null)
    {
        SourceDocumentLineItem          sourceDocumentLineItem;
        AmountCur                       transactionCurrencySalesAmount;

        if (_sourceDocumentLineItem)
        {
            sourceDocumentLineItem = _sourceDocumentLineItem;
        }
        else
        {
            sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_accountingDistribution.SourceDocumentLine);
        }

        switch (ProjectSourceDocumentLineItemHelper::projTransType(sourceDocumentLineItem))
        {
            case ProjTransType::Cost:
            case ProjTransType::Item:
            case ProjTransType::Hour:
                transactionCurrencySalesAmount = _projectAccountingDistribution.TransactionCurrencyAmount;

                if (_accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverableVariance)
                {
                    // No sales amount will be calculated for tax variance amount.
                    transactionCurrencySalesAmount = 0;
                }
                else if (sourceDocumentLineItem is SourceDocumentLineItemIProduct)
                {
                    if (ProjectSourceDocumentLineItemHelper::verifyCostPriceEqualsSalesPrice(sourceDocumentLineItem))
                    {
                        boolean skipSettingTransactionCurrencySalesAmount;
                        boolean isVendorInvoiceLine = sourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem ? true : false;
                        if (isVendorInvoiceLine
                            && ProjVendorInvoiceRetentionCalcFeatureHelper::isTransitionFlightEnabled())
                        {
                            VendorInvoiceLineSourceDocLineItem vendorInvoiceLineSourceDocLineItem = sourceDocumentLineItem as VendorInvoiceLineSourceDocLineItem;
                            PurchLine purchLine = vendorInvoiceLineSourceDocLineItem.parmPurchLine();

                            if (purchLine
                                && purchLine.PSARetainScheduleId != ''
                                && vendorInvoiceLineSourceDocLineItem.parmLotId() // parmLotId() holds the value of InventTransId
                                && ProjVendorInvoiceRetentionCalcFeatureHelper::shouldProcessWithFeatureEnabled(
                                    ProjVendorInvoiceRetentionCalcFeatureHelper::isFeatureEnabled(),
                                    vendorInvoiceLineSourceDocLineItem.parmLotId())
                                && vendorInvoiceLineSourceDocLineItem.isProjRetentionRelease())
                            {
                                // Skip setting transaction currency sales amount if this is purchase order 
                                // vendor retnetion release only transaction
                                skipSettingTransactionCurrencySalesAmount = true;
                            }
                        }

                        if (!skipSettingTransactionCurrencySalesAmount)
                        {
                            // For cost price = sales price scenario, set the sales amount based on accounting distribution amount.
                            transactionCurrencySalesAmount = ProjectAccountingDistribution::transTurnOver(sourceDocumentLineItem, _accountingDistribution);
                        }

                        if (transactionCurrencySalesAmount != 0
                            && sourceDocumentLineItem
                            && isVendorInvoiceLine
                            && _accountingDistribution.MonetaryAmount == MonetaryAmount::ExtendedPrice)
                        {
                            // To apply the discount to cost price while processing project vendor invoice in order to
                            // update committed amount correctly on funding limit.
                            VendInvoiceInfoLine vendInvoiceInfoLine;
                            VendInvoiceInfoLine_Project projVendInvoiceLine;

                            select firstonly PurchPrice, LineDisc, LinePercent from vendInvoiceInfoLine
                                where vendInvoiceInfoLine.SourceDocumentLine == _accountingDistribution.SourceDocumentLine
                            join ProjSalesCurrencyId from projVendInvoiceLine
                                where projVendInvoiceLine.VendInvoiceInfoLineRefRecId == vendInvoiceInfoLine.RecId;

                            if (vendInvoiceInfoLine && vendInvoiceInfoLine.PurchPrice && (vendInvoiceInfoLine.LineDisc || vendInvoiceInfoLine.LinePercent)) 
                            {
                                transactionCurrencySalesAmount = ProjectSourceDocumentLineItemHelper::applyDiscountByRatio(transactionCurrencySalesAmount, vendInvoiceInfoLine.PurchPrice, vendInvoiceInfoLine.LineDisc, vendInvoiceInfoLine.LinePercent);
                                transactionCurrencySalesAmount = CurrencyExchangeHelper::price(transactionCurrencySalesAmount, projVendInvoiceLine.ProjSalesCurrencyId);
                            }
                        }
                    }
                    else if (_accountingDistribution.TransactionCurrencyAmount < 0 && transactionCurrencySalesAmount > 0)
                    {
                        // If accounting distribution amount is smaller than 0, then set the sales amount to negative as well.
                        transactionCurrencySalesAmount = -transactionCurrencySalesAmount;
                    }
                }
                break;

            case ProjTransType::Revenue:
                transactionCurrencySalesAmount = _accountingDistribution.TransactionCurrencyAmount;
                break;

            default:
                throw error(strFmt("@SYS22828", funcName()));
        }

        return transactionCurrencySalesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionSalesCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction sales currency of the accounting distribution based on project source document
    /// line type.
    /// </summary>
    /// <param name="_accountingDistribution">
    /// An <c>AccountingDistribution</c> record.
    /// </param>
    /// <param name="_projectAccountingDistribution">
    /// The <c>ProjectAccountingDistribution</c> record.
    /// </param>
    /// <param name="_sourceDocumentLineItem">
    /// An instance of the <c>SourceDocumentLineItem</c> class; optional
    /// </param>
    /// <returns>
    /// The transaction sales currency of the accounting distribution based on project source document line
    /// type.
    /// </returns>
    public static CurrencyCode transactionSalesCurrency(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution, SourceDocumentLineItem _sourceDocumentLineItem = null)
    {
        SourceDocumentLineItem          sourceDocumentLineItem;
        CurrencyCode                    transactionSalesCurrency;
        SourceDocumentLineItemIProduct  sourceDocumentLineItemIProduct;

        if (_sourceDocumentLineItem)
        {
            sourceDocumentLineItem = _sourceDocumentLineItem;
        }
        else
        {
            sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_accountingDistribution.SourceDocumentLine);
        }

        switch (ProjectSourceDocumentLineItemHelper::projTransType(sourceDocumentLineItem))
        {
            case ProjTransType::Cost:
            case ProjTransType::Item:
                transactionSalesCurrency = Currency::findRecId(_projectAccountingDistribution.Currency).CurrencyCode;
                if (sourceDocumentLineItem is SourceDocumentLineItemIProduct &&
                    ProjParameters::find().DefaultCostPriceAsSalesPrice && !transactionSalesCurrency)
                {
                    sourceDocumentLineItemIProduct = sourceDocumentLineItem as SourceDocumentLineItemIProduct;
                    if (!sourceDocumentLineItemIProduct.parmItemId())
                    {
                        transactionSalesCurrency = _accountingDistribution.TransactionCurrency;
                    }
                }
                break;

            case ProjTransType::Revenue:
                transactionSalesCurrency = _accountingDistribution.TransactionCurrency;
                break;
            case ProjTransType::Hour:

                //  this needs to be changed, when the Cost and Item logic block changes @ sys layer
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                    || isConfigurationkeyEnabled(configurationKeyNum(Project))
                    || isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration))
                )
                {
                    transactionSalesCurrency = Currency::findRecId(_projectAccountingDistribution.Currency).CurrencyCode;
                    if (sourceDocumentLineItem is SourceDocumentLineItemIProduct &&
                        ProjParameters::find().DefaultCostPriceAsSalesPrice && !transactionSalesCurrency)
                    {
                        sourceDocumentLineItemIProduct = sourceDocumentLineItem as SourceDocumentLineItemIProduct;
                        if (!sourceDocumentLineItemIProduct.parmItemId())
                        {
                            transactionSalesCurrency = _accountingDistribution.TransactionCurrency;
                        }
                    }
                    break;
                }
            default:
                throw error(strFmt("@SYS22828", funcName()));
        }

        return transactionSalesCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeProjectAccountingDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persist the <c>ProjectAccountingDistribution</c> record.
    /// </summary>
    /// <param name="_accountingDistribution">
    /// A record of the <c>AccountingDistribution</c> table.
    /// </param>
    /// <param name="_projectAccountingDistribution">
    /// A record of the <c>ProjectAccountingDistribution</c> table.
    /// </param>
    public static void writeProjectAccountingDistribution(AccountingDistribution _accountingDistribution, ProjectAccountingDistribution _projectAccountingDistribution)
    {
        boolean skipUpdateFundingSource;

        if (_projectAccountingDistribution && !_projectAccountingDistribution.selectForUpdate())
        {
            _projectAccountingDistribution.selectForUpdate(true);
        }

        if (_projectAccountingDistribution.ProjTable &&
            _accountingDistribution)
        {
            if (_projectAccountingDistribution)
            {
                if (_projectAccountingDistribution.AccountingDistribution != _accountingDistribution.RecId)
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
            }
            else
            {
                _projectAccountingDistribution.AccountingDistribution = _accountingDistribution.RecId;
            }

            if (!_projectAccountingDistribution.validateWrite())
            {
                throw Exception::Error;
            }

            if (_projectAccountingDistribution)
            {
                _projectAccountingDistribution.update();
            }
            else
            {
                if ((ProjFundingLimitTrackingManager::isPurchaseOrderAccDistribution(_accountingDistribution) ||
                    ProjFundingLimitTrackingManager::isVendorInvoiceActiveDocLine(_accountingDistribution.SourceDocumentLine)))
                {
                    skipUpdateFundingSource = true;
                }

                _projectAccountingDistribution.insert(skipUpdateFundingSource);
            }
        }
        else
        {
            if (_projectAccountingDistribution)
            {
                _projectAccountingDistribution.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AccountingDistribution</Name>
				<Source><![CDATA[
    public AccountingDistribution AccountingDistribution(AccountingDistribution _relatedTable = null)
    {
        if (prmIsDefault(_relatedTable))
        {
            return this.setLink('AccountingDistribution');
        }
        else
        {
            return this.setLink('AccountingDistribution', _relatedTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentLineItemList</Name>
				<Source><![CDATA[
    public static SourceDocumentLineItemList getSourceDocumentLineItemList(RefRecId _sourceDocumentHeader)
    {
        Query                               query;
        QueryBuildDataSource                retrieveSDLQbds;
        QueryRun                            queryRun;
        SourceDocumentLine                  sourceDocumentLine;
        SourceDocumentLineItem              sourceDocumentLineItem;
        SourceDocumentLineItemList          sourceDocumentLineItemList;
        Set                                 lineAccountingStatus = new Set(Types::Enum);

        lineAccountingStatus.add(SourceDocumentLineAccountingStatus::Draft);
        lineAccountingStatus.add(SourceDocumentLineAccountingStatus::PartlyDistributed);
        lineAccountingStatus.add(SourceDocumentLineAccountingStatus::FullyDistributed);

        sourceDocumentLineItemList = SourceDocumentLineItemList::construct();

        query = new Query();
        retrieveSDLQbds = query.addDataSource(tableNum(SourceDocumentLine));
        retrieveSDLQbds.addRange(fieldNum(SourceDocumentLine, SourceDocumentHeader)).value(queryValue(_sourceDocumentHeader));
        retrieveSDLQbds.addRange(fieldNum(SourceDocumentLine, ParentSourceDocumentLine)).value(queryValue(0));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            sourceDocumentLine = queryRun.get(tableNum(SourceDocumentLine));

            if (lineAccountingStatus.in(sourceDocumentLine.AccountingStatus) ||
               sourceDocumentLine.existChildWithSpecificAccountingStatus(lineAccountingStatus))
            {
                sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(sourceDocumentLine);
                sourceDocumentLineItemList.addEnd(sourceDocumentLineItem);
            }
        }

        return sourceDocumentLineItemList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTransactionAmountForProjectVendorInvoiceRetention</Name>
				<Source><![CDATA[
    private static AmountCur calcTransactionAmountForProjectVendorInvoiceRetention(SourceDocumentLineItem _sourceDocumentLineItem, AccountingDistribution _accountingDistribution, AmountCur _transAmount)
    {
        AmountCur transAmount = _transAmount;

        if (_sourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem)
        {
            AccountingDistribution purchLineAccountingDistribution = AccountingDistribution::find(_accountingDistribution.ReferenceDistribution);
            if (!purchLineAccountingDistribution && _accountingDistribution.MonetaryAmount == MonetaryAmount::PriceVariance && ProjCostPriceCalcWithVendorRetentionFlight::instance().isEnabled())
            {
                AccountingDistribution vendorInvoiceAccountingDistribution = AccountingDistribution::find(_accountingDistribution.ParentDistribution);
                purchLineAccountingDistribution = AccountingDistribution::find(vendorInvoiceAccountingDistribution.ReferenceDistribution);
            }
            if (SourceDocumentHeader::find(purchLineAccountingDistribution.SourceDocumentHeader).SourceRelationType == tableNum(PurchTable) &&
                SourceDocumentLine::find(purchLineAccountingDistribution.SourceDocumentLine).SourceRelationType == tableNum(PurchLine))
            {
                // If this invoice has vendor payment retention terms, then calculate the cost amount accordingly.
                VendorInvoiceLineSourceDocLineItem vendorInvoiceLineSourceDocLineItem = _sourceDocumentLineItem as VendorInvoiceLineSourceDocLineItem;
                boolean vendorInvoiceRetentionCalcFeature = ProjVendorInvoiceRetentionCalcFeatureHelper::isFeatureEnabled();
                // Calculate the amount if vendor retention cost amount calculation feature is disabled.
                if (!ProjVendorInvoiceRetentionCalcFeatureHelper::shouldProcessWithFeatureEnabledBySouceDocumentLineItem(
                            vendorInvoiceRetentionCalcFeature,
                            vendorInvoiceLineSourceDocLineItem))
                {
                    transAmount = vendorInvoiceLineSourceDocLineItem.calcTransactionAmountForProjectVendorInvoiceRetention(_accountingDistribution, transAmount);
                }
            }
        }

        return transAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocationFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get allocation factor.
    /// </summary>
    /// <param name = "_accountingDistribution">Accounting distribution record buffer.</param>
    /// <returns>Allocation factor.</returns>
    /// <remarks>
    /// When the amount is larger than 5 digits, then allocation factor will not be accurate as allocation factor
    /// is being stored in <c>AccountingDistribution</c> table with just 6 decimal places. This method can be
    /// used to retrieve the precision by the transaction currency amount which share by the same source document line.
    /// </remarks>
    private static AllocationFactor getAllocationFactor(AccountingDistribution _accountingDistribution)
    {
        AllocationFactor allocationFactor = _accountingDistribution.AllocationFactor;

        if (_accountingDistribution.TransactionCurrencyAmount && _accountingDistribution.AllocationFactor != 1)
        {
            AccountingDistribution accDist;
            select sum(TransactionCurrencyAmount) from accDist
                where accDist.SourceDocumentLine == _accountingDistribution.SourceDocumentLine &&
                    accDist.MonetaryAmount == _accountingDistribution.MonetaryAmount;

            if (accDist.TransactionCurrencyAmount)
            {
                allocationFactor = _accountingDistribution.TransactionCurrencyAmount / accDist.TransactionCurrencyAmount;
            }
        }

        return allocationFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds transaction currency amount to the currency suppported precision.
    /// </summary>
    private void roundTransactionCurrencyAmount()
    {
        this.TransactionCurrencyAmount = CurrencyExchange::round(this.TransactionCurrencyAmount, Currency::findRecId(this.Currency).CurrencyCode);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS320350</DeveloperDocumentation>
	<Label>@SYS315351</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>AccountingDistribution</TitleField1>
	<TitleField2>RecId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>ProjectManagementAndAccounting</Modules>
	<ReplacementKey>AccountingDistributionIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>smmActivities</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLineProperty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountingDistribution</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FundingSource</Name>
			<Label>@SYS134468</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjFundingSource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>smmActivities</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLineProperty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjCostTransCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCostTransSale</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjItemTransCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjItemTransSale</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjRevenueTransSale</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupHeading</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupHeading</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS80400</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountingDistribution</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistribution</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Currency</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS56480</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjCategory</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS50039</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjCostTransCost</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjCostTransSale</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjEmplTransCost</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjEmplTransSale</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjFundingSource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjFundingSourceRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjItemTransCost</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjItemTransSale</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjLineProperty</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS50026</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjRevenueTransSale</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS110827</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>smmActivities</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS81290</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxGroupHeading</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS21919</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxItemGroupHeading</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS21932</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransactionCurrencyAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS13754</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransactionCurrencyPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceCur</ExtendedDataType>
			<Label>@SYS5755</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountingDistributionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountingDistribution</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjCategoryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjCategory</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjLinePropertyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjLineProperty</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CurrencyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Currency</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxGroupHeadingIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxGroupHeading</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxItemGroupHeadingIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxItemGroupHeading</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjItemTransCostIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjItemTransCost</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>smmActivitiesIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjFundingSource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>smmActivitiesIdx1</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>smmActivities</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistribution</Name>
			<Cardinality>ZeroOne</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>AccountingDistribution</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AccountingDistribution</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AccountingDistribution_ProjectAccountingDistribution</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistribution</Name>
					<Field>AccountingDistribution</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Currency_ProjectAccountingDistribution</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<Field>Currency</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjCategory_ProjectAccountingDistribution</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategory</Name>
					<Field>ProjCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCostTransCost</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCostTransCost</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCostTransCost</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjCostTransCost_ProjectAccountingDistribution</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCostTransCost</Name>
					<Field>ProjCostTransCost</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCostTransSale</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCostTransSale</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCostTransSale</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjCostTransSale_ProjectAccountingDistribution</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCostTransSale</Name>
					<Field>ProjCostTransSale</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjEmplTransCost</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjEmplTransCost</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjEmplTransCost</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjEmplTransCost_ProjectAccountingDistribution</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjEmplTransCost</Name>
					<Field>ProjEmplTransCost</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjEmplTransSale</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjEmplTransSale</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjEmplTransSale</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjEmplTransSale_ProjectAccountingDistribution</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjEmplTransSale</Name>
					<Field>ProjEmplTransSale</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjFundingSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjFundingSource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingSource_ProjectAccountingDistribution</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjFundingSource</Name>
					<Field>ProjFundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjItemTransCost</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjItemTransCost</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjItemTransCost</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjItemTransCost_ProjectAccountingDistribution</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjItemTransCost</Name>
					<Field>ProjItemTransCost</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjItemTransSale</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjItemTransSale</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjItemTransSale</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjItemTransSale_ProjectAccountingDistribution</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjItemTransSale</Name>
					<Field>ProjItemTransSale</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjLineProperty</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjLineProperty_ProjectAccountingDistribution</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLineProperty</Name>
					<Field>ProjLineProperty</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjRevenueTransSale</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjRevenueTransSale</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjRevenueTransSale</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjRevenueTransSale_ProjectAccountingDistribution</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjRevenueTransSale</Name>
					<Field>ProjRevenueTransSale</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjTable_ProjectAccountingDistribution</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTable</Name>
					<Field>ProjTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>smmActivities</Name>
					<Field>smmActivities</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxGroupHeading_ProjectAccountingDistribution</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupHeading</Name>
					<Field>TaxGroupHeading</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxItemGroupHeading_ProjectAccountingDistribution</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupHeading</Name>
					<Field>TaxItemGroupHeading</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>