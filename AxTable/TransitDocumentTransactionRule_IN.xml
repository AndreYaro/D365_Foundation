<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransitDocumentTransactionRule_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TransitDocumentTransactionRule_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RecId _recId)
    {
        if (!TransitDocumentTransactionRule_IN::exist(_recId))
        {
            return checkFailed(strFmt(TransitDocumentTransactionRule_IN::txtNotExist(), _recId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines a new transit document relation.
    /// </summary>
    /// <param name="_transType">
    /// Table ID of the transaction.
    /// </param>
    /// <param name="_documentType">
    /// <c>TransitDocumentType_IN</c> record for the transit document type.
    /// </param>
    /// <param name="_transitAction">
    /// The transit action.
    /// </param>
    /// <param name="_transitOption">
    /// The transit option.
    /// </param>
    public static void defineRule(
        TableId                 _transType,
        TransitDocumentType_IN  _documentType,
        TransitDocumentTransitAction_IN _transitAction = TransitDocumentTransitAction_IN::Transit,
        TransitDocumentTransitOption_IN _transitOption = TransitDocumentTransitOption_IN::Replace)
    {
        TransitDocumentTransactionRule_IN documentRule;

        ttsBegin;

        documentRule.initValue();
        documentRule.TransactionType = _transType;
        documentRule.TransitDocumentType = _documentType.RecId;
        documentRule.TransitAction = _transitAction;
        documentRule.TransitOption = _transitOption;

        documentRule.insert();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _recId)
    {
        TransitDocumentTransactionRule_IN  relation;

        select firstOnly RecId from relation
            where relation.RecId == _recId;

        return relation.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRuleByTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides whether any transit document transaction rule exists for given transaction type
    /// </summary>
    /// <param name="_transType">
    /// transaction type
    /// </param>
    /// <returns>
    /// true if there are any rules for given transaction type; false if not.
    /// </returns>
    public static boolean existRuleByTransType(RefTableId _transType)
    {
        TransitDocumentTransactionRule_IN transitDocumentTransactionRule_IN;

        select count(RecId) from transitDocumentTransactionRule_IN
            where transitDocumentTransactionRule_IN.TransactionType == _transType;

        return transitDocumentTransactionRule_IN.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>TransitDocumentTransactionRule_IN</c> record by the spiecified RecId.
    /// </summary>
    /// <param name="_recId">
    /// The RecId.
    /// </param>
    /// <param name="_forUpdate">
    /// Whether the record is fetched for updating purposes, false by default.
    /// </param>
    /// <returns>
    /// The <c>TransitDocumentRelation_IN</c> record.
    /// </returns>
    public static TransitDocumentTransactionRule_IN find(RecId _recId, boolean _forUpdate = false)
    {
        TransitDocumentTransactionRule_IN  relation;

        if (_recId)
        {
            relation.selectForUpdate(_forUpdate);

            select firstOnly relation
                where relation.RecId == _recId;
        }

        return relation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the rule with specified transaction and transit document type.
    /// </summary>
    /// <param name="_transactionType">
    /// The transaction type.
    /// </param>
    /// <param name="_documentTypeId">
    /// The transit document type.
    /// </param>
    /// <returns>
    /// The <c>TransitDocumentTransactionRule_IN</c> record.
    /// </returns>
    public static TransitDocumentTransactionRule_IN findRule(RefTableId _transactionType, RefRecId _documentTypeId)
    {
        TransitDocumentTransactionRule_IN  rule;

        select firstOnly rule
            where rule.TransactionType  == _transactionType
                && rule.TransitDocumentType == _documentTypeId;

        return rule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return strFmt("@SYS102169");
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRuleByTransAndTransitDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides whether any transit document transaction rule exists for given transaction type and transit document type
    /// </summary>
    /// <param name="_transTableId">
    /// transaction type
    /// </param>
    /// <param name="_transitDocTableId">
    /// transit document type
    /// </param>
    /// <returns>
    /// true if there are any rules for given transaction type and transit document type; false if not.
    /// </returns>
    public static boolean existRuleByTransAndTransitDoc(RefTableId _transTableId, RefTableId _transitDocTableId)
    {
        TransitDocumentTransactionRule_IN   transitDocumentTransactionRule_IN;
        TransitDocumentType_IN              transitDocumentType_IN;

        select firstOnly RecId from transitDocumentType_IN
            where transitDocumentType_IN.RefTableId == _transitDocTableId
            exists join TransitDocumentType from transitDocumentTransactionRule_IN
                where transitDocumentTransactionRule_IN.TransitDocumentType == transitDocumentType_IN.RecId
                    && transitDocumentTransactionRule_IN.TransactionType    == _transTableId;

        return transitDocumentType_IN.RecId > 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYP4880650</DeveloperDocumentation>
	<TableGroup>Main</TableGroup>
	<Visible>No</Visible>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>APARShared</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransitDocumentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransitAction</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TransactionType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransitDocumentType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransitAction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TransitDocumentTransitAction_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransitOption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TransitDocumentTransitOption_IN</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RuleIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransactionType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransitDocumentType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransitDocumentType_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TransitDocumentType_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransitDocumentType</Name>
					<Field>TransitDocumentType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>