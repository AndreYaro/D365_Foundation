<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCostSalesPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjCostSalesPrice extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId p1)
    {
        boolean ret;

        ret = super(p1);

        switch (p1)
        {
            case fieldNum(ProjCostSalesPrice, ProjSalesPricing),
             fieldNum(ProjCostSalesPrice, ProjSalesPriceModel):

            if ((this.ProjSalesPriceModel == ProjSalesPriceModel::Contributionratio) &&
                (this.ProjSalesPricing > 100.00))
                {
                    return checkFailed("@SYS102503");
                }
                break;

            case fieldNum(ProjCostSalesPrice, Resource):
                ret = ret && ResourceFacade::checkResourceIsInCurrentCompany(this.Resource);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
        {
            switch (this.ProjValidFor)
            {
                case TableGroupAll::Table:
                    if ((this.psaProjInvoiceProjId == '') && (this.psaCustAccount == '') && !this.ProjId)
                    {
                        return checkFailed("@SYS37928");
                    }
                    break;

                case TableGroupAll::GroupId:
                    if (!this.ProjPriceGroup)
                    {
                        return checkFailed("@SYS103188");
                    }
                    break;
            }
        }

        ret = ret && ResourceFacade::checkResourceIsInCurrentCompany(this.Resource);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPriceGroupInUse</Name>
				<Source><![CDATA[
    public static boolean checkPriceGroupInUse(ProjPriceGroupID  priceGroup)
    {
        return (select firstonly RecId from projCostSalesPrice
                where projCostSalesPrice.ProjPriceGroup == priceGroup).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    public static ProjCostPriceCost costPrice(LedgerJournalTrans _ledgerJournalTrans,
                                              LedgerJournalTrans_Project _ledgerJournalTrans_Project,
                                              boolean _getDefault)
    {
        AmountCur           costAmountCUR;
        ProjCostPriceCost   defaultCostPrice;
        ProjCostPriceCost   costPrice;
        ProjQty             qty = _ledgerJournalTrans_Project.Qty ? _ledgerJournalTrans_Project.Qty : 1;

        LedgerJournalTable  ledgerJournalTable;

        AmountCur taxInCostPrice()
        {
            Tax             taxCalculation;
            AmountCur       taxInCostPrice;
            TaxUncommitted  taxUncommitted;

            if (_ledgerJournalTrans.RecId != 0)
            {
                select sum(SourceRegulateAmountCur) from taxUncommitted
                    where taxUncommitted.Voucher == _ledgerJournalTrans.Voucher &&
                          taxUncommitted.SourceRecId == _ledgerJournalTrans.RecId &&
                          taxUncommitted.TaxDirection != TaxDirection::UseTax;
            }

            if (_ledgerJournalTrans.RecId != 0 && taxUncommitted.SourceRegulateAmountCur)
            {
                taxInCostPrice = taxUncommitted.SourceRegulateAmountCur;
            }
            else
            {
                taxInCostPrice = _ledgerJournalTrans.totalTaxAmountSingleLine(false, false, true);
            }

            TaxOnItem       taxOnItem;
            TaxData         taxData;
            TaxGroupData    taxGroupData;
            TaxValue        vatExemptValue;

            while select TaxValue, VATExemptPct from taxData
                exists join RecId, TaxGroup, TaxCode from taxGroupData
                    exists join RecId, TaxItemGroup, TaxCode  from taxOnItem 
                where taxGroupData.TaxGroup == _ledgerJournalTrans.TaxGroup &&
                        taxGroupData.TaxCode == taxData.TaxCode &&
                        taxOnItem.TaxCode == taxData.TaxCode &&
                        taxOnItem.TaxItemGroup == _ledgerJournalTrans.TaxItemGroup &&
                        taxData.VATExemptPct != 0
            {
                if (taxData.VATExemptPct)
                {
                    vatExemptValue += taxdata.TaxValue * taxData.VATExemptPct / 100;
                }
            }

            // <c>TaxInCostPrice</c> is calculated in transaction currency if <c>vatExemptValue</c> is present.
            if (vatExemptValue)
            {
                if (!TaxParameters::find().PurchTaxOnOperations && ledgerJournalTable.LedgerJournalInclTax)
                {
                    taxInCostPrice -= (costAmountCUR - taxInCostPrice) * vatExemptValue / 100;
                }
                else if (TaxParameters::find().PurchTaxOnOperations && !ledgerJournalTable.LedgerJournalInclTax)
                {
                    taxInCostPrice -= costAmountCUR * vatExemptValue / 100;
                }
            }

            return abs(taxInCostPrice);
        }

        ledgerJournalTable = _ledgerJournalTrans.ledgerJournalTable();

        if (_getDefault)
        {
            ProjPriceParameters priceParams = ProjCostPriceExpense::constructPriceParametersForFindCostPrice(
				_ledgerJournalTrans.parmAccount(),
				_ledgerJournalTrans_Project.Resource,
				_ledgerJournalTrans_Project.CategoryId,
                _ledgerJournalTrans_Project.ProjTransDate);
            defaultCostPrice = ProjCostPriceExpense::findCostPriceByPriceParameters(priceParams);

            if (defaultCostPrice)
            {
                _ledgerJournalTrans_Project.CostPrice = defaultCostPrice;
                if (ledgerJournalTable)
                {
                    LedgerJournalEngine::construct(ledgerJournalTable.JournalType).projRecalcAmountCurDebitCredit(_ledgerJournalTrans, _ledgerJournalTrans_Project);
                }
            }
        }

        costAmountCUR = qty * _ledgerJournalTrans_Project.CostPrice;

	    boolean purchTaxOnOperations = TaxParameters::find().PurchTaxOnOperations;

        if (!purchTaxOnOperations && ledgerJournalTable.LedgerJournalInclTax)
        {
            if (qty < 0)
            {
                costAmountCUR += taxInCostPrice();
            }
            else
            {
                costAmountCUR -= taxInCostPrice();
            }
        }
        else if (purchTaxOnOperations && !ledgerJournalTable.LedgerJournalInclTax)
        {
            TaxGroupData taxGroupData;
            select firstonly UseTax from taxGroupData
                    where taxGroupData.TaxGroup == _ledgerJournalTrans.TaxGroup;

            if (taxGroupData && taxGroupData.UseTax == NoYes::Yes)
            {
                if (qty < 0)
                {
                    costAmountCUR -= taxInCostPrice();
                }
                else
                {
                    costAmountCUR += taxInCostPrice();
                }
            }
        }

        // <c>costPrice</c> currency conversion from transaction to accounting currency needs to be done after tax deduction,
        // as <c>costPrice</c> used to calculate sales price in accounting currency.
        costPrice = ExchangeRateHelper::mstPrice(costAmountCUR, _ledgerJournalTrans.CurrencyCode, _ledgerJournalTrans_Project.ProjTransDate, Currency::noYes2UnknownNoYes(_ledgerJournalTrans.Triangulation), _ledgerJournalTrans.ExchRate, _ledgerJournalTrans.ExchRateSecond);

        costPrice = costPrice / qty;

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPriceParametersForFind</Name>
				<Source><![CDATA[
	/// <summary>
    /// Constructs a <c>ProjPriceParameters</c> parameter class instance based off the signature of <c>ProjCostSalesPrice::find</c>.
    /// </summary>
    /// <param name = "_projId">Project ID to search with (<c>parmProjId</c>).</param>
    /// <param name = "_resource">Resource record ID to search with (<c>parmResourceRecId</c>).</param>
    /// <param name = "_categoryId">Category ID to search with (<c>parmProjCategoryId</c>).</param>
    /// <param name = "_currency">Sales currency to search with (<c>parmSalesCurrencyCode</c>).</param>
    /// <param name = "_transDate">Transaction date to search with (<c>parmTransDate</c>).</param>
    /// <param name = "_projValidFor">'Valid for' value to search with (<c>parmProjPriceGroupValidFor</c>).</param>
    /// <param name = "_projPriceGroup">Price group ID to search with (<c>parmPriceGroupId</c>).</param>
    /// <param name = "_spsaCustAccount">Customer account to search with (<c>parmCustAccount</c>).</param>
    /// <param name = "_spsaProjInvoiceProjId">Project invoice ID to search with (<c>parmProjInvoiceProjId</c>).</param>
    /// <returns>A <c>ProjPriceParameters</c> instance for use with <c>ProjCostSalesPrice::findByPriceParameters</c>.</returns>
	public static ProjPriceParameters constructPriceParametersForFind(
        ProjId                   _projId,
        ResourceRecId            _resource,
        ProjCategoryId           _categoryId,
        CurrencyCode             _currency   = Ledger::accountingCurrency(CompanyInfo::current()),
        TransDate                _transDate  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ProjPriceGroupValidFor   _projValidFor   = TableGroupAll::All,
        ProjPriceGroupID         _projPriceGroup = '',
        CustAccount              _spsaCustAccount = "",
        ProjInvoiceProjId        _spsaProjInvoiceProjId = "")
    {
        ProjPriceParameters priceParams = ProjPriceParameters::construct();
        priceParams.parmProjId(_projId);
        priceParams.parmResourceRecId(_resource);
        priceParams.parmProjCategoryId(_categoryId);
        priceParams.parmSalesCurrencyCode(_currency);
        priceParams.parmTransDate(_transDate);
        priceParams.parmProjPriceGroupValidFor(_projValidFor);
        priceParams.parmProjPriceGroupID(_projPriceGroup);
        priceParams.parmCustAccount(_spsaCustAccount);
        priceParams.parmProjInvoiceProjId(_spsaProjInvoiceProjId);

        return priceParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPriceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a project expense sales price record.
    /// </summary>
    /// <param name = "_parameters">An instance of <c>ProjPriceParameters</c> containing the search criteria.</param>
    /// <param name = "_forUpdate">Whether to select the record for update.</param>
    /// <returns>A <c>ProjCostPriceExpense</c> record.</returns>
    [Replaceable]
    public static ProjCostSalesPrice findByPriceParameters(ProjPriceParameters _parameters, boolean _forUpdate = false)
    {
        ProjCostSalesPrice projCostSalesPrice = null;

        projCostSalesPrice.selectForUpdate(_forUpdate);

        if (isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
        {
            select reverse projCostSalesPrice
            order by ProjValidFor, TransDate
            where projCostSalesPrice.ProjValidFor    == _parameters.parmProjPriceGroupValidFor()	&&
                  projCostSalesPrice.ProjId          == _parameters.parmProjId()					&&
                  projCostSalesPrice.ProjPriceGroup  == _parameters.parmProjPriceGroupID()			&&
                  projCostSalesPrice.Resource        == _parameters.parmResourceRecId()				&&
                  projCostSalesPrice.CategoryId      == _parameters.parmProjCategoryId()			&&
                  projCostSalesPrice.CurrencyId      == _parameters.parmSalesCurrencyCode()			&&
                  projCostSalesPrice.psaCustAccount         == _parameters.parmCustAccount()        &&
                  projCostSalesPrice.psaProjInvoiceProjId   == _parameters.parmProjInvoiceProjId()	&&
                  projCostSalesPrice.TransDate       <= _parameters.parmTransDate();
        }
        else
        {
            select reverse projCostSalesPrice
            order by TransDate
            where projCostSalesPrice.ProjId          == _parameters.parmProjId()					&&
                  projCostSalesPrice.Resource        == _parameters.parmResourceRecId()				&&
                  projCostSalesPrice.CategoryId      == _parameters.parmProjCategoryId()			&&
                  projCostSalesPrice.CurrencyId      == _parameters.parmSalesCurrencyCode()			&&
                  projCostSalesPrice.psaCustAccount         == _parameters.parmCustAccount()		&&
                  projCostSalesPrice.psaProjInvoiceProjId   == _parameters.parmProjInvoiceProjId()	&&
                  projCostSalesPrice.TransDate       <= _parameters.parmTransDate();
        }

        return projCostSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
    /// Find a project expense sales price record.
    /// </summary>
    /// <param name = "_projId">Project ID to search with.</param>
    /// <param name = "_resource">Resource record ID to search with.</param>
    /// <param name = "_categoryId">Category ID to search with.</param>
    /// <param name = "_currency">Sales currency to search with.</param>
    /// <param name = "_transDate">Transaction date to search with.</param>
    /// <param name = "_projValidFor">'Valid for' value to search with.</param>
    /// <param name = "_projPriceGroup">Price group ID to search with.</param>
    /// <param name = "_spsaCustAccount">Customer account to search with.</param>
    /// <param name = "_spsaProjInvoiceProjId">Project invoice ID to search with.</param>
    /// <param name = "_forUpdate">Whether to select the record for update.</param>
    /// <returns>A <c>ProjCostPriceExpense</c> record.</returns>
	[SysObsolete("This method has been made obsolete, please use ProjCostSalesPrice::findByPriceParameters instead for extensibility.", false, 02\08\2018)]
    public static ProjCostSalesPrice find(
		ProjId					_projId,
        ResourceRecId           _resource,
        ProjCategoryId          _categoryId,
        CurrencyCode            _currency = Ledger::accountingCurrency(CompanyInfo::current()),
        TransDate               _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ProjPriceGroupValidFor  _projValidFor = TableGroupAll::All,
        ProjPriceGroupID        _projPriceGroup = '',
        CustAccount             _spsaCustAccount = "",
        ProjInvoiceProjId       _spsaProjInvoiceProjId = "",
        boolean                 _forUpdate = false)
    {
        ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind(_projId, _resource, _categoryId, _currency, _transDate, _projValidFor, _projPriceGroup, _spsaCustAccount, _spsaProjInvoiceProjId);
        return ProjCostSalesPrice::findByPriceParameters(priceParams, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByContractResourceCategory</Name>
				<Source><![CDATA[
    private static ProjCostSalesPrice findByContractResourceCategory(ProjInvoiceProjId _projInvoiceProjId, ResourceRecId _resourceRecId, CategoryId _categoryId, CurrencyCode _currency,TransDate _transDate,ProjPriceGroupValidFor projValidFor = TableGroupAll::All)
    {
        ProjCostSalesPrice projCostSalesPrice;

        if (_projInvoiceProjId && _resourceRecId && _categoryId)
        {
            ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', _resourceRecId, _categoryId, _currency, _transDate, projValidFor, '','',_projInvoiceProjId);
            projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
        }

        if (!(projCostSalesPrice))
        {
            if (_projInvoiceProjId && _resourceRecId)
            {
                ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', _resourceRecId, '', _currency, _transDate, projValidFor, '', '', _projInvoiceProjId);
                projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
            }

            if (!(projCostSalesPrice))
            {
                if (_projInvoiceProjId && _categoryId)
                {
                    ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', 0, _categoryId, _currency, _transDate, projValidFor, '', '', _projInvoiceProjId);
                    projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                }

                if (!(projCostSalesPrice))
                {
                    if (_projInvoiceProjId)
                    {
                        ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', 0, '', _currency, _transDate, projValidFor, '', '', _projInvoiceProjId);
                        projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                    }
                }
            }
        }

        return projCostSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustomerResourceCategory</Name>
				<Source><![CDATA[
    private static ProjCostSalesPrice findByCustomerResourceCategory(CustAccount _custAccount, ResourceRecId _resourceRecId, CategoryId _categoryId, CurrencyCode _currency,TransDate _transDate,ProjPriceGroupValidFor projValidFor= TableGroupAll::All)
    {
        ProjCostSalesPrice projCostSalesPrice;

        if (_custAccount && _resourceRecId && _categoryId)
        {
            ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', _resourceRecId, _categoryId, _currency, _transDate, projValidFor, '',_custAccount, '');
            projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
        }

        if (!(projCostSalesPrice))
        {
            if (_custAccount && _resourceRecId)
            {
                ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', _resourceRecId, '', _currency, _transDate, projValidFor, '', _custAccount, '');
                projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
            }
            if (!(projCostSalesPrice))
            {
                if (_custAccount && _categoryId)
                {
                    ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', 0, _categoryId, _currency, _transDate, projValidFor, '', _custAccount, '');
                    projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                }

                if (!(projCostSalesPrice))
                {
                    if (_custAccount)
                    {
                        ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', 0, '', _currency, _transDate, projValidFor, '', _custAccount, '');
                        projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                    }
                }
            }
        }

        return projCostSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPriceParametersForFindCostSalesPrice</Name>
				<Source><![CDATA[
	/// <summary>
    /// Constructs a <c>ProjPriceParameters</c> parameter class instance based off the signature of <c>ProjCostSalesPrice::findCostSalesPrice</c>.
    /// </summary>
    /// <param name = "_projId">Project ID to search with (<c>parmProjId</c>).</param>
    /// <param name = "_resource">Resource record ID to search with (<c>parmResourceRecId</c>).</param>
    /// <param name = "_categoryId">Category ID to search with (<c>parmProjCategoryId</c>).</param>
    /// <param name = "_costPrice">Cost price to search with (<c>parmCostPrice</c>).</param>
    /// <param name = "_costCurrency">Cost currency to search with (<c>parmCostCurrencyCode</c>).</param>
    /// <param name = "_salesCurrency">Sales currency to search with (<c>parmSalesCurrencyCode</c>).</param>
    /// <param name = "_transDate">Transaction date to search with (<c>parmTransDate</c>).</param>
    /// <param name = "_priceGroupId">Price group ID to search with (<c>parmProjPriceGroupId</c>).</param>
    /// <param name = "_projInvoiceProjId">Project invoice ID to search with (<c>parmProjInvoiceProjId</c>).</param>
    /// <param name = "_custAccount">Customer account to search with (<c>parmCustAccount</c>).</param>
    /// <param name = "_exchRate">Exchange rate to search with (<c>parmExchRate</c>).</param>
    /// <returns>A <c>ParmPriceParameters</c> instance for use with <c>ProjCostSalesPrice::findCostSalesPriceByPriceParameters</c>.</returns>
	public static ProjPriceParameters constructPriceParametersForFindCostSalesPrice(
        ProjId               _projId,
        ResourceRecId       _resource,
        ProjCategoryId      _categoryId,
        CostPrice           _costPrice,
        CurrencyCode        _costCurrency,
        CurrencyCode        _salesCurrency = CompanyInfoHelper::standardCurrency(),
        TransDate           _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ProjPriceGroupID    _priceGroupId = '',
        ProjInvoiceProjId   _projInvoiceProjId = '',
        CustAccount         _custAccount = '',
        ExchRate            _exchRate = 0)
    {
        ProjPriceParameters priceParams = ProjPriceParameters::construct();
        priceParams.parmProjId(_projId);
        priceParams.parmResourceRecId(_resource);
        priceParams.parmProjCategoryId(_categoryId);
        priceParams.parmCostPrice(_costPrice);
        priceParams.parmCostCurrencyCode(_costCurrency);
        priceParams.parmSalesCurrencyCode(_salesCurrency);
        priceParams.parmTransDate(_transDate);
        priceParams.parmProjPriceGroupID(_priceGroupId);
        priceParams.parmProjInvoiceProjId(_projInvoiceProjId);
        priceParams.parmCustAccount(_custAccount);
        priceParams.parmExchRate(_exchRate);

        return priceParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCostSalesPriceByPriceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a project expense sales prices.
    /// </summary>
    /// <param name = "_parameters">An instance of <c>ProjPriceParameters</c> containing the search criteria.</param>
    /// <param name = "_ignoreCustomerPriceGroup">true to get the price group from the project specified in _parameters.parmProjId(); false to use _parameters.parmProjPriceGroupID().</param>
    /// <param name = "_roundOffSalesPrice">true to round off the sales price returned; otherwise, false.</param>
    /// <returns>A container consisting of the cost sales price, and whether the price was found.</returns>
    [Replaceable]
    public static container findCostSalesPriceByPriceParameters(
        ProjPriceParameters _parameters,
        boolean             _ignoreCustomerPriceGroup   = false,
        boolean             _roundOffSalesPrice         = false)
    {
        ProjCostSalesPrice  projCostSalesPrice;
        SalesPrice          salesPrice;
        CostPrice           costPrice;

        boolean     priceFound = false; // returns TRUE if a matching record in table projCostSalesPrice is returned even if its a zero sales price.

        ProjOpsPricingLogger logger = ProjOpsPricingLogger::createLogger(tableStr(ProjCostSalesPrice));

        using (var activityContext = logger.projOpsPricingActivity().codeInstrumentationContext(tableStaticMethodStr(ProjCostSalesPrice, findCostSalesPriceByPriceParameters)))
        {
            activityContext.addCustomProperty('_ignoreCustomerPriceGroup', any2Str(_ignoreCustomerPriceGroup));
            activityContext.addCustomProperty('_roundOffSalesPrice', any2Str(_roundOffSalesPrice));

            projCostSalesPrice = ProjCostSalesPrice::psAfindCostSalesPrice(
            _parameters.parmProjId(),
            _parameters.parmResourceRecId(),
            _parameters.parmProjCategoryId(),
            _parameters.parmCostPrice(),
            _parameters.parmCostCurrencyCode(),
            _parameters.parmSalesCurrencyCode(),
            _parameters.parmTransDate(),
            _parameters.parmProjPriceGroupID(),
            _ignoreCustomerPriceGroup,
            _parameters.parmProjInvoiceProjId(),
            _parameters.parmCustAccount());

            //constant exchange rate multiplier in alingment with macro defined in Currency exchange api.
            const int ExchangeRateMultiplier = 100;

            //Modifying the cost price value (value would be only be used to calculate sales price) to sales currency.
            //Logic is,
            // If Cost currency does not matches with sales currency
            //      Use parameter exchange rate to convert it to sales currency,
            //          if exchange rate provided is valid.
            //          else use system setup
            // Else, assign parameter cost price value to the variable for cost price.
            if (_parameters.parmCostCurrencyCode() != _parameters.parmSalesCurrencyCode())
            {
                if (_parameters.parmExchRate() > 0 && _parameters.parmExchRate() != ExchangeRateMultiplier)
                {
                    costPrice = CurrencyExchange::calculateAmount(_parameters.parmCostPrice(), _parameters.parmExchRate());
                }
                else
                {
                    costPrice = CurrencyExchangeHelper::curAmount2CurAmount(_parameters.parmCostPrice(),
                                                        _parameters.parmCostCurrencyCode(),
                                                        _parameters.parmSalesCurrencyCode(),
                                                        _parameters.parmTransDate(),
                                                        false);
                }
            }
            else
            {
                costPrice = _parameters.parmCostPrice();
            }

            activityContext.addCustomProperty('projCostSalesPrice.RecId', any2Str(projCostSalesPrice.RecId));
        
            if (projCostSalesPrice)
            {
                switch (projCostSalesPrice.ProjSalesPriceModel)
                {
                    case ProjSalesPriceModel::Qty :
                        salesPrice = projCostSalesPrice.ProjSalesPricing;
                        break;

                    case ProjSalesPriceModel::Contributionratio :
                    if (costPrice)
                        {
                            salesPrice = 100 * costPrice / (100 - projCostSalesPrice.ProjSalesPricing ? 100 - projCostSalesPrice.ProjSalesPricing : 1);

                            if (!_roundOffSalesPrice)
                            {
                                CurrencyExchangeHelper::price(salesPrice, _parameters.parmSalesCurrencyCode());
                            }
                        }
                        break;

                    case ProjSalesPriceModel::PercentMarkup :
                    if (costPrice)
                        {
                            salesPrice = pt(costPrice, projCostSalesPrice.ProjSalesPricing / 100);

                            if (_roundOffSalesPrice)
                            {
                                //The value is being rounded because the source document framework only allows
                                //16 places of decimal precision. If we pass in something like 8.333 repeating, then
                                //we run into issues when trying to split distributions. So the solution is to only
                                //return 15 places of precision.
                                salesPrice = decRound(salesPrice, 15);
                                return [salesPrice, projCostSalesPrice.RecId];
                            }
                        }
                        break;

                    case ProjSalesPriceModel::AmountMarkup :
                    if (costPrice)
                        {
                            salesPrice = costPrice + projCostSalesPrice.ProjSalesPricing;
                        
                            if (_roundOffSalesPrice)
                            {
                                //The value is being rounded because the source document framework only allows
                                //16 places of decimal precision. If we pass in something like 8.333 repeating, then
                                //we run into issues when trying to split distributions. So the solution is to only
                                //return 15 places of precision.
                                salesPrice = decRound(salesPrice, 15);
                                return [salesPrice, projCostSalesPrice.RecId];
                            }
                        }
                        break;
                }
            }

            priceFound = (projCostSalesPrice.RecId);
        }

        return [salesPrice, priceFound];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCostSalesPrice</Name>
				<Source><![CDATA[
	/// <summary>
    /// Find a project expense sales prices.
    /// </summary>
    /// <param name = "_projId">Project ID to search with.</param>
    /// <param name = "_resource">Resource record ID to search with.</param>
    /// <param name = "_categoryId">Category ID to search with.</param>
    /// <param name = "_costPrice">Cost price to search with.</param>
    /// <param name = "_costCurrency">Cost currency to search with.</param>
    /// <param name = "_salesCurrency">Sales currency to search with.</param>
    /// <param name = "_transDate">Transaction date to search with.</param>
    /// <param name = "_priceGroupId">Price group ID to search with.</param>
    /// <param name = "_ignoreCustomerPriceGroup">true to get the price group from the project specified in _parameters.parmProjId(); false to use _parameters.parmProjPriceGroupID().</param>
    /// <param name = "_projInvoiceProjId">Project invoice ID to search with.</param>
    /// <param name = "_custAccount">Customer account to search with.</param>
    /// <param name = "_roundOffSalesPrice">true to round off the sales price returned; otherwise, false.</param>
    /// <param name = "_exchRate">Exchange rate to search with.</param>
    /// <returns>A container consisting of the cost sales price, and whether the price was found.</returns>
	[SysObsolete("This method has been made obsolete, please use ProjCostSalesPrice::findCostSalesPriceByPriceParameters instead for extensibility.", false, 02\08\2018)]
    public static container findCostSalesPrice(
        ProjId               _projId,
        ResourceRecId       _resource,
        ProjCategoryId      _categoryId,
        CostPrice           _costPrice,
        CurrencyCode        _costCurrency,
        CurrencyCode        _salesCurrency    = CompanyInfoHelper::standardCurrency(),
        TransDate           _transDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ProjPriceGroupID    _priceGroupId = '',
        boolean             _ignoreCustomerPriceGroup = false,
        ProjInvoiceProjId   _projInvoiceProjId='',
        CustAccount         _custAccount='',
        boolean             _roundOffSalesPrice = false,
        ExchRate            _exchRate = 0)
    {
        ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
			_projId,
			_resource,
			_categoryId,
			_costPrice,
			_costCurrency,
			_salesCurrency,
			_transDate,
			_priceGroupId,
			_projInvoiceProjId,
			_custAccount,
            _exchRate);
        return ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams, _ignoreCustomerPriceGroup, _roundOffSalesPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAfindCostSalesPrice</Name>
				<Source><![CDATA[
    private static ProjCostSalesPrice psAfindCostSalesPrice(
		ProjId					_projId,
        ResourceRecId			_resource,
        ProjCategoryId			_categoryId,
        CostPrice				_costPrice,
        CurrencyCode			_costCurrency,
        CurrencyCode			_salesCurrency = CompanyInfoHelper::standardCurrency(),
        TransDate				_transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ProjPriceGroupID		_priceGroupId = '',
        boolean					_ignoreCustomerPriceGroup = false,
        ProjInvoiceProjId		_projInvoiceProjId = '',
        CustAccount				_custAccount = '')
    {
        ProjCostSalesPrice  projCostSalesPrice;
        CostPrice           costPrice    = _costPrice;
        ProjId              projId       = _projId;

        ProjPriceGroupValidFor  projValidFor;
        ProjPriceGroupID        projPriceGroup;

        boolean     priceFound = false; // returns TRUE if a matching record in table projCostSalesPrice is returned even if its a zero sales price.

        boolean isPriceDiscConfigEnabled = isConfigurationkeyEnabled(configurationKeyNum(PriceDisc));

        ProjOpsPricingLogger logger = ProjOpsPricingLogger::createLogger(tableStr(ProjCostSalesPrice));

        using (var activityContext = logger.projOpsPricingActivity().codeInstrumentationContext(tableStaticMethodStr(ProjCostSalesPrice, psAfindCostSalesPrice)))
        {
            activityContext.addCustomProperty('isPriceDiscConfigEnabled', any2Str(isPriceDiscConfigEnabled));

            if (projId)
            {
                if (!_custAccount)
                {
                    _custAccount = ProjTable::find(projId).CustAccount;
                }
                if (!_projInvoiceProjId)
                {
                    _projInvoiceProjId = ProjTable::find(projId).ProjInvoiceProjId;
                }
            }

            int loopCount = 0;
            int findCount = 0;

            do
            {
                loopCount++;

                // Look for sales price using price group feature
                if (isPriceDiscConfigEnabled)
                {
                    // Look for sales price in Valid For = Table
                    projValidFor = TableGroupAll::Table;

                    if (projId && _resource && _categoryId)
                    {
                        findCount++;
                        ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind(projId, _resource, _categoryId, _salesCurrency, _transDate, projValidFor, '');
                        projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                    }

                    if (!(projCostSalesPrice))
                    {
                        if (projId && _resource)
                        {
                            findCount++;
                            ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind(projId, _resource, '', _salesCurrency, _transDate, projValidFor, '');
                            projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                        }

                        if (!(projCostSalesPrice))
                        {
                            if (projId && _categoryId)
                            {
                                findCount++;
                                ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind(projId, 0, _categoryId, _salesCurrency, _transDate, projValidFor, '');
                                projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                            }

                            if (!(projCostSalesPrice))
                            {
                                if (projId)
                                {
                                    findCount++;
                                    ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind(projId, 0, '', _salesCurrency, _transDate, projValidFor);
                                    projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                                }

                                if (!(projCostSalesPrice))
                                {
                                    // find by contract
                                    findCount++;
                                    projCostSalesPrice = ProjCostSalesPrice::findByContractResourceCategory(_projInvoiceProjId,_resource,_categoryId,_salesCurrency,_transDate,projValidFor);

                                    if (!(projCostSalesPrice))
                                    {
                                        //find by customer
                                        findCount++;
                                        projCostSalesPrice= ProjCostSalesPrice::findByCustomerResourceCategory(_custAccount,_resource,_categoryId,_salesCurrency,_transDate,projValidFor);
                                    }
                                    if (!(projCostSalesPrice))
                                    {
                                        if (_categoryId && _resource)
                                        {
                                            findCount++;
                                            ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', _resource, _categoryId, _salesCurrency, _transDate, projValidFor);
                                            projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                                        }
                                        if (!(projCostSalesPrice))
                                        {
                                            if (_resource)
                                            {
                                                findCount++;
                                                ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', _resource, '', _salesCurrency, _transDate, projValidFor);
                                                projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                                            }
                                            if (!(projCostSalesPrice))
                                            {
                                                if (_categoryId)
                                                {
                                                    findCount++;
                                                    ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', 0, _categoryId, _salesCurrency, _transDate, projValidFor);
                                                    projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    // Look for sales price in Valid For = Group
                    if (!(projCostSalesPrice))
                    {
                        if (_ignoreCustomerPriceGroup)
                        {
                            projPriceGroup = _priceGroupId;
                        }
                        else
                        {
                            projPriceGroup = ProjTable::findPriceGroup(_projId);
                        }

                        if (projPriceGroup)
                        {
                            projValidFor = TableGroupAll::GroupId;

                            if (_resource && _categoryId)
                            {
                                findCount++;
                                ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', _resource, _categoryId, _salesCurrency, _transDate, projValidFor, projPriceGroup);
                                projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                            }

                            if (!(projCostSalesPrice))
                            {
                                if (_resource)
                                {
                                    findCount++;
                                    ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', _resource, '', _salesCurrency, _transDate, projValidFor, projPriceGroup);
                                    projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                                }

                                if (!(projCostSalesPrice))
                                {
                                    if (_categoryId)
                                    {
                                        findCount++;
                                        ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', 0, _categoryId, _salesCurrency, _transDate, projValidFor, projPriceGroup);
                                        projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                                    }

                                    if (!(projCostSalesPrice))
                                    {
                                        findCount++;
                                        ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', 0, '', _salesCurrency, _transDate, projValidFor, projPriceGroup);
                                        projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                                    }
                                }
                            }
                        }
                    }

                    // Look for sales price in Valid For = All
                    if (!(projCostSalesPrice))
                    {
                        projValidFor = TableGroupAll::All;

                        if (_resource && _categoryId)
                        {
                            findCount++;
                            ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', _resource, _categoryId, _salesCurrency, _transDate, projValidFor, '');
                            projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                        }

                        if (!(projCostSalesPrice))
                        {
                            if (_resource)
                            {
                                findCount++;
                                ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', _resource, '', _salesCurrency, _transDate, projValidFor, '');
                                projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                            }

                            if (!(projCostSalesPrice))
                            {
                                if (_categoryId)
                                {
                                    findCount++;
                                    ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', 0, _categoryId, _salesCurrency, _transDate, projValidFor, '');
                                    projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                                }

                                if (!(projCostSalesPrice))
                                {
                                    findCount++;
                                    ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', 0, '', _salesCurrency, _transDate, projValidFor, '');
                                    projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                                }
                            }
                        }
                    }

                    projId  = ProjTable::find(projId).ParentId;

                    if (projId && !projCostSalesPrice.ProjId)
                    {
                        findCount++;
                        ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind(projId, _resource, _categoryId, _salesCurrency, _transDate, TableGroupAll::Table);
                        projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                    }
                }

                // Look for sales price without price group feature
                else
                {
                    if (projId && _resource && _categoryId)
                    {
                        findCount++;
                        ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind(projId, _resource, _categoryId, _salesCurrency, _transDate);
                        projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                    }
                    if (!(projCostSalesPrice))
                    {
                        if (projId && _resource)
                        {
                            findCount++;
                            ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind(projId, _resource, '', _salesCurrency, _transDate);
                            projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                        }
                        if (!(projCostSalesPrice))
                        {
                            if (projId && _categoryId)
                            {
                                findCount++;
                                ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind(projId, 0, _categoryId, _salesCurrency, _transDate);
                                projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                            }

                            if (!(projCostSalesPrice))
                            {
                                if (projId)
                                {
                                    findCount++;
                                    ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind(projId, 0, '', _salesCurrency, _transDate);
                                    projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                                }
                                if (!(projCostSalesPrice))
                                {
                                    // find by contract
                                    findCount++;
                                    projCostSalesPrice = ProjCostSalesPrice::findByContractResourceCategory(_projInvoiceProjId,_resource,_categoryId,_salesCurrency,_transDate);

                                    if (!(projCostSalesPrice))
                                    {
                                        //find by customer
                                        findCount++;
                                        projCostSalesPrice = ProjCostSalesPrice::findByCustomerResourceCategory(_custAccount,_resource,_categoryId,_salesCurrency,_transDate);
                                    }

                                    if (!(projCostSalesPrice))
                                    {
                                        if (_resource && _categoryId)
                                        {
                                            findCount++;
                                            ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', _resource, _categoryId, _salesCurrency, _transDate);
                                            projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                                        }

                                        if (!(projCostSalesPrice))
                                        {
                                            if (_resource)
                                            {
                                                findCount++;
                                                ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', _resource, '', _salesCurrency, _transDate);
                                                projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                                            }
                                            if (!(projCostSalesPrice))
                                            {
                                                if (_categoryId)
                                                {
                                                    findCount++;
                                                    ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', 0, _categoryId, _salesCurrency, _transDate);
                                                    projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                                                }
                                                if (!(projCostSalesPrice))
                                                {
                                                    findCount++;
                                                    ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind('', 0, '', _salesCurrency, _transDate);
                                                    projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    projId  = ProjTable::find(projId).ParentId;
                    if (projId && !projCostSalesPrice.ProjId)
                    {
                        findCount++;
                        ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFind(projId, _resource, _categoryId, _salesCurrency, _transDate);
                        projCostSalesPrice = ProjCostSalesPrice::findByPriceParameters(priceParams);
                    }
                }
            }
            while (!projCostSalesPrice && projId);

            activityContext.addCustomProperty('loopCount', any2Str(loopCount));
            activityContext.addCustomProperty('findCount', any2Str(findCount));
        }

        return projCostSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // Compute the hash for this instance
        ProjExtensionHashCalculator hashCalculator = ProjExtensionHashCalculator::construct();
        ProjCostSalesPrice::getExtensionFields(hashCalculator);
        this.ExtensionHash = hashCalculator.calculateHash(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        // Update the hash for this instance
        ProjExtensionHashCalculator hashCalculator = ProjExtensionHashCalculator::construct();
        ProjCostSalesPrice::getExtensionFields(hashCalculator);
        this.ExtensionHash = hashCalculator.calculateHash(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enumerates extension fields of this table, by registering them with the '_hashCalculator' object.
    /// This is the the intended CoC extension point for table extensions to register fields included in the hash.
    /// </summary>
    public static void getExtensionFields(ProjExtensionHashCalculator _hashCalculator)
    {
        // ex: _hashCalculator.addExtensionField(fieldNum(ProjCostSalesPrice, MyCustomField), defaultFieldValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS125004</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>ProjSalesPriceCost</FormRef>
	<Label>@SYS78772</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TransDate</TitleField1>
	<TitleField2>ProjId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ProjCatEmplDateIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjValidFor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjPriceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPriceModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPricing</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSACustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjValidFor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjPriceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPriceModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPricing</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS56480</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjPriceGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPriceGroupID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjSalesPriceModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjSalesPriceModel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjSalesPricing</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPricing</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjValidFor</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPriceGroupValidFor</ExtendedDataType>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSACustAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAProjInvoiceProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS50168</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExtensionHash</Name>
			<ExtendedDataType>ProjExtensionHash</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjCatEmplDateIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjValidFor</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjPriceGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PSACustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PSAProjInvoiceProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CurrencyId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ExtensionHash</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>Currency_ProjCostSalesPrice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSACustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>PSACustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PriceDiscGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PriceDiscGroup_ProjCostSalesPrice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjPriceGroup</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<Field>ProjPriceGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::PriceGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjCategory_ProjCostSalesPrice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAProjInvoiceProjId</Name>
					<SourceEDT>ProjInvoiceProjId</SourceEDT>
					<Field>PSAProjInvoiceProjId</Field>
					<RelatedField>ProjInvoiceProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjInvoiceIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjTable_ProjCostSalesPrice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Worker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_ProjCostSalesPrice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>