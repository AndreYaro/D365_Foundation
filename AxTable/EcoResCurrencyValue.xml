<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResCurrencyValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResCurrencyValue extends EcoResValue
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>compareTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares this record against the specified <paramref name="_value" /> parameter.
    /// </summary>
    /// <param name="_value">
    /// The value definition that contains the currency value to which to compare this record.
    /// </param>
    /// <returns>
    /// -1 if the currency value in this record is less than the value in the specified record; 0 if the
    /// currency values are identical; 1 if the currency value in this record is greater than the value in
    /// the specified record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// This record and the specified record are not comparable as they are not of the same type.
    /// </exception>
    public int compareTo(EcoResValue _value)
    {
        #define.ExchangeRateType("Default")
        int                     ret;
        EcoResCurrencyValue     argValue;
        AmountMST               compareValue;
        CurrencyExchangeHelper  currencyExchangeHelper;
        TransDate               transactionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        //validates the type and throws an error if they are not the same
        super(_value);

        argValue = _value as EcoResCurrencyValue;

        if (argValue.CurrencyCode != this.CurrencyCode)
        {
            // Convert currency value
            currencyExchangeHelper = CurrencyExchangeHelper::construct();
            currencyExchangeHelper.parmExchangeDate(transactionDate);
            currencyExchangeHelper.parmExchangeRateTypeRecId(SystemParameters::find(false).SystemExchangeRateType);
            try
            {
                compareValue = currencyExchangeHelper.calculateCurrencyToCurrency(argValue.CurrencyCode, this.CurrencyCode, argValue.CurrencyValue, true);
            }
            catch(Exception::Error)
            {
                // The currency value cannot be converted, so use argument value as a fallback
                infolog.clear();
                compareValue = argValue.CurrencyValue;
            }
        }
        else
        {
            compareValue = argValue.CurrencyValue;
        }

        if (this.CurrencyValue < compareValue)
        {
            ret = -1;
        }
        else if (this.CurrencyValue > compareValue)
        {
            ret = 1;
        }
        else
        {
            ret = 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStringValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string representation of this record that is compatible with the Procurement Category configuration.
    /// </summary>
    /// <returns>
    /// The string representation of this record.
    /// </returns>
    public str getStringValue()
    {
        return strFmt("%1", this.CurrencyValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the record.
    /// </summary>
    /// <returns>
    /// The real representation of this record.
    /// </returns>
    public anytype getValue()
    {
        return this.CurrencyValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcDuplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the record.
    /// </summary>
    /// <returns>
    /// A reference to the duplicated record.
    /// </returns>
    public RefRecId pcDuplicate()
    {
        EcoResCurrencyValue duplicate;

        duplicate.data(this);
        duplicate.Origin = this.RecId;
        duplicate.insert();

        return duplicate.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcGetStringValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string representation of this record that is compatible with the product configuration.
    /// </summary>
    /// <returns>
    /// The string representation of this record.
    /// </returns>
    public str pcGetStringValue()
    {
        #define.CharactersCode(10)
        #define.DecimalsCode(15)
        #define.Separator1Code(1)
        #define.Separator2Code(0)
        super();
        return num2str(this.CurrencyValue, #CharactersCode, #DecimalsCode, #Separator1Code, #Separator2Code);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record of the <c>EcoResCurrencyValue</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID to search for.
    /// </param>
    /// <returns>
    /// true if a record with the provided ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (EcoResCurrencyValue::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>EcoResCurrencyValue</c> table record with the specified record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID to search for.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>EcoResCurrencyValue</c> table record or an empty buffer.
    /// </returns>
    public static EcoResCurrencyValue find(RefRecId _recId, boolean _forupdate = false)
    {
        EcoResCurrencyValue record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFromHashAndValue</Name>
				<Source><![CDATA[
    public EcoResValue readFromHashAndValue(boolean _forupdate = false)
    {
        EcoResCurrencyValue ecoResCurrencyValue;

        ecoResCurrencyValue.selectForUpdate(_forupdate);
        select firstonly ecoResCurrencyValue
            where ecoResCurrencyValue.SHA1HashHex       == this.hashValue()
                && ecoResCurrencyValue.CurrencyCode     == this.CurrencyCode
                && ecoResCurrencyValue.CurrencyValue    == this.CurrencyValue;

        return ecoResCurrencyValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashKey</Name>
				<Source><![CDATA[
    protected str hashKey()
    {
        return strFmt('%1~%2~', this.CurrencyCode, this.CurrencyValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueFieldId</Name>
				<Source><![CDATA[
    public FieldId valueFieldId()
    {
        return fieldNum(EcoResCurrencyValue, CurrencyValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS324446</DeveloperDocumentation>
	<Label>@SYS324385</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CurrencyValue</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Extends>EcoResValue</Extends>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Values</Name>
			<Label>@RET1263</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CurrencyValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueCurrency</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCurrencyValue</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResValue</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>