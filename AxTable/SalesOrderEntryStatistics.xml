<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesOrderEntryStatistics</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesOrderEntryStatistics extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(ItemId _itemId, CustAccount _custAccount, WorkerSalesResponsible _workerSalesResponsible, TransDate _transDate )
    {
        boolean ret = true;

        if (!SalesOrderEntryStatistics::exist(_itemId, _custAccount, _workerSalesResponsible, _transDate))
        {
            ret = checkFailed(strFmt(SalesOrderEntryStatistics::txtNotExist(), _itemId, _custAccount, _workerSalesResponsible, _transDate));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrderEntry</Name>
				<Source><![CDATA[
    public static void createOrderEntry(SalesLine   salesLine)
    {
        SalesOrderEntryStatistics   salesOrderEntryStatistics;
        SalesQty                    salesQty;
        SalesAmount                 salesAmount;
        CostAmount                  costAmount;
        ItemGroupId                 itemGroupId;
        CustTable                   custTable;
        WorkerSalesResponsible      workerSalesResponsible;
        ItemId                      itemId = SalesOrderEntryStatistics::getItemIdFromSalesLine(salesLine);

        // Don't generate statistics for order lines with multiple deliveries as they are already included based on the delivery lines.
        if (salesLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            return;
        }

        salesQty                = salesLine.RemainSalesPhysical;
        salesAmount             = salesLine.amountMST(salesLine.calcLineAmount(salesQty));
        costAmount              = salesLine.calcCostAmount(salesQty);
        itemGroupId             = InventTable::find(itemId).itemGroupId();
        custTable               = CustTable::find(salesLine.CustAccount);
        workerSalesResponsible  = salesLine.salesTable().WorkerSalesResponsible;

        if (salesQty != 0 || salesAmount != 0 || costAmount != 0)
        {
            select firstonly forupdate salesOrderEntryStatistics
                where salesOrderEntryStatistics.ItemId                 == itemId                 &&
                      salesOrderEntryStatistics.CustAccount            == salesLine.CustAccount  &&
                      salesOrderEntryStatistics.WorkerSalesResponsible == workerSalesResponsible &&
                      salesOrderEntryStatistics.TransDate			   == DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            if (!salesOrderEntryStatistics.RecId)
            {
                salesOrderEntryStatistics.ItemId				 = itemId;
                salesOrderEntryStatistics.CustAccount			 = salesLine.CustAccount;
                salesOrderEntryStatistics.WorkerSalesResponsible = workerSalesResponsible;
                salesOrderEntryStatistics.TransDate				 = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                salesOrderEntryStatistics.ItemGroupId			 = itemGroupId;
                salesOrderEntryStatistics.StatisticsGroup		 = custTable.StatisticsGroup;
                salesOrderEntryStatistics.LineOfBusinessId		 = custTable.LineOfBusinessId;
                salesOrderEntryStatistics.SalesQty				 = salesQty;
                salesOrderEntryStatistics.SalesAmount			 = salesAmount;
                salesOrderEntryStatistics.CostAmount			 = costAmount;
                salesOrderEntryStatistics.insert();
            }
            else
            {
                salesOrderEntryStatistics.ItemGroupId       = itemGroupId;
                salesOrderEntryStatistics.StatisticsGroup   = custTable.StatisticsGroup;
                salesOrderEntryStatistics.LineOfBusinessId  = custTable.LineOfBusinessId;
                salesOrderEntryStatistics.SalesQty         += salesQty;
                salesOrderEntryStatistics.SalesAmount      += salesAmount;
                salesOrderEntryStatistics.CostAmount       += costAmount;

                if (salesOrderEntryStatistics.SalesQty      != 0 ||
                    salesOrderEntryStatistics.SalesAmount   != 0 ||
                    salesOrderEntryStatistics.CostAmount    != 0)
                {
                    salesOrderEntryStatistics.update();
                }
                else
                {
                    salesOrderEntryStatistics.delete();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOrderEntry</Name>
				<Source><![CDATA[
    public static void deleteOrderEntry(SalesLine   salesLine,
                                        CostAmount  deletedCostAmount = 0)
    {
        SalesOrderEntryStatistics   salesOrderEntryStatistics;
        SalesQty                    salesQty;
        SalesAmount                 salesAmount;
        CostAmount                  costAmount;
        ItemGroupId                 itemGroupId;
        CustTable                   custTable;
        WorkerSalesResponsible      workerSalesResponsible;
        ItemId                      itemId = SalesOrderEntryStatistics::getItemIdFromSalesLine(salesLine);

        // Don't generate statistics for order lines with multiple deliveries as they are already included based on the delivery lines.
        if (salesLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            return;
        }

        salesQty                = salesLine.RemainSalesPhysical;
        salesAmount             = salesLine.amountMST(salesLine.calcLineAmount(salesQty));
        itemGroupId             = InventTable::find(itemId).itemGroupId();
        custTable               = CustTable::find(salesLine.CustAccount);
        workerSalesResponsible  = salesLine.salesTable().WorkerSalesResponsible;

        if (prmisDefault(deletedCostAmount))
        {
            costAmount = salesLine.calcCostAmount(salesQty);
        }
        else
        {
            costAmount = deletedCostAmount;
        }

        if (salesQty != 0 || salesAmount != 0 || costAmount != 0)
        {
            select firstonly forupdate salesOrderEntryStatistics
                where salesOrderEntryStatistics.ItemId				   == itemId                 &&
                      salesOrderEntryStatistics.CustAccount			   == salesLine.CustAccount  &&
                      salesOrderEntryStatistics.WorkerSalesResponsible == workerSalesResponsible &&
                      salesOrderEntryStatistics.TransDate			   == DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            if (!salesOrderEntryStatistics.RecId)
            {
                salesOrderEntryStatistics.ItemId				 = itemId;
                salesOrderEntryStatistics.CustAccount			 = salesLine.CustAccount;
                salesOrderEntryStatistics.WorkerSalesResponsible = workerSalesResponsible;
                salesOrderEntryStatistics.TransDate				 = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                salesOrderEntryStatistics.ItemGroupId			 = itemGroupId;
                salesOrderEntryStatistics.StatisticsGroup		 = custTable.StatisticsGroup;
                salesOrderEntryStatistics.LineOfBusinessId		 = custTable.LineOfBusinessId;
                salesOrderEntryStatistics.SalesQty				-= salesQty;
                salesOrderEntryStatistics.SalesAmount			-= salesAmount;
                salesOrderEntryStatistics.CostAmount			-= costAmount;
                salesOrderEntryStatistics.insert();
            }
            else
            {
                salesOrderEntryStatistics.ItemGroupId       = itemGroupId;
                salesOrderEntryStatistics.StatisticsGroup   = custTable.StatisticsGroup;
                salesOrderEntryStatistics.LineOfBusinessId  = custTable.LineOfBusinessId;
                salesOrderEntryStatistics.SalesQty         -= salesQty;
                salesOrderEntryStatistics.SalesAmount      -= salesAmount;
                salesOrderEntryStatistics.CostAmount       -= costAmount;

                if (salesOrderEntryStatistics.SalesQty      != 0 ||
                    salesOrderEntryStatistics.SalesAmount   != 0 ||
                    salesOrderEntryStatistics.CostAmount    != 0)
                {
                    salesOrderEntryStatistics.update();
                }
                else
                {
                    salesOrderEntryStatistics.delete();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(ItemId _itemId, CustAccount _custAccount, WorkerSalesResponsible _workerSalesResponsible, TransDate _transDate )
    {
        boolean found;

        found = (select firstonly RecId from salesOrderEntryStatistics
					where salesOrderEntryStatistics.ItemId				   == _itemId &&
						  salesOrderEntryStatistics.CustAccount			   == _custAccount &&
                          salesOrderEntryStatistics.WorkerSalesResponsible == _workerSalesResponsible &&
						  salesOrderEntryStatistics.TransDate			   == _transDate).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>SalesOrderEntryStatistics</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>SalesOrderEntryStatistics</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>SalesOrderEntryStatistics</c> table; otherwise, an empty record.
    /// </returns>
    public static SalesOrderEntryStatistics find(
        recId                   _recId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        SalesOrderEntryStatistics salesOrderEntryStatistics;

        salesOrderEntryStatistics.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            salesOrderEntryStatistics.concurrencyModel(_concurrencyModel);
        }

        select firstonly salesOrderEntryStatistics
            where
                salesOrderEntryStatistics.RecId == _recId;

        return salesOrderEntryStatistics;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItemCustSalesInfo</Name>
				<Source><![CDATA[
    public static SalesOrderEntryStatistics findByItemCustSalesInfo(
        ItemId				    _itemId,
        CustAccount			    _custAccount,
        WorkerSalesResponsible  _workerSalesResponsible,
        TransDate				_transDate ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        SalesOrderEntryStatistics salesOrderEntryStatistics;

        salesOrderEntryStatistics.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            salesOrderEntryStatistics.concurrencyModel(_concurrencyModel);
        }

        select firstonly salesOrderEntryStatistics
            where salesOrderEntryStatistics.ItemId				   == _itemId &&
                  salesOrderEntryStatistics.CustAccount			   == _custAccount &&
                  salesOrderEntryStatistics.WorkerSalesResponsible == _workerSalesResponsible &&
                  salesOrderEntryStatistics.TransDate			   == _transDate;

        return salesOrderEntryStatistics;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS103280";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderEntry</Name>
				<Source><![CDATA[
    public static void updateOrderEntry(SalesLine   salesLine,
                                        SalesLine   orgSalesLine,
                                        CostAmount  orgCostAmount)
    {
        SalesOrderEntryStatistics   salesOrderEntryStatistics;
        SalesQty                    salesQty;
        SalesAmount                 salesAmount;
        CostAmount                  costAmount;
        SalesQty                    orgSalesQty;
        SalesAmount                 orgSalesAmount;
        CostAmount                  orgCostAmountAux;
        ItemGroupId                 itemGroupId;
        CustTable                   custTable;
        WorkerSalesResponsible      workerSalesResponsible;
        ItemId                      itemId = SalesOrderEntryStatistics::getItemIdFromSalesLine(salesLine);

        // Don't generate statistics for order lines with multiple deliveries as they are already included based on the delivery lines.
        if (salesLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            return;
        }

        salesQty       = salesLine.RemainSalesPhysical;
        salesAmount    = salesLine.amountMST(salesLine.calcLineAmount(salesQty));
        costAmount     = salesLine.calcCostAmount(salesQty);

        orgSalesQty    = orgSalesLine.RemainSalesPhysical;
        orgSalesAmount = orgSalesLine.amountMST(orgSalesLine.calcLineAmount(orgSalesQty));

        salesQty      -= orgSalesQty;
        salesAmount   -= orgSalesAmount;

        if (orgCostAmount == 0)
        {
            orgCostAmountAux = orgSalesLine.calcCostAmount(orgSalesQty);

            if (orgCostAmountAux == costAmount)
            {
                costAmount -= orgCostAmountAux;
            }
            else
            {
                costAmount -= orgCostAmount;
            }
        }
        else
        {
            costAmount -= orgCostAmount;
        }

        itemGroupId             = InventTable::find(itemId).itemGroupId();
        custTable               = CustTable::find(salesLine.CustAccount);
        workerSalesResponsible  = salesLine.salesTable().WorkerSalesResponsible;

        if (salesQty != 0 || salesAmount != 0 || costAmount != 0)
        {
            select firstonly forupdate salesOrderEntryStatistics
                where salesOrderEntryStatistics.ItemId				   == itemId                  &&
                      salesOrderEntryStatistics.CustAccount			   == salesLine.CustAccount   &&
                      salesOrderEntryStatistics.WorkerSalesResponsible == workerSalesResponsible  &&
                      salesOrderEntryStatistics.TransDate			   == DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            if (!salesOrderEntryStatistics.RecId)
            {
                salesOrderEntryStatistics.ItemId				 = itemId;
                salesOrderEntryStatistics.CustAccount			 = salesLine.CustAccount;
                salesOrderEntryStatistics.WorkerSalesResponsible = workerSalesResponsible;
                salesOrderEntryStatistics.TransDate				 = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                salesOrderEntryStatistics.ItemGroupId			 = itemGroupId;
                salesOrderEntryStatistics.StatisticsGroup		 = custTable.StatisticsGroup;
                salesOrderEntryStatistics.LineOfBusinessId		 = custTable.LineOfBusinessId;
                salesOrderEntryStatistics.SalesQty				 = salesQty;
                salesOrderEntryStatistics.SalesAmount			 = salesAmount;
                salesOrderEntryStatistics.CostAmount			 = costAmount;
                salesOrderEntryStatistics.insert();
            }
            else
            {
                salesOrderEntryStatistics.ItemGroupId       = itemGroupId;
                salesOrderEntryStatistics.StatisticsGroup   = custTable.StatisticsGroup;
                salesOrderEntryStatistics.LineOfBusinessId  = custTable.LineOfBusinessId;
                salesOrderEntryStatistics.SalesQty         += salesQty;
                salesOrderEntryStatistics.SalesAmount      += salesAmount;
                salesOrderEntryStatistics.CostAmount       += costAmount;

                if (salesOrderEntryStatistics.SalesQty      != 0  ||
                    salesOrderEntryStatistics.SalesAmount   != 0  ||
                    salesOrderEntryStatistics.CostAmount    != 0)
                {
                    salesOrderEntryStatistics.update();
                }
                else
                {
                    salesOrderEntryStatistics.delete();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemIdFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines item ID based on the <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_salesLine">
    ///    The <c>SalesLine</c> record.
    /// </param>
    /// <returns>
    ///    Item ID determined based on the <c>SalesLine</c> record.
    /// </returns>
    /// <remarks>
    ///    This is an extension point.
    /// </remarks>
    public static ItemId getItemIdFromSalesLine(SalesLine _salesLine)
    {
        ItemId itemId;

        itemId = _salesLine.ItemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<CountryRegionCodes>SE</CountryRegionCodes>
	<DeveloperDocumentation>@SYS123639</DeveloperDocumentation>
	<Label>@SYS97220</Label>
	<SingularLabel>@SYS97220</SingularLabel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>CustAccount</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ItemCustIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesResponsible</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesResponsible</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amounts</Name>
			<Label>@SYS75670</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BusinessData</Name>
			<Label>@SYS22528</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineOfBusinessId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS14428</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Sales</Name>
			<Label>@SYS54441</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesResponsible</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatisticsGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LineOfBusinessId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustLineOfBusinessId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatisticsGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustStatGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerSalesResponsible</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WorkerSalesResponsible</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemCustIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkerSalesResponsible</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustItemIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkerSalesResponsible</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustStatisticsGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustStatisticsGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustStatisticsGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesOrderEntryStatistics</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatisticsGroup</Name>
					<SourceEDT>CustStatGroupId</SourceEDT>
					<Field>StatisticsGroup</Field>
					<RelatedField>CustStatisticsGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesOrderEntryStatistics</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventItemGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesOrderEntryStatistics</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemGroupId</Name>
					<SourceEDT>ItemGroupId</SourceEDT>
					<Field>ItemGroupId</Field>
					<RelatedField>ItemGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesOrderEntryStatistics</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LineOfBusiness</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LineOfBusiness</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LineOfBusiness</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesOrderEntryStatistics</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineOfBusinessId</Name>
					<SourceEDT>CustLineOfBusinessId</SourceEDT>
					<Field>LineOfBusinessId</Field>
					<RelatedField>LineOfBusinessId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerSalesResponsible_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerSalesResponsible</Name>
					<Field>WorkerSalesResponsible</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>