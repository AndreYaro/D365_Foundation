<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CLMIntegrationContractDocumentRelationship</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CLMIntegrationContractDocumentRelationship extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByDocument</Name>
				<Source><![CDATA[
    public static CLMIntegrationContractDocumentRelationship findByDocument(Common _record, boolean _forUpdate = false)
    {
        CLMIntegrationContractDocumentRelationship contractDocumentRelationship;

        if (_record)
        {
            if (_forUpdate)
            {
                contractDocumentRelationship.selectForUpdate(_forUpdate);
            }

            select firstonly * from contractDocumentRelationship
                where contractDocumentRelationship.DocumentTableId == _record.TableId
                    && contractDocumentRelationship.DocumentRefRecId == _record.RecId
                    && contractDocumentRelationship.DocumentDataAreaId == _record.DataAreaId;
        }

        return contractDocumentRelationship;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByContract</Name>
				<Source><![CDATA[
    public static CLMIntegrationContractDocumentRelationship findByContract(RecId _contractRecId, TableId _documentTableId, boolean _forupdate = false)
    {
        CLMIntegrationContractDocumentRelationship contractDocumentRelationship;

        if (_contractRecId)
        {
            if (_forUpdate)
            {
                contractDocumentRelationship.selectForUpdate(_forUpdate);
            }

            select firstonly contractDocumentRelationship
                where contractDocumentRelationship.Contract == _contractRecId
                    && contractDocumentRelationship.DocumentTableId == _documentTableId;
        }

        return contractDocumentRelationship;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfRecordsByContract</Name>
				<Source><![CDATA[
    internal static int numOfRecordsByContract(RecId _contractRecId, TableId _documentTableId)
    {
        int number;

        if (_contractRecId)
        {
            CLMIntegrationContractDocumentRelationship contractDocumentRelationship;

            select count(RecId) from contractDocumentRelationship
                where contractDocumentRelationship.Contract == _contractRecId
                    && contractDocumentRelationship.DocumentTableId == _documentTableId;
            
            number = contractDocumentRelationship.RecId;
        }
        
        return number;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllByContract</Name>
				<Source><![CDATA[
    public static List findAllByContract(RecId _contractRecId, TableId _documentTableId, boolean _forupdate = false)
    {
        List allRecords = new List(Types::Record);
        CLMIntegrationContractDocumentRelationship contractDocumentRelationship;

        if (_contractRecId)
        {
            if (_forUpdate)
            {
                contractDocumentRelationship.selectForUpdate(_forUpdate);
            }

            while select contractDocumentRelationship
                where contractDocumentRelationship.Contract == _contractRecId
                    && contractDocumentRelationship.DocumentTableId == _documentTableId
            {
                allRecords.addEnd(contractDocumentRelationship);
            }
        }

        return allRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentRelationshipExist</Name>
				<Source><![CDATA[
    public static boolean documentRelationshipExist(RecId _contractRecId, TableId _documentTableId)
    {
        CLMIntegrationContractDocumentRelationship contractDocumentRelationship;

        if (!_contractRecId)
        {
            return false;
        }

        select firstonly RecId from contractDocumentRelationship
            where contractDocumentRelationship.Contract == _contractRecId
                && contractDocumentRelationship.DocumentTableId == _documentTableId;

        return contractDocumentRelationship.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CLMIntegration</ConfigurationKey>
	<DeveloperDocumentation>@CLMIntegration:ContractDocumentRelationshipDevDoc</DeveloperDocumentation>
	<Label>@CLMIntegration:ContractDocumentRelationship</Label>
	<TableGroup>Reference</TableGroup>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Contract</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Contract</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CLMIntegrationContractTableRefRecId</ExtendedDataType>
			<FeatureClass>CLMIntegrationFeature</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DocumentTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<FeatureClass>CLMIntegrationFeature</FeatureClass>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DocumentRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<FeatureClass>CLMIntegrationFeature</FeatureClass>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<FeatureClass>CLMIntegrationFeature</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DocumentIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>DocumentTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DocumentRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DocumentDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ContractIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Contract</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CLMIntegrationContractTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CLMIntegrationContractTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Contract</Name>
					<Field>Contract</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchAgreementHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PurchAgreementHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DocumentTableId</Name>
					<Field>DocumentTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DocumentRefRecId</Name>
					<Field>DocumentRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DocumentTableId</Name>
					<Field>DocumentTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DocumentRefRecId</Name>
					<Field>DocumentRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DocumentDataAreaId</Name>
					<Field>DocumentDataAreaId</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>