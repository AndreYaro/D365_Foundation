<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HRPDefaultSigningLimitRuleCompensationTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HRPDefaultSigningLimitRuleCompensationTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setLimitRuleJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills <c>HRPDefaultSigningLimitRuleCompensationTmp</c> with data from the <c>HcmJob</c> table
    /// </summary>
    /// <param name="_recIdsContainer">
    /// A packed list containing recIds for HcmJob
    /// </param>
    /// <returns>
    /// A <c>HRPDefaultSigningLimitRuleCompensationTmp</c>
    /// </returns>
    public static HRPDefaultSigningLimitRuleCompensationTmp setLimitRuleJob(container _recIdsContainer)
    {
        hcmJob                                     hcmJob;
        HRPDefaultSigningLimitRuleCompensationTmp  limitRuleCompensationSelected;

        if (_recIdsContainer)
        {
            List selectedRecIds = List::create(_recIdsContainer);
            ListEnumerator listEnum = selectedRecIds.getEnumerator();
            
            while (listEnum.moveNext())
            {
                hcmJob = HcmJob::find(listEnum.current());

                limitRuleCompensationSelected.Compensation = hcmJob.JobId;
                limitRuleCompensationSelected.CompensationRecId = hcmJob.RecId;
                limitRuleCompensationSelected.insert();
            }
        }

        return limitRuleCompensationSelected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLimitRuleCompensation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills <c>HRPDefaultSigningLimitRuleCompensationTmp</c> with data from the <c>HcmCompensationLevel</c> table
    /// </summary>
    /// <param name="_recIdsContainer">
    /// A packed list containing recIds for HcmCompensationLevel
    /// </param>
    /// <returns>
    /// A <c>HRPDefaultSigningLimitRuleCompensationTmp</c>
    /// </returns>
    public static HRPDefaultSigningLimitRuleCompensationTmp setLimitRuleCompensation(container _recIdsContainer)
    {
        HcmCompensationLevel                       hcmCompensationLevel;
        HRPDefaultSigningLimitRuleCompensationTmp  limitRuleCompensationSelected;

        if (_recIdsContainer)
        {
            List selectedRecIds = List::create(_recIdsContainer);
            ListEnumerator listEnum = selectedRecIds.getEnumerator();
            
            while (listEnum.moveNext())
            {
                hcmCompensationLevel = HcmCompensationLevel::find(listEnum.current());

                LimitRuleCompensationSelected.Compensation = hcmCompensationLevel.CompensationLevelId;
                LimitRuleCompensationSelected.CompensationRecId = hcmCompensationLevel.RecId;
                LimitRuleCompensationSelected.insert();
            }
        }

        return limitRuleCompensationSelected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLimitRuleJobRemaining</Name>
				<Source><![CDATA[
    public static HRPDefaultSigningLimitRuleCompensationTmp setLimitRuleJobRemaining(HRPDefaultSigningLimitRuleCompensationTmp _selectedJobs)
    {
        HcmJob                                    hcmJob;
        HRPDefaultSigningLimitRuleCompensationTmp remainingJobs;

        while select JobId, RecId from hcmJob
            notexists join RecId from _selectedJobs
                where _selectedJobs.CompensationRecId == hcmJob.RecId
        {
            remainingJobs.Compensation = hcmJob.JobId;
            remainingJobs.CompensationRecId = hcmJob.RecId;
            remainingJobs.insert();
        }

        return remainingJobs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLimitRuleCompensationRemaining</Name>
				<Source><![CDATA[
    public static HRPDefaultSigningLimitRuleCompensationTmp setLimitRuleCompensationRemaining(HRPDefaultSigningLimitRuleCompensationTmp _selectedCompensation)
    {
        HcmCompensationLevel                      hcmCompensation;
        HRPDefaultSigningLimitRuleCompensationTmp remainingCompensation;

        while select CompensationLevelId, RecId from hcmCompensation
            notexists join RecId from _selectedCompensation
                where _selectedCompensation.CompensationRecId == hcmCompensation.RecId
        {
            remainingCompensation.Compensation = hcmCompensation.CompensationLevelId;
            remainingCompensation.CompensationRecId = hcmCompensation.RecId;
            remainingCompensation.insert();
        }

        return remainingCompensation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Compensation</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<StringSize>100</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CompensationRecId</Name>
			<ExtendedDataType>RecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Compensation</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Compensation</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>