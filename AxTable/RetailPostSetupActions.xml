<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPostSetupActions</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class RetailPostSetupActions extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByClassMethod</Name>
				<Source><![CDATA[
    internal static RetailPostSetupActions findByClassMethod(RetailPostSetupActionName _className, RetailPostSetupActionName _methodName, boolean _forUpdate = false)
    {
        RetailPostSetupActions retailPostSetupActions;

        select firstonly retailPostSetupActions
            where retailPostSetupActions.ClassName == _className &&
                  retailPostSetupActions.MethodName  == _methodName;
        retailPostSetupActions.selectForUpdate(_forUpdate);

        return retailPostSetupActions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markRetailPostSetupActionAsProcessed</Name>
				<Source><![CDATA[
    internal void markRetailPostSetupActionAsProcessed()
    {
        #OCCRetryCount
        // Re-read the record because it might have been changed since it was read
        this.reread();

        try
        {
            if (this.recId > 0 && this.RetailPostSetupActionStatus == RetailPostSetupActionStatusType::Queued)
            {
                ttsbegin;
                this.selectForUpdate(true);
                this.RetailPostSetupActionStatus = RetailPostSetupActionStatusType::Processed;
                this.update();
                ttscommit;
            }
        }
        catch (Exception::UpdateConflict)
        {
            System.Exception excep;

            RetailSetupLogger retailSetupLogger = new RetailSetupLogger();
            // If there is a conflict, just log and do nothing
            retailSetupLogger.logMarkRetailPostSetupActionUpdateConflict(excep);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerRetailPostSetupAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// The <c>RegisterRetailPostSetupAction </c> upserts the state of action.
    /// </summary>
    /// <param name = "_classname">name of the class</param>
    /// <param name = "_methodName">name of the method</param>
    /// <param name = "_retailPostSetupActionStatusType">State of the action</param>
    internal static void registerRetailPostSetupAction(RetailPostSetupActionName _classname, RetailPostSetupActionName _methodName, RetailPostSetupActionStatusType _retailPostSetupActionStatusType)
    {
        RetailPostSetupActions retailPostSetupActions = RetailPostSetupActions::findByClassMethod(_classname, _methodName, true);

        ttsbegin;
        retailPostSetupActions.ClassName = _classname;
        retailPostSetupActions.MethodName = _methodName;
        retailPostSetupActions.RetailPostSetupActionStatus = _retailPostSetupActionStatusType;
        retailPostSetupActions.write();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCommerceScheduler</Name>
				<Source><![CDATA[
    internal static void initializeCommerceScheduler()
    {
        System.Exception ex;
        RetailPostSetupActions retailPostSetupActions = RetailPostSetupActions::findByClassMethod(classStr(RetailSetup), methodStr(RetailSetup, initializeCommerceScheduler));

        if (!retailPostSetupActions || retailPostSetupActions.RetailPostSetupActionStatus == RetailPostSetupActionStatusType::Processed)
        {
            return;
        }

        RetailCDXSeedDataAX7 seed = new RetailCDXSeedDataAX7(false /* clearPrevData */);
        seed.paramIsExecutedFromUI(false);
        try
        {
            if (RetailCdxAutoInitializeCommerceSchedulerFeatureExposure::isEnabled())
            {
                seed.paramUpdateSubjobsonly(false);
                seed.run();
            }
            else if (RetailCdxAutoUpdateSubjobsToggle::instance().isEnabled()) // Even if the auto initialize feature is not enabled, we still update fields in subjobs
            {
                seed.paramUpdateSubjobsonly(true);
                seed.run();
            }
        }
        catch (ex)
        {
            if (seed.paramUpdateSubjobsonly())
            {
                error('@Retail:RetailPostSetupActionsFailedToUpdateDistributionSchedule');
            }
            else
            {
                error('@Retail:RetailPostSetupActionsFailedToRunInitailizeCommerceScheduler');
            }
        }
        finally
        {
            retailPostSetupActions.markRetailPostSetupActionAsProcessed();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateExtensibleEnumMetadata</Name>
				<Source><![CDATA[
    internal static void populateExtensibleEnumMetadata()
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;
        System.Exception ex;
        RetailSetupLogger retailSetupLogger;

        RetailPostSetupActions retailPostSetupActions = RetailPostSetupActions::findByClassMethod(classStr(RetailSetup), methodStr(RetailSetup, populateExtensibleEnumMetadata));

        if (!retailPostSetupActions || retailPostSetupActions.RetailPostSetupActionStatus == RetailPostSetupActionStatusType::Processed)
        {
            return;
        }

        retailSetupLogger = new RetailSetupLogger();

        try
        {
            retailSetupLogger.logPopulateExtensibleEnumMetadataStart();

            RetailEnumValueTable::populateExtensibleEnumMetadata();
        }
        catch (xppEx)
        {
            ex = xppEx;
            retailSetupLogger.logPopulateExtensibleEnumMetadataFailure(ex);
            error('@Retail:RetailPostSetupActionsFailedToRunExtensibleEnumeration');

        }
        catch (ex)
        {
            retailSetupLogger.logPopulateExtensibleEnumMetadataFailure(ex);
            error('@Retail:RetailPostSetupActionsFailedToRunExtensibleEnumeration');
        }
        finally
        {
            retailPostSetupActions.markRetailPostSetupActionAsProcessed();
            retailSetupLogger.logPopulateExtensibleEnumMetadataFinish(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAnyActionQueued</Name>
				<Source><![CDATA[
    internal static boolean hasAnyActionQueued(RetailPostSetupActionName className, RetailPostSetupActionName methodName)
    {
        RetailPostSetupActions retailPostSetupActions;

        select firstonly RecId from retailPostSetupActions
            where  retailPostSetupActions.RetailPostSetupActionStatus == RetailPostSetupActionStatusType::Queued
                && retailPostSetupActions.MethodName == methodName
                && retailPostSetupActions.ClassName == className;

        return retailPostSetupActions.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<TitleField1>ClassName</TitleField1>
	<TitleField2>MethodName</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ChannelManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ClassName</Name>
			<ExtendedDataType>RetailPostSetupActionName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MethodName</Name>
			<ExtendedDataType>RetailPostSetupActionName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RetailPostSetupActionStatus</Name>
			<ExtendedDataType>RetailPostSetupActionStatus</ExtendedDataType>
			<EnumType>RetailPostSetupActionStatusType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Idx_Action</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ClassName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MethodName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>