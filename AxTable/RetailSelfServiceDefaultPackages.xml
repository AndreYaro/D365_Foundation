<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSelfServiceDefaultPackages</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// Table <c>RetailSelfServiceDefaultPackages</c> is created to store the default self-service package references on global level, company level, and store level.
/// </summary>
public class RetailSelfServiceDefaultPackages extends Common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findOrCreateDefaultPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the default self-service package from the merged packages table. If not, create it.
    /// </summary>
    /// <param name = "mergedPackagesRecord">The record from table <c>RetailSelfServiceMergedPackages</c>.</param>
    /// <param name = "tableIdentifier">The table identifier.</param>
    /// <param name = "tableReferenceId">The table reference identifier.</param>
    /// <returns>A record from <c>RetailSelfServiceDefaultPackages</c> that matches the reference given from the parameters.</returns>
    internal static RetailSelfServiceDefaultPackages findOrCreateDefaultPackage(
        RetailSelfServiceMergedPackages mergedPackagesRecord, TableId tableIdentifier, RefRecId tableReferenceId)
    {
        RetailSelfServiceDefaultPackages defaultPackage = RetailSelfServiceDefaultPackages::findDefaultPackage(
            tableIdentifier, mergedPackagesRecord.PackageType, tableReferenceId);

        if (!defaultPackage)
        {
            defaultPackage.initValue();
            defaultPackage.MergedSelfServicePackageReference = mergedPackagesRecord.RecId;
            defaultPackage.TableIdentifier = tableIdentifier;
            defaultPackage.TableReferenceId = tableReferenceId;
            defaultPackage.insert();
        }

        return defaultPackage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the self-service default package.
    /// </summary>
    /// <param name = "tableIdentifier">The table identifier.</param>
    /// <param name = "packageType">The self-service package type.</param>
    /// <param name = "tableRecordId">The table reference identifier.</param>
    /// <returns>A record that matches the given parameters.</returns>
    internal static RetailSelfServiceDefaultPackages findDefaultPackage(TableId tableIdentifier, PackageType packageType, RefRecId tableRecordId = 0)
    {
        RetailSelfServiceDefaultPackages selfServiceDefaultPackages;
        RetailSelfServiceMergedPackages mergedPackagesTable;

        select firstonly selfServiceDefaultPackages
            where selfServiceDefaultPackages.TableIdentifier == tableIdentifier
                && selfServiceDefaultPackages.TableReferenceId == tableRecordId
            join mergedPackagesTable
            where mergedPackagesTable.RecId == selfServiceDefaultPackages.MergedSelfServicePackageReference
                && mergedPackagesTable.PackageType == packageType;

        return selfServiceDefaultPackages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record.
    /// </summary>
    public void insert()
    {
        super();
        this.cascadeUpdateDefaultPackageValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a record.
    /// </summary>
    public void update()
    {
        super();
        this.cascadeUpdateDefaultPackageValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cascadeUpdateDefaultPackageValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cascade update package  values.
    /// </summary>
    private void cascadeUpdateDefaultPackageValues()
    {
        RetailSelfServiceMergedPackages mergedPackagesRecord = RetailSelfServiceMergedPackages::findByRecId(
            this.MergedSelfServicePackageReference);

        if (mergedPackagesRecord.RecId > 0)
        {
            PackageType packageType = mergedPackagesRecord.PackageType;

            if (this.TableIdentifier == tableNum(RetailSelfServiceDefaultPackages))
            {
                // Global default package. Basically update every package reference to default ones for these
                // particular package types.
                switch (packageType)
                {
                    case PackageType::HardwareStation:
                        RetailSelfServiceDefaultPackages::setDefaultStoreHardwareStationPackage(this.MergedSelfServicePackageReference);
                        break;
                    case PackageType::RetailStoreScaleUnit:
                        RetailSelfServiceDefaultPackages::setDefaultRSSUPackage(this.MergedSelfServicePackageReference);
                        break;
                    case PackageType::HardwarePeripheralSimulator:
                        RetailSelfServiceDefaultPackages::setDefaultPeripheralPackage(this.MergedSelfServicePackageReference);
                        break;
                    case PackageType::ModernPosWindowsPhone:
                        RetailSelfServiceDefaultPackages::setDefaultDeviceTypeBasePackage(this.MergedSelfServicePackageReference, RetailDeviceTypeBase::ModernPOSWindowsPhone);
                        break;
                    case PackageType::ModernPosAndroid:
                        RetailSelfServiceDefaultPackages::setDefaultDeviceTypeBasePackage(this.MergedSelfServicePackageReference, RetailDeviceTypeBase::ModernPOSAndroid);
                        break;
                    case PackageType::ModernPosiOS:
                        RetailSelfServiceDefaultPackages::setDefaultDeviceTypeBasePackage(this.MergedSelfServicePackageReference, RetailDeviceTypeBase::ModernPOSiOS);
                        break;
                }
            }
            else if (this.TableIdentifier == tableNum(CompanyInfo))
            {
                // Company level default package.
                RetailSelfServiceDefaultPackages::setDefaultStorePackagesFromCompany(this.MergedSelfServicePackageReference,
                this.TableReferenceId, packageType);
            }
            else if (this.TableIdentifier == tableNum(RetailStoreTable))
            {
                // Store level default package.
                switch (packageType)
                {
                    case PackageType::ModernPosWithoutOffline:
                        RetailSelfServiceDefaultPackages::setDefaultPOSPackageFromStore(this.MergedSelfServicePackageReference, this.TableReferenceId);
                        break;
                    case PackageType::ModernPosWithOffline:
                        RetailSelfServiceDefaultPackages::setDefaultPOSWithOfflinePackageFromStore(this.MergedSelfServicePackageReference, this.TableReferenceId);
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultStoreHardwareStationPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default self-service package for hardware station.
    /// </summary>
    /// <param name = "mergedPackagesRecordId">The merged package reference identifier.</param>
    private static void setDefaultStoreHardwareStationPackage(RefRecId mergedPackagesRecordId)
    {
        // Legacy logic: table RetailSharedParameters.updateDefaultSelfServicePackages()
        RetailStoreHardwareStationTable hwStationTable;

        update_recordset hwStationTable
                setting MergedSelfServicePackageReference = mergedPackagesRecordId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultRSSUPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default self-service package for store system.
    /// </summary>
    /// <param name = "mergedPackagesRecordId">The merged package reference identifier.</param>
    private static void setDefaultRSSUPackage(RefRecId mergedPackagesRecordId)
    {
        // Legacy logic: table RetailSharedParameters.updateDefaultSelfServicePackages()
        RetailConnDatabaseProfile rssuDatabase;

        while select forupdate rssuDatabase
        {
            try
            {
                boolean recordIsRssu = RetailDeploymentUtility::isStoreSystemSupported(rssuDatabase);

                if (recordIsRssu)
                {
                    rssuDatabase.MergedSelfServicePackageReference = mergedPackagesRecordId;
                    rssuDatabase.update();
                }
            }
            catch (Exception::CLRError)
            {
                System.Exception clrException = RetailUtilities::getLatestClrException();
                str exceptionMessage = clrException.get_Message();
                str stackTrace = clrException.get_StackTrace();

                Global::warning(strFmt("@RetailSelfServiceInstaller:FailedApplyDefaultRssuPackage", rssuDatabase.Name, exceptionMessage));

                CommerceHQEventSource logger = CommerceHQEventSource::Log;
                logger.EventWriteSelfServiceUpdateChannelDatabaseFailed(
                    rssuDatabase.Name, exceptionMessage, stackTrace);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultPeripheralPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default self-service package for virtual peripherals.
    /// </summary>
    /// <param name = "mergedPackagesRecordId">The merged package reference identifier.</param>
    private static void setDefaultPeripheralPackage(RefRecId mergedPackagesRecordId)
    {
        // Legacy logic: table RetailSharedParameters.updateDefaultSelfServicePackages()
        RetailHardwareProfile hwProfileTable;

        while select forupdate hwProfileTable
        {
            try
            {
                ttsbegin;

                hwProfileTable.MergedSelfServicePackageReference = mergedPackagesRecordId;
                hwProfileTable.update();

                ttscommit;
            }
            catch (Exception::CLRError)
            {
                System.Exception clrException = RetailUtilities::getLatestClrException();
                str exceptionMessage = clrException.get_Message();
                str stackTrace = clrException.get_StackTrace();

                Global::warning(strFmt("@RetailSelfServiceInstaller:FailedApplyDefaultVirtualPeripheralPackage", hwProfileTable.profileId, exceptionMessage));

                CommerceHQEventSource logger = CommerceHQEventSource::Log;
                logger.EventWriteSelfServiceUpdateVirtualPeripheralFailed(
                    hwProfileTable.profileId, exceptionMessage, stackTrace);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDeviceTypeBasePackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default self-service package for POS.
    /// </summary>
    /// <param name = "mergedPackagesRecordId">The merged package reference identifier.</param>
    /// <param name = "deviceType">The device type.</param>
    private static void setDefaultDeviceTypeBasePackage(RefRecId mergedPackagesRecordId, RetailDeviceTypeBase deviceType)
    {
        // Legacy logic: table RetailSharedParameters.updateDefaultSelfServicePackages()
        RetailDeviceTypes deviceTypeTable;
        RetailDevice deviceTable;

        while select forupdate deviceTable
            join deviceTypeTable
            where deviceTable.Type == deviceTypeTable.RecId
                && deviceTypeTable.Type == deviceType
        {
            deviceTable.MergedSelfServicePackageReference = mergedPackagesRecordId;
            deviceTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultPOSPackageFromStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default self-service POS without offline packages on the devices associated with a given store reference.
    /// </summary>
    /// <param name = "mergedPackagesRecordId">The merged package reference identifier.</param>
    /// <param name = "storeRecId">The store reference identifier.</param>
    private static void setDefaultPOSPackageFromStore(RefRecId mergedPackagesRecordId, RefRecId storeRecId)
    {
        // Legacy logic: table RetailDefaultChannelPackages.updateDefaultPackageForAssociatedDevices
        RetailDevice deviceTable;
        RetailDeviceTypes deviceTypeTable;
        RetailTerminalTable terminalTable;

        while select forupdate deviceTable
                join deviceTypeTable
                where deviceTable.Type == deviceTypeTable.RecId
                    && deviceTypeTable.Type == RetailDeviceTypeBase::ModernPOS
                join terminalTable
                where terminalTable.StoreRecId == storeRecId
                    && deviceTable.Terminal == terminalTable.terminalId
                    && terminalTable.OfflineDatabaseProfile == 0
        {
            deviceTable.MergedSelfServicePackageReference = mergedPackagesRecordId;
            deviceTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultPOSWithOfflinePackageFromStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default self-service POS with offline packages on the devices associated with a given store reference.
    /// </summary>
    /// <param name = "mergedPackagesRecordId">The merged package reference identifier.</param>
    /// <param name = "storeRecId">The store reference identifier.</param>
    private static void setDefaultPOSWithOfflinePackageFromStore(RefRecId mergedPackagesRecordId, RefRecId storeRecId)
    {
        // Legacy logic: table RetailDefaultChannelPackages.updateDefaultPackageForAssociatedDevices
        RetailDevice deviceTable;
        RetailDeviceTypes deviceTypeTable;
        RetailTerminalTable terminalTable;

        while select forupdate deviceTable
                join deviceTypeTable
                where deviceTable.Type == deviceTypeTable.RecId
                    && deviceTypeTable.Type == RetailDeviceTypeBase::ModernPOS
                join terminalTable
                where terminalTable.StoreRecId == storeRecId
                    && deviceTable.Terminal == terminalTable.terminalId
                    && terminalTable.OfflineDatabaseProfile > 0
        {
            deviceTable.MergedSelfServicePackageReference = mergedPackagesRecordId;
            deviceTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultStorePackagesFromCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the default store self-service packages on company associated with the store.
    /// </summary>
    /// <param name = "mergedPackagesRecordId">The merged service package reference.</param>
    /// <param name = "companyRecId">The company record identifier.</param>
    /// <param name = "packageType">The package type.</param>
    private static void setDefaultStorePackagesFromCompany(RefRecId mergedPackagesRecordId, RefRecId companyRecId, PackageType packageType)
    {
        // Legacy logic: table RetailDefaultCompanyPackages.UpdateAllStoresInCompany()
        
        RetailStoreTable storeTable;
        CompanyInfo companyInfo;

        while select storeTable
            join companyInfo
                where companyInfo.RecId == companyRecId
                && storeTable.inventLocationDataAreaId == companyInfo.DataArea
        {
            RetailSelfServiceDefaultPackages defaultPackage = RetailSelfServiceDefaultPackages::findDefaultPackage(
                tableNum(RetailStoreTable), packageType, storeTable.RecId);

            if (defaultPackage.RecId <= 0)
            {
                defaultPackage.initValue();
                defaultPackage.MergedSelfServicePackageReference = mergedPackagesRecordId;
                defaultPackage.TableIdentifier = tableNum(RetailStoreTable);
                defaultPackage.TableReferenceId = storeTable.RecId;
                defaultPackage.insert();
            }
            else
            {
                RecId defaultPackageRecId = defaultPackage.RecId;

                update_recordset defaultPackage
                setting
                    MergedSelfServicePackageReference = mergedPackagesRecordId
                where
                    defaultPackage.RecId == defaultPackageRecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the insertion or updates current record.
    /// </summary>
    /// <returns>True if validation successful, false otherwise.</returns>
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
    
        if (ret)
        {
            ret = this.validateWriteInternal();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteExt</Name>
				<Source><![CDATA[
    internal boolean validateWriteExt(boolean skipTableReferenceIdValidation = false)
    {
        return this.validateWriteInternal(skipTableReferenceIdValidation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteInternal</Name>
				<Source><![CDATA[
    private boolean validateWriteInternal(boolean skipTableReferenceIdValidation = false)
    {
        boolean ret = true;

        if (!skipTableReferenceIdValidation && this.TableReferenceId == 0)
        {
            if (this.TableIdentifier != tableNum(RetailSelfServiceDefaultPackages))
            {
                ret = Global::checkFailed("@RetailSelfServiceInstaller:TableIdMissing");
            }
        }

        RetailSelfServiceMergedPackages mergedPackagesTable = RetailSelfServiceMergedPackages::findByRecId(
                this.MergedSelfServicePackageReference);

        if (mergedPackagesTable.RecId <= 0)
        {
            ret = Global::checkFailed("@RetailSelfServiceInstaller:InvalidSelfServicePackage");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<Label>@RetailSelfServiceInstaller:RetailSelfServiceDefaultPackages</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<Modules>NotApplicable</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TableIdentifier</Name>
			<Label>@RetailSelfServiceInstaller:TableIdentifierField</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TableReferenceId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@RetailSelfServiceInstaller:TableReferenceIdField</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MergedSelfServicePackageReference</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@RetailSelfServiceInstaller:MergedPackageReference</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DefaultIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TableIdentifier</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableReferenceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MergedSelfServicePackageReference</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>RetailSelfServiceMergedPackages</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailSelfServiceMergedPackages</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MergedSelfServicePackageReference</Name>
					<Field>MergedSelfServicePackageReference</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailStoreTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableReferenceId</Name>
					<Field>TableReferenceId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableIdentifier</Name>
					<Field>TableIdentifier</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CompanyInfo</Name>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableReferenceId</Name>
					<Field>TableReferenceId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableIdentifier</Name>
					<Field>TableIdentifier</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>