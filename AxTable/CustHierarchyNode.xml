<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustHierarchyNode</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

public class CustHierarchyNode extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>partyName</Name>
				<Source><![CDATA[
    public display DirPartyName partyName()
    {
        DirPartyTable dirPartyTable = DirPartyTable::findRec(this.Party);

        return dirPartyTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CatalogId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the Id of the catalog.
    /// </summary>
    /// <param name = "_set">boolean to decide if the value is going to be set.</param>
    /// <param name = "_catalogId">The CatalogId.</param>
    /// <returns>
    ///    The Id of the catalog, if defined.
    /// </returns>
    public edit RetailCatalogId CatalogId(boolean _set, RetailCatalogId _catalogId )
    {
        CustHierarchyCatalog localCustHierarchyCatalog = CustHierarchyCatalog::find(this.CustHierarchyCatalogRefRecId);
        return localCustHierarchyCatalog.CatalogId(false, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the current fields' values before saving the data.
    /// </summary>
    /// <returns>True if the current values are valid; otherwise, false.</returns>
    [Hookable(false)]
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = this.validateNodeType() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts new or restores deleted customer hierarchy node
    /// </summary>
    public void insert()
    {
        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

        CustHierarchyNode node, custHierarchyActiveNode;

        // Count of active nodes for a party.
        select count(RecId) from custHierarchyActiveNode
            where custHierarchyActiveNode.Party == this.Party
                && custHierarchyActiveNode.VersionAdded > custHierarchyActiveNode.VersionRemoved;

        // Select node in update mode for a party.
        select forupdate firstonly node
            where node.CustHierarchyId == this.CustHierarchyId && node.Party == this.Party;

        // Check if node has no active entry in other customer hierarchy and current node is deleted.
        if (custHierarchyActiveNode.RecId == 0 && node && node.VersionAdded <= node.VersionRemoved)
        {
            CustHierarchy hierarchy = CustHierarchy::findByHierarchyId(this.CustHierarchyId);
            eventSource.EventWriteRestoreNodeForCustHierarchy(node.RecId, hierarchy.RecId);

            ttsbegin;

            CustHierarchyVersion version = CustHierarchyVersion::bumpVersion(this.CustHierarchyId,
                strFmt("@CustHierarchy:CustHierarchyNodeRestoredVersionDescription", this.Party));

            // Restore node in customer hierarchy.
            node.Role = this.Role;
            node.VersionAdded = version.Version;
            node.update();

            ttscommit;

            this.data(node);
        }
        else
        {
            CustHierarchyNode hierarchyNode;
            CustHierarchyPurpose hierarchyPurpose;

            Name hierarchyName;
            CustHierarchy hierarchy = CustHierarchy::findByHierarchyId(this.CustHierarchyId);
            hierarchyPurpose = hierarchy.Purpose;
            hierarchyName = hierarchy.Name;

            eventSource.EventWriteCheckNodeActiveExistenceInCustHierarchy(node.RecId);

            // Check if node is active mode or not in other customer hierarchies.
            select firstonly RecId, CustHierarchyId from hierarchyNode
                where hierarchyNode.Party == this.Party
                && hierarchyNode.VersionAdded >= hierarchyNode.VersionRemoved
                exists join hierarchy
                where  hierarchyNode.CustHierarchyId == hierarchy.CustHierarchyId
                    && hierarchy.Purpose == hierarchyPurpose;

            // If node is in active mode in other customer hierarchies then throw exception.
            if (hierarchyNode.RecId && this.CustHierarchyId != hierarchyNode.CustHierarchyId)
            {
                CustHierarchy existingHierarchy = CustHierarchy::findByHierarchyId(hierarchyNode.CustHierarchyId);
                eventSource.EventWriteAddNodeInCustHierarchyOperationFailed(hierarchyNode.RecId, existingHierarchy.RecId);
                throw error(strFmt("@CustHierarchy:UserAddedToOtherHierarchyFailedMessage", DirPartyTable::findRec(this.Party).Name, hierarchyName, existingHierarchy.Name));
            }
            else if (hierarchyNode.RecId && this.CustHierarchyId == hierarchyNode.CustHierarchyId) // If node is in active mode in same customer hierarchies then throw exception.
            {
                eventSource.EventWriteAddNodeInCustHierarchyOperationFailed(hierarchyNode.RecId, hierarchy.RecId);
                throw error(strFmt("@CustHierarchy:UserAddedToSameHierarchyFailedMessage", DirPartyTable::findRec(this.Party).Name, hierarchyName));
            }

            if (this.CustHierarchyCatalogRefRecId != 0)
            {
                CustHierarchyCatalog custHierarchyCatalog;
                select custHierarchyCatalog where custHierarchyCatalog.RecId == this.CustHierarchyCatalogRefRecId;

                if (custHierarchyCatalog.RecId == 0)
                {
                    throw error("@Retail:CustHierarchyCatalogNotAssignedToCustomerHierarchy");
                }
            }

            super();
        }

        if (RetailUpdateRetailCustTableCrossCompanyFlight::instance().isEnabled())
        {
            this.updateRetailCustTableCrossCompany(true, false);
        }
        else
        {
            this.updateRetailCustTableOnInsert();
        }

        if (this.Role == CustHierarchyNodeRole::Admin)
        {
            this.addWorkerToCustHierarchySellerChannelAddressBook();
        }
        else if (this.Role == CustHierarchyNodeRole::User)
        {
            this.removeWorkerFromCustHierarchySellerChannelAddressBook();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks customer hierarchy node as deleted by setting <c>VersionRemoved</c> field instead of physically deleting the record.
    /// </summary>
    public void delete()
    {
        if (this.Role == CustHierarchyNodeRole::Admin)
        {
            this.removeWorkerFromCustHierarchySellerChannelAddressBook();
        }

        if (RetailCustHierarchyNodeHardDeleteFlight::instance().isEnabled() && this.VersionRemoved > this.VersionAdded)
        {
            super();
        }
        else
        {
            CustHierarchyVersion version = CustHierarchyVersion::bumpVersion(this.CustHierarchyId, "@CustHierarchy:CustHierarchyNodeRemovedVersionDescription");
            this.VersionRemoved = version.Version;
            this.update();
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)) && this.Type == CustHierarchyNodeType::Customer)
        {
            if (RetailUpdateRetailCustTableCrossCompanyFlight::instance().isEnabled())
            {
                this.updateRetailCustTableCrossCompany(false, true);
            }
            else
            {
                this.updateRetailCustTableOnDelete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the current node's type on the hierarchy.
    /// </summary>
    /// <returns>True if the node is valid; otherwise, false.</returns>
    private boolean validateNodeType()
    {
        // Only customers are acceptable in the first release
        if (this.Type != CustHierarchyNodeType::Customer)
        {
            return checkFailed(strFmt("@CustHierarchy:CustHierarchyNodeTypeValidation", enum2Str(this.Type)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a customer hierarchy node by its RecId.
    /// </summary>
    /// <param name = "_recId">Record identification of the node.</param>
    /// <param name = "_forUpdate">Indication of a selection for update.</param>
    /// <param name="_concurrencyModel">The concurrency model option to use when reading the record.</param>
    /// <returns>The customer hierarchy node if it exists.</returns>
    internal static CustHierarchyNode findByRecId(RecId _recId, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustHierarchyNode custHierarchyNode;

        if (_recId)
        {
            custHierarchyNode.selectForUpdate(_forUpdate);

            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                custHierarchyNode.concurrencyModel(_concurrencyModel);
            }

            select firstonly custHierarchyNode
                where custHierarchyNode.RecId == _recId;
        }

        return custHierarchyNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByHierarchyAndEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find node by the identification of the hierarchy and email.
    /// </summary>
    /// <param name="_custHierarchyId">Identification of the customer hierarchy.</param>
    /// <param name="_email">Email to search.</param>
    /// <param name = "_forUpdate">Indication of a selection for update.</param>
    /// <param name="_concurrencyModel">The concurrency model option to use when reading the record.</param>
    /// <returns>The node matching the search criteria</returns>
    internal static CustHierarchyNode findByHierarchyAndEmail(CustHierarchyId _custHierarchyId,
                                                              Email _email,
                                                              boolean _forUpdate = false,
                                                              ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustHierarchyNode custHierarchyNode;
        CustHierarchy custHierarchy;
        DirPartyTable party;
        LogisticsElectronicAddress electronicAddress;

        if (_custHierarchyId && _email)
        {
            custHierarchyNode.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                custHierarchyNode.concurrencyModel(_concurrencyModel);
            }

            select firstonly custHierarchyNode where custHierarchyNode.CustHierarchyId == _custHierarchyId
            join party where party.RecId == custHierarchyNode.Party
            join electronicAddress where party.PrimaryContactEmail == electronicAddress.RecId
                && electronicAddress.Locator == _email;
        }

        return custHierarchyNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find node by the customer account number and data area id.
    /// </summary>
    /// <param name="_accountNum">Identification of the customer hierarchy.</param>
    /// <param name="_dataAreaId">The data area id.</param>
    /// <param name = "_forUpdate">Indication of a selection for update.</param>
    /// <returns>The hierarchy node matching the search criteria</returns>
    internal static CustHierarchyNode findByAccountNum(AccountNum _accountNum, DataAreaId _dataAreaId, boolean _forUpdate = false)
    {
        CustHierarchyNode custHierarchyNode;
        RetailCustTable retailCustTable;

        if (_accountNum && _dataAreaId)
        {
            custHierarchyNode.selectForUpdate(_forUpdate);

            changecompany(_dataAreaId)
            {
                select firstonly custHierarchyNode
                    exists join retailCustTable
                        where retailCustTable.accountNum == _accountNum &&
                        retailCustTable.B2BCustomerHierarchyNode == custHierarchyNode.RecId;
            }
        }

        return custHierarchyNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNodeToHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a new node to a customer hierarchy.
    /// </summary>
    /// <param name = "_custHierarchyId">Identification of the hierarchy.</param>
    /// <param name = "_parentNode">Parent node.</param>
    /// <param name = "_party">Party record id.</param>
    /// <param name = "_type">Node type.</param>
    /// <param name = "_role">Node role.</param>
    /// <returns>The new record added to the hierarchy.</returns>
    internal static CustHierarchyNode addNodeToHierarchy(CustHierarchyId       _custHierarchyId,
                                                         RefRecId              _parentNode,
                                                         DirPartyRecId         _party,
                                                         CustHierarchyNodeType _type,
                                                         CustHierarchyNodeRole _role)
    {
        CustHierarchyNode hierarchyNode;

        hierarchyNode.initValue();
        hierarchyNode.ParentNode = _parentNode;
        hierarchyNode.Party = _party;
        hierarchyNode.CustHierarchyId = _custHierarchyId;
        hierarchyNode.Type = _type;
        hierarchyNode.Role = _role;
        hierarchyNode.VersionAdded = CustHierarchyVersion::getActiveVersion(_custHierarchyId).Version;
        hierarchyNode.VersionRemoved = 0;
        hierarchyNode.insert();

        return hierarchyNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveNodesCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the count of all active customer hierarchy nodes belonging to specified <c>CustHierarchyId</c>.
    /// </summary>
    /// <param name = "_custHierarchyId">CustHierarchyId of the customer hierarchy.</param>
    /// <returns>The count of customer hierarchy nodes.</returns>
    internal static int64 getActiveNodesCount(CustHierarchyId _custHierarchyId)
    {
        CustHierarchyNode node;

        select count(RecId) from node
            where   node.CustHierarchyId == _custHierarchyId
                &&  (!node.VersionRemoved || node.VersionAdded > node.VersionRemoved);

        return node.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNodeRemoved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether this node has been removed and not added back.
    /// </summary>
    /// <returns>True if the node has been removed; otherwise, false.</returns>
    internal boolean isNodeRemoved()
    {
        return this.VersionRemoved && this.VersionRemoved > this.VersionAdded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates custHierarchyNode.
    /// </summary>
    public void update()
    {
        if (this.CustHierarchyCatalogRefRecId != 0)
        {
            CustHierarchyCatalog custHierarchyCatalog;
            select custHierarchyCatalog where custHierarchyCatalog.RecId == this.CustHierarchyCatalogRefRecId;

            if (custHierarchyCatalog.RecId == 0)
            {
                throw error("@Retail:CustHierarchyCatalogNotAssignedToCustomerHierarchy");
            }
        }

        if (this.orig().Role != CustHierarchyNodeRole::Admin && this.Role == CustHierarchyNodeRole::Admin)
        {
            this.addWorkerToCustHierarchySellerChannelAddressBook();
        }
        else if (this.orig().Role == CustHierarchyNodeRole::Admin && this.Role != CustHierarchyNodeRole::Admin)
        {
            this.removeWorkerFromCustHierarchySellerChannelAddressBook();
        }

        super();

        if (RetailUpdateRetailCustTableCrossCompanyFlight::instance().isEnabled())
        {
            this.updateRetailCustTableCrossCompany(false, false);
        }
        else
        {
            this.updateRetailCustTableOnUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailCustTableCrossCompany</Name>
				<Source><![CDATA[
    private void updateRetailCustTableCrossCompany(boolean _forInsert, boolean _forDelete)
    {
        CustTable custTable;

        while select crosscompany custTable
            where custTable.Party == this.Party
        {
            changecompany(custTable.DataAreaId)
            {
                if (_forInsert)
                {
                    this.updateRetailCustTableOnInsert();
                }
                else if (_forDelete)
                {
                    this.updateRetailCustTableOnDelete();
                }
                else
                {
                    this.updateRetailCustTableOnUpdate();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWorkerToCustHierarchySellerChannelAddressBook</Name>
				<Source><![CDATA[
    private void addWorkerToCustHierarchySellerChannelAddressBook()
    {
        CustHierarchy custHierarchy;
        RetailChannelTable retailChannelTable;
        DirAddressBookParty dirAddressBookParty;
        DirAddressBookParty custHierarchyNodeToChannelAddressbook;
        HcmWorker hcmWorker;
        RetailStaffTable retailStaffTable;
        CustTable custTable;

        if (!CustHierarchy::findByHierarchyId(this.CustHierarchyId).hasSellerChannel())
        {
            return;
        }

        // Current company context can be any as CustHierarchy is cross company, thus need to search cross company
        select firstonly crosscompany custTable where custTable.Party == this.Party;

        ttsbegin;

        // Create worker if not exists.
        hcmWorker = HcmWorker::findByPerson(this.Party);
        if (!hcmWorker)
        {
            
            HcmPersonnelNumberId workerPersonnelNumber = HcmWorkerTransition::getNewHcmWorkerPersonnelNumber();
            if (!workerPersonnelNumber)
            {
                // Worker Id cannot be obtained by the number sequence.
                // Show the warning message to inform the customer to create
                // the retail worker manually.
                warning(strFmt('@Retail:MissingNumberSequenceForGeneratingB2B2BRetailWorkerWarningMessage'));
                ttsabort;
                return;
            }

            HcmWorkerRecId newWorkerRecId = RetailOnlineChannelProvisionHelper::createWorkerForParty(
                this.Party,
                0,
                custTable.DataAreaId,
                workerPersonnelNumber);
            hcmWorker = HcmWorker::find(newWorkerRecId);
        }

        // Create retail staff if not exists.
        retailStaffTable = RetailStaffTable::find(hcmWorker.PersonnelNumber);
        if (!retailStaffTable)
        {
            RetailOnlineChannelProvisionHelper::createRetailStaffForHcmWorker(hcmWorker.RecId);
        }

        // Update retail staff external Id.
        changecompany(custTable.DataAreaId)
        {
            RetailOnlineChannelProvisionHelper::updateRetailStaffExternalIdByCustomerExternalId(this.Party);
        }

        // Add the worker to the address book.
        select firstonly custHierarchy
            where custHierarchy.CustHierarchyId == this.CustHierarchyId &&
                custHierarchy.SellerChannelEmployeeAddressBook != 0;

        if (custHierarchy)
        {
            RetailChannelTable sellerChannel = RetailChannelTable::findByRetailChannelid(CustHierarchy.SellerChannel);
            RetailStoreAddressBook retailStoreAddressBook = RetailStoreAddressBook::find(
                sellerChannel.RecId, custHierarchy.SellerChannelEmployeeAddressBook, RetailAddressBookType::Employee);

            if (!retailStoreAddressBook)
            {
                DirAddressBook addressBook;
                select firstonly Name from addressBook where addressBook.RecId == custHierarchy.SellerChannelEmployeeAddressBook;

                warning(strFmt('@Retail:CustomerHierarchySellerChannelEmployeeAddressBookDissociatedWarningMessage', this.CustHierarchyId, addressBook.Name));
            }

            // We add the party to the address book even if it's not associated with the online channel
            // so that when the customer add the address book back to the online channel, the administrator
            // can login without adding the party to the address book manually.
            RetailOnlineChannelProvisionHelper::addPartyToAddressBook(this.Party, custHierarchy.SellerChannelEmployeeAddressBook);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeWorkerFromCustHierarchySellerChannelAddressBook</Name>
				<Source><![CDATA[
    private void removeWorkerFromCustHierarchySellerChannelAddressBook()
    {
        DirAddressBookParty dirAddressBookParty;
        CustHierarchy custHierarchy;

        custHierarchy = CustHierarchy::findByHierarchyId(this.CustHierarchyId);

        if (!custHierarchy.hasSellerChannel())
        {
            return;
        }

        ttsbegin;

        delete_from dirAddressBookParty
            where dirAddressBookParty.Party == this.Party
                && dirAddressBookParty.AddressBook == custHierarchy.SellerChannelEmployeeAddressBook;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailCustTableOnInsert</Name>
				<Source><![CDATA[
    private void updateRetailCustTableOnInsert()
    {
        RetailCustTable localRetailCustTable = RetailCustTable::findByPartyRecId(this.Party);

        // If creating a new node, update Retail business partner fields.
        if (!localRetailCustTable || !localRetailCustTable.B2BCustomerHierarchyNode)
        {
            boolean isB2BAdmin = this.Role == CustHierarchyNodeRole::Admin ? true : false;
            RetailCustTable::updateB2BFields(this.Party, this.RecId, isB2BAdmin, newGuid());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailCustTableOnUpdate</Name>
				<Source><![CDATA[
    private void updateRetailCustTableOnUpdate()
    {
        RetailCustTable retailCustTable = RetailCustTable::findByPartyRecId(this.Party, true);
        if (retailCustTable)
        {
            retailCustTable.IsB2BAdmin = this.Role == CustHierarchyNodeRole::Admin ? true : false;
            retailCustTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailCustTableOnDelete</Name>
				<Source><![CDATA[
    private void updateRetailCustTableOnDelete()
    {
        RetailCustTable::updateB2BFields(this.Party, 0, false, str2Guid(''));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@CustHierarchy:CustHierarchyNodeDevDoc</DeveloperDocumentation>
	<Label>@CustHierarchy:CustHierarchyNodeLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>CustHierarchyId</TitleField1>
	<TitleField2>Party</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>CustHierarchyParentChildIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<PrimaryIndex>CustHierarchyParentChildIdx</PrimaryIndex>
	<ReplacementKey>CustHierarchyNodeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustHierarchyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentNode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustHierarchyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Version</Name>
			<Label>@CustHierarchy:CustHierarchyNodeVersionGroupLabel</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VersionAdded</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VersionRemoved</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Type</Name>
			<Label>@CustHierarchy:CustHierarchyNodeTypeGroupLabel</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Role</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentNode</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Party</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DirPartyRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustHierarchyId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>CustHierarchyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>VersionAdded</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>Version</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>VersionRemoved</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<EnumType>CustHierarchyNodeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Role</Name>
			<EnumType>CustHierarchyNodeRole</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustHierarchyCatalogRefRecId</Name>
			<ExtendedDataType>CatalogRefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustHierarchyParentChildIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>CustHierarchyId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParentNode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Party</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustHierarchyNodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustHierarchyId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Party</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PerfIndexCustHierarchyDelete</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustHierarchyId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VersionRemoved</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustHierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustHierarchy</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustHierarchyId</Name>
					<Field>CustHierarchyId</Field>
					<RelatedField>CustHierarchyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustHierarchyVersionAdded</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustHierarchyVersion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustHierarchyId</Name>
					<Field>CustHierarchyId</Field>
					<RelatedField>CustHierarchyId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VersionAdded</Name>
					<Field>VersionAdded</Field>
					<RelatedField>Version</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ParentNode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustHierarchyNode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentNode</Name>
					<Field>ParentNode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NodeParty</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ActiveNodeView</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>CustHierarchyNodeActiveView</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustHierarchyCatalog</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustHierarchyCatalog</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustHierarchyCatalogRefRecId</Name>
					<Field>CustHierarchyCatalogRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>