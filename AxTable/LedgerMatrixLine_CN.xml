<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerMatrixLine_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerMatrixLine_CN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the name of a main account
    /// </summary>
    /// <returns>
    ///     The name of main account.
    /// </returns>
    public display Name getAccountName()
    {
        return MainAccount::getLocalizedName(this.MainAccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>LedgerMatrixLine_CN</c> table; if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_ledgerMatrixTable">
    ///    The record ID of the <c>LedgerMatrixTable_CN</c> record to check for existence.
    /// </param>
    /// <param name="_mainAccountRecId">
    ///    The record ID of the <c>MainAccount</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(
        RefRecId    _ledgerMatrixTable,
        RefRecId    _mainAccountRecId)
    {
        boolean ret = true;

        if (LedgerMatrixLine_CN::exist(_ledgerMatrixTable, _mainAccountRecId))
        {
            ret = checkFailed(strfmt(LedgerMatrixLine_CN::txtNotExist(), MainAccount::getLocalizedName(_mainAccountRecId)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record in the <c>ledgerMatrixTable_CN</c> table exists.
    /// </summary>
    /// <param name="_ledgerMatrixTable">
    ///     The record ID of the <c>ledgerMatrixTable_CN</c> record.
    /// </param>
    /// <param name="_mainAccountRecId">
    ///     The record ID of the <c>Mainaccount</c> record.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(
        RefRecId    _ledgerMatrixTable,
        RefRecId    _mainAccountRecId)
    {
        return _ledgerMatrixTable
            && _mainAccountRecId
            && (select firstonly RecId from ledgerMatrixLine_CN
                    where ledgerMatrixLine_CN.LedgerMatrixTable == _ledgerMatrixTable
                        && ledgerMatrixLine_CN.MainAccountNum   == _mainAccountRecId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>LedgerMatrixLine_CN</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>LedgerMatrixLine_CN</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    The specified record in the <c>LedgerMatrixLine_CN</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerMatrixLine_CN find(
        RecId   _recId,
        boolean _forupdate = false)
    {
        LedgerMatrixLine_CN ledgerMatrixLine_CN;

        ledgerMatrixLine_CN.selectForUpdate(_forupdate);

        select firstonly ledgerMatrixLine_CN
            where ledgerMatrixLine_CN.RecId == _recId;

        return ledgerMatrixLine_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findbyMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>LedgerMatrixLine_CN</c> table.
    /// </summary>
    /// <param name="_ledgerMatrixTable">
    ///    The record ID of the <c>LedgerMatrixTable_CN</c> record to find.
    /// </param>
    /// <param name="_mainAccountRecId">
    ///    The record ID of the <c>MainAccount</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    The specified record in the <c>LedgerMatrixLine_CN</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerMatrixLine_CN findbyMainAccount(
        RefRecId    _ledgerMatrixTable,
        RefRecId    _mainAccountRecId,
        boolean     _forupdate = false)
    {
        LedgerMatrixLine_CN ledgerMatrixLine_CN;

        if (_ledgerMatrixTable && _mainAccountRecId)
        {
            ledgerMatrixLine_CN.selectForUpdate(_forupdate);

            select firstOnly ledgerMatrixLine_CN
                where ledgerMatrixLine_CN.LedgerMatrixTable == _ledgerMatrixTable
                    && ledgerMatrixLine_CN.MainAccountNum   == _mainAccountRecId;
        }

        return ledgerMatrixLine_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the message to use when a specific record in the <c>LedgerMatrixTable_CN</c> table does not exist.
    /// </summary>
    /// <returns>
    ///     The message that indicates a record does not exists.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@GLS223400";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>CN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64317</DeveloperDocumentation>
	<FormRef>ledgermatrixSetupSRS_CN</FormRef>
	<Label>@GLS64316</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>MainAccountNum</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RefRecIdLedgerAccIdx</ClusteredIndex>
	<Modules>Ledger</Modules>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerMatrixTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MainAccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerMatrixTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MainAccount</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MainAccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerMatrixTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MainAccountNum</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS135766</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefRecIdLedgerAccIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>MainAccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LedgerMatrixTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerMatrixHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LedgerMatrixTable_CN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerMatrixTable</Name>
					<Field>LedgerMatrixTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MainAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MainAccount</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MainAccountNum</Name>
					<Field>MainAccountNum</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>