<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpEcoResCategoryHierarchyAttributes</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpEcoResCategoryHierarchyAttributes extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateRetailCategoryHierarchyAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temporary table with product attributes from the category of product which has the "Retail" related role.
    /// </summary>
    /// <param name = "_productId">
    /// The product id to get the attributes.
    /// </param>
    /// <returns>
    /// The temporary table with product attributes.
    /// </returns>
    /// <remarks>
    /// The temporary table is populated with additional information such as "AttributeDisplayOrder" compared to using the EcoResAttribute
    /// table directly to help sort the attributes.
    /// </remarks>
    internal static TmpEcoResCategoryHierarchyAttributes populateRetailCategoryHierarchyAttributes(RecId _productId)
    {
        TmpEcoResCategoryHierarchyAttributes tmpEcoResCategoryHierarchyAttributes;
        Query query = TmpEcoResCategoryHierarchyAttributes::buildAttributeLookupQuery(_productId);
        Set inserted = new Set(Types::Int64);

        // Insert attributes from retail product hierarchy first
        TmpEcoResCategoryHierarchyAttributes::insertRetailRoleCategoryAttributes(tmpEcoResCategoryHierarchyAttributes, query, inserted);

        // Then insert attributes from other retail related hierarchies.
        TmpEcoResCategoryHierarchyAttributes::insertRetailRelatedRoleCategoryAttributes(tmpEcoResCategoryHierarchyAttributes, query, inserted);

        // Then insert attributes that are not in any attribute groups.
        TmpEcoResCategoryHierarchyAttributes::insertAttributes(tmpEcoResCategoryHierarchyAttributes, query, inserted);

        return tmpEcoResCategoryHierarchyAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAttributeLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds EcoResCategoryAttributeLookup query for product attributes.
    /// </summary>
    /// <param name = "_productId">The product id.</param>
    /// <returns>The query constrained by product id.</returns>
    private static Query buildAttributeLookupQuery(RecId _productId)
    {
        Query query = new Query();

        QueryBuildDataSource lookupBuildDataSource = query.addDataSource(tableNum(EcoResCategoryAttributeLookup));

        QueryBuildDataSource categoryBuildDataSource = lookupBuildDataSource.addDataSource(tableNum(EcoResCategory));
        categoryBuildDataSource.joinMode(JoinMode::InnerJoin);
        categoryBuildDataSource.relations(true);

        QueryBuildDataSource categoryProductBuildDataSource = categoryBuildDataSource.addDataSource(tableNum(EcoResProductCategory));
        categoryProductBuildDataSource.joinMode(JoinMode::InnerJoin);
        categoryProductBuildDataSource.relations(true);

        QueryBuildDataSource productBuildDataSource = categoryProductBuildDataSource.addDataSource(tableNum(EcoResProduct));
        productBuildDataSource.joinMode(JoinMode::InnerJoin);
        productBuildDataSource.relations(true);

        QueryBuildRange range = productBuildDataSource.addRange(fieldNum(EcoResProduct, RecId));
        range.value(queryValue(_productId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new record to the temporary table.
    /// </summary>
    /// <param name = "_tmpEcoResCategoryHierarchyAttributes">The table to be inserted.</param>
    /// <param name = "_attribute">The RecId of the attribute.</param>
    /// <param name = "_attributeType">The RecId of the attribute type.</param>
    /// <param name = "_attributeName">The name of the attribute.</param>
    /// <param name = "_attributeDisplayOrder">The display order value of the attribute.</param>
    /// <param name = "_attributeGroup">The RecId of the attribute group.</param>
    /// <param name = "_attributeGroupDisplayOrder">The display order value of the attribute group.</param>
    /// <param name = "_category">The RecId of the category.</param>
    /// <param name = "_isRetailProductHierarchy">Indicates whether or not the attribute is from retail product hierarchy.</param>
    private static void insertIntoTmpTable(
        TmpEcoResCategoryHierarchyAttributes _tmpEcoResCategoryHierarchyAttributes,
        RefRecId _attribute,
        RetailDisplayOrder _attributeDisplayOrder,
        RefRecId _attributeGroup,
        RetailAttributeGroupDisplayOrder _attributeGroupDisplayOrder,
        Name _attributeName,
        RefRecId _category,
        NoYes _isRetailProductHierarchy)
    {
        _tmpEcoResCategoryHierarchyAttributes.Attribute = _attribute;
        _tmpEcoResCategoryHierarchyAttributes.AttributeDisplayOrder = _attributeDisplayOrder;
        _tmpEcoResCategoryHierarchyAttributes.AttributeGroup = _attributeGroup;
        _tmpEcoResCategoryHierarchyAttributes.AttributeGroupDisplayOrder = _attributeGroupDisplayOrder;
        _tmpEcoResCategoryHierarchyAttributes.AttributeName = _attributeName;
        _tmpEcoResCategoryHierarchyAttributes.Category = _category;
        _tmpEcoResCategoryHierarchyAttributes.IsRetailProductHierarchy = _isRetailProductHierarchy;

        _tmpEcoResCategoryHierarchyAttributes.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRetailRoleCategoryAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the product attributes from the category which has "Retail" role.
    /// </summary>
    /// <param name = "_tmpTable">The table to be inserted.</param>
    /// <param name = "_lookupQuery">The EcoResCategoryAttributeLookup query constrained by the product id and retail categories.</param>
    /// <param name = "_inserted">The set of RecIds of inserted attributes.</param>
    private static void insertRetailRoleCategoryAttributes(TmpEcoResCategoryHierarchyAttributes _tmpTable, Query _lookupQuery, Set _inserted)
    {
        EcoResCategoryAttributeGroupAttrView ecoResCategoryAttributeGroupAttrView;
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;
        EcoResCategoryAttributeLookup lookup;
        QueryRun queryRun = new QueryRun(_lookupQuery);

        while (queryRun.next())
        {
            lookup = queryRun.get(tableNum(EcoResCategoryAttributeLookup));

            if (_inserted.in(lookup.Attribute))
            {
                continue;
            }

            select firstonly Attribute, AttributeDisplayOrder, AttributeGroup, AttributeGroupDisplayOrder, AttributeGroupAttribute, AttributeName, Category from ecoResCategoryAttributeGroupAttrView
                order by ecoResCategoryAttributeGroupAttrView.Category
                where ecoResCategoryAttributeGroupAttrView.Attribute == lookup.Attribute
                    && ecoResCategoryAttributeGroupAttrView.Category == lookup.Category
                    && ecoResCategoryAttributeGroupAttrView.AttributeGroupAttribute == lookup.AttributeGroupAttribute
                exists join CategoryHierarchy, NamedCategoryHierarchyRole from ecoResCategoryHierarchyRole
                    where ecoResCategoryAttributeGroupAttrView.CategoryHierarchy == ecoResCategoryHierarchyRole.CategoryHierarchy
                        && ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Retail;

            if (ecoResCategoryAttributeGroupAttrView)
            {
                TmpEcoResCategoryHierarchyAttributes::insertIntoTmpTable(
                    _tmpTable,
                    ecoResCategoryAttributeGroupAttrView.Attribute,
                    ecoResCategoryAttributeGroupAttrView.AttributeDisplayOrder,
                    ecoResCategoryAttributeGroupAttrView.AttributeGroup,
                    ecoResCategoryAttributeGroupAttrView.AttributeGroupDisplayOrder,
                    ecoResCategoryAttributeGroupAttrView.AttributeName,
                    ecoResCategoryAttributeGroupAttrView.Category,
                    NoYes::Yes);
                _inserted.add(ecoResCategoryAttributeGroupAttrView.Attribute);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRetailRelatedRoleCategoryAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the product attributes from the categories which have "Procurement", or "RetailSpecialGroup", or "RetailChannelNavigation" role.
    /// </summary>
    /// <param name = "_tmpTable">The table to be inserted.</param>
    /// <param name = "_lookupQuery">The EcoResCategoryAttributeLookup query constrained by the product id and retail categories.</param>
    /// <param name = "_inserted">The set of RecIds of inserted attributes.</param>
    private static void insertRetailRelatedRoleCategoryAttributes(TmpEcoResCategoryHierarchyAttributes _tmpTable, Query _lookupQuery, Set _inserted)
    {
        EcoResCategoryAttributeGroupAttrView ecoResCategoryAttributeGroupAttrView;
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;
        EcoResCategoryAttributeLookup lookup;
        QueryRun queryRun = new QueryRun(_lookupQuery);

        while (queryRun.next())
        {
            lookup = queryRun.get(tableNum(EcoResCategoryAttributeLookup));

            if (_inserted.in(lookup.Attribute))
            {
                continue;
            }

            select firstonly Attribute, AttributeDisplayOrder, AttributeGroup, AttributeGroupDisplayOrder, AttributeGroupAttribute, AttributeName, Category from ecoResCategoryAttributeGroupAttrView
                order by ecoResCategoryAttributeGroupAttrView.Category
                where ecoResCategoryAttributeGroupAttrView.Attribute == lookup.Attribute
                    && ecoResCategoryAttributeGroupAttrView.Category == lookup.Category
                    && ecoResCategoryAttributeGroupAttrView.AttributeGroupAttribute == lookup.AttributeGroupAttribute
                exists join CategoryHierarchy, NamedCategoryHierarchyRole from ecoResCategoryHierarchyRole
                    where ecoResCategoryAttributeGroupAttrView.CategoryHierarchy == ecoResCategoryHierarchyRole.CategoryHierarchy
                        && (ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Procurement
                            || ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::RetailSpecialGroup
                            || ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::RetailChannelNavigation);
            
            if (ecoResCategoryAttributeGroupAttrView)
            {
                TmpEcoResCategoryHierarchyAttributes::insertIntoTmpTable(
                    _tmpTable,
                    ecoResCategoryAttributeGroupAttrView.Attribute,
                    ecoResCategoryAttributeGroupAttrView.AttributeDisplayOrder,
                    ecoResCategoryAttributeGroupAttrView.AttributeGroup,
                    ecoResCategoryAttributeGroupAttrView.AttributeGroupDisplayOrder,
                    ecoResCategoryAttributeGroupAttrView.AttributeName,
                    ecoResCategoryAttributeGroupAttrView.Category,
                    NoYes::No);
                _inserted.add(ecoResCategoryAttributeGroupAttrView.Attribute);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the product attributes from the categories specified by the query.
    /// </summary>
    /// <param name = "_tmpTable">The table to be inserted.</param>
    /// <param name = "_lookupQuery">The EcoResCategoryAttributeLookup query constrained by the product id and the categories.</param>
    /// <param name = "_inserted">The set of RecIds of inserted attributes.</param>
    /// <remarks>
    /// This method will get the attributes information from the EcoResAttribute table to emulate the joining behaviour.
    /// </remarks>
    private static void insertAttributes(TmpEcoResCategoryHierarchyAttributes _tmpTable, Query _lookupQuery, Set _inserted)
    {
        EcoResAttribute ecoResAttribute;
        QueryRun queryRun = new QueryRun(_lookupQuery);
        EcoResCategoryAttributeLookup lookup;
        
        while (queryRun.next())
        {
            lookup = queryRun.get(tableNum(EcoResCategoryAttributeLookup));

            if (_inserted.in(lookup.Attribute))
            {
                continue;
            }

            select firstOnly ecoResAttribute
                where ecoResAttribute.RecId == lookup.Attribute;

            if (ecoResAttribute)
            {
                TmpEcoResCategoryHierarchyAttributes::insertIntoTmpTable(
                    _tmpTable,
                    ecoResAttribute.RecId,
                    0,
                    0,
                    0,
                    ecoResAttribute.Name,
                    0,
                    NoYes::No);
                _inserted.add(ecoResAttribute.RecId);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Attribute</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AttributeDisplayOrder</Name>
			<ExtendedDataType>RetailDisplayOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeGroup</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AttributeGroupDisplayOrder</Name>
			<ExtendedDataType>RetailAttributeGroupDisplayOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AttributeName</Name>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsRetailProductHierarchy</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>EcoResAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Attribute</Name>
					<Field>Attribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>