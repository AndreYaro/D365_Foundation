<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationInvoicesInMatching</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceAutomationInvoicesInMatching extends common
{
    #OCCRetryCount
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>waitOnRetry</Name>
				<Source><![CDATA[
    private static int waitOnRetry()
    {
        // Generates a random wait time between retries to ensure that any conflicting threads attempt retries on different intervals.
        return RandomGenerate::construct().randomInt(50, 1000);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMatchingRecordsFor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a given set of invoices into the automatic matching work table,
    /// ensuring that these invoices are not picked up by other automatic matching processes.
    /// </summary>
    /// <param name = "_invoicesToInsert">
    /// A temp table containing invoice RecIds to be inserted.
    /// </param>
    internal static void insertMatchingRecordsFor(VendInvoiceAutomationInvoiceTmp _invoicesToInsert)
    {
        int waitOnRetry = VendInvoiceAutomationInvoicesInMatching::waitOnRetry();
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;

        VendInvoiceAutomationInvoicesInMatching invoicesStagedForAutoMatching;
        VendInvoiceAutomationInstrumentationMatchingActivities instrumentationMatchingActivities =
            VendInvoiceAutomationInstrumentationMatchingActivities::createFromLoggerName(tableStr(VendInvoiceAutomationInvoicesInMatching));

        using (var activityContext = instrumentationMatchingActivities.insertMatchingRecordsReadyContext())
        {
            VendInvoiceAutomationInstrumentationDbErrorProperties errorProperties = VendInvoiceAutomationInstrumentationDbErrorProperties::constructFromActivityContext(activityContext);

            try
            {
                ttsbegin;

                invoicesStagedForAutoMatching.skipDataMethods(true);
                invoicesStagedForAutoMatching.skipDatabaseLog(true);
                invoicesStagedForAutoMatching.skipEvents(true);

                insert_recordset invoicesStagedForAutoMatching(VendInvoiceRecId)
                select VendInvoiceRecId from _invoicesToInsert;

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                int currentRetryCount = xSession::currentRetryCount();

                if (currentRetryCount >= #RetryNum)
                {
                    errorProperties.deadLockProperty(_invoicesToInsert.VendInvoiceRecId);
                }
                else
                {
                    sleep(currentRetryCount * waitOnRetry);
                    retry;
                }
            }
            catch (Exception::DuplicateKeyException)
            {
                errorProperties.duplicateKeyProperty(_invoicesToInsert.VendInvoiceRecId);
            }
            catch (errorException)
            {
                errorProperties.exceptionProperty(_invoicesToInsert.VendInvoiceRecId, errorException.ToString());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMatchingRecordsFor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all given invoices from the automatic matching work table, freeing up these invoices 
    /// to be picked up by a future matching process if applicable.
    /// </summary>
    /// <param name = "_invoicesToRemove">
    /// A temp table containing invoice RecIds to remove.
    /// </param>
    internal static void removeMatchingRecordsFor(VendInvoiceAutomationInvoiceTmp _invoicesToRemove)
    {
        int waitOnRetry = VendInvoiceAutomationInvoicesInMatching::waitOnRetry();
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;

        VendInvoiceAutomationInvoicesInMatching invoicesInMatching;
        VendInvoiceAutomationInstrumentationMatchingActivities instrumentationMatchingActivities =
            VendInvoiceAutomationInstrumentationMatchingActivities::createFromLoggerName(tableStr(VendInvoiceAutomationInvoicesInMatching));

        using (var activityContext = instrumentationMatchingActivities.removeMatchingRecordsContext())
        {
            VendInvoiceAutomationInstrumentationDbErrorProperties errorProperties = VendInvoiceAutomationInstrumentationDbErrorProperties::constructFromActivityContext(activityContext);

            try
            {
                ttsbegin;
            
                invoicesInMatching.skipDataMethods(true);
                invoicesInMatching.skipDatabaseLog(true);
                invoicesInMatching.skipEvents(true);

                delete_from invoicesInMatching
                exists join _invoicesToRemove
                    where _invoicesToRemove.VendInvoiceRecId == invoicesInMatching.VendInvoiceRecId;

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                int currentRetryCount = xSession::currentRetryCount();

                if (currentRetryCount >= #RetryNum)
                {
                    errorProperties.deadLockProperty(_invoicesToRemove.VendInvoiceRecId);
                }
                else
                {
                    sleep(currentRetryCount * waitOnRetry);
                    retry;
                }
            }
            catch (errorException)
            {
                errorProperties.exceptionProperty(_invoicesToRemove.VendInvoiceRecId, errorException.ToString());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeStaleAutomationMatchingRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///Removes all the stale invoices that are stuck in automation matching process.
    /// </summary>
    internal static void removeStaleAutomationMatchingRecords()
    {
        const int MaximumRetryNumber = 3;

        int hoursBeforeAutomaticMatchingInvoicesBecomesStale = VendParameters::getHoursBeforeAutomaticMatchingInvoicesBecomesStale();
        int waitBetweenRetries = VendInvoiceAutomationInvoicesInMatching::waitOnRetry();

        utcdatetime timeAtWhichAutomationMatchingRecordsBecomeStale = DateTimeUtil::addHours(
            DateTimeUtil::utcNow(),
            (0 - hoursBeforeAutomaticMatchingInvoicesBecomesStale));

        if (VendInvoiceAutomationInvoicesInMatching::hasInvoiceMatchingRecordstToBeDeleted(timeAtWhichAutomationMatchingRecordsBecomeStale))
        {
            VendInvoiceAutomationInvoicesInMatching invoicesStagedForAutoMatching;
            VendInvoiceAutomationInstrumentationDbErrorProperties errorProperties =
                VendInvoiceAutomationInstrumentationDbErrorProperties::constructFromActivityContext(
                VendInvoiceAutomationInstrumentationMatchingActivities::createFromLoggerName(tableStr(VendInvoiceAutomationInvoicesInMatching)).removeStaleSubmissionRecordsContext());
            try
            {
                ttsbegin;

                invoicesStagedForAutoMatching.skipDataMethods(true);
                invoicesStagedForAutoMatching.skipDatabaseLog(true);
                invoicesStagedForAutoMatching.skipEvents(true);

                delete_from invoicesStagedForAutoMatching
                    where invoicesStagedForAutoMatching.CreatedDateTime <= timeAtWhichAutomationMatchingRecordsBecomeStale;

                ttscommit;
            }
            catch (Exception::Error)
            {
                errorProperties.customErrorProperty('An error occurred removing stale automation matching records');
            }
            catch (Exception::Deadlock)
            {
                int currentRetryCount = xSession::currentRetryCount();

                if (currentRetryCount < MaximumRetryNumber)
                {
                    sleep(currentRetryCount * waitBetweenRetries);
                    retry;
                }
                else
                {
                    errorProperties.customErrorProperty('A deadlock error occurred removing stale automation matching records');
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInvoiceMatchingRecordstToBeDeleted</Name>
				<Source><![CDATA[
    internal static boolean hasInvoiceMatchingRecordstToBeDeleted(utcdatetime _timeAtWhichAutomationMatchingRecordsBecomeStale)
    {
        VendInvoiceAutomationInvoicesInMatching invoicesStagedForAutoMatching;

        select firstonly RecId from invoicesStagedForAutoMatching
            where invoicesStagedForAutoMatching.CreatedDateTime <= _timeAtWhichAutomationMatchingRecordsBecomeStale;

        return invoicesStagedForAutoMatching.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@AccountsPayable:VendInvoiceAutomationInvoicesInMatchingHelpText</DeveloperDocumentation>
	<Label>@AccountsPayable:VendInvoiceAutomationInvoicesInMatchingLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>VendInvoiceRecId</TitleField1>
	<Visibility>Internal</Visibility>
	<CreatedDateTime>Yes</CreatedDateTime>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceRecId</Name>
			<ExtendedDataType>VendInvoiceInfoTableRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendInvoiceRecId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendInvoiceRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>