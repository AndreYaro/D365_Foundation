<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSProdBOMPool</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSProdBOMPool extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayOnWave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the image to display if the pool is currently represented as a wave line.
    /// </summary>
    /// <returns>
    /// An image if the record is on a wave; otherwise nothing.
    /// </returns>
    public display ImageRes displayOnWave()
    {
        #ResAppl
        ImageRes    ret;

        if (this.isOnWave())
        {
            ret = #Image_InventMarkingOK;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnWave</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the pool is represented as a wave line on any wave.
    /// </summary>
    /// <returns>
    ///     True if pool is on a wave line; false otherwise.
    /// </returns>
    public boolean isOnWave()
    {
        boolean ret = false;

        if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            WHSProdWaveLine     whsProdWaveLine;
            WHSWaveTable        whsWaveTable;

            select firstonly RecId from whsProdWaveLine
                where   whsProdWaveLine.InventTransId   == this.InventTransId
            join whsWaveTable
                where   whsWaveTable.WaveStatus         == WHSWaveStatus::Created
                &&      whsWaveTable.WaveId             == whsProdWaveLine.WaveId;

            ret = whsProdWaveLine.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsPoolProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and returns a new instance of the <c>WHSPoolProdBOM</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>WHSPoolProdBOM</c> class.
    /// </returns>
    public WHSPoolProdBOM whsPoolProdBOM()
    {
        return WHSPoolProdBOM::newStandard(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>WHSProdBomPool</c> table exists.
    /// </summary>
    /// <param name="_inventTransId">
    ///    The inventory transaction ID of the production BOM pool record.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    static boolean exist(InventTransId  _inventTransId)
    {
        WHSProdBOMPool whsProdBOMPool;

        // isTmp() call on the buffer is used to check if the table
        // configuration key is enabled.
        return    _inventTransId && !whsProdBOMPool.isTmp()
               && (select firstonly RecId from whsProdBOMPool
                        where whsProdBOMPool.InventTransId == _inventTransId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForProdId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a <c>WHSProdBOMPool</c> record exists for the production ID.
    /// </summary>
    /// <param name = "_prodId">The production ID we are checking for <c>WHSProdBOMPool</c> records.</param>
    /// <returns>true if a records exists; otherwise, false</returns>
    public static boolean existsForProdId(ProdId _prodId)
    {
        return (select firstonly RecId from WHSProdBOMPool
                    where WHSProdBOMPool.ProdId == _prodId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>WHSProdBOMPool</c> table.
    /// </summary>
    /// <param name="_inventTransId">
    ///    The inventory transaction ID of the production BOM pool record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>WHSProdBOMPool</c> table; otherwise, an empty record.
    /// </returns>
    static WHSProdBOMPool  find(
        InventTransId _inventTransId,
        boolean       _forUpdate = false)
    {
        WHSProdBOMPool  prodBomPool;

        // isTmp() call on the buffer is used to check if the table
        // configuration key is enabled.
        if (_inventTransId && !prodBomPool.isTmp())
        {
            prodBomPool.selectForUpdate(_forUpdate);

            select firstonly prodBomPool
                where prodBomPool.InventTransId == _inventTransId;
        }

        return prodBomPool;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustWavedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the waved quantity of the <c>WHSProdBOMPool</c> record related to the specified invent trans ID.
    /// </summary>
    /// <param name = "_inventTransId">The invent trans ID</param>
    /// <param name = "_qtyToAdjust">The quantity to adjust</param>
    [SysObsolete('Method is obsoleted to support catch weight items. Please file an extensibility request if access is required.', false, 30\9\2019)]
    public static void adjustWavedQty(InventTransId _inventTransId, Qty _qtyToAdjust)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), InventTransOrigin::findByInventTransId(_inventTransId).ItemId);

        WHSProdBOMPool::adjustWavedHandlingQuantities(_inventTransId, _qtyToAdjust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustWavedHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the waved quantity of the <c>WHSProdBOMPool</c> record related to the specified invent trans ID.
    /// </summary>
    /// <param name = "_inventTransId">The invent trans ID</param>
    /// <param name = "_qtyToAdjust">The handling quantity to adjust</param>
    [Hookable(false)]
    internal static void adjustWavedHandlingQty(InventTransId _inventTransId, InventHandlingQty _qtyToAdjust)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), InventTransOrigin::findByInventTransId(_inventTransId).ItemId))
        {
            WHSProdBOMPool::adjustWavedHandlingQuantities(_inventTransId, _qtyToAdjust);
        }
        else
        {
            WHSProdBOMPool::adjustWavedQty(_inventTransId, _qtyToAdjust);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFrozenHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets any frozen quantity for the work.
    /// </summary>
    /// <returns>The frozen quantity.</returns>
    [Hookable(false)]
    internal InventHandlingQty getFrozenHandlingQty()
    {
        InventDim inventDim = InventDim::find(this.InventDimId);
        InventDimParm inventDimParm = inventDim.toDimParm();
        
        return WHSPool::calculateWorkFrozenHandlingQty(this.InventTransId, inventDim, inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustWavedHandlingQuantities</Name>
				<Source><![CDATA[
    private static void adjustWavedHandlingQuantities(InventTransId _inventTransId, InventHandlingQty _qtyToAdjust)
    {
        if (_qtyToAdjust)
        {
            ttsbegin;

            WHSProdBOMPool prodBOMPool = WHSProdBOMPool::find(_inventTransId, true);
            prodBOMPool.WavedQty += _qtyToAdjust;
            prodBOMPool.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WHSProdBOMPool, ReleasedInventQty) :
                if (this.ReleasedInventQty < this.WavedQty)
                {
                    ret = checkFailed("@WAX:Error_ApproveToReleaseBelowLimit_Label");
                }
                else if (this.ReleasedInventQty > ProdBOM::findTransId(this.InventTransId).QtyInventCalc)
                {
                    ret = checkFailed("@WAX:Error_ApproveToReleaseAboveLimit_Label");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX3099</DeveloperDocumentation>
	<Label>@WAX3309</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProdId</TitleField1>
	<TitleField2>InventTransId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ProdIdIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>InventTransIdIdx</PrimaryIndex>
	<ReplacementKey>InventTransIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WavedQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WavedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleasedInventQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WavedQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWavedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReleasedInventQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSReleasedInventQty</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProdIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdBom</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ProdBOM</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<SourceEDT>ProdId</SourceEDT>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>