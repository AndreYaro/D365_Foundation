<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPlanVersion</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqPlanVersion extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the current record in the <c>ReqPlanVersion</c> table.
    /// </summary>
    /// <remarks>
    ///    Related <c>ReaPO</c> and <c>ReqTrans</c> records are not deleted per delete action,
    ///    because they must be deleted before the <c>ReqPlanVersion</c> record is deleted.
    /// </remarks>
    public void delete()
    {
        ReqPO       reqPO;
        ReqTrans    reqTrans;

        ttsbegin;

        this.executeStatement(this.deleteReqPOSqlStatement());
        this.executeStatement(this.deleteReqTransSqlStatement());

        super();
        ttscommit;

        ReqInstrumentationLogger::createLogger(tableStr(ReqPlanVersion))
            .logCallStack("ReqPlanVersion::delete()");
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReqPOSqlStatement</Name>
				<Source><![CDATA[
    private str deleteReqPOSqlStatement()
    {
        SysDictTable table = new SysDictTable(tableNum(ReqPO));
        str tableName = table.name(DbBackend::Sql);
        str partitionColoumnName = table.fieldObject(fieldNum(ReqPO, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, tableName);
        str dataAreaIdColoumnName =  table.fieldObject(fieldNum(ReqPO, DataAreaId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, tableName);
        str planVersionColoumnName = table.fieldObject(fieldNum(ReqPO, PlanVersion)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, tableName);

        return 'delete ' + tableName +
            ' where ' + partitionColoumnName + ' = ' + int642Str(this.Partition) +
            ' and ' + dataAreaIdColoumnName + ' = \'' + this.ReqPlanDataAreaId + '\'' +
            ' and ' + planVersionColoumnName + ' = ' + int642Str(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReqTransSqlStatement</Name>
				<Source><![CDATA[
    private str deleteReqTransSqlStatement()
    {
        SysDictTable table = new SysDictTable(tableNum(ReqTrans));
        str tableName = table.name(DbBackend::Sql);
        str partitionColoumnName = table.fieldObject(fieldNum(ReqTrans, Partition)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, tableName);
        str dataAreaIdColoumnName =  table.fieldObject(fieldNum(ReqTrans, DataAreaId)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, tableName);
        str planVersionColoumnName = table.fieldObject(fieldNum(ReqTrans, PlanVersion)).name(DbBackend::Sql, 0, FieldNameGenerationMode::FieldList, tableName);

        return 'delete ' + tableName +
            ' where ' + partitionColoumnName + ' = ' + int642Str(this.Partition) +
            ' and ' + dataAreaIdColoumnName + ' = \'' + this.ReqPlanDataAreaId + '\'' +
            ' and ' + planVersionColoumnName + ' = ' + int642Str(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeStatement</Name>
				<Source><![CDATA[
    private void executeStatement(str _sqlStmt)
    {
        Connection connection = new Connection();
        SqlStatementExecutePermission permission = new SqlStatementExecutePermission(_sqlStmt);

        try
        {
            Statement statement = connection.createStatement();
            permission.assert();
            statement.executeUpdate(_sqlStmt);
            CodeAccessPermission::revertAssert();
        }
        finally
        {
            connection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the active plan version.
    /// </summary>
    /// <param name="_reqPlanId">
    ///     The plan ID.
    /// </param>
    /// <param name="_reqPlanDataAreaId">
    ///    A string value that represents the data area ID.
    /// </param>
    /// <returns>
    ///     The plan version.
    /// </returns>
    /// <remarks>
    /// The <c>_reqPlanDataAreaId</c> parameter has been added.
    /// </remarks>
    public static ReqPlanVersion createActive(
        ReqPlanId _reqPlanId,
        DataAreaId _reqPlanDataAreaId
        )
    {
        if (ReqPlanVersion::findActiveReqPlanId(_reqPlanId, _reqPlanDataAreaId))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ReqPlanVersion::createNew(_reqPlanId, _reqPlanDataAreaId, NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInactive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the inactive version of the master plan.
    /// </summary>
    /// <param name="_reqPlanId">
    ///    The ID of a master plan.
    /// </param>
    /// <param name="_reqPlanDataAreaId">
    ///    A string value that represents the data area ID.
    /// </param>
    /// <returns>
    ///    The plan version.
    /// </returns>
    /// <remarks>
    /// The <c>_reqPlanDataAreaId</c> parameter has been added.
    /// </remarks>
    public static ReqPlanVersion createInactive(
        ReqPlanId _reqPlanId,
        DataAreaId _reqPlanDataAreaId
        )
    {
        return ReqPlanVersion::createNew(_reqPlanId, _reqPlanDataAreaId, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNew</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the new plan version.
    /// </summary>
    /// <param name="_reqPlanId">
    ///     The plan ID.
    /// </param>
    /// <param name="_reqPlanDataAreaId">
    ///    A string value that represents the data area ID.
    /// </param>
    /// <param name="_active">
    ///     A boolean value which indicates whether the plan version must be active.
    /// </param>
    /// <returns>
    ///     The plan version.
    /// </returns>
    private static ReqPlanVersion createNew(
        ReqPlanId _reqPlanId,
        DataAreaId _reqPlanDataAreaId,
        NoYes _active
    )
    {
        ReqPlanVersion reqPlanVersion;

        reqPlanVersion.ReqPlanId = _reqPlanId;
        reqPlanVersion.ReqPlanDataAreaId = _reqPlanDataAreaId;
        reqPlanVersion.Active = _active;

        reqPlanVersion.insert();

        return reqPlanVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>ReqPlanVersion</c> table.
    /// </summary>
    /// <param name="_reqPlanVersionRecId">
    ///    The ID of the <c>ReqPlanVersion</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>ReqPlanVersion</c> table; otherwise, an empty record.
    /// </returns>
    public static ReqPlanVersion find(RecId _reqPlanVersionRecId, boolean _forUpdate = false)
    {
        ReqPlanVersion reqPlanVersion;

        reqPlanVersion.selectForUpdate(_forUpdate);

        select firstonly reqPlanVersion
            where reqPlanVersion.RecId == _reqPlanVersionRecId;

        return reqPlanVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWithCacheDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>ReqPlanVersion</c> table skipping record level cache.
    /// </summary>
    /// <param name="_reqPlanVersionRecId">
    ///    The ID of the <c>ReqPlanVersion</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>ReqPlanVersion</c> table; otherwise, an empty record.
    /// </returns>
    public static ReqPlanVersion findWithCacheDisabled(RecId _reqPlanVersionRecId, boolean _forUpdate = false)
    {
        ReqPlanVersion reqPlanVersion;

        reqPlanVersion.disableCache(true);
        reqPlanVersion.selectForUpdate(_forUpdate);

        select firstonly reqPlanVersion
            where reqPlanVersion.RecId == _reqPlanVersionRecId;

        return reqPlanVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveReqPlanId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the active version of the specified master plan.
    /// </summary>
    /// <param name="_reqPlanId">
    ///    The ID of the master plan.
    /// </param>
    /// <param name="_reqPlanDataAreaId">
    ///    A string value that represents the data area ID.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>ReqPlanVersion</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// The <c>_reqPlanDataAreaId</c> parameter has been added.
    /// </remarks>
    public static ReqPlanVersion findActiveReqPlanId(
        ReqPlanId _reqPlanId,
        DataAreaId _reqPlanDataAreaId,
        boolean _forUpdate = false
        )
    {
        return ReqPlanVersion::findReqPlanId(_reqPlanId, _reqPlanDataAreaId, NoYes::Yes, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveReqPlanIdDynamic</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the active version of the default dynamic master plan.
    /// </summary>
    /// <returns>
    ///     A record in the <c>ReqPlanVersion</c> table; otherwise, an empty record.
    /// </returns>
    public static ReqPlanVersion findActiveReqPlanIdDynamic()
    {
        return ReqPlanSched::defaultDynamicPlan().findActiveVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReqPlanId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>ReqPlanVersion</c> table.
    /// </summary>
    /// <param name="_reqPlanId">
    ///    The ID of the master plan.
    /// </param>
    /// <param name="_reqPlanDataAreaId">
    ///    A string value that represents the data area ID.
    /// </param>
    /// <param name="_findActive">
    ///    A Boolean value that indicates whether the active version should be found.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>ReqPlanVersion</c> table; otherwise, an empty record.
    /// </returns>
    public static ReqPlanVersion findReqPlanId(
        ReqPlanId           _reqPlanId,
        DataAreaId          _reqPlanDataAreaId,
        NoYes               _findActive,
        boolean             _forUpdate  = false)
    {
        ReqPlanVersion reqPlanVersion;

        reqPlanVersion.selectForUpdate(_forUpdate);

        select  reqPlanVersion
        where   reqPlanVersion.ReqPlanId               == _reqPlanId
             && reqPlanVersion.ReqPlanDataAreaId    == _reqPlanDataAreaId
             && reqPlanVersion.Active               == _findActive;

        return reqPlanVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        ReqInstrumentationLogger::createLogger(tableStr(ReqPlanVersion))
            .logCallStack("ReqPlanVersion::insert()");
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        ReqInstrumentationLogger::createLogger(tableStr(ReqPlanVersion))
            .logCallStack("ReqPlanVersion::update()");
    }

]]></Source>
			</Method>
			<Method>
				<Name>doDelete</Name>
				<Source><![CDATA[
    public void doDelete()
    {
        super();

        ReqInstrumentationLogger::createLogger(tableStr(ReqPlanVersion))
            .logCallStack("ReqPlanVersion::doDelete()");
    }

]]></Source>
			</Method>
			<Method>
				<Name>doInsert</Name>
				<Source><![CDATA[
    public void doInsert()
    {
        super();

        ReqInstrumentationLogger::createLogger(tableStr(ReqPlanVersion))
            .logCallStack("ReqPlanVersion::doInsert()");
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdate</Name>
				<Source><![CDATA[
    public void doUpdate()
    {
        super();

        ReqInstrumentationLogger::createLogger(tableStr(ReqPlanVersion))
            .logCallStack("ReqPlanVersion::doUpdate()");
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SYS318736</DeveloperDocumentation>
	<Label>@SYS133359</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ReqPlanId</TitleField1>
	<TitleField2>Active</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>MasterPlanning</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ReqTransCov</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ReqTransCov</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrCapRes</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrCapRes</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPlanDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPlanId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqPlanId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPlanDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPlanId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastCostCalculationDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanVersionLastCostCalculationDateTime</ExtendedDataType>
		</AxTableField>
        <AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SysRowVersionNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysRowVersionNumber</ExtendedDataType>
			<Null>Yes</Null>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReqPlanIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ReqPlanId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReqPlanDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Active</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CreatedDateTimeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Active</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CreatedDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqPlan</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>ReqPlan</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Plan</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>PlanVersion</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReqPlanId</Name>
					<Field>ReqPlanId</Field>
					<RelatedField>ReqPlanId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReqPlanDataAreaId</Name>
					<Field>ReqPlanDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PlanIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>