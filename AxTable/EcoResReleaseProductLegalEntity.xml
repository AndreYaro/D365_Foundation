<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResReleaseProductLegalEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResReleaseProductLegalEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>distinctLegalEntityIdsInSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves all of the distinct legal entities that participate in a release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    /// <returns>
    /// A container with legal entity IDs.
    /// </returns>
    public static container distinctLegalEntityIdsInSession(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        Set                             distinctLegalEntityIdsInSession;
        CompanyInfo                     companyInfo;
        EcoResReleaseProductLegalEntity ecoResReleaseProductLegalEntity;
        EcoResReleaseSessionProduct     ecoResReleaseSessionProduct;

        distinctLegalEntityIdsInSession = new Set(Types::Int64);

        while select RecId from companyInfo
            exists join ecoResReleaseProductLegalEntity
                where   ecoResReleaseProductLegalEntity.LegalEntity == companyInfo.RecId
                exists join ecoResReleaseSessionProduct
                where   ecoResReleaseSessionProduct.RecId           == ecoResReleaseProductLegalEntity.ReleaseSessionProduct
                    &&  ecoResReleaseSessionProduct.ReleaseSession  == _releaseSessionRecId
        {
            distinctLegalEntityIdsInSession.add(companyInfo.RecId);
        }

        return distinctLegalEntityIdsInSession.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existProductVariantLEForMasterInSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a legal entity for a distinct product variant for a product master exists in a
    /// release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    /// <param name="_productMasterRecId">
    /// A product master ID.
    /// </param>
    /// <param name="_legalEntityRecId">
    /// A legal entity ID.
    /// </param>
    /// <returns>
    /// true if a distinct product variant for a product master exists in a release session; otherwise,
    /// false.
    /// </returns>
    public static boolean existProductVariantLEForMasterInSession(
        EcoResReleaseSessionRecId   _releaseSessionRecId,
        EcoResProductMasterRecId    _productMasterRecId,
        RefRecId                    _legalEntityRecId)
    {
        EcoResReleaseProductLegalEntity releaseProductLegalEntity;
        EcoResReleaseSessionProduct     releaseSessionProduct;
        EcoResDistinctProductVariant    distinctProductVariant;

        select firstonly RecId from releaseProductLegalEntity
            exists join releaseSessionProduct
                where   releaseSessionProduct.RecId           == releaseProductLegalEntity.ReleaseSessionProduct
                    &&  releaseSessionProduct.ReleaseSession  == _releaseSessionRecId
            exists join distinctProductVariant
                where   distinctProductVariant.RecId          == releaseSessionProduct.Product
                    &&  distinctProductVariant.ProductMaster  == _productMasterRecId;

        return (releaseProductLegalEntity.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByReleaseSessionProductLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResReleaseProductLegalEntity</c> table.
    /// </summary>
    /// <param name="_releaseSessionProductRecId">
    /// A release session ID.
    /// </param>
    /// <param name="_legalEntityRecId">
    /// A product ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResReleaseProductLegalEntity</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResReleaseProductLegalEntity findByReleaseSessionProductLegalEntity(
        RefRecId    _releaseSessionProductRecId,
        RefRecId    _legalEntityRecId,
        boolean     _forUpdate = false)
    {
        EcoResReleaseProductLegalEntity ecoResReleaseProductLegalEntity;

        ecoResReleaseProductLegalEntity.selectForUpdate(_forUpdate);

        select firstonly ecoResReleaseProductLegalEntity
            where   ecoResReleaseProductLegalEntity.ReleaseSessionProduct   == _releaseSessionProductRecId
                &&  ecoResReleaseProductLegalEntity.LegalEntity             == _legalEntityRecId;

        return ecoResReleaseProductLegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfDistinctLegalEntitiesInSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of distinct legal entities that participate in a release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    /// <returns>
    /// The number of distinct legal entities that participate in a release session.
    /// </returns>
    public static int64 numberOfDistinctLegalEntitiesInSession(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        CompanyInfo                     companyInfo;
        EcoResReleaseProductLegalEntity ecoResReleaseProductLegalEntity;
        EcoResReleaseSessionProduct     ecoResReleaseSessionProduct;

        select count(RecId) from companyInfo
            exists join ecoResReleaseProductLegalEntity
                where ecoResReleaseProductLegalEntity.LegalEntity   == companyInfo.RecId
                exists join ecoResReleaseSessionProduct
                where   ecoResReleaseSessionProduct.RecId           == ecoResReleaseProductLegalEntity.ReleaseSessionProduct
                    &&  ecoResReleaseSessionProduct.ReleaseSession  == _releaseSessionRecId;

        return companyInfo.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS314047</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS321252</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ReleaseSessionProduct</TitleField1>
	<TitleField2>LegalEntity</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ReleaseSessionProductLegalEntityIdx</ClusteredIndex>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>ReleaseSessionProductLegalEntityIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EcoResReleaseProductLegalEntityLog</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResReleaseProductLegalEntityLog</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReleaseSessionProduct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReleaseSessionProduct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReleaseSessionProduct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SystemAdded</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReleaseSessionProductLegalEntityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReleaseSessionProduct</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CompanyInfo_EcoResReleaseProductLegalEntity</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResReleaseSessionProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResReleaseSessionProduct</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResReleaseSessionProduct</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>EcoResReleaseSessionProduct_EcoResReleaseProductLegalEntity</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReleaseSessionProduct</Name>
					<Field>ReleaseSessionProduct</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>