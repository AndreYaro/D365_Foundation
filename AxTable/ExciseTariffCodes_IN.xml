<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ExciseTariffCodes_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ExciseTariffCodes_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the table.
    /// </summary>
    /// <param name="tariffCode">
    /// The tariff code of the <c>ExciseTariffCodes_IN</c> table record.
    /// </param>
    /// <returns>
    /// true if the record exits; otherwise, false.
    /// </returns>
    public static boolean exist(TariffCode_IN  tariffCode)
    {
        return tariffCode &&
            (select exciseTariffCodes_IN
                index hint TariffCodeIdx
                    where exciseTariffCodes_IN.TariffCode == tariffCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the ExciseTariffCodes_IN table for the specified id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing ExciseTariffCodes_IN table.
    /// </returns>
    public static ExciseTariffCodes_IN  find(
        RefRecId            _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)

    {
        ExciseTariffCodes_IN  exciseTariffCodes_IN;
        ;

        exciseTariffCodes_IN.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            exciseTariffCodes_IN.concurrencyModel(_concurrencyModel);
        }

        select firstonly exciseTariffCodes_IN
            where exciseTariffCodes_IN.RecId == _recId;

        return exciseTariffCodes_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTariffCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds excise of tariff codes by tariff code.
    /// </summary>
    /// <param name="_tariffCode">
    /// The tariff code.
    /// </param>
    /// <param name="_forUpdate">
    /// The forUpdate flag.
    /// </param>
    /// <returns>
    /// The instance of the <c>ExciseTariffCodes_IN</c> class.
    /// </returns>
    public static ExciseTariffCodes_IN findByTariffCode(
        TariffCode_IN _tariffCode,
        boolean       _forUpdate = false)

    {
        ExciseTariffCodes_IN  exciseTariffCodes;

        if (_tariffCode)
        {
            exciseTariffCodes.selectForUpdate(_forUpdate);
            select firstonly exciseTariffCodes
                where exciseTariffCodes.TariffCode == _tariffCode;
        }

        return exciseTariffCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the Go To Main Table functionality for the <c>ExciseTariffCodes_IN</c> table.
    /// </summary>
    /// <param name="_exciseTariffCode">
    /// The tariff code of the <c>ExciseTariffCodes_IN</c> record.
    /// </param>
    /// <param name="_record">
    /// The common record.
    /// </param>
    public static void jumpRef(
        TariffCode_IN    _exciseTariffCode,
        Common           _record)
    {
        Args    args = new Args();

        args.record(_record);
        args.parm(_exciseTariffCode);
        new MenuFunction(menuitemDisplayStr(ExciseTariffCodeTable_IN), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupExciseTariffCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up excise tariff code.
    /// </summary>
    /// <param name="_formControl">
    /// The form control.
    /// </param>
    /// <param name="_companyId">
    /// The company id.
    /// </param>
    public static void lookupExciseTariffCode(
        FormControl _formControl,
        CompanyId   _companyId = curext())
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(ExciseTariffCodes_IN), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        query.allowCrossCompany(true);
        query.addCompanyRange(_companyId);
        queryBuildDataSource = query.addDataSource(tableNum(ExciseTariffCodes_IN));
        sysTableLookup.addLookupfield(fieldNum(ExciseTariffCodes_IN, TariffCode));
        sysTableLookup.addLookupfield(fieldNum(ExciseTariffCodes_IN, Description));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64116</DeveloperDocumentation>
	<FormRef>ExciseTariffCodeTable_IN</FormRef>
	<Label>@GLS5235</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>TariffCode</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<Modules>APARShared</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TariffCodeIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TariffCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TariffCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TariffCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TariffCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TariffCode_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TariffCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TariffCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>