<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocFormatClassInfo_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EFDocFormatClassInfo_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDefaultData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if default data is loaded; if not, loads it.
    /// </summary>
    public static void checkDefaultData()
    {
        Set                     formatObjects;
        EFDocFormatClassInfo_BR classInfo;

        formatObjects = EFDocFormatClassInfo_BR::getFormatObjects();

        select count(RecId)
            from classInfo;

        if (classInfo.RecId < formatObjects.elements())
        {
            EFDocFormatClassInfo_BR::populateData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatObjects</Name>
				<Source><![CDATA[
    private static Set getFormatObjects()
    {
        Set classes = new Set(Types::Class);

        classes.add(EFDocMsgFormat_XmlCancel_BR::construct());
        classes.add(EFDocMsgFormat_XmlDiscard_BR::construct());
        classes.add(EFDocMsgFormat_XmlDiscardV3_BR::construct());
        classes.add(EFDocMsgFormat_XmlDiscardV4_BR::construct());
        classes.add(EFDocMsgFormat_XmlInquire_BR::construct());
        classes.add(EFDocMsgFormat_XmlInquireV3_BR::construct());
        classes.add(EFDocMsgFormat_XmlInquireV4_BR::construct());
        classes.add(EFDocMsgFormat_XmlSubmit_BR::construct());
        classes.add(EFDocMsgFormat_XmlSubmitV3_BR::construct());
        classes.add(EFDocMsgFormat_XmlSubmitV4_BR::construct());
        classes.add(EFDocMsgFormat_XmlSubmitReturn_BR::construct());
        classes.add(EFDocMsgFormat_XmlSubmitReturnV3_BR::construct());
        classes.add(EFDocMsgFormat_XmlSubmitReturnV4_BR::construct());
        classes.add(EFDocMsgFormat_XmlServiceInquire_BR::construct(EFDocServiceInquireParams_BR::construct()));
        classes.add(EFDocMsgFormat_XmlServiceInquireV3_BR::construct(EFDocServiceInquireParams_BR::construct()));
        classes.add(EFDocMsgFormat_XmlServiceInquireV4_BR::construct(EFDocServiceInquireParams_BR::construct()));
        classes.add(EFEventDocMsgFormat_Cancel_BR::construct());
        classes.add(new EFEventDocMsgFormat_CancelV3_WS2_BR());
        classes.add(new EFEventDocMsgFormat_CancelV3_WS3_BR());

        Set customClasses = EFDocFormatClassInfo_BR::getCustomFormatObjects();

        if (customClasses != null
            && customClasses.typeId() == Types::Class)
        {
            SetEnumerator en = customClasses.getEnumerator();

            while(en.moveNext())
            {
                classes.add(en.current());
            }
        }

        return classes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomFormatObjects</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns set with list of custom format classses.
    /// </summary>
    /// <returns>
    /// Set with format classes.
    /// </returns>
    public static Set getCustomFormatObjects()
    {
        Set classes;
        return classes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new record or updates existing data for a format class from its instance.
    /// </summary>
    /// <param name="_docMsgFormat">
    /// Instance of a class that implements either <c>IEFDocMsgFormat</c> or <c>IEFEventDocMsgFormat_BR</c>.
    /// </param>
    public static void insertFromInstance(Object _docMsgFormat)
    {
        ClassName               className;
        ClassId                 classId;
        EFDocFormatClassInfo_BR formatClassInfo;

        classId     = classIdGet(_docMsgFormat);
        className   = classId2Name(classId);

        select forUpdate formatClassInfo
            where formatClassInfo.className == className;

        formatClassInfo.ClassName         = className;
        formatClassInfo.ClassId           = classId;
        formatClassInfo.Version           = _docMsgFormat.version();
        formatClassInfo.WebService        = _docMsgFormat.webService();
        formatClassInfo.WebServiceVersion = _docMsgFormat.eFiscalDocVersion();
        formatClassInfo.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the table with current format classes.
    /// </summary>
    public static void populateData()
    {
        Set             formatObjects = EFDocFormatClassInfo_BR::getFormatObjects();
        SetEnumerator   formatObjectsEnumerator = formatObjects.getEnumerator();

        ttsBegin;

        while (formatObjectsEnumerator.moveNext())
        {
            EFDocFormatClassInfo_BR::insertFromInstance(formatObjectsEnumerator.current());
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableVersionsForWebService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a containers with the versions of the formats available for a given webservice
    /// </summary>
    /// <param name="_webService">
    /// The webservice that will have the versions fetched
    /// </param>
    /// <returns>
    /// A container with strings representing the format versions available for the given webservice
    /// </returns>
    public static container getAvailableVersionsForWebService(EFDocWebService_BR _webService)
    {
        EFDocFormatClassInfo_BR     formatClassInfo;
        container                   versions;

        while select Version from formatClassInfo
            where formatClassInfo.WebService == _webService
        {
            versions += formatClassInfo.Version;
        }

        return versions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVersionAvailableForWebService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a given version is available as a format for a given webservice
    /// </summary>
    /// <param name="_webService">
    /// The webservice to check the format version against
    /// </param>
    /// <param name="_version">
    /// The format version to be checked
    /// </param>
    /// <returns>
    /// True if the format version is available for the webservice, false otherwise.
    /// </returns>
    public static boolean isVersionAvailableForWebService(EFDocWebService_BR _webService, EFDocFormatVersion_BR _version)
    {
        EFDocFormatClassInfo_BR     formatClassInfo;

        select firstOnly RecId from formatClassInfo
            where formatClassInfo.WebService == _webService
               && formatClassInfo.Version    == _version;

        return formatClassInfo.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64172</DeveloperDocumentation>
	<Label>@GLS64171</Label>
	<TitleField1>WebService</TitleField1>
	<TitleField2>WebServiceVersion</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>FiscalBooksBrazil</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ClassNameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>classId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Version</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WebService</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WebServiceVersion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>className</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>className</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>classId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Version</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WebService</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WebServiceVersion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>classId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ClassId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>className</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ClassName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Version</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EFDocFormatVersion_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WebService</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EFDocWebService_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WebServiceVersion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EFiscalDocVersion_BR</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ClassNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>className</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>