<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNettingAgreement</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendNettingAgreement extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    internal static CustVendNettingAgreement find(RecId _recId, boolean _forUpdate = false)
    {
        CustVendNettingAgreement nettingAgreement;
        nettingAgreement.selectForUpdate(_forUpdate);

        select firstonly nettingAgreement
            where nettingAgreement.RecId == _recId;

        return nettingAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPair</Name>
				<Source><![CDATA[
    internal static CustVendNettingAgreement findByPair(RecId _pairRecId)
    {
        CustVendNettingAgreement nettingAgreement;
        CustVendNettingPair nettingPair;

        select firstonly nettingAgreement
            exists join nettingPair
            where nettingPair.RecId == _pairRecId
                && nettingAgreement.RecId == nettingPair.CustVendNettingAgreement;

        return nettingAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    internal static CustVendNettingAgreement findByName(CustVendNettingAgreementName _name)
    {
        CustVendNettingAgreement nettingAgreement;

        select firstonly nettingAgreement
            where nettingAgreement.Name == _name;

        return nettingAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    internal void updateStatus(CustVendNettingStatus _status)
    {
        if (this.RecId)
        {
            if (this.validateIntercompanyNettingPair(_status))
            {
                this.AgreementStatus = _status;
                this.update();
            }
            else
            {
                throw error("@CashManagement:NettingHasIntercompanyPerAgreementValidation");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.AccountType = LedgerJournalACType::Ledger;
        this.AgreementStatus = CustVendNettingStatus::Inactive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>count</Name>
				<Source><![CDATA[
    internal static int count()
    {
        CustVendNettingAgreement agreement;
        select count(RecId) from agreement;
        return int642int(agreement.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        CustVendNettingAgreement origAgreement = this.orig();
        CustVendNettingAgreementName origAgreementName = origAgreement.Name;
        boolean needUpdateRuleAgreement = origAgreementName != this.Name;

        if (needUpdateRuleAgreement)
        {
            ttsbegin;
        }

        super();

        if (needUpdateRuleAgreement)
        {
            CustVendNettingRuleAgreement::updateAgreementName(origAgreementName, this.Name);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIntercompanyNettingPair</Name>
				<Source><![CDATA[
    private boolean validateIntercompanyNettingPair(CustVendNettingStatus _status)
    {
        return _status != CustVendNettingStatus::Active
            || BankParameters::find().AllowNettingIntercompany
            || !this.haveInterCompanyNettingPairs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveInterCompanyNettingPairs</Name>
				<Source><![CDATA[
    private boolean haveInterCompanyNettingPairs()
    {
        CustVendNettingPair custVendNettingPair;

        select count(RecId) from custVendNettingPair
            where (custVendNettingPair.CreditCompany != curExt() || custVendNettingPair.DebitCompany != curExt())
                && custVendNettingPair.CustVendNettingAgreement == this.RecId;

        return custVendNettingPair.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@CashManagement:NettingAgreement</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustVendNettingRuleAgreement</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>CustVendNettingRuleAgreement</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AllowEdit>No</AllowEdit>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AgreementStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@CashManagement:CustVendNettingStatus</Label>
			<EnumType>CustVendNettingStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>CustVendNettingAgreementDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalName</Name>
			<ExtendedDataType>LedgerJournalNameId</ExtendedDataType>
			<Label>@CashManagement:CustVendNettingAgreementJournalName</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>CustVendNettingAgreementName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankAccountTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalName</Name>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LedgerJournalName</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalName</Name>
					<Field>JournalName</Field>
					<RelatedField>JournalName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>