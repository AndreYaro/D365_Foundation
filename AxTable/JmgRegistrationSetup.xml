<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgRegistrationSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgRegistrationSetup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>useFKeys</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether Function keys are used on this registration form configuration.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::Yes</c> value if function keys are used; otherwise, the <c>NoYes::No</c> value.
    /// </returns>
    public NoYes useFKeys()
    {
        JmgRegistrationButtonTable jmgRegistrationButtonTable;
        select firstonly jmgRegistrationButtonTable
            where jmgRegistrationButtonTable.ActionPaneSetupID  == this.ActionPaneSetupID       &&
                  jmgRegistrationButtonTable.ButtonSetupType    == JmgButtonSetupType::Button   &&
                  jmgRegistrationButtonTable.fKey               != JmgFKey::Blank;

        if (jmgRegistrationButtonTable)
        {
            return NoYes::Yes;
        }
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColumnAppearanceFieldsDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting the <c>JmgFieldName</c> enumerations for a module using column appearance.
    /// </summary>
    /// <param name = "_module">The module.</param>
    /// <param name = "_fieldNames">A collection where the mapped enumerations can be returned.</param>
    static delegate void getColumnAppearanceFieldsDelegate(JmgModuleEnum _module, List _fieldNames)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviewAppearanceFieldsDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting the <c>JmgFieldName</c> enumerations for a module using preview appearance.
    /// </summary>
    /// <param name = "_module">The module.</param>
    /// <param name = "_fieldNames">A collection where the mapped enumerations can be returned.</param>
    static delegate void getPreviewAppearanceFieldsDelegate(JmgModuleEnum _module, List _fieldNames)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColumnAppearanceFieldsDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for getting the <c>JmgFieldName</c> enumerations for a module using column appearance.
    /// </summary>
    /// <param name = "_module">The module.</param>
    /// <param name = "_fieldNames">A collection where the mapped enumerations can be returned.</param>
    [SubscribesTo(tableStr(JmgRegistrationSetup), staticDelegateStr(JmgRegistrationSetup, getColumnAppearanceFieldsDelegate))]
    public static void getColumnAppearanceFieldsDelegateHandler(JmgModuleEnum _module, List _fieldNames)
    {
        switch (_module)
        {
            case JmgModuleEnum::PROD:
                _fieldNames.addEnd(JmgFieldName::Select);
                _fieldNames.addEnd(JmgFieldName::BadQty);
                _fieldNames.addEnd(JmgFieldName::goodQty);
                _fieldNames.addEnd(JmgFieldName::reqQty);
                _fieldNames.addEnd(JmgFieldName::WrkCtrId);
                _fieldNames.addEnd(JmgFieldName::ResourceName);
                _fieldNames.addEnd(JmgFieldName::Lock);
                _fieldNames.addEnd(JmgFieldName::ProdOrder);
                _fieldNames.addEnd(JmgFieldName::Description);
                _fieldNames.addEnd(JmgFieldName::ItemName);
                _fieldNames.addEnd(JmgFieldName::OperationActivity);
                _fieldNames.addEnd(JmgFieldName::Quantity);
                _fieldNames.addEnd(JmgFieldName::PdsCWQuantity);
                _fieldNames.addEnd(JmgFieldName::startQty);
                _fieldNames.addEnd(JmgFieldName::PdsCWStartQty);
                _fieldNames.addEnd(JmgFieldName::RemainingQty);
                _fieldNames.addEnd(JmgFieldName::JobType);
                _fieldNames.addEnd(JmgFieldName::Status);
                _fieldNames.addEnd(JmgFieldName::Employees);
                break;

            case JmgModuleEnum::PROJ:
                _fieldNames.addEnd(JmgFieldName::Select);
                _fieldNames.addEnd(JmgFieldName::ProjectID);
                _fieldNames.addEnd(JmgFieldName::Description);
                _fieldNames.addEnd(JmgFieldName::JobType);
                _fieldNames.addEnd(JmgFieldName::OperationActivity);
                _fieldNames.addEnd(JmgFieldName::projStatus);
                _fieldNames.addEnd(JmgFieldName::Employees);
                break;

            case JmgModuleEnum::IPC:
                _fieldNames.addEnd(JmgFieldName::Select);
                _fieldNames.addEnd(JmgFieldName::Description);
                _fieldNames.addEnd(JmgFieldName::ReferenceID);
                _fieldNames.addEnd(JmgFieldName::Status);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviewAppearanceFieldsDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for getting the <c>JmgFieldName</c> enumerations for a module using preview appearance.
    /// </summary>
    /// <param name = "_module">The module.</param>
    /// <param name = "_fieldNames">A collection where the mapped enumerations can be returned.</param>
    [SubscribesTo(tableStr(JmgRegistrationSetup), staticDelegateStr(JmgRegistrationSetup, getPreviewAppearanceFieldsDelegate))]
    public static void getPreviewAppearanceFieldsDelegateHandler(JmgModuleEnum _module, List _fieldNames)
    {
        switch (_module)
        {
            case JmgModuleEnum::PROD:
                _fieldNames.addEnd(JmgFieldName::FromDate);
                _fieldNames.addEnd(JmgFieldName::FromTime);
                _fieldNames.addEnd(JmgFieldName::prevOprQtyGood);
                _fieldNames.addEnd(JmgFieldName::ItemNumber);
                _fieldNames.addEnd(JmgFieldName::NextOpr);
                _fieldNames.addEnd(JmgFieldName::OprNum);
                _fieldNames.addEnd(JmgFieldName::prevOpr);
                _fieldNames.addEnd(JmgFieldName::Sequence);
                _fieldNames.addEnd(JmgFieldName::prevOprJobStatus);
                _fieldNames.addEnd(JmgFieldName::ToDate);
                _fieldNames.addEnd(JmgFieldName::showRoute);
                break;

            case JmgModuleEnum::PROJ:            
                _fieldNames.addEnd(JmgFieldName::projSubProjs);
                _fieldNames.addEnd(JmgFieldName::projParent);
                _fieldNames.addEnd(JmgFieldName::projSiblings);
                _fieldNames.addEnd(JmgFieldName::projStartDate);
                _fieldNames.addEnd(JmgFieldName::FromDate);
                _fieldNames.addEnd(JmgFieldName::ToDate);
                break;

            case JmgModuleEnum::IPC:
                _fieldNames.addEnd(JmgFieldName::Description);
                _fieldNames.addEnd(JmgFieldName::Status);
                _fieldNames.addEnd(JmgFieldName::JobType);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultSetupForArea</Name>
				<Source><![CDATA[
    static private JmgGridSetupRecID createDefaultSetupForArea(JmgModuleEnum _module, JmgRegistrationSetupId _setupId)
    {
        LanguageId                      systemLanguageId  = SystemParameters::getSystemLanguageId();
        JmgRegistrationGridTable        gridTable;
        JmgClientFieldTable             fieldTable;
        
        select firstonly gridTable where gridTable.GridSetupId == _setupId;
        if (!gridTable)
        {
            gridTable.GridSetupId = _setupId;
            gridTable.insert();

            fieldTable.GridSetupId = gridTable.RecId;
            fieldTable.GridAppearance = JmgGridAppearance::Column;

            List fieldNames = new List(Types::Enum);
            JmgRegistrationSetup::getColumnAppearanceFieldsDelegate(_module, fieldNames);
            ListEnumerator enum = fieldNames.getEnumerator();
            while (enum.moveNext())
            {
                fieldTable.FieldName = enum.current();
                fieldTable.insert();
            }

            fieldTable.GridAppearance = JmgGridAppearance::PreviewPane;
            fieldNames = new List(Types::Enum);
            JmgRegistrationSetup::getPreviewAppearanceFieldsDelegate(_module, fieldNames);
            enum = fieldNames.getEnumerator();
            while (enum.moveNext())
            {
                fieldTable.FieldName = enum.current();
                fieldTable.insert();
            }
        }

        return gridTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates four default registration form configurations.
    /// </summary>
    static void createDefaultSetup()
    {
        JmgRegistrationSetup            jmgRegistrationSetup;
        JmgRegistrationSetupId          setupId;
        JmgRegistrationButtonTable      jmgRegButt;
        JmgRegistrationActionPaneTable  actPaneTbl;

        JmgActionPaneRecID              actRecID;
        JmgGridSetupRecID               prodGridRecId;
        JmgGridSetupRecID               ipcGridRecId;
        JmgGridSetupRecID               projGridRecId;
        LanguageId                      systemLanguageId  = SystemParameters::getSystemLanguageId();
        Label                           label = new Label(systemLanguageId);

        str getLabelValueInSystemLanguage(str _value)
        {
            return label.extractString(_value);
        }

        void addButton(JmgFKey fKey, JmgSignInButtonFunction buttonFunction)
        {
            jmgRegButt.Sequence        = jmgRegButt.Sequence + 1;
            jmgRegButt.fKey            = fKey;
            jmgRegButt.Label           = '';
            jmgRegButt.ButtonSetupType = JmgButtonSetupType::Button;
            jmgRegButt.ButtonFunction  = buttonFunction;
            jmgRegButt.insert();
        }

        prodGridRecId = JmgRegistrationSetup::createDefaultSetupForArea(JmgModuleEnum::PROD, getLabelValueInSystemLanguage(literalstr("@SYS105985")));
        projGridRecId = JmgRegistrationSetup::createDefaultSetupForArea(JmgModuleEnum::PROJ, getLabelValueInSystemLanguage(literalstr("@SYS80304")));
        ipcGridRecId  = JmgRegistrationSetup::createDefaultSetupForArea(JmgModuleEnum::IPC, getLabelValueInSystemLanguage(literalstr("@SYS68889")));

        //All
        setupId = getLabelValueInSystemLanguage(literalstr("@SYS11696"));
        jmgRegistrationSetup    = JmgRegistrationSetup::find(setupId);

        if (!jmgRegistrationSetup)
        {
            jmgRegistrationSetup.SetupId                = setupId;
            jmgRegistrationSetup.ShowMessages           = JmgFastTabAppearance::Expanded;
            jmgRegistrationSetup.SignInStartPage        = JmgSignInStartPage::Jobs;
            jmgRegistrationSetup.LockEmployee           = NoYes::No;
            jmgRegistrationSetup.ShowJobQueue           = NoYes::Yes;
            jmgRegistrationSetup.ShowCurrentActivities  = JmgFastTabAppearance::Expanded;
            jmgRegistrationSetup.ShowPreview            = JmgFastTabAppearance::Expanded;
            jmgRegistrationSetup.ShowStatus             = JmgFastTabAppearance::Expanded;

            select firstonly actPaneTbl where actPaneTbl.ActionPaneSetupId == setupId;

            if (actPaneTbl.RecId)
            {
                delete_from jmgRegButt where jmgRegButt.ActionPaneSetupID == actPaneTbl.RecId;
            }
            delete_from actPaneTbl where actPaneTbl.ActionPaneSetupId == setupId;

            actPaneTbl.ActionPaneSetupId = setupId;
            actPaneTbl.insert();

            actRecID = actPaneTbl.RecId;

            jmgRegButt.Sequence                     = 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS115056"));
            jmgRegButt.ActionPaneSetupID            = actRecID;
            jmgRegButt.fKey                         = JmgFKey::F10;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::Tab;
            jmgRegButt.insert();

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS309728"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F1, JmgSignInButtonFunction::Approve);
            addButton(JmgFKey::F2, JmgSignInButtonFunction::Bundle);
            addButton(JmgFKey::Blank, JmgSignInButtonFunction::StartResourceJobs);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS309671"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F3, JmgSignInButtonFunction::FeedbackComplete);
            addButton(JmgFKey::F4, JmgSignInButtonFunction::FeedbackStopped);
            addButton(JmgFKey::F5, JmgSignInButtonFunction::FeedbackInProgress);
            addButton(JmgFKey::Blank, JmgSignInButtonFunction::Feedback);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS38378"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F6, JmgSignInButtonFunction::Assistance);
            addButton(JmgFKey::F7, JmgSignInButtonFunction::AssistResource);
            addButton(JmgFKey::Blank, JmgSignInButtonFunction::InventJournal);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS322113"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F8, JmgSignInButtonFunction::SignInOut);
            addButton(JmgFKey::F9, JmgSignInButtonFunction::Break);
            addButton(JmgFKey::Blank, JmgSignInButtonFunction::SwitchCode);
            addButton(JmgFKey::Blank, JmgSignInButtonFunction::Cancel);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS118430"));
            jmgRegButt.fKey                         = JmgFKey::F11;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::Tab;
            jmgRegButt.insert();

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS38568"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F1, JmgSignInButtonFunction::Balances);
            addButton(JmgFKey::F2, JmgSignInButtonFunction::Info);
            addButton(JmgFKey::F3, JmgSignInButtonFunction::AttendanceOverview);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS309728"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F4, JmgSignInButtonFunction::Jobs);
            addButton(JmgFKey::F5, JmgSignInButtonFunction::Production);
            addButton(JmgFKey::F6, JmgSignInButtonFunction::Project);
            addButton(JmgFKey::F7, JmgSignInButtonFunction::ShowCurrentActivities);
            addButton(JmgFKey::F8, JmgSignInButtonFunction::SelectedJobs);
            addButton(JmgFKey::F9, JmgSignInButtonFunction::IPC);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS60385"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F7, JmgSignInButtonFunction::Materials);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS114913"));
            jmgRegButt.fKey                         = JmgFKey::F12;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::Tab;
            jmgRegButt.insert();

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS109871"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F1, JmgSignInButtonFunction::ChangeWrkCtr);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS114630"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F2, JmgSignInButtonFunction::Attachment);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS39770"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F3, JmgSignInButtonFunction::ProjFee);
            addButton(JmgFKey::F4, JmgSignInButtonFunction::ProjItem);

            addButton(JmgFKey::F5, JmgSignInButtonFunction::pmfCoByProducts);

            jmgRegistrationSetup.ActionPaneSetupID = actRecID;
            jmgRegistrationSetup.ProdGridSetupID = prodGridRecId;
            jmgRegistrationSetup.ProjGridSetupID = projGridRecId;
            jmgRegistrationSetup.ipcGridSetupID = ipcGridRecId;

            jmgRegistrationSetup.insert();
        }

        //Default
        setupId = getLabelValueInSystemLanguage(literalstr("@SYS40539"));
        jmgRegistrationSetup    = JmgRegistrationSetup::find(setupId);
        if (!jmgRegistrationSetup)
        {
            jmgRegistrationSetup.SetupId                = setupId;

            jmgRegistrationSetup.ShowMessages           = JmgFastTabAppearance::Expanded;
            jmgRegistrationSetup.SignInStartPage        = JmgSignInStartPage::Jobs;
            jmgRegistrationSetup.LockEmployee           = NoYes::No;
            jmgRegistrationSetup.ShowJobQueue           = NoYes::Yes;
            jmgRegistrationSetup.ShowPreview            = JmgFastTabAppearance::Expanded;
            jmgRegistrationSetup.ShowStatus             = JmgFastTabAppearance::Expanded;
            jmgRegistrationSetup.ShowCurrentActivities  = JmgFastTabAppearance::Expanded;

            select firstonly actPaneTbl where actPaneTbl.ActionPaneSetupId == setupId;

            if (actPaneTbl.RecId)
            {
                delete_from jmgRegButt where jmgRegButt.ActionPaneSetupID == actPaneTbl.RecId;
            }
            delete_from actPaneTbl where actPaneTbl.ActionPaneSetupId == setupId;

            actPaneTbl.ActionPaneSetupId = setupId;
            actPaneTbl.insert();

            actRecID = actPaneTbl.RecId;

            jmgRegButt.Sequence                     = 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS115056"));
            jmgRegButt.ActionPaneSetupID            = actRecID;
            jmgRegButt.fKey                         = JmgFKey::F10;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::Tab;
            jmgRegButt.insert();

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS309728"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F1, JmgSignInButtonFunction::Approve);
            addButton(JmgFKey::F2, JmgSignInButtonFunction::Bundle);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS38378"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F3, JmgSignInButtonFunction::Assistance);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS309671"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F4, JmgSignInButtonFunction::Feedback);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS322113"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F5, JmgSignInButtonFunction::SignInOut);
            addButton(JmgFKey::F6, JmgSignInButtonFunction::Break);
            addButton(JmgFKey::F7, JmgSignInButtonFunction::SwitchCode);
            addButton(JmgFKey::F8, JmgSignInButtonFunction::Cancel);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS118430"));
            jmgRegButt.fKey                         = JmgFKey::F11;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::Tab;
            jmgRegButt.insert();

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS38568"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F1, JmgSignInButtonFunction::Balances);
            addButton(JmgFKey::F2, JmgSignInButtonFunction::Info);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS309728"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F3, JmgSignInButtonFunction::Jobs);
            addButton(JmgFKey::F4, JmgSignInButtonFunction::Production);
            addButton(JmgFKey::F5, JmgSignInButtonFunction::Project);
            addButton(JmgFKey::F6, JmgSignInButtonFunction::IPC);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS114913"));
            jmgRegButt.fKey                         = JmgFKey::F12;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::Tab;
            jmgRegButt.insert();

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS109871"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F1, JmgSignInButtonFunction::ChangeWrkCtr);

            select firstonly actPaneTbl where actPaneTbl.ActionPaneSetupId == setupId;

            jmgRegistrationSetup.ActionPaneSetupID = actPaneTbl.RecId;
            jmgRegistrationSetup.ProdGridSetupID = prodGridRecId;
            jmgRegistrationSetup.ProjGridSetupID = projGridRecId;
            jmgRegistrationSetup.ipcGridSetupID = ipcGridRecId;

            jmgRegistrationSetup.insert();
        }

        //Production
        setupId = getLabelValueInSystemLanguage(literalstr("@SYS105985"));
        jmgRegistrationSetup    = JmgRegistrationSetup::find(setupId);
        if (!jmgRegistrationSetup)
        {
            jmgRegistrationSetup.SetupId            = setupId;
            jmgRegistrationSetup.ShowMessages       = JmgFastTabAppearance::Expanded;
            jmgRegistrationSetup.LockEmployee       = NoYes::No;
            jmgRegistrationSetup.ShowJobQueue       = NoYes::No;
            jmgRegistrationSetup.SignInStartPage    = JmgSignInStartPage::Production;
            jmgRegistrationSetup.ShowCurrentActivities  = JmgFastTabAppearance::Expanded;
            jmgRegistrationSetup.ShowPreview            = JmgFastTabAppearance::Expanded;
            jmgRegistrationSetup.ShowStatus             = JmgFastTabAppearance::Expanded;

            select firstonly actPaneTbl where actPaneTbl.ActionPaneSetupId == setupId;

            if (actPaneTbl.RecId)
            {
                delete_from jmgRegButt where jmgRegButt.ActionPaneSetupID == actPaneTbl.RecId;
            }
            delete_from actPaneTbl where actPaneTbl.ActionPaneSetupId == setupId;

            actPaneTbl.ActionPaneSetupId = setupId;
            actPaneTbl.insert();

            actRecID = actPaneTbl.RecId;
            jmgRegButt.Sequence                     = 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS115056"));
            jmgRegButt.ActionPaneSetupID            = actRecID;
            jmgRegButt.fKey                         = JmgFKey::F10;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::Tab;
            jmgRegButt.insert();

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS309728"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F1, JmgSignInButtonFunction::Approve);
            addButton(JmgFKey::F2, JmgSignInButtonFunction::Bundle);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS309671"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F3, JmgSignInButtonFunction::Feedback);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS38378"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F4, JmgSignInButtonFunction::Assistance);
            addButton(JmgFKey::F5, JmgSignInButtonFunction::AssistResource);
            addButton(JmgFKey::F6, JmgSignInButtonFunction::InventJournal);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS322113"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F7, JmgSignInButtonFunction::SignInOut);
            addButton(JmgFKey::F8, JmgSignInButtonFunction::Break);
            addButton(JmgFKey::F9, JmgSignInButtonFunction::SwitchCode);
            addButton(JmgFKey::Blank, JmgSignInButtonFunction::Cancel);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS109871"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::Blank, JmgSignInButtonFunction::ChangeWrkCtr);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS118430"));
            jmgRegButt.fKey                         = JmgFKey::F11;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::Tab;
            jmgRegButt.insert();

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS38568"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F1, JmgSignInButtonFunction::Balances);
            addButton(JmgFKey::F2, JmgSignInButtonFunction::Info);
            addButton(JmgFKey::F3, JmgSignInButtonFunction::AttendanceOverview);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS309728"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F4, JmgSignInButtonFunction::Jobs);
            addButton(JmgFKey::F5, JmgSignInButtonFunction::Production);
            addButton(JmgFKey::F6, JmgSignInButtonFunction::Project);
            addButton(JmgFKey::F7, JmgSignInButtonFunction::ShowCurrentActivities);
            addButton(JmgFKey::F8, JmgSignInButtonFunction::SelectedJobs);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS60385"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F9, JmgSignInButtonFunction::Materials);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS114630"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::Blank, JmgSignInButtonFunction::Attachment);

            jmgRegistrationSetup.ActionPaneSetupID = actRecID;
            jmgRegistrationSetup.ProdGridSetupID = prodGridRecId;

            jmgRegistrationSetup.insert();
        }

        //Project
        setupId = getLabelValueInSystemLanguage(literalstr("@SYS39770"));
        jmgRegistrationSetup    = JmgRegistrationSetup::find(setupId);
        if (!jmgRegistrationSetup)
        {
            jmgRegistrationSetup.SetupId            = setupId;
            jmgRegistrationSetup.ShowMessages       = JmgFastTabAppearance::Expanded;
            jmgRegistrationSetup.LockEmployee       = NoYes::No;
            jmgRegistrationSetup.ShowJobQueue       = NoYes::No;
            jmgRegistrationSetup.SignInStartPage    = JmgSignInStartPage::Project;
            jmgRegistrationSetup.ShowCurrentActivities  = JmgFastTabAppearance::Expanded;
            jmgRegistrationSetup.ShowPreview            = JmgFastTabAppearance::Expanded;
            jmgRegistrationSetup.ShowStatus             = JmgFastTabAppearance::Expanded;

            select firstonly actPaneTbl where actPaneTbl.ActionPaneSetupId == setupId;

            if (actPaneTbl.RecId)
            {
                delete_from jmgRegButt where jmgRegButt.ActionPaneSetupID == actPaneTbl.RecId;
            }
            delete_from actPaneTbl where actPaneTbl.ActionPaneSetupId == setupId;

            actPaneTbl.ActionPaneSetupId = setupId;
            actPaneTbl.insert();

            actRecID = actPaneTbl.RecId;
            jmgRegButt.Sequence                     = 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS115056"));
            jmgRegButt.ActionPaneSetupID            = actRecID;
            jmgRegButt.fKey                         = JmgFKey::F10;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::Tab;
            jmgRegButt.insert();

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS309728"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F1, JmgSignInButtonFunction::Approve);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS322113"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F2, JmgSignInButtonFunction::SignInOut);
            addButton(JmgFKey::F3, JmgSignInButtonFunction::Break);
            addButton(JmgFKey::F4, JmgSignInButtonFunction::SwitchCode);
            addButton(JmgFKey::F5, JmgSignInButtonFunction::Cancel);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS114630"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F6, JmgSignInButtonFunction::Attachment);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS39770"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F7, JmgSignInButtonFunction::ProjFee);
            addButton(JmgFKey::F8, JmgSignInButtonFunction::ProjItem);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS118430"));
            jmgRegButt.fKey                         = JmgFKey::F11;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::Tab;
            jmgRegButt.insert();

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS38568"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F1, JmgSignInButtonFunction::Balances);
            addButton(JmgFKey::F2, JmgSignInButtonFunction::Info);
            addButton(JmgFKey::F3, JmgSignInButtonFunction::AttendanceOverview);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS309728"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F4, JmgSignInButtonFunction::Project);
            addButton(JmgFKey::F5, JmgSignInButtonFunction::IPC);
            addButton(JmgFKey::F6, JmgSignInButtonFunction::ShowCurrentActivities);

            jmgRegistrationSetup.ActionPaneSetupID = actRecID;
            jmgRegistrationSetup.ProjGridSetupID = projGridRecId;

            jmgRegistrationSetup.insert();
        }

        //Indirect activities
        setupId = getLabelValueInSystemLanguage(literalstr("@SYS38379"));
        jmgRegistrationSetup    = JmgRegistrationSetup::find(setupId);
        if (!jmgRegistrationSetup)
        {
            jmgRegistrationSetup.SetupId            = setupId;
            jmgRegistrationSetup.ShowMessages       = JmgFastTabAppearance::Expanded;
            jmgRegistrationSetup.LockEmployee       = NoYes::No;
            jmgRegistrationSetup.ShowJobQueue       = NoYes::No;
            jmgRegistrationSetup.SignInStartPage    = JmgSignInStartPage::IPC;
            jmgRegistrationSetup.ShowCurrentActivities  = JmgFastTabAppearance::Expanded;
            jmgRegistrationSetup.ShowPreview            = JmgFastTabAppearance::Expanded;
            jmgRegistrationSetup.ShowStatus             = JmgFastTabAppearance::Expanded;

            select firstonly actPaneTbl where actPaneTbl.ActionPaneSetupId == setupId;

            if (actPaneTbl.RecId)
            {
                delete_from jmgRegButt where jmgRegButt.ActionPaneSetupID == actPaneTbl.RecId;
            }
            delete_from actPaneTbl where actPaneTbl.ActionPaneSetupId == setupId;

            actPaneTbl.ActionPaneSetupId = setupId;
            actPaneTbl.insert();

            actRecID = actPaneTbl.RecId;

            jmgRegButt.Sequence                     = 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS115056"));
            jmgRegButt.ActionPaneSetupID            = actRecID;
            jmgRegButt.fKey                         = JmgFKey::F10;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::Tab;
            jmgRegButt.insert();

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS309728"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F1, JmgSignInButtonFunction::Approve);
            addButton(JmgFKey::F2, JmgSignInButtonFunction::IPC);
            addButton(JmgFKey::F3, JmgSignInButtonFunction::ShowCurrentActivities);
            addButton(JmgFKey::F4, JmgSignInButtonFunction::Production);
            addButton(JmgFKey::F5, JmgSignInButtonFunction::Project);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS322113"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::F6, JmgSignInButtonFunction::SignInOut);
            addButton(JmgFKey::F7, JmgSignInButtonFunction::Break);
            addButton(JmgFKey::F8, JmgSignInButtonFunction::SwitchCode);
            addButton(JmgFKey::F9, JmgSignInButtonFunction::Cancel);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS38568"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::Blank, JmgSignInButtonFunction::Balances);
            addButton(JmgFKey::Blank, JmgSignInButtonFunction::Info);
            addButton(JmgFKey::Blank, JmgSignInButtonFunction::AttendanceOverview);

            jmgRegButt.Sequence                     = jmgRegButt.Sequence + 1;
            jmgRegButt.Label                        = getLabelValueInSystemLanguage(literalstr("@SYS114630"));
            jmgRegButt.fKey                         = JmgFKey::Blank;
            jmgRegButt.ButtonFunction               = JmgSignInButtonFunction::Blank;
            jmgRegButt.ButtonSetupType              = JmgButtonSetupType::ButtonGroup;
            jmgRegButt.insert();

            addButton(JmgFKey::Blank, JmgSignInButtonFunction::Attachment);

            jmgRegistrationSetup.ActionPaneSetupID = actRecID;
            jmgRegistrationSetup.ipcGridSetupID = ipcGridRecId;

            jmgRegistrationSetup.insert();
        }

        //Clock in or out
        setupId = getLabelValueInSystemLanguage("@SYS111724");
        jmgRegistrationSetup    = JmgRegistrationSetup::find(setupId);
        if (!jmgRegistrationSetup)
        {
            jmgRegistrationSetup.SetupId            = setupId;
            jmgRegistrationSetup.insert();
        }

        // Device
        select firstonly jmgRegistrationSetup
            where jmgRegistrationSetup.EnableDevice == NoYes::Yes;

        if (!jmgRegistrationSetup)
        {
            setupId = getLabelValueInSystemLanguage("@SCM:Device");
            jmgRegistrationSetup.SetupId                = setupId;
            jmgRegistrationSetup.EnableDevice           = NoYes::Yes;
            jmgRegistrationSetup.LockEmployee           = NoYes::Yes;
            jmgRegistrationSetup.EnableWorkerFilter     = NoYes::Yes;

            jmgRegistrationSetup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateDefaultConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates configurations of touch experience for the job card registration
    /// </summary>
    /// <param name="_forUpdate">
    /// Specifies whether the record should be selected for update.
    /// </param>
    /// <returns>
    /// An <c>JmgRegistrationSetup</c> record that contains definition of configurations of touch experience for job card registration.
    /// </returns>
    public static JmgRegistrationSetup findOrCreateDefaultConfiguration(boolean _forUpdate = false)
    {
        JmgRegistrationSetup jmgRegistrationSetup;
        jmgRegistrationSetup.selectForUpdate(_forUpdate);

        select firstonly jmgRegistrationSetup where jmgRegistrationSetup.EnableDevice == NoYes::Yes;

        if (!jmgRegistrationSetup)
        {
            JmgRegistrationSetup::createDefaultSetup();
            select firstonly jmgRegistrationSetup where jmgRegistrationSetup.EnableDevice == NoYes::Yes;
        }
        return jmgRegistrationSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>JmgRegistrationSetup</c> record from the database.
    /// </summary>
    /// <param name="_jmgRegistrationSetupId">
    /// The registration setup ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether the returned record must be selected for update.
    /// </param>
    /// <returns>
    /// A <c>JmgRegistrationSetup</c> record from the database.
    /// </returns>
    static JmgRegistrationSetup find(JmgRegistrationSetupId _jmgRegistrationSetupId, boolean _forUpdate = false)
    {
        JmgRegistrationSetup    jmgRegistrationSetup;
        jmgRegistrationSetup.selectForUpdate(_forUpdate);

        if (_jmgRegistrationSetupId)
        {
            select firstonly jmgRegistrationSetup
                where jmgRegistrationSetup.SetupId == _jmgRegistrationSetupId;
        }

        return jmgRegistrationSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findConfigurationForCurrentUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>JmgRegistrationSetup</c> record, assigned to the current user.
    /// </summary>
    /// <param name="_enableDevice">
    /// A value that specifies whether the configuration for touch experience should be retrieved.
    /// </param>
    /// <returns>
    /// A <c>JmgRegistrationSetup</c> record.
    /// </returns>
    public static JmgRegistrationSetup findConfigurationForCurrentUser(NoYes _enableDevice)
    {
        JmgRegistrationSetup configuration;
        JmgRegistrationSetupUsers userConfigs;
        UserInfo userInfo;

        select firstonly configuration
            where configuration.EnableDevice == _enableDevice
            join userInfo
                where userInfo.id == curUserId()
            join userConfigs
                where userConfigs.UserId   == userInfo.RecId
                   && userConfigs.ConfigId == configuration.RecId;

        return configuration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;
    
        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(JmgRegistrationSetup, LockScreenSeconds):
                    if (this.LockScreenSeconds > 120 || this.LockScreenSeconds < 5)
                    {
                        ret = checkFailed("@SCM:JmgLockScreenSecondsLimit");
                    }
                    break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>JmgRegistrationEmployees</ConfigurationKey>
	<DeveloperDocumentation>@SYS317303</DeveloperDocumentation>
	<FormRef>JmgRegistrationSetup</FormRef>
	<Label>@SYS39923</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>SetupId</TitleField1>
	<TitleField2>SignInStartPage</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>SetupIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>SetupIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>Config</Relation>
			<Table>JmgRegistrationSetupUsers</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignInStartPage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShowPreview</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SetupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignInStartPage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LockEmployee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShowJobQueue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ActionPaneSetup</Name>
			<Label>@SYS320273</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActionPaneSetupID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DisplayGroup</Name>
			<Label>@SYS53465</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShowJobQueue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WrkCtrValidation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LockEmployee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisableClose</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignOutFeedback</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignInStartPage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShowStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShowMessages</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShowPreview</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FeedbackStyle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShowLinks</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseActualTimeOfRegistration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Factboxes</Name>
			<Label>@SYS320287</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShowCurrentActivities</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShowStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShowMessages</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GridSetups</Name>
			<Label>@SYS320272</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdGridSetupID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IPCGridSetupID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjGridSetupID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SetupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SecondaryButtons</Name>
			<Label>@SYS39919</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShowLinks</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ScannerSetup</Name>
			<Label>@SYS308383</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Scanner</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ActionPaneSetupID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgActionPaneRecID</ExtendedDataType>
			<Label>@SYS320256</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisableClose</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS97158</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FeedbackStyle</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<EnumType>JmgFeedbackStyle</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IPCGridSetupID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgGridSetupRecID</ExtendedDataType>
			<Label>@SYS38379</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LockEmployee</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@SCM:JmgLockEmployeeHelptext</HelpText>
			<Label>@SYS39925</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProdGridSetupID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>JmgGridSetupRecID</ExtendedDataType>
			<Label>@SYS10657</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjGridSetupID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgGridSetupRecID</ExtendedDataType>
			<Label>@SYS80304</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SetupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgRegistrationSetupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShowCurrentActivities</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS300974</Label>
			<EnumType>JmgFastTabAppearance</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShowJobQueue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<Label>@SYS109872</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShowLinks</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS26759</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShowMessages</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS300968</Label>
			<EnumType>JmgFastTabAppearance</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShowPreview</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS300970</Label>
			<EnumType>JmgFastTabAppearance</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShowStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS24621</Label>
			<EnumType>JmgFastTabAppearance</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SignInStartPage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>JmgSignInStartPage</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SignOutFeedback</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<HelpText>@SCM:JmgSignOutFeedbackHelptext</HelpText>
			<Label>@SYS38973</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WrkCtrValidation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<Label>@SYS39105</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Scanner</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@SCM:JmgScannerHelptext</HelpText>
			<Label>@SYS308383</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseActualTimeOfRegistration</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@SCM:JmgUseActualTimeOfRegistrationHelptext</HelpText>
			<Label>@SYP4881583</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableDevice</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultProdUnitFilter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdUnitId</ExtendedDataType>
			<HelpText>@SCM:JmgDefaultProdUnitFilterHelptext</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultResourceFilter</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WrkCtrId</ExtendedDataType>
			<HelpText>@SCM:JmgDefaultResourceFilterHelptext</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultResourceGroupFilter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrId</ExtendedDataType>
			<HelpText>@SCM:JmgDefaultResourceGroupFilterHelptext</HelpText>
			<Label>@SYS122729</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableWorkerFilter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@SCM:JmgEnableWorkerFilterHelptext</HelpText>
			<Label>@SCM:EnableWorkerFilter</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableSingleWorker</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@SCM:JmgEnableSingleWorkerHelptext</HelpText>
			<Label>@SCM:SingleWorker</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GenerateLP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSGenerateLP</ExtendedDataType>
			<HelpText>@SCM:JmgGenerateLPHelptext</HelpText>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintLabel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPrintLabel</ExtendedDataType>
			<HelpText>@SCM:JmgPrintLabelHelptext</HelpText>
			<Label>@WAX2247</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LockScreen</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@SCM:JmgLockScreenDeviceHelptext</HelpText>
			<Label>@SCM:JmgLockScreenDevice</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LockScreenSeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@SCM:JmgLockScreenSecondsHelptext</HelpText>
			<Label>@SCM:JmgLockScreenSeconds</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JmgRegistrationProdGridTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdGridSetupID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>JmgRegistrationIPCGridTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>IPCGridSetupID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>JmgRegistrationProjGridTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjGridSetupID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>JmgRegistrationActionPaneTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ActionPaneSetupID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SetupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SetupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgRegistrationActionPaneTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgRegistrationActionPaneTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>JmgRegistrationActionPaneTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgRegistrationActionPaneTable_JmgRegistrationSetup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActionPaneSetupID</Name>
					<Field>ActionPaneSetupID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgRegistrationGridTable_IPC</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgRegistrationGridTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>JmgRegistrationGridTable_2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgRegistrationGridTable_2_JmgRegistrationSetup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IPCGridSetupID</Name>
					<Field>IPCGridSetupID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgRegistrationGridTable_Prod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgRegistrationGridTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>JmgRegistrationGridTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgRegistrationGridTable_JmgRegistrationSetup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdGridSetupID</Name>
					<Field>ProdGridSetupID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgRegistrationGridTable_Proj</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgRegistrationGridTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>JmgRegistrationGridTable_3</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgRegistrationGridTable_3_JmgRegistrationSetup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjGridSetupID</Name>
					<Field>ProjGridSetupID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdUnitTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdUnitTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultProdUnitFilter</Name>
					<Field>DefaultProdUnitFilter</Field>
					<RelatedField>ProdUnitId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultResourceFilter</Name>
					<Field>DefaultResourceFilter</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsIndividualResource</Name>
					<RelatedField>IsIndividualResource</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultResourceGroupFilter</Name>
					<Field>DefaultResourceGroupFilter</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsIndividualResource</Name>
					<RelatedField>IsIndividualResource</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>