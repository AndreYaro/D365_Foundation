<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconBridgedExistReconcileIdTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankReconBridgedExistReconcileIdTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertTmpData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into <c>BankReconBridgedExistReconcileIdTmp</c> table if the uncleared bridged transaction exists for reconcilied worksheet.
    /// </summary>
    /// <returns>The table buffer.</returns>
    internal static BankReconBridgedExistReconcileIdTmp insertTmpData()
    {
        BankAccountTable bankAccountTable;
        BankBridgingTrans bankBridgingTrans;
        BankDocumentTable bankDocumentTable;
        LedgerJournalTrans ledgerJournalTransBridged;
        BankReconciliationHeader bankReconciliationHeader;
        BankReconciliationMatchingItemView matchingItemView;
        BankReconBridgedExistReconcileIdTmp tmp;

        insert_recordset tmp (AccountId, ReconciledDate, ReconciliationId)
            select AccountId, ReconciledDate, ReconciliationId from bankReconciliationHeader
            group by bankReconciliationHeader.ReconciliationId, bankReconciliationHeader.AccountId, bankReconciliationHeader.ReconciledDate
                where bankReconciliationHeader.isReconciled == true
            join bankAccountTable
                where bankAccountTable.AccountID == bankReconciliationHeader.AccountId
                    && bankAccountTable.BankReconciliationEnabled == true
                    && bankAccountTable.BankReconBridgedAutoClearing == true
            join matchingItemView
                where matchingItemView.BankReconciliationHeader == bankReconciliationHeader.RecId
            join bankDocumentTable
                where bankDocumentTable.RecId == matchingItemView.BankDocumentTable
            join ledgerJournalTransBridged
                where ledgerJournalTransBridged.RecId == bankDocumentTable.SourceRecId
                    && ledgerJournalTransBridged.TableId == bankDocumentTable.SourceRelationType
            join bankBridgingTrans
                where bankBridgingTrans.BridgedLedgerJournalTransRecId == ledgerJournalTransBridged.RecId
                    && bankBridgingTrans.BridgingStatus == BankBridgingStatus::Bridged;

        BankChequeTable bankChequeTable;

        insert_recordset tmp (AccountId, ReconciledDate, ReconciliationId)
            select AccountId, ReconciledDate, ReconciliationId from bankReconciliationHeader
            group by bankReconciliationHeader.ReconciliationId, bankReconciliationHeader.AccountId, bankReconciliationHeader.ReconciledDate
                where bankReconciliationHeader.isReconciled == true
            join bankAccountTable
                where bankAccountTable.AccountID == bankReconciliationHeader.AccountId
                    && bankAccountTable.BankReconciliationEnabled == true
                    && bankAccountTable.BankReconBridgedAutoClearing == true
            join matchingItemView
                where matchingItemView.BankReconciliationHeader == bankReconciliationHeader.RecId
            join bankDocumentTable
                where bankDocumentTable.RecId == matchingItemView.BankDocumentTable
            join bankChequeTable
                where bankChequeTable.RecId == bankDocumentTable.SourceRecId
                    && bankChequeTable.TableId == bankDocumentTable.SourceRelationType
            join bankBridgingTrans
                where bankBridgingTrans.BankChequeTableRecId == bankChequeTable.RecId
                    && bankBridgingTrans.BridgingStatus == BankBridgingStatus::Bridged
            notexists join tmp
                where tmp.AccountId == bankReconciliationHeader.AccountId
                    && tmp.ReconciliationId == bankReconciliationHeader.ReconciliationId
                    && tmp.ReconciledDate == bankReconciliationHeader.ReconciledDate;

        select firstonly tmp;

        return tmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<Label>@Bank:BankReconBridgedExistReconcileIdTmpLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>ReconciliationId</TitleField1>
	<TitleField2>AccountId</TitleField2>
	<Visibility>Internal</Visibility>
	<ClusteredIndex>ReconciliationIdIdx</ClusteredIndex>
	<Modules>Bank</Modules>
	<PrimaryIndex>ReconciliationIdIdx</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReconciledDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankReconciliationReconciledDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReconciliationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankReconciliationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReconciliationIdIdx</Name>
			<ConfigurationKey>Bank</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReconciliationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReconIdAndAccIdx</Name>
			<ConfigurationKey>Bank</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReconciliationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReconciledDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BankReconciliationHeader</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>BankReconciliationHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReconciliationId</Name>
					<Field>ReconciliationId</Field>
					<RelatedField>ReconciliationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankAccountTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BankAccountTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankReconciliationHeader</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountId</Name>
					<Field>AccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>