<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSQualityOrderInventory</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSQualityOrderInventory extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFromWorkInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create <c>WHSQualityOrderInventory</c> records based on a <c>WHSWorkInventTrans</c> record.
    /// </summary>
    /// <param name = "_qualityOrderId">The quality order Id.</param>
    /// <param name = "_workInventTrans">The <c>WHSWorkInventTrans</c> to use.</param>
    [Hookable(false)]
    internal static void createFromWorkInventTrans(
        InventQualityOrderId    _qualityOrderId,
        WHSWorkInventTrans      _workInventTrans)
    {
        ttsbegin;

        if (WHSInventoryTransactionConfigurationProvider::shouldUseWarehouseInventoryTransactionStack(_workInventTrans.WorkId))
        {
            RecordInsertList rilQualityOrderInventory = new RecordInsertList(tableNum(WHSQualityOrderInventory));

            WHSWorkInventoryTransactionDescriptorEnumerator inventoryTransactionDescriptorEnumerator = WHSWorkInventoryTransactionQuery::newFromWorkId(_workInventTrans.WorkId).registeredReceiptByWorkLine(
                _workInventTrans.LineNum,
                WHSWorkInventoryTransactionQueryParameters::construct()).getEnumerator();

            while (inventoryTransactionDescriptorEnumerator.moveNext())
            {
                WHSWorkInventoryTransactionDescriptorElement inventoryTransactionDescriptorElement = inventoryTransactionDescriptorEnumerator.current();

                InventDim inventDim = inventoryTransactionDescriptorElement
                    .parmInventoryDimensionsDescriptor()
                    .convertToInventDim(true);

                WHSQualityOrderInventory qualityOrderInventory;
                qualityOrderInventory.QualityOrderId = _qualityOrderId;
                qualityOrderInventory.InventDimId = inventDim.InventDimId;
                qualityOrderInventory.InventHandlingQty = inventoryTransactionDescriptorElement.getInventoryFormatQuantity().parmInventQty();

                rilQualityOrderInventory.add(qualityOrderInventory);
            }

            rilQualityOrderInventory.insertDatabase();
        }
        else
        {
            WHSQualityOrderInventory    qualityOrderInventory;
            InventTrans                 inventTrans;
            InventTransOrigin           inventTransOrigin;

            // Loop over inventTrans to determine what inventory is associated to the work invent transaction
            insert_recordset qualityOrderInventory (
                QualityOrderId,
                InventDimId,
                InventHandlingQty)
                select _qualityOrderId, InventDimId, Qty from inventTrans
                    exists join inventTransOrigin
                        where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
                            && inventTransOrigin.InventTransId  == _workInventTrans.InventTransIdTo;
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQualityOrderListWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the work ID on the quality order inventory record for a list of quality orders.
    /// </summary>
    /// <param name = "_qualityOrderIdList">List of quality orders.</param>
    /// <param name = "_workId">The work ID.</param>
    [Hookable(false)]
    internal static void setQualityOrderListWorkId(
        List        _qualityOrderIdList,
        WHSWorkId   _workId)
    {
        ttsbegin;

        ListEnumerator qoEnum = _qualityOrderIdList.getEnumerator();
    
        while (qoEnum.moveNext())
        {
            WHSQualityOrderInventory qualityOrderInventory;

            update_recordSet qualityOrderInventory
                setting WorkId = _workId
                where qualityOrderInventory.QualityOrderId == qoEnum.current();
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryAtWorkClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update inventory when work is closed.
    /// </summary>
    /// <param name = "_workTable">The <c>WHSWorkTable</c> record to update inventory for.</param>
    [Hookable(false)]
    internal static void updateInventoryAtWorkClose(WHSWorkTable _workTable)
    {
        ttsbegin;

        WHSQualityOrderInventory    qualityOrderInventory;
    
        WMSLocationId finalPutLocation = _workTable.getFinalPutLocation();
    
        if (_workTable.InventQualityOrderId)
        {
            // Update the location of inventory for the quality order.
            while select forUpdate qualityOrderInventory
                where qualityOrderInventory.QualityOrderId == _workTable.InventQualityOrderId
            {
                qualityOrderInventory.updateInventDimWithLocationLP(finalPutLocation, _workTable.TargetLicensePlateId);
            }
        }
        else
        {
            while select forUpdate qualityOrderInventory
                where qualityOrderInventory.WorkId == _workTable.WorkId
            {
                qualityOrderInventory.updateInventDimWithLocationLP(finalPutLocation, _workTable.TargetLicensePlateId);
            }
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDimWithLocationLP</Name>
				<Source><![CDATA[
    private void updateInventDimWithLocationLP(
        WMSLocationId       _locationId,
        WHSLicensePlateId   _targetLicensePlateId)
    {
        InventDim inventDim = InventDim::find(this.InventDimId);
        inventDim.wMSLocationId     = _locationId;
        inventDim.LicensePlateId    = _targetLicensePlateId;
        inventDim = InventDim::findOrCreate(inventDim);
    
        this.InventDimId = inventDim.inventDimId;
                
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQualityOrderListToDefaultQCLoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update a <c>List</c> of quality order's to the default QC location.
    /// </summary>
    /// <param name = "_qualityOrderIdList">A <c>List</c> of quality order Id's.</param>
    /// <param name = "_inventLocationId">The warehouse to use.</param>
    [Hookable(false)]
    internal static void updateQualityOrderListToDefaultQCLoc(
        List                _qualityOrderIdList,
        InventLocationId    _inventLocationId)
    {
        ttsbegin;

        InventLocation inventLocation = InventLocation::find(_inventLocationId);
        ListEnumerator qoEnum = _qualityOrderIdList.getEnumerator();

        while (qoEnum.moveNext())
        {
            WHSQualityOrderInventory qualityOrderInventory;
            InventDim inventDim;

            while select forupdate qualityOrderInventory
                where qualityOrderInventory.QualityOrderId == qoEnum.current()
                join inventDim
                    where inventDim.inventDimId == qualityOrderInventory.InventDimId
            {
                inventDim.wmsLocationId = inventLocation.DefaultQualityMaintenanceLocation;
                inventDim = InventDim::findOrCreate(inventDim);
    
                qualityOrderInventory.InventdimId = inventDim.inventDimId;
                
                qualityOrderInventory.update();
            }
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventoryAtWorkCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete inventory when work is cancelled.
    /// </summary>
    /// <param name = "_workTable">The <c>WHSWorkTable</c> record to delete inventory for.</param>
    [Hookable(false)]
    internal static void deleteInventoryAtWorkCancel(WHSWorkTable _workTable)
    {
        WHSQualityOrderInventory qualityOrderInventory;

        if (_workTable.WorkTransType != WHSWorkTransType::QualityInQualityCheck &&
            _workTable.WorkTransType != WHSWorkTransType::QualityItemSampling)
        {
            return;
        }
        
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        if (_workTable.InventQualityOrderId)
        {
            delete_from qualityOrderInventory
                where qualityOrderInventory.QualityOrderId == _workTable.InventQualityOrderId;
        }
        else 
        {
            delete_from qualityOrderInventory
                where qualityOrderInventory.WorkId == _workTable.WorkId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsWithInventQualityOrderId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean existsWithInventQualityOrderId(InventQualityOrderId _inventQualityOrderId)
    {
        WHSQualityOrderInventory qualityOrderInventory;

        select RecId from qualityOrderInventory
            where qualityOrderInventory.QualityOrderId == _inventQualityOrderId;
        
        return qualityOrderInventory.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (WHSWorkTable::existsActiveWorkByQualityOrder(this.QualityOrderId))
        {
            ret = checkFailed(strFmt("@WAX:WHSQualityOrderCannotBeDeletedWarning", this.QualityOrderId));
        }
 
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:QualityOrderInventoryDocumentation</DeveloperDocumentation>
	<Label>@WAX:QualityOrderInventory</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>QualityOrderId</TitleField1>
	<TitleField2>InventDimId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>QualityOrderIdIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventHandlingQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QualityOrderId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventHandlingQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventHandlingQty</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QualityOrderId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQualityOrderId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventDimIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>QualityOrderIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>QualityOrderId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventQualityOrderTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventQualityOrderTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QualityOrderId</Name>
					<Field>QualityOrderId</Field>
					<RelatedField>QualityOrderId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>QualityOrderIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSWorkTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSWorkTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkId</Name>
					<Field>WorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>WorkIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>