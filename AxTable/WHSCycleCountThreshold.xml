<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCycleCountThreshold</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSCycleCountThreshold extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.ItemQuery       = this.defaultItemQuery().pack();
        this.LocationQuery   = this.defaultLocationQuery().pack();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemQuery</Name>
				<Source><![CDATA[
    internal QueryRun defaultItemQuery()
    {
        return new QueryRun(queryStr(WHSInventTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLocationQuery</Name>
				<Source><![CDATA[
    internal QueryRun defaultLocationQuery()
    {
        return new QueryRun(queryStr(WHSWMSLocation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WHSCycleCountThreshold, DaysBetween):
                if (this.DaysBetween < 0)
                {
                    throw warning(strFmt("@WAX4605", fieldId2PName(tableNum(WHSCycleCountThreshold), _fieldIdToCheck)));
                }
                break;

            case fieldNum(WHSCycleCountThreshold, ThresholdQty):
                if (this.ThresholdQty < 0)
                {
                    throw warning(strFmt("@WAX4605", fieldId2PName(tableNum(WHSCycleCountThreshold), _fieldIdToCheck)));
                }
                break;

            case fieldNum(WHSCycleCountThreshold, PercentCapacityThreshold):
                if (this.PercentCapacityThreshold < 0)
                {
                    throw warning(strFmt("@WAX4605", fieldId2PName(tableNum(WHSCycleCountThreshold), _fieldIdToCheck)));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a specific <c>WHSCycleCountThreshold</c> record exists.
    /// </summary>
    /// <param name="_cycleCountThresholdId">
    /// Threshold id of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(WHSCycleCountThresholdId _cycleCountThresholdId)
    {
        return (_cycleCountThresholdId) &&
               (select firstonly WHSCycleCountThreshold
                    where WHSCycleCountThreshold.CycleCountThresholdId == _cycleCountThresholdId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSCycleCountThreshold</c> record.
    /// </summary>
    /// <param name="_cycleCountThresholdId">
    /// Threshold id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSCycleCountThreshold find(WHSCycleCountThresholdId  _cycleCountThresholdId,
                                              boolean                   _forupdate = false)
    {
        WHSCycleCountThreshold  cycleCountThreshold;

        if (_cycleCountThresholdId)
        {
            cycleCountThreshold.selectForUpdate(_forupdate);

            select firstonly cycleCountThreshold
                where cycleCountThreshold.CycleCountThresholdId == _cycleCountThresholdId;
        }

        return cycleCountThreshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImmediateCountStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets immediate count step depending on the work execution mode.
    /// </summary>
    /// <param name="_mode">
    /// The parameter of type <c>WHSWorkExecuteMode</c>.
    /// </param>
    /// <returns>
    /// Count step.
    /// </returns>
    static int getImmediateCountStep(WHSWorkExecuteMode    _mode)
    {
        #WHSWorkExecuteDisplayCases
        int ret = 1;

        // Step must be different depending on work execute mode in order to be reintroduced into flow after immediate count
        switch (_mode)
        {
            case WHSWorkExecuteMode::UserGrouping, WHSWorkExecuteMode::SystemGrouping:
                ret = #StepMax;
                break;

            case WHSWorkExecuteMode::ValidatedUserDirected:
                ret = 2;
                break;

            case WHSWorkExecuteMode::MovementByTemplate:
                //Restore the last step after which the cycle counting was called.
                ret = #Pick;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleThresholdQty</Name>
				<Source><![CDATA[
    internal boolean isFieldVisibleThresholdQty()
    {
        return this.CycleCountThresholdType == WHSQtyPct::Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleUnitID</Name>
				<Source><![CDATA[
    internal boolean isFieldVisibleUnitID()
    {
        return this.CycleCountThresholdType == WHSQtyPct::Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisiblePercentCapacityThreshold</Name>
				<Source><![CDATA[
    internal boolean isFieldVisiblePercentCapacityThreshold()
    {
        return this.CycleCountThresholdType == WHSQtyPct::Percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return [
            [fieldnum(WHSCycleCountThreshold, PercentCapacityThreshold),
                [fieldnum(WHSCycleCountThreshold, CycleCountThresholdType)]],
            [fieldnum(WHSCycleCountThreshold, ThresholdQty),
                [fieldnum(WHSCycleCountThreshold, CycleCountThresholdType)]],
            [fieldnum(WHSCycleCountThreshold, UnitID),
                [fieldnum(WHSCycleCountThreshold, CycleCountThresholdType)]]

        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);
        if (WHSCycleCountThresholdTypeFieldFilter::instance().isEnabled())
        {
            switch (_fieldId)
            {
                case fieldnum(WHSCycleCountThreshold, ThresholdQty):
                    this.initDefaultCycleCountThresholdType();
                    break;
                case fieldnum(WHSCycleCountThreshold, UnitID):
                    this.initDefaultUnitID();
                    break;
                case fieldnum(WHSCycleCountThreshold, PercentCapacityThreshold):
                    this.initDefaultPercentCapacityThreshold();
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultCycleCountThresholdType</Name>
				<Source><![CDATA[
    private void initDefaultCycleCountThresholdType()
    {
        if (this.CycleCountThresholdType == WHSQtyPct::Qty)
        {
            this.PercentCapacityThreshold = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultUnitID</Name>
				<Source><![CDATA[
    private void initDefaultUnitID()
    {
        if (this.CycleCountThresholdType == WHSQtyPct::Percent)
        {
            this.UnitID = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultPercentCapacityThreshold</Name>
				<Source><![CDATA[
    private void initDefaultPercentCapacityThreshold()
    {
        if (this.CycleCountThresholdType == WHSQtyPct::Percent)
        {
            this.ThresholdQty = 0;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4348</DeveloperDocumentation>
	<FormRef>WHSCycleCountThreshold</FormRef>
	<Label>@WAX4030</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CycleCountThresholdId</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>CycleCountThresholdIdIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>CycleCountThresholdIdIdx</PrimaryIndex>
	<ReplacementKey>CycleCountThresholdIdIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CycleCountThresholdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThresholdQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PercentCapacityThreshold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocationQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImmediateCycleCount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DaysBetween</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CycleCountThresholdType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkPoolId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CycleCountThresholdId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CycleCountThresholdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThresholdQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PercentCapacityThreshold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocationQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImmediateCycleCount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DaysBetween</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CycleCountThresholdType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkPoolId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CycleCountThresholdId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCycleCountThresholdId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CycleCountThresholdType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCycleCountThresholdType</ExtendedDataType>
			<EnumType>WHSQtyPct</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DaysBetween</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDaysBetween</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ImmediateCycleCount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSImmediateCycleCount</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ItemQuery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSItemQuery</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>LocationQuery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocationQuery</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PercentCapacityThreshold</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPercentCapacityThreshold</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ThresholdQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSThresholdQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkPoolId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkPoolId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CycleCountThresholdIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CycleCountThresholdId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitID</Name>
					<Field>UnitID</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkPool</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSWorkPool</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkPoolId</Name>
					<SourceEDT>WHSWorkPoolId</SourceEDT>
					<Field>WorkPoolId</Field>
					<RelatedField>WorkPoolId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>