<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTestVariableOutcome</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTestVariableOutcome extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>aosValidateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Makes sure that used outcomes are not deleted.
    /// </summary>
    /// <returns>
    ///    true if the record can be deleted; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method overrides the standard <c>aosValidateDelete</c> method.
    /// </remarks>
    public boolean aosValidateDelete()
    {
        boolean ret;

        ret = super();

        if (!this.checkOutcomeUsedTestGroup())
        {
            ret = checkFailed("@SYS113656");
        }

        if (!this.checkOutcomeUsedQualityOrder())
        {
            ret = checkFailed("@SYS113655");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOutcomeUsedQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the variable outcome is used by a quality order line results record.
    /// </summary>
    /// <returns>
    ///    true if the variable outcome is not used; otherwise, false.
    /// </returns>
    public boolean checkOutcomeUsedQualityOrder()
    {
        InventQualityOrderLineResults   inventQualityOrderLineResults;
        InventQualityOrderLine          inventQualityOrderLine;
        InventQualityOrderTable         inventQualityOrderTable;

        select  firstonly RecId from inventQualityOrderLineResults
                where   inventQualityOrderLineResults.TestResultValueOutcome == this.VariableOutcomeId
                exists join    inventQualityOrderLine
                where   inventQualityOrderLine.QualityOrderId   == inventQualityOrderLineResults.QualityOrderId &&
                        inventQualityOrderLine.VariableId       == this.VariableId
                    exists join inventQualityOrderTable
                        where inventQualityOrderTable.QualityOrderId    == inventQualityOrderLine.QualityOrderId
                           && inventQualityOrderTable.OrderStatus       == InventTestOrderStatus::Open;

        if (inventQualityOrderLineResults.RecId)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOutcomeUsedTestGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the variable outcome is used by a test group member record.
    /// </summary>
    /// <returns>
    ///    true if the variable outcome is not used; otherwise, false.
    /// </returns>
    public boolean checkOutcomeUsedTestGroup()
    {
        InventTestGroupMember   inventTestGroupMember;

        select firstonly RecId from inventTestGroupMember
            where   inventTestGroupMember.VariableOutcomeIdStandard == this.VariableOutcomeId   &&
                    inventTestGroupMember.VariableId                == this.VariableId;

        if (inventTestGroupMember.RecId)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>InventTestVariableOutcome</c> table exists.
    /// </summary>
    /// <param name="_inventTestVariableId">
    ///    The test variable ID of the record to find.
    /// </param>
    /// <param name="_inventTestVariableOutcomeId">
    ///    The test variable outcome ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    static public boolean exist(
        InventTestVariableId            _inventTestVariableId,
        InventTestVariableOutcomeId     _inventTestVariableOutcomeId)
    {
        return _inventTestVariableId && _inventTestVariableOutcomeId &&
            (select  firstonly inventTestVariableOutcome
             where  inventTestVariableOutcome.VariableId        == _inventTestVariableId &&
                    inventTestVariableOutcome.VariableOutcomeId == _inventTestVariableOutcomeId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>InventTestVariableOutcome</c> table.
    /// </summary>
    /// <param name="_inventTestVariableId">
    ///    The test variable ID of the record to find.
    /// </param>
    /// <param name="_inventTestVariableOutcomeId">
    ///    The test variable outcome ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>InventTestVariableOutcome</c> table; otherwise, an empty record.
    /// </returns>
    static public InventTestVariableOutcome find(
        InventTestVariableId            _inventTestVariableId,
        InventTestVariableOutcomeId     _inventTestVariableOutcomeId,
        boolean                         _forUpdate = false)
    {
        InventTestVariableOutcome   inventTestVariableOutcome;

        inventTestVariableOutcome.selectForUpdate(_forUpdate);

        if (_inventTestVariableId && _inventTestVariableOutcomeId)
        {
            select  firstonly inventTestVariableOutcome
            where   inventTestVariableOutcome.VariableId        == _inventTestVariableId &&
                    inventTestVariableOutcome.VariableOutcomeId == _inventTestVariableOutcomeId;
        }

        return inventTestVariableOutcome;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupVariableOutcomes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and shows a lookup form for the variable outcome field.
    /// </summary>
    /// <param name="_ctrl">
    ///    The calling form control.
    /// </param>
    /// <param name="_variableId">
    ///    The variable ID for which the outcomes should be shown.
    /// </param>
    static public void lookupVariableOutcomes(
        FormStringControl       _ctrl,
        InventTestVariableId    _variableId)
    {
        SysTableLookup          sysTableLookup          = SysTableLookup::newParameters(tableNum(InventTestVariableOutcome), _ctrl);
        Query                   query                   = new Query();
        QueryBuildDataSource    queryBuildDataSource    = query.addDataSource(tableNum(InventTestVariableOutcome));
        QueryBuildRange         queryBuildRange         = queryBuildDataSource.addRange(fieldNum(InventTestVariableOutcome, VariableId));

        sysTableLookup.addLookupfield(fieldNum(InventTestVariableOutcome, VariableOutcomeId), true);
        sysTableLookup.addLookupfield(fieldNum(InventTestVariableOutcome, OutcomeStatus));
        sysTableLookup.addLookupfield(fieldNum(InventTestVariableOutcome, Description));
        queryBuildRange.value(queryValue(_variableId));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>InventQualityManagement</ConfigurationKey>
	<DeveloperDocumentation>@SYS124031</DeveloperDocumentation>
	<Label>@SYS113654</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>VariableId</TitleField1>
	<TitleField2>VariableOutcomeId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>VariableIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>VariableIdIdx</PrimaryIndex>
	<ReplacementKey>VariableIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VariableOutcomeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VariableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutcomeStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VariableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutcomeStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VariableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VariableOutcomeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VariableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VariableOutcomeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VariableOutcomeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutcomeStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VariableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS36398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OutcomeStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OutcomeStatus</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>InventTestOutcomeStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VariableId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTestVariableId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VariableOutcomeId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTestVariableOutcomeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VariableIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VariableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VariableOutcomeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTestVariable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTestVariable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VariableId</Name>
					<Field>VariableId</Field>
					<RelatedField>VariableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>VariableIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>