<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSalesLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSSalesLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayQtyLeftToRelease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display quantity left to release of a sales order line.
    /// </summary>
    /// <returns>
    /// The quantity left to release.
    /// </returns>
    display ProductQuantity displayQtyLeftToRelease()
    {
        SalesLine salesLine = SalesLine::findInventTransId(this.InventTransId);
        Qty       returnQty;

        // (Quantity Delievered + Picked + Physically Reserved) - released qty = qty left to release.
        if (PdsGlobal::pdsIsCWItem(salesLine.ItemId))
        {
            returnQty = salesLine.pdsCWDeliveredInTotal() + salesLine.pdsCWPickedInTotal() + salesLine.pdsCWReservedPhysical() - this.ReleasedQty;
        }
        else
        {
            returnQty = salesLine.deliveredInventInTotal() + salesLine.pickedInTotalInventUnit() + salesLine.reservedPhysical() - this.ReleasedQty;
        }

        return returnQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        Qty         origReleasedQty = this.orig().ReleasedQty;
        SalesId     salesId;

        if (origReleasedQty != this.ReleasedQty)
        {
            SalesLine salesLine = SalesLine::findInventTransId(this.InventTransId);
            salesId = salesLine.SalesId;

            if (this.ReleasedQty < 0)
            {
                throw error(strFmt("@WAX:ReleasedQtyCannotBeNegative", salesLine.ItemId, this.InventTransId));
            }

            //Ensure ReleasedQty never exceeds the maximum release quantity, as it can result in a partially released SO being marked as fully released.
            if (salesId &&
                this.ReleasedQty > salesLine.maxReleaseHandlingQuantity())
            {
                warning(strFmt("@WAX:WHSSalesLineReleasedQtyExceeded", salesLine.LineNum, salesLine.SalesId));
                this.ReleasedQty = salesLine.maxReleaseHandlingQuantity();
            }
        }

        super();

        // If the released Qty has changed update the released Status of the sales order.
        if (origReleasedQty != this.ReleasedQty &&
            salesId)
        {
            using (var parameters = WHSSetSalesOrderReleasedStatusParameters::newSales(salesId))
            {
                SalesTable::setSalesOrderReleasedStatusFromParametersDeferred(parameters);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>whsSalesLine</c> record exists.
    /// </summary>
    /// <param name="_inventTransId">
    /// Transaction id of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    static boolean exist(InventTransId _inventTransId)
    {
        return _inventTransId && (select firstonly RecId from whsSalesLine
                 where whsSalesLine.InventTransId ==_inventTransId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSSalesLine</c> record with given parameters.
    /// </summary>
    /// <param name="_inventTransId">
    /// Transaction id of the record.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSSalesLine find(InventTransId   _inventTransId,
                                    boolean         _forUpdate = false)
    {
        WHSSalesLine whsSalesLine;

        if (_inventTransId)
        {
            whsSalesLine.selectForUpdate(_forUpdate);

            select firstonly whsSalesLine
                where whsSalesLine.InventTransId == _inventTransId;
        }

        return whsSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a <c>WHSSalesLine</c> record corresponding to a <c>SalesLine</c>
    /// </summary>
    /// <param name="_salesLine">
    /// The source <c>SalesLine</c> record
    /// </param>
    public static void insertForSalesLine(SalesLine _salesLine)
    {
        WHSSalesLine whsSalesLine;

        ttsbegin;
        whsSalesLine.InventTransId = _salesLine.InventTransId;

        if (_salesLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            whsSalesLine.PackingQty = WHSInventTable::getDefaultPackingQty(_salesLine.ItemId, _salesLine.InventDimId);
            if (PdsGlobal::pdsIsCWItem(_salesLine.ItemId))
            {
                whsSalesLine.QtyLeftToLoad = _salesLine.PdsCWQty;
            }
            else
            {
                whsSalesLine.QtyLeftToLoad = _salesLine.SalesQty;
            }
        }

        if (!whsSalesLine.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSSalesLine)));
        }

        whsSalesLine.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryLockInSQL</Name>
				<Source><![CDATA[
    internal static boolean tryLockInSQL(InventTransId _inventTransId)
    {
        if (!appl.ttsLevel())
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }
        WHSSalesLine whsSalesLine;
            
        whsSalesLine.readPast(true);

        select firstonly pessimisticlock whsSalesLine
            where whsSalesLine.InventTransId == _inventTransId;

        if (whsSalesLine)
        {
            return true;
        }            

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4444</DeveloperDocumentation>
	<FormRef>salestable</FormRef>
	<Label>@WAX318</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>InventTransId</TitleField1>
	<TitleField2>QtyLeftToLoad</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>InventTransIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>InventTransIdx</PrimaryIndex>
	<ReplacementKey>InventTransIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyLeftToLoad</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnWave</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnWaveQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleasedQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyLeftToLoad</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnWave</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnWaveQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleasedQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnWave</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOnWave</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OnWaveQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOnWaveQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PackingQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPackingQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyLeftToLoad</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSQtyLeftToLoad</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReleasedQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSReleasedQty</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>