<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetCycle</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetCycle extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearBudgetCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the budget cache for the budget cycle data.
    /// </summary>
    private void clearBudgetCache()
    {
        BudgetCache::clearScope(BudgetCacheScope::BudgetCycleByTimeSpanDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (this.validateDelete())
        {
            // Delete only when the budget cycle is not assigned to any primary ledger.
            super();

            this.clearBudgetCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCycleEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>FiscalPeriodEnd</c> value for the budget cycle record.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the end date value is modified or not.
    /// </param>
    /// <param name="_endDate">
    /// The new <c>FiscalPeriodEnd</c> value that must be updated.
    /// </param>
    /// <returns>
    /// The <c>FiscalPeriodEnd</c> value for the <c>BudgetCycle</c> class.
    /// </returns>
    public edit FiscalPeriodEnd editCycleEndDate(boolean _set, FiscalPeriodEnd _endDate)
    {
        FiscalPeriodEnd endDate;

        if (hasTableAccess(tableNum(BudgetCycle))
            && hasTableAccess(tableNum(BudgetCycleTimeSpan))
            && hasTableAccess(tableNum(FiscalCalendarPeriod))
            && hasTableAccess(tableNum(FiscalCalendarYear))
            && hasTableAccess(tableNum(FiscalCalendar)))
        {
            if (_set)
            {
                BudgetCycleTimeSpan budgetCycleTimeSpan = BudgetCycleTimeSpan::find(this.BudgetCycleTimeSpan);
                endDate = this.setCycleEndDate(_endDate, budgetCycleTimeSpan);
            }
            else
            {
                endDate = FiscalCalendarPeriod::find(this.EndFiscalCalendarPeriod).EndDate;
            }
        }

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCycleEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the end date for the <c>BudgetCycle</c> according to a given end date and <c>BudgetCycleTimeSpan</c>.
    /// </summary>
    /// <param name = "_endDate">
    /// The new <c>FiscalPeriodEnd</c> value which must be updated.
    /// </param>
    /// <param name = "_budgetCycleTimeSpan">
    /// The <c>BudgetCycleTimeSpan</c> record for this <c>BudgetCycle</c>.
    /// </param>
    /// <returns>
    /// The <c>FiscalPeriodEnd</c> value for the <c>BudgetCycle</c> class.
    /// </returns>
    public FiscalPeriodEnd setCycleEndDate(FiscalPeriodEnd _endDate, BudgetCycleTimeSpan _budgetCycleTimeSpan)
    {
        FiscalPeriodEnd endDate;

        if (_endDate != dateNull())
        {
            FiscalCalendarPeriod endPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(_budgetCycleTimeSpan.FiscalCalendar, _endDate, FiscalPeriodType::Operating);

            if (endPeriod == null)
            {
                // When end date does not exists within the fiscal calendar.
                CalendarId calendarId = FiscalCalendar::find(_budgetCycleTimeSpan.FiscalCalendar).CalendarId;
                checkFailed(strFmt("@SYS320425", this.Name, calendarId));
            }
            else
            {
                this.EndFiscalCalendarPeriod = endPeriod.RecId;

                if (this.validateBudgetCycleDates())
                {
                    // When the cycle dates are valid.
                    endDate = endPeriod.EndDate;
                }
                else
                {
                    // Validation failed so reset the end date to null.
                    this.EndFiscalCalendarPeriod = 0;
                    endDate = FiscalCalendarPeriod::find(this.EndFiscalCalendarPeriod).EndDate;
                }
            }
        }
        else
        {
            // When the end date was not entered.
            checkFailed(strFmt("@SYS26332", fieldPName(BudgetCycle, EndFiscalCalendarPeriod)));
        }

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCycleStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>FiscalPeriodStart</c> value for the budget cycle record.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the start date value is modified or not.
    /// </param>
    /// <param name="_startDate">
    /// The new <c>FiscalPeriodStart</c> value which must be updated.
    /// </param>
    /// <returns>
    /// The <c>FiscalPeriodStart</c> value for the <c>BudgetCycle</c> class.
    /// </returns>
    public edit FiscalPeriodStart editCycleStartDate(boolean _set, FiscalPeriodStart _startDate)
    {
        FiscalCalendarYear      fiscalCalendarYear;
        FiscalCalendarPeriod    startPeriod;
        CalendarId              calendarId;
        BudgetCycleTimeSpan     budgetCycleTimeSpan;
        FiscalPeriodStart       startDate;
        FiscalPeriodEnd         endDate;
        FiscalCalendarPeriod    fiscalCalendarEndPeriod;
        recId                   endPeriodRecId;
        recId                   origStartPeriodRecId;

        if (hasTableAccess(tableNum(BudgetCycle))
            && hasTableAccess(tableNum(BudgetCycleTimeSpan))
            && hasTableAccess(tableNum(FiscalCalendarPeriod))
            && hasTableAccess(tableNum(FiscalCalendarYear))
            && hasTableAccess(tableNum(FiscalCalendar)))
        {
            budgetCycleTimeSpan = BudgetCycleTimeSpan::find(this.BudgetCycleTimeSpan);

            if (_set)
            {
                startDate = this.setCycleStartDate(_startDate, budgetCycleTimeSpan);
            }
            else if (this.StartFiscalCalendarPeriod != 0)
            {
                startDate = FiscalCalendarPeriod::find(this.StartFiscalCalendarPeriod).StartDate;
            }
        }

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCycleStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the start date for the <c>BudgetCycle</c> according to a given start date and <c>BudgetCycleTimeSpan</c>.
    /// </summary>
    /// <param name = "_startDate">
    /// The new <c>FiscalPeriodStart</c> value which must be updated.
    /// </param>
    /// <param name = "_budgetCycleTimeSpan">
    /// The <c>BudgetCycleTimeSpan</c> record for this <c>BudgetCycle</c>.
    /// </param>
    /// <returns>
    /// The <c>FiscalPeriodStart</c> value for the <c>BudgetCycle</c> class.
    /// </returns>
    public FiscalPeriodStart setCycleStartDate(FiscalPeriodStart _startDate, BudgetCycleTimeSpan _budgetCycleTimeSpan)
    {
        FiscalPeriodStart startDate;

        if (_startDate != dateNull())
        {
            FiscalCalendarPeriod startPeriod;

            if (_budgetCycleTimeSpan.BudgetCycleLengthOption == BudgetCycleLengthOption::SpecifyPeriods)
            {
                startPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(_budgetCycleTimeSpan.FiscalCalendar, _startDate, FiscalPeriodType::Operating);
            }
            else
            {
                FiscalCalendarYear fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(_budgetCycleTimeSpan.FiscalCalendar, _startDate);
                startPeriod =  LedgerFiscalCalendar::findPeriodByPeriodCodeDate(_budgetCycleTimeSpan.FiscalCalendar, fiscalCalendarYear.StartDate, FiscalPeriodType::Operating);
            }

            if (startPeriod == null)
            {
                // When start date does not exists within the fiscal calendar.
                CalendarId calendarId = FiscalCalendar::find(_budgetCycleTimeSpan.FiscalCalendar).CalendarId;
                checkFailed(strFmt("@SYS320423", _startDate, this.Name, calendarId));
            }
            else
            {
                FiscalPeriodEnd endDate;
                startDate = startPeriod.StartDate;
                recId origStartPeriodRecId = this.StartFiscalCalendarPeriod;
                this.StartFiscalCalendarPeriod = startPeriod.RecId;

                // Determine the end date based on the start date.

                if (_budgetCycleTimeSpan.BudgetCycleLengthOption == BudgetCycleLengthOption::MapToFiscalYear)
                {
                    // Update the ending period when the starting period changes for time span of length map to fiscal year.
                    endDate = LedgerFiscalCalendar::findFiscalYearEndDateByDate(_budgetCycleTimeSpan.FiscalCalendar, startDate);

                    if (_budgetCycleTimeSpan.RecId)
                    {
                        this.editCycleEndDate(true, endDate);
                    }
                    else
                    {
                        this.setCycleEndDate(endDate, _budgetCycleTimeSpan);
                    }
                }
                else
                {
                    // Update the ending period to a default value based on the default number of accounting periods
                    // present in the time span.

                    recId endPeriodRecId = _budgetCycleTimeSpan.calculateEndFiscalCalendarPeriod(startDate);

                    if (endPeriodRecId != 0)
                    {
                        FiscalCalendarPeriod fiscalCalendarEndPeriod = FiscalCalendarPeriod::find(endPeriodRecId);
                        endDate = fiscalCalendarEndPeriod.EndDate;

                        if (_budgetCycleTimeSpan.RecId)
                        {
                            this.editCycleEndDate(true, endDate);
                        }
                        else
                        {
                            this.setCycleEndDate(endDate, _budgetCycleTimeSpan);
                        }
                    }
                    else
                    {
                        // When end date does not exists within the fiscal calendar throw
                        // infolog message and reset the starting date to the original one.
                        CalendarId calendarId = FiscalCalendar::find(_budgetCycleTimeSpan.FiscalCalendar).CalendarId;
                        checkFailed(strFmt("@SYS320425", this.Name, calendarId));
                        this.StartFiscalCalendarPeriod = origStartPeriodRecId;
                        startDate = FiscalCalendarPeriod::find(this.StartFiscalCalendarPeriod).StartDate;
                    }
                }
            }
        }
        else
        {
            // When the start date was not entered.
            checkFailed(strFmt("@SYS26332", fieldPName(BudgetCycle, StartFiscalCalendarPeriod)));
        }

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the end date of the budget cycle record.
    /// </summary>
    /// <returns>
    /// The end date of the budget cycle, if found; otherwise, a null date.
    /// </returns>
    public FiscalPeriodEnd getEndDate()
    {
        return FiscalCalendarPeriod::find(this.EndFiscalCalendarPeriod).EndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the start date of the budget cycle record.
    /// </summary>
    /// <returns>
    /// The start date of the budget cycle, if found; otherwise, a null date.
    /// </returns>
    public FiscalPeriodStart getStartDate()
    {
        return FiscalCalendarPeriod::find(this.StartFiscalCalendarPeriod).StartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        this.clearBudgetCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDateInBudgetCycle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified date is within the budget cycle.
    /// </summary>
    /// <param name="_date">
    /// The date to determine whether it is in the budget cycle.
    /// </param>
    /// <returns>
    /// true if the specified date is within the budget cycle, otherwise, false.
    /// </returns>
    public boolean isDateInBudgetCycle(TransDate _date)
    {
        boolean returnValue = false;

        if (!_date)
        {
            throw error(error::missingParameter(null));
        }

        if (this.getStartDate() <= _date && _date <= this.getEndDate())
        {
            returnValue = true;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        this.clearBudgetCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetControlBudgetCycle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any of the <c>BudgetControlBudgetCycle</c> records exists for the
    /// <c>BudgetCycle</c> record.
    /// </summary>
    /// <returns>
    /// true if there are no <c>BudgetControlBudgetCycle</c> records; otherwise, false.
    /// </returns>
    public boolean validateBudgetControlBudgetCycle()
    {
        BudgetControlBudgetCycle controlBudgetCycle;
        BudgetControlConfiguration controlConfiguration;
        Ledger ledger;
        boolean isValid = true;

        while select BudgetModelId from controlBudgetCycle
            where controlBudgetCycle.BudgetCycle == this.RecId
            join PrimaryLedger from controlConfiguration
                where controlConfiguration.RecId == controlBudgetCycle.BudgetControlConfiguration
            join Name from ledger
                where ledger.RecId == controlConfiguration.PrimaryLedger
        {
            isValid = checkFailed(strFmt("@SYS314466",
                                    this.Name,
                                    controlBudgetCycle.BudgetModelId,
                                    ledger.Name));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetCycleDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the start date is less than the end date.
    /// </summary>
    /// <returns>
    /// true if the start date is less than the end date; otherwise, false.
    /// </returns>
    public boolean validateBudgetCycleDates()
    {
        FiscalPeriodStart startDate = this.getStartDate();
        FiscalPeriodEnd endDate = this.getEndDate();
        boolean isValid = true;

        if (startDate != dateNull() && endDate != dateNull())
        {
            if (startDate >= endDate)
            {
                isValid = checkFailed("@SYS330040");
            }
        }
        else
        {
            if (this.StartFiscalCalendarPeriod != 0 && startDate == dateNull())
            {
                // When there is a bad reference to a deleted start fiscal calendar period.
                isValid = CheckFailed(strfmt("@SYS342115", "@SYS342117"));
            }

            if (this.EndFiscalCalendarPeriod != 0 && endDate == dateNull())
            {
                // When there is a bad reference to a deleted end fiscal calendar period.
                isValid = CheckFailed(strfmt("@SYS342115", "@SYS342118"));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetCycleName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the budget cycle name is valid.
    /// </summary>
    /// <returns>
    /// true if the cycle name is valid; otherwise, false.
    /// </returns>
    public boolean validateBudgetCycleName()
    {
        boolean isValid = true;
        BudgetCycleTimeSpan budgetCycleTimeSpan;

        if (this.Name != '')
        {
            if (this.Name != this.orig().Name)
            {
                budgetCycleTimeSpan = BudgetCycleTimeSpan::find(this.BudgetCycleTimeSpan);

                if (BudgetCycle::findByNameAndTimeSpan(this.Name, budgetCycleTimeSpan.RecId))
                {
                    isValid = checkFailed(strFmt("@SYS320418",
                                                    this.Name,
                                                    budgetCycleTimeSpan.Name));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetCycleStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the cycle periods overlaps.
    /// </summary>
    /// <returns>
    /// true if the cycle start date and end date does not overlap; otherwise, false.
    /// </returns>
    public boolean validateBudgetCycleStartDate()
    {
        boolean              isValid = true;
        BudgetCycle          cycle;
        FiscalCalendarPeriod currentStartDatePeriod;
        FiscalCalendarPeriod currentEndDatePeriod;
        FiscalCalendarPeriod minExistingStartDatePeriod;
        FiscalCalendarPeriod minExistingEndDatePeriod;
        FiscalCalendarPeriod period;
        BudgetCycleTimeSpan  budgetCycleTimeSpan = BudgetCycleTimeSpan::find(this.BudgetCycleTimeSpan);

        void validateDates()
        {
            if (cycle != null)
            {
                minExistingStartDatePeriod = FiscalCalendarPeriod::find(cycle.StartFiscalCalendarPeriod);
                minExistingEndDatePeriod = FiscalCalendarPeriod::find(cycle.EndFiscalCalendarPeriod);

                if (currentStartDatePeriod.StartDate <= minExistingEndDatePeriod.EndDate && minExistingStartDatePeriod.StartDate <= currentEndDatePeriod.EndDate)
                {
                    isValid = checkFailed(strFmt("@SYS320420", this.Name));
                }
            }
        }

        currentStartDatePeriod = FiscalCalendarPeriod::find(this.StartFiscalCalendarPeriod);

        if (this.editCycleStartDate(false, currentStartDatePeriod.StartDate) != dateNull())
        {
            currentEndDatePeriod = FiscalCalendarPeriod::find(this.EndFiscalCalendarPeriod);

            // Check whether the current cycle overlaps with any existing cycle lesser than the current starting date.
            // Since order by clause does not work for exists join, using inner join instead.
            select firstonly cycle
                order by period.StartDate desc
                join period
                where cycle.StartFiscalCalendarPeriod == period.RecId &&
                      period.StartDate <= currentStartDatePeriod.StartDate &&
                      cycle.BudgetCycleTimeSpan == budgetCycleTimeSpan.RecId &&
                      cycle.RecId != this.RecId;

            validateDates();

            if (isValid)
            {
                // Check whether the current cycle overlaps with any existing cycle greater than the current starting date.
                // Since order by clause does not work for exists join, using inner join instead.
                select firstonly cycle
                    order by period.StartDate asc
                    join period
                    where cycle.StartFiscalCalendarPeriod == period.RecId &&
                          period.StartDate >= currentStartDatePeriod.StartDate &&
                          cycle.BudgetCycleTimeSpan == budgetCycleTimeSpan.RecId &&
                          cycle.RecId != this.RecId;

                validateDates();
            }
        }
        else
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        ret = ret && this.validateBudgetControlBudgetCycle();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret && (_fieldIdToCheck == fieldNum(BudgetCycle, Name)))
        {
            ret = this.validateBudgetCycleName();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && this.validateBudgetCycleDates();

        ret = ret && this.validateBudgetCycleStartDate();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateEndFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the ending period for the specified starting date.
    /// </summary>
    /// <param name="_budgetCycleTimeSpanRecId">
    /// The <c>BudgetCycleTimeSpan</c> record ID for which the end period must be found.
    /// </param>
    /// <param name="_startDate">
    /// The <c>FiscalPeriodStart</c> value for which ending period must be found.
    /// </param>
    /// <returns>
    /// A <c>FiscalCalendarPeriod</c> record ID of the ending date.
    /// </returns>
    public static recId calculateEndFiscalCalendarPeriod(recId _budgetCycleTimeSpanRecId, FiscalPeriodStart _startDate)
    {
        BudgetCycleTimeSpan budgetCycleTimeSpan = BudgetCycleTimeSpan::find(_budgetCycleTimeSpanRecId);

        return budgetCycleTimeSpan.calculateEndFiscalCalendarPeriod(_startDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>BudgetCycle</c>
    /// table exists and displays an error if it does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The RecId of the <c>BudgetCycle</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!BudgetCycle::exist(_recId))
        {
            ret = checkFailed(strFmt(BudgetCycle::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>BudgetCycle</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> field of the <c>BudgetCycle</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly RecId from budgetCycle
                    where budgetCycle.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetCycle</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record Id of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetCycle</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetCycle find(
        recId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetCycle budgetCycle;

        budgetCycle.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetCycle.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetCycle
            where budgetCycle.RecId == _recId;

        return budgetCycle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetCycleByDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the budget cycle for the specified budget cycle timespan for the specified date.
    /// </summary>
    /// <param name="_budgetCycleTimeSpanRecId">
    /// The record ID of the budget cycle timespan for which to find the budget cycle.
    /// </param>
    /// <param name="_date">
    /// The date for which to find the budget cycle.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetCycle</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetCycle findBudgetCycleByDate(recId _budgetCycleTimeSpanRecId, date _date)
    {
        BudgetCycle cycleOfDate;
        container cachedResult;
        recId cachedRecId;
        BudgetCycleTimeSpan timespan;
        FiscalCalendarPeriod startPeriod;
        FiscalCalendarPeriod endPeriod;
        FiscalCalendarYear calendarYear;

        if (_budgetCycleTimeSpanRecId != 0 && _date != dateNull())
        {
            cachedResult = BudgetCache::getValue(BudgetCacheScope::BudgetCycleByTimeSpanDate, [_budgetCycleTimeSpanRecId, _date]);

            if (cachedResult != conNull())
            {
                cachedRecId = conPeek(cachedResult, 1);

                if (cachedRecId)
                {
                    cycleOfDate = BudgetCycle::find(cachedRecId);
                }
            }
            else
            {
                timespan = BudgetCycleTimeSpan::find(_budgetCycleTimeSpanRecId);

                // Order by field does not accept exists join so inner join is used.
                select firstonly cycleOfDate
                    order by startPeriod.StartDate desc
                        where cycleOfDate.BudgetCycleTimeSpan == timespan.RecId
                    join RecId from startPeriod
                        where cycleOfDate.StartFiscalCalendarPeriod == startPeriod.RecId
                              && startPeriod.StartDate <= _date
                              && startPeriod.Type == FiscalPeriodType::Operating
                    exists join endPeriod
                        where cycleOfDate.EndFiscalCalendarPeriod == endPeriod.RecId
                            && endPeriod.EndDate >= _date
                            && endPeriod.Type == FiscalPeriodType::Operating
                    exists join calendarYear
                        where calendarYear.RecId == startPeriod.FiscalCalendarYear
                            && calendarYear.FiscalCalendar == timespan.FiscalCalendar;

                BudgetCache::insertValue(
                    BudgetCacheScope::BudgetCycleByTimeSpanDate,
                    [_budgetCycleTimeSpanRecId, _date],
                    [cycleOfDate.RecId]);
            }
        }

        return cycleOfDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetCycleEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the end date of the budget cycle for the specified budget cycle timespan and date.
    /// </summary>
    /// <param name="_budgetCycleTimeSpanRecId">
    /// The record ID of the budget cycle timespan for which to find the end date of the budget cycle.
    /// </param>
    /// <param name="_date">
    /// The date for which to find the budget cycle.
    /// </param>
    /// <returns>
    /// The end date of the budget cycle, if found; otherwise, a null date.
    /// </returns>
    public static FiscalPeriodEnd findBudgetCycleEndDate(recId _budgetCycleTimeSpanRecId, date _date)
    {
        BudgetCycle budgetCycle;

        budgetCycle = BudgetCycle::findBudgetCycleByDate(_budgetCycleTimeSpanRecId, _date);

        return budgetCycle.getEndDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBudgetCycleStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the start date of the budget cycle for the specified budget cycle timespan and date.
    /// </summary>
    /// <param name="_budgetCycleTimeSpanRecId">
    /// The record ID of the budget cycle timespan for which to find the start date of the budget cycle.
    /// </param>
    /// <param name="_date">
    /// The date for which to find the budget cycle.
    /// </param>
    /// <returns>
    /// The start date of the budget cycle, if found; otherwise, a null date.
    /// </returns>
    public static FiscalPeriodStart findBudgetCycleStartDate(recId _budgetCycleTimeSpanRecId, date _date)
    {
        BudgetCycle budgetCycle;

        budgetCycle = BudgetCycle::findBudgetCycleByDate(_budgetCycleTimeSpanRecId, _date);

        return budgetCycle.getStartDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNameAndTimeSpan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetCycle</c> table.
    /// </summary>
    /// <param name="_name">
    /// The <c>BudgetCycleName</c> value that needs to be found.
    /// </param>
    /// <param name="_budgetCycleTimeSpanRecId">
    /// The record ID value of the time span that needs to be found.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetCycle</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetCycle findByNameAndTimeSpan(
        BudgetCycleName    _name,
        RefRecId           _budgetCycleTimeSpanRecId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetCycle budgetCycle;

        budgetCycle.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetCycle.concurrencyModel(_concurrencyModel);
        }

        if (_budgetCycleTimeSpanRecId != 0 && _name != '')
        {
            select firstonly budgetCycle
                where budgetCycle.BudgetCycleTimeSpan == _budgetCycleTimeSpanRecId
                    && budgetCycle.Name == _name;
        }

        return budgetCycle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetCycle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetCycle</c> records.
    /// </summary>
    /// <param name="_ctrl">
    /// The form reference control for which to perform the lookup.
    /// </param>
    /// <param name="_budgetCycleTimeSpanRecId">
    /// The record ID of the time span to perform the lookup for.
    /// </param>
    /// <returns>
    /// The <c>BudgetCycle</c> record selected by the lookup.
    /// </returns>
    public static BudgetCycle lookupBudgetCycle(FormReferenceControl _ctrl, RefRecId _budgetCycleTimeSpanRecId)
    {
        Args                    budgetCycleLookupArgs;
        BudgetCycle             budgetCycle;
        FormRun                 budgetCycleFormLookup;

        budgetCycleLookupArgs = new Args(formStr(BudgetCycleLookup));
        budgetCycleLookupArgs.caller(_ctrl);
        budgetCycleLookupArgs.parmEnum(NoYes::Yes);

        if (_budgetCycleTimeSpanRecId != 0)
        {
            budgetCycleLookupArgs.record(BudgetCycleTimeSpan::find(_budgetCycleTimeSpanRecId));
        }

        budgetCycleFormLookup = ClassFactory::formRunClassOnClient(budgetCycleLookupArgs);

        budgetCycleFormLookup.init();

        // Perform the lookup.
        _ctrl.performFormLookup(budgetCycleFormLookup);

        budgetCycle = budgetCycleFormLookup.selectRecordModeSelectedRecord() as BudgetCycle;

        return budgetCycle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetCycleWithCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup for the <c>BudgetCycle</c> records.
    /// </summary>
    /// <param name="_ctrl">
    /// The form reference control for which the lookup is performed.
    /// </param>
    /// <returns>
    /// The <c>BudgetCycle</c> record that is selected by the lookup.
    /// </returns>
    public static BudgetCycle lookupBudgetCycleWithCalendar (FormReferenceControl _ctrl)
    {
        Args            budgetCycleLookupArgs;
        BudgetCycle     budgetCycle;
        FormRun         budgetCycleFormLookup;

        budgetCycleLookupArgs = new Args(formStr(BudgetCycleWithCalendarLookup));
        budgetCycleLookupArgs.caller(_ctrl);
        budgetCycleLookupArgs.parmEnum(NoYes::Yes);

        budgetCycleFormLookup = ClassFactory::formRunClassOnClient(budgetCycleLookupArgs);

        budgetCycleFormLookup.init();

        // Perform the lookup.
        _ctrl.performFormLookup(budgetCycleFormLookup);

        budgetCycle = budgetCycleFormLookup.selectRecordModeSelectedRecord() as BudgetCycle;

        return budgetCycle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetCycleEndingPeriodReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the reference of the current end fiscal calendar period to the passed in new end fiscal
    /// calendar period record ID
    /// </summary>
    /// <param name="_currentEndFiscalPeriod">
    /// The record ID of the current end fiscal calendar period which must be updated.
    /// </param>
    /// <param name="_newEndFiscalPeriod">
    /// The record ID of the new end fiscal calendar period which replaces the current fiscal calendar
    /// period.
    /// </param>
    public static void updateBudgetCycleEndingPeriodReferences(recId _currentEndFiscalPeriod, recId _newEndFiscalPeriod)
    {
        BudgetCycle budgetCycle;

        if (_newEndFiscalPeriod != 0)
        {
            ttsbegin;

            update_recordset budgetCycle
                setting EndFiscalCalendarPeriod = _newEndFiscalPeriod
                    where budgetCycle.EndFiscalCalendarPeriod == _currentEndFiscalPeriod;

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
	<DeveloperDocumentation>@SYS317168</DeveloperDocumentation>
	<FormRef>BudgetCycleTimeSpan</FormRef>
	<Label>@SYS314460</Label>
	<PreviewPartRef>BudgetCyclePreview</PreviewPartRef>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>StartFiscalCalendarPeriod</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Budget</Modules>
	<ReplacementKey>BudgetCycleIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartFiscalCalendarPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetCycleTimeSpan</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetCycleTimeSpan</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartFiscalCalendarPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetCycleTimeSpan</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartFiscalCalendarPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EndFiscalCalendarPeriod</Name>
			<Label>@SYS320411</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EndFiscalCalendarPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetCycleTimeSpan</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartFiscalCalendarPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@SYS7399</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetCycleTimeSpan</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS314453</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EndFiscalCalendarPeriod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS320411</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetCycleName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>StartFiscalCalendarPeriod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS314464</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EndFiscalCalendarPeriodIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>EndFiscalCalendarPeriod</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BudgetCycleIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetCycleTimeSpan</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StartFiscalCalendarPeriod</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetCycleTimeSpan</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetCycleTimeSpan</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetCycleTimeSpan</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetCycleTimeSpan_BudgetCycle</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetCycleTimeSpan</Name>
					<Field>BudgetCycleTimeSpan</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EndFiscalCalendarPeriod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>FiscalCalendarPeriod</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EndFiscalCalendarPeriod</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EndFiscalCalendarPeriod_BudgetCycle</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EndFiscalCalendarPeriod</Name>
					<Field>EndFiscalCalendarPeriod</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>StartFiscalCalendarPeriod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>FiscalCalendarPeriod</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>StartFiscalCalendarPeriod</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>StartFiscalCalendarPeriod_BudgetCycle</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StartFiscalCalendarPeriod</Name>
					<Field>StartFiscalCalendarPeriod</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>