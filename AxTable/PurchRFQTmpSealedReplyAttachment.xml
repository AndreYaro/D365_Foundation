<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQTmpSealedReplyAttachment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a temporary table sealed bid attachments and will be used for attachments at both table and line level.
/// </summary>
public class PurchRFQTmpSealedReplyAttachment extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateTmpSealedReplyAttachment</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called to populate the temporary table with records from 
    /// <c>PurchRFQSealedReplyTableAttachmentLink</c> table and <c>PurchRFQSealedReplyTableAttachment</c> table
    /// </summary>
    /// <param name = "_record"> The calling record from i.e. reply header or reply line </param>
    /// <param name = "_purchRFQSealedAuditLogParameters">The object containing audit log parameters.</param>
    [Hookable(false), Wrappable(false)]
    internal final void populateTmpSealedReplyAttachment(Common _record, PurchRFQSealedAuditLogParameters _purchRFQSealedAuditLogParameters)
    {
        if (_record == null || !_record.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;

        delete_from this;
        
        if (_record.TableId == tableNum(PurchRFQReplyTable))
        {
            this.populateTmpSealedReplyTableAttachment(_record as PurchRFQReplyTable, _purchRFQSealedAuditLogParameters);
        }
        else if (_record.TableId == tableNum(PurchRFQReplyLine))
        {
            this.populateTmpSealedReplyLineAttachment(_record as PurchRFQReplyLine, _purchRFQSealedAuditLogParameters);
        }
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpSealedReplyTableAttachment</Name>
				<Source><![CDATA[
    private final void populateTmpSealedReplyTableAttachment(PurchRFQReplyTable _record, PurchRFQSealedAuditLogParameters _sealedAuditLogParameters)
    {
        PurchRFQSealedBidEncryptionManager sealedBidEncryptionManager = PurchRFQSealedBidEncryptionManager::newFromPurchRFQReplyTableRecId(_record.RecId);

        PurchRFQSealedReplyTableAttachmentLink sealedReplyTableAttachmentLink;
        PurchRFQSealedReplyTableAttachment sealedReplyTableAttachment;
        
        MapEnumerator me;
        RecId sealedReplyTableAttachmentLinkRecId, purchRFQTmpSealedReplyAttachmentRecId;
        Map updateRecordMap = new Map(Types::Int64, Types::Int64);

        while select forupdate sealedReplyTableAttachmentLink
            order by sealedReplyTableAttachmentLink.PurchRFQTmpSealedReplyAttachment asc
            join sealedReplyTableAttachment
                where sealedReplyTableAttachment.PurchRFQSealedReplyTableAttachmentLink == sealedReplyTableAttachmentLink.RecId
                    && sealedReplyTableAttachmentLink.PurchRFQReplyTable == _record.RecId
        {
            unchecked(Uncheck::TableSecurityPermission)
            {
                PurchRFQTmpSealedReplyAttachment purchRFQTmpSealedReplyAttachmentLocal = sealedReplyTableAttachment.sealedRecordEdit(false
                                                                                                                                    , sealedReplyTableAttachment.SealedRecord
                                                                                                                                    , sealedBidEncryptionManager
                                                                                                                                    , _sealedAuditLogParameters);
                this.data(purchRFQTmpSealedReplyAttachmentLocal);
            }

            this.insert();
            updateRecordMap.insert(this.RecId, sealedReplyTableAttachmentLink.RecId);
        }
        
        // Avoid infinite while loop when refreshing manually.
        me = updateRecordMap.getEnumerator();
        while (me.moveNext())
        {
            sealedReplyTableAttachmentLinkRecId = me.currentValue();
            purchRFQTmpSealedReplyAttachmentRecId = me.currentKey();

            select forupdate sealedReplyTableAttachmentLink
            where sealedReplyTableAttachmentLink.RecId == sealedReplyTableAttachmentLinkRecId;

            if (sealedReplyTableAttachmentLink)
            {
                sealedReplyTableAttachmentLink.PurchRFQTmpSealedReplyAttachment = purchRFQTmpSealedReplyAttachmentRecId;
                sealedReplyTableAttachmentLink.update();
            }        
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpSealedReplyLineAttachment</Name>
				<Source><![CDATA[
    private final void populateTmpSealedReplyLineAttachment(PurchRFQReplyLine _record, PurchRFQSealedAuditLogParameters _sealedAuditLogParameters)
    {
        PurchRFQSealedBidEncryptionManager sealedBidEncryptionManager = PurchRFQSealedBidEncryptionManager::newFromPurchRFQReplyTableRecId(PurchRFQReplyTable::find(_record.RFQId).RecId);

        PurchRFQSealedReplyLineAttachmentLink sealedReplyLineAttachmentLink;
        PurchRFQSealedReplyLineAttachment sealedReplyLineAttachment;
        
        MapEnumerator me;
        RecId sealedReplyLineAttachmentLinkRecId, purchRFQTmpSealedReplyAttachmentRecId;
        Map updateRecordMap = new Map(Types::Int64, Types::Int64);

        while select forupdate sealedReplyLineAttachmentLink
            order by sealedReplyLineAttachmentLink.PurchRFQTmpSealedReplyAttachment asc
            join sealedReplyLineAttachment
                where sealedReplyLineAttachment.PurchRFQSealedReplyLineAttachmentLink == sealedReplyLineAttachmentLink.RecId
                    && sealedReplyLineAttachmentLink.PurchRFQReplyLine == _record.RecId
        {
            unchecked(Uncheck::TableSecurityPermission)
            {
                PurchRFQTmpSealedReplyAttachment  purchRFQTmpSealedReplyAttachmentLocal = sealedReplyLineAttachment.sealedRecordEdit(false
                                                                                                                                    , sealedReplyLineAttachment.SealedRecord
                                                                                                                                    , sealedBidEncryptionManager
                                                                                                                                    , _sealedAuditLogParameters);
                this.data(purchRFQTmpSealedReplyAttachmentLocal);
            }
                
            this.insert();
            updateRecordMap.insert(this.RecId, sealedReplyLineAttachmentLink.RecId);        
        }

        // Avoid infinite while loop when refreshing manually.
        me = updateRecordMap.getEnumerator();
        while (me.moveNext())
        {
            sealedReplyLineAttachmentLinkRecId = me.currentValue();
            purchRFQTmpSealedReplyAttachmentRecId = me.currentKey();

            select forupdate sealedReplyLineAttachmentLink
            where sealedReplyLineAttachmentLink.RecId == sealedReplyLineAttachmentLinkRecId;

            if (sealedReplyLineAttachmentLink)
            {
                sealedReplyLineAttachmentLink.PurchRFQTmpSealedReplyAttachment = purchRFQTmpSealedReplyAttachmentRecId;
                sealedReplyLineAttachmentLink.update();
            }        
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePurchRFQSealedReplyAttachmentAndLinkRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called to delete the records from <c>PurchRFQSealedReplyTableAttachmentLink</c> table
    /// and <c>PurchRFQSealedReplyTableAttachment</c> table when a record from temp table is deleted
    /// </summary>
    /// <param name = "_record"> The calling record from i.e. reply header or reply line </param>
    [Hookable(false), Wrappable(false)]
    internal final void deletePurchRFQSealedReplyAttachmentAndLinkRecords(Common _callingRecord)
    {
        if (_callingRecord == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;
            
        if (_callingRecord.TableId == tableNum(PurchRFQReplyTable))
        {
            this.deletePurchRFQSealedReplyAttachmentAndLinkRecordsTable(_callingRecord);
        }
        else if (_callingRecord.TableId == tableNum(PurchRFQReplyLine))
        {
            this.deletePurchRFQSealedReplyAttachmentAndLinkRecordsLine(_callingRecord);
        }
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePurchRFQSealedReplyAttachmentAndLinkRecordsTable</Name>
				<Source><![CDATA[
    private final void deletePurchRFQSealedReplyAttachmentAndLinkRecordsTable(Common _callingRecord)
    {
        PurchRFQSealedReplyTableAttachmentLink sealedReplyTableAttachmentLink;
                
        select forUpdate sealedReplyTableAttachmentLink
                    where sealedReplyTableAttachmentLink.PurchRFQReplyTable == _callingRecord.RecId
                        && sealedReplyTableAttachmentLink.PurchRFQTmpSealedReplyAttachment == this.RecId;
                                
        PurchRFQSealedReplyTableAttachment purchRFQSealedReplyTableAttachment;

        unchecked(Uncheck::TableSecurityPermission)
        {
            delete_from purchRFQSealedReplyTableAttachment
                        where purchRFQSealedReplyTableAttachment.PurchRFQSealedReplyTableAttachmentLink == sealedReplyTableAttachmentLink.RecId;
        }

        sealedReplyTableAttachmentLink.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePurchRFQSealedReplyAttachmentAndLinkRecordsLine</Name>
				<Source><![CDATA[
    private final void deletePurchRFQSealedReplyAttachmentAndLinkRecordsLine(Common _callingRecord)
    {
        PurchRFQSealedReplyLineAttachmentLink sealedReplyLineAttachmentLink;
                
        select forUpdate sealedReplyLineAttachmentLink
                    where sealedReplyLineAttachmentLink.PurchRFQReplyLine == _callingRecord.RecId
                        && sealedReplyLineAttachmentLink.PurchRFQTmpSealedReplyAttachment == this.RecId;
                                
        PurchRFQSealedReplyLineAttachment purchRFQSealedReplyLineAttachment;

        unchecked(Uncheck::TableSecurityPermission)
        {
            delete_from purchRFQSealedReplyLineAttachment
                        where purchRFQSealedReplyLineAttachment.PurchRFQSealedReplyLineAttachmentLink == sealedReplyLineAttachmentLink.RecId;
        }

        sealedReplyLineAttachmentLink.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPurchRFQTmpSealedReplyAttachmentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called to insert records in <c>PurchRFQSealedReplyTableAttachmentLink</c> table
    /// and <c>PurchRFQSealedReplyTableAttachment</c> table when a record is inserted in the temp table
    /// </summary>
    /// <param name = "_record"> The calling record from i.e. reply header or reply line </param>
    /// <param name = "_purchRFQSealedAuditLogParameters">The object containing audit log parameters.</param>
    [Hookable(false), Wrappable(false)]
    internal final void insertPurchRFQTmpSealedReplyAttachmentRecord(Common _callingRecord, PurchRFQSealedAuditLogParameters _purchRFQSealedAuditLogParameters)
    {
        if (_callingRecord == null || !_callingRecord.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (_callingRecord.TableId == tableNum(PurchRFQReplyTable))
        {
            this.insertPurchRFQTmpSealedReplyAttachmentRecordTable(_callingRecord as PurchRFQReplyTable, _purchRFQSealedAuditLogParameters);
        }
        else if (_callingRecord.TableId == tableNum(PurchRFQReplyLine))
        {
            this.insertPurchRFQTmpSealedReplyAttachmentRecordLine(_callingRecord as PurchRFQReplyLine, _purchRFQSealedAuditLogParameters);
        }

        this.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPurchRFQTmpSealedReplyAttachmentRecordTable</Name>
				<Source><![CDATA[
    private final void insertPurchRFQTmpSealedReplyAttachmentRecordTable(PurchRFQReplyTable _callingRecord, PurchRFQSealedAuditLogParameters _purchRFQSealedAuditLogParameters)
    {
        PurchRFQSealedReplyTableAttachmentLink localLink;

        select firstonly localLink
                    order by RecId desc
                    where localLink.PurchRFQReplyTable == _callingRecord.RecId;

        this.RecId = localLink.PurchRFQTmpSealedReplyAttachment + 1;
                    
        PurchRFQSealedReplyTableAttachmentLink sealedReplyTableAttachmentLink;
                
        sealedReplyTableAttachmentLink.PurchRFQTmpSealedReplyAttachment = this.RecId;
        sealedReplyTableAttachmentLink.PurchRFQReplyTable = _callingRecord.RecId;
        sealedReplyTableAttachmentLink.insert();
        sealedReplyTableAttachmentLink.reread();

        PurchRFQSealedBidEncryptionManager sealedBidEncryptionManager = PurchRFQSealedBidEncryptionManager::newFromPurchRFQReplyTableRecId(_callingRecord.RecId);
                
        PurchRFQSealedReplyTableAttachment purchRFQSealedReplyTableAttachment;
        unchecked(Uncheck::TableSecurityPermission)
        {
            _purchRFQSealedAuditLogParameters.parmActivity(PurchRFQReplyActivity::Saved);

            purchRFQSealedReplyTableAttachment.PurchRFQSealedReplyTableAttachmentLink = sealedReplyTableAttachmentLink.RecId;
            purchRFQSealedReplyTableAttachment.sealedRecordEdit(true, this.buf2con(), sealedBidEncryptionManager, _purchRFQSealedAuditLogParameters);
            purchRFQSealedReplyTableAttachment.DocuRefRecId =  this.DocRefRecId;
            purchRFQSealedReplyTableAttachment.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPurchRFQTmpSealedReplyAttachmentRecordLine</Name>
				<Source><![CDATA[
    private final void insertPurchRFQTmpSealedReplyAttachmentRecordLine(PurchRFQReplyLine _callingRecord, PurchRFQSealedAuditLogParameters _purchRFQSealedAuditLogParameters)
    {
        PurchRFQSealedReplyLineAttachmentLink localLink;

        select firstonly localLink
                    order by RecId desc
                    where localLink.PurchRFQReplyLine == _callingRecord.RecId;

        this.RecId = localLink.PurchRFQTmpSealedReplyAttachment + 1;
                    
        PurchRFQSealedReplyLineAttachmentLink sealedReplyLineAttachmentLink;
                
        sealedReplyLineAttachmentLink.PurchRFQTmpSealedReplyAttachment = this.RecId;
        sealedReplyLineAttachmentLink.PurchRFQReplyLine = _callingRecord.RecId;
        sealedReplyLineAttachmentLink.insert();
        sealedReplyLineAttachmentLink.reread();

        PurchRFQReplyTable replyTable = PurchRFQReplyTable::find(_callingRecord.RFQId);

        PurchRFQSealedBidEncryptionManager sealedBidEncryptionManager = PurchRFQSealedBidEncryptionManager::newFromPurchRFQReplyTableRecId(replyTable.RecId);
                
        PurchRFQSealedReplyLineAttachment purchRFQSealedReplyLineAttachment;
        unchecked(Uncheck::TableSecurityPermission)
        {
            _purchRFQSealedAuditLogParameters.parmActivity(PurchRFQReplyActivity::Saved);

            purchRFQSealedReplyLineAttachment.PurchRFQSealedReplyLineAttachmentLink = sealedReplyLineAttachmentLink.RecId;
            purchRFQSealedReplyLineAttachment.sealedRecordEdit(true, this.buf2con(), sealedBidEncryptionManager, _purchRFQSealedAuditLogParameters);
            purchRFQSealedReplyLineAttachment.DocuRefRecId = this.DocRefRecId;
            purchRFQSealedReplyLineAttachment.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SCM:PurchRFQTmpSealedReplyAttachmentDeveloperDocumentation</DeveloperDocumentation>
	<Label>@SCM:PurchRFQTmpSealedReplyAttachment</Label>
	<TableGroup>Worksheet</TableGroup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Notes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>File</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<StringSize>-1</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDocumentAttached</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS26568</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DocRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>