<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCDSActualsImport</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjCDSActualsImport extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findRecordsNotIntegrated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns records that have not been integrated into standard AX tables
    /// </summary>
    public static ProjCDSActualsImport findRecordsNotIntegrated(boolean _forUpdate = false)
    {
        ProjCDSActualsImport import;

        import.selectForUpdate(_forUpdate);

        select RecId from import
            where import.ProjAdvancedJournalLine == 0
                && import.IsDuplicate == NoYes::No;

        return import;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOnInvoicePosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the actuals record with the invoice posting details from the <c>ProjActualsInvoicePostingUpdateParameters</c>.
    /// </summary>
    /// <param name = "_projActualsInvoicePostingUpdateParameters">The object that holds the posting data that is to be updated on to the actuals.</param>
    public void updateOnInvoicePosting(ProjActualsInvoicePostingUpdateParameters _projActualsInvoicePostingUpdateParameters)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUnprocessedActualsExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if any unprocessed actuals records exist.
    /// </summary>
    /// <returns>true if any unprocessed actuals records exist; otherwise, false.</returns>
    public static boolean doUnprocessedActualsExist()
    {
        ProjCDSActualsImport import;

        select firstonly RecId from import
            where import.IsProcessed == NoYes::No;

        return import.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjCDSActualsImport find(RefRecId _recId, boolean _forUpdate = false)
    {
        ProjCDSActualsImport import;

        import.selectForUpdate(_forUpdate);

        select firstonly import
             where import.RecId == _recId;

        return import;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByActualId</Name>
				<Source><![CDATA[
    public static ProjCDSActualsImport findByActualId(guid _actualId, boolean _forUpdate = false)
    {
        ProjCDSActualsImport import;

        if (_actualId != Global::emptyGuid())
        {
            import.selectForUpdate(_forUpdate);

            select firstonly import
             where import.ActualId == _actualId
                && import.IsDuplicate == NoYes::No;
        }

        return import;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsActualId</Name>
				<Source><![CDATA[
    public static boolean existsActualId(guid _actualId)
    {
        ProjCDSActualsImport import;

        if (_actualId != Global::emptyGuid())
        {
            select firstonly RecId from import
             where import.ActualId == _actualId
                && import.IsDuplicate == NoYes::No;
        }

        return import.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchingRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// PSA separates the Cost and Sales amounts into two records where AX has it as one record with two amounts.  Need to
    /// find the corresponding record to the one thats being processed.
    /// </summary>
    /// <param name = "_actualId">The id of the record to find the matching record of</param>
    /// <param name = "_transType">The type of the known transaction</param>
    /// <param name = "_opposingTransType">The type of the opposing transaction</param>
    /// <returns>Table buffer of the <c>ProjCDSEstimateExpensesImport</c> record</returns>
    public static ProjCDSActualsImport getMatchingRecord(guid _actualId, str _transType, str _opposingTransType)
    {
        ProjCDSActualsImport import;

        if (_actualId != Global::emptyGuid())
        {
            guid matchingTransactionId = ProjCDSTransactionRelationshipImport::findOpposingTransactionId(_actualId, _transType, _opposingTransType);
            if (matchingTransactionId != Global::emptyGuid())
            {
                import = ProjCDSActualsImport::findByActualId(matchingTransactionId, true);
            }
        }

        return import;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        boolean projOpsIntegEnabledInActualsLE = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();
        DataAreaId actualsLE = curExt();
        changecompany (this.ProjectDataAreaId)
        {
            // Validate project id if actual type is not retainer or if proj ops integration is disabled in either of the LEs.
            if (ret && this.TransactionClassification != ProjCDSConstants::TransactionClassification_Retainer)
            {
                ret = this.validateProjectId();
            }
            else if (ret)
            {
                boolean projOpsIntegEnabledInProjLE = actualsLE == this.ProjectDataAreaId ? projOpsIntegEnabledInActualsLE : ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();

                boolean projOpsDisabledInEitherLE = !projOpsIntegEnabledInActualsLE || !projOpsIntegEnabledInProjLE;

                // Validate project if projOps is disabled in either of the LEs
                if (projOpsDisabledInEitherLE)
                {
                    ret = ret && this.validateProjectId();
                }
            }

	        ret = ret && ProjCDSActualsImport::doesContractExist(this.ContractId);
        }

        ret = ret && ProjCDSActualsImport::doesCurrencyExist(this.TransactionCurrencyId);

        if (!projOpsIntegEnabledInActualsLE)
        {
            ret = ret && this.validateCDS();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectId</Name>
				<Source><![CDATA[
    private boolean validateProjectId()
    {
        boolean ret = true;
        if (!this.ProjectId)
        {
            ret = ret && checkFailed("@Proj:MissingProjIdError");
        }
        else
        {
            ret = ret && ProjCDSActualsImport::doesProjectExist(this.ProjectId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCDS</Name>
				<Source><![CDATA[
    private boolean validateCDS()
    {
        boolean ret = true;

        // Validate Category - Don't validate Time and fee which will come from setup during integration
        if (this.TransactionClassification == ProjCDSConstants::TransactionClassification_Time)
        {
	        ProjCDSParameters cdsParameters = ProjCDSParameters::find();
	        if (!cdsParameters.TimeCategory)
	        {
		        ret = checkFailed("@Proj:ProjCDSCategoryTimeRequired");
	        }
        }
        else if (this.TransactionClassification == ProjCDSConstants::TransactionClassification_Fee)
        {
	        ProjCDSParameters cdsParameters = ProjCDSParameters::find();
	        if (!cdsParameters.FeeCategory)
	        {
		        ret = checkFailed("@Proj:ProjCDSCategoryFeeRequired");
	        }
        }
        else if (!ProjCDSActualsImport::doesCategoryExist(this.TransactionCategory, this.TransactionClassification))
        {
	        DictField projCategoryField = new DictField(Tablenum(ProjAdvancedJournalLine), fieldNum(ProjAdvancedJournalLine, ProjCategoryId));
	        ret = checkFailed(strFmt("@SYS24602",  projCategoryField.label(), guid2Str(this.TransactionCategory)));
	        }

        // Validate Billing type (aka Line Property Id)
        if (!ProjBillingTypeLinePropertyDefault::canFindLinePropertyIDForBillingType(this.BillingType))
        {
	        DictField linePropertyField = new DictField(Tablenum(ProjAdvancedJournalLine), fieldNum(ProjAdvancedJournalLine, LinePropertyId));
	        ret = checkFailed(strFmt("@SYS24602",  linePropertyField.label(), this.BillingType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesProjectExist</Name>
				<Source><![CDATA[
    private static boolean doesProjectExist(ProjId _projectId)
    {
        boolean ret = true;

        if (_projectId)
        {
            ret = ProjTable::checkExist(_projectId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesContractExist</Name>
				<Source><![CDATA[
    private static boolean doesContractExist(ProjInvoiceProjId _contractId)
	{
		boolean ret = true;

        if (_contractId)
		{
            ret = ProjInvoiceTable::exist(_contractId);
		}

		return ret;
	}

]]></Source>
			</Method>
			<Method>
				<Name>doesCurrencyExist</Name>
				<Source><![CDATA[
    private static boolean doesCurrencyExist(CurrencyCode _currency)
    {
        boolean ret = true;

        if (_currency)
        {
            ret = Currency::checkExist(_currency);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesCategoryExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a category exists.
    /// </summary>
    /// <param name = "_categoryGuid">The ID of the category.</param>
    /// <param name = "_transClassification">The ID of the transaction classification.</param>
    /// <returns>true if a category exists; otherwise, false.</returns>
    protected static boolean doesCategoryExist(guid _categoryGuid, int64 _transClassification)
    {
        CategoryTable categoryTable;
        boolean found = false;

        if (_categoryGuid == Global::emptyGuid() && _transClassification == ProjCDSConstants::TransactionClassification_Time)
        {
            // Time Entry transactions don't need a Transaction Classification; don't send back a result that will generate an error
            found = true;
        }
        else
        {
            select firstonly RecId from categoryTable
                where categoryTable.integrationId == _categoryGuid;

            if (categoryTable.RecId)
            {
                found = true;
            }
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAdvancedJournalLineAndType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>ProjCDSActualsImport</c> record that matches the JournalLine recid and TransType fields that are passed in
    /// </summary>
    /// <param name = "_lineRecId">The RecId of the <c>ProjAdvancedJournalLine</c> of the record to retrieve</param>
    /// <param name = "_transType">The transaction type of the record to retrieve</param>
    /// <param name = "_forUpdate">Set to true open the record for update</param>
    /// <returns>A single record from ProjCDSActualsImport if found</returns>
    public static ProjCDSActualsImport findByAdvancedJournalLineAndType(ProjAdvancedJournalLineRecId _lineRecId, ProjCDSTransType _transType, boolean _forUpdate = false)
    {
        ProjCDSActualsImport import;

        import.selectForUpdate(_forUpdate);

        select firstonly import
            where import.ProjAdvancedJournalLine == _lineRecId
                && import.TransType == _transType
                && import.IsDuplicate == NoYes::No;

        return import;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAdvancedJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>ProjCDSActualsImport</c> record that matches the given <c>ProjAdvancedJournalLine</c> record ID.
    /// </summary>
    /// <param name = "_lineRecId">The RecId of the <c>ProjAdvancedJournalLine</c> of the record to retrieve</param>
    /// <param name = "_forUpdate">Set to true open the record for update</param>
    /// <returns>A single record from ProjCDSActualsImport if found</returns>
    public static ProjCDSActualsImport findByAdvancedJournalLine(ProjAdvancedJournalLineRecId _lineRecId, boolean _forUpdate = false)
    {
        ProjCDSActualsImport import;

        import.selectForUpdate(_forUpdate);

        if (_lineRecId)
        {
            select firstonly import
                where import.ProjAdvancedJournalLine == _lineRecId
                    && import.IsDuplicate == NoYes::No;
        }

        return import;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxByAdvancedJournalLineAndType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>ProjCDSActualsImport</c> tax record that matches the JournalLine recid and TransType fields that are passed in
    /// </summary>
    /// <param name = "_lineRecId">The RecId of the <c>ProjAdvancedJournalLine</c> of the record to retrieve</param>
    /// <param name = "_transType">The transaction type of the record to retrieve</param>
    /// <param name = "_forUpdate">Set to true open the record for update</param>
    /// <returns>A single record from ProjCDSActualsImport if found</returns>
    public static ProjCDSActualsImport findTaxByAdvancedJournalLineAndType(ProjAdvancedJournalLineRecId _lineRecId, ProjCDSTransType _transType, boolean _forUpdate = false)
    {
        ProjCDSActualsImport import;

        import.selectForUpdate(_forUpdate);

        select firstonly import
            where import.ProjAdvancedJournalLine == _lineRecId
                && import.TransType == _transType
                && import.TransactionClassification == ProjCDSConstants::TransactionClassification_Tax
                && import.IsDuplicate == NoYes::No;

        return import;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            this.ActualsImportId = newGuid();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.ProjectDataAreaId = curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContractId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get contract ID associated with this record.
    /// </summary>
    /// <returns>Contract ID associated with <c>ProjCDSActualsImport</c> record.</returns>
    [Hookable(false)]
    public ProjInvoiceProjId getContractId()
    {
        ProjInvoiceProjId contractId;
        if (this.ContractId)
        {
            contractId = this.ContractId;
        }
        else
        {
            contractId = ProjTable::find(this.ProjectId).ProjInvoiceProjId;
        }

        return contractId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyActual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if record is generated from intercompany transaction.
    /// </summary>
    /// <returns>true if it is intercompany transaction.</returns>
    public boolean intercompanyActual()
    {
        return this.ResourcingCompany && this.ResourcingCompany != this.ProjectDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesRecordFromUnbilledSalesCost</Name>
				<Source><![CDATA[
    private boolean isSalesRecordFromUnbilledSalesCost()
    {
        ProjCDSTransactionRelationshipImport projCDSTransactionRelationshipImport;

        select firstonly RecId from ProjCDSTransactionRelationshipImport
            where ProjCDSTransactionRelationshipImport.Transaction1Id == this.ActualId
                && ProjCDSTransactionRelationshipImport.TRANSACTION1ROLE == ProjCDSConstants::TransactionRoleString_UnbilledSales
                && ProjCDSTransactionRelationshipImport.TRANSACTION2ROLE == ProjCDSConstants::TransactionRoleString_Cost;

        if (ProjCDSTransactionRelationshipImport)
        {
            return true;
        }
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCostRecordFromUnbilledSalesCost</Name>
				<Source><![CDATA[
    private boolean isCostRecordFromUnbilledSalesCost()
    {
        ProjCDSTransactionRelationshipImport projCDSTransactionRelationshipImport;

        select firstonly RecId from ProjCDSTransactionRelationshipImport
            where ProjCDSTransactionRelationshipImport.Transaction2Id == this.ActualId
                && ProjCDSTransactionRelationshipImport.TRANSACTION1ROLE == ProjCDSConstants::TransactionRoleString_UnbilledSales
                && ProjCDSTransactionRelationshipImport.TRANSACTION2ROLE == ProjCDSConstants::TransactionRoleString_Cost;

        if (ProjCDSTransactionRelationshipImport)
        {
            return true;
        }
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOriginatedCostRecord</Name>
				<Source><![CDATA[
    private boolean isOriginatedCostRecord()
    {
        if (this.isCostRecordFromUnbilledSalesCost())
        {
            ProjCDSTransactionRelationshipImport projCDSTransactionRelationshipImport;
            select firstonly RecId
                from projCDSTransactionRelationshipImport
                where projCDSTransactionRelationshipImport.Transaction1Id == this.ActualId
                && projCDSTransactionRelationshipImport.Transaction2Role == ProjCDSConstants::TransactionRoleString_Original;

            if (projCDSTransactionRelationshipImport)
            {
                return false;
            }
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOriginatedSalesRecord</Name>
				<Source><![CDATA[
    private boolean isOriginatedSalesRecord()
    {
        if (this.isSalesRecordFromUnbilledSalesCost())
        {
            ProjCDSTransactionRelationshipImport projCDSTransactionRelationshipImport;
            select firstonly RecId 
                from projCDSTransactionRelationshipImport
                where projCDSTransactionRelationshipImport.Transaction1Id == this.ActualId
                && projCDSTransactionRelationshipImport.Transaction2Role == ProjCDSConstants::TransactionRoleString_Original;

            if (projCDSTransactionRelationshipImport)
            {
                return false;
            }
            return true;
        }
       
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginatedImportRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the originated sales record if the import record is sales type but not the originated sales record.
    /// </summary>
    /// <returns>A single record from ProjCDSActualsImport if found.</returns>
    public ProjCDSActualsImport findOriginatedImportRecord()
    {
        ProjCDSActualsImport originatedImportRecord;

        if (this.TransType == ProjCDSTransType::Sales)
        {
            if (this.isOriginatedSalesRecord())
            {
                return this;
            }
            else
            {
                originatedImportRecord = this.findOriginatedSalesRecord();
            }
        }
        else if (this.TransType == ProjCDSTransType::Cost)
        {
            if (this.isOriginatedCostRecord())
            {
                return this;
            }           
            else
            {
                originatedImportRecord = this.findOriginatedCostRecord();
            }
        }
     
        return originatedImportRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginatedSalesRecord</Name>
				<Source><![CDATA[
    private ProjCDSActualsImport findOriginatedSalesRecord()
    {
        ProjCDSTransactionRelationshipImport projCDSTransactionRelationshipImport;
        ProjCDSActualsImport originatedProjCDSActualsImportSales;

        select firstonly RecId, Transaction2Id
            from projCDSTransactionRelationshipImport
            where projCDSTransactionRelationshipImport.Transaction1Id == this.ActualId
                && projCDSTransactionRelationshipImport.TRANSACTION2ROLE == ProjCDSConstants::TransactionRoleString_Original;

        guid actualId = projCDSTransactionRelationshipImport.Transaction2Id;

        while (projCDSTransactionRelationshipImport.Transaction2Id != Global::emptyGuid())
        {
            select firstonly RecId, Transaction2Id
                from projCDSTransactionRelationshipImport
                where projCDSTransactionRelationshipImport.Transaction1Id == actualId
                && projCDSTransactionRelationshipImport.TRANSACTION2ROLE == ProjCDSConstants::TransactionRoleString_Original;

            if (projCDSTransactionRelationshipImport)
            {
                actualId = projCDSTransactionRelationshipImport.Transaction2Id;
            }
        }
       
        if (actualId != Global::emptyGuid())
        {
            originatedProjCDSActualsImportSales = ProjCDSActualsImport::findByActualId(actualId);
        }

        return originatedProjCDSActualsImportSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginatedCostRecord</Name>
				<Source><![CDATA[
    private ProjCDSActualsImport findOriginatedCostRecord()
    {
        ProjCDSTransactionRelationshipImport projCDSTransactionRelationshipImport;
        ProjCDSActualsImport originatedProjCDSActualsImportCost;
            
        select firstonly RecId, Transaction2Id
            from projCDSTransactionRelationshipImport
            where projCDSTransactionRelationshipImport.Transaction1Id == this.ActualId
                && projCDSTransactionRelationshipImport.TRANSACTION2ROLE == ProjCDSConstants::TransactionRoleString_Original;
        
        guid actualId = projCDSTransactionRelationshipImport.Transaction2Id;

        while (projCDSTransactionRelationshipImport.Transaction2Id != Global::emptyGuid())
        {
            select firstonly RecId, Transaction2Id
            from projCDSTransactionRelationshipImport
                where projCDSTransactionRelationshipImport.Transaction1Id == actualId
                && projCDSTransactionRelationshipImport.TRANSACTION2ROLE == ProjCDSConstants::TransactionRoleString_Original;

            if (projCDSTransactionRelationshipImport)
            {
                actualId = projCDSTransactionRelationshipImport.Transaction2Id;
            }
        }
       
        if (actualId != Global::emptyGuid())
        {
            originatedProjCDSActualsImportCost = ProjCDSActualsImport::findByActualId(actualId);
        }

        return originatedProjCDSActualsImportCost;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:ProjCDSActualsImporDevDoc</DeveloperDocumentation>
	<Label>@Proj:ProjCDSActualsImport</Label>
	<TitleField1>ActualId</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>ActualsImportId</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@Proj:ProjCDSActualsImportId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AccountingDate</Name>
			<ExtendedDataType>AccountingDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>ActualId</Name>
			<Label>@Proj:ActualId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AdjustmentStatus</Name>
			<Label>@SYS314575</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS98362</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BillingStatusId</Name>
			<Label>@Proj:BillingStatusId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BillingType</Name>
			<Mandatory>Yes</Mandatory>
			<EnumType>ProjBillingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractId</Name>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ContractLine</Name>
			<Label>@Proj:ContractLine</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>ContractingUnit</Name>
			<Label>@Proj:ContractingUnit</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description255</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS2587</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EndDate</Name>
			<Label>@SYS22882</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ExchangeRateDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS62787</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchangeRate</Name>
			<ExtendedDataType>CurrencyExchangeRate</ExtendedDataType>
			<Label>@SYS4955</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalDescription</Name>
			<ExtendedDataType>Description255</ExtendedDataType>
			<Label>@SYS54822</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalReference</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@SYS21697</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<ExtendedDataType>ProjInvoiceId</ExtendedDataType>
			<Label>@Proj:InvoiceId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsJournalized</Name>
			<Label>@SYS300216</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>OwningBusinessId</Name>
			<Label>@Proj:OwningBusinessId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>OwningUser</Name>
			<Label>@Proj:OwningUser</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjectId</Name>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@SYS3065</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Status</Name>
			<Label>@SYS36398</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>StatusReason</Name>
			<Label>@SYS4002973</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>StartDate</Name>
			<Label>@SYS6255</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>TaskId</Name>
			<Label>@SYS121658</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransactionClassification</Name>
			<Label>@Proj:TransactionClassification</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>TransactionCategory</Name>
			<Label>@Proj:TransactionCategory</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCurrencyId</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS62786</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransType</Name>
			<EnumType>ProjCDSTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitOfMeasure</Name>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitPrice</Name>
			<ExtendedDataType>UnitPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitPriceMST</Name>
			<ExtendedDataType>UnitPrice</ExtendedDataType>
			<Label>@Proj:UnitPriceMST</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjAdvancedJournalLine</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@Proj:ProjAdvJournalLine</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>ResourceId</Name>
			<Label>@Proj:ProjCDSResourceId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>ResourceOperationUnitId</Name>
			<Label>@Proj:ProjCDSResourceOperationUnitId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjectDataAreaId</Name>
			<ExtendedDataType>LegalEntityDataAreaId</ExtendedDataType>
			<Label>@Proj:ProjectCompany</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsProcessed</Name>
			<Label>@SYS103900</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>IntegrationCount</Name>
			<Label>@Proj:ProjCDSIntegrationCount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDuplicate</Name>
			<Label>@Proj:ProjCDSDuplicate</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookableResourceName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjBookableResourceName</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsIntegrationToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ResourcingCompany</Name>
			<ExtendedDataType>LegalEntityDataAreaId</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsIntegrationToggle</FeatureClass>
			<Label>@Proj:ActualsImportResourcingCompany</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubcontractLine</Name>
			<ExtendedDataType>ProjSubcontractLine</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsSubcontractLineIntegrationToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MatchedVendorInvoice</Name>
			<ExtendedDataType>ProjMatchedVendorInvoice</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsSubcontractLineIntegrationToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubConProductReceiptId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProductReceiptId</ExtendedDataType>
			<FeatureClass>ProjOpsSubcontractPurchaseOrderFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubConInvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceId</ExtendedDataType>
			<FeatureClass>ProjOpsSubcontractPurchaseOrderFeature</FeatureClass>
			<Label>@Proj:SubConInvoiceId</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ActualsImportId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ActualsImportId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ActualIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ActualId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsDuplicate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjAdvancedJournalLine</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjAdvancedJournalLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsDuplicate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ActualId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ExtRefTransTypeClassificationActualId</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ExternalReference</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransactionClassification</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ActualId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsDuplicate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>isProcessed</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>IsProcessed</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IntegrationCount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Duplicate</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>IsDuplicate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceIdTransType</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsDuplicate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>