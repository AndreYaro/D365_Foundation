<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSLoadTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasInterCompanySalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given load has an inter company order on it.
    /// </summary>
    /// <param name = "_loadId">The load ID to search over.</param>
    /// <returns>true if the load contains an intercompany order; otherwise, false</returns>
    public static boolean hasInterCompanySalesOrder(WHSLoadId _loadId)
    {
        if (!_loadId)
        {
            return false;
        }

        WHSLoadLine loadLine;
        SalesTable	sales;
  
        while select sales
            exists join loadLine
                where loadLine.InventTransType	== InventTransType::Sales
                &&	  loadLine.TransportRequest == NoYes::No
                &&	  loadLine.LoadId			== _loadId
                &&	  loadLine.OrderNum			== sales.SalesId
        {
            if (sales.isInterCompanyOrder())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostProductReceipt</Name>
				<Source><![CDATA[
	/// <summary>
    /// Checks if the given load can post product receipt.
    /// <returns>true if the load can post product receipt; otherwise, false</returns>
    public boolean canPostProductReceipt()
    {        
        return this.LoadDirection == WHSLoadDirection::Inbound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUsePackingSlipCreationPolicy</Name>
				<Source><![CDATA[
    internal boolean canUsePackingSlipCreationPolicy()
    {
        return this.LoadDirection == WHSLoadDirection::Outbound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTransportRequestLineInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate raised after a source transport request line has been initialized.
    /// </summary>
    /// <param name = "_loadLine">A load line.</param>
    /// <param name = "_transportRequest">A transport request record.</param>
    /// <param name = "_transportRequestLine">A transport request line.</param>
    static delegate void sourceTransportRequestLineInitialized(
        WHSLoadLine _loadLine, 
        TMSTransportRequestTable _transportRequest, 
        TMSTransportRequestLine _transportRequestLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>destinationTransportRequestLineInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate raised after a destination transport request line has been initialized.
    /// </summary>
    /// <param name = "_loadLine">A load line.</param>
    /// <param name = "_transportRequest">A transport request record.</param>
    /// <param name = "_sourceTransportRequestLine">A source transport request line.</param>
    /// <param name = "_destinationTransportRequestLine">A destination transport request line.</param>
    static delegate void destinationTransportRequestLineInitialized(
        WHSLoadLine _loadLine, 
        TMSTransportRequestTable _transportRequest, 
        TMSTransportRequestLine _sourceTransportRequestLine, 
        TMSTransportRequestLine _destinationTransportRequestLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInboundTransferLineToShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds an inbound transfer line to shipment to creates new shipment for transfer line
    /// </summary>
    /// <param name="_transferLine">
    ///    Transfer line record to be added to shipment
    /// </param>
    /// <returns>
    ///    Shipment id the transfer line has been added to
    /// </returns>
    public WHSShipmentId addInboundTransferLineToShipment(InventTransferLine _transferLine)
    {
        LogisticsPostalAddress  address;
        InventTransferTable     inventTransferTable;
        WHSShipmentTable        shipmentTable;

        inventTransferTable = _transferLine.inventTransferTable();

        address = LogisticsPostalAddress::findRecId(inventTransferTable.FromPostalAddress);

        select firstonly RecId from shipmentTable
            where shipmentTable.LoadId                      == this.LoadId
                && shipmentTable.DeliveryName               == inventTransferTable.FromAddressName
                && shipmentTable.DeliveryPostalAddress      == address.RecId
                && shipmentTable.ShipmentArrivalUTCDateTime == _transferLine.receiveTransDateTime();

        if (shipmentTable.RecId == 0)
        {
            ttsbegin;
            shipmentTable.ShipmentId                    = shipmentTable.getShipmentId();
            shipmentTable.LoadId                        = this.LoadId;
            shipmentTable.DeliveryName                  = inventTransferTable.FromAddressName;
            shipmentTable.DeliveryPostalAddress         = address.RecId;
            shipmentTable.CountryRegionISOCode          = LogisticsAddressCountryRegion::find(address.CountryRegionId).isOcode;
            shipmentTable.ShipmentArrivalUTCDateTime    = _transferLine.receiveTransDateTime();
            
            if (!shipmentTable.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSShipmentTable)));
            }
            else
            {
                shipmentTable.insert();
            }
            ttscommit;
        }

        return shipmentTable.ShipmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOutboundTransferLineToShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds outbound transfer line to a shipment or creates a new shipment for line
    /// </summary>
    /// <param name="_transferLine">
    ///    Transfer line to be added to shipment
    /// </param>
    /// <returns>
    ///    Shipment id transfer line was added to
    /// </returns>
    public WHSShipmentId addOutboundTransferLineToShipment(InventTransferLine _transferLine)
    {
        LogisticsPostalAddress  address;
        InventTransferTable     inventTransferTable;
        WHSShipmentTable        shipmentTable;

        inventTransferTable = _transferLine.inventTransferTable();

        address = LogisticsPostalAddress::findRecId(inventTransferTable.ToPostalAddress);

        select firstonly RecId from shipmentTable
            where shipmentTable.LoadId                      == this.LoadId
                && shipmentTable.DeliveryName               == inventTransferTable.ToAddressName
                && shipmentTable.DeliveryPostalAddress      == address.RecId
                && shipmentTable.ShipmentArrivalUTCDateTime == _transferLine.shipTransDateTime();

        if (shipmentTable.RecId == 0)
        {
            ttsbegin;
            shipmentTable.ShipmentId                    = shipmentTable.getShipmentId();
            shipmentTable.LoadId                        = this.LoadId;
            shipmentTable.DeliveryName                  = inventTransferTable.ToAddressName;
            shipmentTable.DeliveryPostalAddress         = address.RecId;
            shipmentTable.CountryRegionISOCode          = LogisticsAddressCountryRegion::find(address.CountryRegionId).isOcode;
            shipmentTable.ShipmentArrivalUTCDateTime    = _transferLine.shipTransDateTime();
            
            if (!shipmentTable.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSShipmentTable)));
            }
            else
            {
                shipmentTable.insert();
            }
            ttscommit;
        }

        return shipmentTable.ShipmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPurchLineToShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds purchase line to shipment or creates new shipment for purchase line
    /// </summary>
    /// <param name="_purchLine">
    ///    Purchase line to be added to shipment
    /// </param>
    /// <returns>
    ///    Shipment id purchase line was added to
    /// </returns>
    WHSShipmentId addPurchLineToShipment(PurchLine _purchLine)
    {
        WHSShipmentTable shipmentTable;
        InventDim        purchInventDim = _purchLine.inventDim();
        PurchTable       purchTable     = PurchTable::find(_purchLine.PurchId);

        // Use the delivery address of the vendor, if not defined select the primary postal address.
        TMSAddressPhone originAddress = TMSAddressPhone::initFromVendAccount(_purchLine.VendAccount);

        select firstonly ShipmentId, RecId from shipmentTable
            where shipmentTable.LoadId                      == this.LoadId
                && shipmentTable.DeliveryName               == originAddress.parmName()
                && shipmentTable.DeliveryPostalAddress      == originAddress.parmPostalAddressRecId()
                && shipmentTable.ShipmentArrivalUTCDateTime == _purchLine.deliveryTransDateTime()
                && shipmentTable.InventLocationId           == purchInventDim.InventLocationId;

        if (shipmentTable.RecId == 0)
        {
            ttsbegin;

            shipmentTable.ShipmentId                    = shipmentTable.getShipmentId();
            shipmentTable.LoadDirection                 = this.LoadDirection;
            shipmentTable.LoadId                        = this.LoadId;
            shipmentTable.DeliveryName                  = originAddress.parmName();
            shipmentTable.DeliveryPostalAddress         = originAddress.parmPostalAddressRecId();
            shipmentTable.CountryRegionISOCode          = originAddress.parmCountryRegion();
            shipmentTable.Address                       = originAddress.getAddress();
            shipmentTable.
            ShipmentArrivalUTCDateTime                  = _purchLine.deliveryTransDateTime();
            shipmentTable.AccountNum                    = _purchLine.VendAccount;
            shipmentTable.InventLocationId              = purchInventDim.InventLocationId;
            shipmentTable.InventSiteId                  = purchInventDim.InventSiteId;
            shipmentTable.DlvTermId                     = purchTable.DlvTerm;

            if (!shipmentTable.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSShipmentTable)));
            }
            else
            {
                shipmentTable.insert();
            }
            ttscommit;
        }

        return shipmentTable.ShipmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesLineToShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds sales line to shipment or creates new shipment for sales line
    /// </summary>
    /// <param name="_salesLine">
    ///    Sales line to be added to shipment
    /// </param>
    /// <returns>
    ///    Shipment id sales line was added to
    /// </returns>
    public WHSShipmentId addSalesLineToShipment(SalesLine _salesLine)
    {
        WHSShipmentTable    shipmentTable;
        TMSAddressPhone     destinationAddress = TMSAddressPhone::initFromSalesLine(_salesLine);
        
        SysDaFindObject qf = new SysDaFindObject(
            this.buildSalesLineToShipmentQuery(shipmentTable, _salesLine, destinationAddress));
        new SysDaFindStatement().executeQuery(qf);

        if (shipmentTable.RecId == 0)
        {
            ttsbegin;
            shipmentTable = this.initializeShipmentFromSalesLine(_salesLine, destinationAddress);
            
            if (!shipmentTable.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSShipmentTable)));
            }
            else
            {
                shipmentTable.insert();
            }
            ttscommit;
        }

        return shipmentTable.ShipmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesLineToShipmentQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query for shipment based on sales line record.
    /// </summary>
    /// <param name = "_shipmentTable">The shipment record.</param>
    /// <param name = "_salesLine">The sales line to be added to shipment.</param>
    /// <param name = "_destinationAddress">The destination address to be added to the shipment.</param>
    /// <returns>An instance of <c>SysDaQueryObject</c>.</returns>
    protected SysDaQueryObject buildSalesLineToShipmentQuery(
        WHSShipmentTable    _shipmentTable,
        SalesLine           _salesLine,
        TMSAddressPhone     _destinationAddress)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(_shipmentTable);
        queryObject.firstOnlyHint = true;
        queryObject.projection().add(fieldStr(WHSShipmentTable, ShipmentId));
        queryObject.projection().add(fieldStr(WHSShipmentTable, RecId));
        queryObject.whereClause(new SysDaEqualsExpression(
                new SysDaFieldExpression(_shipmentTable, fieldStr(WHSShipmentTable, LoadId)),
                new SysDaValueExpression(this.LoadId))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_shipmentTable, fieldStr(WHSShipmentTable, DeliveryName)),
                new SysDaValueExpression(_destinationAddress.parmName())))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_shipmentTable, fieldStr(WHSShipmentTable, DeliveryPostalAddress)),
                new SysDaValueExpression(_destinationAddress.parmPostalAddressRecId())))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_shipmentTable, fieldStr(WHSShipmentTable, ShipmentArrivalUTCDateTime)),
                new SysDaValueExpression(_salesLine.deliveryTransDateTime()))));

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeShipmentFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the shipment based on sales line.
    /// </summary>
    /// <param name = "_salesLine">The sales line to be added to shipment.</param>
    /// <param name = "_destinationAddress">The destination address to be added to the shipment.</param>
    /// <returns>The initialized shipment record.</returns>
    protected WHSShipmentTable initializeShipmentFromSalesLine(
        SalesLine       _salesLine,
        TMSAddressPhone _destinationAddress)
    {
        WHSShipmentTable shipmentTable;
        shipmentTable.ShipmentId                    = shipmentTable.getShipmentId();
        shipmentTable.LoadId                        = this.LoadId;
        shipmentTable.DeliveryName                  = _destinationAddress.parmName();
        shipmentTable.DeliveryPostalAddress         = _destinationAddress.parmPostalAddressRecId();
        shipmentTable.CountryRegionISOCode          = _destinationAddress.parmCountryRegion();
        shipmentTable.Address                       = _destinationAddress.getAddress();
        shipmentTable.ShipmentArrivalUTCDateTime    = _salesLine.deliveryTransDateTime();
        shipmentTable.AccountNum                    = _salesLine.CustAccount;
        return shipmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>effectiveGrossWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns effective gross weight.
    /// </summary>
    /// <returns>
    /// The effective gross weight: Actual gross weight if user specified it; otherwise, system gross weight.
    /// </returns>
    public Weight effectiveGrossWeight()
    {
        return this.ActualGrossWeight ? this.ActualGrossWeight : this.displayTotalGrossWeight();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignCarrierOnOrigin_Purch</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Assign Carrier information based on the <c>TMSPurchTable</c> record.
    /// </summary>
    /// <param name="_orderNum">
    ///   The order number.
    /// </param>
    /// <returns>
    ///    Return true if <c>WHSLoadTable</c> buffer was modified; otherwise, false
    /// </returns>
    public boolean assignCarrierOnOrigin_Purch(WHSOrderNum _orderNum)
    {
        TMSPurchTable           tmsPurchTable;
        TMSCarrierService       carrierService;

        boolean isModified  = false;

        tmsPurchTable       = TMSPurchTable::find(_orderNum);

        if (this.RecId != 0 && this.CarrierCode == '' && tmsPurchTable.CarrierCode != '')
        {
            this.CarrierCode        = tmsPurchTable.CarrierCode;
            this.CarrierServiceCode = tmsPurchTable.CarrierServiceCode;
            this.ModeCode           = TMSCarrier::find(tmsPurchTable.CarrierCode).ModeCode;
            carrierService          = TMSCarrierService::find(tmsPurchTable.CarrierServiceCode, tmsPurchTable.CarrierCode);
            if (carrierService.LoadTemplateId)
            {
                this.LoadTemplateId = carrierService.LoadTemplateId;
            }

            isModified = true;
        }

        return isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignCarrierOnOrigin_Sales</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Assign the Carrier information based on the <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_orderNum">
    ///   The order number.
    /// </param>
    /// <param name="_salesLine">
    ///   The <c>SalesLine</c> buffer to assign Carrier information from.
    /// </param>
    /// <returns>
    ///    Return true if <c>WHSLoadTable</c> buffer was modified; otherwise, false
    /// </returns>
    public boolean assignCarrierOnOrigin_Sales(WHSOrderNum _orderNum, SalesLine _salesLine)
    {
        TMSSalesTable       tmsSalesTable;
        TMSCarrierService   carrierService;

        boolean isModified  = false;

        if (this.RecId != 0 && this.CarrierCode == '' && _salesLine.RecId !=0 && _orderNum)
        {
            if ((select count(RecId) from whsLoadLine where whsLoadLine.LoadId == this.LoadId).RecId == 1)
            {
                tmsSalesTable = TMSSalesTable::find(_orderNum);

                if (tmsSalesTable.CarrierCode != '' || _salesLine.DlvMode != '')
                {
                    if (_salesLine.DlvMode != '')
                    {
                        carrierService = TMSCarrierService::findByDlvModeId(_salesLine.DlvMode);
                        this.CarrierCode        = carrierService.CarrierCode;
                        this.CarrierServiceCode = carrierService.CarrierServiceCode;
                        this.ModeCode           = TMSCarrier::find(carrierService.CarrierCode).ModeCode;
                    }
                    else
                    {
                        this.CarrierCode        = tmsSalesTable.CarrierCode;
                        this.CarrierServiceCode = tmsSalesTable.CarrierServiceCode;
                        this.ModeCode           = TMSCarrier::find(tmsSalesTable.CarrierCode).ModeCode;
                        carrierService          = TMSCarrierService::find(tmsSalesTable.CarrierServiceCode, tmsSalesTable.CarrierCode);
                    }

                    if (carrierService.LoadTemplateId)
                    {
                        this.LoadTemplateId = carrierService.LoadTemplateId;
                    }

                    isModified = true;
                }
            }
        }

        return isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignCarrierOnOrigin_Transfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Assign the Carrier information based on the <c>TMSInventTransferTable</c> record.
    /// </summary>
    /// <param name="_orderNum">
    ///   The order number.
    /// </param>
    /// <returns>
    ///    Return true if <c>WHSLoadTable</c> buffer was modified; otherwise, false
    /// </returns>
    public boolean assignCarrierOnOrigin_Transfer(WHSOrderNum _orderNum)
    {
        TMSInventTransferTable  tmsInventTransferTable;
        TMSCarrierService       carrierService;

        boolean isModified  = false;

        tmsInventTransferTable  = TMSInventTransferTable::find(_orderNum);

        if (this.RecId != 0 && this.CarrierCode == '' && tmsInventTransferTable.CarrierCode != '')
        {
            this.CarrierCode        = tmsInventTransferTable.CarrierCode;
            this.CarrierServiceCode = tmsInventTransferTable.CarrierServiceCode;
            this.ModeCode           = tmsInventTransferTable.ModeCode;
            carrierService          = TMSCarrierService::find(tmsInventTransferTable.CarrierServiceCode, tmsInventTransferTable.CarrierCode);
            if (carrierService.LoadTemplateId)
            {
                this.LoadTemplateId = carrierService.LoadTemplateId;
            }

            isModified = true;
        }

        return isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignEarliestSchedShipDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Assign a scheduled ship date and time if the specified ship date and time is earlier than the current scheduled ship date and time on the current load.
    /// </summary>
    /// <param name="_loadReadyToShipDateTime">
    ///     A ship date and time being added to the current load.
    /// </param>
    /// <returns>
    ///    Return true if <c>WHSLoadTable</c> buffer was modified; otherwise, false
    /// </returns>
    public boolean assignEarliestSchedShipDateTime(WHSLoadReadyToShipUTCDateTime _loadReadyToShipDateTime)
    {
        boolean isModified = false;

        if (_loadReadyToShipDateTime && (!this.LoadSchedShipUTCDateTime || this.LoadSchedShipUTCDateTime > _loadReadyToShipDateTime))
        {
            this.LoadSchedShipUTCDateTime = _loadReadyToShipDateTime;
            isModified = true;
        }

        return isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignSiteAndWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Assign Warehouse dimensions based on the <c>InventDim</c> record.
    /// </summary>
    /// <param name="_inventDim">
    ///   The <c>InventDim</c> buffer to assign Site and Warehouse dimensions from.
    /// </param>
    /// <returns>
    ///    Return true if <c>WHSLoadTable</c> buffer was modified; otherwise, false
    /// </returns>
    public boolean assignSiteAndWarehouse(InventDim _inventDim)
    {
        this.InventSiteId = _inventDim.InventSiteId;
        this.InventLocationId = _inventDim.InventLocationId;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Assign Warehouse dimensions based on the <c>InventDim</c> record.
    /// </summary>
    /// <param name="_inventDim">
    ///   The <c>InventDim</c> buffer to assign Site and Warehouse dimensions from.
    /// </param>
    /// <returns>
    ///    Return true if <c>WHSLoadTable</c> buffer was modified; otherwise, false
    /// </returns>
    [SysObsolete('Use assignSiteAndWarehouse() instead.', false, 30\11\2017)]
    public boolean assignInventDim(InventDim _inventDim)
    {
        return this.assignSiteAndWarehouse(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignLoadWeights</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assign the aggregated weight on the load based on a change in inventory quantity on a load line.
    /// </summary>
    /// <param name="_inventTable">
    ///    The <c>InventTable</c> buffer to assign the Net weight, TareWeight from.
    /// </param>
    /// <param name="_inventQtyDifference">
    ///    The change in inventory quantity.
    /// </param>
    /// <returns>
    ///    true if <c>WHSLoadTable</c> buffer was modified; otherwise, false.
    /// </returns>
    [SysObsolete('Callers should redirect their calls to the assignLoadWeightsForLoadLine method. Extenders should move their logic to wrap the assignLoadWeightsForLoadLine method.', false, 10\5\2020)]
    public boolean assignLoadWeights(InventTable _inventTable, InventQty _inventQtyDifference)
    {
        boolean isModified  = false;

        if (_inventTable.RecId != 0
            && _inventQtyDifference)
        {
            WHSLoadWeightParameters loadWeightParameters = WHSLoadTable::calculateWeightDiffOnInventoryChange(_inventTable, _inventQtyDifference);

            this.LoadNetWeight     += loadWeightParameters.loadNetWeightDiff;
            this.LoadWeight        += loadWeightParameters.loadWeightDiff;
            this.SystemTareWeight  += loadWeightParameters.sysTareWeightDiff;

            this.resetNegativeWeight(loadWeightParameters.loadWeightMismatchHeaderAndLines);

            isModified = true;
        }

        return isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetNegativeWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets negative load weight to zero. 
    /// </summary>
    /// <param name = "_loadWeightMismatchHeaderAndLines">Boolean to indicate weight mismatch on load header and load lines.</param>
    [Hookable(false)]
    internal void resetNegativeWeight(boolean _loadWeightMismatchHeaderAndLines)
    {
        boolean weightIsNegative = this.preventNegativeWeight(fieldStr(WHSLoadTable, LoadNetWeight));
        weightIsNegative = this.preventNegativeWeight(fieldStr(WHSLoadTable, LoadWeight)) || weightIsNegative;
        weightIsNegative = this.preventNegativeWeight(fieldStr(WHSLoadTable, SystemTareWeight)) || weightIsNegative;

        if (weightIsNegative)
        {
            warning(strFmt("@WAX:WHSLoadWeightNegativeWarning", this.LoadId));
        }
        else if (_loadWeightMismatchHeaderAndLines)
        {
            warning(strFmt("@WAX:WHSLoadWeightOnLinesDoNotMatchLoadWarning", this.LoadId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWeightDiffOnInventoryChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates load weight difference for a change in inventory quantity on a load line.
    /// </summary>
    /// <param name = "_inventTable">The <c>InventTable</c> buffer to assign the Net weight, TareWeight from.</param>
    /// <param name = "_inventQtyDifference">The change in inventory quantity.</param>
    /// <returns>Parameters to update load weight.</returns>
    [Hookable(false)]
    internal static WHSLoadWeightParameters calculateWeightDiffOnInventoryChange(InventTable _inventTable, InventQty _inventQtyDifference)
    {
        ItemNetWeight itemNetWeight                 = _inventTable.NetWeight;
        ItemTaraWeight itemTareWeight               = _inventTable.TaraWeight;
        boolean loadWeightMismatchHeaderAndLines    = false;

        WHSLoadLineWeightCalculationContext context = WHSLoadLineWeightCalculationContext::current();

        if (context)
        {
            var loadLine = context.parmLoadLine();

            if (loadLine.ItemNetWeight > 0)
            {
                itemNetWeight = loadLine.ItemNetWeight;
            }
            else if (_inventTable.NetWeight > 0)
            {
                loadWeightMismatchHeaderAndLines = true;
            }

            if (loadLine.ItemTareWeight > 0)
            {
                itemTareWeight = loadLine.ItemTareWeight;
            }
            else if (_inventTable.TaraWeight > 0)
            {
                loadWeightMismatchHeaderAndLines = true;
            }
        }

        WHSLoadWeightParameters loadWeightParameters = WHSLoadWeightParameters::construct();

        loadWeightParameters.loadNetWeightDiff  = itemNetWeight * _inventQtyDifference;
        loadWeightParameters.loadWeightDiff     = (itemNetWeight + itemTareWeight) * _inventQtyDifference;
        loadWeightParameters.sysTareWeightDiff  = itemTareWeight * _inventQtyDifference;
        loadWeightParameters.loadWeightMismatchHeaderAndLines = loadWeightMismatchHeaderAndLines;
        return loadWeightParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preventNegativeWeight</Name>
				<Source><![CDATA[
    private boolean preventNegativeWeight(FieldName _fieldName)
    {
        if (this.getFieldValue(_fieldName) < 0)
        {
            this.validateFieldValue(_fieldName);
            this.setFieldValue(_fieldName, 0.0);

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignLoadWeightsForLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assign the aggregated weight on the load based on a change in inventory quantity on a load line.
    /// </summary>
    /// <param name="_loadLine">The <c>WHSLoadLine</c> buffer to assign the Net weight, TareWeight from.</param>
    /// <param name="_inventQtyDifference">The change in inventory quantity.</param>
    /// <returns>true if <c>WHSLoadTable</c> buffer was modified; otherwise, false.</returns>
    public boolean assignLoadWeightsForLoadLine(WHSLoadLine _loadLine, InventQty _inventQtyDifference)
    {
        using (WHSLoadLineWeightCalculationContext context = WHSLoadLineWeightCalculationContext::newFromLoadLine(_loadLine))
        {
            return this.assignLoadWeights(_loadLine.inventTable(), _inventQtyDifference);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignOriginInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Assign the origin information on the load header.
    /// </summary>
    /// <param name="_loadLineAddRemove">
    ///     The <c>AddRemove</c> enum value describing whether a load line has just been added or removed.
    /// </param>
    /// <returns>
    ///    true if <c>WHSLoadTable</c> buffer was modified; otherwise, false.
    /// </returns>
    public boolean assignOriginInfo(AddRemove _loadLineAddRemove)
    {
        return WHSLoadTableAssignOriginInfo::newFromLoadTable(this).assign(_loadLineAddRemove);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignTransTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Assign the transportation template Id on the load based on related source document.
    /// </summary>
    /// <remarks>
    ///   Assign the transportation template Id to blank, if it is different for at least 2 related source documents.
    /// </remarks>
    /// <returns>
    ///    true if <c>WHSLoadTable</c> buffer was modified; otherwise, false.
    /// </returns>
    public boolean assignTransTemplate()
    {
        WHSLoadLine                 loadLine;
        TMSSalesTable               tmsSalesTable;
        TMSPurchTable               tmsPurchTable;
        TMSTransportationTemplateId tmpTemplateId;

        boolean isModified  = false;

        if (this.LoadId)
        {
            while select RecId from loadLine
                group by OrderNum, InventTransType
                where loadLine.LoadId == this.LoadId
                    && (loadLine.InventTransType == InventTransType::Sales
                        || loadLine.InventTransType == InventTransType::Purch)
                    && loadLine.TransportRequest == NoYes::No
                outer join TransportationTemplateId from tmsSalesTable
                    group by TransportationTemplateId
                    where tmsSalesTable.SalesId == loadLine.OrderNum
                        && tmsSalesTable.TransportationTemplateId != ''
                outer join TransportationTemplateId from tmsPurchTable
                    group by TransportationTemplateId
                    where tmsPurchTable.PurchId == loadLine.OrderNum
                        && tmsPurchTable.TransportationTemplateId != ''
            {
                tmpTemplateId = tmsSalesTable ? tmsSalesTable.TransportationTemplateId : tmsPurchTable.TransportationTemplateId;
                if (tmpTemplateId)
                {
                    if (this.TransportationTemplateId == '')
                    {
                        this.TransportationTemplateId = tmpTemplateId;
                        isModified = true;
                    }
                    else if (this.TransportationTemplateId != tmpTemplateId)
                    {
                        this.TransportationTemplateId = '';
                        isModified = true;
                        break;
                    }
                }
            }
        }

        return isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShipConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if load can be ship confirmed
    /// </summary>
    /// <param name="_skipTender">
    /// true if tender validation should be skipped; otherwise, false.
    /// </param>
    /// <returns>
    /// true if load can be ship confirmed; otherwise returns false and adds a warning to InfoLog
    /// </returns>
    public boolean canShipConfirm(boolean _skipTender)
    {
        if (InventLocation::find(this.InventLocationId).whsEnabled)
        {
            if (!this.validateTransportationTender(_skipTender))
            {
                return checkFailed(strFmt("@TRX2705", this.LoadId));
            }

            if (this.LoadDirection == WHSLoadDirection::Outbound && !TMSAppointment::isAppointmentComplete(this.LoadId))
            {
                return checkFailed(strFmt("@WAX2543", this.LoadId));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllWorkCompletedForLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all the work is completed for load.
    /// </summary>
    /// <returns>
    /// true if all the work is completed for load; otherwise, false.
    /// </returns>
    public boolean isAllWorkCompletedForLoad()
    {
        return !WHSLoadTable::containsWHSItems(this.LoadId) ||
               WHSWorkTable::isWorkComplete(this.LoadId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAtLeastOneWorkCompletedForLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if at least one work for the load is complete.
    /// </summary>
    /// <returns>
    /// true if at least one work for the load is complete; otherwise, false.
    /// </returns>
    public boolean isAtLeastOneWorkCompletedForLoad()
    {
        WHSWorkTable workTable;
        WHSWorkLine  workLine;

        select firstonly RecId from workTable
            where workTable.WorkStatus     == WHSWorkStatus::Closed
                && workTable.LoadId        == this.LoadId
            notexists join workLine
                where workLine.WorkId      == workTable.WorkId
                    && workLine.WorkType   == WHSWorkType::Put
                    && workLine.WorkStatus == WHSWorkStatus::Cancelled;

        return workTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateChangingLoadingStrategy</Name>
				<Source><![CDATA[
    private boolean validateChangingLoadingStrategy()
    {
        boolean ret = true;

        if (this.isAtLeastOneWorkCompletedForLoad())
        {
            ret = checkFailed("@WAX:LoadingStrategyCannotBeChangedIfWorkIsCompleted");
        }

        if (ret && this.RouteCode)
        {
            ret = checkFailed("@WAX:LoadingStrategyCannotBeChangedIfRouteExists");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeCarrierOnPurch</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates the purchase order data with the carrier referred by the current instance of <c>WHSLoadTable</c> buffer.
    /// </summary>
    /// <param name="_purchId">
    ///   The ID of the purchase order.
    /// </param>
    private void changeCarrierOnPurch(PurchId _purchId)
    {
        TMSPurchTable   tmsPurchTable;

        ttsbegin;

        tmsPurchTable = TMSPurchTable::find(_purchId, true);
        if (!tmsPurchTable.RecId)
        {
            tmsPurchTable.initFromPurchTable(_purchId);
        }
        if (tmsPurchTable.TransportationTemplateId  != this.TransportationTemplateId
            || tmsPurchTable.CarrierGroupCode       != this.CarrierGroupCode
            || tmsPurchTable.CarrierCode            != this.CarrierCode
            || tmsPurchTable.CarrierServiceCode     != this.CarrierServiceCode)
        {
            tmsPurchTable.TransportationTemplateId   = this.TransportationTemplateId;
            tmsPurchTable.CarrierGroupCode           = this.CarrierGroupCode;
            tmsPurchTable.write();

            PurchTable::updateDlvModeFromCarrierService(tmsPurchTable.PurchId, this.CarrierCode, this.CarrierServiceCode);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeCarrierOnSales</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates the sales order data with the carrier referred by the current instance of <c>WHSLoadTable</c> buffer.
    /// </summary>
    /// <param name="_salesId">
    ///   The ID of the sales order.
    /// </param>
    private void changeCarrierOnSales(SalesId _salesId)
    {
        TMSSalesTable   tmsSalesTable;

        ttsbegin;

        tmsSalesTable = TMSSalesTable::find(_salesId, true);
        if (!tmsSalesTable.RecId)
        {
            tmsSalesTable.initFromSalesTable(_salesId);
        }

        tmsSalesTable.TransportationTemplateId   = this.TransportationTemplateId;
        tmsSalesTable.CarrierGroupCode           = this.CarrierGroupCode;
        tmsSalesTable.write();

        ttsbegin;
        SalesTable::updateDlvModeFromCarrierService(tmsSalesTable.SalesId, this.CarrierCode, this.CarrierServiceCode);
        if (this.updateDlvModeSalesOrderLines())
        {
            DlvModeId   dlvModeId = TMSCarrierService::findDlvModeId(this.CarrierCode, this.CarrierServiceCode);
            if (dlvModeId)
            {
                IntrastatTransport transport = DlvMode::find(dlvModeId).Transport;

                SalesLine salesLine;
                WHSLoadLine loadLine;
                salesLine.skipDataMethods(true);
                update_recordset salesLine
                    setting DlvMode = dlvModeId, Transport = transport
                    where salesLine.SalesId == _salesId
                    exists join loadLine
                        where loadLine.InventTransId == salesLine.InventTransId
                            && loadLine.LoadId        == this.LoadId;
            }
        }
        ttscommit;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDlvModeSalesOrderLines</Name>
				<Source><![CDATA[
    private boolean updateDlvModeSalesOrderLines()
    {
        TMSParameters tmsParameters = TMSParameters::find();

        return tmsParameters.LoadCreationUpdateOrderLinesParametersPolicy == TMSLoadCreationUpdateOrderLinesParametersPolicy::AlwaysUpdate
            || (tmsParameters.LoadCreationUpdateOrderLinesParametersPolicy == TMSLoadCreationUpdateOrderLinesParametersPolicy::UseOrderLinesParameters
                && this.shouldSalesOrderLineFieldBeUpdated(fieldNum(SalesTable, DlvMode))
                && this.shouldSalesOrderLineFieldBeUpdated(fieldNum(SalesTable, DlvTerm))
                && this.shouldSalesOrderLineFieldBeUpdated(fieldNum(SalesTable, Transport)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSalesOrderLineFieldBeUpdated</Name>
				<Source><![CDATA[
    private boolean shouldSalesOrderLineFieldBeUpdated(FieldId _fieldId)
    {
        return SalesTable2LineParameters::find(tableNum(SalesTable), _fieldId).Table2LineUpdate == TradeTable2LineUpdate::Always;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeCarrierOnTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates the transfer order data with the carrier referred by the current instance of <c>WHSLoadTable</c> buffer.
    /// </summary>
    /// <param name="_transferId">
    ///   The ID of the transfer order.
    /// </param>
    private void changeCarrierOnTransfer(InventTransferId    _transferId)
    {
        TMSInventTransferTable  tmsInventTransferTable;

        ttsbegin;

        tmsInventTransferTable = TMSInventTransferTable::find(_transferId, true);
        if (!tmsInventTransferTable.RecId)
        {
            tmsInventTransferTable.initFromInventTransferId(_transferId);
        }

        tmsInventTransferTable.CarrierGroupCode = this.CarrierGroupCode;
        tmsInventTransferTable.write();

        InventTransferTable::updateDlvModeFromCarrierService(tmsInventTransferTable.TransferId, this.CarrierCode, this.CarrierServiceCode);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeRouteConfigCodeOnOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates the order data with the route plan referred by the current instance of <c>WHSLoadTable</c> buffer.
    /// </summary>
    private void changeRouteConfigCodeOnOrigin()
    {
        WHSLoadLine         loadLine;
        WHSLoadLine         otherLoadLine;
        WHSLoadTable        otherloadTable;
        TMSRoute            otherRoute;
        TMSRouteConfigCode  thisRouteConfigCode = TMSRoute::find(this.RouteCode).RouteConfigCode;

        while select loadLine
            group by loadLine.OrderNum, loadLine.InventTransType, loadLine.TransportRequest
            where loadLine.LoadId           == this.LoadId
               && loadLine.TransportRequest == NoYes::No
            notexists join otherloadTable
                where otherloadTable.LoadId     != this.LoadId
                   && otherloadTable.RouteCode  != this.RouteCode
                    outer join TableId from otherRoute
                    where otherRoute.RouteCode  == otherloadTable.RouteCode
                        join otherLoadLine
                        where otherLoadLine.LoadId              == otherloadTable.LoadId
                           && otherLoadLine.OrderNum            == loadLine.OrderNum
                           && otherLoadLine.InventTransType     == loadLine.InventTransType
                           && otherLoadLine.TransportRequest    == loadLine.TransportRequest
                           && (otherRoute.RouteConfigCode       != thisRouteConfigCode
                           ||  otherloadTable.RouteCode         == '')
        {
            switch (loadLine.InventTransType)
            {
                case InventTransType::Sales:
                    this.changeRouteConfigCodeOnSales(loadLine.OrderNum, thisRouteConfigCode);
                    break;

                case InventTransType::Purch:
                    this.changeRouteConfigCodeOnPurch(loadLine.OrderNum, thisRouteConfigCode);
                    break;

                case InventTransType::TransferOrderShip:
                    // RouteConfigCode does not exist for transfer orders
                    break;

                default:
                    boolean routeConfigCodeUpdated = this.changeRouteConfigCodeOnOriginDefault(loadLine.InventTransType, loadLine.OrderNum, thisRouteConfigCode);
                    if (!routeConfigCodeUpdated)
                    {
                        throw error(Error::wrongUseOfFunction(funcName()));
                    }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeRouteConfigCodeOnOriginDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extension point for the default case of the switch statement in changeRouteConfigCodeOnOrigin
    /// </summary>
    /// <param name = "_inventTransType">The InventTransType of the load line being evaluated.</param>
    /// <param name = "_orderNum">The order number on the load line being evaluated.</param>
    /// <param name = "_routeConfigCode">The route config code associated with the route on the current load.</param>
    /// <returns>True if an extender updated the route config code on the origin order; otherwise false.</returns>
    protected boolean changeRouteConfigCodeOnOriginDefault(
        InventTransType		_inventTransType,
        WHSOrderNum         _orderNum,
        TMSRouteConfigCode  _routeConfigCode)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeRouteConfigCodeOnPurch</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates the purchase order data with the route plan referred by the current instance of <c>WHSLoadTable</c> buffer.
    /// </summary>
    /// <param name="_purchId">
    ///   The ID of the purchase order.
    /// </param>
    /// <param name="_routeConfigCode">
    ///   The route plan ID.
    /// </param>
    private void changeRouteConfigCodeOnPurch(
        PurchId             _purchId,
        TMSRouteConfigCode  _routeConfigCode
    )
    {
        TMSPurchTable   tmsPurchTable;

        ttsbegin;

        tmsPurchTable = TMSPurchTable::find(_purchId, true);
        if (!tmsPurchTable.RecId)
        {
            tmsPurchTable.initFromPurchTable(_purchId);
        }

        tmsPurchTable.RouteConfigCode   = _routeConfigCode;
        tmsPurchTable.write();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeRouteConfigCodeOnSales</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates the sales order data with the route plan referred by the current instance of <c>WHSLoadTable</c> buffer.
    /// </summary>
    /// <param name="_salesId">
    ///   The ID of the sales order.
    /// </param>
    /// <param name="_routeConfigCode">
    ///   The route plan ID.
    /// </param>
    private void changeRouteConfigCodeOnSales(
        SalesId             _salesId,
        TMSRouteConfigCode  _routeConfigCode
    )
    {
        TMSSalesTable   tmsSalesTable;

        ttsbegin;

        tmsSalesTable = TMSSalesTable::find(_salesId, true);
        if (!tmsSalesTable.RecId)
        {
            tmsSalesTable.initFromSalesTable(_salesId);
        }

        tmsSalesTable.RouteConfigCode   = _routeConfigCode;
        tmsSalesTable.write();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCarrierServiceLoadTemplate</Name>
				<Source><![CDATA[
    public void checkCarrierServiceLoadTemplate()
    {
        if (this.changeLoadTemplateIdBasedOnCarrierServiceLoadTemplateId())
        {
            this.initFromLoadTemplateId(this.LoadTemplateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeLoadTemplateIdBasedOnCarrierServiceLoadTemplateId</Name>
				<Source><![CDATA[
    private boolean changeLoadTemplateIdBasedOnCarrierServiceLoadTemplateId()
    {
        WHSLoadTemplateId carrierServiceLoadTemplateId = TMSCarrierService::find(this.CarrierServiceCode, this.CarrierCode).LoadTemplateId;

        if (this.shouldLoadTemplateIdBeChangedToCarrierServiceLoadTemplateId(carrierServiceLoadTemplateId))
        {
            this.LoadTemplateId = carrierServiceLoadTemplateId;
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldLoadTemplateIdBeChangedToCarrierServiceLoadTemplateId</Name>
				<Source><![CDATA[
    private boolean shouldLoadTemplateIdBeChangedToCarrierServiceLoadTemplateId(WHSLoadTemplateId _carrierServiceLoadTemplateId)
    {
        return _carrierServiceLoadTemplateId
            && (this.LoadTemplateId == ''
                || (this.LoadTemplateId != _carrierServiceLoadTemplateId && TMSCarrierHelper::updateLoadTemplate(_carrierServiceLoadTemplateId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>countNonCancelledWork</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds the number of work lines of the load that are not cancelled.
	/// </summary>
	/// <returns>
	/// The number of work lines that are not cancelled.
	/// </returns>
    int countNonCancelledWork()
    {
        WHSWorkLine         workLine;
        WHSWorkTable        workTable;
        int                 counter;

        while select RecId from workLine
            join workTable
            group by workLine.WorkId
            where workLine.WorkId        == workTable.WorkId      &&
                  workLine.LoadId        == this.LoadId           &&
                  workLine.WorkStatus    != WHSWorkStatus::Cancelled &&
                  workTable.WorkStatus   != WHSWorkStatus::Combined  &&
                  workTable.WorkStatus   != WHSWorkStatus::Cancelled
        {
            ++counter;
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        this.validateIfAllowedToModify();

        super();

        this.tmsCancelAppointment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>destinationAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>TMSAddressPhone</c> object to be used when passing address information
    /// </summary>
    /// <returns>
    /// Object containing address information
    /// </returns>
    public TMSAddressPhone destinationAddress()
    {
        TMSAddressPhone     ret = new TMSAddressPhone();

        ret.setLogisticsPostalAddress(LogisticsPostalAddress::findRecId(this.DestinationPostalAddress));
        ret.parmName(this.DestinationName);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAccountName</Name>
				<Source><![CDATA[
    /// <summary>
	/// Method to display account name of the load belongs to.
	/// </summary>
	/// <returns>
	/// The account name of the load.
	/// </returns>
    display Name displayAccountName()
    {
        WHSLoadLine loadLine;
        Name        ret;
        
        loadLine = WHSLoadLine::findFirstForLoadId(this.LoadId);

        if (loadLine.InventTransType == InventTransType::Sales)
        {
            ret = CustTable::find(this.AccountNum).name();
        }
        else if (loadLine.InventTransType == InventTransType::Purch)
        {
            ret = VendTable::find(this.AccountNum).name();
        }
        else
        {
            ret = this.getAccountNameByAccountNumAndLoadLineDefault(this.AccountNum, loadLine);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountNameByAccountNumAndLoadLineDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extension point for the default case in displayAccountName
    /// </summary>
    /// <param name = "_accountNum">The account number.</param>
    /// <param name = "_loadLine">The load line.</param>
    /// <returns>Return account name.</returns>
    [Wrappable(true)]
    internal Name getAccountNameByAccountNumAndLoadLineDefault(WHSAccountNum _accountNum, WHSLoadLine _loadLine)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayActualWeightRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display the actual weight remaining of a load.
    /// </summary>
    /// <returns>
    /// The actual weight remaining of a load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display Weight displayActualWeightRemaining()
    {
        return this.LoadTipWeight - this.ActualNetWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayContainerSize</Name>
				<Source><![CDATA[
    /// <summary>
	/// Method to display name of the template of the load.
	/// </summary>
	/// <returns>
	/// The name of the template of the load.
	/// </returns>
    display TMSName displayContainerSize()
    {
        return TMSEquipment::find(WHSLoadTemplate::find(this.LoadTemplateId).EquipmentCode).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCurrentWave</Name>
				<Source><![CDATA[
    /// <summary>
	/// Method to display current wave id of the load.
	/// </summary>
	/// <returns>
	/// The current wave id of the load.
	/// </returns>
    display WHSWaveId displayCurrentWave()
    {
        WHSShipmentTable    shipmentTable;
        WHSWaveTable        waveTable;
        WHSWaveId           ret;
        int                 i;

        while select WaveId from shipmentTable
            group by WaveId
            join WaveId, WaveStatus from waveTable
            where shipmentTable.LoadId   == this.LoadId           &&
                  waveTable.WaveId       == shipmentTable.WaveId  &&
                  waveTable.WaveStatus   < WHSWaveStatus::Shipped
        {
            ++i;

            ret = shipmentTable.WaveId;

            if (i > 1)
            {
                break;
            }
        }

        return (i == 1 ? ret : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDropOffLoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the address of the drop off location.
    /// </summary>
    /// <returns>
    /// Address of the drop off location.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display Addressing displayDropOffLoc()
    {
        return LogisticsPostalAddress::findRecId(this.DestinationPostalAddress).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayHasUnreservedQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays whether the load has any qty that is not physically reserved.
    /// </summary>
    /// <returns>
    ///    true if there is quantity that is not physically reserved; otherwise, false.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display NoYes displayHasUnreservedQty()
    {
        return WHSLoadTable::hasQuantityNotPhysicallyReserved(this.LoadId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCrossDocking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the load has any planned cross docking quantity on it.
    /// </summary>
    /// <returns>true if the load has planned cross docking quantity; otherwise, false</returns>
    [SysClientCacheDataMethodAttribute(true),
	 Hookable(false)]
    internal display boolean hasCrossDocking()
    {
        WHSLoadLine loadLine;

        select firstonly RecId from loadLine
            where loadLine.LoadId == this.LoadId
               && loadLine.CrossDockQuantity != 0;
        
        return loadLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLoadCapacityPercent</Name>
				<Source><![CDATA[
    /// <summary>
	/// Method to display load capacity of the load in percent.
	/// </summary>
	/// <returns>
	/// The load capacity of the load.
	/// </returns>
    display Percent displayLoadCapacityPercent()
    {
        Percent     ret;

        if (this.MaxFreightPieces != 0)
        {
            ret = this.displayTotalPieceCount() / this.MaxFreightPieces * 100;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLoadLines</Name>
				<Source><![CDATA[
    /// <summary>
	/// Method to display number of load lines for the load.
	/// </summary>
	/// <returns>
	/// The number of load lines of the load.
	/// </returns>
    display WHSNumOfLoadLines displayLoadLines()
    {
        return (select count(RecId) from whsLoadLine where whsLoadLine.LoadId == this.LoadId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLoadNotes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a concatenated string of external notes associated with the current record and of the load note type specified in the <c>TMSParameters</c>
    /// </summary>
    /// <returns>
    ///    A concatenated string.
    /// </returns>
    display Notes displayLoadNotes()
    {
        DocuRef         docuRef;
        Notes           notes;

        if (this.RecId)
        {
            while select Notes from docuRef
                where docuRef.RefCompanyId  == this.DataAreaId      &&
                      docuRef.RefTableId    == this.TableId         &&
                      docuRef.RefRecId      == this.RecId           &&
                      docuRef.Restriction   == DocuRestriction::External &&
                      docuRef.TypeId        == TMSParameters::find().LoadNoteType
            {
                notes += docuRef.Notes;
                notes += '\n';
            }
        }

        return notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNumberOfContainers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the number of containers in current load.
    /// </summary>
    /// <returns>
    /// Number of containers in current load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display WHSNumOfContainers displayNumberOfContainers()
    {
        WHSLoadLine         loadLine;
        WHSContainerTable   containerTable;

        select count(ContainerNum) from containerTable
            exists join loadLine
            where loadLine.ShipmentId == containerTable.ShipmentId
                && loadLine.LoadId == this.LoadId;

        return containerTable.ContainerNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNumberOfShipments</Name>
				<Source><![CDATA[
    /// <summary>
	/// Method to display number of shipments of the load.
	/// </summary>
	/// <returns>
	/// The number of shipment of the load.
	/// </returns>
    display WHSFromNumber displayNumberOfShipments()
    {
        WHSLoadLine     loadLine;
        int             i;

        while select ShipmentId from loadLine
            group by ShipmentId
            where loadLine.LoadId        == this.LoadId
                && loadLine.ShipmentId   != ''
        {
            ++i;
        }

        return i;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPickUpLoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the address of the pick up location.
    /// </summary>
    /// <returns>
    /// Address of the pick up location.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display Addressing displayPickUpLoc()
    {
        return LogisticsPostalAddress::findRecId(this.OriginPostalAddress).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display the shipment tied to a load.
    /// </summary>
    /// <returns>
    /// The shipment tied to a load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display WHSShipmentId displayShipment()
    {
        WHSLoadLine     loadLine;
        WHSShipmentId   shipmentId;
        int             i;

        while select ShipmentId from loadLine
            group by ShipmentId
            where loadLine.LoadId        == this.LoadId   &&
                  loadLine.ShipmentId    != ''
        {
            ++i;
            shipmentId = loadLine.ShipmentId;

            if (i > 1)
            {
                break;
            }
        }

        return (i == 1 ? shipmentId : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayStagedWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method that displays an image if all work tied to a load is staged.
    /// </summary>
    /// <returns>
    /// The ImageRes to display.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display container displayStagedWork()
    {
        boolean displayImage = false;

        if (this.LoadStatus == WHSLoadStatus::InProcess ||
            this.LoadStatus == WHSLoadStatus::Loaded)
        {
            WHSWorkTable        workTable;
            WHSWorkLine         workLine;
            WHSWorkLine         tmpWorkLine;

            while select WorkId, WorkStatus from workTable
                exists join tmpWorkLine
                where workTable.WorkId   == tmpWorkLine.WorkId
                &&    tmpWorkLine.LoadId == this.LoadId
                &&    workTable.WorkStatus != WHSWorkStatus::Cancelled
            {
                displayImage = true;

                if (workTable.WorkStatus == WHSWorkStatus::Closed)
                {
                    continue;
                }

                if (workTable.WorkStatus == WHSWorkStatus::Open)
                {
                    displayImage = false;
                    break;
                }

                select firstonly WorkType from workLine
                    order by workLine.LineNum desc
                    where workLine.WorkId        == workTable.WorkId
                    &&    workLine.WorkStatus    == WHSWorkStatus::Closed;

                if (workLine.WorkType != WHSWorkType::Put)
                {
                    displayImage = false;
                    break;
                }
            }
        }

        if (displayImage)
        {
            return ImageReference::constructForSymbol(ImageReferenceSymbol::Transport).pack();
        }
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display total amount of a load.
    /// </summary>
    /// <returns>
    /// The total amount of a load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display Amount displayTotalAmount()
    {
        return this.displayTotalValue() + TMSRateRoute::calcMiscCharges(this.LoadId, TMSMiscCharges::Load);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalMiles</Name>
				<Source><![CDATA[
    /// <summary>
	/// Method to display total miles in the route.
	/// </summary>
	/// <returns>
	/// The total miles in the route of the load.
	/// </returns>
    display TMSMiles displayTotalMiles()
    {
        return TMSRoute::find(this.RouteCode).displayTotalMiles();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalPieceCount</Name>
				<Source><![CDATA[
    /// <summary>
	/// Method to display total amount of pieces in the load.
	/// </summary>
	/// <returns>
	/// The total amount of pieces in the load.
	/// </returns>
    display ProductQuantity displayTotalPieceCount()
    {
        return (select sum(Qty) from whsLoadLine where whsLoadLine.LoadId == this.LoadId).Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display total value of a load.
    /// </summary>
    /// <returns>
    /// The total value of a load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display Amount displayTotalValue()
    {
        Amount                  ret;
        WHSLoadLine             loadLine;

        while select ItemId, InventTransType, InventTransId, InventQty, InventDimId from loadLine
            where loadLine.LoadId == this.LoadId
        {
            ret += loadLine.displayTotalValue();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display total volume of a load.
    /// </summary>
    /// <returns>
    /// The total volume of a load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display Volume displayTotalVolume()
    {
        Volume          volume;
        WHSLoadLine     loadLine;

        while select ItemId, InventQty, Qty, UOM, InventDimId from loadLine
            where loadLine.LoadId == this.LoadId
        {
            volume += loadLine.displayItemVolume();
        }

        return volume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display the total weight of a load.
    /// </summary>
    /// <returns>
    /// The total weight of a load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display Weight displayTotalWeight()
    {
        Weight          weight;
        WHSLoadLine     loadLine;

        while select loadLine
            where loadLine.LoadId == this.LoadId
        {
            weight += loadLine.displayItemWeight();
        }

        return weight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existWHSLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current load has at least one line associated with it.
    /// </summary>
    /// <returns>
    /// true if a line exists; otherwise false.
    /// </returns>
    public boolean existWHSLoadLine()
    {
        WHSLoadLine whsLoadLine;

        select firstOnly RecId from whsLoadLine
            where whsLoadLine.LoadId == this.LoadId;

        return whsLoadLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVolumeRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the volume remained on the load
    /// </summary>
    /// <returns>
    /// The <c>Volume</c> to display.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display Volume displayVolumeRemaining()
    {
        return this.LoadTipVolume - this.displayTotalVolume();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display the wave tied to a load.
    /// </summary>
    /// <returns>
    /// The wave tied to the load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display WHSWaveId displayWave()
    {
        WHSShipmentTable    shipmentTable;
        WHSWaveId           ret;
        int                 i;

        while select WaveId from shipmentTable
            group by WaveId
            where shipmentTable.LoadId == this.LoadId
        {
            ++i;

            ret = shipmentTable.WaveId;

            if (i > 1)
            {
                break;
            }
        }

        return (i == 1 ? ret : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWeightRemaining</Name>
				<Source><![CDATA[
    /// <summary>
	/// Method to display the weight remaining in the load.
	/// </summary>
	/// <returns>
	/// The weight remaining in the load.
	/// </returns>
    display Weight displayWeightRemaining()
    {
        return this.LoadTipWeight - this.displayTotalWeight();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalContainerTareWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display the total container tare weight in the load.
    /// </summary>
    /// <returns>
    /// The total tare weight of containers in the load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display WHSSystemContainerTareWeigth displayTotalContainerTareWeight()
    {
        WHSContainerType    containerType;
        WHSContainerTable   containerTable;
        WHSShipmentTable    shipmentTable;

        select sum(TareWeight) from containerType
             join TableId from shipmentTable
                where shipmentTable.LoadId == this.LoadId
                 join TableId from containerTable
                    where containertable.containerTypeCode == containerType.ContainerTypeCode
                        && containerTable.shipmentId == shipmentTable.ShipmentId;
    
        return containerType.TareWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalGrossWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display the total gross weight including the container tare weight in the load.
    /// </summary>
    /// <returns>
    /// The total gross weight including the container tare weight in the load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display WHSSystemGrossWeightIncludingContainer displayTotalGrossWeight()
    {
        return this.LoadWeight + this.displayTotalContainerTareWeight();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWorkStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display work status of a load.
    /// </summary>
    /// <returns>
    /// The work status of a load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display WHSLoadUserDef1 displayWorkStatus()
    {
        int        totalLines;
        int        totalCompleted;
        WHSWorkLine workLine;

        if (WHSLoadDisplayWorkStatusCalcSkipShipmentIdCheckFlight::instance().isEnabled())
        {
            while select WorkStatus, count(RecId) from workLine
                group by WorkStatus
                where workLine.LoadId == this.LoadId
            {
                if (workLine.WorkStatus != WHSWorkStatus::Cancelled)
                {
                    totalLines += workLine.RecId;
                }

                if (workLine.WorkStatus == WHSWorkStatus::Closed
                    || workLine.WorkStatus == WHSWorkStatus::Combined)
                {
                    totalCompleted += workLine.RecId;
                }
            }
        }
        else
        {
            WHSLoadLine loadLine;

            while select WorkStatus, count(RecId) from workLine
                group by WorkStatus
                where workLine.LoadId == this.LoadId
                    && workLine.ShipmentId != ''
                exists join loadLine
                    where (!workLine.LoadLineRefRecId || loadLine.RecId == workLine.LoadLineRefRecId)
                          && loadLine.ShipmentId == workLine.ShipmentId
                          && loadLine.LoadId == this.LoadId
            {
                if (workLine.WorkStatus != WHSWorkStatus::Cancelled)
                {
                    totalLines += workLine.RecId;
                }

                if (workLine.WorkStatus == WHSWorkStatus::Closed
                || workLine.WorkStatus == WHSWorkStatus::Combined)
                {
                    totalCompleted += workLine.RecId;
                }
            }
        }
    
        str ret;
        if (totalLines)
        {
            ret = strFmt("@WAX:PercentOfAllWorkCompleted", totalCompleted * 100 / totalLines);
        }
        else
        {
            ret = "@WAX1674";
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateStatusWhenPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the load status must be updated during posting.
    /// </summary>
    /// <returns>true if the load status must be updated; otherwise, false.</returns>
    public boolean mustUpdateStatusWhenPosting()
    {
        return this.LoadStatus == WHSLoadStatus::Open;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findStatus</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds load status.
	/// </summary>
	/// <returns>
	/// The status of the load.
	/// </returns>
    public WHSLoadStatus findStatus()
    {
        WHSLoadStatus           ret;
        WHSShipmentTable        shipmentTable;
        WHSShipmentStatus       shipmentStatus;
        int                     counter;

        while select ShipmentStatus
            from shipmentTable
            group by ShipmentStatus
            order by ShipmentStatus
            where shipmentTable.LoadId == this.LoadId
        {
            if (shipmentTable.ShipmentStatus > shipmentStatus &&
               (shipmentTable.ShipmentStatus < WHSShipmentStatus::Loaded || counter == 0))
            {
                shipmentStatus = shipmentTable.ShipmentStatus;
            }

            ++counter;
        }

        switch (true)
        {
            case counter == 0:
                ret = WHSLoadStatus::Open;
                break;

            case shipmentStatus == WHSShipmentStatus::Open && counter > 0:
                ret = this.shouldLoadStatusBeChangedToPosted() ? WHSLoadStatus::Posted : this.LoadStatus;
                break;

            case shipmentStatus == WHSShipmentStatus::InProcess:
                ret = WHSLoadStatus::InProcess;
                break;

            case shipmentStatus == WHSShipmentStatus::Waved:
                ret = WHSLoadStatus::Waved;
                break;

            case shipmentStatus == WHSShipmentStatus::Loaded:
                ret = WHSLoadStatus::Loaded;
                break;

            case shipmentStatus == WHSShipmentStatus::Shipped:
                ret = WHSLoadStatus::Shipped;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalLoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to get the final location for a load.
    /// </summary>
    /// <returns>
    /// The final location of the load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display WMSLocationId getFinalLoc()
    {
        WHSWorkTable        workTable;
        WHSWorkLine         pickWorkLine;
        WHSWorkLine         putWorkLine;
        WMSLocation         wmsLocation;
        WHSLocationProfile  locProfile;
        WHSWorkId           prevWorkId;
        WMSLocationId       prevLocation;
        str                 ret;

        WHSLocType finalLocType = WHSParameters::find().ShipFinalLocType;

        while select RecId from pickWorkLine
            where pickWorkLine.LoadId       == this.LoadId
                && pickWorkLine.WorkStatus  != WHSWorkStatus::Cancelled
                && pickWorkLine.WorkType    == WHSWorkType::Pick
            join WorkId from workTable
                where workTable.WorkId          == pickWorkLine.WorkId
                    && workTable.WorkStatus     != WHSWorkStatus::Combined
                    && (workTable.WorkTransType  == WHSWorkTransType::TransferIssue
                        || workTable.WorkTransType  == WHSWorkTransType::Sales)
                join wmsLocationId from putWorkLine
                    where putWorkLine.WorkId    == workTable.WorkId
                      && putWorkLine.WorkType   == WHSWorkType::Put
                      && putWorkLine.WorkStatus != WHSWorkStatus::Cancelled
                    exists join wmsLocation
                        where wmsLocation.inventLocationId  == workTable.InventLocationId
                            && wmsLocation.wmsLocationId    == putWorkLine.wmsLocationId
                        exists join locProfile
                            where locProfile.LocProfileId == wmsLocation.LocProfileId &&
                              locProfile.LocType          == finalLocType
        {
            if (prevWorkId != workTable.WorkId)
            {
                if (ret && prevLocation != putWorkLine.wmsLocationId)
                {
                    ret = "@WAX402";
                    break;
                }
                else
                {
                    ret = putWorkLine.wmsLocationId;
                }

                prevLocation = ret;
                prevWorkId = workTable.WorkId;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoadTemplate</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds the load template by the item group id.
	/// </summary>
	/// <param name="_itemGroupId">
	/// Item group id.
	/// </param>
	/// <returns>
	/// The load template assigned to the item group.
	/// </returns>
    WHSLoadTemplate getLoadTemplate(ItemGroupId _itemGroupId)
    {
        WHSLoadTemplate     loadTemplate;
        InventItemGroup     inventItemGroup;

        inventItemGroup  = InventItemGroup::find(_itemGroupId);
        loadTemplate     = WHSLoadTemplate::find(inventItemGroup.LoadTemplateId);

        return loadTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStagingLoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to get the staging location for a load.
    /// </summary>
    /// <returns>
    /// The staging location for the load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display WMSLocationId getStagingLoc()
    {
        WHSWorkTable        workTable;
        WHSWorkLine         workLine;
        WHSWorkLine         putWorkLine;
        WMSLocation         wmsLocation;
        WHSLocationProfile  locProfile;
        WHSLocType          stagingLocType;
        WHSWorkId           prevWorkId;
        WMSLocationId       prevLocation;
        str                 ret;

        stagingLocType = WHSParameters::find().StageLocType;

        // Find all Put work lines in all Work orders related to the selected Load, with Location of STAGE type
        // Consider the Staging location to be based on the Pick work lines following such Puts (to account for movements of goods between locations)
        while select putWorkLine
            order by putWorkLine.WorkId
            where putWorkLine.WorkType == WHSWorkType::Put
                && putWorkLine.WorkStatus != WHSWorkStatus::Cancelled
            exists join workTable
                where workTable.WorkId == putWorkLine.WorkId
                    && workTable.WorkStatus       != WHSWorkStatus::Combined
            exists join workLine
                where workLine.WorkId == putWorkLine.WorkId
                    && workLine.LoadId == this.LoadId
                    && workLine.WorkStatus != WHSWorkStatus::Cancelled
            exists join wmsLocation
                where wmsLocation.inventLocationId == workTable.InventLocationId
                    && wmsLocation.wmsLocationId == putWorkLine.wmsLocationId
                exists join locProfile
                    where locProfile.LocProfileId == wmsLocation.LocProfileId
                        && locProfile.LocType == stagingLocType
        {
            if (prevWorkId != putWorkLine.WorkId)
            {
                WHSWorkLine nextPickWorkLine = WHSWorkLine::getNextOppositeWorkLineFromWorkLine(putWorkLine);
                if (ret && prevLocation != nextPickWorkLine.wmsLocationId)
                {
                    ret = "@WAX402";
                    break;
                }
                else
                {
                    ret = nextPickWorkLine.wmsLocationId;
                }

                prevLocation = ret;
                prevWorkId = putWorkLine.WorkId;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWork</Name>
				<Source><![CDATA[
    /// <summary>
	/// Check whether work is created for the load.
	/// </summary>
	/// <returns>
	/// True if a work is created for the load.
	/// </returns>
    boolean hasWork()
    {
        WHSLoadLine loadLine;

        select firstonly RecId from loadLine
            where loadLine.LoadId            == this.LoadId &&
                  loadLine.WorkCreatedQty    >  0;

        return loadLine.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageIdx</Name>
				<Source><![CDATA[
    /// <summary>
	/// Method to display the index of the image indicating the percentage of the work completed.
	/// </summary>
	/// <param name="_load">
	/// Load record that work is created for.
	/// </param>
	/// <returns>
	/// The image index to indicate percentage of the work completed.
	/// </returns>
    display int imageIdx(WHSLoadTable _load)
    {
        WHSLoadLine         loadLine;
        Qty                 totalLines;
        Qty                 totalCompleted;
        int                 ret;
        real                percentage = 0.75;

        while select loadLine
            where loadLine.LoadId    == _load.LoadId
        {
            totalLines      += loadLine.displayWorkLineTotal();
            totalCompleted  += loadLine.displayWorkLineCompleted();
        }

        switch (true)
        {
            case totalLines == 0:
                ret = 0;
                break;

            case (totalCompleted / totalLines) >= percentage:
                ret = 2;
                break;

            case (totalCompleted / totalLines) == 1:
                ret = 3;
                break;

            default:
                ret = 1;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDestinationAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the destination address reference information
    /// </summary>
    /// <param name="_address">
    /// Object containing address information
    /// </param>
    /// <param name="_hubMasterCode">
    /// Hub master code
    /// </param>
    public void initDestinationAddress(TMSAddressPhone _address, TMSHubMasterCode _hubMasterCode = '')
    {
        if (!WHSLoadPlanningSkipAddressesUpdateContext::currentSkipAddressesUpdateParameter())
        {
            this.DestinationPostalAddress   = _address.parmPostalAddressRecId();
            this.DestinationHubCode         = _hubMasterCode;
            this.DestinationName            = _address.parmName();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromItem</Name>
				<Source><![CDATA[
    /// <summary>
	/// Initializes the record from the load template of an item.
	/// </summary>
	/// <param name="_itemId">
	/// Id of the item.
	/// </param>
    void initFromItem(ItemId _itemId)
    {
        ItemGroupId         itemGroupId;
        WHSLoadTemplate     loadTemplate;

        itemGroupId = InventItemGroupItem::itemGroupByItemIdLegalEntity(_itemId).ItemGroupId;

        loadTemplate            = this.getLoadTemplate(itemGroupId);

        this.setLoadId();
        this.LoadTemplateId  = loadTemplate.LoadTemplateId;
        this.LoadHeight      = loadTemplate.LoadHeight;
        this.LoadWidth       = loadTemplate.LoadWidth;
        this.LoadDepth       = loadTemplate.LoadDepth;
        this.LoadTipVolume   = loadTemplate.LoadMaxVolume;
        this.LoadTipWeight   = loadTemplate.LoadMaxWeight;
        this.LoadFloorStack  = loadTemplate.LoadFloorStack;
        this.MaxFreightPieces = loadTemplate.MaxFreightPieces;
        this.AllowLoadSplitShipConfirm = loadTemplate.AllowLoadSplitShipConfirm;

        this.LoadSplitShipConfirmPolicy = loadTemplate.LoadSplitShipConfirmPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record from another load.
    /// </summary>
    /// <param name="_loadTable">
    /// Load table record to initialize from.
    /// </param>
    [Hookable(false)]
    internal void initFromLoad(WHSLoadTable _loadTable)
    {
        buf2Buf(_loadTable, this);
        this.setLoadId();
        this.resetWeightValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetWeightValues</Name>
				<Source><![CDATA[
    private void resetWeightValues()
    {
        this.ActualGrossWeight  = 0;
        this.ActualNetWeight    = 0;
        this.ActualTareWeight   = 0;
        this.LoadNetWeight      = 0;
        this.LoadWeight         = 0;
        this.SystemTareWeight   = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyLoadQuantityPicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if any inventory has been picked against the order for a given load.
    /// </summary>
    /// <param name="_loadId">
    /// The load being evaluated.
    /// </param>
    /// <returns>
    /// True if any inventory is picked; otherwise False.
    /// </returns>
    [Hookable(false)]
    internal static boolean isAnyLoadQuantityPicked(WHSLoadId _loadId)
    {
        return (select firstOnly RecId from WHSLoadLine
                    where WHSLoadLine.LoadId      == _loadId
                        &&  WHSLoadLine.PickedQty != 0).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLoadTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
	/// Initializes the load from a load template.
	/// </summary>
	/// <param name="_loadTemplateId">
	/// Id of the load template.
	/// </param>
    void initFromLoadTemplateId(WHSLoadTemplateId _loadTemplateId)
    {
        WHSLoadTemplate     loadTemplate;

        select firstonly loadTemplate
            where loadTemplate.LoadTemplateId == _loadTemplateId;

        this.LoadTemplateId     = loadTemplate.LoadTemplateId;
        this.LoadHeight         = loadTemplate.LoadHeight;
        this.LoadTipVolume      = loadTemplate.LoadMaxVolume;
        this.LoadTipWeight      = loadTemplate.LoadMaxWeight;
        this.LoadWidth          = loadTemplate.LoadWidth;
        this.LoadDepth          = loadTemplate.LoadDepth;
        this.LoadFloorStack     = loadTemplate.LoadFloorStack;
        this.MaxFreightPieces   = loadTemplate.MaxFreightPieces;
        this.AllowLoadSplitShipConfirm = loadTemplate.AllowLoadSplitShipConfirm;

        this.LoadSplitShipConfirmPolicy = loadTemplate.LoadSplitShipConfirmPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOriginAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Establishes origin address information
    /// </summary>
    /// <param name="_address">
    /// Object containing address information
    /// </param>
    /// <param name="_hubMasterCode">
    /// Hub master code
    /// </param>
    public void initOriginAddress(TMSAddressPhone _address, TMSHubMasterCode _hubMasterCode = '')
    {
        if (!WHSLoadPlanningSkipAddressesUpdateContext::currentSkipAddressesUpdateParameter())
        {
            this.OriginPostalAddress    = _address.parmPostalAddressRecId();
            this.OriginHubCode          = _hubMasterCode;
            this.OriginName             = _address.parmName();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLoadShipped</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validate the shipped status of the load.
    /// </summary>
    /// <returns>
    ///     true if the load is shipped; otherwise, false
    /// </returns>
    public boolean isLoadShipped()
    {
        return this.LoadStatus >= WHSLoadStatus::Shipped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransportRequest</Name>
				<Source><![CDATA[
    /// <summary>
	/// Checks if the load is created for a transport request.
	/// </summary>
	/// <returns>
	/// True if the load is created for a transport request.
	/// </returns>
    boolean isTransportRequest()
    {
        return WHSLoadLine::findFirstForLoadId(this.LoadId).TransportRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadArrivalDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the arrival date time
    /// </summary>
    /// <returns>
    ///    The arrival date time.
    /// </returns>
    /// <remarks>
    ///    The arrival date time is calculated in the time zone of the site associated with the load.
    /// </remarks>
    internal TransDateTime loadArrivalDateTime()
    {
        return DateTimeUtil::applyTimeZoneOffset(this.LoadArrivalUTCDateTime, this.timeZoneSite());
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadArrivalDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the arrival date only from the arrival date and time.
    /// </summary>
    /// <returns>
    ///    The arrival date.
    /// </returns>
    /// <remarks>
    ///    The arrival date is calculated in the time zone of the site associated with the load.
    /// </remarks>
    public display WHSLoadArrivalDate loadArrivalDate()
    {
        return DateTimeUtil::date(this.loadArrivalDateTime());
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSchedShipDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the scheduled shipping date time.
    /// </summary>
    /// <returns>
    ///    The scheduled shipping date time.
    /// </returns>
    /// <remarks>
    ///    The scheduled shipping date time is calculated in the time zone of the site associated with the load.
    /// </remarks>
    internal TransDateTime loadSchedShipDateTime()
    {
        return DateTimeUtil::applyTimeZoneOffset(this.LoadSchedShipUTCDateTime, this.timeZoneSite());
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSchedShipDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the scheduled shipping date only from the scheduled shipping date and time.
    /// </summary>
    /// <returns>
    ///    The scheduled shipping date.
    /// </returns>
    /// <remarks>
    ///    The scheduled shipping date is calculated in the time zone of the site associated with the load.
    /// </remarks>
    public display WHSLoadSchedShipDate loadSchedShipDate()
    {
        return DateTimeUtil::date(this.loadSchedShipDateTime());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WHSLoadTable, LoadTemplateId):
                this.initFromLoadTemplateId(this.LoadTemplateId);
                break;

            case fieldNum(WHSLoadTable, CarrierCode):
                this.ModeCode = TMSCarrier::find(this.CarrierCode).ModeCode;
                break;

            case fieldNum(WHSLoadTable, ActualGrossWeight), fieldNum(WHSLoadTable, ActualTareWeight):
                this.updateActualTareWeight();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
	/// Contains code to execute when a field is modified.
	/// </summary>
	/// <param name="_fieldName">
	/// Name of the modified field.
	/// </param>
	/// <param name="_arrayIndex">
	/// Array index of the modified field.
	/// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(WHSLoadTable, InventLocationId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventLocationId));
                break;
            case fieldStr(WHSLoadTable, InventSiteId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventSiteId));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>originAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Establishes object to return address information
    /// </summary>
    /// <returns>
    /// <c>TMSAddressPhone</c> object to pass address information
    /// </returns>
    public TMSAddressPhone originAddress()
    {
        TMSAddressPhone     ret = new TMSAddressPhone();

        ret.setLogisticsPostalAddress(LogisticsPostalAddress::findRecId(this.OriginPostalAddress));
        ret.parmName(this.OriginName);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLoadId</Name>
				<Source><![CDATA[
    /// <summary>
	/// Assigns a new load id to the load.
	/// </summary>
    void setLoadId()
    {
        this.LoadId = NumberSeq::newGetNum(WHSParameters::numRefWHSLoadId()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipWorkLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates open work lines to skipped where the work lines are associated with the current load.
    /// </summary>
    public void skipWorkLines()
    {
        WHSWorkLine     workLine;
        WHSWorkTable    workTable;

        ttsbegin;

        while select workTable
            where workTable.WorkStatus  != WHSWorkStatus::Cancelled
               && workTable.WorkStatus  != WHSWorkStatus::Combined
            exists join workLine
                where workLine.LoadId   == this.LoadId
                   && workLine.WorkId   == workTable.WorkId
        {
            workTable.skipLines();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeZoneSite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the time zone associated with the site on the current load.
    /// </summary>
    /// <returns>
    ///    The site time zone.
    /// </returns>
    public display Timezone timeZoneSite()
    {
        return InventSite::timeZoneSite(this.InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsCancelAppointment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Cancels an active appointment that reference the load.
    /// </summary>
    /// <remarks>
    /// A load could have only one or zero active appointments; this is ensured in validatewrite method of the <c>TMSAppointment</c> table.
    /// </remarks>
    void tmsCancelAppointment()
    {
        TMSAppointment  appointment;

        ttsBegin;
        appointment = TMSAppointment::findActiveByLoadId(this.LoadId, true);

        if (appointment.RecId != 0)
        {
            appointment.ApptStatus = TMSApptStatus::Cancelled;
            appointment.write();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsChangeBrokerOnAppt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates carrier code on an active appointment that reference the load.
    /// </summary>
    /// <remarks>
    /// A load could have only one or zero active appointments; this is ensured in validatewrite method of the <c>TMSAppointment</c> table.
    /// </remarks>
    void tmsChangeBrokerOnAppt()
    {
        TMSAppointment      appt;

        ttsbegin;

        appt = TMSAppointment::findActiveByLoadId(this.LoadId, true);
        if (appt.RecId != 0)
        {
            appt.BrokerCode = this.BrokerCode;
            appt.write();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeBrokerOnOutboundOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Call change broker logic for sales, and allow extensions for other potential types of outbound origin orders that support brokers.
    /// </summary>
    protected void changeBrokerOnOutboundOrigin()
    {
        if (WHSLoadTableChangeBrokerOnOutboundOriginRefactoringFlight::instance().isEnabled())
        {
            this.tmsChangeBrokerOnOutboundOriginFromTransType(InventTransType::Sales);
        }
        else
        {
            this.tmsChangeBrokerOnSales();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsChangeBrokerOnSales</Name>
				<Source><![CDATA[
    private void tmsChangeBrokerOnSales()
    {
        TMSSalesTable   tmsSalesTable;
        WHSLoadLine     loadLine;
        WHSLoadLine     otherLoadLine;
        WHSLoadTable    otherLoadTable;

        ttsbegin;

        while select loadLine
            group by loadLine.OrderNum, loadLine.InventTransType, loadLine.TransportRequest
            where loadLine.LoadId            == this.LoadId
               && loadLine.InventTransType   == InventTransType::Sales
               && loadLine.TransportRequest  == NoYes::No
        {
            select RecId from otherLoadTable
                where otherLoadTable.LoadId     != this.LoadId
                   && otherLoadTable.BrokerCode != this.BrokerCode
                exists join otherLoadLine
                    where otherLoadLine.LoadId           == otherLoadTable.LoadId
                       && otherLoadLine.OrderNum         == loadLine.OrderNum
                       && otherLoadLine.InventTransType  == loadLine.InventTransType
                       && otherLoadLine.TransportRequest == loadLine.TransportRequest;

            tmsSalesTable = TMSSalesTable::find(loadLine.OrderNum, true);

            if (tmsSalesTable.RecId == 0)
            {
                tmsSalesTable.initFromSalesTable(loadLine.OrderNum);
            }

            tmsSalesTable.BrokerCode = (otherLoadTable.RecId != 0) ? '': this.BrokerCode;
            tmsSalesTable.write();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsChangeBrokerOnOutboundOriginFromTransType</Name>
				<Source><![CDATA[
    protected void tmsChangeBrokerOnOutboundOriginFromTransType(InventTransType _inventTransType)
    {
        WHSLoadLine     loadLine;
        WHSLoadLine     otherLoadLine;
        WHSLoadTable    otherLoadTable;
        
        ttsbegin;

        while select loadLine
            group by loadLine.OrderNum, loadLine.InventTransType, loadLine.TransportRequest
            where loadLine.LoadId            == this.LoadId
               && loadLine.InventTransType   == _inventTransType
               && loadLine.TransportRequest  == NoYes::No
        {
            select RecId from otherLoadTable
                where otherLoadTable.LoadId     != this.LoadId
                   && otherLoadTable.BrokerCode != this.BrokerCode
                exists join otherLoadLine
                    where otherLoadLine.LoadId           == otherLoadTable.LoadId
                       && otherLoadLine.OrderNum         == loadLine.OrderNum
                       && otherLoadLine.InventTransType  == loadLine.InventTransType
                       && otherLoadLine.TransportRequest == loadLine.TransportRequest;

            this.updateOriginBrokerBasedOnLoad(loadLine.InventTransType, loadLine.OrderNum, otherLoadTable.RecId != 0);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOriginBrokerBasedOnLoad</Name>
				<Source><![CDATA[
    protected void updateOriginBrokerBasedOnLoad(
        InventTransType _inventTransType,
        WHSOrderNum _orderNum, 
        boolean _orderOnOtherloadTableFound)
    {
        if (_inventTransType == InventTransType::Sales)
        {
            TMSSalesTable tmsSalesTable = TMSSalesTable::find(_orderNum, true);

            if (tmsSalesTable.RecId == 0)
            {
                tmsSalesTable.initFromSalesTable(_orderNum);
            }

            tmsSalesTable.BrokerCode = (_orderOnOtherloadTableFound ? '' : this.BrokerCode);
            tmsSalesTable.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsChangeBrokerOnShipments</Name>
				<Source><![CDATA[
    /// <summary>
	/// Changes broker on shipments of the load to the current broker of the load.
	/// </summary>
	/// <remarks>

	/// </remarks>
    void tmsChangeBrokerOnShipments()
    {
        WHSShipmentTable        shipmentTable;

        ttsbegin;

        while select forupdate shipmentTable
            where shipmentTable.LoadId == this.LoadId
        {
            shipmentTable.BrokerCode = this.BrokerCode;
            shipmentTable.write();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsChangeCarrierOnAppt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates carrier code on an active appointment that reference the load.
    /// </summary>
    /// <remarks>
    /// A load could have only one or zero active appointments; this is ensured in validatewrite method of the <c>TMSAppointment</c> table.
    /// </remarks>
    private void tmsChangeCarrierOnAppt()
    {
        TMSAppointment      appt;

        ttsbegin;

        appt = TMSAppointment::findActiveByLoadId(this.LoadId, true);
        if (appt.RecId != 0)
        {
            appt.CarrierCode = this.CarrierCode;
            appt.write();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsChangeCarrierOnOrigin</Name>
				<Source><![CDATA[
    private void tmsChangeCarrierOnOrigin()
    {
        WHSLoadLine         loadLine;
        WHSLoadLine         otherLoadLine;
        WHSLoadTable        otherloadTable;

        while select loadLine
            group by loadLine.OrderNum, loadLine.InventTransType, loadLine.TransportRequest
            where loadLine.LoadId           == this.LoadId    &&
                  loadLine.TransportRequest == NoYes::No
            notexists join otherloadTable
                where otherloadTable.LoadId         != this.LoadId      &&
                      otherloadTable.CarrierCode    != this.CarrierCode
                join otherLoadLine
                where otherLoadLine.LoadId              == otherloadTable.LoadId    &&
                      otherLoadLine.OrderNum            == loadLine.OrderNum        &&
                      otherLoadLine.InventTransType     == loadLine.InventTransType &&
                      otherLoadLine.TransportRequest    == loadLine.TransportRequest
        {
            switch (loadLine.InventTransType)
            {
                case InventTransType::Sales:
                    this.changeCarrierOnSales(loadLine.OrderNum);
                    break;

                case InventTransType::Purch:
                    this.changeCarrierOnPurch(loadLine.OrderNum);
                    break;

                case InventTransType::TransferOrderShip:
                    this.changeCarrierOnTransfer(loadLine.OrderNum);
                    break;

                default:
                    boolean carrierUpdated = this.changeCarrierOnOriginDefault(loadLine.InventTransType, loadLine.OrderNum);
                    if (!carrierUpdated)
                    {
                        throw error(Error::wrongUseOfFunction(funcName()));
                    }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeCarrierOnOriginDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extension point for the default case of the switch statement in tmsChangeCarrierOnOrigin
    /// </summary>
    /// <param name = "_inventTransType">The inventTransType of the load line being evaluated.</param>
    /// <param name = "_orderNum">The order number on the load line being evaluated.</param>
    /// <returns>True if an extender changed the carrier on an origin record; otherwise false.</returns>
    protected boolean changeCarrierOnOriginDefault(
        InventTransType	_inventTransType,
        WHSOrderNum		_orderNum)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsChangeCarrierServiceOnShipments</Name>
				<Source><![CDATA[
    /// <summary>
	/// Changes carrier info on shipments of the load to the current carrier info of the load.
	/// </summary>
    void tmsChangeCarrierServiceOnShipments()
    {
        WHSShipmentTable        shipmentTable;

        while select forupdate shipmentTable
            where shipmentTable.LoadId == this.LoadId
        {
            ttsbegin;

            shipmentTable.CarrierCode        = this.CarrierCode;
            shipmentTable.CarrierServiceCode = this.CarrierServiceCode;
            shipmentTable.ModeCode           = TMSCarrier::find(this.CarrierCode).ModeCode;
            shipmentTable.write();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsChangeModeOnOrigin</Name>
				<Source><![CDATA[
    /// <summary>
	/// Changes mode code of an inventory transaction to the current mode code of the load.
	/// </summary>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when the transaction type is not Sales, Purchase or TransferOrder.
	/// </exception>
    void tmsChangeModeOnOrigin()
    {
        TMSSalesTable           tmsSalesTable;
        TMSPurchTable           tmsPurchTable;
        TMSInventTransferTable  tmsInventTransferTable;

        WHSLoadLine     loadLine;
        WHSLoadLine     otherLoadline;
        WHSLoadTable    otherLoadTable;

        ttsbegin;

        while select loadLine
            group by loadLine.OrderNum, loadLine.InventTransType, loadLine.TransportRequest
            where loadLine.LoadId           == this.LoadId &&
                  loadLine.TransportRequest == NoYes::No
            notexists join otherLoadTable
                where otherLoadTable.ModeCode   != this.ModeCode    &&
                      otherLoadTable.LoadId     != this.LoadId
                join otherLoadline
                where otherLoadline.LoadId              == otherLoadTable.LoadId    &&
                      otherLoadline.OrderNum            == loadLine.OrderNum        &&
                      otherLoadline.InventTransType     == loadLine.InventTransType &&
                      otherLoadline.TransportRequest    == loadLine.TransportRequest
        {
            switch (loadLine.InventTransType)
            {
                case InventTransType::Sales:
                    tmsSalesTable = TMSSalesTable::find(loadLine.OrderNum, true);
                    if (!tmsSalesTable.RecId)
                    {
                        tmsSalesTable.initFromSalesTable(loadLine.OrderNum);
                    }
                    tmsSalesTable.ModeCode = this.ModeCode;
                    tmsSalesTable.write();
                    break;

                case InventTransType::Purch:
                    tmsPurchTable = TMSPurchTable::find(loadLine.OrderNum, true);
                    if (!tmsPurchTable.RecId)
                    {
                        tmsPurchTable.initFromPurchTable(loadLine.OrderNum);
                    }
                    tmsPurchTable.ModeCode = this.ModeCode;
                    tmsPurchTable.write();
                    break;

                case InventTransType::TransferOrderShip:
                    tmsInventTransferTable = TMSInventTransferTable::find(loadLine.OrderNum, true);
                    if (!tmsInventTransferTable.RecId)
                    {
                        tmsInventTransferTable.initFromInventTransferId(loadLine.OrderNum);
                    }
                    tmsInventTransferTable.ModeCode = this.ModeCode;
                    tmsInventTransferTable.write();
                    break;

                default:
                    boolean modeChanged = this.changeModeOnOriginDefault(loadLine.InventTransType, loadLine.OrderNum);
                    if (!modeChanged)
                    {
                        throw error(Error::wrongUseOfFunction(funcName()));
                    }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeModeOnOriginDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extension point for the default case of the switch statement in tmsChangeModeOnOrigin.
    /// </summary>
    /// <param name = "_inventTransType">The InventTransType of the load line being evaluated.</param>
    /// <param name = "_orderNum">The order number on the load line being evaluated.</param>
    /// <returns>True if an extender changed the mode on an origin record; otherwise false.</returns>
    protected boolean changeModeOnOriginDefault(
        InventTransType	_inventTransType,
        WHSOrderNum		_orderNum)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsDisplayAppointmentId</Name>
				<Source><![CDATA[
    /// <summary>
	/// Method to display appointment id of the load.
	/// </summary>
	/// <returns>
	/// The appointment id of the load.
	/// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display TMSApptId tmsDisplayAppointmentId()
    {
        return TMSAppointment::displayByLoadId(this.LoadId).ApptId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsDisplayEquipmentCode</Name>
				<Source><![CDATA[
    /// <summary>
	/// Method to display equipment code of the load.
	/// </summary>
	/// <returns>
	/// The equipment code of the load.
	/// </returns>
    display TMSEquipmentCode tmsDisplayEquipmentCode()
    {
        return WHSLoadTemplate::find(this.LoadTemplateId).EquipmentCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsDisplayRouteCode</Name>
				<Source><![CDATA[
    /// <summary>
	/// Method to display route code of the load.
	/// </summary>
	/// <returns>
	/// The route code of the load.
	/// </returns>
    display TMSRouteCode tmsDisplayRouteCode()
    {
        return (select firstonly RouteCode from tmsRouteSegmentLoad where tmsRouteSegmentLoad.Id == this.LoadId).RouteCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIfAllowedToModify</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void validateIfAllowedToModify()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.validateIfAllowedToModify();

        boolean     routeCodeChanged;
        boolean     brokerChanged;
        boolean     carrierChanged;
        boolean     statusChange;
        boolean     carrierCodeChanged;
        boolean     carrierServiceCodeChanged;
        boolean     modeCodeChanged;

        routeCodeChanged          = this.orig().RouteCode            != this.RouteCode;
        carrierCodeChanged        = this.orig().CarrierCode          != this.CarrierCode;
        carrierServiceCodeChanged = this.orig().CarrierServiceCode   != this.CarrierServiceCode;
        brokerChanged             = this.orig().BrokerCode           != this.BrokerCode;
        modeCodeChanged           = this.orig().ModeCode             != this.ModeCode;
        statusChange              = this.orig().LoadStatus           != this.LoadStatus;

        carrierChanged = carrierCodeChanged                                                       ||
                         carrierServiceCodeChanged                                                ||
                         this.orig().CarrierGroupCode            != this.CarrierGroupCode         ||
                         this.orig().TransportationTemplateId    != this.TransportationTemplateId;

        this.assertLoadIdNotBlank();

        super();

        if (routeCodeChanged)
        {
            this.changeRouteConfigCodeOnOrigin();
        }

        if (carrierChanged)
        {
            this.tmsChangeCarrierOnOrigin();
        }

        if (carrierCodeChanged)
        {
            this.tmsChangeCarrierServiceOnShipments();
            this.tmsChangeCarrierOnAppt();
        }

        if (carrierServiceCodeChanged)
        {
            this.tmsChangeCarrierServiceOnShipments();
        }

        if (modeCodeChanged)
        {
            this.tmsChangeModeOnOrigin();
        }

        if (brokerChanged)
        {
            this.tmsChangeBrokerOnShipments();
            this.tmsChangeBrokerOnAppt();
        }

        if (brokerChanged && this.LoadDirection == WHSLoadDirection::Outbound)
        {
            this.changeBrokerOnOutboundOrigin();
        }

        if (statusChange)
        {
            switch (this.LoadStatus)
            {
                case WHSLoadStatus::Posted:
                    WHSHistory::createHistoryRecord(WHSHistoryType::Load,
                                                    this.LoadId,
                                                    WHSHistoryEvent::ReleasetoWarehouse);
                    break;

                case WHSLoadStatus::Shipped:
                    WHSHistory::createHistoryRecord(WHSHistoryType::Load,
                                                    this.LoadId,
                                                    WHSHistoryEvent::ShipConfirm);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActualTareWeight</Name>
				<Source><![CDATA[
    /// <summary>
	/// Updates actual net weight of the load.
	/// </summary>
    void updateActualTareWeight()
    {
        this.ActualNetWeight = this.ActualGrossWeight - this.ActualTareWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadTareWeight</Name>
				<Source><![CDATA[
    /// <summary>
	/// Updates load tare weight of the load.
	/// </summary>
    void updateLoadTareWeight()
    {
        this.SystemTareWeight = this.LoadWeight - this.LoadNetWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (this.countNonCancelledWork() > 0)
        {
            throw error(strFmt("@WAX836", this.LoadId, ''));
        }

        ret = ret && this.validateRegisteredOrReceivedTransactionDoesNotExistForLoad();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRegisteredOrReceivedTransactionDoesNotExistForLoad</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean validateRegisteredOrReceivedTransactionDoesNotExistForLoad()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WHSLoadTable, InventLocationId):
                ret = this.InventStorageDimMap::validateField(fieldNum(InventStorageDimMap, InventLocationId));
                break;

            case fieldNum(WHSLoadTable, LoadingStrategy):
                if (this.LoadingStrategy != this.orig().LoadingStrategy)
                {
                    ret = this.validateChangingLoadingStrategy();
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseTMSActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if TMS actions can be used.
    /// </summary>
    /// <returns>
    /// true if TMS actions can be used; otherwise, false
    /// </returns>
    public boolean canUseTMSActions()
    {
        return TMSGlobal::skipTMS() ? false : this.LoadingStrategy == WHSLoadingStrategy::FullLoadShippingOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateCrossDockPackingStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if cross docking package structures can be created for this load.
    /// </summary>
    /// <returns>
    /// true if cross docking package structures can be created; otherwise, false
    /// </returns>
    public boolean canCreateCrossDockPackingStructure()
    {
        return this.LoadingStrategy == WHSLoadingStrategy::FullLoadShippingOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransportationTender</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates tender is in correct status for order to be ship confirmed. Load tender must be accepted or denied if it exists.
    /// </summary>
    /// <param name="_skipTender">
    /// true if tender validation should be skipped; otherwise, false.
    /// </param>
    /// <returns>
    /// true if a tender exists that should block shipping; otherwise, false.
    /// </returns>
    public boolean validateTransportationTender(boolean _skipTender)
    {
        TMSCarrier      carrier;
        boolean         ret = true;
        DialogButton    db;

        if (!_skipTender && this.RouteCode)
        {
            carrier = TMSCarrier::find(this.CarrierCode);

            // Load tender must be accepted or denied if it exists
            if (carrier && carrier.LoadTender != TMSLoadTender::None)
            {
                if (!TMSTransportationTender::checkForTender(this.LoadId) || !TMSTransportationTender::checkForAccepted(this.LoadId))
                {
                    if (!BatchHeader::isExecutingInBatch() && Global::hasGUI())
                    {
                        db = Box::yesNo(strFmt("@TRX1584", this.LoadId), DialogButton::No, "@TRX1585");
                        if (db == DialogButton::No)
                        {
                            ret = false;
                        }
                    }
                    else
                    {
                        ret = false;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret
         && this.CarrierCode
         && this.CarrierServiceCode
         && !TMSCarrierService::exist(this.CarrierServiceCode, this.CarrierCode))
        {
            ret = checkFailed(strFmt("@SCM:SCM_MessageValidation_AssetIdBookIdCombination",
                    this.CarrierCode, this.CarrierServiceCode, fieldPName(WHSLoadTable, CarrierCode), fieldPName(WHSLoadTable, CarrierServiceCode), tableId2PName(tableNum(TMSCarrierService))));
        }

        if (ret && this.InventLocationId && !InventLocation::find(this.InventLocationId).whsEnabled)
        {
            ret = checkFailed(strFmt("@SYS4009637", this.InventLocationId));
        }

        if (ret && this.LoadingStrategy != this.orig().LoadingStrategy)
        {
            ret = this.validateChangingLoadingStrategy();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceLoadWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decrements the aggregated weight on the load based on a change in inventory quantity on a load line.
    /// </summary>
    /// <param name="_loadId">
    /// The load ID to update.
    /// </param>
    /// <param name="_itemId">
    /// The item ID where the weights are retrieved from.
    /// </param>
    /// <param name="_inventHandlingQtyToReduce">
    /// The changed in inventory quantity.
    /// </param>
    [Hookable(false), SysObsolete('Callers should redirect their calls to the reduceLoadWeightsForLoadLine method.', false, 10\5\2020)]
    public static void reduceLoadWeight(
        WHSLoadId           _loadId,
        ItemId              _itemId,
        InventHandlingQty   _inventHandlingQtyToReduce)
    {
        WHSLoadTable::addLoadWeights(_loadId, _itemId, -_inventHandlingQtyToReduce);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadWeights</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the aggregated weight on the load based on a change in inventory quantity on a load line.
    /// </summary>
    /// <param name="_loadId">
    ///    The load ID to update.
    /// </param>
    /// <param name="_itemId">
    ///    The item ID where the weights are retrieved from.
    /// </param>
    /// <param name="_inventQtyDifference">
    ///    The changed in inventory quantity.
    /// </param>
    [SysObsolete('Callers should redirect their calls to the addLoadWeightsForLoadLine method. Extenders should move their logic to wrap the addLoadWeightsForLoadLine method.', false, 10\5\2020)]
    public static void addLoadWeights(
        WHSLoadId   _loadId,
        ItemId      _itemId,
        InventQty   _inventQtyDifference)
    {
        InventTable             inventTable;
        WHSLoadTable            loadTable;

        if (_loadId && _itemId && _inventQtyDifference)
        {
            ttsbegin;

            inventTable = InventTable::find(_itemId);

            if (inventTable.RecId)
            {
                loadTable = WHSLoadTable::find(_loadId, true);

                if (loadTable)
                {
                    if (loadTable.assignLoadWeights(inventTable, _inventQtyDifference))
                    {
                        loadTable.update();
                    }
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceLoadWeightsForLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decrements the aggregated weight on the load based on a change in inventory quantity on a load line.
    /// </summary>
    /// <param name="_loadLine">The <c>WHSLoadLine</c> buffer to assign the Net weight, TareWeight from.</param>
    /// <param name="_inventHandlingQtyToReduce">The change in inventory quantity.</param>
    [Hookable(false)]
    public static void reduceLoadWeightsForLoadLine(
        WHSLoadLine         _loadLine,
        InventHandlingQty   _inventHandlingQtyToReduce)
    {
        WHSLoadTable::addLoadWeightsForLoadLine(_loadLine, -_inventHandlingQtyToReduce);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadWeightsForLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the aggregated weight on the load based on a change in inventory quantity on a load line.
    /// </summary>
    /// <param name="_loadLine">The <c>WHSLoadLine</c> buffer to assign the Net weight, TareWeight from.</param>
    /// <param name="_inventQtyDifference">The change in inventory quantity.</param>
    public static void addLoadWeightsForLoadLine(
        WHSLoadLine _loadLine,
        InventQty   _inventQtyDifference)
    {
        using (WHSLoadLineWeightCalculationContext context = WHSLoadLineWeightCalculationContext::newFromLoadLine(_loadLine))
        {
            WHSLoadTable::addLoadWeights(_loadLine.LoadId, _loadLine.ItemId, _inventQtyDifference);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the location of either the staging or final location, based on parameters, for all non-executed work
    /// that is associated with the load.
    /// </summary>
    /// <param name="_loadId">
    /// The load ID.
    /// </param>
    /// <param name="_inventLocationId">
    /// The location ID.
    /// </param>
    /// <param name="_newLocation">
    /// The new warehouse location ID.
    /// </param>
    /// <param name="_locType">
    /// The location type.
    /// </param>
    static void changeLocation(WHSLoadId        _loadId,
                               InventLocationId _inventLocationId,
                               WMSLocationId    _newLocation,
                               WHSLocType       _locType)
    {
        WHSWorkLine         workLine;
        WHSWorkLine         stagePickWorkLine;
        WMSLocation         wmsLocation;
        WHSLocationProfile  locationProfile;
        int                 locCount;
        WHSWorkTable        workTable;
        WHSParameters       whsParameters = WHSParameters::find();

        if (_locType != whsParameters.StageLocType && _locType != whsParameters.ShipFinalLocType)
        {
            throw error ("@WAX2189");
        }

        ttsbegin;

        select firstonly workLine
            where workLine.LoadId == _loadId;

        if (!WHSDockManagement::validateDockMgmtMixing(WMSLocation::find(_newLocation, _inventLocationId), workLine))
        {
            throw error("@WAX3915");
        }

        while select LoadId from workTable
            join forupdate workLine
            where workTable.LoadId       == _loadId              &&
                  workLine.WorkId        == workTable.WorkId  &&
                  workLine.WorkStatus    == WHSWorkStatus::Open  &&
                  workLine.WorkType      == WHSWorkType::Put
                join wmsLocation
                where wmsLocation.wmsLocationId     == workLine.wmsLocationId &&
                      wmsLocation.InventLocationId  == _inventLocationId
                    join locationProfile
                    where wmsLocation.LocProfileId == locationProfile.LocProfileId &&
                          locationProfile.LocType  == _locType
        {
            if (whsParameters.StageLocType == _locType)
            {
                select forupdate stagePickWorkLine
                    where stagePickWorkLine.WorkId       == workLine.WorkId       &&
                          stagePickWorkLine.WorkType     == WHSWorkType::Pick        &&
                          stagePickWorkLine.wmsLocationId   == workLine.wmsLocationId   &&
                          stagePickWorkLine.LineNum         >  workLine.LineNum;

                if (stagePickWorkLine.RecId != 0)
                {
                    stagePickWorkLine.wmsLocationId = _newLocation;
                    stagePickWorkLine.update();
                }
            }

            workLine.wmsLocationId = _newLocation;
            workLine.update();
            ++locCount;
        }

        if (locCount == 0)
        {
            info(strFmt("@WAX2188", _locType));
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeWorkPriority</Name>
				<Source><![CDATA[
    /// <summary>
	/// Changes work priority of the load.
	/// </summary>
	/// <param name="_loadId">
	/// Id of the load.
	/// </param>
	/// <param name="_priority">
	/// Priority to be set.
	/// </param>
    public static void changeWorkPriority(WHSLoadId _loadId, WHSWorkPriority _priority)
    {
        WHSWorkTable    workTable;

        if (_loadId)
        {
            update_recordset workTable
                setting WorkPriority = _priority
                where workTable.LoadId == _loadId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeWorkUser</Name>
				<Source><![CDATA[
    /// <summary>
	/// Manually assigns new work user to the work created for load.
	/// </summary>
	/// <param name="_loadId">
	/// Id of the load.
	/// </param>
	/// <param name="_userId">
	/// User id of the user to be assigned.
	/// </param>
    public static void changeWorkUser(WHSLoadId _loadId, WHSUserId _userId)
    {
        WHSWorkTable    workTable;

        if (_loadId && _userId)
        {
            update_recordset workTable
                setting LockedUser = _userId,
                        UserManuallyAssigned = NoYes::Yes
                where workTable.LoadId == _loadId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsWHSItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the load contains any lines for items that are WHS process enabled
    /// </summary>
    /// <param name="_loadId">
    /// Load ID
    /// </param>
    /// <returns>
    /// true if the load contains WHS items, otherwise false.
    /// </returns>
    public static boolean containsWHSItems(WHSLoadId _loadId)
    {
        WHSLoadLine         loadLine;
        WHSInventEnabled    whsInventEnabled;
        boolean             ret;

        select firstonly RecId from loadLine
            where loadLine.LoadId   == _loadId
        exists join ItemId from whsInventEnabled
            where whsInventEnabled.ItemId   == loadLine.ItemId;

        if (loadLine)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluateLoadPaysFreight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates the freights for order in regards with delivery terms.
    /// </summary>
    /// <param name="_loadId">
    ///    Load Id for the load to be evaluated.
    /// </param>
    /// <returns>
    /// Container that consists of two values:
    ///     1. hasOrderInvoicedLines: true, if the load qualifies to have at least one line from a sales order which is invoiced; otherwise, false.
    ///     2. paysFreightError: true, if Pays Freight of delivery terms of the associated loads does not match.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The Pays Freight field on the delivery terms on the associated orders does not match.
    /// </exception>
    public static container evaluateLoadPaysFreight(WHSLoadId _loadId)
    {
        WHSLoadTable        loadTable;
        WHSLoadLine         loadLine;
        DlvTermId           dlvTermId;
        TMSLoadPaysFreight  loadPaysFreight;
        TMSLoadPaysFreight  orderPaysFreight;
        TMSLoadPaysFreight  evalRetailSalesPaysFreight;
        int                 counter;
        Common              orderHeader;
        SalesTable          salesTable;
        PurchTable          purchTable;
        boolean             hasOrderInvoicedLines;
        boolean             paysFreightError;

        if (_loadId)
        {
            while select OrderNum, InventTransType, TransportRequest
                from loadLine
                group by OrderNum, InventTransType, TransportRequest
                where loadLine.LoadId == _loadId
            {
                evalRetailSalesPaysFreight = NoYes::No;

                dlvTermId = '';
                orderHeader = loadLine.orderHeader();

                if (orderHeader is SalesTable)
                {
                    salesTable = orderHeader as SalesTable;
                    dlvTermId = salesTable.DlvTerm;

                    if (dlvTermId)
                    {
                        evalRetailSalesPaysFreight = salesTable.evaluateAddTmsChargeToSalesOrder();
                    }
                }
                else if (orderHeader is PurchTable)
                {
                    purchTable = orderHeader as PurchTable;
                    evalRetailSalesPaysFreight = NoYes::Yes;
                    dlvTermId = purchTable.DlvTerm;
                }
                else if (orderHeader is InventTransferTable)
                {
                    InventTransferTable transferTable = orderHeader as InventTransferTable;
                    evalRetailSalesPaysFreight = NoYes::Yes;
                    dlvTermId = transferTable.DlvTermId;
                }

                if (!dlvTermId)
                {
                    orderPaysFreight = NoYes::No;
                }
                else
                {
                    orderPaysFreight = evalRetailSalesPaysFreight && TMSDlvTerm::find(dlvTermId).TransferChargesToOrder;
                }

                if (orderHeader is TMSTransportRequestTable)
                {
                    orderPaysFreight = NoYes::Yes;
                }

                if (orderPaysFreight
                    && ((salesTable && salesTable.SalesStatus == SalesStatus::Invoiced)
                    || (purchTable && purchTable.isInvoiced())))
                {
                    // if order is invoiced, we shouldn't transfer the charges, so orderPaysFreight will be set to No
                    // still we need to mark areChargesNotTransferedToOrder as true
                    hasOrderInvoicedLines = true;

                    orderPaysFreight = NoYes::No;
                }

                if (counter == 0)
                {
                    loadPaysFreight = orderPaysFreight;
                }
                else if (loadPaysFreight != orderPaysFreight)
                {
                    paysFreightError = true;
                    break;
                }

                ++counter;
            }

            if (!paysFreightError)
            {
                ttsbegin;
                loadTable = WHSLoadTable::find(_loadId, true);

                if (loadTable.LoadPaysFreight != loadPaysFreight && counter > 0)
                {
                    loadTable.LoadPaysFreight = loadPaysFreight;
                    loadTable.write();
                }
                ttscommit;
            }
        }

        return [hasOrderInvoicedLines, paysFreightError];
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
	/// Checks whether a specific <c>whsLoadTable</c> record exists.
	/// </summary>
	/// <param name="_loadId">
	/// Id of the load.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    static boolean exist(WHSLoadId _loadId)
    {
        return _loadId && (select firstonly RecId from whsLoadTable
                 where whsLoadTable.LoadId == _loadId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOrderNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a load for a given order number exists.
    /// </summary>
    /// <param name="_orderNum">
    /// The order number to check.
    /// </param>
    /// <returns>
    /// True if a load exists; otherwise false.
    /// </returns>
    public static boolean existsOrderNum(WHSOrderNum _orderNum)
    {
        WHSLoadTable loadTable;

        select firstonly RecId from loadTable
            where loadTable.OrderNum == _orderNum;

        return loadTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds a specific <c>whsLoadTable</c> record with given parameters.
	/// </summary>
	/// <param name="_loadId">
	/// Id of the load.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
    /// <param name="_disableCache">
    /// Determines if the <c>WHSLoadTable</c> record is allowed to be selected using cache or not.
    /// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSLoadTable find(
        WHSLoadId _loadId,
        boolean   _forupdate = false,
        boolean   _disableCache = false)
    {
        WHSLoadTable    loadTable;

        if (_loadId)
        {
            loadTable.selectForUpdate(_forupdate);
            loadTable.disableCache(_disableCache);

            select firstonly loadTable
                where loadTable.LoadId == _loadId;
        }

        return loadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds a specific <c>whsLoadTable</c> record by id.
	/// </summary>
	/// <param name="_recId">
	/// Id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSLoadTable findByRecId(RefRecId    _recId,
                                           boolean     _forupdate = false)
    {
        WHSLoadTable    loadTable;

        if (_recId)
        {
            loadTable.selectForUpdate(_forupdate);

            select firstonly loadTable
                where loadTable.RecId == _recId;
        }

        return loadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLoadInvalidLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a given load has one or more invalid lines.
    /// </summary>
    /// <param name="_loadId">
    ///    The load ID to check.
    /// </param>
    /// <param name="_excludeWHSLoadLineRecId">
    ///    A record ID of a load line to exclude from the check; optional.
    /// </param>
    /// <returns>
    ///   true if the load is invalid; otherwise, false.
    /// </returns>
    public static boolean hasLoadInvalidLines(
        WHSLoadId _loadId,
        RefRecId  _excludeWHSLoadLineRecId = 0)
    {
        WHSLoadLine     whsLoadLine;

        select firstonly RecId from whsLoadLine
            where whsLoadLine.LoadId  == _loadId
               && whsLoadLine.Invalid == NoYes::Yes
               && whsLoadLine.RecId   != _excludeWHSLoadLineRecId;

        return whsLoadLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenContainer</Name>
				<Source><![CDATA[
    /// <summary>
	/// Checks whether the load has a shipment with open container status.
	/// </summary>
	/// <param name="_loadId">
	/// Id of the load.
	/// </param>
	/// <param name="_excludeContainerId">
	/// Id of a container to be excluded when searching for a container with open status.
	/// </param>
	/// <returns>
	/// True if the load has a shipment with open container status.
	/// </returns>
    static boolean hasOpenContainer(WHSLoadId _loadId, WHSContainerId _excludeContainerId = '')
    {
        WHSContainerTable   containerTable;
        WHSShipmentTable    shipmentTable;
        WHSLoadTable        loadTable;

        if (_excludeContainerId)
        {
            select firstonly RecId from containerTable
                join shipmentTable
                where containerTable.ShipmentId      == shipmentTable.ShipmentId &&
                      containerTable.ContainerStatus != WHSContainerStatus::Closed  &&
                      containerTable.ContainerId     != _excludeContainerId
                    join loadTable
                    where loadTable.LoadId       == _loadId &&
                          shipmentTable.LoadId   == loadTable.LoadId;
        }
        else
        {
            select firstonly RecId from containerTable
                join ShipmentId from shipmentTable
                where containerTable.ShipmentId      == shipmentTable.ShipmentId &&
                      containerTable.ContainerStatus != WHSContainerStatus::Closed
                    join LoadId from loadTable
                    where loadTable.LoadId       == _loadId &&
                          shipmentTable.LoadId   == loadTable.LoadId;
        }

        return containerTable.RecId > 0 ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasQuantityNotPhysicallyReserved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a given load has quantities that are not physically reserved.
    /// </summary>
    /// <param name="_whsLoadId">
    ///    The load ID.
    /// </param>
    /// <returns>
    ///    true if the load has quantities that are not physically reserved; otherwise, false.
    /// </returns>
    public static boolean hasQuantityNotPhysicallyReserved(WHSLoadId _whsLoadId)
    {
        WHSLoadLine         loadLine;
        InventTable         inventTable;
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;

        select firstonly RecId from loadLine
            where loadLine.LoadId == _whsLoadId
            exists join inventTable
                where inventTable.ItemId   == loadLine.ItemId
                   && inventTable.ItemType != ItemType::Service
                exists join inventTransOrigin
                    where inventTransOrigin.InventTransId == loadLine.InventTransId
                    exists join inventTrans
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                           && inventTrans.ItemId            == loadLine.ItemId
                           && inventTrans.ValueOpen         == InventTransOpen::Yes
                           && inventTrans.StatusReceipt     == StatusReceipt::None
                           && (inventTrans.StatusIssue      == StatusIssue::OnOrder
                           ||  inventTrans.StatusIssue      == StatusIssue::ReservOrdered);
        
        return loadLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllQtyPicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if all qty on the load is in a picked status.
    /// </summary>
    /// <param name="_loadId">
    /// The load Id of the load being evaluated.
    /// </param>
    /// <returns>
    /// true if all qty on the load is in a picked status; otherwise, false.
    /// </returns>
    public static boolean isAllQtyPicked(WHSLoadId _loadId)
    {
        WHSLoadLine loadLine;

        if (_loadId)
        {
            select firstonly RecId from loadLine
                where loadLine.LoadId == _loadId
                &&    (loadLine.PickedQty  != loadLine.InventQty
                || (loadLine.PickedQty == 0 
                    && loadLine.Invalid == false
                    && WHSLoadLine::preventZeroQuantity()));
        }

        return _loadId && loadLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyLoadLineQtyPositive</Name>
				<Source><![CDATA[
    private static boolean isAnyLoadLineQtyPositive(WHSLoadId _loadId)
    {
        WHSLoadLine loadLine;

        if (_loadId)
        {
            select firstonly RecId from loadLine
                where loadLine.LoadId == _loadId
                && loadLine.Qty  > 0;
        }

        return _loadId && loadLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefWaveId</Name>
				<Source><![CDATA[
    /// <summary>
	/// Opens the wave details form.
	/// </summary>
	/// <param name="_id">
	/// Id of the wave.
	/// </param>
	/// <param name="_object">
	/// Caller object.
	/// </param>
	/// <param name="_parm">
	/// Parm string.
	/// </param>
    static void jumpRefWaveId(str _id, Object _object, str _parm = '')
    {
        WHSWaveTable waveTable = WHSWaveTable::find(_id);

        Args args = new Args();
        args.record(waveTable);
        args.caller(_object);
        args.parm(_parm);

        new MenuFunction(menuitemDisplayStr(WHSWaveTable), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLoadItems</Name>
				<Source><![CDATA[
    /// <summary>
	/// Lookup method for the items in a shipment of the load.
	/// </summary>
    /// <param name="_ctrl">
    /// The parameter of type <c>FormStringControl</c>.
    /// </param>
	/// <param name="_shipmentId">
	/// The shipment of the load containing the items.
	/// </param>
    public static void lookupLoadItems(FormStringControl _ctrl, WHSShipmentId _shipmentId)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        sysTableLookup          = SysTableLookup::newParameters(tableNum(WHSLoadLine), _ctrl);
        query                   = new Query();
        queryBuildDataSource    = query.addDataSource(tableNum(WHSLoadLine));

        sysTableLookup.addLookupfield(fieldNum(WHSLoadLine, ItemId));
        sysTableLookup.addLookupMethod(tableMethodStr(WHSLoadLine, displayItemName));
        queryBuildDataSource.addRange(fieldNum(WHSLoadLine, ShipmentId)).value(SysQuery::value(_shipmentId));
        queryBuildDataSource.addGroupByField(fieldNum(WHSLoadLine, ItemId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextStopNum</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds the next stop number of a load.
	/// </summary>
	/// <param name="_loadId">
	/// Id of the load.
	/// </param>
	/// <returns>
	/// The next stop number of the load.
	/// </returns>
    static TMSStopNum nextStopNum(WHSLoadId _loadId)
    {
        WHSShipmentTable    shipmentTable;

        select firstonly StopNum from shipmentTable
            order by shipmentTable.StopNum desc
            where shipmentTable.LoadId == _loadId;

        return shipmentTable.StopNum + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfLoadsForOrderNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Counts the amount of loads an order is associated with.
    /// </summary>
    /// <param name="_orderNum">
    /// The Order Number.
    /// </param>
    /// <param name="_inventTransType">
    /// The inventTransType for the order.
    /// </param>
    /// <returns>
    /// A count representing the amount of loads the order is associated with.
    /// </returns>
    /// <remarks>
    /// The method only searches through load lines that are not transport requests.
    /// </remarks>
    public static NumberOfRecords numberOfLoadsForOrderNum(
        WHSOrderNum _orderNum,
        InventTransType _inventTransType
    )
    {
        WHSLoadTable    loadTable;
        WHSLoadLine     loadLine;

        select count(RecId)
            from loadTable
            exists join loadLine
                where loadLine.LoadId           == loadTable.LoadId
                   && loadLine.OrderNum         == _orderNum
                   && loadLine.InventTransType  == _inventTransType
                   && loadLine.TransportRequest == NoYes::No;

        return loadTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLoadLinesShipConfirmInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional load lines fields during ship confirm process.
    /// </summary>
    /// <param name="_loadId">
    /// Load to be ship confirmed.
    /// </param>
    /// <param name="_loadClosedUTCDateTime">
    /// Date and time for closing the load.
    /// </param>
    private static void setLoadLinesShipConfirmInfo(WHSLoadId _loadId, WHSLoadClosedUTCDateTime _loadClosedUTCDateTime)
    {
        WHSLoadLine loadLine;
        boolean preventZeroQuantity = WHSLoadLine::preventZeroQuantity();

        ttsbegin;
        while select forupdate loadLine
            where loadLine.LoadId == _loadId
            && (!preventZeroQuantity || loadLine.Qty != 0)
        {
            loadLine.LoadClosedUTCDateTime = _loadClosedUTCDateTime;
            loadLine.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidateEmptyLoadLines</Name>
				<Source><![CDATA[
    private static void invalidateEmptyLoadLines(WHSLoadId _loadId)
    {
        WHSLoadLine loadLine;

        ttsbegin;

        loadLine.skipDataMethods(true);

        update_recordset loadLine
            setting Invalid = true
            where loadLine.LoadId == _loadId
            && loadLine.Qty == 0;

        WHSInstrumentationLogger logger = WHSInstrumentationLogger::createLogger(tableId2Name(loadline.TableId));
        logger.logInformation(strFmt('{"Total quantity of invalidated load lines is:%1"}', loadLine.RowCount()));
        logger.logCallStack();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLoadShipConfirmInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional load fields during ship confirm process.
    /// </summary>
    /// <param name="_loadId">
    /// Load to be ship confirmed.
    /// </param>
    /// <param name="_loadShipConfirmUTCDateTime">
    /// Date and time for ship confirming the load
    /// </param>
    private static void setLoadShipConfirmInfo(WHSLoadId _loadId, WHSLoadShipConfirmUTCDateTime _loadShipConfirmUTCDateTime)
    {
        ttsbegin;
        boolean mustCheckForLoadLineQty = WHSLoadLine::preventZeroQuantity();

        if (!_loadId
            || !WHSLoadTable::exist(_loadId))
        {
            throw error(strFmt("@WAX:Error_LoadDoesNotExist", _loadId));
        }

        if (!mustCheckForLoadLineQty)
        {
            WHSLoadStatusUpdater::newFromLoadId(_loadId).updateWhenLoadShipConfirm(_loadShipConfirmUTCDateTime);
        }
        else
        {
            if (_loadShipConfirmUTCDateTime == utcdatetimeNull())
            {
                // This shouldn't happen - but throwing an error may block customers.
                WHSLoadTable loadtable = WHSLoadTable::find(_loadId);
                WHSInstrumentationLogger::createLogger(tableId2Name(loadtable.TableId))
                    .shipConfirmActivities()
                    .loadTableSetLoadShipConfirmInfo(loadtable, _loadShipConfirmUTCDateTime);
            }

            WHSLoadStatusUpdater loadUpdater = WHSLoadStatusUpdater::newFromLoadId(_loadId);
            if (WHSLoadTable::isAnyLoadLineQtyPositive(_loadId))
            {
                if (loadUpdater.updateWhenLoadShipConfirm(_loadShipConfirmUTCDateTime))
                {
                    WHSLoadTable::invalidateEmptyLoadLines(_loadId);
                } 
            }
            else
            {
                throw error(strFmt("@WAX:LoadTableWarningAllLinesZero", _loadId));
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOriginInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the origin information on the load header.
    /// </summary>
    /// <param name="_loadId">
    /// <c>WHSLoadId</c> value for the load line to update.
    /// </param>
    /// <param name="_loadLineAddRemove">
    /// <c>AddRemove</c> enum value describing whether a load line has just been added or removed.
    /// </param>
    /// <remarks>
    /// Load should be selected for update before calling this method.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// An unsupported transaction type is discovered.
    /// </exception>
    public static void setOriginInfo(WHSLoadId _loadId, AddRemove _loadLineAddRemove)
    {
        ttsbegin;
        WHSLoadTable loadTable = WHSLoadTable::find(_loadId, true);

        if (loadTable && loadTable.assignOriginInfo(_loadLineAddRemove))
        {
            loadTable.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRouteSegmentsActualShipDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the actual ship date and time of the related, if any, route segments.
    /// </summary>
    /// <param name="_loadId">
    /// Load to be ship confirmed.
    /// </param>
    /// <param name="_actualShipUTCDateTime">
    /// Date and time for ship confirming the load
    /// </param>
    private static void setRouteSegmentsActualShipDateTime(WHSLoadId _loadId, TMSActualShipUTCDateTime _actualShipUTCDateTime)
    {
        TMSRouteSegment     tmsRouteSegment;
        TMSRouteSegmentLoad tmsRouteSegmentLoad;

        ttsbegin;

        update_recordset tmsRouteSegment
            setting ActualShipUTCDateTime = _actualShipUTCDateTime
            exists join tmsRouteSegmentLoad
                where tmsRouteSegmentLoad.Id            == _loadId
                   && tmsRouteSegmentLoad.RouteCode     == tmsRouteSegment.RouteCode
                   && tmsRouteSegmentLoad.Sequence      == tmsRouteSegment.Sequence;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipConfirmInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional load, load lines, route segments and shipments fields during ship confirm process.
    /// </summary>
    /// <param name="_loadId">
    /// Load to be ship confirmed.
    /// </param>
    /// <param name="_loadShipDate">
    /// date for shipping load.
    /// </param>
    public static void setShipConfirmInfo(
        WHSLoadId                  _loadId,
        WHSShipConfirmUTCDateTime  _loadShipDate)
    {
        if (!_loadId)
        {
            throw error(Error::missingMethodParameter(tablePName(WHSLoadTable), funcName(), fieldPName(WHSLoadTable, LoadId)));
        }

        ttsbegin;

        if (WHSLoadLine::preventZeroQuantity())
        {
            WHSLoadLine::reduceQuantitiesForLoadToMatchPickedQuantity(_loadId);
            WHSLoadTable::setLoadLinesShipConfirmInfo(_loadId, _loadShipDate);
            WHSLoadTable::setLoadShipConfirmInfo(_loadId, _loadShipDate);
            WHSLoadTable::setShipmentsShipConfirmInfo(_loadId, _loadShipDate);
        }
        else 
        {
            WHSLoadTable::setLoadShipConfirmInfo(_loadId, _loadShipDate);
            WHSLoadTable::setLoadLinesShipConfirmInfo(_loadId, _loadShipDate);
            WHSLoadTable::setShipmentsShipConfirmInfo(_loadId, _loadShipDate);
            WHSLoadLine::reduceQuantitiesForLoadToMatchPickedQuantity(_loadId);
        }

        if (WHSLoadTable::find(_loadId).canUseTMSActions())
        {
            WHSLoadTable::setRouteSegmentsActualShipDateTime(_loadId, _loadShipDate);
        }

        WHSLoadTable::updateCatchWeightTagShipStatus(_loadId);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCatchWeightTagShipStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the ship status for the related catch weight tags.
    /// </summary>
    /// <param name = "_loadId">Load ID to identify the catch weight tags.</param>
    private static void updateCatchWeightTagShipStatus(WHSLoadId _loadId)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            return;
        }

        WHSLoadLine loadLine;

        while select loadLine
            where loadLine.LoadId == _loadId
        {
            WHSCatchWeightTagLastRegistration::registerShippedStatus(loadLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipmentsShipConfirmInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets shipments fields during ship confirm process
    /// </summary>
    /// <param name="_loadId">
    /// Load for with we printed BOL
    /// </param>
    /// <param name="_shipConfirmUTCDateTime">
    /// Date and time for ship confirming the load
    /// </param>
    private static void setShipmentsShipConfirmInfo(WHSLoadId _loadId, WHSShipConfirmUTCDateTime _shipConfirmUTCDateTime)
    {

        boolean             preventZeroQuantity = WHSLoadLine::preventZeroQuantity();

        boolean             mustInitStatusFromLoad;
        WHSShipmentStatus   newShipmentStatus;

        WHSLoadTable load = WHSLoadTable::find(_loadId);

        if (load.LoadDirection == WHSLoadDirection::Inbound)
        {
            mustInitStatusFromLoad = true;
            newShipmentStatus = WHSShipmentStatusCalculator::determineInboundShipmentStatusFromLoadStatus(load.LoadStatus);
        }

        using (var context = mustInitStatusFromLoad ? WHSLoadTableInitializeShipmentConfirmInfoForUpdateStatusFromLoadStatusContext::construct().setShipmentStatus(newShipmentStatus) : null)
        {
            ttsbegin;

            WHSShipmentTable    shipmentTable;
            WHSLoadLine         loadLine;

            while select forupdate shipmentTable
                where shipmentTable.LoadId == _loadId
                exists join loadLine
                    where shipmentTable.ShipmentId == loadLine.ShipmentId
                        && (!preventZeroQuantity || loadLine.Qty != 0)
            {
                WHSLoadTable::initializeShipmentConfirmInfoForUpdate(shipmentTable, _shipConfirmUTCDateTime);
                shipmentTable.update();

                if (preventZeroQuantity)
                {
                    shipmentTable.deleteWaveLines();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeShipmentConfirmInfoForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes shipment fields during confirm process.
    /// </summary>
    /// <param name = "_shipmentTable">The shipment record.</param>
    /// <param name = "_shipConfirmUTCDateTime">The date and time for ship confirming the load.</param>
    protected static void initializeShipmentConfirmInfoForUpdate(
        WHSShipmentTable            _shipmentTable,
        WHSShipConfirmUTCDateTime   _shipConfirmUTCDateTime)
    {
        var initStatusFromLoadContext = WHSLoadTableInitializeShipmentConfirmInfoForUpdateStatusFromLoadStatusContext::current();
        WHSShipmentStatus shipmentStatus = initStatusFromLoadContext ? initStatusFromLoadContext.shipmentStatus() : WHSShipmentStatus::Shipped;

        _shipmentTable.ShipmentStatus            = shipmentStatus;
        _shipmentTable.ShipConfirmUTCDateTime    = _shipConfirmUTCDateTime;
        _shipmentTable.DropOffUTCDateTime        = DateTimeUtil::newDateTime(_shipmentTable.displayDropOffDate(), DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()), _shipmentTable.timeZoneSite());
        _shipmentTable.scac                      = TMSCarrier::find(_shipmentTable.CarrierCode).scac;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsOverrideLocation</Name>
				<Source><![CDATA[
    /// <summary>
	/// Updates destination of a load defined in the transport request.
	/// </summary>
	/// <param name="_loadId">
	/// Id of the load.
	/// </param>
	/// <param name="_address">
	/// Address of the transport request.
	/// </param>
	/// <param name="_hubCode">
	/// Hub master code of the transport request.
	/// </param>
	/// <param name="_inventLocationId">
	/// Warehouse id.
	/// </param>
    public static void tmsOverrideLocation(WHSLoadId           _loadId,
                                    TMSAddressPhone     _address,
                                    TMSHubMasterCode    _hubCode,
                                    InventLocationId    _inventLocationId)
    {
        WHSLoadTable loadTable = WHSLoadTable::find(_loadId, true);

        ttsbegin;

        TMSTransportRequestTable sourceTransportRequest = TMSTransportRequestTable::createAsSourceRequestFromLoad(loadTable, _address, _hubCode);

        TMSTransportRequestTable destinationTransportRequest = TMSTransportRequestTable::createAsDestinationRequestFromLoad(loadTable, _address, _hubCode);

        ttscommit;

        WHSLoadLine loadLine;

        while select forupdate loadLine
            where loadLine.LoadId == _loadId
        {
            ttsbegin;
            
            TMSTransportRequestLine sourceTransportLine = WHSLoadTable::createSourceTransportRequestLine(loadLine, sourceTransportRequest);

            TMSTransportRequestLine destinationTransportLine = WHSLoadTable::createDestinationTransportRequestLine(loadLine, destinationTransportRequest, sourceTransportLine);
            
            loadLine.updateSourceTransportData(sourceTransportRequest);

            ttscommit;
        }

        ttsbegin;
        
        loadTable.updateSourceTransportData(sourceTransportRequest);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceTransportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load with a source transport request data.
    /// </summary>
    /// <param name = "_sourceTransportRequest">A source transport request.</param>
    protected void updateSourceTransportData(TMSTransportRequestTable _sourceTransportRequest)
    {
        if (this.isTransportRequest() == NoYes::Yes)
        {
            this.OrderNum = _sourceTransportRequest.TransportRequestId;
        }

        this.initDestinationAddress(_sourceTransportRequest.destinationAddress(), _sourceTransportRequest.DestinationHubCode);
        
        if (!this.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotWriteRecordInTable", tablePName(WHSLoadTable)));
        }
        else
        {
            this.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSourceTransportRequestLine</Name>
				<Source><![CDATA[
    private static TMSTransportRequestLine createSourceTransportRequestLine(WHSLoadLine _loadLine, TMSTransportRequestTable _sourceTransportRequest)
    {
        TMSTransportRequestLine sourceTransportLine;

        sourceTransportLine.initFromTransportRequest(_sourceTransportRequest.TransportRequestId);
        sourceTransportLine.initSourceTransportRequestLineFromLoadLine(_loadLine);
        WHSLoadTable::sourceTransportRequestLineInitialized(_loadLine, _sourceTransportRequest, sourceTransportLine);

        if (!sourceTransportLine.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(TMSTransportRequestLine)));
        }
        else
        {
            sourceTransportLine.insert();
        }

        return sourceTransportLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDestinationTransportRequestLine</Name>
				<Source><![CDATA[
    private static TMSTransportRequestLine createDestinationTransportRequestLine(WHSLoadLine _loadLine, TMSTransportRequestTable _destinationTransportRequest, TMSTransportRequestLine _sourceTransportLine)
    {
        TMSTransportRequestLine destinationTransportLine;

        destinationTransportLine.initFromTransportRequest(_destinationTransportRequest.TransportRequestId);
        destinationTransportLine.initDestinationTransportRequestLineFromLoadLine(_loadLine);
        WHSLoadTable::destinationTransportRequestLineInitialized(_loadLine, _destinationTransportRequest, _sourceTransportLine, destinationTransportLine);

        if (!destinationTransportLine.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(TMSTransportRequestLine)));
        }
        else
        {
            destinationTransportLine.insert();
        }

        return destinationTransportLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsSetTransTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the transportation template Id on the load based on related source document.
    /// </summary>
    /// <param name="_loadId">
    /// Id of the load to update.
    /// </param>
    /// <remarks>
    /// Set the transportation template Id to blank, if it is different for at least 2 related source documents.
    /// </remarks>
    public static void tmsSetTransTemplate(WHSLoadId _loadId)
    {
        if (!_loadId)
        {
            return;
        }

        ttsbegin;

        WHSLoadTable loadTable = WHSLoadTable::find(_loadId, true);
        if (loadTable.assignTransTemplate())
        {
            loadTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadStatus</Name>
				<Source><![CDATA[
    /// <summary>
	/// Updates status of the load.
	/// </summary>
	/// <param name="_loadId">
	/// Id of the load.
	/// </param>
	/// <param name="_loadStatus">
	/// New status of the load.
	/// </param>
    /// <param name="_disableCache">
    /// Determines if the <c>WHSLoadTable</c> record is allowed to be selected using cache or not.
    /// </param>
    public static void updateLoadStatus(
        WHSLoadId       _loadId,
        WHSLoadStatus   _loadStatus,
        boolean         _disableCache = false)
    {
        if (_loadId)
        {
            ttsbegin;

            WHSLoadTable loadTable = WHSLoadTable::find(_loadId, true, _disableCache);
            
            if (loadTable.LoadStatus != _loadStatus)            
            {
                loadTable.LoadStatus = _loadStatus;
                loadTable.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventTransTypeMatches</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that lines being added to the load are not of a different order type than lines currently
    /// on the load, the exception to this being that sales and outbound transfers can be together on the same load.
    /// </summary>
    /// <param name="_loadId">
    /// The existing load that is being evaluated.
    /// </param>
    /// <param name="_inventTransType">
    /// The inventTransType of the lines that are being added to the load.
    /// </param>
    /// <returns>
    /// true if the inventTransType matches that of the load lines currently on the load; otherwise, false.
    /// </returns>
    public static boolean validateInventTransTypeMatches(
        WHSLoadId       _loadId,
        InventTransType _inventTransType)
    {
        WHSLoadLine locLoadLine;
        boolean     ret = true;

        select firstonly RecId, InventTransType from  locLoadLine
            where locLoadLine.LoadId ==_loadId;

        if (locLoadLine.RecId)
        {
            if (!WHSLoadTable::acceptInventTransType(_inventTransType, locLoadLine.InventTransType))
            {
                ret = checkFailed("@WAX5612");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acceptInventTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if it is acceptable to add an order type to a load, given existing order types.
    /// </summary>
    /// <param name="_loadId">
    /// The existing load that is being evaluated.
    /// </param>
    /// <param name="_inventTransTypeBeingAdded">
    /// The inventTransType of the lines that are being added to the load.
    /// </param>
    /// <param name="_inventTransTypeExisting">
    /// The inventTransType of an existing line on the load.
    /// </param>
    /// <returns>
    /// true if the inventTransType matches that of the load lines currently on the load; otherwise, false.
    /// </returns>
    protected static boolean acceptInventTransType(
        InventTransType _inventTransTypeBeingAdded,
        InventTransType _inventTransTypeExisting)
    {
        switch (_inventTransTypeBeingAdded)
        {
            case InventTransType::Sales:
            case InventTransType::TransferOrderShip:
                if (_inventTransTypeExisting != InventTransType::Sales
                    && _inventTransTypeExisting != InventTransType::TransferOrderShip)
                {
                    return false;
                }
                break;

            default:
                if (_inventTransTypeBeingAdded != _inventTransTypeExisting)
                {
                    return false;
                }
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoadCanBeLoaded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the load can be loaded.
    /// </summary>
    /// <param name = "_loadId">The current load ID.</param>
    /// <param name = "_excludeContainerId">ID of the container to be excluded when searching for a container with open status.</param>
    /// <returns>True, if the load can be loaded; otherwise false.</returns>
    public static boolean validateLoadCanBeLoaded(WHSLoadId _loadId, WHSContainerId _excludeContainerId = '')
    {
        return !WHSLoadTable::hasOpenContainer(_loadId, _excludeContainerId) && WHSLoadTable::isAllQtyPicked(_loadId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignSchedShipDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Assign a scheduled ship date and time.
    /// </summary>
    /// <param name="_LoadSchedShipUTCDateTime">
    /// The parameter of type <c>WHSLoadReadyToShipUTCDateTime</c>.
    /// </param>
    /// <returns>
    ///     Return true if <c>WHSLoadTable</c> buffer was modified; otherwise, false
    /// </returns>
    public boolean assignSchedShipDateTime(WHSLoadReadyToShipUTCDateTime _LoadSchedShipUTCDateTime)
    {
        boolean isModified = false;
        
        if (_LoadSchedShipUTCDateTime)
        {
            this.LoadSchedShipUTCDateTime = _LoadSchedShipUTCDateTime;
            isModified = true;
        }
        
        return isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGenerateDeliverySlip_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current WHSLoadTable contains a load line that is associated with a sales line that should generate a delivery slip.
    /// Besides, the WHSLoadTable also must be shipped and outbound.
    /// </summary>
    /// <returns>
    /// True if load is outbound, shipped and a delivery slip is found on the sales lines that are associated
    /// with the any of the load lines from this load; otherwise; false.
    /// </returns>
    public boolean canGenerateDeliverySlip_BR()
    {
        SalesLine                    salesLine;
        SalesLine_BR                 salesLine_BR;
        WHSLoadLine                  loadLine;
        WHSLoadLineFiscalDocument_BR loadLineFiscalDocument;
        FiscalDocument_BR            fiscalDocument;

        if (WHSShipConfirm::isPackingSlipEnabledForBuffer(this) == false)
        {
            return false;
        }

        select firstonly RecId from loadLine
            where loadLine.LoadId == this.LoadId
               && loadLine.InventTransType == InventTransType::Sales
            exists join salesLine
                where salesLine.InventTransId == loadLine.InventTransId
            exists join salesLine_BR
                where salesLine_BR.SalesLine == salesLine.RecId
                   && salesLine_BR.DeliveryCFOPTable_BR != 0
            notexists join loadLineFiscalDocument
                where loadLineFiscalDocument.whsLoadLine == loadLine.RecId
            exists join fiscalDocument
                where fiscalDocument.RecId == loadLineFiscalDocument.FiscalDocument_BR
                    && fiscalDocument.RefTableId == tableNum(CustPackingSlipJour);

        return loadLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGenerateInvoice_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if this load can be invoiced.
    /// </summary>
    /// <returns>
    /// True if the load can be invoiced; otherwise; false.
    /// </returns>
    public boolean canGenerateInvoice_BR()
    {
        SalesLine                    salesLine;
        WHSLoadLine                  loadLine;
        WHSLoadLineFiscalDocument_BR loadLineFiscalDocument;
        FiscalDocument_BR            fiscalDocument;

        if (WHSShipConfirm::isPackingSlipEnabledForBuffer(this) == false || this.canGenerateDeliverySlip_BR() == true)
        {
            return false;
        }

        select firstonly RecId from loadLine
            where loadLine.LoadId == this.LoadId
               && loadLine.InventTransType == InventTransType::Sales
            exists join salesLine
                where salesLine.InventTransId == loadLine.InventTransId
            notexists join loadLineFiscalDocument
                where loadLineFiscalDocument.whsLoadLine == loadLine.RecId
            exists join fiscalDocument
                where fiscalDocument.RecId == loadLineFiscalDocument.FiscalDocument_BR
                    && fiscalDocument.RefTableId == tableNum(CustInvoiceJour);

        return loadLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalSalesQtyInventQtyForSalesLine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales line quantity and the inventory quantity of the sale line which is picked on the load (WMS).
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line for which the method needs to find out the total sales line quantity and inventory quantity.
    /// </param>
    /// <returns>
    /// The sales line and inventory quantities that belong to the Load.
    /// </returns>
    /// <remarks>
    /// The same sales line may be available in different load lines of the same load.
    /// </remarks>
    public container getTotalSalesQtyInventQtyForSalesLine_BR(SalesLine _salesLine)
    {
        WHSLoadLine  whsLoadLine;
        WHSPickedQty inventoryPickedQty;
        WHSPickedQty salesLineQuantity;

        select sum(PickedQty) from whsLoadLine
            where whsLoadLine.LoadId == this.LoadId
               && whsLoadLine.InventTransId == _salesLine.InventTransId
               && whsLoadLine.InventTransType == InventTransType::Sales;

        inventoryPickedQty = whsLoadLine.PickedQty;

        salesLineQuantity = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_salesLine.ItemId,
																								  _salesLine.InventDimId,
																								  inventoryPickedQty,
                                                                                                  WHSCatchWeightHelper::inventHandlingUnitId(_salesLine.ItemId),
																								  _salesLine.SalesUnit,
																								  NoYes::Yes);

        return [salesLineQuantity, inventoryPickedQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDeliverySlipLines_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the current load has at least one load line that refers to a sales line
    /// which uses a delivery slip cfop.
    /// </summary>
    /// <returns>
    /// True if the current load has at least one load line that refers to a sales line that
    /// uses a delivery slip cfop, otherwise, false.
    /// </returns>
    private boolean hasDeliverySlipLines_BR()
    {
        WHSLoadLine                  loadLine;
        SalesLine                    salesLine;
        SalesLine_BR                 salesLine_BR;

        select firstonly RecId from loadLine
            where loadLine.LoadId == this.LoadId
               && loadLine.InventTransType == InventTransType::Sales
            exists join salesLine
                where salesLine.InventTransId == loadLine.InventTransId
            exists join salesLine_BR
                where salesLine_BR.SalesLine == salesLine.RecId
                   && salesLine_BR.DeliveryCFOPTable_BR != 0;

        return loadLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesToBeInvoiced_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the current load has load lines that have not been invoiced.
    /// </summary>
    /// <returns>
    /// true if the current load has load lines that have not been invoiced; otherwise, false.
    /// </returns>
    private boolean hasLinesToBeInvoiced_BR()
    {
        WHSLoadLineFiscalDocument_BR loadLineFiscalDocument;
        WHSLoadLine                  loadLine;
        FiscalDocument_BR            fiscalDocument;

        select count(RecId) from loadLine
            where loadLine.LoadId == this.LoadId
        notexists join loadLineFiscalDocument
            where loadLineFiscalDocument.whsLoadLine == loadLine.RecId
        exists join fiscalDocument
            where fiscalDocument.RecId == loadLineFiscalDocument.FiscalDocument_BR
                && fiscalDocument.RefTableId == tableNum(CustInvoiceJour);

        return loadLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the type of orders that are related to this load.
    /// </summary>
    /// <returns>
    /// Returns a value indicating the type of orders that are related to the current load.
    /// </returns>
    /// <remarks>
    /// By now, the load can just be associated to one type of order, so, the method just needs
    /// to return the invent trans type of any load line that is related to this load.
    /// </remarks>
    public display InventTransType inventTransType_BR()
    {
        WHSLoadLine loadLine;

        select firstonly InventTransType from  loadLine
            where loadLine.LoadId == this.LoadId;

        return loadLine.InventTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceStatus_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the current load still has load lines to be invoiced or delivery slip to be posted.
    /// </summary>
    /// <returns>
    /// The invoice status of the load.
    /// </returns>
    /// <remarks>
    /// This method will return 'not calculated' if the invent trans type of
    /// the load is not sales nor transfer order issue.
    /// </remarks>
    [SysClientCacheDataMethodAttribute(true)]
    public display WHSLoadInvoiceStatus_BR invoiceStatus_BR()
    {
        InventTransType loadInventTransType = this.inventTransType_BR();

        if (loadInventTransType == InventTransType::TransferOrderShip)
        {
            if (this.isLoadShipped())
            {
                return WHSLoadInvoiceStatus_BR::InvoicedPosted;
            }
            else
            {
                return WHSLoadInvoiceStatus_BR::ToBePosted;
            }
        }
        else if (loadInventTransType == InventTransType::Sales)
        {
            if (this.isLoadShipped() && this.hasLinesToBeInvoiced_BR() == false)
            {
                return WHSLoadInvoiceStatus_BR::InvoicedPosted;
            }
            else if (this.isDeliveryPosted_BR())
            {
                return WHSLoadInvoiceStatus_BR::DeliveryPosted;
            }
            else
            {
                return WHSLoadInvoiceStatus_BR::ToBePosted;
            }
        }

        return WHSLoadInvoiceStatus_BR::NotCalculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeliveryPosted_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if all sales lines that use a delivery slip cfop and that are
    /// linked to a load line of the current load have a delivery slip posted.
    /// </summary>
    /// <returns>
    /// True if all the sales lines that use a delivery slip cfop and that are linked to any
    /// load line of the current load have a delivery slip posted; otherwise; false.
    /// </returns>
    /// <remarks>
    /// If the load does not contain any line that refers to a sales line using a delivery slip cfop,
    /// then, this method returns false.
    /// </remarks>
    private boolean isDeliveryPosted_BR()
    {
        return WHSShipConfirm::isPackingSlipEnabledForBuffer(this) && this.hasDeliverySlipLines_BR() && this.canGenerateDeliverySlip_BR() == false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existShippedLoadForOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a shipped load exists for a given <c>InventTransId</c>.
    /// </summary>
    /// <param name="_transId">
    /// The <c>InventTransId</c> to check.
    /// </param>
    /// <returns>
    /// True if a load exists; otherwise false.
    /// </returns>
    public static boolean existShippedLoadForOrderLine(InventTransId _transId)
    {
        WHSLoadTable loadTable;
        WHSLoadLine  loadLine;

        select firstonly RecId from loadTable
            where loadTable.LoadStatus == WHSLoadStatus::Shipped
            exists join loadLine
                where loadLine.InventTransId == _transId
                &&    loadLine.LoadId        == loadTable.LoadId;

        return loadTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOnlyTransportRequestLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the load has at least one line of transportation request type and there is no other lines of other type.
    /// </summary>
    /// <param name="_loadId">
    ///    The load ID to check.
    /// </param>
    /// <returns>
    ///   true if the load only has at least one line of transportation request type and there is no other lines of other type; otherwise, false.
    /// </returns>
    public static boolean hasOnlyTransportRequestLine(WHSLoadId _loadId)
    {
        WHSLoadLine whsLoadLine;
        boolean ret = false;
        select firstonly RecId from whsLoadLine
        where whsLoadLine.LoadId == _loadId
            && whsLoadLine.TransportRequest == NoYes::No;
        if (!whsLoadLine.RecId)
        {
            select firstonly RecId from whsLoadLine
            where whsLoadLine.LoadId == _loadId
               && whsLoadLine.TransportRequest == NoYes::Yes;
            ret = whsLoadLine.RecId != 0;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTMSProcessBaseForLoadConfirmation</Name>
				<Source><![CDATA[
    [Hookable]
    private static TMSProcessXML_Base createTMSProcessBaseForLoadConfirmation(
        WHSLoadId                 _loadId,
        Map                       _shipDateMap)
    {
        WHSLoadTable            loadTable = WHSLoadTable::find(_loadId);
        TMSProcessXML_Base      processXML = TMSProcessXML_Base::construct(TMSRecordType::Load);

        WHSLoadLine loadLine = WHSLoadLine::findFirstForLoadId(loadTable.LoadId);

        Common orderHeader = loadLine.orderHeader();
        InventLocation warehouse = InventLocation::find(loadLine.warehouse());

        TMSSourceDocument tmsSourceDocument = TMSSourceDocument::construct(orderHeader);
        tmsSourceDocument.initializeProcessXML(processXML);
        tmsSourceDocument.initializeAddressesOnTMSProcessXML(
            processXML,
            TMSAddressPhone::initFromInventLocation(warehouse),
            loadTable.destinationAddress());

        processXML.parmId(loadTable.LoadId);
        processXML.initShippingDimensions(
            loadTable.effectiveGrossWeight(),
            loadTable.effectiveTotalVolumeInLoad(),
            loadTable.displayTotalAmount(),
            loadTable.tmsDisplayEquipmentCode());

        WHSSTCCCode whsSTCC;
        WHSLTLClassCode whsLTL;

        [whsSTCC, whsLTL] = TMSAutoRouteAssignment::findLoadSTCCandLTL(loadTable.LoadId);

        processXML.parmLTLClass(whsLTL);
        processXML.parmSTCC(whsSTCC);

        processXML.parmRecordType(TMSRecordType::Load);
        processXML.initCarrierFields(loadTable.CarrierCode, loadTable.CarrierServiceCode, loadTable.CarrierGroupCode, loadTable.ModeCode, loadTable.TransportationTemplateId);

        if (!_shipDateMap || !_shipDateMap.exists(loadTable.LoadId))
        {
            throw error(_shipDateMap.elements() > 1 ? strFmt("@TRX1864", loadTable.LoadId, loadTable.RouteCode) : strFmt("@TRX2706", loadTable.LoadId));
        }

        processXML.parmShipDateTime(_shipDateMap.lookup(loadTable.LoadId));
        processXML.parmInventSiteId(warehouse.InventSiteId);
        processXML.parmInventLocationId(warehouse.InventLocationId);
        processXML.parmCreateRoute(true);

        if (TMSCarrier::find(loadTable.CarrierCode).RatingEnabled == NoYes::Yes)
        {
            processXML.parmCommunicationType(TMSCommunicationType::Confirmation);
        }
        else
        {
            processXML.parmCommunicationType(TMSCommunicationType::Apportionment);
        }

        return processXML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsLoadConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the load using TMS
    /// </summary>
    /// <param name="_loadId">
    /// Load id that is being processed
    /// </param>
    /// <param name="_shipDateMap">
    /// Map containing shipment dates
    /// </param>
    /// <returns>
    /// true if route was ship confirmed; otherwise, false.
    /// </returns>
    public static boolean tmsLoadConfirmation(
        WHSLoadId                 _loadId,
        Map                       _shipDateMap)
    {
        var processXML = WHSLoadTable::createTMSProcessBaseForLoadConfirmation(_loadId, _shipDateMap);
        processXML.execute();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get Shipment Ids
    /// </summary>
    /// <returns>Shipment Ids</returns>
    public container getShipmentIds()
    {
        WHSLoadLine loadLine;
        container ret;

        while select loadLine
                group by ShipmentId
                where loadLine.LoadId == this.LoadId
        {
            if (loadLine.ShipmentId)
            {
                ret += loadLine.ShipmentId;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record from the shipment.
    /// </summary>
    /// <param name="_shipmentTable">
    /// Shipment to initialize from.
    /// </param>
    public void initFromShipment(WHSShipmentTable _shipmentTable)
    {
        this.InventSiteId                  = _shipmentTable.InventSiteId;
        this.InventLocationId              = _shipmentTable.InventLocationId;
        this.LoadDirection                 = _shipmentTable.LoadDirection;
        this.CarrierCode                   = _shipmentTable.CarrierCode;
        this.CarrierServiceCode            = _shipmentTable.CarrierServiceCode;
        this.BrokerCode                    = _shipmentTable.BrokerCode;
        this.ModeCode                      = _shipmentTable.ModeCode;
        this.LoadArrivalUTCDateTime        = _shipmentTable.dropOffDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssociableToTender</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if transportation tenders can be set for this <c>WHSLoadTable</c> record.
    /// </summary>
    /// <returns>true if an associated <c>TMSCarrier</c> record exists and it is set to have load tenders on it; otherwise, false.</returns>
    public boolean isAssociableToTender()
    {
        TMSCarrier tmsCarrier = TMSCarrier::find(this.CarrierCode);
        return tmsCarrier.RecId != 0 && tmsCarrier.LoadTender != TMSLoadTender::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalVolumeInLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display the total container volume in the load which has containers for the shipment.
    /// And also includes additional item volume which has no container used, but item exists in the load line.
    /// </summary>
    /// <returns>
    /// The total volume in the load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display Volume displayTotalVolumeInLoad()
    {
        return this.getTotalOuterContainerVolume() + this.getTotalVolumeOfItemsOutsideContainers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalOuterContainerVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total volume of outer containers in the load.
    /// </summary>
    /// <returns>
    /// The total volume of outer containers in the load.
    /// </returns>
    public Volume getTotalOuterContainerVolume()
    {
        WHSContainerType    containerType;
        WHSContainerTable   containerTable;
        WHSShipmentTable    shipmentTable;        

        select sum(ContainerVolume) from containerType
            join TableId from containerTable
                where containerTable.ContainerTypeCode == containerType.ContainerTypeCode
                    && !containerTable.ParentContainerId
                join TableId from shipmentTable
                    where shipmentTable.ShipmentId == containerTable.ShipmentId
                        && shipmentTable.LoadId == this.LoadId;

        Volume volume = containerType.ContainerVolume;

        WHSPhysDimUOM       physDimUOM;
        WHSContainerLine    containerLine;
        WHSContainerLine    anotherContainerLine;

        //iterate through containers that are units of measure
        while select forceSelectOrder forceNestedLoop TableId from shipmentTable
                where shipmentTable.LoadId == this.LoadId
            join TableId from containerTable
                where shipmentTable.ShipmentId == containerTable.ShipmentId
                    && !containerTable.ParentContainerId
            join TableId from containerLine
                where containerLine.ContainerId == containerTable.ContainerId
                    && shipmentTable.ShipmentId == containerLine.ShipmentId
            join * from physDimUOM
                where physDimUOM.ItemId == containerLine.ItemId
                    && physDimUOM.UOM == containerLine.UnitId
                    && containerTable.ContainerTypeCode == physDimUOM.UOM
            notexists join anotherContainerLine
                where anotherContainerLine.ContainerId == containerTable.ContainerId
                    && anotherContainerLine.RecId != containerLine.RecId
        {
            volume += physDimUOM.displayVolume();
        }
        
        return volume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalVolumeOfItemsOutsideContainers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total volume of items on the load that are not part of any container.
    /// </summary>
    /// <returns>
    /// The total item volume in the load.
    /// </returns>
    public Volume getTotalVolumeOfItemsOutsideContainers()
    {
        Volume              totalItemVolume;
        WHSLoadLine         loadLine;
        WHSContainerTable   containerTable;

        while select * from loadLine
            where loadLine.LoadId == this.LoadId
                notexists join containerTable
                    where containerTable.ShipmentId == loadLine.ShipmentId
        {
            totalItemVolume += loadLine.displayItemVolume();
        }
    
        return totalItemVolume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAvailableVolumeRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display available volume remaining.
    /// </summary>
    /// <returns>
    /// The available volume remaining in the load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display Volume displayAvailableVolumeRemaining()
    {
        return this.LoadTipVolume - this.displayTotalVolume();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAvailableActualVolumeRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display available actual volume remaining.
    /// </summary>
    /// <returns>
    /// The available actual volume remaining in the load.
    /// </returns>
    public display Volume displayAvailableActualVolumeRemaining()
    {
        return this.LoadTipVolume - this.ActualVolume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>effectiveTotalVolumeInLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns effective total volume in load.
    /// </summary>
    /// <returns>
    /// The effective total volume in load: Actual volume weight if user specified it; otherwise, total volume in load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public Volume effectiveTotalVolumeInLoad()
    {
        return this.ActualVolume ? this.ActualVolume : this.displayTotalVolumeInLoad();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAvailableSystemGrossWeightRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display available system gross weight remaining.
    /// </summary>
    /// <returns>
    /// The available system weight remaining.
    /// </returns>
    public display Weight displayAvailableSystemGrossWeightRemaining()
    {
        return this.LoadTipWeight- this.LoadWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAvailableSystemNetWeightRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display available system net weight remaining.
    /// </summary>
    /// <returns>
    /// The available system net weight remaining.
    /// </returns>
    public display Weight displayAvailableSystemNetWeightRemaining()
    {
        return this.LoadTipWeight - this.LoadNetWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNoLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Check if the load table has line.
    /// </summary>
    /// <returns>True if no line exists; otherwise, false.</returns>
    [SysObsolete('This method has been obsoleted and should no longer be used.', false, 30\06\2018)]
    public boolean hasNoLine()
    {
        WHSLoadLine  whsLoadLine;

        select firstonly RecId from whsLoadLine
            where whsLoadLine.LoadId == this.LoadId;

        return !whsLoadLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyRelatedTransportLoadShipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a shipped transport load is tied to this load.
    /// If partial Shipping is not allowed, this will always return false. 
    /// </summary>
    /// <returns>true if a shipped transport load is tied to this load; otherwise, false</returns>
    public boolean isAnyRelatedTransportLoadShipped()
    {
        WHSTransportLoadLoadedWork transportLoadLoadedWork;
        WHSTransportLoad           transportLoad;
        WHSWorkLine                workLine;
        WHSLoadLine                loadLine;
        if (this.LoadingStrategy == WHSLoadingStrategy::PartialLoadShippingAllowed)
        {
            select firstonly RecId from transportLoad
            where transportLoad.TransportLoadStatus == WHSTransportLoadStatus::Shipped
            exists join transportLoadLoadedWork
                where transportLoadLoadedWork.TransportLoad == transportLoad.RecId
                exists join workLine
                    where workLine.WorkId == transportLoadLoadedWork.WorkId
                    exists join loadLine
                        where loadLine.RecId  == workLine.LoadLineRefRecId
                           && loadLine.LoadId == this.LoadId;

            return transportLoad.RecId != 0;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyRelatedPackingSlipUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a packing slip related to this load has been posted.
    /// </summary>
    /// <returns>true if a packing slip related to this load has been posted; otherwise, false</returns>
    public boolean isAnyRelatedPackingSlipUpdated()
    {
        CustPackingSlipJour  custJour;
        CustPackingSlipTrans custPackingSlipTrans;
        WHSLoadLine          loadLine;
        boolean              ret;

        if (WHSLoadTableIsAnyRelatedPackingSlipUpdatedFlight::instance().isEnabled())
        {
            WHSLoadTableCustPackingSlipJour loadTableCustPackingSlipJour;

            select firstonly RecId from loadTableCustPackingSlipJour
                where loadTableCustPackingSlipJour.WHSLoadTableLoadId == this.LoadId
                   && loadTableCustPackingSlipJour.WHSLoadTableDataAreaId == this.DataAreaId
            exists join custJour
                where custJour.RecId == loadTableCustPackingSlipJour.CustPackingSlipJourRecId
            exists join custPackingSlipTrans
                where custPackingSlipTrans.SalesId == custJour.SalesId
                   && custPackingSlipTrans.PackingSlipId == custJour.PackingSlipId
                   && custPackingSlipTrans.DeliveryDate == custJour.DeliveryDate
                   && custPackingSlipTrans.Qty != 0;

            ret = loadTableCustPackingSlipJour.RecId != 0;

            if (!ret)
            {
                select firstonly RecId from custPackingSlipTrans
                    where custPackingSlipTrans.Qty != 0
                exists join custJour
                    where custJour.SalesId == custPackingSlipTrans.SalesId
                       && custJour.PackingSlipId == custPackingSlipTrans.PackingSlipId
                       && custJour.DeliveryDate == custPackingSlipTrans.DeliveryDate
                exists join loadLine
                    where loadLine.InventTransType == InventTransType::Sales
                       && loadLine.OrderNum == custJour.SalesId
                       && loadLine.LoadId == this.LoadId
                       && loadLine.InventTransId == custPackingSlipTrans.InventTransId
                notexists join loadTableCustPackingSlipJour
                    where loadTableCustPackingSlipJour.CustPackingSlipJourRecId == custJour.RecId;

                ret = custPackingSlipTrans.RecId != 0;
            }
        }
        else
        {
            select firstonly RecId from custPackingSlipTrans
                where custPackingSlipTrans.Qty     != 0
            exists join custJour
                where custJour.SalesId         == custPackingSlipTrans.SalesId
                    && custJour.PackingSlipId  == custPackingSlipTrans.PackingSlipId
            exists join loadLine
                where loadLine.InventTransType == InventTransType::Sales
                    && loadLine.OrderNum       == custJour.SalesId
                    && loadLine.LoadId         == this.LoadId;

            ret = custPackingSlipTrans.RecId != 0;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a load is shipped.
    /// </summary>
    /// <returns>true if load is shipped; otherwise, false</returns>
    public boolean isShipped()
    {
        return this.LoadStatus == WHSLoadStatus::Shipped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a load is received.
    /// </summary>
    /// <returns>true if load is received; otherwise, false</returns>
    public boolean isReceived()
    {
        return this.LoadStatus == WHSLoadStatus::Received || this.LoadReceivingCompletedUTCDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllClosedWorkForLoadIdTiedToTransportLoadsAndConsolidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all of the closed work or consolidated work for the load is tied to a transport load.
    /// </summary>
    /// <returns>
    /// true if all of the closed work or consolidated work for the load is tied to a transport
    /// load or a load is not specified; otherwise, false
    /// </returns>
    public boolean isAllClosedWorkForLoadIdTiedToTransportLoadsAndConsolidated()
    {
        WHSTransportLoadLoadedWork transportLoadLoadedWork;
        WHSWorkTable               workTable;
        WHSWorkLine                workLine;
        WHSLoadLine                loadLine;

        while select firstonly RecId from workTable
            where workTable.WorkStatus == WHSWorkStatus::Closed
            join workLine
                where workLine.WorkId == workTable.WorkId
                exists join loadLine
                    where loadLine.RecId    == workLine.LoadLineRefRecId
                        && loadLine.LoadId  == this.LoadId
                notexists join transportLoadLoadedWork
                    where transportLoadLoadedWork.WorkId == workTable.WorkId
        {
            if (workTable)
            {
                WHSWorkTable consolidatedWork = WHSWorkTable::findLastConsolidatedWork(workLine);
                WHSTransportLoadLoadedWork consolidatedTransportLoadLoadedWork = WHSTransportLoadLoadedWork::findByWorkId(consolidatedWork.WorkId);

                if (!consolidatedTransportLoadLoadedWork)
                {
                    return false;
                }
            }
        }

        return workTable.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertLoadIdNotBlank</Name>
				<Source><![CDATA[
    private void assertLoadIdNotBlank()
    {
        if (this.LoadId == '')
        {
            throw error("@WAX:Error_BlankLoadId");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.assertLoadIdNotBlank();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldLoadStatusBeChangedToPosted</Name>
				<Source><![CDATA[
    private boolean shouldLoadStatusBeChangedToPosted()
    {
        return this.LoadStatus != WHSLoadStatus::Open
            && !this.hasWork();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldLoadStatusBeChangedToInProcessOrLoaded</Name>
				<Source><![CDATA[
    private boolean shouldLoadStatusBeChangedToInProcessOrLoaded()
    {

        return this.LoadStatus == WHSLoadStatus::InProcess
            || this.LoadStatus ==  WHSLoadStatus::Loaded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignStatusInProcessOrLoaded</Name>
				<Source><![CDATA[
    private void assignStatusInProcessOrLoaded()
    {
        if (WHSLoadTable::validateLoadCanBeLoaded(this.LoadId))
        {
            this.LoadStatus = WHSLoadStatus::Loaded;
        }
        else
        {
            this.LoadStatus = WHSLoadStatus::InProcess;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignStatusOnLoadLineUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the load status, if required, when the load line gets updated.
    /// </summary>
    public void assignStatusOnLoadLineUpdated()
    {
        if (this.shouldLoadStatusBeChangedToPosted())
        {
            this.LoadStatus = WHSLoadStatus::Posted;
        }
        else if (this.shouldLoadStatusBeChangedToInProcessOrLoaded())
        {
            this.assignStatusInProcessOrLoaded();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsCatchWeightItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the load has a catch weight item on it or not.
    /// </summary>
    /// <returns>
    /// true if the load contains a catch weight item; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean containsCatchWeightItem()
    {
		if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            WHSLoadLine         loadLine;
            PdsCatchWeightItem  cwItem;

            select firstOnly RecId from cwItem
            exists join loadLine
                where loadLine.ItemId   == cwItem.ItemId
                &&    loadLine.LoadId   == this.LoadId;

            return cwItem.RecId != 0;
        }
		
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAnyLinesWithFlexibleReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the load is related to any work lines with order-committed reservations.
    /// </summary>
    /// <returns>true if the load is related to any work lines with order-committed reservations; false, otherwise.</returns>
    internal boolean existsAnyLinesWithFlexibleReservation()
    {
        WHSLoadLine loadLine;
        WHSWorkLine workLine;

        select firstonly RecId from loadLine
            where loadLine.LoadId == this.LoadId
            exists join workLine
                where  workLine.LoadLineRefRecId == loadLine.RecId
                    && workLine.OrderCommittedInventDimId != '';

        return loadLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HMIMGetRegCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// find the Hazardous materials regulation code associated with the load
    /// </summary>
    /// <returns>Hazardous regulation code</returns>
    public HMIMRegCode HMIMGetRegCode()
    {
        HMIMShipMode      shipMode;
        TMSCarrierService tmsCarrierService;

        select firstonly RegCode from shipMode
            join tmsCarrierService
                where tmsCarrierService.CarrierServiceCode == this.CarrierServiceCode
                    && tmsCarrierService.CarrierCode       == this.CarrierCode
                    && tmsCarrierService.DlvModeId         == shipMode.DlvModeId
                    && shipMode.DlvModeDataAreaId          == curExt2dataareaid(tableNum(DlvMode));

        return shipMode.RegCode ? shipMode.RegCode: WHSParameters::find().HMIMDefaultRegCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HMIMADRPointsTotalForLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates ADR Hazardous material points total for load.
    /// </summary>
    /// <returns>ADR points total</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display Amount HMIMADRPointsTotalForLoad()
    {
        WHSLoadLine      loadLine;
        InventTable      inventTable;
        HMIMItemMaterial itemMaterial;
        Amount           calcPoints;

        while select loadLine
            where loadLine.LoadId == this.LoadId
        join RecId from inventTable
            where inventTable.ItemId == loadLine.ItemId
                && InventTable.HMIMIndicator == NoYes::Yes
        join Qty, Multiplier from itemMaterial
            where itemMaterial.ItemId == inventTable.ItemId
                && itemMaterial.RegCode == this.HMIMGetRegCode()
        {
            calcPoints += loadLine.HMIMHandlingQty() * itemMaterial.Qty *  itemMaterial.Multiplier;
        }

        return calcPoints;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HMIMLimitedQtyNetWeightForLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates Limited Quantity Net Weight for load.
    /// </summary>
    /// <returns>Limited Quantity Net Weight</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display ItemNetWeight HMIMLimitedQtyNetWeightForLoad()
    {
        WHSLoadLine         loadLine;
        InventTable         inventTable;
        HMIMItemMaterial    hmimItemMaterial;
        ItemNetWeight       limitedQtyNetWeight;
        
        while select loadLine
            where loadLine.LoadId == this.LoadId
        join NetWeight from inventTable
            where inventTable.ItemId == loadLine.ItemId
                && inventTable.HMIMIndicator == NoYes::Yes
        exists join hmimItemMaterial
            where hmimItemMaterial.ItemId == inventTable.ItemId
                && hmimItemMaterial.RegCode == this.HMIMGetRegCode()
                && hmimItemMaterial.LimitedQty == NoYes::Yes
        {
            limitedQtyNetWeight += loadLine.displayInventQty() * inventTable.NetWeight;
        }

        return limitedQtyNetWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllLinesReceivedForLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loops over all lines of the load and checks whether they are considered received, based on whether the item is WHS enabled or only TMS enabled.
    /// </summary>
    /// <param name="_loadId">Load id of the load to be checked.</param>
    /// <returns>True if all load lines have been received; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean checkAllLinesReceivedForLoad(WHSLoadId _loadId)
    {
        if (!WHSLoadTable::exist(_loadId))
        {
            throw error(strFmt("@WAX:Error_LoadDoesNotExist", _loadId));
        }

        if (WHSLoadTable::find(_loadId).LoadDirection != WHSLoadDirection::Inbound
            || !WHSLoadLine::findFirstForLoadId(_loadId).RecId)
        {
            return false;
        }

        boolean allLoadLinesReceived = true;
        WHSLoadLine loadLine;

        while select loadLine
            where loadLine.LoadId == _loadId
        {
            allLoadLinesReceived = allLoadLinesReceived && loadLine.checkLineReceived();
            
            if (!allLoadLinesReceived)
            {
                break;
            }
        }

        return allLoadLinesReceived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receivingCompletedProcessEnabledForLoad</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean receivingCompletedProcessEnabledForLoad()
    {
        return WHSParameters::isReceivingCompletedEnabledForPOLoads()
            || !this.hasLoadLinesWithPurchaseOrdersReference();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCompleteReceiving</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean canCompleteReceiving()
    {
        return this.checkIfCanCompleteReceiving(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanCompleteReceiving</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean validateCanCompleteReceiving()
    {
        return this.checkIfCanCompleteReceiving(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfCanCompleteReceiving</Name>
				<Source><![CDATA[
    private boolean checkIfCanCompleteReceiving(boolean _displayWarningOnValidationFail)
    {
        return this.LoadDirection == WHSLoadDirection::Inbound
            && this.LoadStatus != WHSLoadStatus::Received
            && !this.LoadReceivingCompletedUTCDateTime
            && this.receivingCompletedProcessEnabledForLoad()
            && this.areAllOrderLinesRegisteredWithLoad(_displayWarningOnValidationFail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReverseReceivingCompleted</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean canReverseReceivingCompleted()
    {
        return this.LoadDirection == WHSLoadDirection::Inbound
            && this.LoadReceivingCompletedUTCDateTime
            && !this.hasProductReceiptBeenPosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadLineToShipment</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal WHSShipmentId addLoadLineToShipment(WHSLoadLine _loadLine)
    {
        if (_loadLine.InventTransType == InventTransType::Purch)
        {
            _loadLine.ShipmentId = this.addPurchLineToShipment(_loadLine.getOrderCommonFromLoadLine() as PurchLine);
        }

        return _loadLine.ShipmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasProductReceiptBeenPosted</Name>
				<Source><![CDATA[
    private boolean hasProductReceiptBeenPosted()
    {
        if (WHSParameters::isReceivingCompletedWithAutoPostEnabledForPOLoads())
        {
            // Product receipt posting changes ProductReceiptProcessingStatus to Processed (if autoPost is enabled)
            return this.hasLoadLinesWithPurchaseOrdersReference()
                && this.LoadStatus == WHSLoadStatus::Received
                && this.ProductReceiptProcessingStatus == WHSProductReceiptProcessingStatus::Processed;
        }

        if (WHSLoadTableReverseReceivingConfirmationDisabledFlight::instance().isEnabled())
        {
            // Product receipt posting changes load status to Received (if autoPost is not enabled)
            return this.hasLoadLinesWithPurchaseOrdersReference()
                && this.LoadStatus == WHSLoadStatus::Received;
        }
        else 
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>areAllOrderLinesRegisteredWithLoad</Name>
				<Source><![CDATA[
    private boolean areAllOrderLinesRegisteredWithLoad(boolean _displayWarningOnValidationFail)
    {
        if (!this.hasLoadLinesWithPurchaseOrdersReference())
        {
            // For non PO we only support registration with load lines, so there is no need to check.
            return true;
        }

        WHSLoadLine loadLine;
        InventTransOrigin inventTransOrigin;
        while select RecId from inventTransOrigin
            exists join loadLine
                where loadLine.LoadId == this.LoadId
                   && loadLine.InventTransType == InventTransType::Purch
                   && loadLine.InventTransId == inventTransOrigin.InventTransId
        {
            if (WHSPurchLine::inventTransOriginHasReceiptsWithoutLoad(inventTransOrigin.RecId))
            {
                return _displayWarningOnValidationFail
                    ? checkFailed(strFmt('@WAX:LoadReceivingCompleted_NotAllOrderLinesHaveALoad_Warning', this.LoadId))
                    : false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLoadLinesWithPurchaseOrdersReference</Name>
				<Source><![CDATA[
    private boolean hasLoadLinesWithPurchaseOrdersReference()
    {
        WHSLoadLine loadLine;
        select firstonly RecId from loadLine
            where loadLine.LoadId == this.LoadId
            && loadLine.InventTransType == InventTransType::Purch;

        return loadLine.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4398</DeveloperDocumentation>
	<FormRef>WHSLoadTable</FormRef>
	<Label>@WAX312</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>LoadId</TitleField1>
	<TitleField2>LoadDirection</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>LoadIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>LoadIdIdx</PrimaryIndex>
	<ReplacementKey>LoadIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadHeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadWidth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadTipVolume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadTipWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadFloorStack</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadUserDef1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadUserDef2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadUserDef3</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SealNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadDepth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TrailerNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadDirection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillOfLadingId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookingNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoyageNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VesselName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InspectionSeal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HouseBill</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ETA</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierServiceCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierGroupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TractorNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadReferenceNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadNetWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualNetWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LateShipReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SystemTareWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualTareWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualGrossWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Loader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarState_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportationTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadPaysFreight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DestinationHubCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DestinationName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ETD</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginHubCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BrokerCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FinalDestination</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadShipConfirmUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadSchedShipUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadArrivalUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastUpdateUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequiredSailUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SailUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CutOffUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualVolume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadBuildTemplateName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadHeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadWidth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadTipVolume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadTipWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadFloorStack</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadUserDef1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadUserDef2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadUserDef3</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SealNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadDepth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TrailerNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadDirection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillOfLadingId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookingNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoyageNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VesselName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InspectionSeal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HouseBill</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ETA</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierServiceCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierGroupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TractorNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadReferenceNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadNetWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxFreightPieces</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualNetWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LateShipReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SystemTareWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualTareWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualGrossWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Loader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarState_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportationTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadPaysFreight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DestinationHubCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DestinationName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ETD</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginHubCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BrokerCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FinalDestination</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadShipConfirmUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadSchedShipUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadArrivalUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastUpdateUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequiredSailUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SailUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CutOffUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DestinationPostalAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginPostalAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Invalid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingSlipType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualVolume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadingStrategy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowLoadSplitShipConfirm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadBuildTemplateName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PackingSlipParameters</Name>
			<Label>@WAX:WHSPackingSlipPostingParameters</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackingSlipCreationPolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PackingSlipBackgroundPosting</Name>
			<Label>@WAX:LoadPackingSlipBackgroundPostingGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackingSlipBackgroundPostingStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSCarrierCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OriginHubCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSHubMasterCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAccountNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ActualGrossWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSActualGrossWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ActualNetWeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSActualWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ActualTareWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSActualTareWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BillOfLadingId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSBillOfLadingId</ExtendedDataType>
			<Label>@SYS50740</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookingNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSBookingNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BrokerCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSBrokerCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSCarNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierGroupCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSCarrierGroupCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierServiceCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSCarrierServiceCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustVendRef</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCustVendRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>CutOffUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSCutoffUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DestinationHubCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSHubMasterCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DestinationName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSName</ExtendedDataType>
			<Label>@TRX356</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DestinationPostalAddress</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ETA</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSETA</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ETD</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSETD</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FinalDestination</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSFinalDestination</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HouseBill</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSHouseBill</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InspectionSeal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSInspectionSeal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Invalid</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInvalid</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastUpdateUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLastUpdateUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LateShipReasonCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSLateShipReasonCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LoadArrivalUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadArrivalUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LoadDepth</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadDepth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LoadDirection</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSLoadDirection</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Loader</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TMSLoader</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LoadFloorStack</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadFloorStack</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LoadHeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadHeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LoadNetWeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadNetWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LoadPaysFreight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSLoadPaysFreight</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadReferenceNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadReferenceNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LoadSchedShipUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadSchedShipUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LoadShipConfirmUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadShipConfirmUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LoadStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSLoadStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadTemplateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadTemplateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LoadTipVolume</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadTipVolume</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LoadTipWeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadTipWeight</ExtendedDataType>
			<Label>@WAX1983</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadUserDef1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadUserDef1</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadUserDef2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadUserDef2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadUserDef3</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadUserDef3</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LoadWeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LoadWidth</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadWidth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MaxFreightPieces</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSMaxFreightPieces</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSModeCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOrderNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OriginName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSName</ExtendedDataType>
			<Label>@TRX245</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OriginPostalAddress</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSProNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>RequiredSailUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRequiredSailUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RouteCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRouteCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>SailUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSSailUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SealNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSSealNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SystemTareWeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSSystemTareWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TractorNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSTractorNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TrailerNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSTrailerNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransportationTemplateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSTransportationTemplateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VesselName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSVesselName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VoyageNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSVoyageNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarState_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvStateRegistered_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PackingSlipType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSPackingSlipType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ActualVolume</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSActualVolume</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LoadingStrategy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>WHSLoadingStrategy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowLoadSplitShipConfirm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowLoadSplitShipConfirm</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadBuildTemplateName</Name>
			<ExtendedDataType>WHSLoadBuildTemplateName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShippingContainerId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShippingContainerId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LoadReceivingCompletedUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadReceivingCompletedUTCDateTime</ExtendedDataType>
			<FeatureClass>WHSInboundReceivingCompletedConfirmationToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReceivingCompletedDeliveryPolicy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<FeatureClass>WHSInboundReceivingCompletedConfirmationToggle</FeatureClass>
			<EnumType>WHSReceivingCompletedLoadDeliveryPolicy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CarbonEmission</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>TMSCarbonEmission</ExtendedDataType>
			<FeatureClass>TMSSustainabilityIntegrationFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarbonEmissionUnit</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>TMSCarbonEmissionUnit</ExtendedDataType>
			<FeatureClass>TMSSustainabilityIntegrationFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProductReceiptProcessingStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<FeatureClass>WHSInboundReceivingCompletedAutoPostToggle</FeatureClass>
			<EnumType>WHSProductReceiptProcessingStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PackingSlipCreationPolicy</Name>
			<AssetClassification>Customer content</AssetClassification>
			<FeatureClass>WHSPopulatePackingSlipIdFromShipmentFlight</FeatureClass>
			<EnumType>WHSLoadPackingSlipCreationPolicy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PackingSlipBackgroundPostingStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSLoadPackingSlipBackgroundPostingStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LoadSplitShipConfirmPolicy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<FeatureClass>WHSShipConfirmServiceImplementsSplitShipmentInBatchFlight</FeatureClass>
			<EnumType>WHSLoadSplitShipConfirmPolicy</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LoadIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LoadId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LoadStatusIds</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>LoadStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LoadDirection</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RouteCode</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>RouteCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventStorageDimMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<SourceEDT>InventSiteId</SourceEDT>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisitcsPostalAddressOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddressOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddressOrigin</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OriginPostalAddress</Name>
					<Field>OriginPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsPostalAddressDestination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddressDestination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddressDestination</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DestinationPostalAddress</Name>
					<Field>DestinationPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSBroker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TMSCarrier</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BrokerCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Broker</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BrokerCode</Name>
					<SourceEDT>TMSBrokerCode</SourceEDT>
					<Field>BrokerCode</Field>
					<RelatedField>CarrierCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSCarrier</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TMSCarrier</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierCode</Name>
					<SourceEDT>TMSCarrierCode</SourceEDT>
					<Field>CarrierCode</Field>
					<RelatedField>CarrierCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSCarrierGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TMSCarrierGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierGroupCode</Name>
					<SourceEDT>TMSCarrierGroupCode</SourceEDT>
					<Field>CarrierGroupCode</Field>
					<RelatedField>CarrierGroupCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSCarrierService</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TMSCarrierService</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierCode</Name>
					<Field>CarrierCode</Field>
					<RelatedField>CarrierCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierServiceCode</Name>
					<Field>CarrierServiceCode</Field>
					<RelatedField>CarrierServiceCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSHubMasterDest</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TMSHubMaster</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Dest</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HubMaster</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DestinationHubCode</Name>
					<SourceEDT>TMSHubMasterCode</SourceEDT>
					<Field>DestinationHubCode</Field>
					<RelatedField>HubMasterCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSHubMasterOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TMSHubMaster</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OriginHubCode</Name>
					<SourceEDT>TMSHubMasterCode</SourceEDT>
					<Field>OriginHubCode</Field>
					<RelatedField>HubMasterCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSLateShipReason</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TMSLateShipReason</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LateShipReasonCode</Name>
					<SourceEDT>TMSLateShipReasonCode</SourceEDT>
					<Field>LateShipReasonCode</Field>
					<RelatedField>LateShipReasonCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TMSMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModeCode</Name>
					<SourceEDT>TMSModeCode</SourceEDT>
					<Field>ModeCode</Field>
					<RelatedField>ModeCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSRoute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TMSRoute</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteCode</Name>
					<SourceEDT>TMSRouteCode</SourceEDT>
					<Field>RouteCode</Field>
					<RelatedField>RouteCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSTransportationTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TMSTransportationTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportationTemplateId</Name>
					<SourceEDT>TMSTransportationTemplateId</SourceEDT>
					<Field>TransportationTemplateId</Field>
					<RelatedField>TransportationTemplateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSLoadTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadTemplateId</Name>
					<SourceEDT>WHSLoadTemplateId</SourceEDT>
					<Field>LoadTemplateId</Field>
					<RelatedField>LoadTemplateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadBuildTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSLoadBuildTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadBuildTemplateName</Name>
					<Field>LoadBuildTemplateName</Field>
					<RelatedField>LoadBuildTemplateName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>