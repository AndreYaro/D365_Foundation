<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceInfoLineMarkupMatchingTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceInfoLineMarkupMatchingTrans extends MarkupMatchingTrans
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>connectVendInvoiceInfoLineMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an expected miscellaneous charge for the invoice line miscellaneous charge.
    /// </summary>
    /// <param name="_markupTrans">
    ///    The <c>MarkupTrans</c> record that represents the miscellaneous charge of the
    ///    <c>VendInvoiceInfoLine</c> record.
    /// </param>
    /// <param name="_reapplyVendSubTableMarkupTrans">
    ///    A Boolean value that specifies whether the header invoice miscellaneous charges should be
    ///    recalculated and updated.
    /// </param>
    /// <remarks>
    ///    When the miscellaneous charges for the related <c>VendInvoiceInfoSubTable</c> lines are determined
    ///    based on the <c>VendInvoiceInfoLine</c> lines, we must also recalculate the related
    ///    <c>VendInvoiceInfoSubTable</c> lines miscellaneous charges.
    /// </remarks>
    public static void connectVendInvoiceInfoLineMarkupTrans(MarkupTrans _markupTrans, boolean _reapplyVendSubTableMarkupTrans = true)
    {
        Qty qty = 0;
        AmountCur amount = 0;
        AmountCur intercompanyAmount = 0;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        PurchLine purchLine;
        VendInvoiceInfoMarkupMatchingTolerance vendInvoiceInfoMarkupMatchingTolerance;
        MarkupTrans orderMarkupTrans;
        Markup markup;
        MarkupAmount expectedAmount;
        VendInvoiceInfoLineMarkupMatchingTrans vendInvoiceInfoLineMarkupMatchingTrans;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        PurchTotals purchTotals;
        Tax tax;

        // if feature is not enabled we can just return.
        if (VendParameters::find().UseMiscChargeMatching == NoYes::No)
        {
            return;
        }

        vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(_markupTrans.TransRecId);

        vendInvoiceInfoTable = vendInvoiceInfoLine.vendInvoiceInfoTable();
        vendInvoiceInfoMarkupMatchingTolerance = VendInvoiceInfoMarkupMatchingTolerance::find(vendInvoiceInfoLine.ParmId, vendInvoiceInfoLine.TableRefId, _markupTrans.MarkupCode);

        if (vendInvoiceInfoTable.InclTax)
        {
            // totals are only needed if price includes tax
            purchTotals = PurchTotals::newParmTable(
                    vendInvoiceInfoTable,
                    PurchUpdate::All,
                    vendInvoiceInfoTable.ParmId,
                    vendInvoiceInfoTable.PurchId,
                    vendInvoiceInfoTable.Ordering);

            purchTotals.calc(false, false, true);
            tax = purchTotals.tax();
        }

        if (vendInvoiceInfoLine
            && vendInvoiceInfoMarkupMatchingTolerance
            && (vendInvoiceInfoMarkupMatchingTolerance.CustType == MarkupType::CustVend || vendInvoiceInfoMarkupMatchingTolerance.VendType == MarkupType::CustVend)
            && vendInvoiceInfoMarkupMatchingTolerance.UseInMatching == NoYes::Yes)
        {
            purchLine = vendInvoiceInfoLine.purchLine();
            if (purchLine)
            {
                qty = vendInvoiceInfoLine.ReceiveNow;
                amount = purchLine.calcLineAmountExclTax(qty, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), tax);
                intercompanyAmount = purchLine.interCompanyLineAmount(qty, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), tax);

                markup = new Markup(purchLine.CurrencyCode);

                orderMarkupTrans = MarkupTrans::findRecId(_markupTrans.OrigRecId);

                expectedAmount = Markup::calcMarkupAmount(orderMarkupTrans,
                        qty,
                        amount,
                        intercompanyAmount,
                        markup.isInclTax(purchLine),
                        NoYes::Yes,
                        vendInvoiceInfoLine.CurrencyCode,
                        vendInvoiceInfoTable.updateDate(),
                        vendInvoiceInfoTable.ExchRate,
                        vendInvoiceInfoTable.ExchRateSecondary);

                vendInvoiceInfoLineMarkupMatchingTrans.clear();

                vendInvoiceInfoLineMarkupMatchingTrans.TransTableId = _markupTrans.TransTableId;
                vendInvoiceInfoLineMarkupMatchingTrans.TransRecId = _markupTrans.TransRecId;
                vendInvoiceInfoLineMarkupMatchingTrans.LineNum = _markupTrans.LineNum;
                vendInvoiceInfoLineMarkupMatchingTrans.ModuleType = _markupTrans.ModuleType;
                vendInvoiceInfoLineMarkupMatchingTrans.MarkupCode = _markupTrans.MarkupCode;
                vendInvoiceInfoLineMarkupMatchingTrans.ExpectedMarkup = expectedAmount;
                vendInvoiceInfoLineMarkupMatchingTrans.ExpectedMarkupCode = orderMarkupTrans.MarkupCode;
                vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineParmId = vendInvoiceInfoLine.ParmId;
                vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineTableRefId = vendInvoiceInfoLine.TableRefId;
                vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineOrigPurchId = vendInvoiceInfoLine.OrigPurchId;
                vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineNum = vendInvoiceInfoLine.LineNum;
                vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineRecId = vendInvoiceInfoLine.RecId;

                if (orderMarkupTrans.CurrencyCode != vendInvoiceInfoLine.CurrencyCode)
                {
                    vendInvoiceInfoLineMarkupMatchingTrans.CurrencyConverted = NoYes::Yes;
                }

                vendInvoiceInfoLineMarkupMatchingTrans.insert();
            }

            if (_reapplyVendSubTableMarkupTrans)
            {
                VendInvoiceInfoSubMarkupMatchingTrans::reapplyVendSubTableMarkupTrans(vendInvoiceInfoLine.ParmId, vendInvoiceInfoLine.TableRefId, vendInvoiceInfoLine.OrigPurchId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the miscellaneous charges for the expected invoice from the context of the
    ///    <c>VendInvoiceInfoLine</c> class.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    ///    The invoice header that corresponds to the invoice line that is passed.
    /// </param>
    /// <param name="_vendInvoiceInfoLine">
    ///    The invoice line that defines the actual miscellaneous charge context.
    /// </param>
    /// <param name="_tax">
    ///    An instance of <c>Tax</c> that defines the taxes for the invoice.
    /// </param>
    /// <returns>
    ///    The invoice line quantity amount, excluding the taxes and the intercompany amount.
    /// </returns>
    public static container createFromVendInvoiceInfoLine(VendInvoiceInfoTable _vendInvoiceInfoTable, VendInvoiceInfoLine _vendInvoiceInfoLine, Tax _tax)
    {
        Qty qty = 0;
        AmountCur amount = 0;
        AmountCur intercompanyAmount = 0;
        PurchLine purchLine;
        MarkupTrans invoiceMarkupTrans;
        MarkupTrans orderMarkupTrans;
        VendInvoiceInfoMarkupMatchingTolerance vendInvoiceInfoMarkupMatchingTolerance;
        Markup markup;
        MarkupAmount expectedAmount;
        VendInvoiceInfoLineMarkupMatchingTrans vendInvoiceInfoLineMarkupMatchingTrans;

        if (VendParameters::find().UseMiscChargeMatching == NoYes::Yes)
        {
            purchLine = _vendInvoiceInfoLine.purchLine();

            if (purchLine)
            {
                qty = _vendInvoiceInfoLine.ReceiveNow;
                amount = purchLine.salesPurchLineInterface().calcBaseLineAmountExclTax(qty, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                intercompanyAmount = purchLine.interCompanyLineAmount(qty, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), _tax);

                markup = new Markup(purchLine.CurrencyCode);

                while select TransTableId, TransRecId, LineNum, ModuleType, MarkupCode from invoiceMarkupTrans
                    join orderMarkupTrans
                        where invoiceMarkupTrans.TransTableId == _vendInvoiceInfoLine.TableId
                            && invoiceMarkupTrans.TransRecId == _vendInvoiceInfoLine.RecId
                            && !invoiceMarkupTrans.IsDeleted
                            && orderMarkupTrans.TransTableId == tableNum(PurchLine)
                            && orderMarkupTrans.TransRecId == purchLine.RecId
                            && !orderMarkupTrans.IsDeleted
                            && invoiceMarkupTrans.OrigTableId == tableNum(MarkupTrans)
                            && invoiceMarkupTrans.OrigRecId == orderMarkupTrans.RecId
                    exists join vendInvoiceInfoMarkupMatchingTolerance
                        where vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableParmId == _vendInvoiceInfoLine.ParmId
                            && vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableTableRefId == _vendInvoiceInfoLine.TableRefId
                            && vendInvoiceInfoMarkupMatchingTolerance.ModuleType == invoiceMarkupTrans.ModuleType
                            && vendInvoiceInfoMarkupMatchingTolerance.MarkupCode == invoiceMarkupTrans.MarkupCode
                            && (vendInvoiceInfoMarkupMatchingTolerance.CustType == MarkupType::CustVend || vendInvoiceInfoMarkupMatchingTolerance.VendType == MarkupType::CustVend)
                            && vendInvoiceInfoMarkupMatchingTolerance.UseInMatching == NoYes::Yes
                {
                    expectedAmount = Markup::calcMarkupAmount(orderMarkupTrans, qty, amount, intercompanyAmount, markup.isInclTax(purchLine), NoYes::Yes,
                                _vendInvoiceInfoLine.CurrencyCode,
                                _vendInvoiceInfoTable.updateDate(),
                                _vendInvoiceInfoTable.ExchRate,
                                _vendInvoiceInfoTable.ExchRateSecondary);

                    vendInvoiceInfoLineMarkupMatchingTrans.clear();

                    vendInvoiceInfoLineMarkupMatchingTrans.TransTableId = invoiceMarkupTrans.TransTableId;
                    vendInvoiceInfoLineMarkupMatchingTrans.TransRecId = invoiceMarkupTrans.TransRecId;
                    vendInvoiceInfoLineMarkupMatchingTrans.LineNum = invoiceMarkupTrans.LineNum;
                    vendInvoiceInfoLineMarkupMatchingTrans.ModuleType = invoiceMarkupTrans.ModuleType;
                    vendInvoiceInfoLineMarkupMatchingTrans.MarkupCode = invoiceMarkupTrans.MarkupCode;
                    vendInvoiceInfoLineMarkupMatchingTrans.ExpectedMarkup = expectedAmount;
                    vendInvoiceInfoLineMarkupMatchingTrans.ExpectedMarkupCode = orderMarkupTrans.MarkupCode;
                    vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineParmId = _vendInvoiceInfoLine.ParmId;
                    vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineTableRefId = _vendInvoiceInfoLine.TableRefId;
                    vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineOrigPurchId = _vendInvoiceInfoLine.OrigPurchId;
                    vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineNum = _vendInvoiceInfoLine.LineNum;
                    vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineRecId = _vendInvoiceInfoLine.RecId;

                    if (orderMarkupTrans.CurrencyCode != _vendInvoiceInfoLine.CurrencyCode)
                    {
                        vendInvoiceInfoLineMarkupMatchingTrans.CurrencyConverted = NoYes::Yes;
                    }

                    vendInvoiceInfoLineMarkupMatchingTrans.insert();
                }
            }
        }

        return [qty, amount, intercompanyAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>disconnectVendInvoiceInfoLineMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes an expected miscellaneous charge for the invoice line miscellaneous charge.
    /// </summary>
    /// <param name="_markupTrans">
    ///    The <c>MarkupTrans</c> record that represents the miscellaneous charge of the
    ///    <c>VendInvoiceInfoLine</c> line.
    /// </param>
    /// <remarks>
    ///    When the miscellaneous charges for the related <c>VendInvoiceInfoSubTable</c> lines are determined
    ///    based on the <c>VendInvoiceInfoLine</c> lines, we must also recalculate the related
    ///    <c>VendInvoiceInfoSubTable</c> lines miscellaneous charges.
    /// </remarks>
    public static void disconnectVendInvoiceInfoLineMarkupTrans(MarkupTrans _markupTrans)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        // if feature is not enabled we can just return.
        if (VendParameters::find().UseMiscChargeMatching == NoYes::No)
        {
            return;
        }

        vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(_markupTrans.TransRecId);

        if (vendInvoiceInfoLine)
        {
            MarkupMatchingTrans::deleteRecords(_markupTrans.TransTableId, _markupTrans.TransRecId, _markupTrans.LineNum);

            VendInvoiceInfoSubMarkupMatchingTrans::reapplyVendSubTableMarkupTrans(vendInvoiceInfoLine.ParmId, vendInvoiceInfoLine.TableRefId, vendInvoiceInfoLine.OrigPurchId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reapplyVendInvoiceInfoLineMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the expected connected miscellaneous charge in the active invoice line context.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the active invoice line context.
    /// </param>
    public static void reapplyVendInvoiceInfoLineMarkupTrans(RefRecId _refRecId)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        PurchLine purchLine;
        MarkupTrans invoiceMarkupTrans, orderMarkupTrans;
        VendInvoiceInfoMarkupMatchingTolerance vendInvoiceInfoMarkupMatchingTolerance;

        // if feature is not enabled we can just return.
        if (VendParameters::find().UseMiscChargeMatching == NoYes::No)
        {
            return;
        }

        vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(_refRecId);
        purchLine = vendInvoiceInfoLine.purchLine();

        if (vendInvoiceInfoLine && purchLine)
        {
            while select invoiceMarkupTrans
                join MarkupCategory from orderMarkupTrans
                    where invoiceMarkupTrans.TransTableId == tableNum(VendInvoiceInfoLine)
                        && invoiceMarkupTrans.TransRecId == vendInvoiceInfoLine.RecId
                        && !invoiceMarkupTrans.IsDeleted
                        && orderMarkupTrans.TransTableId == tableNum(PurchLine)
                        && orderMarkupTrans.TransRecId == purchLine.RecId
                        && !orderMarkupTrans.IsDeleted
                        && invoiceMarkupTrans.OrigTableId == tableNum(MarkupTrans)
                        && invoiceMarkupTrans.OrigRecId == orderMarkupTrans.RecId
                exists join vendInvoiceInfoMarkupMatchingTolerance
                    where vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableParmId == vendInvoiceInfoLine.ParmId
                        && vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableTableRefId == vendInvoiceInfoLine.TableRefId
                        && vendInvoiceInfoMarkupMatchingTolerance.ModuleType == invoiceMarkupTrans.ModuleType
                        && vendInvoiceInfoMarkupMatchingTolerance.MarkupCode == invoiceMarkupTrans.MarkupCode
                        && (vendInvoiceInfoMarkupMatchingTolerance.CustType == MarkupType::CustVend || vendInvoiceInfoMarkupMatchingTolerance.VendType == MarkupType::CustVend)
                        && vendInvoiceInfoMarkupMatchingTolerance.UseInMatching == NoYes::Yes
            {
                // When the markup category is not fixed we need to recalculate the miscellaneous charge.
                if (orderMarkupTrans.MarkupCategory != MarkupCategory::Fixed)
                {
                    MarkupMatchingTrans::deleteRecords(invoiceMarkupTrans.TransTableId, invoiceMarkupTrans.TransRecId, invoiceMarkupTrans.LineNum);
                    VendInvoiceInfoLineMarkupMatchingTrans::connectVendInvoiceInfoLineMarkupTrans(invoiceMarkupTrans, false);
                }
            }
            VendInvoiceInfoSubMarkupMatchingTrans::reapplyVendSubTableMarkupTrans(vendInvoiceInfoLine.ParmId, vendInvoiceInfoLine.TableRefId, vendInvoiceInfoLine.OrigPurchId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ParmId</c> of <c>VendInvoiceInfoLineMarkupMatchingTrans</c> records for a given invoice.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> used to determine which <c>VendInvoiceInfoLineMarkupMatchingTrans</c> to move.
    /// </param>
    /// <param name="_tableRefId">
    /// The <c>TradeLineRefId</c> used to determine which <c>VendInvoiceInfoLineMarkupMatchingTrans</c> to move.
    /// </param>
    /// <param name="_newParmId">
    /// The new <c>ParmId</c> value; optional.
    /// </param>
    public static void updateParmId(ParmId _parmId, TradeLineRefId _tableRefId, ParmId _newParmId = '')
    {
        VendInvoiceInfoLineMarkupMatchingTrans vendInvoiceInfoLineMarkupMatchingTrans;

        vendInvoiceInfoLineMarkupMatchingTrans.skipDataMethods(true);
        vendInvoiceInfoLineMarkupMatchingTrans.skipEvents(true);
        vendInvoiceInfoLineMarkupMatchingTrans.skipDatabaseLog(true);

        update_recordset vendInvoiceInfoLineMarkupMatchingTrans
        setting VendInvoiceInfoLineParmId = _newParmId
        where vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineParmId == _parmId
            && vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineTableRefId == _tableRefId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchInvoiceMatching</ConfigurationKey>
	<DeveloperDocumentation>@SYS136340</DeveloperDocumentation>
	<Label>@SYS136341</Label>
	<TableGroup>TransactionLine</TableGroup>
	<CacheLookup>NotInTTS</CacheLookup>
	<Extends>MarkupMatchingTrans</Extends>
	<Modules>AccountsPayable</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoLineOrigPurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoLineTableRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoLineParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExpectedValues</Name>
			<Label>@SYS115395</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoLineOrigPurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoLineTableRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoLineParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>VendInvoiceInfoLineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceInfoLineOrigPurchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchIdRange</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceInfoLineParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceInfoLineRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceInfoLineTableRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TradeLineRefId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendInvoiceInfoLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendInvoiceInfoLineParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendInvoiceInfoLineTableRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendInvoiceInfoLineOrigPurchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendInvoiceInfoLineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendInvoiceInfoLineRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FK_VendInvoiceInfoLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceInfoLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>FK_VendInvoiceInfoLine</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendInvoiceInfoLineMarkupMatchingTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceInfoLineRecId</Name>
					<Field>VendInvoiceInfoLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceInfoLineNum</Name>
					<Field>VendInvoiceInfoLineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceInfoLineOrigPurchId</Name>
					<Field>VendInvoiceInfoLineOrigPurchId</Field>
					<RelatedField>OrigPurchId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceInfoLineTableRefId</Name>
					<Field>VendInvoiceInfoLineTableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceInfoLineParmId</Name>
					<Field>VendInvoiceInfoLineParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TableRefIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PK_MarkupMatchingTrans_VendInvoiceInfoLi</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>MarkupMatchingTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PK_MarkupMatchingTrans_VendInvoiceInfoLi</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Role>VendInvoiceInfoLineMarkupMatchingTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>