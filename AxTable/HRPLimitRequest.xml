<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HRPLimitRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HRPLimitRequest extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the request can be submitted by the user.
    /// </summary>
    /// <returns>
    /// true if the workflow can be submitted by the user; otherwise, false.
    /// </returns>
    public boolean canSubmit()
    {
        return this.SigningLimitWorkflowStatus == HRPLimitWorkflowState::NotSubmitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the document.
    /// </summary>
    /// <returns>
    /// The <c>HRPLimitDocumentType</c> enumeration value.
    /// </returns>
    display HRPLimitDocumentType getDocumentType()
    {
        HRPLimitRequest limitRequest;
        HRPLimitDocument limitDocument;

        select firstonly RecId, DocumentType from  limitDocument
            join RecId, SigningLimitDocument from limitRequest
                where limitDocument.RecId == limitRequest.SigningLimitDocument
                    && limitRequest.RecId == this.RecId;

        return limitDocument.DocumentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLimitActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the current limit is active or not.
    /// </summary>
    /// <returns>
    /// True, if the Limit is active; otherwise, false
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display boolean isLimitActive()
    {
        boolean isLimitActive = false;
        HRPApprovedLimit limitApproved;

        select firstonly RecId from limitApproved
            where limitApproved.SigningLimitRequest == this.RecId;

        if (limitApproved.RecId)
        {
            isLimitActive = true;
        }

        return isLimitActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLimitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the limit amount.
    /// </summary>
    /// <returns>
    /// An instance of the <c>AmountCur</c> data type.
    /// </returns>
    display AmountCur getLimitAmount()
    {
        HRPLimitRequestAmount limitRequestAmount;
        HcmPositionWorkerAssignment positionWorkerAssignment;
        HRPLimitDocument limitDocument;
        HcmPosition position;
        AmountCur limitAmount;

        select firstonly RecId, Amount from limitRequestAmount where limitRequestAmount.SigningLimitRequest == this.RecId;

        if (limitRequestAmount.RecId)
        {
            limitAmount = limitRequestAmount.Amount;
        }
        else
        {
            select firstonly RecId, Position, Worker from positionWorkerAssignment
                join RecId, PositionId from position
                    where positionWorkerAssignment.Position == position.RecId && positionWorkerAssignment.RecId == this.PositionWorkerAssignment
                join RecId, DocumentType from limitDocument
                    where limitDocument.RecId == this.SigningLimitDocument;

            HRPWorkerLimit workerLimit = new HRPWorkerLimit();
            limitAmount = workerLimit.getDefaultLimitsFromPolicy(limitDocument.DocumentType, this.SigningLimitType, position.PositionId);
        }

        return limitAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLimitAmountCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the limit currency.
    /// </summary>
    /// <returns>
    /// An instance of the <c>CurrencyCode</c> data type.
    /// </returns>
    display CurrencyCode getLimitAmountCurrency()
    {
        HRPLimitRequestAmount limitRequestAmount;
        HcmPositionWorkerAssignment positionWorkerAssignment;
        HRPLimitDocument limitDocument;
        HcmPosition position;
        CurrencyCode limitAmountCurrency;

        select firstonly RecId, Currency from limitRequestAmount where limitRequestAmount.SigningLimitRequest == this.RecId;

        if (limitRequestAmount.RecId)
        {
            limitAmountCurrency = limitRequestAmount.Currency;
        }
        else
        {
            select firstonly RecId, Position, Worker from positionWorkerAssignment
                join RecId, PositionId from position
                    where positionWorkerAssignment.Position == position.RecId && positionWorkerAssignment.RecId == this.PositionWorkerAssignment
                join RecId, DocumentType from limitDocument
                    where limitDocument.RecId == this.SigningLimitDocument;

            HRPWorkerLimit workerLimit = new HRPWorkerLimit();
            container limitCurrencyContainer = workerLimit.getCurrencyFromPolicy(limitDocument.DocumentType, this.SigningLimitType, position.PositionId);
            limitAmountCurrency = conPeek(limitCurrencyContainer, 2);
        }

        return limitAmountCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the specified record exists in the <c>HRPLimitRequest</c> table; if not, an error
    /// message is displayed.
    /// </summary>
    /// <param name="_signingLimitRequest">
    /// The reference record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RefRecId _signingLimitRequest)
    {
        if (!HRPLimitRequest::exist(_signingLimitRequest))
        {
            return checkFailed(HRPLimitRequest::txtNotExist());
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>HRPLimitRequest</c> table exists.
    /// </summary>
    /// <param name="_signingLimitRequest">
    /// The reference record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _signingLimitRequest)
    {
        return HRPLimitRequest::find(_signingLimitRequest).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>HRPLimitRequest</c> table.
    /// </summary>
    /// <param name="_signingLimitRequest">
    /// The reference record ID that indicates the limit request.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>HRPLimitRequest</c> table.
    /// </returns>
    public static HRPLimitRequest find(RefRecId _signingLimitRequest, boolean _forUpdate = false)
    {
        HRPLimitRequest signingLimitRequest;

        if (_signingLimitRequest)
        {
            signingLimitRequest.selectForUpdate(_forUpdate);
            select firstonly signingLimitRequest where signingLimitRequest.RecId == _signingLimitRequest;
        }

        return signingLimitRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApprovedLimitRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the limit request is approved.
    /// </summary>
    /// <param name="_posID">
    /// The record ID of a record in the <c>HcmPosition</c> table.
    /// </param>
    /// <param name="_workerID">
    /// The record ID of a record in the <c>HcmWorker</c> table.
    /// </param>
    /// <param name="_docType">
    /// The record ID of a record in the <c>HRPLimitDocument</c> table.
    /// </param>
    /// <param name="_limitType">
    /// A value that indicates the limit type.
    /// </param>
    /// <returns>
    /// The record ID of a record in the <c>HRPApprovedLimit</c> table.
    /// </returns>
    public static recId getApprovedLimitRecId(recId _posID, recId _workerID, recId _docType, HRPLimitType _limitType)
    {
        HRPApprovedLimit approvedLimit;
        HcmPositionWorkerAssignment positionWorkerAssignment;

        select firstonly RecId, SigningLimitDocument, PositionWorkerAssignment, SigningLimitType from approvedLimit
            join RecId, Position, Worker  from positionWorkerAssignment
                where positionWorkerAssignment.RecId == approvedLimit.PositionWorkerAssignment
                    && positionWorkerAssignment.Position == _posID
                    && positionWorkerAssignment.Worker == _workerID
                    && approvedLimit.SigningLimitDocument == _docType
                    && approvedLimit.SigningLimitType == _limitType;

        return approvedLimit.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLimitBasis</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the authority base by using the <c>HRPLimitParameters</c> table.
    /// </summary>
    /// <returns>
    /// The authority base type.
    /// </returns>
    public static HRPAuthorityBasis getLimitBasis()
    {
        HRPLimitParameters limitParameters;

        select firstonly SigningLimitBasedOn from limitParameters;

        return limitParameters.SigningLimitBasedOn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertApprovedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts details into the <c>HRPLimitRequest</c> and <c>HRPApprovedLimitAmount</c> tables.
    /// </summary>
    /// <param name="_limitRequest">
    /// The record that represents the limit request.
    /// </param>
    public static void insertApprovedData(HRPLimitRequest _limitRequest)
    {
        HRPLimitRequestAmount limitRequestAmount;
        HRPApprovedLimit approvedLimit;
        HRPApprovedLimitAmount approvedLimitAmount;
        HRPLimitAgreementAttestation limitAgreementAttestationUpdate, limitAgreementAttestation;
        HRPLimitAgreementDetail limitAgreementDetail;

        ttsbegin;
        approvedLimit.SigningLimitType = _limitRequest.SigningLimitType;
        approvedLimit.PositionWorkerAssignment = _limitRequest.PositionWorkerAssignment;
        approvedLimit.SigningLimitDocument = _limitRequest.SigningLimitDocument;
        approvedLimit.SigningLimitRequest = _limitRequest.RecId;

        if (DateTimeUtil::utcNow() >= _limitRequest.EffectiveDateTime)
        {
            approvedLimit.ValidFrom = DateTimeUtil::utcNow();
        }
        else
        {
            approvedLimit.ValidFrom = _limitRequest.EffectiveDateTime;
        }

        approvedLimit.ValidTo = _limitRequest.ExpirationDateTime;
        approvedLimit.insert();

        // if individual request
        select firstonly Amount, RecId, Currency from limitRequestAmount where limitRequestAmount.SigningLimitRequest == _limitRequest.RecId;

        if (limitRequestAmount.RecId)
        {
            approvedLimitAmount.Amount = limitRequestAmount.Amount;
            approvedLimitAmount.ApprovedSigningLimit = approvedLimit.RecId;
            approvedLimitAmount.Currency = limitRequestAmount.Currency;
            approvedLimitAmount.ValidFrom = approvedLimit.ValidFrom;
            approvedLimitAmount.ValidTo  = approvedLimit.ValidTo;
            approvedLimitAmount.insert();
        }

        //limit agreement attestation
        while select RecId, AttestationPeriod from limitAgreementDetail
            join RecId, AttestationDateTime from limitAgreementAttestation
                where limitAgreementDetail.RecId == limitAgreementAttestation.LimitAgreementDetail
                    && limitAgreementAttestation.SigningLimitRequest == _limitRequest.RecId
        {
            select forupdate limitAgreementAttestationUpdate where limitAgreementAttestationUpdate.SigningLimitRequest == _limitRequest.RecId;

            limitAgreementAttestationUpdate.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
            limitAgreementAttestationUpdate.ValidTo = DateTimeUtil::addMonths(approvedLimit.ValidFrom, limitAgreementDetail.AttestationPeriod);
            limitAgreementAttestationUpdate.update();
            limitAgreementAttestationUpdate.ValidFrom = approvedLimit.ValidFrom;
            limitAgreementAttestationUpdate.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRequestAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the current user has sufficient rights to request limits.
    /// </summary>
    /// <returns>
    /// true if the user can request limits; otherwise, false.
    /// </returns>
    public static boolean isRequestAllowed()
    {
        boolean retVal = false;
        HRPLimitParameters limitParameters;
        CompanyInfo companyInfo;

        select RecId from companyInfo where companyInfo.DataArea == curext();

        HcmWorkerRecId workerRecId = HcmWorker::userId2Worker(curUserId());

        select firstonly IsEmployeeOnlyGetSigningLimits from limitParameters;

        HcmEmployment employment = HcmEmployment::findByWorkerLegalEntity(workerRecId, companyInfo.RecId);

        if (employment.RecId != 0
            && (employment.EmploymentType != HcmEmploymentType::Contractor || limitParameters.IsEmployeeOnlyGetSigningLimits == NoYes::No))
        {
            retVal = true;
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRequestExpired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the request has expired.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the request to check.
    /// </param>
    /// <returns>
    /// HRPLimitRequestExpirationState enum value
    /// </returns>
    public static HRPLimitRequestExpirationState isRequestExpired(recId _recId)
    {
        HRPApprovedLimit approvedLimit;
        HRPLimitAgreementAttestation limitAgreementAtt;
        utcdatetime dateSigningLimitAgreementAttestationExpired, dateLimitOpenAgreementAttestationExpired;
        HRPLimitAgreementDetail limitAggDetail;
        HRPLimitRequestExpirationState requestExpirationState = HRPLimitRequestExpirationState::ExpiredLimitRequest;
        
        utcdatetime dateTimeNow = DateTimeUtil::utcNow();
        utcdatetime dateFrom = DateTimeUtil::minValue();
        utcdatetime dateTo = DateTimeUtil::maxValue();

        select firstonly RecId from approvedLimit where approvedLimit.SigningLimitRequest == _recId;

        select validtimestate(dateFrom, dateTo) RecId, ValidTo from limitAgreementAtt
            join RecId, OpenAttestation from limitAggDetail
                where limitAgreementAtt.LimitAgreementDetail == limitAggDetail.RecId
            && limitAgreementAtt.SigningLimitRequest == _recId;

        if (limitAgreementAtt.RecId)
        {
            dateSigningLimitAgreementAttestationExpired = limitAgreementAtt.ValidTo;
            dateLimitOpenAgreementAttestationExpired = DateTimeUtil::addMonths(limitAgreementAtt.ValidTo, -(limitAggDetail.OpenAttestation));
            
            if ((dateLimitOpenAgreementAttestationExpired <= dateTimeNow) && (dateSigningLimitAgreementAttestationExpired > dateTimeNow))
            {
                // If agreement attestation period is about to expire and within the "open" window
                return HRPLimitRequestExpirationState::NearExpiration;
            }

            if (dateSigningLimitAgreementAttestationExpired < dateTimeNow)
            {
                // If agreement attestation period has expired
                return HRPLimitRequestExpirationState::ExpiredAttestationPeriod;
            }

            // If its not expired it would be valid
            return HRPLimitRequestExpirationState::ValidAttestationPeriod;
        }
        else
        {
            // If limit request itself has expired (No RecId)
            requestExpirationState = HRPLimitRequestExpirationState::ExpiredLimitRequest;
        }

        return requestExpirationState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies the state of the workflow and updates the limit request status in the
    /// <c>HRPLimitRequest</c> table.
    /// </summary>
    /// <param name="_signingLimitRecId">
    /// The record ID of the record that indicates the limit request.
    /// </param>
    /// <param name="_signingLimitWorkflowState">
    /// An instance of the <c>HRPLimitWorkflowState</c> value that indicates the state of workflow.
    /// </param>
    static void setWorkflowState(recId _signingLimitRecId,
        HRPLimitWorkflowState _signingLimitWorkflowState)
    {
        ttsbegin;

        HRPLimitRequest limitRequest = HRPLimitRequest::find(_signingLimitRecId, true);
        limitRequest.SigningLimitWorkflowStatus = _signingLimitWorkflowState;

        switch (_signingLimitWorkflowState)
        {
            case HRPLimitWorkflowState::Submitted:
                limitRequest.RequestState = HRPLimitRequestStatus::RequestSubmitted;
                break;

            case HRPLimitWorkflowState::NotSubmitted:
                limitRequest.RequestState = HRPLimitRequestStatus::Draft;
                break;

            case HRPLimitWorkflowState::PendingApproval:
                limitRequest.RequestState = HRPLimitRequestStatus::RequestPendingApproval;
                break;

            case HRPLimitWorkflowState::Approved:
                limitRequest.RequestState = HRPLimitRequestStatus::RequestApproved;
                HRPLimitRequest::insertApprovedData(limitRequest);
                break;

            case HRPLimitWorkflowState::Completed:
                if (limitRequest.RequestState == HRPLimitRequestStatus::RequestRejected)
                {
                    limitRequest.RequestState = HRPLimitRequestStatus::RequestRejected;
                }
                else
                {
                    limitRequest.RequestState = HRPLimitRequestStatus::RequestApproved;
                }

                break;

            case HRPLimitWorkflowState::Returned:
                limitRequest.RequestState = HRPLimitRequestStatus::RequestRejected;
                break;

            case HRPLimitWorkflowState::PendingCancellation:
                limitRequest.RequestState = HRPLimitRequestStatus::RequestCancelled;
                break;
        }

        limitRequest.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static str txtNotExist()
    {
        return "@SYS302325";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && this.EffectiveDateTime <= DateTimeUtil::getSystemDateTime())
        {
            ret = checkFailed("@SYS191671");
        }

        if (ret && this.ExpirationDateTime <= this.EffectiveDateTime)
        {
            ret = checkFailed("@SYS191672");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.Person = DirPersonUser::current().PersonParty;
        this.ExpirationDateTime = DateTimeUtil::maxValue();
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS317808</DeveloperDocumentation>
	<Label>@SYS302248</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Person</TitleField1>
	<TitleField2>NumberSequence</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>HumanResource</Modules>
	<ReplacementKey>HRPNumberSequenceIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumberSequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SigningLimitDocument</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SigningLimitType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpirationDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Justification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SigningLimitWorkflowStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PositionWorkerAssignment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumberSequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SigningLimitDocument</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SigningLimitType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpirationDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Justification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SigningLimitWorkflowStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PositionWorkerAssignment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumberSequence</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SigningLimitRequest</Name>
			<Label>@SYS302248</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumberSequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SigningLimitDocument</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SigningLimitType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpirationDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Justification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SigningLimitWorkflowStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PositionWorkerAssignment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EffectiveDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDateTime</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ExpirationDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Justification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
			<Label>@HCM:Justification</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HRPRequestNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PositionWorkerAssignment</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>HcmPositionWorkerAssignmentRecId</ExtendedDataType>
			<Label>@SYS9103</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RequestState</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>HRPLimitRequestStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SigningLimitDocument</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>HRPLimitDocumentRecId</ExtendedDataType>
			<Label>@SYS302149</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SigningLimitType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>HRPLimitType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SigningLimitWorkflowStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>HRPLimitWorkflowState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Person</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>HcmPersonRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HRPNumberSequenceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>NumberSequence</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HRPLimitDocumentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SigningLimitDocument</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HCMPositionWorkerAssignmentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PositionWorkerAssignment</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HCMPositionWorkerAssignment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmPositionWorkerAssignment</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmPositionWorkerAssignment</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>HcmPositionWorkerAssignment_HRPLimitRequest</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PositionWorkerAssignment</Name>
					<Field>PositionWorkerAssignment</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HRPLimitDocument</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HRPLimitDocument</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HRPLimitDocument</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>HRPLimitDocument_HRPLimitRequest</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SigningLimitDocument</Name>
					<Field>SigningLimitDocument</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Person_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>DirPerson</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Person</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>PersonSkill</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Person</Name>
					<Field>Person</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>