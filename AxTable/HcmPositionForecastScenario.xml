<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastScenario</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HcmPositionForecastScenario extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>compensationGridModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the earning code value from the <c>HcmPositionForecastCompensationGroup</c> table if they exist.
    /// </summary>
    /// <param name="_legalEntity">
    /// The <c>CompanyInfoRecId</c> value of the legal entity for which we are in context.
    /// </param>
    /// <param name="_positionForecastCompensationGridRecId">
    /// The <c>_positionForecastCompensationGridRecId</c> value of the compensation grid for which we are in context.
    /// </param>
    /// <returns>
    /// A Boolean value that indicates whether the grid was modified with respect to the PositionForecastCompensation group or not.
    /// </returns>
    boolean compensationGridModified(CompanyInfoRecId _legalEntity, HcmPositionForecastCompensationGridRecId _positionForecastCompensationGridRecId)
    {
        //This method will be deleted in SYP layer later on
        //HcmPositionForecastCompensationGroup positionForecastCompensationGroup = HcmPositionForecastCompensationGroup::findByCompensationGrpIdDataAreaId(this.CompensationGroupId, CompanyInfo::find(_legalEntity).DataArea);
        //boolean isWarning = true;
        //DialogButton answer;
        //boolean doUpdates = true;
        //
        //if (_positionForecastCompensationGridRecId != 0)
        //{
        //if (this.systemGeneratedEarningLineExists())
        //{
        //answer = Box::okCancel(
        //"@SYS4005776",
        //DialogButton::Cancel,
        //'');
        //if (answer == DialogButton::Cancel)
        //{
        //doUpdates = false;
        //}
        //}
        //}
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        HcmPositionForecast positionForecastLocal;
        HcmPositionForecastRecId positionForecastId;

        positionForecastId = this.PositionForecast;

        super();

        if (HcmPositionForecastScenario::findByPositionForecast(positionForecastId).RecId == 0)
        {
            // Attempt to delete the unreferenced HcmPositionForecast record.
            positionForecastLocal = HcmPositionForecast::find(positionForecastId, true);

            if (positionForecastLocal && positionForecastLocal.validateDelete())
            {
                ttsbegin;

                positionForecastLocal.delete();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the description of the record in the <c>HRCCompRefPointSetupLine</c> table.
    /// </summary>
    /// <returns>
    /// The description of the record in the <c>HRCCompRefPointSetupLine</c> table, if one exists.
    /// </returns>
    display HRCCompRefPointDescription displayStep()
    {
        return HcmPositionForecastFormUtility::getStepDescription(this.PositionForecastCompensationGrid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayStatusIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the line of the current record in the <c>HcmPositionForecastScenario</c> table is dirty or not.
    /// </summary>
    /// <returns>
    /// The <c>HcmPositionForecastScenario</c> table status icon with tooltip; otherwise, a blank icon.
    /// </returns>
    display container displayStatusIcon()
    {
        container imageContainer;

        HcmPositionForecastLastModified positionForecastLastModified = HcmPositionForecastLastModified::findByPositionForecastScenerio(this.RecId);

        if (positionForecastLastModified.requireRecalculation())
        {
            if (imageContainer == connull())
            {
                ImageReference imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::Warning, "@Budget:BudgetPlan_PositionForecasting_HcmPositionForecast_ListViewTriangleIcon");
                imageContainer = imageReference.pack();
            }
        }

        return imageContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyTimeZoneActivationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>ActivationDateTime</c>  field value of the <c>HcmPositionForecastScenario</c> table
    /// from utcDateTime to the date value.
    /// </summary>
    /// <returns>
    /// The date value of the <c>ActivationDateTime</c> field that are in the <c>HcmPositionForecastScenario</c> table.
    /// </returns>

    public TransDate getCompanyTimeZoneActivationDate()
    {
        return HcmDateTimeUtil::convertToCompanyDate(this.ActivationDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyTimeZoneRetirementDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>RetirementDateTime</c> field value of the <c>HcmPositionForecastScenario</c> table
    /// from utcDateTime to the date value.
    /// </summary>
    /// <returns>
    /// The date value of the <c>RetirementDateTime</c> field that are in the <c>HcmPositionForecastScenario</c> table.
    /// </returns>

    public TransDate getCompanyTimeZoneRetirementDate()
    {
        return HcmDateTimeUtil::convertToCompanyDate(this.RetirementDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserTimeZoneActivationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>ActivationDateTime</c>  field value of the <c>HcmPositionForecastScenario</c> table
    /// from utcDateTime to the date value.
    /// </summary>
    /// <returns>
    /// The date value of the <c>ActivationDateTime</c> field that are in the <c>HcmPositionForecastScenario</c> table.
    /// </returns>

    public TransDate getUserTimeZoneActivationDate()
    {
        return HcmDateTimeUtil::convertToDate(this.ActivationDateTime, DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserTimeZoneRetirementDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>RetirementDateTime</c> field value of the <c>HcmPositionForecastScenario</c> table
    /// from utcDateTime to the date value.
    /// </summary>
    /// <returns>
    /// The date value of the <c>RetirementDateTime</c> field that are in the <c>HcmPositionForecastScenario</c> table.
    /// </returns>

    public TransDate getUserTimeZoneRetirementDate()
    {
        return HcmDateTimeUtil::convertToDate(this.RetirementDateTime, DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the modified field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID value to process.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(HcmPositionForecastScenario, AnniversaryDate):
                this.setNextIncreaseDate();
                break;

            case fieldNum(HcmPositionForecastScenario, ActivationDateTime),
                fieldNum(HcmPositionForecastScenario, CompensationGroupId):
                this.defaultAnniversaryDate();
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSystemGeneratedEarningLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the system generated earning line for the current record.
    /// </summary>
    /// <returns>
    /// The <c>HcmPositionForecastBudgetAcctLine</c> record for the default earning record.
    /// </returns>
    /// <remarks>
    /// Empty record buffer will be returned if no system generated line exists.
    /// </remarks>
    public HcmPositionForecastBudgetAcctLine retrieveSystemGeneratedEarningLine()
    {
        HcmPositionForecastScenario positionForecastScenario;
        HcmPositionForecastBudgetAcctLine positionForecastBudgetAcctLine;

        select RecId from positionForecastScenario
            where positionForecastScenario.RecId == this.RecId
            join positionForecastBudgetAcctLine
                where (positionForecastBudgetAcctLine.PositionForecastScenario == positionForecastScenario.RecId)
                    && (positionForecastBudgetAcctLine.IsSystemGenerated == true);

        return positionForecastBudgetAcctLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAnniversaryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the next increase date value if the compensation group increase type is set to Anniversary.
    /// </summary>
    void setAnniversaryDate()
    {
        //This method will be deleted
        //HcmPositionForecastCompensationGroup positionForecastCompensationGroup;
        //
        //if (this.CompensationGroupId)
        //{
        //positionForecastCompensationGroup = HcmPositionForecastCompensationGroup::findByCompensationGrpIdDataAreaId(this.CompensationGroupId, this.CompensationGroupDataAreaId);
        //
        //if (positionForecastCompensationGroup.StepRule == HcmPositionForecastStepRule::AnniversaryDate)
        //{
        //this.NextIncreaseDate = HcmPositionAssignCostElement_Assign::determineNextIncreaseDate(this.RecId, this.CompensationGroupId, this.CompensationGroupDataAreaId, this.AnniversaryDate);
        //}
        //else
        //{
        //this.NextIncreaseDate = HcmPositionAssignCostElement_Assign::determineNextIncreaseDate(this.RecId, this.CompensationGroupId, this.CompensationGroupDataAreaId, positionForecastCompensationGroup.BasisDate);
        //}
        //}
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextIncreaseDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the next increase date value based on the compensation group increase type.
    /// </summary>
    void setNextIncreaseDate()
    {
        this.NextIncreaseDate = dateNull();

        if (this.CompensationGroupId)
        {
            this.NextIncreaseDate = HcmPositionForecastScenario::getCompensationIncreaseDate(this.RecId,
                                                                                             this.AnniversaryDate,
                                                                                             this.CompensationGroupId,
                                                                                             this.CompensationGroupDataAreaId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>systemGeneratedEarningLineExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>HcmPositionForecastBudgetAcctLine</c> record exists
    /// for the default earning code value from the assigned
    /// <c>HcmPositionForecastCompensationGroup</c> record.
    /// </summary>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public boolean systemGeneratedEarningLineExists()
    {
        HcmPositionForecastScenario positionForecastScenario;
        HcmPositionForecastBudgetAcctLine positionForecastBudgetAcctLine;

        select RecId from positionForecastScenario
            where positionForecastScenario.RecId == this.RecId
            exists join positionForecastBudgetAcctLine
                where (positionForecastBudgetAcctLine.PositionForecastScenario == positionForecastScenario.RecId)
                    && (positionForecastBudgetAcctLine.IsSystemGenerated == true);

        return (positionForecastScenario.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateClearAndUpdateEarningCosts</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Validates if changes to the <c>HcmPositionForecastCompensationGroup</c> information requires that
    /// the existing earning cost lines should be cleared and replaced with new level and step values.
    /// </summary>
    /// <param name="_legalEntity">
    ///  The <c>CompanyInfoRecId</c> value of the legal entity for which we are in context.
    /// </param>
    /// <param name="_positionForecastCompensationGridRecId">
    ///  The <c>HcmPositionForecastCompensationGridRecId</c> value of the <c>HcmPositionForecastCompensationGrid</c> record for which we are in context.
    /// </param>
    /// <returns>
    ///  Returns true if the earning cost lines should be cleared and replaced; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  When there are system generated earning lines a dialog allows the user to override the update.
    /// </remarks>
    public boolean validateClearAndUpdateEarningCosts(CompanyInfoRecId _legalEntity, HcmPositionForecastCompensationGridRecId _positionForecastCompensationGridRecId)
    {
        HcmPositionForecastCompensationGroup positionForecastCompensationGroup = HcmPositionForecastCompensationGroup::findByCompensationGrpIdDataAreaId(this.CompensationGroupId, CompanyInfo::find(_legalEntity).DataArea);
        DialogButton answer;
        boolean doUpdates = true;

        if (this.systemGeneratedEarningLineExists())
        {
            answer = Box::okCancel(
                        "@SYS4005776",
                        DialogButton::Cancel,
                        '');
            if (answer == DialogButton::Cancel)
            {
                doUpdates = false;
            }
        }

        return doUpdates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(HcmPositionForecastScenario, ActivationDateTime):

                if (this.RetirementDateTime && (this.RetirementDateTime < this.ActivationDateTime))
                {
                    ret = ret && checkFailed("@GLS190185");
                }
                break;

            case fieldNum(HcmPositionForecastScenario, RetirementDateTime):

                if (this.RetirementDateTime && (this.RetirementDateTime < this.ActivationDateTime))
                {
                    ret = ret && checkFailed("@GLS190185");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        HcmForecastScenario hcmForecastScenario;
        ValidToDate activationDate;
        ValidFromDate retirementDate;

        hcmForecastScenario = HcmForecastScenario::find(this.ForecastScenario);
        activationDate = this.getUserTimeZoneActivationDate();
        retirementDate = this.getUserTimeZoneRetirementDate();

        ret = super();

        if (ret && this.RetirementDateTime < this.ActivationDateTime)
        {
            ret = ret && checkFailed("@GLS190185");
        }

        if (!hcmForecastScenario.isPositionDurationWithinBudgetCycle(activationDate, retirementDate))
        {
            ret = ret && checkFailed("@SYS4005922");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>HcmPositionForecastScenario</c> table; if not, an error
    ///    message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>

    public static boolean checkExist(HcmPositionForecastScenarioRecId _recId)
    {
        boolean ret = true;

        if (!HcmPositionForecastScenario::exist(_recId))
        {
            ret = checkFailed(strFmt(HcmPositionForecastScenario::txtNotExist(), tableStr(HcmPositionForecastScenario)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>HcmPositionForecastScenario</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false .
    /// </returns>

    public static boolean exist(HcmPositionForecastScenarioRecId _recId)
    {
        return _recId && (select firstonly RecId from hcmPositionForecastScenario
                    where hcmPositionForecastScenario.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsByCompGroupIdAndDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>HcmPositionForecastScenario</c> table that has the specified <c>CompensationGroupId</c>
    /// field value and <c>CompensationGroupDataAreaId</c> field value.
    /// </summary>
    /// <param name="_compensationGroupId">
    /// A <c>CompensationGroupId</c> field value.
    /// </param>
    /// <param name="_compensationGroupDataAreaId">
    /// The DataAreaId of the <c>HcmPositionForecastCompensationGroup</c> table record.
    /// </param>
    /// <returns>
    /// Returns true if the specified record exists; otherwise, false.
    /// </returns>

    public static boolean existsByCompGroupIdAndDataAreaId(
    HcmPositionForecastCompensationGroupId _compensationGroupId,
    SelectableDataArea  _compensationGroupDataAreaId)
    {
        HcmPositionForecastScenario hcmPositionForecastScenario;

        select firstonly RecId from hcmPositionForecastScenario
            where hcmPositionForecastScenario.CompensationGroupId ==  _compensationGroupId
                && hcmPositionForecastScenario.CompensationGroupDataAreaId ==_compensationGroupDataAreaId;

        return hcmPositionForecastScenario.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>HcmPositionForecastScenario</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>HcmPositionForecastScenario</c> table; otherwise, an empty record.
    /// </returns>
    public static HcmPositionForecastScenario find(
    HcmPositionForecastScenarioRecId _recId,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecastScenario hcmPositionForecastScenario;

        hcmPositionForecastScenario.selectForUpdate(_forUpdate );

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionForecastScenario.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmPositionForecastScenario
            where hcmPositionForecastScenario.RecId == _recId;

        return hcmPositionForecastScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPositionForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionForecastScenario</c> table that has a specified <c>PositionForecast</c>
    /// field value.
    /// </summary>
    /// <param name="_positionForecast">
    /// A <c>PositionForecast</c> field value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency model settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmPositionForecastScenario</c> table; otherwise, an empty
    /// record.
    /// </returns>

    public static HcmPositionForecastScenario findByPositionForecast(
    HcmPositionForecastRecId _positionForecast,
    boolean _forUpdate = false,
    ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecastScenario hcmPositionForecastScenario;

        hcmPositionForecastScenario.selectForUpdate(_forUpdate );

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionForecastScenario.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmPositionForecastScenario
            where hcmPositionForecastScenario.PositionForecast == _positionForecast;

        return hcmPositionForecastScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPositionForecastBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionForecastScenario</c> table that has a specified <c>Position</c> field value.
    /// </summary>
    /// <param name="_positionForecast">
    /// A <c>PositionForecast</c> field value.
    /// </param>
    /// <param name="_forecastScenario">
    /// A <c>ForecastScenario</c> field value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency model settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record or multiple records from the <c>HcmPositionForecastScenario</c> table; otherwise, an empty record.
    /// </returns>

    public static HcmPositionForecastScenario findByPositionForecastBudgetPlanScenario(
        HcmPositionForecastRecId _positionForecast,
        HcmForecastScenarioRecId _forecastScenario,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto
    )
    {
        HcmPositionForecastScenario hcmPositionForecastScenario;

        hcmPositionForecastScenario.selectForUpdate(_forUpdate );

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionForecastScenario.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmPositionForecastScenario
            where hcmPositionForecastScenario.ForecastScenario == _forecastScenario &&
                  hcmPositionForecastScenario.PositionForecast == _positionForecast;

        return hcmPositionForecastScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPurposeTypeRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the start and end date to be used as a range for budget purpose type filter.
    /// </summary>
    /// <param name="_positionForecastStartDate">
    /// The Activation date of position forecast.
    /// </param>
    /// <param name="_positionForecastEndDate">
    /// The Retirement date of position forecast.
    /// </param>
    /// <param name="_budgetCycleStartDate">
    /// The budget process cycle start date.
    /// </param>
    /// <param name="_budgetCycleEndDate">
    /// The budget process cycle end date.
    /// </param>
    /// <returns>
    /// Returns the container containing the range start and end date.
    /// </returns>

    public static container getBudgetPurposeTypeRange(ValidFromDate _positionForecastStartDate,
                                                      ValidToDate _positionForecastEndDate,
                                                      ValidFromDate _budgetCycleStartDate,
                                                      ValidToDate _budgetCycleEndDate)
    {
        ValidFromDate startDate;
        ValidToDate   endDate;
        container     budgetCycleDates;

        if (_positionForecastStartDate <= _budgetCycleStartDate)
        {
            startDate = _budgetCycleStartDate;
        }
        else
        {
            startDate = _positionForecastStartDate;
        }

        if (_positionForecastEndDate <= _budgetCycleEndDate)
        {
            endDate = _positionForecastEndDate;
        }
        else
        {
            endDate = _budgetCycleEndDate;
        }

        budgetCycleDates = [startDate, endDate];

        return budgetCycleDates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPositionForecastDateRangeEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the end date for the valid date range on the forecast position based on its duration and budget process cycle dates.
    /// </summary>
    /// <returns>
    /// The end date of the valid date range for the forecast position scenario.
    /// </returns>
    public TransDate getPositionForecastDateRangeEndDate()
    {
        TransDate           validEndDate;
        HcmForecastScenario hcmForecastScenario;

        hcmForecastScenario = HcmForecastScenario::find(this.ForecastScenario);

        validEndDate = this.getUserTimeZoneRetirementDate();
        validEndDate = min(validEndDate, hcmForecastScenario.BudgetProcessEndDate);

        return validEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPositionForecastDateRangeStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the start date of the valid date range on Forecast position based on its duration and budget process cycle dates.
    /// </summary>
    /// <returns>
    /// The start date of the valid date range for the forecast position scenario.
    /// </returns>
    public TransDate getPositionForecastDateRangeStartDate()
    {
        HcmForecastScenario hcmForecastScenario;
        TransDate           validStartDate;

        hcmForecastScenario = HcmForecastScenario::find(this.ForecastScenario);

        validStartDate = this.getUserTimeZoneActivationDate();
        validStartDate = max(validStartDate, hcmForecastScenario.BudgetProcessStartDate);

        return validStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCompensationGridByDuration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the compensation grid record Id in the <c>HcmPositionForecastScenario</c> table based on new forecast position duration.
    /// </summary>
    public void setCompensationGridByDuration()
    {
        HcmPositionForecastCompensationGrid hcmPositionForecastCompensationGridCurrent;
        HcmPositionForecastCompensationGrid hcmPositionForecastCompensationGridNewVersion;
        HcmPositionForecastCompGroupRefPoint hcmPositionForecastCompGroupRefPoint;
        HcmPositionForecastCompensationGroup hcmPositionForecastCompensationGroup;
        HcmPositionForecastCompensationRate hcmPositionForecastCompensationRate;

        // Update the compensation grid based on new duration and previous compensation grid.
        select firstonly RecId from hcmPositionForecastCompensationGridNewVersion
            exists join hcmPositionForecastCompensationGridCurrent
                where hcmPositionForecastCompensationGridCurrent.RefPointSetupId == hcmPositionForecastCompensationGridNewVersion.RefPointSetupId
                    && hcmPositionForecastCompensationGridCurrent.RefPointId == hcmPositionForecastCompensationGridNewVersion.RefPointId
                    && hcmPositionForecastCompensationGridCurrent.CompensationLevel == hcmPositionForecastCompensationGridNewVersion.CompensationLevel
                    && hcmPositionForecastCompensationGridCurrent.RecId == this.PositionForecastCompensationGrid
            exists join hcmPositionForecastCompGroupRefPoint
                where hcmPositionForecastCompGroupRefPoint.RecId == hcmPositionForecastCompensationGridNewVersion.CompensationGroupRefPointId
            join firstonly EffectiveDate from hcmPositionForecastCompensationRate
                order by EffectiveDate
                where  hcmPositionForecastCompensationRate.RecId == hcmPositionForecastCompGroupRefPoint.CompensationRate
                    && hcmPositionForecastCompensationRate.EffectiveDate <= this.getPositionForecastDateRangeEndDate()
                    && hcmPositionForecastCompensationRate.ExpirationDate >= this.getPositionForecastDateRangeStartDate()
            exists join hcmPositionForecastCompensationGroup
                where hcmPositionForecastCompensationGroup.RecId == hcmPositionForecastCompensationRate.CompensationGroup
                    && hcmPositionForecastCompensationGroup.CompensationGroupId == this.CompensationGroupId;

        this.PositionForecastCompensationGrid = hcmPositionForecastCompensationGridNewVersion.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPosForecastScenarioByCompRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>HcmPositionForecastScenario</c> table.
    /// </summary>
    /// <param name="_compRateRecId">
    /// The record ID of the compensation rate in <c>HcmPositionForecastCompensationRate</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists, otherwise false.
    /// </returns>
    public static boolean existPosForecastScenarioByCompRate(HcmPositionForecastCompensationRateRecId _compRateRecId)
    {
        HcmPositionForecastCompensationGrid hcmPositionForecastCompensationGrid;
        HcmPositionForecastScenario positionForecastScenario;
        HcmPositionForecastCompGroupRefPoint hcmPositionForecastCompGroupRefPoint;

        if (_compRateRecId)
        {
            select firstonly RecId from positionForecastScenario
                exists join hcmPositionForecastCompensationGrid
                    where hcmPositionForecastCompensationGrid.RecId == positionForecastScenario.PositionForecastCompensationGrid
                exists join hcmPositionForecastCompGroupRefPoint
                    where hcmPositionForecastCompGroupRefPoint.RecId == hcmPositionForecastCompensationGrid.CompensationGroupRefPointId
                    && hcmPositionForecastCompGroupRefPoint.CompensationRate == _compRateRecId;
        }

        return positionForecastScenario.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsByCompGroupAndCompLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>HcmPositionForecastScenario</c> table that is assigned the specified Compensation Group and Compensation Level.
    /// </summary>
    /// <param name="_hcmPositionForecastCompGroupRecId">
    /// A record Id for a <c>HcmPositionForecastCompensationGroup</c> table record.
    /// </param>
    /// <param name="_hcmCompensationLevelRecId">
    /// A record Id for a <c>HcmCompensationLevel</c> table record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existsByCompGroupAndCompLevel(HcmPositionForecastCompGroupRecId _hcmPositionForecastCompGroupRecId, HcmCompensationLevelRecId _hcmCompensationLevelRecId)
    {
        HcmPositionForecastScenario             hcmPositionForecastScenario;
        HcmPositionForecastCompensationGroup    hcmPositionForecastCompensationGroup;
        HcmPositionForecastCompensationGrid     hcmPositionForecastCompensationGrid;

        select firstonly RecId from hcmPositionForecastScenario
            join RecId from hcmPositionForecastCompensationGroup
                where hcmPositionForecastCompensationGroup.CompensationGroupId == hcmPositionForecastScenario.CompensationGroupId
                    && hcmPositionForecastCompensationGroup.RecId == _hcmPositionForecastCompGroupRecId
            exists join hcmPositionForecastCompensationGrid
                where hcmPositionForecastCompensationGrid.RecId == hcmPositionForecastScenario.PositionForecastCompensationGrid
                    && hcmPositionForecastCompensationGrid.CompensationLevel == _hcmCompensationLevelRecId;

        return hcmPositionForecastScenario.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompensationIncreaseDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the first increase date from <c>HcmPositionForecastScenario</c> table.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// A record id of <c>HcmPositionForecastScenario</c> table record.
    /// </param>
    /// <param name="_anniversaryDate">
    /// A <c>TransDate</c> parameter for the compensation increase anniversary date.
    /// </param>
    /// <param name="_compGroupId">
    /// A <c>HcmPositionForecastCompGroupId</c> parameter for the compensation group Id.
    /// </param>
    /// <param name="_dataAreaId">
    /// A <c>DataAreaId</c> field value.
    /// </param>
    /// <returns>
    /// The first increase date value in the <c>HcmPositionForecastScenario</c> table.
    /// </returns>
    public static TransDate getCompensationIncreaseDate(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId,
        TransDate _anniversaryDate,
        HcmPositionForecastCompensationGroupId _compGroupId,
        DataAreaId _dataAreaId)
    {
        HcmPositionForecastCompensationGroup positionForecastCompensationGroup;
        TransDate increaseDate;

        if (_compGroupId != '')
        {
            positionForecastCompensationGroup = HcmPositionForecastCompensationGroup::findByCompensationGrpIdDataAreaId(_compGroupId, _dataAreaId);

            if (positionForecastCompensationGroup.StepRule == HcmPositionForecastStepRule::AnniversaryDate)
            {
                increaseDate = HcmPositionAssignCostElement_Assign::determineNextIncreaseDate(_positionForecastScenarioRecId, _compGroupId, _dataAreaId, _anniversaryDate);
            }
            else
            {
                increaseDate = HcmPositionAssignCostElement_Assign::determineNextIncreaseDate(_positionForecastScenarioRecId, _compGroupId, _dataAreaId, positionForecastCompensationGroup.BasisDate);
            }
        }

        return increaseDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPosForcstScenarioByProcessScenarioSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the list of forecast positions filtered by the budget planning process and scenario.
    /// </summary>
    /// <param name="_budgetPlanningProcess">
    /// The selected budget planning process.
    /// </param>
    /// <param name="_budgetPlanScenario">
    /// The selected budget planning scenario.
    /// </param>
    /// <param name="_compGroupRecId">
    /// The record id in the <c>HcmPositionForecastCompensationGroup</c> table.
    /// </param>
    /// <returns>
    /// A set which contains the record IDs of the <c>HcmPositionForecastScenario</c> table filtered by the given budget planning process and scenario.
    /// </returns>
    public static Set getPosForcstScenarioByProcessScenarioSet(BudgetPlanningProcessRecId _budgetPlanningProcess,
                                                               BudgetPlanScenarioRecId _budgetPlanScenario,
                                                               HcmPositionForecastCompGroupRecId _compGroupRecId)
    {
        Set                                  positionsWithProcessAndScenarioSet = new Set(Types::Int64);
        HcmForecastScenario                  hcmForecastScenario;
        HcmPositionForecastScenario          hcmPositionForecastScenario;
        HcmPositionForecastCompensationGroup hcmPositionForecastCompensationGroup;

        while select RecId from hcmPositionForecastScenario
            exists join hcmPositionForecastCompensationGroup
                where hcmPositionForecastCompensationGroup.DataAreaId == hcmPositionForecastScenario.CompensationGroupDataAreaId
                    && hcmPositionForecastCompensationGroup.CompensationGroupId == hcmPositionForecastScenario.CompensationGroupId
                    && hcmPositionForecastCompensationGroup.RecId == _compGroupRecId
            exists join hcmForecastScenario
                where hcmForecastScenario.RecId == hcmPositionForecastScenario.ForecastScenario
                    && hcmForecastScenario.BudgetPlanningProcess == _budgetPlanningProcess
                    && hcmForecastScenario.BudgetPlanScenario == _budgetPlanScenario
        {
            positionsWithProcessAndScenarioSet.add(hcmPositionForecastScenario.RecId);
        }

        return positionsWithProcessAndScenarioSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPositionIdBudgetScenarioName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the forecast position Id and scenario.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The record Id of the <c>HcmPositionForecastScenario</c> table.
    /// </param>
    /// <returns>
    /// The forecast position Id concatenated with the forecast position scenario name.
    /// </returns>
    /// <remarks>
    /// The name contains the position Id and the budget plan scenario name.
    /// </remarks>
    public static String255 getPositionIdBudgetScenarioName(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId)
    {
        HcmForecastScenario         hcmForecastScenario;
        HcmPositionForecastScenario hcmPositionForecastScenario;

        hcmPositionForecastScenario = HcmPositionForecastScenario::find(_positionForecastScenarioRecId);
        hcmForecastScenario =  HcmForecastScenario::find(hcmPositionForecastScenario.ForecastScenario);

        return strFmt("@SYS76785",
                    HcmPositionForecast::getPositionId(hcmPositionForecastScenario.PositionForecast),
                    BudgetPlanScenario::find(hcmForecastScenario.BudgetPlanScenario).Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in fields in the <c>HcmPositionForecastScenario</c>table.
    /// </summary>
    /// <remarks>
    /// Sets valid default value in non-interactive case for the <c>VersionDateTime</c> filed.
    /// </remarks>
    public void defaultRow()
    {
        this.VersionDateTime = DateTimeUtil::getSystemDateTime();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAnniversaryDate</Name>
				<Source><![CDATA[
    private void defaultAnniversaryDate()
    {
        if (this.CompensationGroupId != ''
            && this.CompensationGroupDataAreaId != ''
            && HcmPositionForecastCompensationGroup::findByCompensationGrpIdDataAreaId(this.CompensationGroupId, this.CompensationGroupDataAreaId).StepRule == HcmPositionForecastStepRule::AnniversaryDate)
        {
            this.AnniversaryDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(
                DateTimeUtil::addYears(this.ActivationDateTime, 1),
                DateTimeUtil::getUserPreferredTimeZone()));

            this.setNextIncreaseDate();

            if (this.AnniversaryDate != dateNull()
                && this.NextIncreaseDate == dateNull())
            {
                info("@Budget:PositionForecastInvalidCompensationIncreaseDate");
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@SYS4005878</DeveloperDocumentation>
	<FormRef>HcmPositionForecast</FormRef>
	<Label>@SYS4005760</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>PositionForecast</TitleField1>
	<TitleField2>LegalEntity</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>HcmPositionForecastScenarioIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PositionForecast</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PositionForecastCompensationGrid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FullTimeEquivalency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VersionDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AnniversaryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompensationGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NextIncreaseDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PositionForecast</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForecastScenario</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PositionForecast</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PositionForecast</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForecastScenario</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Duration</Name>
			<Label>@SYS80927</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActivationDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetirementDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Worker</Name>
			<Label>@SYP4940014</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkerName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PositionForecast</Name>
			<Label>@GLS190172</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PositionForecast</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ActivationDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionActivationDateTime</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AnniversaryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionForecastAnniversaryDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompensationGroupDataAreaId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompensationGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionForecastCompensationGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ForecastScenario</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmForecastScenarioRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FullTimeEquivalency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmFullTimeEquivalency</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyInfoRecId</ExtendedDataType>
			<Label>@SYS328319</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>NextIncreaseDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionForecastIncreaseDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PositionForecast</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionForecastRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PositionForecastCompensationGrid</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionForecastCompensationGridRecId</ExtendedDataType>
			<Label>@SYS302272</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>RetirementDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionRetirementDateTime</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>VersionDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionForecastVersionDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkerName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>HcmPositionForecastAssignedWorkerName</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HcmPositionForecastScenarioIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PositionForecast</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ForecastScenario</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompensationGroup</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>HcmPositionForecastCompensationGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompensationGroupDataAreaId</Name>
					<Field>CompensationGroupDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompensationGroupId</Name>
					<Field>CompensationGroupId</Field>
					<RelatedField>CompensationGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>HcmCompensationGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ForecastScenario</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmForecastScenario</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ForecastScenario</Name>
					<Field>ForecastScenario</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmPositionForecastCompensationGrid</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmPositionForecastCompensationGrid</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PositionForecastCompensationGrid</Name>
					<Field>PositionForecastCompensationGrid</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LegalEntity</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CompanyInfo_Ledger</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PositionForecast</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>HcmPositionForecast</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PositionForecast</Name>
					<Field>PositionForecast</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>