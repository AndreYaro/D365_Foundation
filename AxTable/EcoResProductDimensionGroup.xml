<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductDimensionGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductDimensionGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFixReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks and fixes records in the <c>EcoResProductDimensionGroupFldSetup</c> table.
    /// </summary>
    /// <remarks>
    ///    If a record for a dimension does not exist in the <c>EcoResProductDimensionGroupFldSetup</c> table,
    ///    it is created. If a record exists, its line number is checked and fixed if it does not match the
    ///    position of a corresponding field in the <c>InventoryDimensions</c> field group of the
    ///    <c>InventDim</c> table.
    /// </remarks>
    public void checkFixReference()
    {
        EcoResProductDimensionGroupFldSetup productDimensionGroupFieldSetup;
        ListEnumerator                      enumerator  = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();
        FieldId                             dimFieldId;
        int                                 fieldNo;
        List                                addedDimensionGroupFieldSetupRecords = new List(Types::Record);
        boolean                             activeDimensionIsSet = false;

        ttsbegin;

        while (enumerator.moveNext())
        {
            fieldNo++;
            dimFieldId = enumerator.current();
            productDimensionGroupFieldSetup = EcoResProductDimensionGroupFldSetup::findByDimensionGroupFieldId(this.RecId, dimFieldId);

            if (productDimensionGroupFieldSetup.RecId)
            {
                // if this dimension is active, then mark that there is at least one active dimension already
                activeDimensionIsSet = activeDimensionIsSet || productDimensionGroupFieldSetup.IsActive;

                // if the record already exist for this dimension, fix the dimensionFieldId field
                if (productDimensionGroupFieldSetup.LineNumber != fieldNo)
                {
                    update_recordset productDimensionGroupFieldSetup
                        setting LineNumber = fieldNo
                        where productDimensionGroupFieldSetup.ProductDimensionGroup == this.RecId
                           && productDimensionGroupFieldSetup.DimensionFieldId      == dimFieldId;                    
                }
            }
            else
            {
                productDimensionGroupFieldSetup.clear();
                productDimensionGroupFieldSetup.initFromProductDimensionGroup(this);
                productDimensionGroupFieldSetup.DimensionFieldId    = dimFieldId;
                productDimensionGroupFieldSetup.initValue();
                productDimensionGroupFieldSetup.LineNumber          = fieldNo;

                productDimensionGroupFieldSetup.IsActive = 0;

                productDimensionGroupFieldSetup.insert();

                addedDimensionGroupFieldSetupRecords.addEnd(productDimensionGroupFieldSetup);
            }
        }

        if (!activeDimensionIsSet && !addedDimensionGroupFieldSetupRecords.empty())
        {
            enumerator = addedDimensionGroupFieldSetupRecords.getEnumerator();
            
            while (enumerator.moveNext())
            {
                productDimensionGroupFieldSetup = enumerator.current();
                
                if (productDimensionGroupFieldSetup)
                {
                    productDimensionGroupFieldSetup.IsActive = true;
                    
                    if (productDimensionGroupFieldSetup.aosValidateUpdate())
                    {
                        productDimensionGroupFieldSetup.update();
                        activeDimensionIsSet = true;
                        break;
                    }
                }
            }

            if (!activeDimensionIsSet)
            {
                warning(strFmt("@SYS322628" + ' - ' + "@SCM:ProductDimensionGroupName" + ' %1', this.Name));
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMultipleProductDimensionsActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the product dimension group has multiple product dimensions set as active.
    /// </summary>
    /// <returns>
    ///    true if the product dimension group contains multiple product dimensions that are active;
    ///    otherwise, false.
    /// </returns>
    public boolean hasMultipleProductDimensionsActive()
    {
        return (EcoResProductDimGroupSetup::newDimensionGroup(this.RecId).activeDimensionFields().elements() > 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasProductDimensionsActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the product dimension group contains at least one product dimension that is set
    ///    as active.
    /// </summary>
    /// <returns>
    ///    true if the product dimension group has at least one product dimension that is active; otherwise,
    ///    false.
    /// </returns>
    public boolean hasProductDimensionsActive()
    {
        if (!this.RecId)
        {
            return false;
        }

        return (EcoResProductDimGroupSetup::newDimensionGroup(this.RecId).activeDimensionFields().elements() != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record in the <c>EcoResProductDimensionGroup</c> table and creates related records in the <c>EcoResProductDimensionGroupFldSetup</c> table.
    /// </summary>
    public void insert()
    {
        ttsbegin;

        super();

        this.checkFixReference();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>EcoResProductDimensionGroup</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_productDimensionGroup">
    ///    The ID of the <c>EcoResProductDimensionGroup</c> record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    static public boolean checkExist(EcoResProductDimensionGroupRecId _productDimensionGroup)
    {
        if (_productDimensionGroup && ! EcoResProductDimensionGroup::exist(_productDimensionGroup))
        {
            return checkFailed(EcoResProductDimensionGroup::txtNotExist());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixReferenceAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks and fixes records in the <c>EcoResProductDimensionGroupFldSetup</c> table across all product
    ///    dimension groups.
    /// </summary>
    /// <remarks>
    ///    See the description of the <c>checkFixReference</c> method for more information.
    /// </remarks>
    static public void checkFixReferenceAll()
    {
        EcoResProductDimensionGroup             productDimensionGroup;
        EcoResProductDimensionGroupFldSetup     productDimensionGroupFieldSetup;
        EcoResProductDimensionGroupFldSetup     productDimensionGroupFieldSetupDelete;
        Set                                     dimFields = InventDim::dimFieldList2Set(InventDim::dimProductDimensionEnabledFieldList());

        ttsbegin;

        while select DimensionFieldId from productDimensionGroupFieldSetup
            group by DimensionFieldId
        {
            if (!dimFields.in(productDimensionGroupFieldSetup.DimensionFieldId))
            { // delete from all groups
                delete_from productDimensionGroupFieldSetupDelete
                    where productDimensionGroupFieldSetupDelete.DimensionFieldId == productDimensionGroupFieldSetup.DimensionFieldId;
            }
        }

        while select productDimensionGroup
        {
            productDimensionGroup.checkFixReference();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>EcoResProductDimensionGroup</c> table exists.
    /// </summary>
    /// <param name="_productDimensionGroup">
    ///    The ID of the <c>EcoResProductDimensionGroup</c> record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    static public boolean exist(EcoResProductDimensionGroupRecId _productDimensionGroup)
    {
        return _productDimensionGroup
            && (select firstonly RecId from ecoResProductDimensionGroup
                    where ecoResProductDimensionGroup.RecId == _productDimensionGroup).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FilterDimensionGroupForKit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters dimension group for Kit products.
    /// </summary>
    /// <param name="filterDimGrpQuery">
    /// The Dimension Group Query.
    /// </param>
    /// <remarks>
    /// The query is functionaly equivelent to the following logic
    ///
    ///         select  from ecoResProductDimensionGroup
    ///            exists join ecoResProductDimensionGroupFldSetupExists
    ///                where ecoResProductDimensionGroupFldSetupExists.productdimensiongroup == ecoResProductDimensionGroup.recid
    ///                AND ecoResProductDimensionGroupFldSetupExists.isactive == NoYes::Yes
    ///                AND ecoResProductDimensionGroupFldSetupExists.dimensionfieldid == fieldnum(InventDim, ConfigId)
    ///            notexists join ecoResProductDimensionGroupFldSetupNotExists
    ///                where ecoResProductDimensionGroupFldSetupNotExists.productdimensiongroup == ecoResProductDimensionGroup.recid
    ///                AND ecoResProductDimensionGroupFldSetupNotExists.isactive == NoYes::Yes
    ///                AND ecoResProductDimensionGroupFldSetupNotExists.dimensionfieldid != fieldnum(InventDim, ConfigId)
    /// </remarks>
    static public void FilterDimensionGroupForKit(Query filterDimGrpQuery)
    {
        QueryBuildDataSource qbdsProdDimGrp;
        QueryBuildDataSource qbdsProdDimGrpFldSetupExist;
        QueryBuildDataSource qbdsProdDimGrpFldSetupNotExist;
        QueryBuildRange      qbr;

        // Add EcoResProductDimensionGroup - Main data source
        qbdsProdDimGrp = filterDimGrpQuery.dataSourceTable(tableNum(EcoResProductDimensionGroup));
        if (!qbdsProdDimGrp)
        {   // Add it if it does not already exist...
            qbdsProdDimGrp = filterDimGrpQuery.addDataSource(tableNum(EcoResProductDimensionGroup));
        }

        qbdsProdDimGrpFldSetupExist = qbdsProdDimGrp.addDataSource(tableNum(EcoResProductDimensionGroupFldSetup));

        // exist join portion
        qbdsProdDimGrpFldSetupExist.joinMode(JoinMode::ExistsJoin);
        qbdsProdDimGrpFldSetupExist.addLink(fieldNum(EcoResProductDimensionGroup, RecId), fieldNum(EcoResProductDimensionGroupFldSetup, productdimensiongroup));

        qbr = qbdsProdDimGrpFldSetupExist.addRange(fieldNum(EcoResProductDimensionGroupFldSetup, IsActive));
        qbr.value(queryValue(NoYes::Yes));

        qbr = qbdsProdDimGrpFldSetupExist.addRange(fieldNum(EcoResProductDimensionGroupFldSetup, DimensionFieldId));
        qbr.value(queryValue(fieldnum(InventDim, ConfigId)));

        // not exist join portion
        // Add EcoResProductDimensionGroup - child of previous DS
        qbdsProdDimGrpFldSetupNotExist = qbdsProdDimGrp.addDataSource(tableNum(EcoResProductDimensionGroupFldSetup));

        qbdsProdDimGrpFldSetupNotExist.joinMode(JoinMode::NoExistsJoin);
        qbdsProdDimGrpFldSetupNotExist.addLink(fieldNum(EcoResProductDimensionGroup, RecId), fieldNum(EcoResProductDimensionGroupFldSetup, productdimensiongroup));

        qbr = qbdsProdDimGrpFldSetupNotExist.addRange(fieldNum(EcoResProductDimensionGroupFldSetup, IsActive));
        qbr.value(queryValue(NoYes::Yes));

        qbr = qbdsProdDimGrpFldSetupNotExist.addRange(fieldNum(EcoResProductDimensionGroupFldSetup, DimensionFieldId));
        qbr.value(SysQuery::valueNot(fieldnum(InventDim, ConfigId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResProductDimensionGroup</c> table.
    /// </summary>
    /// <param name="_productDimensionGroup">
    ///    The ID of the <c>EcoResProductDimensionGroup</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResProductDimensionGroup</c> table; otherwise, an empty record.
    /// </returns>
    static public EcoResProductDimensionGroup find(EcoResProductDimensionGroupRecId _productDimensionGroup, boolean _forUpdate = false)
    {
        EcoResProductDimensionGroup  productDimensionGroup;

        productDimensionGroup.selectForUpdate(_forUpdate);
        if (0 != _productDimensionGroup)
        {
            select firstonly productDimensionGroup
                where productDimensionGroup.RecId == _productDimensionGroup;
        }
        return productDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDimensionGroupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>EcoResProductDimensionGroup</c> table.
    /// </summary>
    /// <param name="_dimensionGroupName">
    /// A dimension group name to use as a filter in the search.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to select the record for update.
    /// </param>
    /// <returns>
    /// An <c>EcoResProductDimensionGroup</c> buffer.
    /// </returns>
    static public EcoResProductDimensionGroup findByDimensionGroupName(EcoResProductDimensionGroupName _dimensionGroupName, boolean _forUpdate = false)
    {
        EcoResProductDimensionGroup  productDimensionGroup;

        productDimensionGroup.selectForUpdate(_forUpdate);
        if (_dimensionGroupName)
        {
            select firstonly productDimensionGroup
                where productDimensionGroup.Name == _dimensionGroupName;
        }
        return productDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupsHaveSameDimensionsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the two specified groups have the same dimensions marked as being active.
    /// </summary>
    /// <param name="_group1">
    /// The ID of the first group.
    /// </param>
    /// <param name="_group2">
    /// The ID of the second group.
    /// </param>
    /// <returns>
    /// true if the groups have the same dimensions active; otherwise, false.
    /// </returns>
    static public boolean groupsHaveSameDimensionsActive(
        EcoResProductDimensionGroupRecId    _group1,
        EcoResProductDimensionGroupRecId    _group2)
    {
        EcoResProductDimGroupSetup      group1Setup     = EcoResProductDimGroupSetup::newDimensionGroup(_group1);
        EcoResProductDimGroupSetup      group2Setup     = EcoResProductDimGroupSetup::newDimensionGroup(_group2);

        InventDimParm                   group1Active    = group1Setup.inventDimParmActiveDimensions();
        InventDimParm                   group2Active    = group2Setup.inventDimParmActiveDimensions();

        return InventDimParm::isInventDimParmEqual(group1Active, group2Active);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedByAnyProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the product dimension group is used by any product.
    /// </summary>
    /// <param name="_dimensionGroup">
    ///     The ID of the dimension group.
    /// </param>
    /// <returns>
    ///     true if the group is in use; otherwise, false.
    /// </returns>
    static public boolean isUsedByAnyProduct(EcoResProductDimensionGroupRecId _dimensionGroup)
    {
        EcoResProductDimensionGroupProduct      ecoResProductDimensionGroupProduct;

        select firstonly RecId
            from ecoResProductDimensionGroupProduct
                where ecoResProductDimensionGroupProduct.ProductDimensionGroup == _dimensionGroup;

        if (ecoResProductDimensionGroupProduct.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the relevant maintenance form for the specified product dimension group.
    /// </summary>
    /// <param name="_productDimensionGroup">
    /// The product dimension group for which the form is opened.
    /// </param>
    /// <param name="_caller">
    /// Specifies the caller object.
    /// </param>
    static public void jumpRef(EcoResProductDimensionGroupRecId _productDimensionGroup, Object _caller = null)
    {
        Args                            args            = new Args();
        MenuFunction                    menuFunction;

        menuFunction = new MenuFunction(menuitemDisplayStr(EcoResProductDimensionGroup), MenuItemType::Display);

        // pass the caller object to determine if product dimension group form is opened in context of a kit product.
        args.caller(_caller);

        args.lookupRecord(EcoResProductDimensionGroup::find(_productDimensionGroup));
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static public TxtNotExist txtNotExist()
    {
        return "@SYS133233";
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS133213</DeveloperDocumentation>
	<FormRef>EcoResProductDimensionGroup</FormRef>
	<Label>@SYS133212</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ModifiedBy>Yes</ModifiedBy>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EcoResProductDimensionGroupFldSetup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResProductDimensionGroupFldSetup</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimensionGroupName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>