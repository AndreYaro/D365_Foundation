<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMAStageTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SMAStageTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogGiveReason</Name>
				<Source><![CDATA[
        public void dialogGiveReason(SMAStageId _stageId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceCanModity</Name>
				<Source><![CDATA[
        public void forceCanModity()
    {
        //First stage MUST be able to modify
        if (!this.ParentStageId)
        {
            this.StageCanModify = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        public void insert()
    {
        this.forceCanModity();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActivityGenerationStageReached</Name>
				<Source><![CDATA[
        public boolean isActivityGenerationStageReached(SMAStageId _generationStage)
    {
        SMAStageTable   parentStage;

        if (this.StageId == _generationStage)
        {
            return true;
        }
        else
        if (this.ParentStageId == '')
        {
            return false;
        }
        else
        {
            select firstonly parentStage where parentStage.StageId == this.ParentStageId;

            return parentStage.isActivityGenerationStageReached(_generationStage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCircularPath</Name>
				<Source><![CDATA[
        public boolean isCircularPath(SMAStageId _stageId       = this.StageId,
                                     SMAStageIdParent _parentStageId = this.ParentStageId)
    {
        SMAStageTable  stageTable;
        boolean     ret = false;

        if (_parentStageId)
        {
            while select StageId, ParentStageId from stageTable where stageTable.StageId == _parentStageId
            {
                if (stageTable.ParentStageId == _stageId)
                {
                    return true;
                }
                else
                {
                    return this.isCircularPath(_stageId, stageTable.ParentStageId);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFirstStage</Name>
				<Source><![CDATA[
        public boolean isFirstStage()
    {
        return this.ParentStageId == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        this.forceCanModity();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean ret;

        if (SMAStageTable::isParent(this.StageId))
        {
            // Unable to delete stage that is parent to other stage(s)
            throw error("@SYS88987");
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (_fieldIdToCheck == fieldnum(SMAStageTable, ParentStageId))
        {
            ret = ret && this.validateParent();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParent</Name>
				<Source><![CDATA[
        public boolean validateParent()
    {
        // Check that stage is not is own parent
        if (this.StageId == this.ParentStageId)
        {
            // A stage can not be parent to itself
            return checkFailed("@SYS91460");
        }

        // Check the first stage is unique
        if (SMAStageTable::firstExists() && this.ParentStageId == '')
        {
            return checkFailed("@SYS88956");
        }
        else
        {
            // Check for circular references
            if (this.isCircularPath())
            {
                // Circular reference
                return checkFailed("@SYS25609");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean         ret = true;
        SMAStageTable   smaStageTable;

        ret = super();

        // Check that first stage is unique
        if (this.ParentStageId == '')
        {
            select smaStageTable
            where smaStageTable.ParentStageId == ''
               && smaStageTable.RecId != this.RecId;

            if (smaStageTable)
            {
                // The first stage already exists. Select a parent stage.
                ret = checkFailed("@SYS88956");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
        public static boolean exist(SMAStageId _stageId)
    {
        return (select firstonly RecId from smaStageTable where smaStageTable.StageId == _stageId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsStages</Name>
				<Source><![CDATA[
        public static boolean existsStages()
    {
        boolean         ret         = true;
        boolean         firstExists = false;
        SMAStageTable   smaStageTable;

        while select smaStageTable
        {
            if (firstExists == false && smaStageTable.isFirstStage())
            {
                firstExists = true;
            }
        }

        if (!firstExists)
        {
            // Not all stages is implemented.
            ret = checkFailed("@SYS90974");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        public static SMAStageTable find(SMAStageId _stageId, boolean _forupdate = false)
    {
        SMAStageTable   stageTable;

        if (_stageId)
        {
            stageTable.selectForUpdate(_forupdate);

            select firstonly stageTable where stageTable.StageId == _stageId;
        }

        return stageTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParent</Name>
				<Source><![CDATA[
        public static SMAStageTable findParent(SMAStageId _parentId = '', boolean _forupdate = false)
    {
        SMAStageTable stageTable;

        stageTable.selectForUpdate(_forupdate);

        select firstonly stageTable where stageTable.ParentStageId == _parentId;

        return stageTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstExists</Name>
				<Source><![CDATA[
        public static boolean firstExists()
    {
        return SMAStageTable::findParent().RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstStage</Name>
				<Source><![CDATA[
        public static SMAStageId firstStage()
    {
        return (select firstonly smaStageTable where smaStageTable.ParentStageId == '').StageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isParent</Name>
				<Source><![CDATA[
        public static boolean isParent(SMAStageId _parentId)
    {
        return (select firstonly smaStageTable where smaStageTable.ParentStageId == _parentId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextStage</Name>
				<Source><![CDATA[
        public static SMAStageId nextStage(SMAStageId _currentStageId)
    {
        SMAStageTable   stageTable;

        select firstonly ParentStageId, StageId, StageGiveReason, StageCloseTimeLog from stageTable where stageTable.ParentStageId == _currentStageId;

        if (stageTable.StageGiveReason)
        {
             stageTable.dialogGiveReason(stageTable.StageId);
        }

        return stageTable.StageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextStageCount</Name>
				<Source><![CDATA[
        public static int nextStageCount(SMAStageId _currentStageId)
    {
        return any2int((select count(RecId) from smaStageTable where smaStageTable.ParentStageId == _currentStageId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousStage</Name>
				<Source><![CDATA[
        public static SMAStageId previousStage(SMAStageId _currentStageId)
    {
        return (SMAStageTable::find(_currentStageId).ParentStageId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SMAManagement</ConfigurationKey>
	<DeveloperDocumentation>@SYS122720</DeveloperDocumentation>
	<FormRef>SMAStageTable</FormRef>
	<Label>@SYS88948</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>StageId</TitleField1>
	<TitleField2>StageDescription</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>StageIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ServiceManagement</Modules>
	<PrimaryIndex>StageIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SMAServiceOrderTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>SMAServiceOrderTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentStageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Activities</Name>
			<Label>@SYS38378</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StageActivityPhaseId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentStageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageCanDelete</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageCanModify</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageCanCancel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageCanTransfer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageGiveReason</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageCloseTimeLog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentStageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageActivityPhaseId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StageControls</Name>
			<Label>@SYS88942</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StageCanDelete</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageCanModify</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageCanCancel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageCanTransfer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageGiveReason</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StageCloseTimeLog</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StageId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAStageId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParentStageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAStageIdParent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StageActivityPhaseId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAStageActivityPhaseId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StageCanCancel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAStageCanCancel</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StageCanDelete</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAStageCanDelete</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StageCanModify</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAStageCanModify</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StageCanTransfer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAStageCanTransfer</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StageCloseTimeLog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAStageCloseTimeLog</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StageDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAStageDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StageGiveReason</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAStageGiveReason</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>StageIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>StageId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParentStageId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ServiceOrderTable</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>SMAServiceOrderTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ServiceOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ServiceStage</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StageId</Name>
					<Field>StageId</Field>
					<RelatedField>StageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SMAStageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SMAStageTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentStageId</Name>
					<SourceEDT>SMAStageIdParent</SourceEDT>
					<Field>ParentStageId</Field>
					<RelatedField>StageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StageIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivityPhaseGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmActivityPhaseGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StageActivityPhaseId</Name>
					<Field>StageActivityPhaseId</Field>
					<RelatedField>PhaseId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PhaseIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>