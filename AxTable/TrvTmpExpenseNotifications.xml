<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvTmpExpenseNotifications</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvTmpExpenseNotifications extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateNotificationsForReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temp table with all notifications for the lines on the report.
    /// </summary>
    /// <param name = "_TrvExpTableRecId">RecId of the report to display notifications for.</param>
    public static TrvTmpExpenseNotifications populateNotificationsForReport(RefRecId _TrvExpTableRecId)
    {
        TrvTmpExpenseNotifications notifications;

        TrvTmpExpenseNotifications::populatePolicyViolations(TrvExpTable::findRecId(_TrvExpTableRecId).policyViolationLevelMsg(), notifications);

        TrvExpTrans expense;

        while select expense where expense.TrvExpTable == _TrvExpTableRecId
        {
            TrvTmpExpenseNotifications::populateNotificationsForExpense(expense, notifications);
        }

        return notifications;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateNotificationsForItemizations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temp table with all notifications for the itemized lines.
    /// </summary>
    /// <param name = "_TrvExpTransRecId">RecId of the report to display notifications for.</param>
    /// <returns>Temporary table buffer with notifications filled in.</returns>
    public static TrvTmpExpenseNotifications populateNotificationsForItemizations(RefRecId _TrvExpTransRecId)
    {
        TrvTmpExpenseNotifications notifications;

        TrvTmpExpenseNotifications::populatePolicyViolations(TrvExpTrans::find(_TrvExpTransRecId).policyViolationLevelMsg(), notifications);

        TrvExpTrans itemizedLine;

        while select itemizedLine
            where itemizedLine.LineType == TrvExpLineType::ItemizedLine
                && itemizedLine.ParentRecId == _TrvExpTransRecId
        {
            TrvTmpExpenseNotifications::populateNotificationsForItemizedExpense(itemizedLine, notifications);
        }

        return notifications;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateNotificationsForExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temp table with notifications for the expense.
    /// </summary>
    /// <remarks>
    /// If updating code in this method, check if the same change is needed for ExpenseMobileTmpExpenseNotifications.populateNotificationsForExpense
    /// </remarks>
    /// <param name = "_expense">The expense record to populate data for.</param>
    public static TrvTmpExpenseNotifications populateNotificationsForExpense(TrvExpTrans _expense, TrvTmpExpenseNotifications _notifications)
    {
        if (!_expense.isItemizationComplete())
        {
            _notifications.TrvExpTransRecId = _expense.RecId;
            _notifications.Message = "@Expense:ItemizationRequired";
            _notifications.MessageLevel = MessageSeverity::Error;
            _notifications.insert();
        }

        if (_expense.ExpType == TrvExpType::Transport && _expense.kmPrice == 0)
        {
            _notifications.TrvExpTransRecId = _expense.RecId;
            _notifications.Message = "@Expense:NoDefaultMileageRateSetupWarning";
            _notifications.MessageLevel = MessageSeverity::Error;
            _notifications.insert();
        }

        Map projBudgetViolations = TrvBudgetCheckHelper::getExpenseProjectBudgetViolationMsgs(_expense.RecId);

        MapEnumerator projBudgetEnumerator = projBudgetViolations.getEnumerator();

        while (projBudgetEnumerator.moveNext())
        {
            _notifications.TrvExpTransRecId = _expense.RecId;
            _notifications.Message = projBudgetEnumerator.currentKey();
            _notifications.MessageLevel = projBudgetEnumerator.currentValue();
            _notifications.insert();
        }

        Map budgetViolations = TrvBudgetCheckHelper::getExpenseBudgetViolationMsgs(_expense.RecId);

        MapEnumerator budgetEnumerator = budgetViolations.getEnumerator();

        while (budgetEnumerator.moveNext())
        {
            _notifications.TrvExpTransRecId = _expense.RecId;
            _notifications.Message = budgetEnumerator.currentKey();
            _notifications.MessageLevel = budgetEnumerator.currentValue();
            _notifications.insert();
        }

        TrvTmpExpenseNotifications::populatePolicyViolations(_expense.policyViolationLevelMsg(), _notifications, _expense.RecId);

        if (_expense.itemizationStatus() == TrvExpItemizationStatus::Completed)
        {
            _notifications.TrvExpTransRecId = _expense.RecId;
            _notifications.Message = "@Expense:ItemizationCompleted";
            _notifications.MessageLevel = MessageSeverity::Informational;
            _notifications.insert();
        }

        if (_expense.ReceiptsAttached)
        {
            _notifications.TrvExpTransRecId = _expense.RecId;
            _notifications.Message = "@Expense:ReceiptsAreAttached";
            _notifications.MessageLevel = MessageSeverity::Informational;
            _notifications.insert();
        }

        return _notifications;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateNotificationsForItemizedExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temp table with notifications for the expense.
    /// </summary>
    /// <param name = "_expense">The expense record to populate data for.</param>
    /// <param name = "_notifications">Notifications list.</param>
    /// <returns>Temporary table buffer with notifications filled in.</returns>
    public static TrvTmpExpenseNotifications populateNotificationsForItemizedExpense(TrvExpTrans _expense, TrvTmpExpenseNotifications _notifications)
    {
        TrvExpSubCategoryName itemizedExpSubCatName = TrvExpSubCategory::findByRecId(_expense.SubCategoryRecId).name();
        TrvTransactionAmountWithCurrencyCode amountCurrWithCurrency = _expense.amountCurrWithCurrencyCode();

        if (_expense.ExpType == TrvExpType::Transport && _expense.kmPrice == 0)
        {
            _notifications.TrvExpTransRecId = _expense.ParentRecId;
            _notifications.Message = strFmt("@ExpenseItemizedLineViolation:ItemizedLineViolation" + ". %3", itemizedExpSubCatName, amountCurrWithCurrency, "@Expense:NoDefaultMileageRateSetupWarning");
            _notifications.MessageLevel = MessageSeverity::Error;
            _notifications.insert();
        }

        Map projBudgetViolations = TrvBudgetCheckHelper::getExpenseProjectBudgetViolationMsgs(_expense.RecId);

        MapEnumerator projBudgetEnumerator = projBudgetViolations.getEnumerator();

        while (projBudgetEnumerator.moveNext())
        {
            _notifications.TrvExpTransRecId = _expense.ParentRecId;
            _notifications.Message = strFmt("@ExpenseItemizedLineViolation:ItemizedLineViolation" + ". %3", itemizedExpSubCatName, amountCurrWithCurrency, projBudgetEnumerator.currentKey());
            _notifications.MessageLevel = projBudgetEnumerator.currentValue();
            _notifications.insert();
        }

        Map budgetViolations = TrvBudgetCheckHelper::getExpenseBudgetViolationMsgs(_expense.RecId);

        MapEnumerator budgetEnumerator = budgetViolations.getEnumerator();

        while (budgetEnumerator.moveNext())
        {
            _notifications.TrvExpTransRecId = _expense.ParentRecId;
            _notifications.Message = strFmt("@ExpenseItemizedLineViolation:ItemizedLineViolation" + ". %3", itemizedExpSubCatName, amountCurrWithCurrency, budgetEnumerator.currentKey());
            _notifications.MessageLevel = budgetEnumerator.currentValue();
            _notifications.insert();
        }

        TrvTmpExpenseNotifications::populateItemizedLinePolicyViolations(_expense.policyViolationLevelMsg(), _notifications, _expense.ParentRecId, itemizedExpSubCatName, amountCurrWithCurrency);

        if (_expense.ReceiptsAttached)
        {
            _notifications.TrvExpTransRecId = _expense.ParentRecId;
            _notifications.Message = strFmt("@ExpenseItemizedLineViolation:ItemizedLineViolation" + ". %3", itemizedExpSubCatName, amountCurrWithCurrency, "@Expense:ReceiptsAreAttached");
            _notifications.MessageLevel = MessageSeverity::Informational;
            _notifications.insert();
        }

        return _notifications;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePolicyViolations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add violations from the specified list to the temp table.
    /// </summary>
    /// <param name = "_violations">List of policy violations.</param>
    /// <param name = "_expenseRecId">RecId of the expense line the policy belongs to.</param>
    private static TrvTmpExpenseNotifications populatePolicyViolations(List _violations, TrvTmpExpenseNotifications _notifications, RefRecId _expenseRecId = 0)
    {
        ListEnumerator listEnumerator;
        TrvPolicyViolation violation;

        listEnumerator = _violations.getEnumerator();

        while (listEnumerator.moveNext())
        {
            violation = listEnumerator.current();
            
            _notifications.TrvExpTransRecId = _expenseRecId;
            _notifications.Message = violation.parmViolationMessage();

            switch (violation.parmAdjustedViolationLevel())
            {
                case TrvPolicyViolationLevel::Error:
                    _notifications.MessageLevel = MessageSeverity::Error;
                    break;

                default:
                    _notifications.MessageLevel = MessageSeverity::Warning;
                    break;
            }

            _notifications.insert();
        }

        return _notifications;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the correct status icon for the given notification.
    /// </summary>
    /// <param name = "_notification">Notification to get the status icon for.</param>
    /// <returns>Container containing icon data.</returns>
    public display container statusIcon(TrvTmpExpenseNotifications _notification)
    {
        ImageReference imageReference;

        switch(_notification.MessageLevel)
        {
            case MessageSeverity::Error:
                imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::Error);
                break;

            case MessageSeverity::Warning:
                imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::Warning);
                break;

            case MessageSeverity::Informational:
                imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::Info);
                break;

            default:
                return conNull();
        }

        return imageReference.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateNotificationsForRequisition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temp table with all notifications for the lines on the travel requisition.
    /// </summary>
    /// <param name = "_TrvReqTableRecId">RecId of the report to display notifications for.</param>
    public static TrvTmpExpenseNotifications populateNotificationsForRequisition(RefRecId _TrvReqTableRecId)
    {
        TrvTmpExpenseNotifications notifications;

        TrvTmpExpenseNotifications::populatePolicyViolations(TrvRequisitionTable::find(_TrvReqTableRecId).policyViolationLevelMsg(), notifications);

        TrvRequisitionLine requisitionLine;

        while select requisitionLine where requisitionLine.TrvRequisitionTable == _TrvReqTableRecId
        {
            TrvTmpExpenseNotifications::populateNotificationsForRequisitionLine(requisitionLine, notifications);
        }

        return notifications;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateNotificationsForRequisitionLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temp table with notifications for the requisition expense.
    /// </summary>
    /// <remarks>
    /// If updating code in this method, check if the same change is needed for ExpenseMobileTmpExpenseNotifications.populateNotificationsForExpense
    /// </remarks>
    /// <param name = "_expense">The expense record to populate data for.</param>
    public static TrvTmpExpenseNotifications populateNotificationsForRequisitionLine(TrvRequisitionLine _requisitionExpense, TrvTmpExpenseNotifications _notifications)
    {
        Map projBudgetViolations = TrvBudgetCheckHelper::getRequisitionLineProjectBudgetViolationMsgs(_requisitionExpense.RecId);

        MapEnumerator projBudgetEnumerator = projBudgetViolations.getEnumerator();

        while (projBudgetEnumerator.moveNext())
        {
            _notifications.TrvExpTransRecId = _requisitionExpense.RecId;
            _notifications.Message = projBudgetEnumerator.currentKey();
            _notifications.MessageLevel = projBudgetEnumerator.currentValue();
            _notifications.insert();
        }

        Map budgetViolations = TrvBudgetCheckHelper::getRequisitionBudgetViolationMsgs(_requisitionExpense.RecId);

        MapEnumerator budgetEnumerator = budgetViolations.getEnumerator();

        while (budgetEnumerator.moveNext())
        {
            _notifications.TrvExpTransRecId = _requisitionExpense.RecId;
            _notifications.Message = budgetEnumerator.currentKey();
            _notifications.MessageLevel = budgetEnumerator.currentValue();
            _notifications.insert();
        }

        TrvTmpExpenseNotifications::populatePolicyViolations(_requisitionExpense.policyViolationLevelMsg(), _notifications, _requisitionExpense.RecId);

        return _notifications;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateItemizedLinePolicyViolations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add violations from the specified list to the temp table.
    /// </summary>
    /// <param name = "_violations">List of policy violations.</param>
    /// <param name = "_notifications">Notifications temporary table buffer.</param>
    /// <param name = "_expenseRecId">RecId of the expense line the policy belongs to.</param>
    /// <param name = "_itemizedExpSubCategoryName">Itemized expense sub category name.</param>
    /// <param name = "_amountCurrWithCurrency">Amount details with currency code.</param>
    /// <returns>Notifications temporary table details.</returns>
    private static TrvTmpExpenseNotifications populateItemizedLinePolicyViolations(List _violations, TrvTmpExpenseNotifications _notifications, RefRecId _expenseRecId, TrvCostTypeEDT _itemizedExpSubCategoryName, TrvTransactionAmountWithCurrencyCode _amountCurrWithCurrency)
    {
        ListEnumerator listEnumerator;
        TrvPolicyViolation violation;

        listEnumerator = _violations.getEnumerator();

        while (listEnumerator.moveNext())
        {
            violation = listEnumerator.current();
            
            _notifications.TrvExpTransRecId = _expenseRecId;
            _notifications.Message = strFmt("@ExpenseItemizedLineViolation:ItemizedLineViolation" + ". %3", _itemizedExpSubCategoryName, _amountCurrWithCurrency, violation.parmViolationMessage());

            switch (violation.parmAdjustedViolationLevel())
            {
                case TrvPolicyViolationLevel::Error:
                    _notifications.MessageLevel = MessageSeverity::Error;
                    break;

                default:
                    _notifications.MessageLevel = MessageSeverity::Warning;
                    break;
            }

            _notifications.insert();
        }

        return _notifications;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MessageLevel</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>MessageSeverity</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Message</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<StringSize>-1</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TrvExpTransRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvExpTrans</Name>
			<RelatedTable>TrvExpTrans</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TrvExpTransRecId</Name>
					<Field>TrvExpTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>