<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RouteTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RouteTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>consistencyCheckFix</Name>
				<Source><![CDATA[
    void consistencyCheckFix(RouteConsistencyCheck_Table  routeConsistencyCheck_Table)
    {
        Route   route;
        Query   query;

        select RecId from route
            where route.RouteId == this.RouteId;

        if (! route.RecId)
        {
            query = new Query();
            query.addDataSource(this.TableId).addRange(fieldnum(RouteTable,RouteId)).value(queryValue(this.RouteId));
            warning(
                strfmt("@SYS73515",this.RouteId),'',
                SysInfoAction_FormrunQuery::newQuery(query));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (!this.canDelete())
        {
            throw error("@SYS95152");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    void initFromInventTable(InventTable table)
    {
        this.RouteId = table.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApproved</Name>
				<Source><![CDATA[
    boolean isApproved()
    {
        return (this.Approved && this.Approver) || ! RouteTable::isRouteApproveEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the record can be deleted.
    /// </summary>
    /// <returns>
    /// true if delete is allowed; otherwise, false.
    /// </returns>
    public boolean canDelete()
    {
        return !(this.orig().Approved && RouteParameters::find().BlockEditing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the record can be updated.
    /// </summary>
    /// <returns>
    /// true if update is allowed; otherwise, false.
    /// </returns>
    public boolean canUpdate()
    {
        return this.orig().canEdit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (!this.canUpdate())
        {
            throw error("@SYS95153");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRoute</Name>
				<Source><![CDATA[
    void updateRoute(boolean _info       = true)
    {
        RouteUpdate routeUpdate;

        if (! this.CheckRoute)
            return;

        routeUpdate  = RouteUpdate::newRouteId(this.RouteId,false,_info);
        routeUpdate.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && FormDataUtil::isFormDataSource(this) && !this.orig().canEdit())
            ret = checkFailed("@SYS95152");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && FormDataUtil::isFormDataSource(this) && !this.orig().canEdit())
        {
            ret = checkFailed("@SYS95153");
        }

        if (ret && this.Approved && !this.Approver )//if it's approved, it needs an approver
        {
            ret = checkFailed(strfmt("@SYS32810", fieldpname(RouteTable, Approver)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the record can be edited.
    /// </summary>
    /// <returns>True if it is allowed to edit the recrod, otherwise false.</returns>
    public boolean canEdit()
    {
        if (this.isApproved() && RouteParameters::find().BlockEditing)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomRouteTreePackRoute</Name>
				<Source><![CDATA[
    static container bomRouteTreePackRoute(RouteId _routeId)
    {
        RouteTable      routeTable;
        container       con_1,con_2;
        RouteSearch     routeSearch = _routeId ? RouteSearch::newRouteId(_routeId,true) : null;

        routeTable = RouteTable::find(_routeId);

        if (routeTable.RecId)
            con_2 += [routeTable];
        else
            return connull();

        while (routeSearch && routeSearch.next())
        {
            con_1 =  connull();
            con_1 += [routeSearch.route()];
            con_1 += [RouteOprTable::find(routeSearch.route().OprId)];
            con_2 += [con_1];
        }
        return con_2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist(RouteId routeNum)
    {
        if (routeNum && ! RouteTable::exist(routeNum))
            return checkFailed(strfmt(RouteTable::txtNotExist(),routeNum));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(RouteId _routeNum)
    {
        return (select routeTable
                    index hint NumIdx
                    where routeTable.RouteId == _routeNum
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static RouteTable find(RouteId     _routeNum,
                           boolean     _forUpdate = false
                          )
    {
        RouteTable routeTable;
        routeTable.selectForUpdate(_forUpdate);

        if (! _routeNum)
            return routeTable;

        select routeTable
            index hint NumIdx
            where routeTable.RouteId == _routeNum;

        return routeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>RouteTable</c> table based on the <c>RecId</c> field.
    /// </summary>
    /// <param name="_recId">
    /// The value of the <c>RecId</c> field to look for.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines if the found record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The found record if any.
    /// </returns>
    static RouteTable findRecId(recId _recId, boolean _forUpdate = false)
    {
        RouteTable  routeTable;

        if (_recId)
        {
            routeTable.selectForUpdate(_forUpdate);

            select firstonly routeTable
                where routeTable.RecId == _recId;
        }

        return routeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRouteApproveEnabled</Name>
				<Source><![CDATA[
    // Is the Route approve system approved ?
    static boolean isRouteApproveEnabled()
    {
        return isConfigurationkeyEnabled(configurationkeynum(RouteApprove));
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefRouteTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the primary form for the selected record.
    /// </summary>
    /// <param name="_routeId">
    /// The route ID.
    /// </param>
    /// <remarks>
    /// The method is not run if the record does not exist.
    /// </remarks>
    static void jumpRefRouteTable(RouteId _routeId)
    {
        RouteTable      routeTable;
        MenuFunction    menuFunction;
        Args            args = new Args();

        if (_routeId)
        {
            routeTable = RouteTable::find(_routeId);
        }

        if (!routeTable)
        {
            return;
        }

        args.record(routeTable);

        menuFunction = new MenuFunction(menuitemdisplaystr(RouteTable),MenuItemType::Display);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeq</Name>
				<Source><![CDATA[
    static NumberSeq numberSeq(boolean     _makeDecisionLater              = false,
                                      boolean     _dontThrowOnMissingRefSetUp     = false
                                     )
    {
        return NumberSeq::newGetNum(RouteParameters::numRefRouteId(),
                                    _makeDecisionLater,
                                    _dontThrowOnMissingRefSetUp
                                   );
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceCode</Name>
				<Source><![CDATA[
    static NumberSequenceCode numberSequenceCode()
    {
        return NumberSequenceTable::find(RouteParameters::numRefRouteId().NumberSequenceId).NumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCreateRoute</Name>
				<Source><![CDATA[
    static container promptCreateRoute(
        ItemId                      itemId,
        EcoResItemConfigurationName configId,
        RouteId                     fromRouteId = '',
        InventSiteId                fromSiteId = ''
        )
    {
        #OCCRetryCount
        RouteTable          routeTable;

        InventTable         inventTable = InventTable::find(itemId);
        BOMRouteCopyJob     routeCopy;
        NumberSeq           numberSeq;
        NumberSequenceTable numberSequenceTable;
        boolean             manual;

        numberSeq   = RouteTable::numberSeq(false,true);
        if (numberSeq)
        {
            numberSequenceTable = NumberSequenceTable::findByNaturalKey(numberSeq.parmNumberSequenceCode());
        }
        manual = !numberSeq || (numberSequenceTable && numberSequenceTable.numAllowEdit());

        if (! inventTable.inventItemType().canHaveRoutes())
        {
            throw error(strfmt("@SYS22874",inventTable.ItemId));
        }

        RouteCreateDialog routeCreateDialog = RouteCreateDialog::newDialog();
        container dialogVal = routeCreateDialog.promptCreateRouteDialog(manual);;

        if (!dialogVal)
        {
            return ['', ''];
        }
        
        RouteId         dialogNumber;
        InventSiteId    dialogSiteId;
        NoYes           dialogCopy;
        Name            dialogName;
        [dialogNumber, dialogName, dialogCopy, dialogSiteId] = dialogVal;

        try
        {
            ttsbegin;

            routeTable.RouteId = dialogNumber;
            if (! routeTable.RouteId)
            {
                if (! numberSeq)
                {
                    numberSeq = RouteTable::numberSeq();
                }
                routeTable.RouteId      = RouteTable::initRouteId(numberSeq);
            }

            routeTable.ItemGroupId      = inventTable.itemGroupId();
            routeTable.Name             = dialogName;
            if (! routeTable.validateWrite())
            {
                throw error("@SYS23020");
            }

            routeTable.insert();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        if (dialogNumber && numberSequenceTable && numberSequenceTable.Continuous)
        {
            // Use tts here to avoid warning
            ttsbegin;
            // Reserve number from prompt
            NumberSeq::newReserveNumFromId(numberSequenceTable.RecId,false,true).reserve(dialogNumber);
            ttscommit;
        }

        if (dialogCopy)
        {
            routeCopy = BOMRouteCopyJob::newFromToRouteId(fromRouteId, routeTable.RouteId, fromSiteId);

            if (fromRouteId)
            {
                routeCopy.parmFromItemId(itemId);
                routeCopy.parmFromConfigId(configId);
            }
            routeCopy.parmToItemId(itemId);
            routeCopy.parmToConfigId(configId);
            if (dialogSiteId != '')
            {
                routeCopy.parmToSiteId(dialogSiteId);
            }
            if (routeCopy.prompt())
            {
                routeCopy.runOperation();
            }

            return [routeTable.RouteId, routeCopy.parmToSiteId()];
        }
        else
        {
            return [routeTable.RouteId, dialogSiteId];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCreateRouteOld</Name>
				<Source><![CDATA[
    [SysObsolete('This method should be removed once RouteCreateDialogFlight is removed', false, 28\6\2023)]
    private static container promptCreateRouteOld(
        ItemId                      itemId,
        EcoResItemConfigurationName configId,
        RouteId                     fromRouteId = '',
        InventSiteId                fromSiteId = ''
        )
    {
        #OCCRetryCount
        RouteTable          routeTable;
        Dialog              dialog;
        DialogField         fieldNumber;
        DialogField         fieldName;
        DialogField         fieldCopy;
        DialogField         fieldSite;
        RouteId             dialogNumber;
        InventTable         inventTable = InventTable::find(itemId);
        BOMRouteCopyJob     routeCopy;
        NumberSeq           numberSeq;
        NumberSequenceTable numberSequenceTable;
        boolean             manual;
        InventSiteId        dialogSiteId;
        boolean             dialogOk = true;

        numberSeq   = RouteTable::numberSeq(false,true);
        if (numberSeq)
        {
            numberSequenceTable = NumberSequenceTable::findByNaturalKey(numberSeq.parmNumberSequenceCode());
        }
        manual = !numberSeq || (numberSequenceTable && numberSequenceTable.numAllowEdit());

        if (! inventTable.inventItemType().canHaveRoutes())
        {
            throw error(strfmt("@SYS22874",inventTable.ItemId));
        }

        dialog = new Dialog("@SYS25123");
        dialog.addText("@SCM:RouteCreateStaticTextRoute");

        if (manual)
        {
            fieldNumber = dialog.addField(extendedtypestr(RouteIdBase),"@SYS21709");
        }
        fieldName = dialog.addField(extendedtypestr(Name),"@SYS6303","@SYS50977");
        fieldCopy = dialog.addField(enumstr(NoYes),"@SYS12898","@SYS50978");
        fieldSite = dialog.addField(extendedtypestr(InventSiteId),"@SYS103211","@SYS103217");
        fieldSite.mandatory_RU(true);

        dialog.formBuildDesign().dialogSize(0);

        if (! dialog.run())
            return ['', ''];

        if (fieldNumber)
        {
            dialogNumber = fieldNumber.value();
        }
        else
        {
            dialogNumber = '';
        }

        if (fieldSite)
        {
            dialogSiteId = fieldSite.value();
        }
        else
        {
            dialogSiteId = '';
        }

        // validate that the site is valid
        if (!dialogSiteId)
        {
            dialogOk = checkFailed(strfmt("@SYS84378", "@SYS103211"));
        }
        else if (!InventSite::exist(dialogSiteId))
        {
            dialogOk = checkFailed(strfmt("@SYS111931", dialogSiteId));
            dialogSiteId = '';
        }

        try
        {
            ttsbegin;

            if (dialogOk)
            {
                routeTable.RouteId = dialogNumber;
                if (! routeTable.RouteId)
                {
                    if (! numberSeq)
                    {
                        numberSeq = RouteTable::numberSeq();
                    }
                    routeTable.RouteId      = RouteTable::initRouteId(numberSeq);
                }

                routeTable.ItemGroupId      = inventTable.itemGroupId();
                routeTable.Name             = fieldName.value();
                if (! routeTable.validateWrite())
                {
                    throw error("@SYS23020");
                }

                routeTable.insert();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        if (dialogNumber && numberSequenceTable && numberSequenceTable.Continuous)
        {
            // Use tts here to avoid warning
            ttsbegin;
            // Reserve number from prompt
            NumberSeq::newReserveNumFromId(numberSequenceTable.RecId,false,true).reserve(dialogNumber);
            ttscommit;
        }

        if (fieldCopy && fieldCopy.value())
        {
            routeCopy = BOMRouteCopyJob::newFromToRouteId(fromRouteId, routeTable.RouteId, fromSiteId);

            if (fromRouteId)
            {
                routeCopy.parmFromItemId(itemId);
                routeCopy.parmFromConfigId(configId);
            }
            routeCopy.parmToItemId(itemId);
            routeCopy.parmToConfigId(configId);
            if (dialogSiteId != '')
            {
                routeCopy.parmToSiteId(dialogSiteId);
            }
            if (routeCopy.prompt())
            {
                routeCopy.runOperation();
            }

            return [routeTable.RouteId, routeCopy.parmToSiteId()];
        }
        else
        {
            return [routeTable.RouteId, dialogSiteId];
    }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS21957";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRouteId</Name>
				<Source><![CDATA[
    static protected RouteId initRouteId(NumberSeq _numberSeq)
    {
        return _numberSeq.num();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProdRouting</ConfigurationKey>
	<DeveloperDocumentation>@SYS124209</DeveloperDocumentation>
	<FormRef>RouteTable</FormRef>
	<Label>@SYS16532</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>RouteId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>NumIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>NumIdx</PrimaryIndex>
	<TableContents>BaseData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>Route</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>Route</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RouteOpr</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RouteOpr</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RouteVersion</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RouteVersion</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CheckRoute</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CaseMoreInformation</Name>
			<Label>@SYS314356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ListPageOverview</Name>
			<Label>@SYS117973</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CheckRoute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Approved</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>RouteApprove</ConfigurationKey>
			<ExtendedDataType>RouteApproved</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Approver</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>RouteApprove</ConfigurationKey>
			<ExtendedDataType>BOMRouteApprover</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CheckRoute</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS14575</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RouteId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RouteId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkerApprover</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Route</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Approver</Name>
					<Field>Approver</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemGroupId</Name>
					<Field>ItemGroupId</Field>
					<RelatedField>ItemGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemGroupIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>