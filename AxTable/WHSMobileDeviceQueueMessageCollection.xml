<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileDeviceQueueMessageCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSMobileDeviceQueueMessageCollection extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a message collection record and updates state on related messages.
    /// </summary>
    public void insert()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super();

        WHSMobileDeviceEvent mobileDeviceEvent = WHSMobileDeviceEvent::singletonFromType(this.EventType);

        if (mobileDeviceEvent)
        {
            mobileDeviceEvent.updateStateOnRelatedMessages(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTypeAndIdentifier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WHSMobileDeviceQueueMessageCollection</c> table.
    /// </summary>
    /// <param name="_eventType">The event type to find.</param>
    /// <param name="_identifier">The identifier to find.</param>
    /// <param name="_forupdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A record in the <c>WHSMobileDeviceQueueMessageCollection</c> table; otherwise, an empty record.</returns>
    [Hookable(false)]
    public static WHSMobileDeviceQueueMessageCollection findByTypeAndIdentifier(
        WHSMobileDeviceQueueEventType                   _eventType,
        WHSMobileDeviceQueueMessageCollectionIdentifier _identifier,
        boolean                                         _forupdate = false)
    {
        WHSMobileDeviceQueueMessageCollection mobileDeviceQueueMessageCollection;

        if (_identifier)
        {
            mobileDeviceQueueMessageCollection.selectForUpdate(_forupdate);

            select firstonly mobileDeviceQueueMessageCollection
                where mobileDeviceQueueMessageCollection.EventType == _eventType
                   && mobileDeviceQueueMessageCollection.Identifier == _identifier;
        }

        return mobileDeviceQueueMessageCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WHSMobileDeviceQueueMessageCollection</c> table.
    /// </summary>
    /// <param name="_recId">The record ID of the <c>WHSMobileDeviceQueueMessageCollection</c> to find.</param>
    /// <param name="_forupdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A record in the <c>WHSMobileDeviceQueueMessageCollection</c> table; otherwise, an empty record.</returns>
    public static WHSMobileDeviceQueueMessageCollection findRecId(RecId _recId, boolean _forupdate = false)
    {
        WHSMobileDeviceQueueMessageCollection mobileDeviceQueueMessageCollection;

        if (_recId)
        {
            mobileDeviceQueueMessageCollection.selectForUpdate(_forupdate);

            select firstonly mobileDeviceQueueMessageCollection
                where mobileDeviceQueueMessageCollection.RecId == _recId;
        }

        return mobileDeviceQueueMessageCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteWhenMessageStateValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if mobile device message can be deleted for a given message collection record.
    /// </summary>
    /// <returns>true if record can be deleted; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean canDeleteWhenMessageStateValid()
    {
        WHSMobileDeviceQueueMessage mobileDeviceQueueMessage;
            
        select firstonly RecId from mobileDeviceQueueMessage
                    where mobileDeviceQueueMessage.QueueMessageCollectionRecId == this.RecId
                       && mobileDeviceQueueMessage.State == WHSMobileDeviceQueueMessageState::Queued;

        return mobileDeviceQueueMessage.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countLicensePlates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of associated event messages with license plate specified for the given collection record id.
    /// </summary>
    /// <param name = "_mobileDeviceQueueMessageCollectionRecId">The record ID of the <c>WHSMobileDeviceQueueMessageCollection</c>.</param>
    /// <returns>The number of associated event messages with license plate specified.</returns>
    [Hookable(false)]
    public static int64 countLicensePlates(RecId _mobileDeviceQueueMessageCollectionRecId)
    {
        WHSMobileDeviceQueueMessage mobileDeviceQueueMessage;
            
        select count(RecId) from mobileDeviceQueueMessage
                where mobileDeviceQueueMessage.QueueMessageCollectionRecId == _mobileDeviceQueueMessageCollectionRecId
                   && mobileDeviceQueueMessage.LicensePlateId;

        return mobileDeviceQueueMessage.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (ret &&
            !this.canDeleteWhenMessageStateValid())
        {
            ret = checkFailed("@WAX:Error_QueuedMobileDeviceQueueMessageCollectionCannotBeDeleted");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:Table_WHSMobileDeviceQueueMessageCollection_DeveloperDocumentation</DeveloperDocumentation>
	<Label>@WAX:Table_WHSMobileDeviceQueueMessageCollection_Label</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>EventType</TitleField1>
	<TitleField2>Identifier</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>IdentifierIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>InventoryAndAdvancedWarehouse</Modules>
	<ReplacementKey>IdentifierIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EventType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Identifier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EventType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Identifier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Identifier</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMobileDeviceQueueMessageCollectionIdentifier</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EventType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSMobileDeviceQueueEventType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationIdTo</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationIdTo</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IdentifierIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EventType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Identifier</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RegisteringInventLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>QueueMessageCollection</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>InventLocationType_Extern</Name>
					<RelatedField>InventLocationType</RelatedField>
					<ValueStr>InventLocationType::Standard</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ToInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ToInventLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>QueueMessageCollection</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationIdTo</Name>
					<Field>InventLocationIdTo</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>InventLocationType_Extern</Name>
					<RelatedField>InventLocationType</RelatedField>
					<ValueStr>InventLocationType::Standard</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>