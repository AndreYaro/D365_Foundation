<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRTmpSalesAddress</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRTmpSalesAddress extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addressChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if any of the address fields have changed.
    /// </summary>
    /// <returns>
    /// true if any of the address fields have changed; otherwise, false.
    /// </returns>
    boolean addressChanged()
    {
        boolean ret = false;

        if (this.orig().Address != this.Address
            || this.orig().Phone != this.Phone
            || this.orig().City != this.City
            || this.orig().State != this.State
            || this.orig().County != this.County
            || this.orig().Country != this.Country)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all the records from the temporary table.
    /// </summary>
    public void clearTable()
    {
        // clear the temp table
        delete_from this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewTmpRecFromAddress</Name>
				<Source><![CDATA[
        private void createNewTmpRecFromAddress(LogisticsPostalAddress _logisticsPostalAddress,
                    AccountNum _custAccount,
                    TableId _tableId,
                    LogisticsLocationRoleType _logisticsLocationRoleType = LogisticsLocationRoleType::Delivery)
    {
        CustTable   custTable;
        CustTable               refCustTable;
        LogisticsElectronicAddress  logisticsElectronicAddress;
        custTable = CustTable::find(_custAccount);

        ttsBegin;
        this.AddressRecId = _logisticsPostalAddress.RecId;
        this.Address = _logisticsPostalAddress.Address;
        this.City = _logisticsPostalAddress.City;
        this.State = _logisticsPostalAddress.State;
        this.County = _logisticsPostalAddress.County;
        this.Country = _logisticsPostalAddress.CountryRegionId;
        this.Street = _logisticsPostalAddress.Street;
        this.ZipCode = _logisticsPostalAddress.ZipCode;
        this.SalesID = "";
        this.LineNum = 0;

        this.AddressTableName = tableId2pname(_tableId);
        this.LogisticsLocationRoleType = _logisticsLocationRoleType;

        this.TaxGroup = LogisticsLocationExt::find(_logisticsPostalAddress.RecId).TaxGroup;

        this.SalesQty = 0;
        this.setDlvMode("");

        this.CustAccount = _custAccount;

        refCustTable = MCRTmpSalesAddress::findCustomerFromLocation(_logisticsPostalAddress.Location);
        if (refCustTable.AccountNum && refCustTable.AccountNum != _custAccount)
        {
            this.ShipToAccountRef = refCustTable.AccountNum;
        }

        select firstonly Locator from logisticsElectronicAddress
            where logisticsElectronicAddress.Location == _logisticsPostalAddress.Location
            && logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Phone;

        this.Phone = logisticsElectronicAddress.Locator;

        // Set the references
        this.DeliveryPostalAddress = _logisticsPostalAddress.RecId;

        if (this.validateWrite())
        {
            this.insert();
        }
        else
        {
            throw error("@SYS104318");
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the sales address from the table buffer.
    /// </summary>
    /// <param name="_initFromTable">
    /// The table buffer in which to initialize the sales address.
    /// </param>
    /// <param name="_deliveryOnly">
    /// When true, initialize the default delivery address only; otherwise, false.
    /// </param>
    void initFromAddress(Common _initFromTable, boolean _deliveryOnly = false)
    {
        switch (_initFromTable.TableId)
        {
            case(tableNum(CustTable)):
                if (_deliveryOnly)
                {
                    this.initFromAddressCustDefault(_initFromTable);
                }
                else
                {
                    this.initFromAddressCustomer(_initFromTable);
                }
                break;

            case(tableNum(SalesTable)):
                this.initFromAddressSalesOrder(_initFromTable);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAddressCustDefault</Name>
				<Source><![CDATA[
        private void initFromAddressCustDefault(CustTable _custTable)
    {
        LogisticsPostalAddress logisticsPostalAddress;

        logisticsPostalAddress = _custTable.mcrDefaultDeliveryPostalAddress();

        ttsBegin;

        select forupdate this
                where this.Address == logisticsPostalAddress.Address;

        if (this)
        {
            if (!this.LogisticsLocationRoleType)
                this.LogisticsLocationRoleType = LogisticsLocationRoleType::Delivery;

            if (!this.CustAccount)
                this.CustAccount = _custTable.AccountNum;

            if (!_custTable.AccountNum || this.CustAccount == _custTable.AccountNum)
                this.DeliveryPostalAddress = logisticsPostalAddress.RecId;

            if (this.validateWrite())
            {
                this.update();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
        else
        {
            this.createNewTmpRecFromAddress(logisticsPostalAddress, _custTable.AccountNum, _custTable.TableId);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAddressCustomer</Name>
				<Source><![CDATA[
        private void initFromAddressCustomer(CustTable _custTable)
    {
        LogisticsPostalAddress logisticsPostalAddress;
        DirPartyPostalAddressView dirPartyPostalAddressView;
        LogisticsLocation       logisticsLocation;
        DirPartyLocation        dirPartyLocation;
        CustTable               custTable;
        DirPartyTable           dirPartyTable;

        while select Location from dirPartyPostalAddressView
            where dirPartyPostalAddressView.Party == _custTable.Party
                && dirPartyPostalAddressView.ValidFrom <= DateTimeUtil::getSystemDateTime()
                && dirPartyPostalAddressView.ValidTo >= DateTimeUtil::getSystemDateTime()
            outer join logisticsPostalAddress
            where logisticsPostalAddress.RecId == dirPartyPostalAddressView.Location
            outer join forUpdate this
            where this.Address == logisticsPostalAddress.Address
            outer join firstonly AccountNum from custTable
            exists join dirPartyTable
            where custTable.Party == dirPartyTable.RecId
            exists join dirPartyLocation
            where dirPartyTable.RecId == dirPartyLocation.Party
                && dirPartyLocation.IsLocationOwner == NoYes::Yes
            exists join logisticsLocation
            where dirPartyLocation.Location == logisticsLocation.RecId
            && logisticsLocation.RecId == logisticsPostalAddress.Location
        {
            ttsBegin;

            if (this)
            {
                if (!this.LogisticsLocationRoleType)
                    this.LogisticsLocationRoleType = LogisticsLocationRoleType::Delivery;

                if (!this.CustAccount)
                    this.CustAccount = _custTable.AccountNum;

                if (!_custTable.AccountNum || this.CustAccount == _custTable.AccountNum)
                    this.DeliveryPostalAddress = logisticsPostalAddress.RecId;

                if (custTable.AccountNum && custTable.AccountNum != _custTable.AccountNum)
                {
                    this.ShipToAccountRef = custTable.AccountNum;
                }

                if (this.validateWrite())
                {
                    this.update();
                }
                else
                {
                    throw error("@SYS104318");
                }
            }
            else
            {
                this.createNewTmpRecFromAddress(logisticsPostalAddress, _custTable.AccountNum, _custTable.TableId);
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAddressSalesOrder</Name>
				<Source><![CDATA[
        private void initFromAddressSalesOrder(SalesTable _salesTable)
    {
        LogisticsPostalAddress  logisticsPostalAddress;
        CustTable               custTable;

        logisticsPostalAddress = _salesTable.deliveryAddress();

        ttsBegin;

        select forupdate this
                where this.Address == logisticsPostalAddress.Address;

        if (this)
        {
            if (!this.LogisticsLocationRoleType)
                this.LogisticsLocationRoleType = LogisticsLocationRoleType::Delivery;

            if (!this.CustAccount)
                this.CustAccount = _salesTable.CustAccount;

            if (!_salesTable.CustAccount || this.CustAccount == _salesTable.CustAccount)
                this.DeliveryPostalAddress = logisticsPostalAddress.RecId;

            custTable = MCRTmpSalesAddress::findCustomerFromLocation(logisticsPostalAddress.Location);
            if (custTable.AccountNum && custTable.AccountNum != _salesTable.CustAccount)
            {
                this.ShipToAccountRef = custTable.AccountNum;
            }

            if (this.validateWrite())
            {
                this.update();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
        else
        {
            this.createNewTmpRecFromAddress(logisticsPostalAddress, _salesTable.CustAccount, _salesTable.TableId);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLineAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the sales address record from the specified sales line's address.
    /// </summary>
    /// <param name="_salesId">
    /// The sales ID of the sales line used to create the sales address.
    /// </param>
    /// <param name="_mcrParentLotId">
    /// The parent lot ID of the sales line used to create the sales address.
    /// </param>
    void initFromSalesLineAddress(SalesId _salesId, InventTransId _mcrParentLotId = '')
    {
        Query                querySalesLine;
        QueryRun             qrSalesLine;
        QueryBuildDataSource qbdSalesLine;
        QueryBuildDataSource qbdMCRSalesLine;
        SalesLine       salesLine;
        MCRSalesLine    mcrSalesLine;

        LogisticsPostalAddress logisticsPostalAddress;

        // build query on SalesLine sorted by createdDate
        querySalesLine = new Query();
        qbdSalesLine = querySalesLine.addDataSource(tableNum(SalesLine));

        // Only include address records for this sales order's lines
        qbdSalesLine.addRange(fieldNum(SalesLine, SalesId)).value(_salesId);
        qbdSalesLine.addRange(fieldNum(salesLine, LineDeliveryType)).value('!' + queryValue(LineDeliveryType::OrderLineWithMultipleDeliveries));

        if (_mcrParentLotId)
        {
            select firstonly RecId from salesLine
                where   salesLine.SalesId == _salesId
                exists join mcrSalesLine
                where mcrSalesLine.SalesLine == salesLine.RecId
                    && mcrSalesLine.ParentLotId == _mcrParentLotId;

            qbdMCRSalesLine = qbdSalesLine.addDataSource(tableNum(MCRSalesLine));
            qbdMCRSalesLine.relations(true);
            qbdMCRSalesLine.joinMode(JoinMode::InnerJoin);
            // If records exist use them to fetch the children ship to lines else fetch the parent
            if (salesLine.RecId)
            {
                qbdMCRSalesLine.addRange(fieldNum(MCRSalesLine, ParentLotId)).value(_mcrParentLotId);
            }
            else
            {
                qbdSalesLine.addRange(fieldNum(SalesLine, InventTransId)).value(_mcrParentLotId);
            }
        }

        qrSalesLine = new QueryRun(querySalesLine);

        while (qrSalesLine.next())
        {
            salesLine = qrSalesLine.get(tableNum(SalesLine));

            select firstonly forupdate this
                where this.DeliveryPostalAddress == salesLine.DeliveryPostalAddress;
            if (!this)
            {
                logisticsPostalAddress = salesLine.deliveryAddress();

                // Format the fields on the temp table
                this.Phone = salesLine.mcrDisplayPhone();

                this.AddressRecId   = logisticsPostalAddress.RecId;
                this.Address        = logisticsPostalAddress.Address;
                this.City           = logisticsPostalAddress.City;
                this.State          = logisticsPostalAddress.State;
                this.County         = logisticsPostalAddress.County;
                this.Country        = logisticsPostalAddress.CountryRegionId;
                this.Street         = logisticsPostalAddress.Street;
                this.ZipCode        = logisticsPostalAddress.ZipCode;

                this.SalesID        = salesLine.SalesId;

                this.AddressTableName = tableId2pname(tableNum(SalesLine));
                this.LogisticsLocationRoleType = LogisticsLocationRoleType::None;

                if (_mcrParentLotId)
                {
                    this.SalesQty = salesLine.SalesQty;
                    mcrSalesLine = qrSalesLine.get(tableNum(mcrSalesLine));
                    if (mcrSalesLine.ParentLotId == _mcrParentLotId)
                    {
                        this.LineNum = salesLine.LineNum;
                    }

                    this.setDlvMode(salesLine.DlvMode);
                    this.MCRExpedite = mcrSalesLine.Expedite;
                    this.ShippingDateRequested = salesLine.ShippingDateRequested;
                }
                else
                {
                    this.SalesQty = 0;
                    this.LineNum = 0;
                    this.setDlvMode("");
                    this.MCRExpedite = "";
                    this.ShippingDateRequested = dateNull();
                }

                // Set the taxGroup thats stored on the address record
                this.TaxGroup = salesLine.TaxGroup;

                // Store link back to address record.
                this.RefRecID = salesLine.RecId;
                this.RefTableID = tableNum(SalesLine);

                if (this.validateWrite())
                {
                    this.insert();
                }
                else
                {
                    throw error("@SYS104318");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTableAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the temporary sales address record
    /// from the sales order address of the specified sales ID.
    /// </summary>
    /// <param name="_salesId">
    /// The sales ID of the sales order whose delivery address should be used
    /// to initialize the temporary sales address record.
    /// </param>
    public void initFromSalesTableAddress(SalesId _salesId)
    {
        Query                querySalesTable;
        QueryRun             qrSalesTable;
        QueryBuildDataSource qbdSalesTable;

        SalesTable  salesTable;
        LogisticsPostalAddress logisticsPostalAddress;

        // build query on SalesLine sorted by createdDate
        querySalesTable = new Query();
        qbdSalesTable = querySalesTable.addDataSource(tableNum(SalesTable));

        // Only include address records for this sales order's lines
        qbdSalesTable.addRange(fieldNum(SalesTable, SalesId)).value(_salesId);

        qrSalesTable = new QueryRun(querySalesTable);
        while (qrSalesTable.next())
        {
            salesTable = qrSalesTable.get(tableNum(SalesTable));

            select forupdate this
                    where this.DeliveryPostalAddress == salesTable.DeliveryPostalAddress;
            if (!this )
            {
                this.Phone = salesTable.mcrDisplayPhone();

                logisticsPostalAddress = salesTable.deliveryAddress();
                this.DeliveryPostalAddress = logisticsPostalAddress.RecId;

                this.AddressRecId   = logisticsPostalAddress.RecId;
                this.Address        = logisticsPostalAddress.Address;
                this.City           = logisticsPostalAddress.City;
                this.State          = logisticsPostalAddress.State;
                this.County         = logisticsPostalAddress.County;
                this.Country        = logisticsPostalAddress.CountryRegionId;
                this.Street         = logisticsPostalAddress.Street;
                this.ZipCode        = logisticsPostalAddress.ZipCode;

                this.SalesID        = salesTable.SalesId;
                this.LogisticsLocationRoleType = LogisticsLocationRoleType::None;
                this.LineNum = 0;
                this.AddressTableName = tableId2pname(tableNum(SalesTable));
                this.SalesQty = 0;

                this.setDlvMode("");
                this.MCRExpedite = "";
                this.ShippingDateRequested = dateNull();

                // Store link back to address record.
                this.RefRecID = salesTable.RecId;
                this.RefTableID = tableNum(SalesTable);

                if (this.validateWrite())
                {
                    this.insert();
                }
                else
                {
                    throw error("@SYS104318");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrAutoChangeTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Changes the tax group if auto tax search is turned on.
    /// </summary>
    void mcrAutoChangeTaxGroup()
    {
        MCRAutoTaxSearch autoTaxSearch;
        LogisticsPostalAddress address;

        autoTaxSearch = new MCRAutoTaxSearch();

        if (autoTaxSearch.autoSearchActive())
        {
            address = LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress);
            this.TaxGroup = autoTaxSearch.setSalesTaxGroup(address.City,
                                address.State,
                                address.County,
                                address.ZipCode,
                                address.CountryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the expedite flag when the delivery mode changes, and updates the tax group when the address changes.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field that has been modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(MCRTmpSalesAddress, Street):
                this.LogisticsPostalAddressMap::formatAddress();
                break;

            case fieldNum(MCRTmpSalesAddress, ZipCode):
                this.mcrAutoChangeTaxGroup();
                break;

            // Changing the delivery mode will default in the expedite flag.
            case fieldNum(MCRTmpSalesAddress, mcrDlvMode):
                this.MCRExpedite = DlvMode::find(this.MCRDlvMode).MCRExpedite;
                break;

            case fieldNum(MCRTmpSalesAddress, City):
            case fieldNum(MCRTmpSalesAddress, State):
            case fieldNum(MCRTmpSalesAddress, County):
            case fieldNum(MCRTmpSalesAddress, Country):
                this.mcrAutoChangeTaxGroup();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Resets the address fields to their previous values.
    /// </summary>
    void resetAddress()
    {
        this.Address = this.orig().Address;
        this.Street = this.orig().Street;
        this.ZipCode = this.orig().ZipCode;
        this.City = this.orig().City;
        this.State = this.orig().State;
        this.County = this.orig().County;
        this.Country = this.orig().Country;

        this.Phone = this.orig().Phone;
        this.ShipToAccountRef = this.orig().ShipToAccountRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDlvMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the expedite field based on the specified delivery mode ID.
    /// </summary>
    /// <param name="_dlvModeId">
    /// The delivery mode ID used to set the expedite field.
    /// </param>
    void setDlvMode(DlvModeId _dlvModeId)
    {
        this.MCRDlvMode = _dlvModeId;
        this.MCRExpedite = DlvMode::find(_dlvModeId).MCRExpedite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustomerFromLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the customer record with the specified location record ID.
    /// </summary>
    /// <param name="_location">
    /// The location record ID used to find the customer.
    /// </param>
    /// <param name="_forUpdate">
    /// Indicates whether the record should be selected for update.
    /// </param>
    /// <returns>
    /// The customer record with the specified location record ID.
    /// </returns>
    public static CustTable findCustomerFromLocation(LogisticsLocationRecId _location, boolean _forUpdate = false)
    {
        LogisticsLocation       logisticsLocation;
        DirPartyLocation        dirPartyLocation;
        CustTable               custTable;
        DirPartyTable           dirPartyTable;

        if (_location)
        {
            if (_forUpdate)
            {
                custTable.selectForUpdate(true);
            }

            select firstOnly custTable
                exists join RecId from dirPartyTable
                where custTable.Party == dirPartyTable.RecId
                exists join Party from dirPartyLocation
                where dirPartyTable.RecId == dirPartyLocation.Party
                    && dirPartyLocation.IsLocationOwner == NoYes::Yes
                exists join RecId from logisticsLocation
                where dirPartyLocation.Location == logisticsLocation.RecId
                    && logisticsLocation.RecId == _location;
        }
        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>MCRTmpSalesAddress</c> record specified by the record ID.
    /// </summary>
    /// <param name="recId">
    /// The record ID used to find the record.
    /// </param>
    /// <param name="update">
    /// Indicates whether the record should be selected for update.
    /// </param>
    /// <returns>
    /// The <c>MCRTmpSalesAddress</c> record specified by the record ID.
    /// </returns>
    public static MCRTmpSalesAddress findRecId(RecId       recId, boolean     update = false)
    {
        MCRTmpSalesAddress mcrTmpSalesAddress;

        if (recId)
        {
            mcrTmpSalesAddress.selectForUpdate(update);

            select firstonly mcrTmpSalesAddress
                where mcrTmpSalesAddress.RecId == recId;
        }
        return mcrTmpSalesAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logisticsPostalAddressMapInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>LogisticsPostalAddressMapInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// A <c>LogisticsPostalAddressMapInterface</c> object.
    /// </returns>
    public LogisticsPostalAddressMapInterface logisticsPostalAddressMapInterface()
    {
        return LogisticsPostalAddressMapInterface::createInstance(this);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MCRCallCenter</ConfigurationKey>
	<Label>@MCR24220</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>SalesID</TitleField1>
	<TitleField2>CustAccount</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Address</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>City</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>County</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Country</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Street</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ZipCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressTableName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRDlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingDateRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressChanged</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQtyChanged</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvDataChanged</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Phone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipToAccountRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRExpedite</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Address</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Addressing</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AddressChanged</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@MCR24221</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AddressRecId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AddressTableName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AddressTableName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>City</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AddressCity</ExtendedDataType>
			<Label>@SYS75751</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Country</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AddressCountryRegionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>County</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AddressCountyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>TradeMultiShipTo</ConfigurationKey>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DlvDataChanged</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@MCR25100</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LogisticsLocationRoleType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LogisticsLocationRoleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRDlvMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvModeId</ExtendedDataType>
			<Label>@SYS76373</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRExpedite</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRExpedite</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRNameSuffix</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>smmNameSuffix</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRSalutation</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>smmContactPersonPrivateTitle</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Phone</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Phone</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLineRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableID</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesID</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SalesIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesQtyChanged</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@MCR24223</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShippingDateRequested</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDateRequested</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipToAccountRef</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>State</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Street</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AddressStreet</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ZipCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressZipCodeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@MCR11754</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings>
		<AxTableMapping>
			<MappingTable>LogisticsPostalAddressMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Address</MapField>
					<MapFieldTo>Address</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Attention</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ZipCode</MapField>
					<MapFieldTo>ZipCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>County</MapField>
					<MapFieldTo>County</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CountryRegionId</MapField>
					<MapFieldTo>Country</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>State</MapField>
					<MapFieldTo>State</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>City</MapField>
					<MapFieldTo>City</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Street</MapField>
					<MapFieldTo>Street</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CityRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>District</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StreetNumber</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BuildingCompliment</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostBox</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ZipCodeRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DistrictName</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StreetId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>HouseId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FlatId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Apartment_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Building_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CityKana_JP</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRDlvMode</Name>
					<SourceEDT>CustDlvModeId</SourceEDT>
					<Field>MCRDlvMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Country</Name>
					<SourceEDT>AddressCountryRegionId</SourceEDT>
					<Field>Country</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsPostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRecId</Name>
					<Field>AddressRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRExpediteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>MCRExpediteTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRExpedite</Name>
					<SourceEDT>MCRExpedite</SourceEDT>
					<Field>MCRExpedite</Field>
					<RelatedField>MCRExpedite</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ExpediteIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableID</Name>
					<Field>RefTableID</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecID</Name>
					<SourceEDT>SalesLineRefRecId</SourceEDT>
					<Field>RefRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesID</Name>
					<SourceEDT>SalesIdBase</SourceEDT>
					<Field>SalesID</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ShipToAccountRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipToAccountRef</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>ShipToAccountRef</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ZipCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressZipCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ZipCode</Name>
					<Field>ZipCode</Field>
					<RelatedField>ZipCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>