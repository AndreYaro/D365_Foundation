<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XmlCertificate</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;

public class XmlCertificate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearCertificatePropertiesFields</Name>
				<Source><![CDATA[
    private void clearCertificatePropertiesFields()
    {
        this.IssuedBy = '';
        this.IssuedTo = '';
        this.ValidFrom = DateTimeUtil::minValue();
        this.ValidTo = DateTimeUtil::minValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(XmlCertificate, RefType) :
                if (this.RefType == XmlCertificateType::LegalEntity)
                {
                    this.RefId = '';
                }
                break;

            case fieldnum(XmlCertificate, CertificateSubject) :

                if (this.CertificateSubject)
                {
                    [ this.IssuedBy,
                    this.IssuedTo,
                    this.ValidFrom,
                    this.ValidTo ] = DigitalCertificateManager::getDigitalCertificateProperties(this.CertificateSubject, false);
                }
                else
                {
                    this.clearCertificatePropertiesFields();
                }
                break;

            case fieldnum(XmlCertificate, UseAdvCertificateStore) :

                this.clearCertificatePropertiesFields();

                if (this.UseAdvCertificateStore == NoYes::Yes)
                {
                    this.CertificateSubject = '';
                }
                else
                {
                    this.KeyVaultCertificate = 0;
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeyVaultDigitalCertificateSubject</Name>
				<Source><![CDATA[
    private DigitalCertificateSubject getKeyVaultDigitalCertificateSubject(boolean _throwOnError = true)
    {
        str ret;
        X509Certificate2 certificate;

        if (this.KeyVaultCertificate)
        {
            certificate = KeyVaultCertificateHelper::getDigitalCertificate(this.KeyVaultCertificate, _throwOnError);
        }

        if (certificate)
        {
            ret = certificate.get_Subject();
        }
        else
        {
            ret = '';
            info("@SYP4881677");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the user name if the current cretificate is user-specific.
    /// </summary>
    /// <returns>
    /// The user name, if the current cretificate is user-specific; otherwise, empty string;
    /// </returns>
    public display UserName userName()
    {
        UserName ret;

        switch (this.RefType)
        {
            case XmlCertificateType::User :
                ret = UserInfoHelp::userName(this.RefId);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActiveDuplicates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates for existense of conflicting certificates.
    /// </summary>
    /// <returns>
    /// true, if there are certificates conflicting with the current record; otherwise, false.
    /// </returns>
    public boolean validateActiveDuplicates()
    {
        boolean ret = true;

        if (this.Active &&
            XmlCertificate::existsOtherActive(this))
        {
            switch (this.RefType)
            {
                case XmlCertificateType::LegalEntity    :
                    ret = checkFailed("@SYP4881586");
                    break;

                case XmlCertificateType::User           :
                    ret = checkFailed(strfmt("@SYP4881597", this.RefId));
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActiveEmptyCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the active certificate is set up (not empty).
    /// </summary>
    /// <returns>
    /// true, if the active certificate has subject set up.
    /// </returns>
    /// <remarks>
    /// No validity of the certificate subject or availability of the certificate is performed,
    /// since the certificate may be unavailable locally on the machine where the setup is performed.
    /// </remarks>
    public boolean validateActiveEmptyCertificate()
    {
        boolean ret = true;
        FieldId certificateFieldId = this.UseAdvCertificateStore ? fieldNum(XmlCertificate, KeyVaultCertificate) : fieldNum(XmlCertificate, CertificateSubject);

        if (this.Active && !this.(certificateFieldId))
        {
            ret = checkFailed(strFmt("@SYS84378", fieldId2PName(tableNum(XmlCertificate), certificateFieldId)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret = super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(XmlCertificate, Active)   :
            case fieldnum(XmlCertificate, RefType)  :
            case fieldnum(XmlCertificate, RefId)    :
                ret = this.validateActiveDuplicates() && ret;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        switch (this.RefType)
        {
            case XmlCertificateType::LegalEntity    :
                if (this.RefId)
                {
                    ret = checkFailed(strFmt("@SYS92012", fieldPName(XmlCertificate, RefId)));
                }
                break;
            case XmlCertificateType::User           :
                if (!this.RefId)
                {
                    ret = checkFailed(strFmt("@SYS26332", fieldPName(XmlCertificate, RefId)));
                }
                break;
        }

        ret = this.validateActiveDuplicates() && ret;

        ret = this.validateActiveEmptyCertificate() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOtherActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates existence of other active certificate for the given set of key values.
    /// </summary>
    /// <param name="_certificate">
    /// The certificate record identifying the key values.
    /// </param>
    /// <returns>
    /// true, if another active certificate exists with the same set of key values; otherwise false
    /// </returns>
    public static boolean existsOtherActive(
        XmlCertificate _certificate)
    {
        XmlCertificate certificate;

        select firstonly RecId from certificate
            where certificate.RefType == _certificate.RefType
                && certificate.RefId == _certificate.RefId
                && certificate.UseAdvCertificateStore == _certificate.UseAdvCertificateStore
                && certificate.Active == true
                && certificate.RecId != _certificate.RecId;

        return certificate.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findXmlCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the Digital certificates table record by natural key values.
    /// </summary>
    /// <param name="_refType">
    /// The certificate reference type.
    /// </param>
    /// <param name="_refId">
    /// The certificate reference Id.
    /// </param>
    /// <param name="_active">
    /// A boolean value, indicating if active certificate should be found.
    /// </param>
    /// <param name="_useAdvCertificateStore">
    /// A boolean value, indicating which source of certificates should be used.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The Digital certificates table record found.
    /// </returns>
    public static XmlCertificate findXmlCertificate(
        XmlCertificateType _refType,
        Num _refId,
        NoYes _active,
        UseAdvCertificateStore _useAdvCertificateStore,
        boolean _forUpdate = false)
    {
        XmlCertificate certificate;

        if (_forUpdate)
        {
            certificate.selectForUpdate(true);
        }

        select firstonly certificate
            where certificate.RefType == _refType
                && certificate.RefId == _refId
                && certificate.UseAdvCertificateStore == _useAdvCertificateStore
                && certificate.Active == _active;

        return certificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActive</Name>
				<Source><![CDATA[
    [SysObsolete("This method is obsolete. Call findActiveXmlCertificate instead.", false, 30\11\2017)]
    public static XmlCertificate findActive(userId _userId = curUserId())
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveXmlCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the active Electronic signature certificates table record for the specified user or legal entity.
    /// </summary>
    /// <param name="_userId">
    /// The user Id to find the electronic certificate for; optional.
    /// </param>
    /// <returns>
    /// The active Electronic signature certificates table record for the specified user or legal entity.
    /// </returns>
    public static XmlCertificate findActiveXmlCertificate(userId _userId = curUserId())
    {
        boolean useAdvCertificateStore = SystemParameters::find().UseAdvCertificateStore;

        XmlCertificate certificate = XmlCertificate::findXmlCertificate(
            XmlCertificateType::User,
            _userId,
            true,
            useAdvCertificateStore);

        if (!certificate)
        {
            certificate = XmlCertificate::findXmlCertificate(
                XmlCertificateType::LegalEntity,
                '',
                true,
                useAdvCertificateStore);
        }

        return certificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDigitalCertificate</Name>
				<Source><![CDATA[
    public System.Security.Cryptography.X509Certificates.X509Certificate2 getDigitalCertificate()
    {
        if (this.UseAdvCertificateStore)
        {
            if (!this.KeyVaultCertificate)
            {
                throw error("@SYP4881690");
            }

            return KeyVaultCertificateHelper::getDigitalCertificate(this.KeyVaultCertificate);
        }
        else
        {
            if (!this.CertificateSubject)
            {
                throw error("@SYP4881690");
            }

            return DigitalCertificateManager::getDigitalCertificate(this.CertificateSubject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDigitalCertificateSubject</Name>
				<Source><![CDATA[
    public DigitalCertificateSubject getDigitalCertificateSubject()
    {
        return this.UseAdvCertificateStore ? this.getKeyVaultDigitalCertificateSubject() : this.CertificateSubject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.UseAdvCertificateStore = SystemParameters::find().UseAdvCertificateStore;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYP4881756</DeveloperDocumentation>
	<Label>@AccountsReceivable:AR_ElectronicSignatureCertificates</Label>
	<TitleField1>IssuedTo</TitleField1>
	<TitleField2>ValidTo</TitleField2>
	<ClusteredIndex>RefIdx</ClusteredIndex>
	<Modules>SystemAdministration</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateSubject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CertificateProperties</Name>
			<Label>@SYP4881678</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IssuedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssuedTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CertificateSubject</Name>
			<Label>@SYP4881679</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateSubject</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseAdvCertificateStore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>userName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>KeyVault</Name>
			<Label>@KeyVault:FormTitle_KeyVaultParameters</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>KeyVaultCertificate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS14584</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateSubject</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DigitalCertificateSubject</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IssuedBy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS341132</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IssuedTo</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS341133</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Num</ExtendedDataType>
			<Label>@SYS16181</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RefType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>XmlCertificateType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@SYS35161</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidTo</Name>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@SYS102701</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>KeyVaultCertificate</Name>
			<ExtendedDataType>KeyVaultCertificateRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseAdvCertificateStore</Name>
			<ExtendedDataType>UseAdvCertificateStore</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Active</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UseAdvCertificateStore</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>UserInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefId</Name>
					<Field>RefId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>RefType</Name>
					<Field>RefType</Field>
					<ValueStr>XmlCertificateType::User</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KeyVaultCertificate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>KeyVaultCertificateTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KeyVaultCertificate</Name>
					<Field>KeyVaultCertificate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>