<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceMarkupTransTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInvoiceMarkupTransTemplate extends CustInvoiceLineTemplate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkMarkupCategory</Name>
				<Source><![CDATA[
    boolean checkMarkupCategory()
    {
        boolean ok = true;

        #VendInvoiceFaults

        if (this.MarkupCategory == MarkupCategory::Pcs)
        {
            ok = AifFault::checkFailedLogFault("@SYS28725", #MiscChargesPerUnitNotAllowed);
        }
        else if (this.MarkupCategory == MarkupCategory::InterCompanyPercent)
        {
            ok = AifFault::checkFailedLogFault("@SYS98798", #IntercompanyPctOnlyAllowedOnIntercompanyOrderLines);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustInvoiceMarkupTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the fields of the <c>CustInvoiceMarkupTransTemplate</c> table.
    /// </summary>
    /// <param name="_custInvoiceTemplate">
    ///    The <c>CustInvoiceTemplate</c> table buffer.
    /// </param>
    public void initCustInvoiceMarkupTable(CustInvoiceTemplate _custInvoiceTemplate)
    {
        MarkupTable markupTable;

        select firstonly TaxItemGroup, Txt from markupTable
            where markupTable.ModuleType == MarkupModuleType::Cust &&
                    markupTable.MarkupCode == this.MarkupCode;

        this.ModuleType = MarkupModuleType::Cust;
        this.CurrencyCode = _custInvoiceTemplate.CurrencyCode;
        this.TaxGroup = this.TaxGroup ? this.TaxGroup : _custInvoiceTemplate.TaxGroup;
        //settings on the markup code override settings on the invoice template
        this.TaxItemGroup = markupTable.TaxItemGroup ? markupTable.TaxItemGroup : _custInvoiceTemplate.TaxItemGroup;
        this.Description = markupTable.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.ModuleType = MarkupModuleType::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        CustInvoiceDistributionTemplate custInvoiceDistributionTemplate;

        super();

        CustInvoiceDistributionTemplate::createDefaultDistributionTemplate(this, MarkupTable::find(MarkupModuleType::Cust, this.MarkupCode).VendorLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(CustInvoiceMarkupTransTemplate, MarkupCategory):
                ret = this.checkMarkupCategory();
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>CustMarkupTransTemplateLine</c> table; if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_custInvoiceMarkupTransTemplateRecId">
    ///    The unique ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _custInvoiceMarkupTransTemplateRecId)
    {
        boolean ret = true;

        if (!CustInvoiceMarkupTransTemplate::exist(_custInvoiceMarkupTransTemplateRecId))
        {
            ret = checkFailed(strFmt(CustInvoiceMarkupTransTemplate::txtNotExist(), _custInvoiceMarkupTransTemplateRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>CustMarkupTransTemplateLine</c> table exists.
    /// </summary>
    /// <param name="_custInvoiceMarkupTransTemplateRecId">
    ///    The <c>RecId</c> value of the <c>CustMarkupTransTemplateLine</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _custInvoiceMarkupTransTemplateRecId)
    {
        boolean found;

        found = (select firstonly RecId from custInvoiceMarkupTransTemplate
                 where custInvoiceMarkupTransTemplate.RecId == _custInvoiceMarkupTransTemplateRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustMarkupTransTemplateLine</c> table.
    /// </summary>
    /// <param name="_custInvoiceMarkupTransTemplateRecId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A <c>CustMarkupTransTemplateLine</c> table buffer.
    /// </returns>
    public static CustInvoiceMarkupTransTemplate find(
        recId _custInvoiceMarkupTransTemplateRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInvoiceMarkupTransTemplate custInvoiceMarkupTransTemplate;

        custInvoiceMarkupTransTemplate.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInvoiceMarkupTransTemplate.concurrencyModel(_concurrencyModel);
        }

        select firstonly custInvoiceMarkupTransTemplate
            where custInvoiceMarkupTransTemplate.RecId == _custInvoiceMarkupTransTemplateRecId;

        return custInvoiceMarkupTransTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupMarkupCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows a lookup form to use to select a markup code based on the <c>ModuleInventCustVend::Cust</c>
    ///    enumeration value.
    /// </summary>
    /// <param name="ctrl">
    ///    The instance of <c>FormStringControl</c> class.
    /// </param>
    public static void lookupMarkupCode(FormStringControl ctrl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(MarkupTable), ctrl, true);
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(MarkupTable));
        QueryBuildRange queryBuildRange = queryBuildDataSource.addRange(fieldNum(MarkupTable, ModuleType));

        queryBuildRange.value(SysQuery::value(ModuleInventCustVend::Cust));

        sysTableLookup.addLookupfield(fieldNum(MarkupTable, MarkupCode));
        sysTableLookup.addLookupfield(fieldNum(MarkupTable, ModuleType));
        sysTableLookup.addLookupfield(fieldNum(MarkupTable, Txt));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the <c>LineNum</c> value of the <c>CustInvoiceMarkupTransTemplate</c> table record.
    /// </summary>
    /// <param name="_custInvoiceTemplateRecId">
    ///    A record ID of <c>CustInvoiceTemplate</c> table.
    /// </param>
    /// <returns>
    ///    The next line number for the <c>CustInvoiceMarkupTransTemplate</c> table record.
    /// </returns>
    public static LineNum nextLineNum(recId _custInvoiceTemplateRecId)
    {
        CustInvoiceLineTemplate custInvoiceLineTemplate;

        select maxof(LineNum) from custInvoiceLineTemplate
        where custInvoiceLineTemplate.CustInvoiceTemplate == _custInvoiceTemplateRecId;

        return custInvoiceLineTemplate.LineNum + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a free text invoice charge template based on the <c>MarkupTrans</c> provided.
    /// </summary>
    /// <param name="_custInvoiceLineTemplateRecId">
    /// The CustInvoiceLineTemplate record identifier to use to create the <c>CustInvoiceMarkupTransTemplate</c> record.
    /// </param>
    /// <param name="_markupTrans">
    /// An instance of a <c>CustInvoiceLine</c> table buffer.
    /// </param>
    /// <returns>
    /// The new <c>CustInvoiceMarkupTransTemplate</c> record.
    /// </returns>
    public static CustInvoiceMarkupTransTemplate createFromMarkupTrans(RefRecId _custInvoiceTemplateRecId, MarkupTrans _markupTrans)
    {
        CustInvoiceMarkupTransTemplate custInvoiceMarkupTransTemplate;

        custInvoiceMarkupTransTemplate.CustInvoiceTemplate = _custInvoiceTemplateRecId;
        custInvoiceMarkupTransTemplate.LineNum = _markupTrans.LineNum;
        custInvoiceMarkupTransTemplate.MarkupCategory = _markupTrans.MarkupCategory;
        custInvoiceMarkupTransTemplate.Description = _markupTrans.Txt;
        custInvoiceMarkupTransTemplate.TaxGroup = _markupTrans.TaxGroup;
        custInvoiceMarkupTransTemplate.TaxItemGroup = _markupTrans.TaxItemGroup;
        custInvoiceMarkupTransTemplate.MarkupCode = _markupTrans.MarkupCode;
        custInvoiceMarkupTransTemplate.AmountCur = _markupTrans.Value;
        custInvoiceMarkupTransTemplate.ModuleType = MarkupModuleType::Cust;
        custInvoiceMarkupTransTemplate.CurrencyCode = _markupTrans.CurrencyCode;

        // Call doInsert, since a distribution is created in the insert method
        custInvoiceMarkupTransTemplate.doInsert();

        return custInvoiceMarkupTransTemplate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS314204</DeveloperDocumentation>
	<FormRef>CustInvoiceMarkupTransTemplate</FormRef>
	<Label>@SYS315617</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<Extends>CustInvoiceLineTemplate</Extends>
	<Modules>AccountsReceivable</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MiscCharges</Name>
			<Label>@SYS8371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MarkupCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupCategoryType</ExtendedDataType>
			<EnumType>MarkupCategory</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupModule</ExtendedDataType>
			<EnumType>MarkupModuleType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>MarkupCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MarkupCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency_CurrencyCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceLineTemplate_MarkupTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustInvoiceLineTemplate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MarkupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MarkupTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>MarkupTable_CustMarkupTransTemplateLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupCode</Name>
					<Field>MarkupCode</Field>
					<RelatedField>MarkupCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModuleType</Name>
					<Field>ModuleType</Field>
					<RelatedField>ModuleType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ModuleCodeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>