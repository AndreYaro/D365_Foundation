<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventBatchReceiptDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSInventBatchReceiptDetails extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record in the <c>WHSInventBatchReceiptDetails</c> table exists.
    /// </summary>
    /// <param name="_receiptId">
    ///     The receipt ID of the <c>WHSInventBatchReceiptDetails</c> to find.
    /// </param>
    /// <param name="_itemId">
    ///     The item ID of the <c>WHSInventBatchReceiptDetails</c> to find.
    /// </param>
    /// <param name="_inventBatchId">
    ///     The inventory batch ID of the <c>WHSInventBatchReceiptDetails</c> to find.
    /// </param>
    /// <returns>
    ///     Returns True if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(
        WHSReceiptId    _receiptId,
        ItemId          _itemId,
        InventBatchId   _inventBatchId)
    {
        return  _receiptId
            &&  _itemId
            &&  _inventBatchId
            &&  (select firstOnly RecId from whsInventBatchReceiptDetails
                     where whsInventBatchReceiptDetails.ReceiptId       == _receiptId
                         && whsInventBatchReceiptDetails.ItemId         == _itemId
                         && whsInventBatchReceiptDetails.InventBatchId  == _inventBatchId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>WHSInventBatchReceiptDetails</c> table.
    /// </summary>
    /// <param name="_receiptId">
    ///     The receipt ID of the <c>WHSInventBatchReceiptDetails</c> to find.
    /// </param>
    /// <param name="_itemId">
    ///     The item ID of the <c>WHSInventBatchReceiptDetails</c> to find.
    /// </param>
    /// <param name="_inventBatchId">
    ///     The inventory batch ID of the <c>WHSInventBatchReceiptDetails</c> to find.
    /// </param>
    /// <param name="_forupdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>WHSInventBatchReceiptDetails</c> table; otherwise, an empty record.
    /// </returns>
    public static WHSInventBatchReceiptDetails find(
        WHSReceiptId    _receiptId,
        ItemId          _itemId,
        InventBatchId   _inventBatchId,
        boolean         _forupdate = false)
    {
        WHSInventBatchReceiptDetails  whsInventBatchReceiptDetails;

        if (_receiptId
        &&  _itemId
        &&  _inventBatchId)
        {
            whsInventBatchReceiptDetails.selectForUpdate(_forupdate);

            select firstonly whsInventBatchReceiptDetails
                where whsInventBatchReceiptDetails.ReceiptId        == _receiptId
                    && whsInventBatchReceiptDetails.ItemId          == _itemId
                    && whsInventBatchReceiptDetails.InventBatchId   == _inventBatchId;
        }

        return whsInventBatchReceiptDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTable</Name>
				<Source><![CDATA[
        public InventTable InventTable(InventTable _relatedTable = null)
        {
            if (prmIsDefault(_relatedTable))
            {
                return this.setLink('InventTable');
            }
            else
            {
                return this.setLink('InventTable', _relatedTable);
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultBatchAndQtyToReceiveFromPurchase</Name>
				<Source><![CDATA[
    [SysObsolete('Logic has been moved to getDefaultBatchAndQtyToReceiveFromInbound', false, 17\02\2023)]
    public static container getDefaultBatchAndQtyToReceiveFromPurchase(
        PurchLine               _purchLine,
        WHSReceiptId            _receiptId,
        Qty                     _receivingQty,
        UnitOfMeasureSymbol     _receivingUnit)
    {
        return WHSInventBatchReceiptDetails::getBatchAndQtyToReceive(_purchLine.ItemId, _purchLine.InventDimId, _purchLine.InventTransId, _receiptId, _receivingQty, _receivingUnit, _purchLine.overDeliveryPct(), InventTransType::Purch, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultBatchAndQtyToReceiveFromInbound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the batch Id and the new qty that can be received from the inbound order line, based on the quantity that may have
    /// already been received previously.
    /// </summary>
    /// <param name="_orderLine">
    /// The inbound order line.
    /// </param>
    /// <param name="_receiptId">
    /// The Receipt Id for which the purchase line had been received (partially) before.
    /// </param>
    /// <param name="_receivingQty">
    /// The quantity that is intended to be received.
    /// </param>
    /// <param name="_receivingUnit">
    /// The unit of measure for the receipt quantity.
    /// </param>
    /// <returns>
    /// The batch Id of either the purchase order or the associated <c>InventTrans</c> table, and the quantity of the first batch that can be received.
    /// </returns>
    public static container getDefaultBatchAndQtyToReceiveFromInbound(
        WHSReceiptOrderLine     _orderLine,
        WHSReceiptId            _receiptId,
        Qty                     _receivingQty,
        UnitOfMeasureSymbol     _receivingUnit)
    {
        // If the passed buffer is a purchLine, call the obsolete version of the method to ensure extenders still have their logic run.
        if (_orderLine is purchLine)
        {
            return WHSInventBatchReceiptDetails::getDefaultBatchAndQtyToReceiveFromPurchase(_orderLine as PurchLine, _receiptId, _receivingQty, _receivingUnit);
        }

        return WHSInventBatchReceiptDetails::getBatchAndQtyToReceive(_orderLine.ItemId, _orderLine.InventDimId, _orderLine.InventTransId, _receiptId, _receivingQty, _receivingUnit, _orderLine.overDeliveryPct(), _orderLine.inventTransType(), '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyToReceiveForBatchFromPurchase</Name>
				<Source><![CDATA[
    [SysObsolete('Logic has been moved to getQtyToReceiveForBatchFromInbound', false, 17\02\2023)]
    public static Qty getQtyToReceiveForBatchFromPurchase(
        PurchLine               _purchLine,
        WHSReceiptId            _receiptId,
        Qty                     _receivingQty,
        UnitOfMeasureSymbol     _receivingUnit,
        InventBatchId           _batchId)
    {
        InventBatchId   batchId;
        Qty             batchQtyToReceive;
        [batchId, batchQtyToReceive] = WHSInventBatchReceiptDetails::getBatchAndQtyToReceive(_purchLine.ItemId, _purchLine.InventDimId, _purchLine.InventTransId, _receiptId, _receivingQty, _receivingUnit, _purchLine.overDeliveryPct(), InventTransType::Purch, _batchId, true);
        return batchQtyToReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyToReceiveForBatchFromInbound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the qty that can be received for a given batch from the inbound order line, based on the quantity that may have
    /// already been received previously.
    /// </summary>
    /// <param name="_orderLine">
    /// The inbound order line.
    /// </param>
    /// <param name="_receiptId">
    /// The Receipt Id for which the purchase line had been received (partially) before.
    /// </param>
    /// <param name="_receivingQty">
    /// The quantity that is intended to be received.
    /// </param>
    /// <param name="_receivingUnit">
    /// The unit of measure for the receipt quantity.
    /// </param>
    /// <param name="_batchId">
    /// The batch Id for which the quantity that can be received is to be calculated.
    /// </param>
    /// <returns>
    /// The quantity of the batch that can be received.
    /// </returns>
    public static Qty getQtyToReceiveForBatchFromInbound(
        WHSReceiptOrderLine     _orderLine,
        WHSReceiptId            _receiptId,
        Qty                     _receivingQty,
        UnitOfMeasureSymbol     _receivingUnit,
        InventBatchId           _batchId)
    {
        // If the passed buffer is a purchLine, call the obsolete version of the method to ensure extenders still have their logic run.
        if (_orderLine is purchLine)
        {
            return WHSInventBatchReceiptDetails::getQtyToReceiveForBatchFromPurchase(_orderLine as PurchLine, _receiptId, _receivingQty, _receivingUnit, _batchId);
        }

        InventBatchId   batchId;
        Qty             batchQtyToReceive;
        [batchId, batchQtyToReceive] = WHSInventBatchReceiptDetails::getBatchAndQtyToReceive(_orderLine.ItemId, _orderLine.InventDimId, _orderLine.InventTransId, _receiptId, _receivingQty, _receivingUnit, _orderLine.overDeliveryPct(), _orderLine.inventTransType(), _batchId, true);
        return batchQtyToReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyToReceiveForBatchFromTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the qty that can be received for a batch from the transfer order line, based on the quantity that may have
    /// already been received previously.
    /// </summary>
    /// <param name="_transferId">
    /// The Id of the transfer order.
    /// </param>
    /// <param name="_lineNum">
    /// The line number of the transfer line.
    /// </param>
    /// <param name="_receiptId">
    /// The Receipt Id for which the transfer line had been received (partially) before.
    /// </param>
    /// <param name="_receivingQty">
    /// The quantity that is intended to be received.
    /// </param>
    /// <param name="_receivingUnit">
    /// The unit of measure for the receipt quantity.
    /// </param>
    /// <param name="_batchId">
    /// The batch Id for which the quantity that can be received is to be calculated.
    /// </param>
    /// <returns>
    /// The quantity of the batch that can be received.
    /// </returns>
    public static Qty getQtyToReceiveForBatchFromTransfer(
        InventTransferLine      _transferLine,
        WHSReceiptId            _receiptId,
        Qty                     _receivingQty,
        UnitOfMeasureSymbol     _receivingUnit,
        InventBatchId           _batchId)
    {
        InventBatchId   batchId;
        Qty             batchQtyToReceive;
        [batchId, batchQtyToReceive] = WHSInventBatchReceiptDetails::getBatchAndQtyToReceive(_transferLine.ItemId, _transferLine.InventDimId, _transferLine.InventTransIdReceive, _receiptId, _receivingQty, _receivingUnit, _transferLine.OverDeliveryPct, InventTransType::TransferOrderReceive, _batchId);
        return batchQtyToReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchAndQtyToReceive</Name>
				<Source><![CDATA[
    private static container getBatchAndQtyToReceive(
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        InventTransId           _inventTransId,
        WHSReceiptId            _receiptId,
        Qty                     _receivingQty,
        UnitOfMeasureSymbol     _receivingUnit,
        OverDeliveryPct         _overDeliveryPct,
        InventTransType         _inventTransType,
        InventBatchId           _batchId,
        boolean                 _includeOverDeliveryPct = false)
    {
        InventBatchId           ret;
        ItemId                  itemId = _itemId;
        boolean					isCWItem = PdsGlobal::pdsIsCWItem(itemId);
        InventDim               inventDim;
        InventTrans             inventTrans;
        InventTransOrigin       inventTransOrigin;
        UnitOfMeasureSymbol     inventUnit = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);
        Qty                     receivingQtyForBatch = _receivingQty;
        InventHandlingQty       inventTransQty;

        while select sum(Qty), sum(PdsCWQty) from inventTrans
            where inventTrans.ItemId == itemId
                && inventTrans.StatusReceipt == StatusReceipt::Ordered
                && inventTrans.StatusIssue   == StatusIssue::None
            join InventBatchId from inventDim
                group by InventBatchId
                where inventDim.inventDimId == inventTrans.inventDimId
                    && (_batchId == '' || inventDim.inventBatchId == _batchId)
            exists join inventTransOrigin
                where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                    && inventTransOrigin.InventTransId == _inventTransId
        {
            WHSInventBatchReceiptDetails    batchReceiptDetails;
            WHSReceiptDetails               receiptDetails;

            inventTransQty = WHSInventBatchReceiptDetails::adjustOrderedInventTransBatchQty(inventTrans.Qty, inventDim.InventBatchId, itemId, _inventDimId);
            
            if (!inventTransQty)
            {
                continue;
            }

            while select ReceiptId, ItemId from batchReceiptDetails
                where batchReceiptDetails.ReceiptId         == _receiptId
                    && batchReceiptDetails.ItemId           == itemId
                    && batchReceiptDetails.InventBatchId    == inventDim.InventBatchId
                join InventDimId, InventQty from receiptDetails
                    where receiptDetails.ReceiptId == batchReceiptDetails.ReceiptId
            {
                if (!InventDim::areProductVariantsDifferent(itemId, _inventDimId, receiptDetails.InventDimId))
                {
                    break;
                }
            }
            
            if (batchReceiptDetails.ReceiptId == '')
            {
                // items have not been received for this batch
                ret = inventDim.InventBatchId;
                break;
            }
            else
            {
                if (WHSInventBatchReceiptDetails::canUseBatchIdBasedOnRegisteredTransactions(
                        inventDim.InventBatchId, 
                        _inventTransType, 
                        _inventTransId,
                        itemId, 
                        receiptDetails.InventQty, 
                        isCWItem))            
                {
                    ret = inventDim.InventBatchId;
                    break;
                }
            }
        }

        if (ret)
        {
            InventHandlingQty transQty = isCWItem ? inventTrans.PdsCWQty : inventTransQty;
            // in case the quantity of the batch is less than the total qty to receive, reduce the latter
            if (transQty
                && WHSInventBatchReceiptDetails::checkForZeroOverDeliveryPct(_overDeliveryPct)
                && transQty < WHSInventBatchReceiptDetails::calcReceivingQtyForBatch(itemId, _receivingUnit, inventUnit, _receivingQty, _inventDimId, _overDeliveryPct, _includeOverDeliveryPct))
            {
                receivingQtyForBatch = WHSInventBatchReceiptDetails::calcReceivingQtyForBatch(itemId, inventUnit, _receivingUnit, transQty, _inventDimId, _overDeliveryPct, _includeOverDeliveryPct);
            }
        }

        return [ret, receivingQtyForBatch];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReceivingQtyForBatch</Name>
				<Source><![CDATA[
    private static InventHandlingQty calcReceivingQtyForBatch(ItemId _itemId,
                                                       UnitOfMeasureSymbol _fromUnit,
                                                       UnitOfMeasureSymbol _toUnit,
                                                       Qty _qty,
                                                       InventDimId _inventDimId,
                                                       OverDeliveryPct _overDeliveryPct,
                                                       boolean _includeOverDeliveryPct)
    {
		EcoResReleasedProductUnitConverter releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        return releasedProductUnitConverter.convertGivenUnitSymbols(_qty, _fromUnit, _toUnit, NoYes::Yes, _itemId, _inventDimId) 
                * (_includeOverDeliveryPct ? (1 + _overDeliveryPct/100) : 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseBatchIdBasedOnRegisteredTransactions</Name>
				<Source><![CDATA[
    private static boolean canUseBatchIdBasedOnRegisteredTransactions(
        InventBatchId _inventBatchId, 
        InventTransType _inventTransType, 
        InventTransId _inventTransId,
        ItemId _itemId,
        InventQty _receiptDetailsInventQty, 
        boolean _isCWItem)
    {
        if (WHSInventBatchReceiptDetails::canUseBatchIdFromRegisteredTransForInventTransType(_inventTransType))
        {
            InventTrans         inventTransReceived;
            InventTransOrigin   inventTransOriginReceived;
            InventDim           inventDimReceived;

            select sum(Qty), sum(PdsCWQty) from inventTransReceived
                where inventTransReceived.ItemId            == _itemId
                    && inventTransReceived.StatusReceipt    == StatusReceipt::Registered
                    && inventTransReceived.StatusIssue      == StatusIssue::None
                join inventDimReceived
                    where inventDimReceived.inventBatchId   == _inventBatchId
                        && inventDimReceived.inventDimId    == inventTransReceived.inventDimId
                exists join inventTransOriginReceived
                    where inventTransOriginReceived.RecId == inventTransReceived.InventTransOrigin
                        && inventTransOriginReceived.InventTransId == _inventTransId;

            InventHandlingQty transReceivedQty = _isCWItem ? inventTransReceived.PdsCWQty : inventTransReceived.Qty;
            // if the quantity in the invent receipt already matches a received quantity, then the batch id is part of a new InventTrans and therefore can be suggested
            if (transReceivedQty >= _receiptDetailsInventQty)
            {
                return true;
            }
        }

        return false;

    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustOrderedInventTransBatchQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the selected ordered inventory transaction quantity for the given batch number and item.
    /// </summary>
    /// <param name = "_inventTransQty">The inventory transaction quantity.</param>
    /// <param name = "_batchId">The selected batch number.</param>
    /// <param name = "_itemId">The item id.</param>
    /// <param name = "_orderLineInventDimId">The order line inventory dimension ID.</param>
    /// <returns>The adjusted inventory transaction quantity.</returns>
    [Wrappable(true)]
    internal static InventHandlingQty adjustOrderedInventTransBatchQty(
        InventQty _inventTransQty, 
        InventBatchId _batchId, 
        ItemId _itemId,
        InventDimId _orderLineInventDimId)
    {
        return _inventTransQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseBatchIdFromRegisteredTransForInventTransType</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static boolean canUseBatchIdFromRegisteredTransForInventTransType(InventTransType _inventTransType)
    {
        return _inventTransType != InventTransType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForZeroOverDeliveryPct</Name>
				<Source><![CDATA[
    private static boolean checkForZeroOverDeliveryPct(OverDeliveryPct _overDeliveryPct)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bufferPdsVendBatchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a buffer that contains the vendor batch information that is attached to the current line.
    /// </summary>
    /// <returns>
    /// A buffer of the <c>PdsVendBatchInfo</c> table.
    /// </returns>
    [Hookable(false)]
    internal PdsVendBatchInfo bufferPdsVendBatchInfo()
    {
        PdsVendBatchInfo bufferPdsVendBatchInfo;

        bufferPdsVendBatchInfo.CountryOfOrigin1 = this.PdsCountryOfOrigin1;
        bufferPdsVendBatchInfo.CountryOfOrigin2 = this.PdsCountryOfOrigin2;
        bufferPdsVendBatchInfo.UseVendBatchDate = this.PdsUseVendBatchDate;
        bufferPdsVendBatchInfo.UseVendBatchExp  = this.PdsUseVendBatchExp;
        bufferPdsVendBatchInfo.VendBatchDate    = this.PdsVendBatchDate;
        bufferPdsVendBatchInfo.VendExpiryDate   = this.PdsVendExpiryDate;
        bufferPdsVendBatchInfo.VendBatchId      = this.PdsVendBatchId;

        return bufferPdsVendBatchInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX5516</DeveloperDocumentation>
	<Label>@WAX5515</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>InventBatchId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ReceiptIdItemIdBatchIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<ReplacementKey>ReceiptIdItemIdBatchIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsVendBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCountryOfOrigin2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCountryOfOrigin1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsUseVendBatchExp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsVendExpiryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsUseVendBatchDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsVendBatchDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsPotencyBaseValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchDispositionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReceiptId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBatchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReceiptId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBatchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsVendorBatch</Name>
			<Label>@PDS1357</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsVendBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCountryOfOrigin2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCountryOfOrigin1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsUseVendBatchExp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsVendExpiryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsUseVendBatchDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsVendBatchDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Properties</Name>
			<Label>@SYS10344</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExpDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsPotencyBaseValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchDispositionCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ExpDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchExpDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventBatchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsBatchDispositionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchDispositionCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsCountryOfOrigin1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCountryOfOrigin1</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsCountryOfOrigin2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCountryOfOrigin2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsPotencyBaseValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSBaseAttributeValues</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsUseVendBatchDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsUseVendBatchDate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsUseVendBatchExp</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsUseVendBatchExp</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PdsVendBatchDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsVendBatchDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsVendBatchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsVendBatchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PdsVendExpiryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsVendExpiryDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReceiptId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSReceiptId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReceiptIdItemIdBatchIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReceiptId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventBatchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventBatch</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventBatch</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventBatchId</Name>
					<SourceEDT>InventBatchId</SourceEDT>
					<Field>InventBatchId</Field>
					<RelatedField>inventBatchId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>itemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>itemBatchIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PdsCountryOfOrigin1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PdsCountryOfOrigin1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WHSInventBatchReceiptDetails</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsCountryOfOrigin1</Name>
					<SourceEDT>PdsCountryOfOrigin1</SourceEDT>
					<Field>PdsCountryOfOrigin1</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PdsCountryOfOrigin2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PdsCountryOfOrigin2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WHSInventBatchReceiptDetails</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsCountryOfOrigin2</Name>
					<SourceEDT>PdsCountryOfOrigin2</SourceEDT>
					<Field>PdsCountryOfOrigin2</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PdsDispositionMaster</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsDispositionMaster</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchDispositionCode</Name>
					<SourceEDT>PdsBatchDispositionCode</SourceEDT>
					<Field>PdsBatchDispositionCode</Field>
					<RelatedField>DispositionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DispositionCodeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>