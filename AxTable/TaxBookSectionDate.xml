<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxBookSectionDate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxBookSectionDate extends Common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record exists in the <c>TaxBookSectionDate</c> table for the specified Tax Book section ID.
    /// </summary>
    /// <param name="_taxBookSection">
    /// The Tax Book section ID.
    /// </param>
    /// <returns>
    /// true, if the record exists.
    /// </returns>
    public static boolean exist(RefRecId _taxBookSection)
    {
        boolean found;

        found = (select firstonly RecId from taxBookSectionDate
            where taxBookSectionDate.TaxBookSection == _taxBookSection).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>TaxBookSectionDate</c> table for the specified Tax Book section ID and date before the <paramref name="_transDate"/>.
    /// </summary>
    /// <param name="_section">
    /// The Tax Book section ID.
    /// </param>
    /// <param name="_transDate">
    /// The date to search for.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TaxBookSectionDate</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxBookSectionDate findNextDate(
        RefRecId            _section,
        TransDate           _transDate,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxBookSectionDate taxBookSectionDate;

        taxBookSectionDate.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxBookSectionDate.concurrencyModel(_concurrencyModel);
        }

        select firstOnly taxBookSectionDate
            order by TransDate asc, LastRec asc
            where taxBookSectionDate.TaxBookSection == _section
               && taxBookSectionDate.TransDate      >  _transDate;

        return taxBookSectionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrevDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>TaxBookSectionDate</c> table for the specified Tax Book section ID and date after the <paramref name="_transDate"/>.
    /// </summary>
    /// <param name="_section">
    /// The Tax Book section ID.
    /// </param>
    /// <param name="_transDate">
    /// The date to search for.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TaxBookSectionDate</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxBookSectionDate findPrevDate(
        RefRecId            _section,
        TransDate           _transDate,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxBookSectionDate taxBookSectionDate;

        taxBookSectionDate.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxBookSectionDate.concurrencyModel(_concurrencyModel);
        }

        select firstOnly taxBookSectionDate
            order by TransDate desc, LastRec desc
            where taxBookSectionDate.TaxBookSection == _section
               && taxBookSectionDate.TransDate      <  _transDate;

        return taxBookSectionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSectionDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>TaxBookSectionDate</c> table for the specified Tax Book section ID and date.
    /// </summary>
    /// <param name="_section">
    /// The Tax Book section ID.
    /// </param>
    /// <param name="_transDate">
    /// The exact date to search for.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TaxBookSectionDate</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxBookSectionDate findSectionDate(
        RefRecId            _section,
        TransDate           _transDate,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxBookSectionDate taxBookSectionDate;

        taxBookSectionDate.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxBookSectionDate.concurrencyModel(_concurrencyModel);
        }

        select firstOnly taxBookSectionDate
            where taxBookSectionDate.TaxBookSection == _section
               && taxBookSectionDate.TransDate      == _transDate;

        return taxBookSectionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSectionDateLastRec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record exists in the <c>TaxBookSectionDate</c> table for the specified Tax Book section ID, transaction date and tax document number.
    /// </summary>
    /// <param name="_section">
    /// The Tax Book section ID.
    /// </param>
    /// <param name="_transDate">
    /// The exact date to search for.
    /// </param>
    /// <param name="_lastRec">
    /// The tax document number.
    /// </param>
    /// <returns>
    /// true, if the record exists.
    /// </returns>
    public static boolean existSectionDateLastRec(RefRecId _section, TransDate _transDate, NumberSequenceRange _lastRec)
    {
        return (
            select firstOnly RecId from TaxBookSectionDate
                where TaxBookSectionDate.TaxBookSection == _section
                    && TaxBookSectionDate.TransDate == _transDate
                    && TaxBookSectionDate.LastRec == _lastRec).RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123544</DeveloperDocumentation>
	<Label>@SYS76147</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>TransDate</TitleField1>
	<TitleField2>LastRec</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>TransDateLastRecIdx</ClusteredIndex>
	<Modules>Tax</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastRec</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LastRec</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceRange</ExtendedDataType>
			<Label>@sys320674</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxBookSection</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransDateLastRecIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxBookSection</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LastRec</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxBookSection</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TaxBookSection</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxBookSection</Name>
					<Field>TaxBookSection</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>