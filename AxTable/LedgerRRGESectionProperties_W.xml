<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGESectionProperties_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGESectionProperties_W extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCell</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void addCell(LedgerRRGCellCode_RU _cell, boolean _clearBeforeAdd = false)
    {
        LedgerRRGEPropertyCells_W::add(this, _cell, _clearBeforeAdd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEAttributeName_W attributeName()
    {
        return this.AttributeName ? this.AttributeName : this.PropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cellsCount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int64 cellsCount()
    {
        if (this.isCellProperty())
        {
            return (select count(RecId) from ledgerRRGEPropertyCells_W
                where ledgerRRGEPropertyCells_W.RefTableId          == this.TableId &&
                      ledgerRRGEPropertyCells_W.PropertyRefRecId    == this.RecId).RecId;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cellStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a semicolon-separated string of Excel cells.
    /// </summary>
    /// <param name="_includeWorksheet">
    /// true, if worksheet should be included to the string; otherwise, false.
    /// </param>
    /// <returns>
    /// The semicolon-separated string of Excel cells.
    /// </returns>
    /// <remarks>
    /// The returned string can exceed the length of EDT <c>LedgerRRGCellCode_RU</c>, so used str type to prevent the truncation.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str cellStr(boolean _includeWorksheet = false)
    {
        str         cellStr     = LedgerRRGEPropertyCells_W::cellsStr(this);
        const str   Exclamation	= '!';
        const str   Quote	    = "'";

        if (_includeWorksheet && this.ExcelSheet && cellStr)
        {
            cellStr = Quote + this.ExcelSheet + Quote + Exclamation + cellStr;
        }

        return cellStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDynamicValueRef</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkDynamicValueRef()
    {
        boolean res = true;
        RecId   dynamicValueRefSectionRecId;

        if (this.DynamicValueRefRecId)
        {
            dynamicValueRefSectionRecId = this.dynamicValueRef().SectionRefRecId;
            res = this.checkSection(this.SectionRefRecId, dynamicValueRefSectionRecId);
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSection</Name>
				<Source><![CDATA[
    private boolean checkSection(RecId _sectionRecId, RecId dynamicValueRefSectionRecId)
    {
        if (_sectionRecId == dynamicValueRefSectionRecId)
        {
            return true;
        }

        if (!_sectionRecId)
        {
            return checkFailed("@LedgerRRG:LedgerRRG_ReferenceToRequisite");
        }

        return this.checkSection(LedgerRRGETemplateSections_W::findRecId(_sectionRecId).ParentRecId, dynamicValueRefSectionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        LedgerRRGETableColumns_W column;

        ttsbegin;

        column = this.tableColumn(true);
        if (column)
        {
            column.delete();
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dynamicValueRef</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGESectionProperties_W dynamicValueRef()
    {
        return LedgerRRGESectionProperties_W::findRecId(this.DynamicValueRefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editAttributeName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit LedgerRRGEAttributeName_W editAttributeName(boolean _set, LedgerRRGEAttributeName_W _value)
    {
        if (_set)
        {
            this.AttributeName = _value;
        }

        return this.attributeName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDynamicValueRef</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit LedgerRRGESectionPropertyId_W editDynamicValueRef(boolean _set, LedgerRRGESectionPropertyId_W _value)
    {
        if (_set)
        {
            if (!_value)
            {
                this.DynamicValueRefRecId = 0;
            }
            else
            {
                if (_value != this.dynamicValueRef().PropertyId)
                {
                    this.DynamicValueRefRecId = this.findPropertyInSection(this.SectionRefRecId, _value).RecId;
                }
            }

            if(!this.checkDynamicValueRef())
            {
                throw error('');
            }
        }

        return this.dynamicValueRef().PropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSectionId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit LedgerRRGESectionId_W editSectionId(boolean _set, LedgerRRGESectionId_W _value)
    {
        if (_set)
        {
            if (!_value)
            {
                this.SectionRefRecId = 0;
            }
            else
            {
                if (_value != this.section().SectionId)
                {
                    this.SectionRefRecId = LedgerRRGETemplateSections_W::findSection(this.LedgerRRGETemplates_W, _value).RecId;
                }
            }

            this.SectionId = this.SectionRefRecId ? this.section().SectionId : '';
        }

        return this.SectionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit LedgerRRGEPropertyValue_W editValue(boolean _set, LedgerRRGEPropertyValue_W _value)
    {
        if (this.PropertyType == LedgerRRGESectionPropertyType_W::Const)
        {
            this.Value = this.property().evalExpression();
        }
        else
        {
            if(_set)
            {
                this.Value = _value;
            }
        }

        return this.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPropertyInSection</Name>
				<Source><![CDATA[
    private LedgerRRGESectionProperties_W findPropertyInSection(RecId _sectionRecId, LedgerRRGESectionPropertyId_W _value)
    {
        LedgerRRGESectionProperties_W property = LedgerRRGESectionProperties_W::findProperty(_value, _sectionRecId, false, false);

        if (property || !_sectionRecId)
        {
            return property;
        }

        return this.findPropertyInSection(property.section().ParentRecId, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProperty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromProperty(LedgerRRGEPropertyId_W _propertyId = this.PropertyId)
    {
        LedgerRRGEProperties_W property;

        this.PropertyId                 = _propertyId;
        property                        = this.property();
        this.Description                = property.Name;
        this.Value                      = property.evalExpression();
        this.DataType                   = property.DataType;
        this.OutputType                 = property.OutputType;
        this.AttributeName              = property.AttributeName;
        this.ExcelSheet                 = property.DefaultWorksheet;
        this.LedgerRRGERequisiteTypes_W = property.LedgerRRGERequisiteTypes_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTableColumn</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromTableColumn(LedgerRRGETableColumns_W _column = this.tableColumn())
    {
        this.Description                = _column.Name;
        this.DataType                   = _column.DataType;
        this.ExcelSheet                 = _column.tableLayout().ExcelSheet;
        this.LedgerRRGERequisiteTypes_W = _column.LedgerRRGERequisiteTypes_W;

        if (_column.ExcelColumn)
        {
            this.addCell(_column.ExcelColumn, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTemplateSections</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromTemplateSections(LedgerRRGETemplateSections_W _section)
    {
        this.LedgerRRGETemplates_W = _section.LedgerRRGETemplates_W;
        this.SectionId             = _section.SectionId;
        this.SectionRefRecId       = _section.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCellProperty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isCellProperty()
    {
        return this.PropertyType == LedgerRRGESectionPropertyType_W::Cell;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isXML</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isXML()
    {
        return this.template().isXML();
    }

]]></Source>
			</Method>
			<Method>
				<Name>property</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEProperties_W property(boolean _forUpdate = false)
    {
        return LedgerRRGEProperties_W::findByPropertyId(this.PropertyId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertyVersion</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEPropertyVersions_W propertyVersion()
    {
        LedgerRRGEPropertyVersions_W propertyVersion;

        propertyVersion.initFromProperty(this);

        return propertyVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>section</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGETemplateSections_W section(boolean _forupdate = false)
    {
        return this.SectionRefRecId ?
            LedgerRRGETemplateSections_W::findRecId(this.SectionRefRecId, _forupdate) :
            LedgerRRGETemplateSections_W::findSection(this.LedgerRRGETemplates_W, this.SectionId, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableColumn</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGETableColumns_W tableColumn(boolean _forupdate = false)
    {
        LedgerRRGETableColumns_W column;
   
        column.selectForUpdate(_forupdate);

        select firstonly column where column.PropertyRefRecId == this.RecId;

        return column;
    }

]]></Source>
			</Method>
			<Method>
				<Name>template</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGETemplates_W template(boolean _forupdate = false)
    {
        return LedgerRRGETemplates_W::find(this.LedgerRRGETemplates_W, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _updateColumn = true)
    {
        LedgerRRGETableColumns_W column;

        ttsbegin;
        if (_updateColumn)
        {
            column = this.tableColumn(true);
            if (column)
            {
                column.initFromProperty(this);
                column.update(false);
            }
        }
        super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (ret)
        {
            if (this.tableColumn() && Box::yesNo(strfmt("@LedgerRRG:LedgerRRG_DeleteRequisite", this.PropertyId), DialogButton::No) == DialogButton::No)
            {
                ret = checkFailed(strfmt("@LedgerRRG:LedgerRRG_DeleteRequisiteCancel", this.PropertyId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean                         ret;

        ret = super(_fieldIdToCheck);

        if (this.Dynamic)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(LedgerRRGESectionProperties_W, Dynamic):
                case fieldnum(LedgerRRGESectionProperties_W, SectionId):
                    if (!this.isXML() && !this.section().checkDynamics())
                    {
                        ret = false;
                    }
                    break;

                case fieldnum(LedgerRRGESectionProperties_W, DynamicValueRefRecId):
                    if (!this.checkDynamicValueRef())
                    {
                        ret = false;
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEPropertyValue_W defaultValue(LedgerRRGEPropertyDataType_W _type)
    {
        switch (_type)
        {
            case LedgerRRGEPropertyDataType_W::Numeric:
                return '0';
            case LedgerRRGEPropertyDataType_W::Text:
                return '-';
            case LedgerRRGEPropertyDataType_W::Date:
                return '00.00.0000';
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPropertyId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean existPropertyId(LedgerRRGETemplateRecId_W _templateRecId, LedgerRRGESectionId_W _sectionId, LedgerRRGESectionPropertyId_W _propertyId)
    {
        return (select firstonly RecId from ledgerRRGESectionProperties_W
            where ledgerRRGESectionProperties_W.LedgerRRGETemplates_W == _templateRecId  &&
                  ledgerRRGESectionProperties_W.SectionId   == _sectionId   &&
                  ledgerRRGESectionProperties_W.PropertyId  == _propertyId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProperty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGESectionProperties_W findProperty(LedgerRRGESectionPropertyId_W _propertyId, RefRecId _sectionRecId, boolean _forupdate = false, boolean _includeDynamic = true)
    {
        LedgerRRGESectionProperties_W property;

        if (_propertyId && _sectionRecId)
        {
            property.selectForUpdate(_forupdate);

            select firstonly property
                where property.SectionRefRecId  == _sectionRecId    &&
                      property.PropertyId       == _propertyId      &&
                     (_includeDynamic                               ||
                      !property.Dynamic);
        }

        return property;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGESectionProperties_W findRecId(RecId _recId, boolean _forupdate = false)
    {
        LedgerRRGESectionProperties_W property;

        if (_recId)
        {
            property.selectForUpdate(_forupdate);

            select firstonly property
                where property.RecId == _recId;
        }

        return property;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LineNum lastLineNum(LedgerRRGETemplateRecId_W _templateRecId, LedgerRRGESectionId_W _sectionId)
    {
        return (select maxof(LineNum) from ledgerRRGESectionProperties_W
                    where ledgerRRGESectionProperties_W.LedgerRRGETemplates_W == _templateRecId &&
                          ledgerRRGESectionProperties_W.SectionId             == _sectionId).LineNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<Label>@LedgerRRG:LedgerRRG_SectionRequisites</Label>
	<TitleField1>PropertyId</TitleField1>
	<TitleField2>Description</TitleField2>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Ledger</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LedgerRRGEPropertyCells_W</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGEPropertyCells_W</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerRRGETemplates_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SectionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddGroup</Name>
			<Label>@SYS115313</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttributeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SectionRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IdLineNumGroup</Name>
			<Label>@SYS15682</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerRRGETemplates_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PropertyType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editAttributeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExcelSheet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dynamic</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editDynamicValueRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutputType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerRRGERequisiteTypes_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AttributeName</Name>
			<ExtendedDataType>LedgerRRGEAttributeName_W</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DataType</Name>
			<EnumType>LedgerRRGEPropertyDataType_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultValue</Name>
			<ExtendedDataType>LedgerRRGEPropertyValue_W</ExtendedDataType>
			<Label>@SYS40133</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>LedgerRRGEDescriptionLayout_W</ExtendedDataType>
			<Label>@SYS41042</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Dynamic</Name>
			<ExtendedDataType>LedgerRRGEDynamicSection_W</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DynamicValueRefRecId</Name>
			<ExtendedDataType>LedgerRRGEDynamicValueRefRecId_W</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExcelSheet</Name>
			<ExtendedDataType>LedgerRRGEExcelSheet_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerRRGERequisiteTypes_W</Name>
			<ExtendedDataType>LedgerRRGERequisiteTypeRecId_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerRRGETemplates_W</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>LedgerRRGETemplateRecId_W</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OutputType</Name>
			<EnumType>LedgerRRGEPropertyOutputType_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PropertyId</Name>
			<ExtendedDataType>LedgerRRGESectionPropertyId_W</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PropertyType</Name>
			<EnumType>LedgerRRGESectionPropertyType_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SectionId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>LedgerRRGESectionId_W</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SectionRefRecId</Name>
			<ExtendedDataType>LedgerRRGESectionRefRecId_W</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TableLayoutRefRecId</Name>
			<ExtendedDataType>LedgerRRGETableLayoutRefRecId_W</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Value</Name>
			<ExtendedDataType>LedgerRRGEPropertyValue_W</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TemplateSectionLineNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerRRGETemplates_W</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SectionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SectionRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerRRGESectionProperties_WIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DynamicValueRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerRRGETableLayouts_WIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TableLayoutRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerRRGERequisiteTypes_WIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerRRGERequisiteTypes_W</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>LedgerRRGEProperties_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerRRGEProperties_W</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerRRGEProperties_W</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerRRGESectionProperties_W</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PropertyId</Name>
					<Field>PropertyId</Field>
					<RelatedField>PropertyId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>PropertyType</Name>
					<Field>PropertyType</Field>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerRRGERequisiteTypes_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerRRGERequisiteTypes_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerRRGERequisiteTypes_W</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerRRGESectionProperties_W</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerRRGERequisiteTypes_W</Name>
					<Field>LedgerRRGERequisiteTypes_W</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerRRGESectionProperties_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerRRGESectionProperties_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerRRGESectionProperties_W</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerRRGESectionProperties_W</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DynamicValueRefRecId</Name>
					<Field>DynamicValueRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerRRGETableLayouts_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerRRGETableLayouts_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerRRGETableLayouts_W</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerRRGESectionProperties_W</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableLayoutRefRecId</Name>
					<Field>TableLayoutRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerRRGETemplates_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerRRGETemplates_W</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerRRGETemplates_W</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerRRGESectionProperties_W</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerRRGETemplates_W</Name>
					<Field>LedgerRRGETemplates_W</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerRRGETemplateSections_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerRRGETemplateSections_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerRRGETemplateSections_W</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>LedgerRRGESectionProperties_W</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerRRGETemplates_W</Name>
					<Field>LedgerRRGETemplates_W</Field>
					<RelatedField>LedgerRRGETemplates_W</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SectionId</Name>
					<Field>SectionId</Field>
					<RelatedField>SectionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SectionRefRecId</Name>
					<Field>SectionRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>