<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceHoldHistory</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceHoldHistory extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearDataFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the field of current record.
    /// </summary>
    public void clearDataFields()
    {
        this.SecurityRole_PSN = 0;
        this.HoldReleasedBy_PSN = '';
        this.ReasonTableRef_PSN = 0;
        this.HoldReleaseDate_PSN =dateNull();
        this.CalculatedDueDate_PSN = dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmInvoicePlaceOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirms whether the user is sure to place the invoice on hold.
    /// </summary>
    /// <param name="_invoice">
    /// The table buffer for which hold on invoice needs to be checked.
    /// </param>
    /// <returns>
    ///  true if the user places a hold on invoice; otherwise, false.
    /// </returns>
    public boolean confirmInvoicePlaceOnHold(Common _invoice)
    {
        VendInvoiceJour         vendInvoiceJour;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        boolean                 placeInvoiceOnHold;
        boolean                 isPaymentTermDefined;

        switch (_invoice.TableId)
        {
            case tableNum(VendInvoiceJour):
                vendInvoiceJour = _invoice;
                if (vendInvoiceJour.Payment)
                {
                    isPaymentTermDefined = true;
                }
                break;
            case tableNum(VendInvoiceInfoTable):
                vendInvoiceInfoTable = _invoice;
                if (vendInvoiceInfoTable.Payment)
                {
                    isPaymentTermDefined = true;
                }
                break;
        }

        // if payment term is not defined.
        if (!isPaymentTermDefined)
        {
            isPaymentTermDefined = checkFailed("@SPS2379");
        }
        // if payment term is defined then ask the message from the user whether he want to place a hold on the invoice.
        if (isPaymentTermDefined && DialogButton::Yes == Box::yesNo(strFmt("@SPS1911",DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())), DialogButton::No))
        {
            placeInvoiceOnHold = true;
        }

        return placeInvoiceOnHold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reason code.
    /// </summary>
    /// <returns>
    /// The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public display ReasonCode displayReasonCode()
    {
        ReasonCode  reasonCode;

        reasonCode = ReasonTableRef::find(this.ReasonTableRef_PSN).Reason;
        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayReasonDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reason code description.
    /// </summary>
    /// <returns>
    /// The reason code description of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public display Description displayReasonDescription()
    {
        ReasonTable reasonTable;
        ReasonTableRef reasonTableRef;

        select Description from reasonTable
            join RecId from reasonTableRef
            where reasonTable.Reason == reasonTableRef.Reason &&
            this.ReasonTableRef_PSN == reasonTableRef.RecId;

        return reasonTable.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason comment.
    /// </summary>
    /// <param name="_set">
    /// True if the reason description is set; otherwise, false.
    /// </param>
    /// <param name="_reasonComment">
    /// The new reason comment when <paramref name="_set"/> is true.
    /// </param>
    /// <returns>
    /// The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonComment editReasonComment(boolean _set, ReasonComment _reasonComment)
    {
        ReasonComment  reasonComment = _reasonComment;
        ReasonTable    reasonTable;
        ReasonTableRef reasonTableRef;

        if (_set)
        {
            // If the ReasonRef is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (!this.ReasonTableRef_PSN)
            {
                this.ReasonTableRef_PSN = ReasonTableRef::createFromComment(reasonComment);
            }
            else
            {
                this.ReasonTableRef_PSN = ReasonTableRef::updateComment(reasonComment,this.ReasonTableRef_PSN);
            }
        }
        else
        {
            reasonComment = ReasonTableRef::find(this.ReasonTableRef_PSN).ReasonComment;
            if (reasonComment == '')
            {
                select firstonly Description from reasonTable
                    exists join reasonTableRef
                    where reasonTable.Reason == reasonTableRef.Reason &&
                     this.ReasonTableRef_PSN == reasonTableRef.RecId;

                reasonComment = reasonTable.Description;
            }
        }

        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason code.
    /// </summary>
    /// <param name="_set">
    /// true if the reason code is set; otherwise, false.
    /// </param>
    /// <param name="_reasonCode">
    /// The new reason code when <paramref name="_set"/> is true.
    /// </param>
    /// <returns>
    /// The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCode(boolean _set, ReasonCode _reasonCode)
    {
        ReasonCode  reasonCode = _reasonCode;
        ReasonTable reasonTable;

        if (_set)
        {
            reasonTable = ReasonTable::find(_reasonCode);
            // checking whether it is valid vendor specific reason code
            if (!reasonTable.Vend)
            {
                // if not valid then use the previous reason code.
                reasonCode = ReasonTableRef::find(this.ReasonTableRef_PSN).Reason;
            }
            else if (this.ReasonTableRef_PSN == 0)
            {
                this.ReasonTableRef_PSN = ReasonTableRef::createFromCode(reasonCode);
            }
            else
            {
                this.ReasonTableRef_PSN = ReasonTableRef::updateCode(reasonCode,this.ReasonTableRef_PSN);
            }

            this.editReasonComment(true, reasonTable.Description);
        }
        else
        {
            reasonCode = ReasonTableRef::find(this.ReasonTableRef_PSN).Reason;
        }

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.InvoicePaymHold_PSN = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the hold on the given invoice.
    /// </summary>
    /// <param name="_invoiceRecord">
    /// The record Id of the invoice.
    /// </param>
    /// <param name="_tableId">
    /// The table id of invoice table.
    /// </param>
    /// <returns>
    /// true if the invoice is release from hold; otherwise, false.
    /// </returns>
    public boolean releaseHold(recId _invoiceRecord, tableId _tableId)
    {
        VendTable               vendTable;
        boolean                 holdReleased;
        VendAccount             vendAccount;
        recId                   recId;
        date                    calculatedDate;
        date                    holdStartDate;
        int                     dateDifference = 0;
        VendInvoiceHoldHistory  vendInvoiceHoldHistory;
        SecurityUserRole        securityUserRole;
        VendInvoiceJour         vendInvoiceJour;
        PaymTermHold            paymTermHold;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        date                    invoiceDueDate;
        PaymTermId              paymTermId;

        //finding the last hold record.
        select RecId, SecurityRole_PSN, HoldStartDate_PSN from vendInvoiceHoldHistory
        where vendInvoiceHoldHistory.VendInvoiceJour_PSN == _invoiceRecord &&
              vendInvoiceHoldHistory.HoldReleasedBy_PSN == '' &&
              vendInvoiceHoldHistory.RefTableId_PSN == _tableId;

        recId = vendInvoiceHoldHistory.RecId;

        //finding the invoice record.
        switch (_tableId)
        {
            case tableNum(VendInvoiceJour): vendInvoiceJour = VendInvoiceJour::findRecId(_invoiceRecord);
                                            paymTermId = vendInvoiceJour.Payment;
                                            invoiceDueDate = vendInvoiceJour.DueDate;
                                            vendAccount = vendInvoiceJour.InvoiceAccount;
                                            break;
            case tableNum(VendInvoiceInfoTable): vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(_invoiceRecord);
                                            paymTermId = vendInvoiceInfoTable.Payment;
                                            invoiceDueDate = vendInvoiceInfoTable.FixedDueDate;
                                            vendAccount = vendInvoiceInfoTable.InvoiceAccount;
                                            break;
        }
        vendTable = VendTable::find(vendAccount);

        if (vendTable.Blocked == CustVendorBlocked::Invoice || vendTable.Blocked == CustVendorBlocked::Payment)
        {
            return checkFailed("@SPS2345");
        }
        // if no payment term is define.
        if (paymTermId == '')
        {
            return checkFailed("@SPS1896");
        }

        // finding the minimum threshold.
        select RecId,MinimumDaysThreshold_PSN from paymTermHold
            where paymTermHold.PaymTerm_PSN == paymTermId
                    && paymTermHold.SecurityRole_PSN == vendInvoiceHoldHistory.SecurityRole_PSN;

        if (paymTermHold.RecId == 0)
        {
            return checkFailed("@SPS1895");
        }

        calculatedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        holdStartDate = vendInvoiceHoldHistory.HoldStartDate_PSN;

        //finding the date difference from hold start date to release date.
        dateDifference = any2int(abs(invoiceDueDate - holdStartDate));

        if (dateDifference > paymTermHold.MinimumDaysThreshold_PSN)
        {
            calculatedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + dateDifference;
        }
        else
        {
             calculatedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + paymTermHold.MinimumDaysThreshold_PSN;
        }

        if (recId !=0)
        {
            // now find whether this employee also have that same role which was used to place the hold.
            select RecId from securityUserRole
                where securityUserRole.User == curUserId() &&
                      securityUserRole.SecurityRole ==  vendInvoiceHoldHistory.SecurityRole_PSN;

            if (securityUserRole.RecId)
            {
                this.CalculatedDueDate_PSN = calculatedDate;
                holdReleased = true;
                info("@SPS2344");
            }
            else
            {
                info("@SPS1895");
            }
        }
        else
        {
            error("@SYS331659");
        }

        return holdReleased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReleaseDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the release date on the specified invoice record.
    /// </summary>
    /// <param name="_invoiceRecord">
    /// The record of invoice.
    /// </param>
    public void updateReleaseDate(Common _invoiceRecord)
    {
        VendTrans vendTrans;
        VendInvoiceJour vendInvoiceJour;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendTransOpen vendTransOpen;

        switch (_invoiceRecord.TableId)
        {
            case tableNum(VendTrans):
                                    vendTrans = _invoiceRecord;
                                    vendTrans.DueDate = this.CalculatedDueDate_PSN;
                                    break;
            case tableNum(VendInvoiceJour):
                                    vendInvoiceJour = _invoiceRecord;
                                    vendInvoiceJour.FixedDueDate = this.CalculatedDueDate_PSN;
                                    vendInvoiceJour.DueDate = this.CalculatedDueDate_PSN;
                                    break;
            case tableNum(VendInvoiceInfoTable):
                                    vendInvoiceInfoTable = _invoiceRecord;
                                    vendInvoiceInfoTable.FixedDueDate = this.CalculatedDueDate_PSN;
                                    break;
            case tableNum(VendTransOpen):
                                    vendTransOpen = _invoiceRecord;
                                    vendTransOpen.DueDate = this.CalculatedDueDate_PSN;
                                    break;
        }

        if (_invoiceRecord.TableId != tableNum(VendInvoiceInfoTable))
        {
            ttsbegin;
            //updating vendInvoiceJour record in order to date to be same in three document.
            if (_invoiceRecord.TableId == tableNum(VendTransOpen) ||
                _invoiceRecord.TableId == tableNum(VendTrans))
            {
                vendInvoiceJour = VendInvoiceJour::findRecId(this.VendInvoiceJour_PSN, true);
                vendInvoiceJour.FixedDueDate = this.CalculatedDueDate_PSN;
                vendInvoiceJour.DueDate = this.CalculatedDueDate_PSN;
                vendInvoiceJour.update();
            }

            //updating VendTransOpen record in order to date to be same in three document.
            if (_invoiceRecord.TableId == tableNum(VendTrans) ||
                _invoiceRecord.TableId == tableNum(VendInvoiceJour))
            {
                if (_invoiceRecord.TableId == tableNum(VendTrans))
                {
                    vendTransOpen = VendTransOpen::findRefId(_invoiceRecord.RecId, true);
                }
                else
                {
                    vendTrans = vendInvoiceJour.vendTrans();
                    vendTransOpen = VendTransOpen::findRefId(vendTrans.RecId, true);
                }
                vendTransOpen.DueDate = this.CalculatedDueDate_PSN;
                vendTransOpen.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean             ret;
        SecurityUserRole    securityUserRole;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(VendInvoiceHoldHistory, SecurityRole_PSN):
                    if (this.SecurityRole_PSN && this.InvoicePaymHold_PSN)
                    {
                        // Select a record that matches the user's current security role.
                        select securityUserRole
                            where securityUserRole.User         == curUserId() &&
                                  securityUserRole.SecurityRole == this.SecurityRole_PSN;

                        // In order to place a hold, the user must be assigned a role that's allowed to place a hold as well as select a role which they have.
                        if (VendInvoiceHoldHistory::canPlaceAHold(this.VendInvoiceJour_PSN, securityUserRole.SecurityRole, this.RefTableId_PSN))
                        {
                            this.HoldBy_PSN = curUserId();
                            this.HoldStartDate_PSN = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                            ret = true;
                        }
                        else
                        {
                            ret = false;
                        }
                    }
                    break;
                case fieldNum(VendInvoiceHoldHistory, InvoicePaymHold_PSN):
                    if (!this.InvoicePaymHold_PSN && this.orig().InvoicePaymHold_PSN)
                    {
                        if (this.releaseHold(this.VendInvoiceJour_PSN, this.RefTableId_PSN))
                        {
                            this.HoldReleasedBy_PSN = curUserId();
                            this.HoldReleaseDate_PSN = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                            ret = true;
                        }
                        else
                        {
                            ret = false;
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && this.InvoicePaymHold_PSN)
        {
            if (ret && this.SecurityRole_PSN == 0)
            {
                ret = checkFailed(strFmt("@SYS84378","@SPS1742"));
            }
            if (ret && this.ReasonTableRef_PSN == 0)
            {
                ret = checkFailed(strFmt("@SYS26332", "@SYS63086"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPlaceAHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detemines whether user can place a hold on the invoice.
    /// </summary>
    /// <param name="_invoice">
    /// The record of the invoice.
    /// </param>
    /// <param name="_roleRecID">
    /// The security role use to place the hold.
    /// </param>
    /// <param name="_tableId">
    /// The table id of invoice table.
    /// </param>
    /// <returns>
    /// true if the user place a hold; otherwise, false.
    /// </returns>
    public static boolean canPlaceAHold(recId _invoice, recId _roleRecID, tableId _tableId)
    {
        boolean                 ret;
        VendInvoiceHoldHistory  vendInvoiceHoldHistory;
        PaymTermHold            paymTermHold;
        VendInvoiceJour         vendInvoiceJour;
        PaymTermId              paymTermId;
        VendInvoiceInfoTable    vendInvoiceInfoTable;

        select count(RecId) from vendInvoiceHoldHistory
            where vendInvoiceHoldHistory.HoldBy_PSN == curUserId() &&
                  vendInvoiceHoldHistory.SecurityRole_PSN == _roleRecID &&
                  vendInvoiceHoldHistory.VendInvoiceJour_PSN == _invoice &&
                  vendInvoiceHoldHistory.RefTableId_PSN == _tableId;

        switch (_tableId)
        {
            case tableNum(VendInvoiceJour):
                        vendInvoiceJour = VendInvoiceJour::findRecId(_invoice);
                        paymTermId = vendInvoiceJour.Payment;
                        break;
            case tableNum(VendInvoiceInfoTable):
                        vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(_invoice);
                        paymTermId = vendInvoiceInfoTable.Payment;
                        break;
        }

        if (paymTermId != '' )
        {
            select MaximumHold_PSN, RecId from paymTermHold
                where paymTermHold.PaymTerm_PSN == paymTermId &&
                      paymTermHold.SecurityRole_PSN == _roleRecID;

            if (paymTermHold.RecId)
            {
                if (paymTermHold.MaximumHold_PSN <= vendInvoiceHoldHistory.RecId)
                {
                    error("@SPS1890");
                    ret = false;
                }
                else
                {
                    ret = true;
                }
            }
            else
            {
                ret = false;
                error("@SPS1896");
            }
        }
        else
        {
            ret = checkFailed("@SPS2379");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>VendInvoiceHoldHistory</c> table; if not, an error message
    ///    is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>VendInvoiceHoldHistory</c> table record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!VendInvoiceHoldHistory::exist(_recId))
        {
            ret = checkFailed(strFmt(VendInvoiceHoldHistory::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>VendInvoiceHoldHistory</c> table exists.
    /// </summary>
    /// <param name="_vendInvoiceHoldHistoryId">
    ///    The record ID of the <c>VendInvoiceHoldHistory</c> table record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    static boolean exist(RefRecId _vendInvoiceHoldHistoryId)
    {
        VendInvoiceHoldHistory vendInvoiceHoldHistory;

        return _vendInvoiceHoldHistoryId && (select firstonly RecId from vendInvoiceHoldHistory
                                      where vendInvoiceHoldHistory.RecId == _vendInvoiceHoldHistoryId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>VendInvoiceHoldHistory</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record in the <c>VendInvoiceHoldHistory</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record of the <c>VendInvoiceHoldHistory</c> table if found; otherwise, an empty buffer.
    /// </returns>
    static VendInvoiceHoldHistory find(RefRecId _recId,
                         boolean    _forUpdate = false)
    {
        VendInvoiceHoldHistory    vendInvoiceHoldHistory;

        if (_recId)
        {
            vendInvoiceHoldHistory.selectForUpdate(_forUpdate);

            select firstonly vendInvoiceHoldHistory
                where vendInvoiceHoldHistory.RecId == _recId;
        }

        return vendInvoiceHoldHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPlaceInHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detemines whether a hold is in place.
    /// </summary>
    /// <param name="_invoiceRecId">
    /// The record Id of the invoice.
    /// </param>
    /// <param name="_tableId">
    /// The table id of invoice table.
    /// </param>
    /// <returns>
    /// true if the invoice in a hold; otherwise, false.
    /// </returns>
    public static boolean isPlaceInHold(recId _invoiceRecId, tableId _tableId)
    {
        VendInvoiceHoldHistory vendInvoiceHoldHistory;
        VendInvoiceJour vendInvoiceJour;
        VendTrans       vendTrans;

        switch (_tableId)
        {
            case tableNum(VendTrans) :
                        vendTrans = VendTrans::find(_invoiceRecId);
                        select RecId from vendInvoiceJour
                            where vendInvoiceJour.LedgerVoucher == vendTrans.Voucher &&
                                  vendInvoiceJour.InvoiceAccount == vendTrans.AccountNum &&
                                  vendInvoiceJour.InvoiceDate == vendTrans.TransDate;
                        _invoiceRecId = vendInvoiceJour.RecId;
                        _tableId = tableNum(VendInvoiceJour);
                        break;
        }

        select RecId from vendInvoiceHoldHistory
        where vendInvoiceHoldHistory.VendInvoiceJour_PSN == _invoiceRecId &&
              vendInvoiceHoldHistory.HoldReleasedBy_PSN == '' &&
              vendInvoiceHoldHistory.RefTableId_PSN == _tableId;

        return (vendInvoiceHoldHistory.RecId == 0 ? false : true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performFormLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Peroforms the lookup of security role field.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The control of security role.
    /// </param>
    /// <returns>
    /// A table of type common.
    /// </returns>
    public static Common performFormLookup(FormReferenceControl _formReferenceControl)
    {
        SysReferenceTableLookup          sysLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildDataSource    queryBuildDataSourceSecurityUserRole;
        QueryBuildRange         queryBuildRange;
        ;

        sysLookup = SysReferenceTableLookup::newParameters(tableNum(SecurityRole), _formReferenceControl, true);
        sysLookup.addLookupfield(fieldNum(SecurityRole, Name));

        // creating query
        queryBuildDataSource = query.addDataSource(tableNum(SecurityRole));
        queryBuildDataSourceSecurityUserRole = queryBuildDataSource.addDataSource(tableNum(SecurityUserRole));
        queryBuildDataSourceSecurityUserRole.relations(true);

        queryBuildRange = queryBuildDataSourceSecurityUserRole.addRange(fieldNum(SecurityUserRole, User));
        queryBuildRange.value(curUserId());

        sysLookup.parmQuery(query);

        return sysLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the record not found message.
    /// </summary>
    /// <returns>
    /// A string text
    /// </returns>
    static str 80 txtNotExist()
    {
        return "@SYS94719";
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method executes each time the value of a field is changed.
    /// </summary>
    /// <param name = "_fieldId"></param>
    public void modifiedField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldnum(VendInvoiceHoldHistory, InvoicePaymHold_PSN):
                if (!this.InvoicePaymHold_PSN)
                {
                    this.SecurityRole_PSN   = 0;
                    this.ReasonTableRef_PSN = 0;
                }
                break;
            default:
                super(_fieldId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
	<DeveloperDocumentation>@SPS2513</DeveloperDocumentation>
	<Label>@SPS1752</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>VendInvoiceJour_PSN</TitleField1>
	<TitleField2>SecurityRole_PSN</TitleField2>
	<Modules>AccountsPayable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SecurityRole_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HoldBy_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HoldStartDate_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HoldReleaseDate_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HoldReleasedBy_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoicePaymHold_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceHold</Name>
			<Label>@SPS1748</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HoldStartDate_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HoldReleaseDate_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayReasonDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HoldBy_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SecurityRole_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HoldReleasedBy_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalculatedDueDate_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoicePaymHold</Name>
			<Label>@SPS1748</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SecurityRole_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editReasonComment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendInvoiceJournal</Name>
			<Label>@SPS1748</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoicePaymHold_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SecurityRole_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayReasonDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalculatedDueDate_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Deadline</ExtendedDataType>
			<Label>@SPS1765</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HoldBy_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@SPS1761</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>HoldReleaseDate_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
			<Label>@SPS1755</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HoldReleasedBy_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@SPS1762</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>HoldStartDate_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
			<Label>@SPS1753</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoicePaymHold_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SPS1748</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonTableRef_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId_PSN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SecurityRole_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS1742</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceJour_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>UserInfoIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HoldBy_PSN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UserInfoIdx1</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HoldReleasedBy_PSN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReasonTableRefIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ReasonTableRef_PSN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SecurityRoleIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SecurityRole_PSN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonTableRef_PSN</Name>
					<Field>ReasonTableRef_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SelectedRole</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SecurityRole</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SecurityRole_PSN</Name>
					<Field>SecurityRole_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecIDIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceInfoTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceInfoTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceJour_PSN</Name>
					<Field>VendInvoiceJour_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceJour_PSN</Name>
					<Field>VendInvoiceJour_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>