<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxInformation_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxInformation_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxRegistrationNumbersTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxRegistrationNumbers_IN</c> based on the taxType.
    /// </summary>
    /// <param name="_taxType">
    /// The given taxType.
    /// </param>
    /// <param name="_exciseTypes">
    /// The given ExciseType; Optional.
    /// </param>
    /// <returns>
    /// The <c>TaxRegistrationNumbers_IN</c>
    /// </returns>
    public TaxRegistrationNumbers_IN getTaxRegistrationNumbersTable(TaxType_IN      _taxType,
                                                                    ExciseType_IN   _exciseTypes = ExciseType_IN::Manufacturer)
    {
        RecId   taxRegistrationNumberRefRecId;

        switch (_taxType)
        {
            case TaxType_IN::Customs :
                taxRegistrationNumberRefRecId = this.iecRegistrationNumberTable;
                break;

            case TaxType_IN::Excise :
                switch (_exciseTypes)
                {
                    case ExciseType_IN::Manufacturer :
                        taxRegistrationNumberRefRecId = this.ManECCRegistrationNumberTable;
                        break;
                    case ExciseType_IN::Trader :
                        taxRegistrationNumberRefRecId = this.TraderECCRegistrationNumberTable;
                        break;
                    case ExciseType_IN::None :
                        taxRegistrationNumberRefRecId = this.ECCNumber;
                        break;
                }
                break;

            case TaxType_IN::ServiceTax :
                taxRegistrationNumberRefRecId = this.stcRegistrationNumberTable;
                break;

            case TaxType_IN::VAT:
                taxRegistrationNumberRefRecId = this.tin;
                break;

            case TaxType_IN::SalesTax :
                taxRegistrationNumberRefRecId = this.SalesTaxRegistrationNumber;
                break;

            case TaxType_IN::GST:
                taxRegistrationNumberRefRecId = this.GSTIN;
                break;

            default :
                break;
        }

        return TaxRegistrationNumbers_IN::find(taxRegistrationNumberRefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (!this.Name)
        {
            this.Name = NumberSeq::newGetNum(RetailParameters::numRefTaxInformationName(), true).num();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logisticsAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>LogisticsPostalAddress</c> table for the specified RegistrationLocation (Location Id).
    /// </summary>
    /// <returns>
    /// Return the <c>LogisticsPostalAddress</c> buffer for the specified registration location.
    /// </returns>
    display LogisticsAddressing logisticsAddress()
    {
        return LogisticsPostalAddress::findByLocation(this.RegistrationLocation).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        boolean a = this.IsPrimary;
        super();
        a = this.IsPrimary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field; optional.
    /// </param>
    /// <returns>
    /// Returns true if the field passes value validation; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean                       ret;
        TaxWithholdRegNumbers_IN      taxWithholdRegNumberTable;
        DirPartyLocation              dirPartyLocation;
        DirPartyTable                 dirPartyTable;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldstr(TaxInformation_IN, ManECCRegistrationNumberTable):
                    if (this.ManECCRegistrationNumberTable)
                    {
                        ret = this.validateRegistrationNumber(this.ManECCRegistrationNumberTable, TaxType_IN::Excise, "@GLS63164");
                    }
                    break;

                case fieldstr(TaxInformation_IN, TraderECCRegistrationNumberTable):
                    if (this.TraderECCRegistrationNumberTable)
                    {
                        ret = this.validateRegistrationNumber(this.TraderECCRegistrationNumberTable, TaxType_IN::Excise, "@GLS63166");
                    }
                    break;

                case fieldstr(TaxInformation_IN, ECCNumber):
                    if (this.ECCNumber)
                    {
                        ret = this.validateRegistrationNumber(this.ECCNumber, TaxType_IN::Excise, "@GLS63767");
                    }
                    break;

                case fieldstr(TaxInformation_IN, iecRegistrationNumberTable):
                    if (this.iecRegistrationNumberTable)
                    {
                        ret = this.validateRegistrationNumber(this.iecRegistrationNumberTable, TaxType_IN::Customs, "@GLS5007");
                    }
                    break;

                case fieldstr(TaxInformation_IN, stcRegistrationNumberTable):
                    if (this.stcRegistrationNumberTable)
                    {
                        ret = this.validateRegistrationNumber(this.stcRegistrationNumberTable, TaxType_IN::ServiceTax, "@GLS5006");
                    }
                    break;

                case fieldstr(TaxInformation_IN, SalesTaxRegistrationNumber):
                    if (this.SalesTaxRegistrationNumber)
                    {
                        ret = this.validateRegistrationNumber(this.SalesTaxRegistrationNumber, TaxType_IN::SalesTax, "@GLS5536");
                    }
                    break;

                case fieldstr(TaxInformation_IN, tan):
                    if (this.tan)
                    {
                        taxWithholdRegNumberTable = TaxWithholdRegNumbers_IN::find(this.tan);

                        select firstonly Party from dirPartyLocation
                            where dirPartyLocation.Location == this.RegistrationLocation;

                        dirPartyTable = DirPartyTable::findRec(dirPartyLocation.Party);

                        if (ret)
                        {
                            if (dirPartyTable.type() == DirPartyType::LegalEntity  &&
                                taxWithholdRegNumberTable.RegistrationType != TaxRegistrationType_IN::Company)
                            {
                                ret = checkFailed(strfmt("@GLS5447", TaxWithholdRegNumbers_IN::find(this.tan).RegistrationNumber, TaxRegistrationType_IN::Company));
                            }
                            else if ((dirPartyTable.type() == DirPartyType::Organization                                ||
                                      dirPartyTable.type() == DirPartyType::Person)                                     &&
                                      taxWithholdRegNumberTable.RegistrationType != TaxRegistrationType_IN::Customers   &&
                                      taxWithholdRegNumberTable.RegistrationType != TaxRegistrationType_IN::Vendors)
                            {
                                ret = checkFailed(strfmt("@GLS5447", TaxWithholdRegNumbers_IN::find(this.tan).RegistrationNumber, "@SYS183530"));
                            }
                        }
                    }
                    break;

                case fieldstr(TaxInformation_IN, tin):
                    if (this.tin)
                    {
                        ret = this.validateRegistrationNumber(this.tin, TaxType_IN::VAT, "@GLS5004");
                    }
                    break;

                case fieldstr(TaxInformation_IN, GSTIN):
                    if (this.GSTIN)
                    {
                        ret = this.validateRegistrationNumber(this.GSTIN, TaxType_IN::GST, "GST");
                    }
                    break;

                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if entered registration number is valid.
    /// </summary>
    /// <param name="_registrationNumber">RefRecId of registrationNumber table</param>
    /// <param name="_taxType">TaxType_IN</param>
    /// <param name="_labelLoc">label for error</param>
    /// <returns>boolean</returns>
    private boolean validateRegistrationNumber(RefRecId    _registrationNumber,
                                               TaxType_IN  _taxType,
                                               str         _labelLoc)
    {
        boolean                         ret = true;
        TaxRegistrationNumbers_IN       taxRegistrationNumberTable;
        DirPartyLocation                dirPartyLocation;
        DirPartyTable                   dirPartyTable;
        InventLocationLogisticsLocation inventLocationLogisticsLocation;
        InventLocation                  inventLocation;
        boolean                         isCustomer;
        boolean                         isVendor;

        if (_registrationNumber)
        {
            taxRegistrationNumberTable = TaxRegistrationNumbers_IN::find(_registrationNumber);

            select firstonly Party from dirPartyLocation
                where dirPartyLocation.Location == this.RegistrationLocation;

            dirPartyTable = DirPartyTable::findRec(dirPartyLocation.Party);

            if (dirPartyTable.RecId != 0)
            {
                isCustomer = DirPartyTableHelper_IN::isCustomerLocation(this.RegistrationLocation);
                isVendor = DirPartyTableHelper_IN::isVendorLocation(this.RegistrationLocation);

                if (dirPartyTable.type() == DirPartyType::LegalEntity)
                {
                    if (taxRegistrationNumberTable.TaxType              != _taxType
                        || taxRegistrationNumberTable.RegistrationType  != TaxRegistrationType_IN::Company)
                    {
                        ret = checkFailed(strfmt("@GLS5071", taxRegistrationNumberTable.RegistrationNumber, _labelLoc , TaxRegistrationType_IN::Company));
                    }
                }
                else if (dirPartyTable.type() == DirPartyType::Person)
                {
                    if (isCustomer && !isVendor)
                    {
                        if (taxRegistrationNumberTable.TaxType              != _taxType
                            || taxRegistrationNumberTable.RegistrationType  != TaxRegistrationType_IN::Customers)
                        {
                            ret = checkFailed(strfmt("@GLS5071", taxRegistrationNumberTable.RegistrationNumber, _labelLoc, TaxRegistrationType_IN::Customers));
                        }
                    }
                    else if (isVendor && !isCustomer)
                    {
                        if (taxRegistrationNumberTable.TaxType              != _taxType
                            || taxRegistrationNumberTable.RegistrationType  != TaxRegistrationType_IN::Vendors)
                        {
                            ret = checkFailed(strfmt("@GLS5071", taxRegistrationNumberTable.RegistrationNumber, _labelLoc, TaxRegistrationType_IN::Vendors));
                        }
                    }
                    else
                    {
                        if (taxRegistrationNumberTable.TaxType              != _taxType
                            || (taxRegistrationNumberTable.RegistrationType     != TaxRegistrationType_IN::Vendors
                                && taxRegistrationNumberTable.RegistrationType  != TaxRegistrationType_IN::Customers))
                        {
                            ret = checkFailed(strfmt("@GLS5071", taxRegistrationNumberTable.RegistrationNumber, _labelLoc, "@SYS183530"));
                        }
                    }
                }
                else
                {
                    if (isCustomer && !isVendor)
                    {
                        if (taxRegistrationNumberTable.TaxType              != _taxType
                            || taxRegistrationNumberTable.RegistrationType  != TaxRegistrationType_IN::Customers)
                        {
                            ret = checkFailed(strfmt("@GLS5071", taxRegistrationNumberTable.RegistrationNumber, _labelLoc, TaxRegistrationType_IN::Customers));
                        }
                    }
                    else if (!isCustomer && isVendor)
                    {
                        if (taxRegistrationNumberTable.TaxType              != _taxType
                            || taxRegistrationNumberTable.RegistrationType  != TaxRegistrationType_IN::Vendors)
                        {
                            ret = checkFailed(strfmt("@GLS5071", taxRegistrationNumberTable.RegistrationNumber, _labelLoc, TaxRegistrationType_IN::Vendors));
                        }
                    }
                    else if (isCustomer && isVendor)
                    {
                        if (taxRegistrationNumberTable.TaxType              != _taxType
                            || (taxRegistrationNumberTable.RegistrationType     != TaxRegistrationType_IN::Vendors
                                && taxRegistrationNumberTable.RegistrationType  != TaxRegistrationType_IN::Customers))
                        {
                            ret = checkFailed(strfmt("@GLS5071", taxRegistrationNumberTable.RegistrationNumber, _labelLoc, "@SYS183530"));
                        }
                    }
                    else
                    {
                        if (taxRegistrationNumberTable.TaxType              != _taxType
                            || taxRegistrationNumberTable.RegistrationType  != TaxRegistrationType_IN::Company)
                        {
                            ret = checkFailed(strfmt("@GLS5071", taxRegistrationNumberTable.RegistrationNumber, _labelLoc , TaxRegistrationType_IN::Company));
                        }
                    }
                }
            }
            else
            {
                // If no relation with party table, check if this location is related with the InventLocation.
                select firstonly RecId from inventLocationLogisticsLocation
                    exists join inventLocation
                        where inventLocationLogisticsLocation.Location == this.RegistrationLocation
                            && inventLocationLogisticsLocation.InventLocation == inventLocation.RecId;

                if (inventLocationLogisticsLocation.RecId)
                {
                    if (taxRegistrationNumberTable.TaxType != _taxType
                        || taxRegistrationNumberTable.RegistrationType != TaxRegistrationType_IN::Company)
                    {
                        ret = checkFailed(strFmt("@GLS5071", taxRegistrationNumberTable.RegistrationNumber, _labelLoc, TaxRegistrationType_IN::Company));
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTAN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the entered value in TAN number field is a valid TAN or not for the specific registrationType.
    /// </summary>
    /// <param name="_registrationType">
    /// _registrationType of TAN.
    /// </param>
    /// <returns>
    /// Returns boolean based on the matched value.
    /// </returns>
    public boolean validateTAN(TaxRegistrationType_IN _registrationType)
    {
        boolean ret = true;
        TaxWithholdRegNumbers_IN  taxWithholdRegNumber;

        if (this.tan)
        {
            taxWithholdRegNumber = TaxWithholdRegNumbers_IN::find(this.tan);
            if (taxWithholdRegNumber.RegistrationType != _registrationType)
            {
                ret = checkFailed(strfmt("@GLS5447", TaxWithholdRegNumbers_IN::find(this.tan).RegistrationNumber, _registrationType));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryByTaxInformationRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query on the <c>TaxInformation_IN</c> table for the specified locationRecId.
    /// </summary>
    /// <param name="_TaxInformationRecId">
    /// Recid of the registration location.
    /// </param>
    /// <returns>
    /// Returns a query object.
    /// </returns>
    public static Query buildQueryByTaxInformationRecId(RecId _TaxInformationRecId)
    {
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource;

        queryBuildDataSource = query.addDataSource(tablenum(TaxInformation_IN));
        queryBuildDataSource.addRange(fieldnum(TaxInformation_IN, RecId)).value(queryValue(_TaxInformationRecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuerybytaxLogisticsLocationRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query on the <c>TaxInformation_IN</c> table for the specified locationRecId.
    /// </summary>
    /// <param name="_locationRecId">
    /// Recid of the registration location.
    /// </param>
    /// <returns>
    /// Returns a query object.
    /// </returns>
    public static Query buildQuerybytaxLogisticsLocationRecId(LogisticsLocationRecId _locationRecId)
    {
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource;

        queryBuildDataSource = query.addDataSource(tablenum(TaxInformation_IN));
        queryBuildDataSource.addRange(fieldnum(TaxInformation_IN, RegistrationLocation)).value(queryValue(_locationRecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxInformation_IN</c> table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxInformation_IN</c> table.
    /// </returns>
    public static TaxInformation_IN find(RefRecId            _recId,
                                         boolean             _forupdate        = false,
                                         ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxInformation_IN   taxInformation;

        taxInformation.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxInformation.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxInformation
            where taxInformation.RecId == _recId;

        return taxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultbyLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxInformation_IN</c> table for the specified record id.
    /// </summary>
    /// <param name="_logisticsLocationRecId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxInformation_IN</c> table.
    /// </returns>
    public static TaxInformation_IN findDefaultbyLocation(LogisticsLocationRecId   _logisticsLocationRecId,
                                                          boolean                  _forupdate        = false,
                                                          ConcurrencyModel         _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxInformation_IN taxInformation;

        if (_logisticsLocationRecId)
        {
            taxInformation.selectForUpdate(_forupdate);
            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                taxInformation.concurrencyModel(_concurrencyModel);
            }

            select firstonly taxInformation
                where taxInformation.RegistrationLocation == _logisticsLocationRecId
                    && taxInformation.isPrimary == NoYes::Yes;
        }

        return taxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxWithholdRegNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxInformation_IN</c> table for the specified record id.
    /// </summary>
    /// <param name="_taxInformationRecId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdRegNumbers_IN</c> table.
    /// </returns>
    public static TaxWithholdRegNumbers_IN findTaxWithholdRegNumber(TaxInformationRecId_IN   _taxInformationRecId,
                                                                       boolean             _forupdate        = false,
                                                                       ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdRegNumbers_IN taxWithholdRegNumber;

        taxWithholdRegNumber.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdRegNumber.concurrencyModel(_concurrencyModel);
        }

        taxWithholdRegNumber = TaxWithholdRegNumbers_IN::find(TaxInformation_IN::find(_taxInformationRecId).tan);

        return taxWithholdRegNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// The jump reference.
    /// </summary>
    /// <param name="_recId">
    /// The rec id.
    /// </param>
    /// <param name="_object">
    /// The reference object.
    /// </param>
    public static void jumpRef(RefRecId                    _recId,
                               Object                      _object)
    {
        Args    args = new Args();

        TaxInformation_IN   taxInformation = TaxInformation_IN::find(_recId);

        args.caller(_object);
        args.parmObject(_object);
        args.record(taxInformation);

        new MenuFunction(menuitemdisplaystr(TaxInfoManagementIN), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefLocationAddressForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the location of the address form.
    /// </summary>
    /// <param name="_location">
    /// The jump reference location.
    /// </param>
    /// <param name="_object">
    /// The reference object.
    /// </param>
    public static void jumpRefLocationAddressForm(LogisticsLocationRecId _location,
                                                  Object                 _object)
    {
        Args                   args = new Args();
        LogisticsPostalAddress logisticsAddress = LogisticsPostalAddress::findByLocation(_location);

        args.openMode(OpenMode::View);
        args.caller(_object);
        args.lookupTable(tableNum(LogisticsPostalAddress));
        args.lookupField(fieldnum(LogisticsPostalAddress, RecId));
        args.lookupValue(int642str(logisticsAddress.RecId));
        args.menuItemName(menuitemDisplayStr(LogisticsPostalAddressEdit));
        args.parmEnumType(enumnum(LogisticsLocationAddressActionButtons));
        LogisticsPostalAddressFormHandler::main(args, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// To generate customized lookup when user selects location field.
    /// </summary>
    /// <param name="_formControl">
    /// The control on which to perform lookup.
    /// </param>
    /// <param name="_party">
    /// Show lookup based on the selected party.
    /// </param>
    /// <param name="_roleType">
    /// Show lookup based on the selected role.
    /// </param>
    /// <returns>
    /// Returns a <c>LogisticsLocation</c> buffer.
    /// </returns>
    static public Common locationLookup(FormReferenceControl      _formControl,
                                        DirPartyRecId             _party,
                                        LogisticsLocationRoleType _roleType = LogisticsLocationRoleType::None)
    {
        SysReferenceTableLookup sysTableLookup  = SysReferenceTableLookup::newParameters(tablenum(LogisticsLocation), _formControl);
        Common                  selectedRecord;

        sysTableLookup.addLookupfield(fieldnum(LogisticsLocation, LocationId));
        sysTableLookup.addLookupfield(fieldnum(LogisticsLocation, Description));

        Query query = sysTableLookup.parmQuery(LogisticsLocation::lookupQuery(_party,_roleType));
        QueryBuildDataSource queryBuildDataSource;

        queryBuildDataSource = query.dataSourceTable(tableNum(LogisticsLocation));
        queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(LogisticsPostalAddress));
        queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
        queryBuildDataSource.relations(true);

        str queryRangeStr = DateEffectivenessCheck::queryRange(true, false, false);

        if (queryRangeStr)
        {
            QueryBuildRange qbrValidFrom = queryBuildDataSource.addRange(fieldNum(LogisticsPostalAddress, ValidFrom));

            qbrValidFrom.value(
                strFmt(queryRangeStr,
                    query.dataSourceTable(tableNum(LogisticsPostalAddress)).name(),
                    fieldStr(LogisticsPostalAddress, ValidFrom),
                    fieldStr(LogisticsPostalAddress, ValidTo),
                    DateTimeUtil::toStr(DateTimeUtil::utcNow())));
        }

        selectedRecord = sysTableLookup.performFormLookup();

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     To generate customized lookup when user selects location field.
    /// </summary>
    /// <param name="_formControl">
    ///     The control on which to perform lookup.
    /// </param>
    /// <param name="_registrationlocation">
    ///     Show lookup based on the selected location.
    /// </param>
    /// <returns>
    ///     Returns a <c>TaxInformation_IN</c> buffer.
    /// </returns>
    static public Common lookup(FormReferenceControl        _formControl,
                                recid                       _registrationlocation)
    {
        SysReferenceTableLookup             lookUp;
        Query                               query = new Query();
        QueryBuildDataSource                qbds;

        lookUp = SysReferenceTableLookup::newParameters(tableNum(TaxInformation_IN), _formControl);
        lookUp.addLookupfield(fieldNum(TaxInformation_IN, name));

        qbds = query.addDataSource(tableNum(TaxInformation_IN));
        qbds.addRange(fieldNum(TaxInformation_IN, registrationLocation)).value(queryValue(_registrationlocation));
        lookUp.parmQuery(query);

        return lookUp.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpReferenceTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Look up tax registration number.
    /// </summary>
    /// <param name="_formControl">
    ///     The control on which to perform lookup.
    /// </param>
    /// <param name="_dirPartyLocationRecId">
    ///     Show lookup based on the selected location.
    /// </param>
    /// <param name="_LogisticsLocationRecId">
    ///     Show lookup based on the selected location.
    /// </param>
    /// <returns>
    ///     Returns a <c>TaxRegistration</c> buffer.
    /// </returns>
    public static TaxRegistration lookUpReferenceTaxRegistration(
        FormReferenceControl _formControl, 
        RecId _dirPartyLocationRecId = 0,
        RecId _LogisticsLocationRecId = 0)
    {
        SysReferenceTableLookup             lookUp;
        Query                               query = new Query();
        QueryBuildDataSource                qbdsRegistrationNumber;
        QueryBuildDataSource                qbdsTaxRegistrationLegislationTypes;
        QueryBuildDataSource                qbdsDirPartyLocation;
        QueryBuildDataSource                qbdsTaxRegistrationTypeApplicabilityRule;
        

        lookUp = SysReferenceTableLookup::newParameters(tableNum(TaxRegistration), _formControl);
        lookUp.addLookupfield(fieldNum(TaxRegistration, RegistrationNumber));
        lookUp.addLookupfield(fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule));

        query.validTimeStateDateRange(dateNull(), dateMax());
        qbdsRegistrationNumber = query.addDataSource(tableNum(TaxRegistration));
        qbdsTaxRegistrationLegislationTypes = qbdsRegistrationNumber.addDataSource(tableNum(TaxRegistrationLegislationTypes));
        qbdsTaxRegistrationLegislationTypes.joinMode(JoinMode::InnerJoin);
        qbdsTaxRegistrationLegislationTypes.relations(false);
        qbdsTaxRegistrationLegislationTypes.addLink(
            fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule),
            fieldNum(TaxRegistrationLegislationTypes, TaxRegistrationTypeApplicabilityRule));
        qbdsTaxRegistrationLegislationTypes.addRange(
            fieldNum(TaxRegistrationLegislationTypes, TaxRegistrationTypesList))
            .value(queryValue(TaxRegistrationTypesList::TAXID));
        

        if (_dirPartyLocationRecId)
        {
            qbdsRegistrationNumber.addRange(fieldNum(TaxRegistration, DirPartyLocation)).value(queryValue(_dirPartyLocationRecId));
        }
        // If there is no DirPartyLocation, show all registration numbers of current legal entity addresses.
        else if (_LogisticsLocationRecId)
        {
            CompanyInfo companyInfo = CompanyInfo::find();
            
            qbdsDirPartyLocation = qbdsRegistrationNumber.addDataSource(tableNum(DirPartyLocation));
            qbdsDirPartyLocation.joinMode(JoinMode::InnerJoin);
            qbdsDirPartyLocation.relations(false);
            qbdsDirPartyLocation.addLink(
                fieldNum(TaxRegistration, DirPartyLocation),
                fieldNum(DirPartyLocation, RecId));
            qbdsDirPartyLocation.addRange(fieldNum(DirPartyLocation, Party)).value(queryValue(companyInfo.RecId));
            qbdsDirPartyLocation.addRange(fieldNum(DirPartyLocation, IsPostalAddress)).value(queryValue(NoYes::Yes));
        }
        
        lookUp.parmQuery(query);

        return lookUp.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLocationAndName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find <c>TaxInformation_IN</c> by location recid and tax information name.
    /// </summary>
    /// <param name="_logisticsLocationRecId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_name">
    /// The tax information name.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxInformation_IN</c> table.
    /// </returns>
    public static TaxInformation_IN findByLocationAndName(LogisticsLocationRecId _logisticsLocationRecId,
        TaxInformationName _name, 
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxInformation_IN taxInformation;
    
        if (_logisticsLocationRecId && _name)
        {
            taxInformation.selectForUpdate(_forupdate);
            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                taxInformation.concurrencyModel(_concurrencyModel);
            }
    
            select firstonly taxInformation
                where taxInformation.RegistrationLocation == _logisticsLocationRecId
                    && taxInformation.Name == _name;
        }
    
        return taxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRegistrationNumbersEqual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether or not tax registration numbers are equal between records.
    /// </summary>
    /// <param name = "source">The first tax information record.</param>
    /// <param name = "dest">The second information record.</param>
    /// <returns>True if tax registration numbers are equal; otherwise false.</returns>
    public static boolean taxRegistrationNumbersEqual(TaxInformation_IN source, TaxInformation_IN dest)
    {
        return source.ECCNumber == dest.ECCNumber &&
            source.IECRegistrationNumberTable == dest.IECRegistrationNumberTable &&
            source.ManECCRegistrationNumberTable == dest.ManECCRegistrationNumberTable &&
            source.SalesTaxRegistrationNumber == dest.SalesTaxRegistrationNumber &&
            source.TAN == dest.TAN &&
            source.TIN == dest.TIN &&
            source.TraderECCRegistrationNumberTable == dest.TraderECCRegistrationNumberTable &&
            source.GSTIN == dest.GSTIN &&
            source.GSTTransNumSeqGroup_IN == dest.GSTTransNumSeqGroup_IN &&
            source.TaxID == dest.TaxID;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<DeveloperDocumentation>@GLS63780</DeveloperDocumentation>
	<FormRef>TaxRegistrationNumberTable_IN</FormRef>
	<Label>@SYS33614</Label>
	<TitleField1>Name</TitleField1>
	<TitleField2>RegistrationLocation</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Tax</Modules>
	<ReplacementKey>Name</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegistrationLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPrimary</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegistrationLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customs</Name>
			<Label>@GLS5007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IECRegistrationNumberTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Excise</Name>
			<Label>@GLS5005</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Range</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Division</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ManECCRegistrationNumberTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TraderECCRegistrationNumberTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Commissionarate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExciseLTUCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NameAndDescription</Name>
			<Label>@SYS332483</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsPrimary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesTaxRegistrationNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceTax</Name>
			<Label>@GLS5006</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>STCRegistrationNumberTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VAT</Name>
			<Label>@GLS5004</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TIN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTax</Name>
			<Label>@SYS7372</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TAN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GST</Name>
			<Label>@TaxGST:GST</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GSTIN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GSTTransNumSeqGroup_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@SYS7399</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxID</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Commissionarate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Commissionarate_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Division</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Division_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ECCNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationNumberRecId_IN</ExtendedDataType>
			<Label>@GLS63767</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExciseLTUCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ExciseLTUCode_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IECRegistrationNumberTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationNumberRecId_IN</ExtendedDataType>
			<Label>@GLS5100</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPrimary</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS80168</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ManECCRegistrationNumberTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationNumberRecId_IN</ExtendedDataType>
			<Label>@GLS63164</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxInformationName</ExtendedDataType>
			<Label>@SYS335041</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Range</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Range_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RegistrationLocation</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesTaxRegistrationNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationNumberRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>STCRegistrationNumberTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationNumberRecId_IN</ExtendedDataType>
			<Label>@GLS5098</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TAN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdRegNumberRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TIN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationNumberRecId_IN</ExtendedDataType>
			<Label>@GLS5096</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TraderECCRegistrationNumberTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationNumberRecId_IN</ExtendedDataType>
			<Label>@GLS63166</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>GSTIN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationNumberRecId_IN</ExtendedDataType>
			<HelpText>@TaxGST:HelpTextOfGSTIN</HelpText>
			<Label>@TaxGST:GSTINGDIUID</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>GSTTransNumSeqGroup_IN</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@TaxGST:GSTTransNumSeqGroupForIndia</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@SYS969</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LocationPrimaryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RegistrationLocation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsPrimary</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Name</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RegistrationLocation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ECCNumber</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxRegistrationNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistrationNumbers_IN_6</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistrationNumbers_IN_6_TaxInformation_IN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ECCNumber</Name>
					<Field>ECCNumber</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IECRegistrationNumberTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxRegistrationNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistrationNumbers_IN_4</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistrationNumbers_IN_4_TaxInformation_IN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IECRegistrationNumberTable</Name>
					<Field>IECRegistrationNumberTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ManECCRegistrationNumberTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxRegistrationNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistrationNumbers_IN_2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistrationNumbers_IN_2_TaxInformation_IN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ManECCRegistrationNumberTable</Name>
					<Field>ManECCRegistrationNumberTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RegistrationLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsLocation_TaxInformation_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RegistrationLocation</Name>
					<Field>RegistrationLocation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTaxRegistrationNumber</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxRegistrationNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistrationNumbers_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistrationNumbers_IN_TaxInformation_IN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesTaxRegistrationNumber</Name>
					<Field>SalesTaxRegistrationNumber</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>STCRegistrationNumberTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxRegistrationNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistrationNumbers_IN_5</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistrationNumbers_IN_5_TaxInformation_IN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>STCRegistrationNumberTable</Name>
					<Field>STCRegistrationNumberTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxWithholdRegNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdRegNumbers_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdRegNumbers_IN_TaxInformation_IN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TAN</Name>
					<Field>TAN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TIN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxRegistrationNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistrationNumbers_IN_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistrationNumbers_IN_1_TaxInformation_IN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TIN</Name>
					<Field>TIN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TraderECCRegistrationNumberTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxRegistrationNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistrationNumbers_IN_3</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistrationNumbers_IN_3_TaxInformation_IN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TraderECCRegistrationNumberTable</Name>
					<Field>TraderECCRegistrationNumberTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>GSTIN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxRegistrationNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistrationNumbers_IN_7</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistrationNumbers_IN_7_TaxInformation_IN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GSTIN</Name>
					<Field>GSTIN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGSTTransNumSeqGroup_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxGSTTransNumSeqGroup_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GSTTransNumSeqGroup_IN</Name>
					<Field>GSTTransNumSeqGroup_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxID</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxRegistration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistration_TaxInformation_IN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxID</Name>
					<Field>TaxID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>