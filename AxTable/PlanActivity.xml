<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlanActivity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PlanActivity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>areServicesAssociated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the activity have services associated
    /// </summary>
    /// <returns>
    /// true if the activity have services associated, otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean areServicesAssociated()
    {
        PlanActivityService     planActivityService;

        select firstonly RecId from planActivityService
            where planActivityService.PlanActivity == this.RecId;

        return (planActivityService.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calendarId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the calendar for the activity.
    /// </summary>
    /// <param name="_transDate">
    ///    The date for which to find the calendar.
    /// </param>
    /// <returns>
    ///    The calendar for the activity.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CalendarId calendarId(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        PlanActivityResourceRequirement     planActivityResourceRequirement;
        PlanActivityLocation                planActivityLocation;
        CalendarId  calendarId;

        // find resource requirement of current activity, if type is process or operate
        if (this.PlanActivityType == PlanActivityType::Process ||
            this.PlanActivityType == PlanActivityType::Operate)
        {
            planActivityResourceRequirement = this.planActivityResourceRequirement();

            // take calendar from resource requirement
            if (planActivityResourceRequirement)
            {
                calendarId = planActivityResourceRequirement.calendarId(_transDate);
            }
        }

        //take calendar from location
        if (!calendarId)
        {
            planActivityLocation = this.planActivityLocation();
            if (!planActivityLocation)
            {
                if (this.PlanActivityType == PlanActivityType::Process)
                {
                    planActivityLocation = this.nextLevelPlanActivityLocation(PlanActivityType::Operate);
                }
                else
                {
                    planActivityLocation = this.nextLevelPlanActivityLocation(PlanActivityType::Pick);
                }
            }
            if (planActivityLocation)
            {
                calendarId = InventLocation::find(planActivityLocation.InventLocationId).ReqCalendarId;
            }
        }

        return calendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>LegalEntity</c> field is valid.
    /// </summary>
    /// <returns>
    /// true if the field value is valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkLegalEntity()
    {
        boolean         result        = true;
        PlanReference   planReference = this.planReference();

        if (   !this.LegalEntity
            || this.LegalEntity != planReference.LegalEntity)
        {
            result = checkFailed(strFmt("@SYS332719",
                                 this.PlanActivityId,
                                 planReference.PlanName));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        PlanActivityRelationship    planActivityRelationship;
        PlanActivity                planActivity;
        PlanConstraint              planConstraint;

        ttsbegin;
        // remove from cache
        PlanActivityNextLevelCache::construct().remove(this);
        PlanActivityNextLevelCache::construct().remove(this.prevLevelPlanActivity().RecId);
        PlanActivityPrevLevelCache::construct().remove(this);

        // delete the current activity
        super();

        // for aggregate activities - we have to clean up next level
        if (   this.PlanActivityType == PlanActivityType::Process
            || this.PlanActivityType == PlanActivityType::Transfer)
        {
            delete_from planActivity
                where planActivity.PlanActivityType != PlanActivityType::Process
                   && planActivity.PlanActivityType != PlanActivityType::Transfer
                exists join planActivityRelationship
                    where planActivityRelationship.DependentPlanActivity   == planActivity.RecId
                       && planActivityRelationship.IndependentPlanActivity == this.RecId
                exists join planConstraint
                    where planActivityRelationship.Constraint == planConstraint.RecId
                       && planConstraint.ConstraintType       == ConstraintTypes::Aggregation;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>downstreamPlanActivities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the set of activities that are directly connected to the current activity in the plan
    /// graph.
    /// </summary>
    /// <param name="_plan">
    /// The record ID of the <c>Plan</c> record.
    /// </param>
    /// <returns>
    /// A <c>Set</c> of the <c>PlanActivity</c> records that are directly connected to the current activity.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Set downstreamPlanActivities(PlanRefRecId _plan)
    {
        PlanPlanActivity            planPlanActivity;
        PlanActivityRelationship    planActivityRelationship;
        PlanConstraint              planConstraint;

        Set childrenActivities = new Set(Types::Int64);

        if (_plan != 0)
        {
            while select PlanActivity from planPlanActivity
                    where planPlanActivity.Plan         == _plan
                exists join planActivityRelationship
                    where planActivityRelationship.IndependentPlanActivity  == this.RecId
                       && planActivityRelationship.DependentPlanActivity    == planPlanActivity.PlanActivity
                exists join planConstraint
                    where planConstraint.RecId          == planActivityRelationship.Constraint
                       && planConstraint.ConstraintType == ConstraintTypes::Sequence
            {
                childrenActivities.add(planPlanActivity.PlanActivity);
            }
        }

        return childrenActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActivityConstraintValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds <c>PlanSequenceConstraintValue</c> for the two dependent activities
    /// </summary>
    /// <param name="_dependentActivity">
    /// Record with dependent <c>PlanActivity</c>
    /// </param>
    /// <returns>
    /// A record in the <c>PlanSequenceConstraintValue</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanSequenceConstraintValue findActivityConstraintValue(PlanActivity _dependentActivity)
    {
        PlanActivityRelationship    planActivityRelationship;
        PlanConstraint              planConstraint;

        select firstonly RecId from planConstraint
        exists join planActivityRelationship
        where planActivityRelationship.IndependentPlanActivity  == this.RecId
            && planActivityRelationship.DependentPlanActivity   == _dependentActivity.RecId
            && planConstraint.RecId == planActivityRelationship.Constraint;

        return planConstraint.value(ConstraintRoleTypes::Minimum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// A method for obtaining the vendor account that manages the transfer activity.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The kanbanJob for which we need to find a vendor.
    /// </param>
    /// <param name="_cacheFoundServices">
    /// The flag indicates if the <c>PlanActivityService</c> records found as part of the search
    /// should be cached or not.
    /// </param>
    /// <returns>
    /// A vendor account.
    /// </returns>
    private VendAccount getVendorTransfer(KanbanJob _kanbanJob, boolean _cacheFoundServices)
    {
        VendAccount result;
        TMSCarrier tmsCarrier;

        switch (this.FreightedBy)
        {
            case WMSFreightedBy::Carrier:
                tmsCarrier = TMSCarrier::find(PlanActivityService::findKanbanJob(_kanbanJob, _cacheFoundServices).CarrierCode);
                result = tmsCarrier.VendorCode;
                break;

            case WMSFreightedBy::Recipient:
                result = InventLocation::find(this.receiptLocation().InventLocationId).VendAccount;
                break;

            case WMSFreightedBy::Shipper:
                result = InventLocation::find(this.issueLocation().InventLocationId).VendAccount;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNextLevelActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the specified <c>PlanActivity</c> record is a dependent activity in an aggregation
    ///    relationship with the current record.
    /// </summary>
    /// <param name="_planActivity">
    ///    The <c>PlanActivity</c> record to test.
    /// </param>
    /// <returns>
    ///    true if the <c>PlanActivity</c> is dependent in an aggregation relationship with the current
    ///    record; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean hasNextLevelActivity(PlanActivity _planActivity)
    {
        PlanActivityRelationship    planActivityRelationship;
        PlanConstraint              planConstraint;

        if (   this.RecId
            && _planActivity.RecId)
        {
            select RecId from planActivityRelationship
                where planActivityRelationship.IndependentPlanActivity == this.RecId
                   && planActivityRelationship.DependentPlanActivity   == _planActivity.RecId
                exists join planConstraint
                        where planConstraint.RecId          == planActivityRelationship.Constraint
                           && planConstraint.ConstraintType == ConstraintTypes::Aggregation;
        }

        return planActivityRelationship.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPlanReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the fields in the current table buffer from a <c>PlanReference</c> record.
    /// </summary>
    /// <param name="_planReference">
    ///    The <c>PlanReference</c> record to use to initialize fields; optional.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromPlanReference(PlanReference _planReference = this.planReference())
    {
        this.LegalEntity = _planReference.LegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.FreightedBy = WMSFreightedBy::Shipper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the current <c>PlanActivity</c> buffer into the database.
    /// </summary>
    public void insert()
    {
        this.initFromPlanReference();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAtomic</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current <c>PlanActivity</c> record is an atomic activity.
    /// </summary>
    /// <returns>
    ///    true if the plan activity is atomic; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isAtomic()
    {
        return this.PlanActivityType     == PlanActivityType::Move
                || this.PlanActivityType == PlanActivityType::Operate
                || this.PlanActivityType == PlanActivityType::Pick
                || this.PlanActivityType == PlanActivityType::Receive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubcontracted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the activity is being subcontracted to a vendor.
    /// </summary>
    /// <returns>
    /// true if the activity is subcontracted, otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isSubcontracted()
    {
        boolean result;

        changecompany(this.legalEntityDataAreaId())
        {
            result =    (this.PlanActivityType == PlanActivityType::Transfer
                     &&  this.FreightedBy      == WMSFreightedBy::Carrier)
                     || this.vendor()          != '';
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issueLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the issue <c>PlanActivityLocation</c> record that is related to the current record.
    /// </summary>
    /// <returns>
    ///    A <c>PlanActivityLocation</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivityLocation issueLocation()
    {
        PlanActivityLocation    planActivityLocation;

        if (this.PlanActivityType != PlanActivityType::Pick)
        {
            planActivityLocation = this.nextLevelPlanActivityLocation(PlanActivityType::Pick);
        }

        if (!planActivityLocation)
        {
            planActivityLocation = this.planActivityLocation();
        }

        return planActivityLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedInActivePlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current <c>PlanActivity</c> record is used in any active plan.
    /// </summary>
    /// <returns>
    ///    true if the plan activity is used in an active plan; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isUsedInActivePlan()
    {
        Plan                plan;
        PlanPlanActivity    planPlanActivity;

        if (this.RecId)
        {
            select firstonly RecId from plan
                where plan.Status == PlanStatus::Active
                exists join planPlanActivity
                    where planPlanActivity.Plan == plan.RecId
                       && planPlanActivity.PlanActivity == this.RecId;
        }

        return plan.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedInDependentRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current <c>PlanActivity</c> record is used as a dependent activity in a
    ///    relationship.
    /// </summary>
    /// <returns>
    ///    true if the plan activity is used as a dependent activity in a relationship; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Aggregation relations are not considered.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isUsedInDependentRelation()
    {
        PlanActivityRelationship    planActivityRelationship;
        PlanActivity                planActivity;
        PlanConstraint              planConstraint;

        if (this.RecId)
        {
            select firstonly RecId from planActivityRelationship
                where planActivityRelationship.DependentPlanActivity == this.RecId
                exists join planActivity
                    where planActivity.RecId             == planActivityRelationship.IndependentPlanActivity
                       && (planActivity.PlanActivityType == PlanActivityType::Process
                       ||  planActivity.PlanActivityType == PlanActivityType::Transfer)
                notexists join planConstraint
                    where planConstraint.RecId          == planActivityRelationship.Constraint
                       && planConstraint.ConstraintType == ConstraintTypes::Aggregation;
        }

        return planActivityRelationship.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedInIndependentRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current <c>PlanActivity</c> record is used as an independent activity in a
    ///    relationship.
    /// </summary>
    /// <returns>
    ///    true if the plan activity is used as an independent activity in a relationship; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Aggregation relations are not considered.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isUsedInIndependentRelation()
    {
        PlanActivityRelationship    planActivityRelationship;
        PlanActivity                planActivity;
        PlanConstraint              planConstraint;

        if (this.RecId)
        {
            select firstonly RecId from planActivityRelationship
                where planActivityRelationship.IndependentPlanActivity == this.RecId
                exists join planActivity
                    where planActivity.RecId             == planActivityRelationship.DependentPlanActivity
                       && (planActivity.PlanActivityType == PlanActivityType::Process
                       ||  planActivity.PlanActivityType == PlanActivityType::Transfer)
                notexists join planConstraint
                    where planConstraint.RecId          == planActivityRelationship.Constraint
                       && planConstraint.ConstraintType == ConstraintTypes::Aggregation;
        }

        return planActivityRelationship.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>legalEntityDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>DataAreaId</c> value that is related to the current record.
    /// </summary>
    /// <returns>
    /// The <c>DataAreaId</c> value that is related to the current record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SelectableDataArea legalEntityDataAreaId()
    {
        SelectableDataArea  dataArea;

        if (this.LegalEntity)
        {
            dataArea = CompanyInfo::findRecId(this.LegalEntity).DataArea;
        }
        else
        {
            dataArea = CompanyInfo::find().DataArea;
        }

        return dataArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPlanActivityTimes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>Map</c> object of the <c>PlanActivity</c> and <c>PlanActivityTime</c> records.
    /// </summary>
    /// <returns>
    /// A <c>Map</c> object that maps plan activities to plan activity times.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map mapPlanActivityTimes()
    {
        PlanActivity                dependentPlanActivity;
        PlanActivityRelationship    planActivityRelationship;
        PlanConstraint              planConstraint;
        PlanActivityTime            planActivityTime, planActivityTimeLocal;
        Map                         mapPlanActivityTimes = new Map(Types::Record,Types::Record);

        planActivityTime = this.planActivityTime();
        if (planActivityTime)
        {
            mapPlanActivityTimes.insert(this,planActivityTime);
        }

        while select dependentPlanActivity
            where  dependentPlanActivity.PlanActivityType == PlanActivityType::Move
                || dependentPlanActivity.PlanActivityType == PlanActivityType::Transfer
                || dependentPlanActivity.PlanActivityType == PlanActivityType::Process
                || dependentPlanActivity.PlanActivityType == PlanActivityType::Operate
            exists join planActivityRelationship
                where planActivityRelationship.IndependentPlanActivity == this.RecId
                   && planActivityRelationship.DependentPlanActivity   == dependentPlanActivity.RecId
            exists join planConstraint
                where planConstraint.RecId          == planActivityRelationship.Constraint
                   && planConstraint.ConstraintType == ConstraintTypes::Aggregation
        {
            planActivityTime = dependentPlanActivity.planActivityTime();

            if (planActivityTime)
            {
                mapPlanActivityTimes.insert(dependentPlanActivity,planActivityTime);
            }
        }

        return mapPlanActivityTimes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLevelPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the next level <c>PlanActivity</c> record of the specified type for the current record.
    /// </summary>
    /// <param name="_planActivityType">
    ///    A <c>PlanActivityType</c> enumeration value.
    /// </param>
    /// <param name="_useCache">
    ///    A Boolean value that indicates if the cache must be used to find the next level activity.
    /// </param>
    /// <returns>
    ///    A <c>PlanActivity</c> record.
    /// </returns>
    /// <remarks>
    ///    If more than one activity of the same type are present, only the first occurrence is returned.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivity nextLevelPlanActivity(
        PlanActivityType _planActivityType,
        boolean          _useCache = true)
    {
        PlanActivityRelationship    planActivityRelationship;
        PlanActivity                planActivity;
        PlanConstraint              planConstraint;

        if (this.RecId)
        {
            if (_useCache)
            {
                planActivity = PlanActivityNextLevelCache::construct().nextLevelPlanActivity(this.RecId,_planActivityType,this);
            }
            else
            {
                select firstonly planActivity
                    where planActivity.PlanActivityType == _planActivityType
                    exists join planActivityRelationship
                        where planActivityRelationship.IndependentPlanActivity == this.RecId
                           && planActivityRelationship.DependentPlanActivity   == planActivity.RecId
                    exists join planConstraint
                        where planConstraint.RecId          == planActivityRelationship.Constraint
                           && planConstraint.ConstraintType == ConstraintTypes::Aggregation;
            }
        }

        return planActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLevelPlanActivityCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Counts the next level <c>PlanActivity</c> records of the specified type for the current record.
    /// </summary>
    /// <param name="_planActivityType">
    ///    A <c>PlanActivityType</c> enumeration value.
    /// </param>
    /// <returns>
    ///    The number of <c>PlanActivity</c> records.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivityRefRecId nextLevelPlanActivityCount(PlanActivityType _planActivityType)
    {
        PlanActivityRelationship    planActivityRelationship;
        PlanActivity                planActivity;
        PlanConstraint              planConstraint;

        if (this.RecId)
        {
            select count(RecId) from planActivity
                where planActivity.PlanActivityType == _planActivityType
                exists join planActivityRelationship
                    where planActivityRelationship.IndependentPlanActivity == this.RecId
                       && planActivityRelationship.DependentPlanActivity   == planActivity.RecId
                exists join planConstraint
                    where planConstraint.RecId          == planActivityRelationship.Constraint
                       && planConstraint.ConstraintType == ConstraintTypes::Aggregation;
        }

        return planActivity.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLevelPlanActivityLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the next level <c>PlanActivityLocation</c> record of the specified type for the current
    ///    record.
    /// </summary>
    /// <param name="_planActivityType">
    ///    A <c>PlanActivityType</c> enumeration value.
    /// </param>
    /// <returns>
    ///    A <c>PlanActivityLocation</c> record.
    /// </returns>
    /// <remarks>
    ///    If more than one activity of the same type are present, only the first occurrence is returned.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivityLocation nextLevelPlanActivityLocation(PlanActivityType _planActivityType)
    {
        PlanActivityLocation        planActivityLocation;
        PlanActivityRelationship    planActivityRelationship;
        PlanActivity                planActivity;
        PlanConstraint              planConstraint;

        select firstonly planActivityLocation
            exists join planActivity
                where planActivity.RecId            == planActivityLocation.PlanActivity
                   && planActivity.PlanActivityType == _planActivityType
            exists join planActivityRelationship
                where planActivityRelationship.IndependentPlanActivity == this.RecId
                   && planActivityRelationship.DependentPlanActivity   == planActivity.RecId
            exists join planConstraint
                where planConstraint.RecId          == planActivityRelationship.Constraint
                   && planConstraint.ConstraintType == ConstraintTypes::Aggregation;

        return planActivityLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onHandUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the value of the <c>OnHandUpdate</c> field for the specified activity type that is
    ///    related to the current record.
    /// </summary>
    /// <param name="_planActivityType">
    ///    A <c>PlanActivityType</c> enumeration value.
    /// </param>
    /// <returns>
    ///    A <c>NoYes</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    If more than one activity of the same type are present, only the first occurrence is returned.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes onHandUpdate(PlanActivityType _planActivityType)
    {
        PlanActivity    planActivity;

        if (this.PlanActivityType != _planActivityType)
        {
            planActivity = this.nextLevelPlanActivity(_planActivityType);
        }

        return planActivity.RecId ? planActivity.OnHandUpdate : this.OnHandUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickingLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>LeanProdFlowActivityPickingLocation</c> record that is the picking location for given
    ///    item.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID of the item for which to find the location.
    /// </param>
    /// <returns>
    ///    A <c>LeanProdFlowActivityPickingLocation</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanProdFlowActivityPickingLocation pickingLocation(ItemId _itemId)
    {
        LeanProdFlowActivityPickingLocation pickingLocation;
        LeanProductionFlowActivity          leanProductionFlowActivity;
        PlanActivity                        planActivity = this;

        if (this.PlanActivityType != PlanActivityType::Pick)
        {
            planActivity = this.nextLevelPlanActivity(PlanActivityType::Pick);
        }

        select firstonly pickingLocation
            where pickingLocation.ItemId == _itemId
            exists join leanProductionFlowActivity
                where leanProductionFlowActivity.PlanActivity == planActivity.RecId;

        return pickingLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planActivityLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>PlanActivityLocation</c> record that is related to the current <c>PlanActivity</c>
    ///    record.
    /// </summary>
    /// <returns>
    ///    A <c>PlanActivityLocation</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivityLocation planActivityLocation()
    {
        return PlanActivityLocation::findPlanActivity(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>planActivityResourceRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>PlanActivityResourceRequirement</c> record that is related to the current
    ///    <c>PlanActivity</c> record.
    /// </summary>
    /// <param name="_checkNextLevel">
    ///    A Boolean value that indicates if the next level activity must be included.
    /// </param>
    /// <returns>
    ///    A <c>PlanActivityResourceRequirement</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivityResourceRequirement planActivityResourceRequirement(boolean _checkNextLevel = true)
    {
        PlanActivityResourceRequirement     planActivityResourceRequirement;
        PlanActivityResourceRequirement     nextLevelPlanActivityResourceRequirement;

        if (   this.PlanActivityType == PlanActivityType::Process
            && _checkNextLevel)
        {
            nextLevelPlanActivityResourceRequirement = this.nextLevelPlanActivity(PlanActivityType::Operate).planActivityResourceRequirement();
        }

        if (   this.PlanActivityType  == PlanActivityType::Operate
            || (this.PlanActivityType == PlanActivityType::Process
            &&  !nextLevelPlanActivityResourceRequirement))
        {
            planActivityResourceRequirement = PlanActivityResourceRequirement::findPlanActivity(this.RecId);
        }

        return nextLevelPlanActivityResourceRequirement ? nextLevelPlanActivityResourceRequirement : planActivityResourceRequirement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planActivityTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>PlanActivityTime</c> record that is related to the current <c>PlanActivity</c> record.
    /// </summary>
    /// <returns>
    ///    A <c>PlanActivityLocation</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivityTime planActivityTime()
    {
        PlanActivityTime    planActivityTime;

        planActivityTime = PlanActivityTime::find(this.ActivityTime);
        if (   !planActivityTime
            && (this.PlanActivityType == PlanActivityType::Process
            ||  this.PlanActivityType == PlanActivityType::Operate))
        {
            planActivityTime = PlanActivityTime::find(this.planActivityResourceRequirement(false).PlanActivityTime);
        }

        return planActivityTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>PlanReference</c> record that is related to the current <c>PlanActivity</c> record.
    /// </summary>
    /// <returns>
    ///    A <c>PlanReference</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanReference planReference()
    {
        PlanReference       planReference;

        if (this.PlanReference)
        {
            planReference = PlanReference::find(this.PlanReference);
        }

        return planReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planReferenceName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the plan reference that is specified in the current record buffer.
    /// </summary>
    /// <returns>
    ///    A <c>PlanName</c> string value if a plan reference is specified in the buffer; otherwise, an empty
    ///    string.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display PlanName planReferenceName()
    {
        PlanName    planName;

        if (this.PlanReference)
        {
            planName = PlanReference::find(this.PlanReference).PlanName;
        }

        return planName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevLevelPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the previous level <c>PlanActivity</c> record for the current record.
    /// </summary>
    /// <param name="_useCache">
    /// A Boolean value that specifies whether the cache can be used for lookup; optional.
    /// </param>
    /// <returns>
    /// A <c>PlanActivity</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivity prevLevelPlanActivity(boolean _useCache = true)
    {
        PlanActivityRelationship    planActivityRelationship;
        PlanActivity                planActivity;
        PlanConstraint              planConstraint;

        if (this.RecId)
        {
            if (_useCache)
            {
                planActivity = PlanActivityPrevLevelCache::construct().prevLevelPlanActivity(this.RecId,this);
            }
            else
            {
                select firstonly planActivity
                    where planActivity.PlanActivityType == PlanActivityType::Process
                       || planActivity.PlanActivityType == PlanActivityType::Transfer
                    exists join planActivityRelationship
                        where planActivityRelationship.DependentPlanActivity   == this.RecId
                           && planActivityRelationship.IndependentPlanActivity == planActivity.RecId
                    exists join planConstraint
                        where planConstraint.RecId          == planActivityRelationship.Constraint
                           && planConstraint.ConstraintType == ConstraintTypes::Aggregation;
            }
        }

        return planActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the receipt <c>PlanActivityLocation</c> record that is related to the current record.
    /// </summary>
    /// <returns>
    /// A <c>PlanActivityLocation</c> record.
    /// </returns>
    public PlanActivityLocation receiptLocation()
    {
        PlanActivityLocation        planActivityLocation;

        if (this.PlanActivityType != PlanActivityType::Receive)
        {
            planActivityLocation = this.nextLevelPlanActivityLocation(PlanActivityType::Receive);
        }

        if (!planActivityLocation)
        {
            planActivityLocation = this.planActivityLocation();
        }

        return planActivityLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the current record in the <c>PlanActivity</c> table.
    /// </summary>
    public void update()
    {
        super();

        // remove from cache
        PlanActivityNextLevelCache::construct().remove(this);
        PlanActivityNextLevelCache::construct().remove(this.prevLevelPlanActivity().RecId);
        PlanActivityPrevLevelCache::construct().remove(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current <c>PlanActivity</c> record can be deleted.
    /// </summary>
    /// <param name="_silent">
    /// A Boolean value that indicates whether warnings should be given in the infolog; optional.
    /// </param>
    /// <returns>
    /// true if the record can be deleted; otherwise, false .
    /// </returns>
    public boolean validateDelete(
        boolean _silent = !FormDataUtil::isFormDataSource(this)
        )
    {
        PlanActivity    planActivity;
        boolean         result = super();

        if (result)
        {
            if (!_silent)
            {
                // do not allow to delete the last pick activity
                if (this.PlanActivityType == PlanActivityType::Pick)
                {
                    planActivity = this.prevLevelPlanActivity(false);

                    if (   planActivity
                        && planActivity.nextLevelPlanActivityCount(PlanActivityType::Pick) == 1)
                    {
                        warning("@GLS180536");
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean result;

        result =    super()
                 && this.checkLegalEntity();

        if (   result
            && (this.PlanActivityType != PlanActivityType::Transfer
            &&  this.FreightedBy))
        {
            // Freighted by must only be specified for transfer activities
            result = checkFailed("@SYS331567");
        }

        if (   result
            &&  (this.PlanActivityType != PlanActivityType::Transfer
            &&  this.AutoCompleteKanban))
        {
            result = checkFailed("@WAX:KanbanAutoCompleteValidation");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method for obtaining the vendor account that manages the activity.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The kanbanJob for which we need to find a vendor.
    /// </param>
    /// <param name="_cacheFoundServices">
    /// The flag indicates if the <c>PlanActivityService</c> records found as part of the search
    /// should be cached or not.
    /// </param>
    /// <returns>
    /// A vendor account if the cell is subcontracted, otherwise an empty string.
    /// </returns>
    /// <remarks>
    /// The kanban job parameter is only used in case the activity is Transport and
    /// the FreightedBy field is set to Carrier.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display VendAccount vendor(
        KanbanJob _kanbanJob = null,
        boolean   _cacheFoundServices = false)
    {
        VendAccount result;

        switch (this.PlanActivityType)
        {
            case PlanActivityType::Process:
            result = WrkCtrResourceGroup::vendorManagingResourceGroup(this.wrkCtrResourceGroup().WrkCtrId);
            break;

            case PlanActivityType::Transfer:
            result = this.getVendorTransfer(_kanbanJob, _cacheFoundServices);
            break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrkCtrResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the <c>WrkCtrResourceGroup</c> record that is related to the current <c>PlanActivity</c>
    ///    record.
    /// </summary>
    /// <returns>
    ///    A <c>WrkCtrResourceGroup</c> record; otherwise, an empty table buffer.
    /// </returns>
    /// <remarks>
    ///    Resource groups may be related to process and operate activities.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public WrkCtrResourceGroup wrkCtrResourceGroup()
    {
        return this.planActivityResourceRequirement().wrkCtrResourceGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFreightedBy</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static WMSFreightedBy defaultFreightedBy(InventLocationId _fromInventLocationId, InventLocationId _toInventLocationId)
    {
        WMSFreightedBy  defaultFreightedBy;

        if (InventLocation::find(_fromInventLocationId).InventSiteId !=
            InventLocation::find(_toInventLocationId).InventSiteId)
        {
            defaultFreightedBy = WMSFreightedBy::Carrier;
        }
        else
        {
            defaultFreightedBy = WMSFreightedBy::Shipper;
        }

        return defaultFreightedBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PlanActivity</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RecId _recId)
    {
        return _recId &&
               (select firstonly RecId from planActivity
                    where planActivity.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PlanActivity</c> table.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the <c>PlanActivity</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PlanActivity</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanActivity find(
        PlanActivityRefRecId _refRecId,
        boolean              _forUpdate = false)
    {
        PlanActivity    planActivity;

        if (_refRecId)
        {
            planActivity.selectForUpdate(_forUpdate);

            select firstonly planActivity
                where planActivity.RecId == _refRecId;
        }

        return planActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlanActivityId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PlanActivity</c> table.
    /// </summary>
    /// <param name="_planActivityId">
    ///    The plan activity ID of the <c>PlanActivity</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PlanActivity</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanActivity findPlanActivityId(
        PlanActivityId _planActivityId,
        boolean        _forUpdate = false)
    {
        PlanActivity    planActivity;

        if (_planActivityId)
        {
            planActivity.selectForUpdate(_forUpdate);

            select firstonly planActivity
                where planActivity.PlanActivityId == _planActivityId;
        }

        return planActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlanActivityName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PlanActivity</c> table.
    /// </summary>
    /// <param name="_planRefRecId">
    ///    The plan record ID of the <c>PlanActivity</c> record to find.
    /// </param>
    /// <param name="_planActivityName">
    ///    The plan activity name of the <c>PlanActivity</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PlanActivity</c> table; otherwise, an empty record.
    /// </returns>
    public static PlanActivity findPlanActivityName(
        PlanReferenceRefRecId   _planRefRecId,
        PlanActivityName        _planActivityName,
        boolean                 _forUpdate = false)
    {
        PlanActivity     planActivity;
        PlanPlanActivity planPlanActivity;

        if (   _planRefRecId
            && _planActivityName)
        {
            planActivity.selectForUpdate(_forUpdate);

            select firstonly planActivity
                    where planActivity.Name          == _planActivityName
                exists join planPlanActivity
                    where planPlanActivity.PlanActivity == planActivity.RecId
                       && planPlanActivity.Plan         == _planRefRecId;
        }

        return planActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the connect to main table action for a given plan activity and caller.
    /// </summary>
    /// <param name="_planActivity">
    /// A <c>PlanActivity</c> record.
    /// </param>
    /// <param name="_caller">
    /// The calling object.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void jumpRefPlanActivity(
        PlanActivity _planActivity,
        Object       _caller)
    {
        Args    args;
        FormRun formRun;

        args = new Args(formStr(PlanActivityDetails));
        args.caller(_caller);
        args.record(_planActivity);

        // Menu item info will be used by security framework, when setting access rights to form datasources
        args.menuItemType(MenuItemType::Display);
        args.menuItemName(menuitemDisplayStr(PlanActivityDetails));

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPlanActivityLeanDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a lookup form for selecting a replaced kanban rule.
    /// </summary>
    /// <param name="_caller">
    /// The control that is requesting a lookup to be shown.
    /// </param>
    /// <param name="_contract">
    /// The <c>LeanDocumentDataContract</c> object that contains the filter criteria and the result.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void lookupPlanActivityLeanDocument(
        Object                      _caller,
        LeanDocumentDataContract    _contract)
    {
        Args                args;
        FormRun             formRun;

        args = new Args();
        args.name(formStr(LeanDocumentPlanActivityLookup));
        args.caller(_caller);
        args.parmObject(_contract);

        if (_caller != null)
        {
            formRun = classfactory.formRunClass(args);
            formRun.init();
            _caller.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPlanActivityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup filtered by <c>PlanActvityType</c> enum values.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object that the lookup will be bound to.
    /// </param>
    /// <param name="_containerPlanActivityType">
    /// A container that contains <c>PlanActvityType</c> enum values; optional.
    /// </param>
    /// <param name="_planReferenceRefRecId">
    /// A record ID to the <c>PlanReference</c> table; optional.
    /// </param>
    /// <param name="_legalEntity">
    /// A legal entity; optional.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void lookupPlanActivityType(
        FormControl           _formControl,
        container             _containerPlanActivityType = conNull(),
        PlanReferenceRefRecId _planReferenceRefRecId     = 0,
        LegalEntity           _legalEntity               = CompanyInfo::current())
    {
        Query                   query  = new Query();
        QueryBuildDataSource    qbdsPlanActivity;
        SysTableLookup          sysTableLookup;
        int                     i;

        if (_formControl)
        {
            sysTableLookup   = SysTableLookup::newParameters (tableNum(PlanActivity),_formControl);
            qbdsPlanActivity = query.addDataSource(tableNum(PlanActivity));

            if (_legalEntity)
            {
                qbdsPlanActivity.addRange(fieldNum(PlanActivity,LegalEntity)).value(queryValue(_legalEntity));
            }

            if (_planReferenceRefRecId)
            {
                qbdsPlanActivity.addRange(fieldNum(PlanActivity,PlanReference)).value(queryValue(_planReferenceRefRecId));
            }

            if (_containerPlanActivityType)
            {
                for (i=1;i<=conLen(_containerPlanActivityType);i++)
                {
                    qbdsPlanActivity.addRange(fieldNum(PlanActivity,PlanActivityType)).value(queryValue(conPeek(_containerPlanActivityType,i)));
                }
            }

            sysTableLookup.addLookupfield(fieldNum(PlanActivity,PlanActivityId));
            sysTableLookup.addLookupfield(fieldNum(PlanActivity,Name));
            sysTableLookup.addLookupfield(fieldNum(PlanActivity,PlanActivityType));
            sysTableLookup.addLookupfield(fieldNum(PlanActivity,PlanReference));
            sysTableLookup.setLabel("@SYS314196");
            sysTableLookup.parmQuery(query);

            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS328829</DeveloperDocumentation>
	<Label>@SYS152577</Label>
	<SingularLabel>@SYS152578</SingularLabel>
	<TableGroup>Main</TableGroup>
	<TitleField1>PlanActivityId</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>PlanActivityIdIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LeanProductionFlowActivity</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LeanProductionFlowActivity</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PlanActivityLocation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PlanActivityLocation</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PlanActivityRelationship</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PlanActivityRelationship</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PlanActivityResourceRequirement</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PlanActivityResourceRequirement</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PlanPlanActivity</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PlanPlanActivity</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanActivityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanActivityType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnHandUpdate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanActivityId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Activity</Name>
			<Label>@SYS152578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanActivityType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Freight</Name>
			<Label>@SYS1655</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FreightedBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LegalEntity</Name>
			<Label>@SYS331864</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@SYS7399</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OnHand</Name>
			<Label>@SYS115940</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OnHandUpdate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OperatingUnit</Name>
			<Label>@SYS309027</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OperatingUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlanReference</Name>
			<Label>@SYS152559</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanReference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Time</Name>
			<Label>@SYS152606</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActivityTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ActivityTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanActivityTimeRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FreightedBy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WMSFreightedBy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LegalEntity</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanActivityName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnHandUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OnHandUpdate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OperatingUnit</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PlanActivityId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanActivityId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PlanActivityType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PlanActivityType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PlanReference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanReferenceRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoCompleteKanban</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAutoCompleteKanban</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PlanActivityIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanActivityId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PlanReferenceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanReference</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OMOperatingUnitIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OperatingUnit</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LegalEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LegalEntity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PlanActivity</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OMOperatingUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>OMOperatingUnit</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>OMOperatingUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>OMOperatingUnit_PlanActivity</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OperatingUnit</Name>
					<Field>OperatingUnit</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlanActivityTime</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlanActivityTime</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ActivityTime</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Activity</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityTime</Name>
					<Field>ActivityTime</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlanReference</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlanReference</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ReferenceToPlan</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>Activity</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanReference</Name>
					<Field>PlanReference</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>