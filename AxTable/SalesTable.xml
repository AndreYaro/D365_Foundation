<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesTable extends common
{
    #Retail

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountCustLedgerDimension</Name>
				<Source><![CDATA[
    display LedgerDimensionDefaultAccount accountCustLedgerDimension(CustPostingProfile _postingProfile_RU = '')
    {
        SalesTableType  salesTableType;

        salesTableType = this.type();
        return salesTableType.accountCustLedgerDimension(_postingProfile_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementDocumentTitle_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the document title of the related agreement.
    /// </summary>
    /// <returns>
    ///     The agreement document title.
    /// </returns>
    public display AgreementDocumentTitle agreementDocumentTitle_RU()
    {
        return SalesAgreementHeader::find(this.MatchingAgreement).DocumentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementHeaderExt_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the record ID of the <c>AgreementHeaderExt_RU</c> that is attached to the current sales order.
    /// </summary>
    /// <returns>
    ///     The agreement record ID.
    /// </returns>
    public AgreementHeaderExtRecId_RU agreementHeaderExt_RU()
    {
        AgreementHeaderExtRecId_RU agreementHeaderExt;

        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            agreementHeaderExt = this.salesTable_RU().AgreementHeaderExt_RU;
        }
        return agreementHeaderExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementIsLinked</Name>
				<Source><![CDATA[
    display public SalesAgreementIsLinked agreementIsLinked()
    {
        if (this.MatchingAgreement)
        {
            return NoYes::Yes;
        }
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDelivered</Name>
				<Source><![CDATA[
    display AmountCur  amountDelivered()
    {
        SalesLine       salesLine;
        AmountCur       amountCur = 0;

        while select salesLine
            where salesLine.SalesId     == this.SalesId
        {
            amountCur += salesLine.calcLineAmountExclTax(salesLine.SalesQty - salesLine.RemainSalesPhysical);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountInvoiced</Name>
				<Source><![CDATA[
    display AmountCur  amountInvoiced()
    {
        CustInvoiceJour custInvoiceJour;

        select sum(InvoiceAmount) from custInvoiceJour
            where custInvoiceJour.RefNum  == RefNum::SalesOrder
               && custInvoiceJour.SalesId == this.SalesId;

        return custInvoiceJour.InvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    AmountMST amountMST(AmountCur _amountCur, TransDate _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return CurrencyExchangeHelper::mstAmount(_amountCur, this.CurrencyCode, _exchRateDate, this.fixedEuroTriangulation(), this.fixedExchRate(), this.fixedExchRateSecondary());
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountOrderedNotInvoiced</Name>
				<Source><![CDATA[
    display AmountCur amountOrderedNotInvoiced()
    {
        SalesLine  salesLine;
        AmountCur  ordered;

        while select salesLine
            where salesLine.SalesId     == this.SalesId
        {
            ordered += salesLine.calcLineAmountExclTax(salesLine.RemainSalesPhysical+salesLine.RemainSalesFinancial);
        }

        return ordered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountRemainSalesFinancial</Name>
				<Source><![CDATA[
    display AmountCur  amountRemainSalesFinancial()
    {
        SalesLine       salesLine;
        AmountCur       amountCur = 0;

        while select salesLine
                index hint SalesLineIdx
                where salesLine.SalesId     == this.SalesId
        {
            amountCur += salesLine.calcLineAmountExclTax(salesLine.RemainSalesFinancial);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountRemainSalesPhysical</Name>
				<Source><![CDATA[
    display AmountCur  amountRemainSalesPhysical()
    {
        SalesLine       salesLine;
        AmountCur       amountCur = 0;

        while select salesLine
                index hint SalesLineIdx
                where salesLine.SalesId     == this.SalesId
        {
            amountCur += salesLine.calcLineAmountExclTax(salesLine.RemainSalesPhysical);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEstimateForced</Name>
				<Source><![CDATA[
    boolean calcEstimateForced()
    {
        this.Touched = NoYes::Yes;

        if (this.validateWrite())
        {
            this.update();
        }
        else
        {
            this.reread();
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAutoCharges</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void calculateAutoCharges()
    {
        this.createMarkupTrans(true, false);

        if (MarkupTrans::existAutoChargesTransaction(this.TableId, this.RecId))
        {
            info("@SCM:MarkupCalculateAutoChargesActionSuccess");
        }
        else
        {
            info("@SCM:MarkupCalculateAutoChargesActionNotFound");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTieredCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates tiered misc. charges for the sales order.
    /// </summary>
    public void calculateTieredCharges()
    {
        this.createMarkupTrans(false, true);

        if (MarkupTrans::existTieredCharges(this.TableId, this.RecId) 
            || RetailProrateChargesToMatchingSalesLines::existProratedTieredCharges(this))
        {
            info("@SYS4050024");
        }
        else
        {
            info("@SYS4050025");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeDirectlyInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the sales order can be directly invoiced through the Process Shipment feature.
    /// </summary>
    /// <returns>
    ///    true if the sales order has a payment term of COD or Credit card; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The Process shipment button is used for COD and credit card transactions.
    ///    If the payment type is a
    ///    credit card, the button will process the credit card and post the invoice.
    ///    If the payment type is
    ///    COD, the button with post the invoice.
    ///    The Invoice button is used to post all other transactions
    ///    that are not COD or credit card.
    ///    If the Process Shipment feature was used, the Invoice button will
    ///    print the invoice again.
    /// </remarks>
    boolean canBeDirectlyInvoiced()
    {
        boolean     canBeInvoiced = false;
        PaymTerm    paymTerm;

        paymTerm = this.payment();
        if (paymTerm.CreditCardPaymentType == CreditCardPaymentType::CreditCard ||
                paymTerm.PaymMethod == NetCurrent::COD)
        {
            canBeInvoiced = true;
        }

        return canBeInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelPreAuthorization</Name>
				<Source><![CDATA[
    boolean cancelPreAuthorization()
    {
        CreditCardAuthTrans     creditCardAuthTrans;
        boolean ok;

        if (!this.RecId)
        {
            return true;
        }

        creditCardAuthTrans = CreditCardAuthTrans::findValidPreApproval(this.SalesId);
        if (!creditCardAuthTrans)
        {
            return true;
        }

        if (Box::okCancel("@SYS116762", DialogButton::Cancel)== DialogButton::Ok)
        {
            ok = CreditCardProcess::doVoidAuth(creditCardAuthTrans);
            if (ok)
            {
                this.reread();
            }
            return ok;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canChangeCreditCardNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the change to sales order which will clear credit card number should be allowed.
    /// </summary>
    /// <returns>True if if there was no authorization or the user agreed to void it; otherwise false.</returns>
    /// <remarks>
    /// If the credit card used for sales order has already been authorized,
    /// then authorization needs to be void before changing or clearing credit card number.
    /// This method will ask user to confirm if void is what they want to do when the authorization exists.
    /// </remarks>
    boolean canChangeCreditCardNumber()
    {
        if (!this.RecId)
        {
            return true;
        }

        CreditCardAuthTrans creditCardAuthTrans = CreditCardAuthTrans::findValidPreApproval(this.SalesId);
        if (!creditCardAuthTrans)
        {
            return true;
        }

        return Box::okCancel("@SYS116762", DialogButton::Cancel)== DialogButton::Ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreditNoteBeCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a credit note can be created for this sales order.
    /// </summary>
    /// <returns>
    /// true if it is OK to create a credit note; otherwise, false.
    /// </returns>
    public boolean canCreditNoteBeCreated()
    {
        return this.type().canCreditNoteBeCreated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreditNoteUseCreditCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the a credit card can be used with a credit note.
    /// </summary>
    /// <returns>
    /// true if a credit card can be used; otherwise, false.
    /// </returns>
    /// <remarks>
    /// To refund a prior sales invoice, the same credit card must be used as found on the original
    /// invoice.No refund is allowed with a credit note if there is no original invoice.
    /// </remarks>
    public boolean canCreditNoteUseCreditCard()
    {
        SalesTotals totals;
        AmountCur invoiceTotal;
        CreditCardAuthTrans creditCardAuthTrans;

        // No problem if the total is not negative
        totals = SalesTotals::construct(this, SalesUpdate::All);
        totals.calc();
        invoiceTotal = conPeek(totals.displayFields(), TradeTotals::posTotalAmount());
        if (invoiceTotal >= 0)
        {
            return true;
        }

        creditCardAuthTrans = CreditCardAuthTrans::findRefundCharge(this.SalesId);

        // Have a refund but user tried to change credit cards
        if (creditCardAuthTrans && !CreditCard::sameCard(this, creditCardAuthTrans))
        {
            this.CreditCardCustRefId = CreditCardCust::findByUniqueCardId(creditCardAuthTrans.UniqueCardId).RecId; // put back the original credit card
            return checkFailed("@SYS330573");
        }

        // No preauth, no credit card allowed
        if (!creditCardAuthTrans && this.CreditCardCustRefId)
        {
            this.Payment = CustTable::find(this.CustAccount).PaymTermId; // reset to default payment terms
            this.CreditCardCustRefId = 0; // clear the credit card
            return checkFailed("@SYS330574");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCustomerBeUpdated</Name>
				<Source><![CDATA[
    boolean canCustomerBeUpdated(DocumentStatus _documentStatus)
    {
        return CustTable::canCustomerBeUpdated(this.CustAccount, this.InvoiceAccount, _documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeliverySlipBeUpdatedBR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a sales order can create delivery slips.
    /// </summary>
    /// <returns>
    /// true if a delivery slip is found on the sales lines; otherwise false.
    /// </returns>
    public boolean canDeliverySlipBeUpdatedBR()
    {
        SalesLine salesLine;
        SalesLine_BR salesLine_BR;

        select firstonly RecId from salesLine
            where salesLine.SalesId == this.SalesId
                && salesLine.SalesStatus == SalesStatus::Backorder
            exists join salesLine_BR
                where  salesLine_BR.SalesLine == salesLine.RecId
                    && salesLine_BR.DeliveryCFOPTable_BR != 0;

        return salesLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesCustomerBlockedStatusAllowReleaseToWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the blocked status for the current invoice account.
    /// </summary>
    /// <returns>true if the current invoice account is blocked; otherwise, false.</returns>
    protected boolean doesCustomerBlockedStatusAllowReleaseToWarehouse()
    {
        return CustTable::blocked(this.InvoiceAccount) != CustVendorBlocked::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReleaseToWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check sales order and customer status to determine whether sales order can be released to warehouse.
    /// </summary>
    /// <returns>
    /// true if the order can be released to the warehouse; otherwise, false.
    /// </returns>
    public boolean canReleaseToWarehouse()
    {
        boolean ret = true;

        if (this.SalesStatus == SalesStatus::Invoiced
            || this.SalesStatus == SalesStatus::Canceled
            || this.SalesStatus == SalesStatus::Delivered)
        {
            ret = checkFailed(strFmt("@WAX:ReleaseToWarehouseSalesOrderStatusNotSupportedError", this.SalesId, this.SalesStatus));
        }

        if (ret && this.MCROrderStopped == NoYes::Yes)
        {
            ret = checkFailed(strFmt("@WAX:ReleaseToWarehouseSalesOrderMCROrderStoppedError", this.SalesId));
        }
        
        if (ret && (this.SalesStatus == SalesStatus::None || this.SalesStatus == SalesStatus::Backorder))
        {
            ret = this.canCustomerBeUpdated(DocumentStatus::PickingList);
            if (!ret)
            {
                ret = checkFailed(strFmt("@WAX:CustomerOnholdOrderCannotBeReleased", CustTable::blocked(this.CustAccount), this.SalesId));
            }

            if (ret && isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)) 
                && !(WHSAutoReleaseToWarehouseSkipSOPreProcessMCRCallCenterFullReservCheckFlight::instance().isEnabled()
                    && WHSAutoReleaseToWarehouseSkipSOPreProcessMCRCallCenterFullReservCheckContext::current()))
            {
                // If reservation is automatic it will be performed later - we should skip check if all lines are fully reserved.
                if (this.Reservation != ItemReservation::Automatic || !WHSAutomaticReservationSkipMCRCallCenterFullReservCheckV2Flight::instance().isEnabled())
                {
                    ret = this.mcrCheckShipComplete();
                }
                
                if (!ret)
                {
                    ret = checkFailed(strFmt("@MCR12672", this.SalesId));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canXMLBeSent</Name>
				<Source><![CDATA[
    public boolean canXMLBeSent()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccount</Name>
				<Source><![CDATA[
    boolean  checkAccount()
    {
        CustVendorBlocked blockLevel;
        CustAccount accountNumber;

        if (this.InvoiceAccount != '')
        {
            blockLevel = CustTable::blocked(this.InvoiceAccount);
            accountNumber = this.InvoiceAccount;
        }
        else
        {
            blockLevel = CustTable::blocked(this.CustAccount);
            accountNumber = this.CustAccount;
        }

        switch (blockLevel)
        {
            case CustVendorBlocked::All:
                if (this.mcrOrderStopped == NoYes::No && this.orig().mcrOrderStopped == NoYes::Yes)
                {
                    warning(strFmt("@SYS18389", accountNumber, enum2str(blockLevel)));
                    break;
                }
                else
                {
                    return checkFailed(strFmt("@SYS18389", accountNumber, enum2str(blockLevel)));
                }
            case CustVendorBlocked::Invoice:
                warning(strFmt("@SYS18389", accountNumber, enum2str(blockLevel)));
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgainstCreditLimit</Name>
				<Source><![CDATA[
    boolean checkAgainstCreditLimit(Common _salesLineOrTable = this, SalesTotals _salesTotals = null)
    {
        boolean         ret = true;
        CustCreditLimit custCreditLimit;

        if (this.isCreditCheckEligible())
        {
            setPrefix(strFmt("@SYS76767", this.SalesId));

            custCreditLimit = CustCreditLimit::construct(_salesLineOrTable, _salesTotals);

            ret = custCreditLimit.check();

            // when checking for credit limit excess during order entry, the user is always able to continue
            // regardless of whether Warning or Error is chosen, but except retail order from POS
            if (!(RetailParameters::isRetailEnabledAndInUse() && this.isRetailSale())
                || this.isRetailCashAndCarrySales())
            {
                ret = true;
            }

            // When checking for credit limit excess during order entry, the user is always able to continue
            // regardless of whether Warning or Error is chosen, but except  if order is a call center order and enable order completion set to 'NO'.
            if (this.mcrIsCallCenter() && (!RetailMCRChannelTable::mcrEnableOrderCompletion(this) && RetailCallCenterOrderCreditLimitErrorToggle::instance().isEnabled()))
            {
                ret = true;
            }

            this.Touched = NoYes::No;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the <c>AgreementHeaderExt_RU</c> field for sales order.
    /// </summary>
    /// <param name="_agreementHeaderExtRecId">
    ///     The record ID of the sales agreement; optional.
    /// </param>
    /// <returns>
    ///     true if the <c>AgreementHeaderExt_RU</c> field is valid; otherwise, false.
    /// </returns>
    public boolean checkAgreement_RU(AgreementHeaderExtRecId_RU _agreementHeaderExtRecId = this.salesTable_RU().AgreementHeaderExt_RU)
    {
        boolean ok = this.checkSalesLineExist_RU();
 
        if (ok)
        {
            ok = this.checkSalesAgreemetHeader_RU(_agreementHeaderExtRecId);
        }
 
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesLineExist_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if sales line exists.
    /// </summary>
    /// <returns>
    ///     true if the line exists; otherwise, false.
    /// </returns>
    public boolean checkSalesLineExist_RU()
    {
        boolean ok = true;

        if (SalesLine::exist(this.SalesId))
        {
            ok = checkFailed("@GLS220553");
        }
 
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesAgreemetHeader_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs agreement header check for being on hold, customer and invoice account match .
    /// </summary>
    /// <param name="_agreementHeaderExtRecId">
    ///     The record ID of the sales agreement.
    /// </param>
    /// <returns>
    ///     true if the <c>AgreementHeaderExt_RU</c> fields are valid; otherwise, false.
    /// </returns>
    public boolean checkSalesAgreemetHeader_RU(AgreementHeaderExtRecId_RU _agreementHeaderExtRecId)
    {
        boolean ok = true;
 
        if (_agreementHeaderExtRecId)
        {
            SalesAgreementHeader salesAgreementHeader = SalesAgreementHeaderExt_RU::salesAgreementHeader(_agreementHeaderExtRecId);
  
            if (!salesAgreementHeader.canReleaseAgreement(this.ShippingDateRequested))
            {
                ok = checkFailed("@SYS103075");
            }

            if (salesAgreementHeader.CustAccount != this.CustAccount)
            {
                ok = checkFailed(strFmt("@SYS112224", salesAgreementHeader.SalesNumberSequence, "@SYS309959", tableId2pname(tableNum(SalesAgreementHeader))));
            }

            if (ok && this.InvoiceAccount && salesAgreementHeader.salesAgreementHeaderDefault().CustomerInvoiceAccount != this.InvoiceAccount)
            {
                ok = checkFailed(strFmt("@SYS112224", salesAgreementHeader.SalesNumberSequence, "@SYS309959", tableId2pname(tableNum(SalesAgreementHeader))));
            }
        }
 
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndUpdateAvailableDlvDates</Name>
				<Source><![CDATA[
    boolean checkAndUpdateAvailableDlvDates()
    {
        boolean ret;
        SalesCalcAvailableDlvDates  salesCalcAvailableDlvDates;

        salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(this);
        ret = salesCalcAvailableDlvDates.validateWritePrompt(this, false, false);
        this.doUpdate();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCashPayment</Name>
				<Source><![CDATA[
    boolean checkCashPayment()
    {
        if (PaymTerm::isCashAccount(this.Payment) && this.PaymentSched )
        {
            return checkFailed("@SYS25074");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkContactPerson</Name>
				<Source><![CDATA[
    boolean checkContactPerson()
    {
        ContactPerson   contactPerson;

        if (this.ContactPersonId)
        {
            contactPerson = ContactPerson::find(this.ContactPersonId);
            if (contactPerson.getCustAccount() != this.CustAccount)
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditCard</Name>
				<Source><![CDATA[
    public boolean checkCreditCard()
    {
        if (!CustParameters::useCreditCardModule())
        {
            return true;
        }
        if (!RetailMCRChannelTable::mcrEnableOrderCompletion(this)
            && (FeatureStateProvider::isFeatureEnabled(CustSaleOrderNotInvoicedIfNoCCNumFlight::instance())
                && !this.isRetailCashAndCarrySales()))
        {
            if (this.payment().CreditCardPaymentType == CreditCardPaymentType::CreditCard)
            {
                if (!this.CreditCardCustRefId)
                {
                    if (RetailSalesTableParameters::setDocumentStatus == DocumentStatus::None)
                    {
                        // The credit card number must be specfied
                        return checkFailed("@SYS116746");
                    }
                    else
                    {
                        return checkFailed(strFmt("@Retail:RetailCreditCardValidationByDocumentStatus", enum2Value(RetailSalesTableParameters::setDocumentStatus)));
                    }
                }

                if (this.CreditCardCustRefId && !CreditCard::checkExpireDate(CreditCardCust::find(this.CreditCardCustRefId).ExpiryDate))
                {
                    // Credit card is expired
                    return checkFailed("@SYS116750");
                }

                if (this.SettleVoucher == SettlementType::OpenTransact)
                {
                    // Can't auto settle credit card orders
                    return checkFailed("@SYS328656");
                }
            }
            else
            {
                if (this.CreditCardCustRefId)
                {
                    // The payment type must be credit card, since the credit card number has been specified
                    return checkFailed("@SYS116747");
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseTMSActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if TMS actions can be used.
    /// </summary>
    /// <returns>
    /// true if TMS actions can be used; otherwise, false
    /// </returns>
    public boolean canUseTMSActions()
    {
        if (TMSGlobal::skipTMS())
        {
            return false;
        }

        WHSLoadTable    loadTable;
        WHSWorkTable    workTable;

        select firstOnly LoadingStrategy from loadTable
            exists join workTable
                where workTable.LoadId          == loadTable.LoadId
                    && workTable.WorkTransType  == WHSWorkTransType::Sales
                    && workTable.OrderNum       == this.SalesId;

        return loadTable.LoadingStrategy == WHSLoadingStrategy::FullLoadShippingOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInvoiceOrderFromCurrentSalesStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the sales order can be invoiced from the current status it is in.
    /// </summary>
    /// <returns>true, if the order can be invoiced; otherwise, false.</returns>
    public boolean canInvoiceOrderFromCurrentSalesStatus()
    {
        switch (this.SalesStatus)
        {
            case SalesStatus::None:
            case SalesStatus::Backorder:
            case SalesStatus::Delivered:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditCardPaymentType</Name>
				<Source><![CDATA[
    public boolean checkCreditCardPaymentType()
    {
        if (!this.type().canHaveCreditCard() &&
            this.payment().CreditCardPaymentType == CreditCardPaymentType::CreditCard)
        {
            return checkFailed(strFmt("@SYS127403", this.SalesType));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditLimit</Name>
				<Source><![CDATA[
    void checkCreditLimit(SalesTotals _salesTotals = null)
    {
        SalesTableType::checkAgainstCreditLimit(this, _salesTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditNoteReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the reason that a credit note is related to a <c>SalesTable</c> record.
    /// </summary>
    public void checkCreditNoteReason()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU, #isoPL, #isoHU, #isoCZ, #isoLT, #isoLV, #isoEE])
            && CustParameters::find().CreditNoteReasonReq)
        {
            this.checkCreditNoteReasonServer();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditNoteReasonServer</Name>
				<Source><![CDATA[
    private void checkCreditNoteReasonServer()
    {
        SalesLine   salesLine;

        // Find if a Credit note line is missing the Reason comment
        while select CreditNoteReasonCode, LineNum from salesLine
            order by LineNum
            where salesLine.SalesId == this.SalesId &&
                ((salesLine.RefReturnInvoiceTrans_W == 0 && salesLine.CreditNoteInternalRef_PL != 0) ||
                (salesLine.RefReturnInvoiceTrans_W != 0 && salesLine.CreditNoteInternalRef_PL == 0))
        {
            if (salesLine.CreditNoteReasonCode == 0 || ReasonTableRef::find(salesLine.CreditNoteReasonCode).ReasonComment == "")
            {
                throw error(strFmt("@GLS220466", salesLine.LineNum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCurrencyCode</Name>
				<Source><![CDATA[
    void  checkCurrencyCode()
    {
        MCRCustPaymTotals mcrCustPaymTotals;

        if (this)
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                // If one or more payments disallows changing the currency,
                //restore the old currency.
                if (this.CurrencyCode != this.orig().CurrencyCode)
                {
                    mcrCustPaymTotals =
                        MCRCustPaymTotals::construct(this.TableId, this.RecId);

                    if (mcrCustPaymTotals && !mcrCustPaymTotals.allowEditCurrency())
                    {
                        warning("@MCR10940");

                        this.CurrencyCode = this.orig().CurrencyCode;
                    }
                }
            }
            if (this.CurrencyCode != this.orig().CurrencyCode &&
                SalesLine::existDifferentCurrency(this.SalesId,this.CurrencyCode))
            {
                warning("@SYS15290");

                this.CurrencyCode = this.orig().CurrencyCode;
            }

            if (this.CurrencyCode != this.orig().CurrencyCode &&
                MarkupTrans::existDifferentCurrency(this.TableId, this.RecId, this.CurrencyCode))
            {
                warning("@SYS24528");

                this.CurrencyCode = this.orig().CurrencyCode;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDelete</Name>
				<Source><![CDATA[
    boolean checkDelete(
        boolean _useWarning = true,
        boolean _treatInvoicedOrderUpdateWarningAsError = false)
    {
        return this.type().checkDelete(_useWarning, _treatInvoicedOrderUpdateWarningAsError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDelivery</Name>
				<Source><![CDATA[
    boolean checkDelivery()
    {
        if (!this.DlvMode)
        {
            // "Mode of delivery must be specified."
            return checkFailed("@SYS116733");
        }

        if (!this.DlvTerm)
        {
            // "Delivery term must be specified."
            return checkFailed("@SYS116734");
        }

        if (!this.ShipCarrierId)
        {
            // "Carrier must be specified."
            return checkFailed("@SYS116735");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the various posting updates are allowed for the order.
    /// </summary>
    /// <param name="_packedCheckIfUpdateContract">
    /// Specifies which of the posting update allowance values to obtain for the order; optional.
    /// </param>
    /// <returns>
    /// A packed instance of the <c>SalesTableCanBeUpdatedContract</c> class.
    /// </returns>
    container checkIfUpdate(container _packedCheckIfUpdateContract = conNull())
    {
        container   canBeUpdated;
        if (
            this.company()
            != curext())
        {
            changecompany(
                          this.company()
                          )
            {
                canBeUpdated = this.type().checkIfUpdate(_packedCheckIfUpdateContract);
            }
        }
        else
        {
            canBeUpdated = this.type().checkIfUpdate(_packedCheckIfUpdateContract);
        }

        return canBeUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIntrastatFulfillDate_HU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates Intrastat fulfillment date.
    /// </summary>
    /// <returns>
    /// true if Intrastat fulfillment date is valid; otherwise, false.
    /// </returns>
    public boolean checkIntrastatFulfillDate_HU()
    {
        LogisticsAddressCountryRegionId country = this.deliveryAddress().CountryRegionId;

        if (!country || !IntrastatCountryRegionParameters::isCountryRegionStateInEU(this.deliveryAddress()))
        {
            return true;
        }

        if (IntrastatParameters::find().IntrastatFulfillmentDateEmptyWarning_HU && !this.IntrastatFulfillmentDate_HU)
        {
            return checkFailed(strFmt("@SYS4080012", fieldPName(SalesTable, IntrastatFulfillmentDate_HU)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventProfile_RU</Name>
				<Source><![CDATA[
    public boolean checkInventProfile_RU(boolean _checkProfileId = false)
    {
        SalesTable                  salesTableTmp;
        SalesTable_RU               salesTableTmpRU;
        SalesTable_RU               salesTableRU;
        SalesLine                   salesLine;
        InventDim                   inventDim;
        InventProfile_RU            inventProfile;
        SalesTable2LineParameters   salesTable2LineParameters;
        boolean                     ok = true;

        salesTableTmp.data(this);
        salesTableTmp.salesTable_RU().setInventProfileId_RU();

        salesTableRU = this.salesTable_RU();
        salesTableTmpRU = salesTableTmp.salesTable_RU();

        if (salesTableRU.InventProfileType_RU != InventProfileType_RU::NotSpecified)
        {
            select firstonly salesLine
                where salesLine.SalesId                 == this.SalesId
            join InventProfileId_RU from inventDim
                where inventDim.InventDimId             == salesLine.InventDimId
            join TableId from inventProfile
                where inventProfile.InventProfileId     == inventDim.InventProfileId_RU
                   && inventProfile.InventProfileType   != salesTableRU.InventProfileType_RU;

            if (salesLine)
            {
                ok = checkFailed(strFmt("@GLS113728",
                                        inventDim.InventProfileId_RU,
                                        salesTableRU.InventProfileType_RU));
            }

            if (salesTableRU.InventProfileType_RU != InventProfileType_RU::General)
            {
                select firstonly RecId from salesLine
                    where salesLine.SalesId == this.SalesId &&
                          (salesLine.StockedProduct == NoYes::No ||
                          (salesLine.SalesCategory               &&
                          !salesLine.ItemId));

                if (salesLine.RecId)
                {
                    ok = checkFailed(
                        strFmt("@GLS220092",
                            salesTableRU.InventProfileType_RU));
                }
            }
            else if (InventProfile_RU::find(salesTableTmpRU.InventProfileId_RU).StockInTransit == StockInTransit_RU::BoughtInTransit)
            {
                select firstonly RecId from salesLine
                    where salesLine.SalesId == this.SalesId      &&
                          (salesLine.StockedProduct == NoYes::No ||
                          (salesLine.SalesCategory               &&
                          !salesLine.ItemId));

                if (salesLine.RecId)
                {
                    ok = checkFailed(
                        strFmt("@GLS220091",
                            salesTableRU.InventProfileId_RU));
                }
            }
        }

        if (!_checkProfileId)
        {
            salesTable2LineParameters = SalesTable2LineParameters::find(tableNum(SalesTable_RU), fieldNum(SalesTable_RU, InventProfileId_RU), false);
            if (salesTable2LineParameters.Table2LineUpdate == TradeTable2LineUpdate::Never)
            {
                // force check for consistent
                _checkProfileId = true;
            }
        }

        if (_checkProfileId && salesTableTmpRU.InventProfileId_RU)
        {
            if (salesTableRU.InventProfileUseRelated_RU == NoYes::No)
            {
                select firstonly RecId from salesLine
                    where salesLine.SalesId             == this.SalesId
                join InventProfileId_RU from inventDim
                    where inventDim.InventDimId         == salesLine.InventDimId &&
                          inventDim.InventProfileId_RU                           &&
                          inventDim.InventProfileId_RU  != salesTableTmpRU.InventProfileId_RU;

                if (salesLine)
                {
                    ok = checkFailed(strFmt("@GLS113730",
                                            inventDim.InventProfileId_RU,
                                            salesTableTmpRU.InventProfileId_RU));
                }
            }
            else
            {
                while select salesLine
                    group by TableId
                    where salesLine.SalesId             == this.SalesId
                join inventDim
                    group by InventProfileId_RU
                    where inventDim.InventDimId         == salesLine.InventDimId
                       && inventDim.InventProfileId_RU
                       && inventDim.InventProfileId_RU  != salesTableTmpRU.InventProfileId_RU
                {
                    if (! InventProfileRelation_RU::find(salesTableTmpRU.InventProfileId_RU, inventDim.InventProfileId_RU))
                    {
                        ok = checkFailed(strFmt("@GLS113729",
                                                inventDim.InventProfileId_RU,
                                                salesTableTmpRU.InventProfileId_RU));
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoiceAccount</Name>
				<Source><![CDATA[
    boolean checkInvoiceAccount()
    {
        MCRCustPaymTotals mcrCustPaymTotals;
        CustVendorBlocked   blockLevel = CustTable::blocked(this.InvoiceAccount);
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            if (this.RecId && this.InvoiceAccount != this.orig().InvoiceAccount)
            {
                // Check if one or more payments disallows modifying the invoice account.
                mcrCustPaymTotals =
                    MCRCustPaymTotals::construct(this.TableId, this.RecId);

                if (!mcrCustPaymTotals.allowEditInvoiceAccount())
                {
                    error("@MCR11248");
                    return false;
                }
            }
        }

        switch (blockLevel)
        {
            case CustVendorBlocked::All:
                if (this.mcrOrderStopped == NoYes::No && this.orig().mcrOrderStopped == NoYes::Yes)
                {
                    warning(strFmt("@SYS79283", this.InvoiceAccount, enum2str(blockLevel)));
                    break;
                }
                else
                {
                    return checkFailed(strFmt("@SYS79283", this.InvoiceAccount, enum2str(blockLevel)));
                }
            case CustVendorBlocked::Invoice:
                warning(strFmt("@SYS79283", this.InvoiceAccount, enum2str(blockLevel)));
                break;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoicePostingType_RU</Name>
				<Source><![CDATA[
    public boolean checkInvoicePostingType_RU()
    {
        boolean             ok = true;
        SalesLine           salesLine;
        SalesTable_RU       salesTableRU;
        InventDim           inventDim;
        InventProfile_RU    inventProfile;
        if (! this.RecId)
        {
            return ok;
        }

        salesTableRU = this.salesTable_RU();

        if (salesTableRU.InvoicePostingType_RU == SalesInvoicePostingType_RU::GoodsInRoute)
        {
            if (this.payment().Cash == NoYes::Yes)
            {
                ok = checkFailed("@GLS114805");
            }

            ok = ok && InventProfile_RU::checkGITProfileType(salesTableRU.InventProfileType_RU);

            if (ok)
            {
                select firstonly salesLine
                    where salesLine.SalesId == this.SalesId
                join TableId from inventDim
                    where inventDim.InventDimId == salesLine.InventDimId
                join InventProfileType from inventProfile
                    where inventProfile.InventProfileId   == inventDim.InventProfileId_RU                   &&
                         (inventProfile.InventProfileType == InventProfileType_RU::CommissionAgent          ||
                          inventProfile.InventProfileType == InventProfileType_RU::CommissionPrincipalAgent ||
                          inventProfile.InventProfileType == InventProfileType_RU::Bailee);

                if (salesLine)
                {
                    ok = checkFailed(strFmt("@GLS114807", inventProfile.InventProfileType));
                }
            }

            if (ok)
            {
                select firstonly RecId from salesLine
                    where salesLine.SalesId == this.SalesId     &&
                         (salesLine.StockedProduct == NoYes::No ||
                         (!salesLine.ItemId                     &&
                          salesLine.SalesCategory));

                if (salesLine.RecId)
                {
                    ok = checkFailed("@GLS220090");
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupTrans_RU</Name>
				<Source><![CDATA[
    boolean checkMarkupTrans_RU()
    {
        return MarkupTrans::checkMarkupTransCustVend_RU(this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves sales order receipt date.
    /// </summary>
    /// <returns>A sales order receipt date.</returns>
    SalesReceiptDate receiptDate()
    {
        return this.ReceiptDateConfirmed ? this.ReceiptDateConfirmed : this.ReceiptDateRequested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPayment</Name>
				<Source><![CDATA[
    boolean checkPayment()
    {
        #ISOCountryRegionCodes
        PaymTerm        paymTerm;
        CreditCardCust creditCardCust;
        CreditCardProcessors creditCardProcessors;

        paymTerm = this.payment();
        if (paymTerm.PaymMethod == NetCurrent::COD && !this.returnItem())
        {
            if (!this.DlvMode)
            {
                return checkFailed("@SYS24563");
            }

            if (this.PaymentSched)
            {
                return checkFailed("@SYS24623");
            }
        }

        if (this.PaymentSched && this.FixedDueDate)
        {
            return checkFailed("@SYS69828");
        }

        if (paymTerm.CreditCardPaymentType == CreditCardPaymentType::CreditCard && this.CreditCardCustRefId != 0)
        {
            creditCardCust = CreditCardCust::find(this.CreditCardCustRefId);
            creditCardProcessors = CreditCardProcessors::find(creditCardCust.CreditCardProcessors);
            if (creditCardCust && !CreditCardProcessors::validateCurrencyForProcessor(creditCardProcessors, this.CurrencyCode, creditCardCust.CreditCardTypeName) ||
                    !this.checkPaymMode())
            {
                // The active credit card processor does not supports this currency.
                return checkFailed(strFmt("@SYS327527", creditCardProcessors.Name, this.CurrencyCode));
            }

            if (this.PaymentSched)
            {
                return checkFailed("@SYS27358");
            }
        }

        if (!this.ReceiptDateConfirmed              &&
            paymTerm.UseDeliveryDateForDueDate_ES   &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            return checkFailed(strFmt("@SYS4000478", this.Payment));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the payment mode is valid.
    /// </summary>
    /// <returns>
    /// true if the payment mode is valid; otherwise, false.
    /// </returns>
    public boolean checkPaymMode()
    {
        boolean ok = true;

        if (this.CreditCardCustRefId && this.payment().CreditCardPaymentType == CreditCardPaymentType::CreditCard)
        {
            var custPaymModeTable = CustPaymModeTable::find(this.PaymMode);

            if (custPaymModeTable && custPaymModeTable.offsetLedgerDimension())
            {
                ok = this.checkCurrencyForPaymentPostingAccount(custPaymModeTable.paymACType(), custPaymModeTable.offsetLedgerDimension());
            }
            else
            {
                var custParameters = CustParameters::find();

                ok = this.checkCurrencyForPaymentPostingAccount(custParameters.CreditCardPostingAccountType, custParameters.CreditCardPostingLedgerDimension);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCurrencyForPaymentPostingAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the currency is valid for a payment posting account.
    /// </summary>
    /// <param name="_accountType">
    /// The account type of the account to validate.
    /// </param>
    /// <param name="_ledgerDimension">
    /// The account number of the account to validate.
    /// </param>
    /// <returns>
    /// true if the currency is valid; otherwise, false.
    /// </returns>
    protected boolean checkCurrencyForPaymentPostingAccount(LedgerJournalACType _accountType, DimensionDynamicDefaultAccount _ledgerDimension)
    {
        var isAccountValid = true;

        if (isConfigurationkeyEnabled(configurationKeyNum(CreditCard)) && this.CurrencyCode)
        {
            switch (_accountType)
            {
                case LedgerJournalACType::Bank:
                    var bankAccountTable = BankAccountTable::find(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerDimension));
                    isAccountValid = bankAccountTable.checkCurrency(this.CurrencyCode);
                    break;
                case LedgerJournalACType::Ledger:
                    var mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(_ledgerDimension);
                    boolean isBlocked = MainAccount::isBlockedForManualEntryByMainAccountRecId(mainAccount.RecId);

                    if (isBlocked)
                    {
                        isAccountValid = checkFailed(strFmt("@SYS19246", mainAccount.MainAccountId));
                    }

                    isAccountValid = mainAccount.checkAccountCurrencyForPosting(this.CurrencyCode) && isAccountValid;
                    break;
                default:
                    isAccountValid = false;
                    break;
            }
        }

        return isAccountValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReservation</Name>
				<Source><![CDATA[
    boolean checkReservation()
    {
        SalesLine   salesLine;
        boolean     ok = true;

        select firstonly salesLine
               index hint SalesLineIdx
               where salesLine.SalesId          == this.SalesId
               &&    salesLine.InventRefTransId != '';
        if (salesLine
        &&  this.Reservation == ItemReservation::Explosion)
        {
            ok = checkFailed("@SYS105404");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the sales order can be modified.
    /// </summary>
    /// <param name = "_useWarning">
    /// A boolean value that indicates whether the user must be notified about the reasons why the changes are not allowed; optional.
    /// </param>
    /// <param name = "_interCompanyCheck">
    /// A boolean value that indicates whether the intercompany check must be performed; optional.
    /// </param>
    /// <param name = "_treatInvoicedOrderUpdateWarningAsError">
    /// A boolean value that indicates whether the "Warning" access level to invoiced orders must be treated as "Locked".
    /// </param>
    /// <returns>true, if the modification is allowed; otherwise, false.</returns>
    public boolean checkUpdate(
        boolean _useWarning = true,
        boolean _interCompanyCheck = true,
        boolean _treatInvoicedOrderUpdateWarningAsError = false)
    {
        return this.type().checkUpdate(_useWarning, _interCompanyCheck, _treatInvoicedOrderUpdateWarningAsError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAddressReference</Name>
				<Source><![CDATA[
    public void clearAddressReference()
    {
        this.AddressRefRecId    = 0;
        this.AddressRefTableId  = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAllPriceDiscChangePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all the previously set price discount change policies for the corresponding
    /// <c>SalesTable</c> record.
    /// </summary>
    /// <remarks>
    /// Removes the policies from both manual and system groups.
    /// </remarks>
    void clearAllPriceDiscChangePolicies()
    {
        this.type().clearAllPriceDiscChangePolicies();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount clearingLedgerDimension(CustPostingProfile _postingProfile_RU = '')
    {
        SalesTableType salesTableType;

        salesTableType = this.type();
        return salesTableType.clearingLedgerDimension(_postingProfile_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingPeriod</Name>
				<Source><![CDATA[
    ClearingPeriod clearingPeriod()
    {
        return this.custTable_InvoiceAccount().clearingPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>CompanyInfo</c> record that is associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPerson</Name>
				<Source><![CDATA[
    ContactPerson contactPerson(boolean _forUpdate = false)
    {
        return ContactPerson::find(this.ContactPersonId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonName</Name>
				<Source><![CDATA[
    display ContactPersonName contactPersonName()
    {
        return ContactPerson::name(this.ContactPersonId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionMargin</Name>
				<Source><![CDATA[
    display ContributionMarginMST contributionMargin()
    {
        SalesTotals             salesTotals;
        ContributionMarginMST   contributionMargin;

        salesTotals = SalesTotals::construct(this, SalesUpdate::All);
        salesTotals.prepareBalanceCalculation();
        salesTotals.prepareCostValueCalculation();
        salesTotals.calc();

        contributionMargin   = CurrencyExchangeHelper::mstAmount(salesTotals.totalBalance() - salesTotals.totalEndDisc(), this.CurrencyCode);
        contributionMargin  -= salesTotals.totalCostValue();

        return contributionMargin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineOnCurrencyCodeConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the order line after currency code conversion.
    /// </summary>
    /// <param name = "_salesLine">A sales order line</param>
    protected void updateLineOnCurrencyCodeConversion(SalesLine _salesLine)
    {
        _salesLine.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    void convertCurrencyCode(CurrencyCode currencyCode, TradeCurencyConversion tradeCurencyConversion = TradeCurencyConversion::ExchRate)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        SalesLine                 salesLine;
        MarkupTrans               markupTrans;

        ttsbegin;

        while select forupdate salesLine
              where salesLine.SalesId   == this.SalesId
        {
            salesLine.convertCurrencyCode(currencyCode, tradeCurencyConversion);
            this.updateLineOnCurrencyCodeConversion(salesLine);

            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
                isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                salesLine.SysExtensionSerializerMap::postUpdate();
            }
            // </GEERU>

            if (salesLine.MatchingAgreementLine && !AgreementLine::find(salesLine.MatchingAgreementLine).isLinkValid(salesLine,false))
            {
                salesLine.unLinkAgreementLine();
                info(strFmt("@SYS306908", this.SalesId, salesLine.ItemId));
            }
        }

        while select forupdate markupTrans
              index hint TableRecIdIdx
              where markupTrans.TransTableId  == this.TableId &&
                    markupTrans.TransRecId    == this.RecId   &&
                   !markupTrans.IsDeleted
        {
            markupTrans.convertCurrencyCode(currencyCode);
            markupTrans.doUpdate();
        }

        CustPaymSched::deleteCustPaymSched(this.TableId, this.RecId);

        if (this.FixedExchRate != 0.0 || this.ReportingCurrencyFixedExchRate != 0.0)
        {
            info(strFmt("@SYS78763", this.SalesId));
        }

        this.FixedExchRate = 0;
        this.ReportingCurrencyFixedExchRate = 0;
        this.CurrencyCode = currencyCode;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToLine</Name>
				<Source><![CDATA[
    public void copyAddressToLine(DialogButton              copyAddress,
                                  SalesTable                salesTable,
                                  DeliveryDateUpdateInLines deliveryDateUpdateInLines = DeliveryDateUpdateInLines::RevertDeliveryDateControl)
    {
        SalesLine  salesLine;

        if (copyAddress == DialogButton::Cancel)
        {
            return;
        }

        ttsbegin;

        while select forupdate salesLine
            where salesLine.SalesId == this.SalesId &&
                (copyAddress                 == DialogButton::YesToAll ||
                 salesLine.DeliveryPostalAddress == salesTable.orig().DeliveryPostalAddress)
        {
            if (this.mustCopyAddressToLine(salesLine))
            {
                salesLine.setAddressFromSalesTable(this);

                if (salesLine.DeliveryDateControlType != SalesDeliveryDateControlType::None)
                {
                    SalesLineDeliveryDateControlRecalculate::applyDeliveryDateControl(salesLine, deliveryDateUpdateInLines);
                }

                if (#PdsMRCEnabled)
                {
                    if (!salesLine.validateWrite(true))
                    {
                        throw error("@PDS894");
                    }
                }

                salesLine.write();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCopyAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the address must be copied to the sales line.
    /// </summary>
    /// <param name = "_salesLine">The <c>SalesLine</c> record to which the address is copied.</param>
    /// <returns>true if the address is to be copied to the sales line; otherwise, false.</returns>
    protected boolean mustCopyAddressToLine(SalesLine _salesLine)
    {
        boolean result = !_salesLine.isDropShipmentPOLineInvoiceMatched() && !_salesLine.isInterCompanyOrderLineInvoiceMatched();
        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            return result && !this.kittingSkipUpdateSalesLine(_salesLine);
        }
        else
        {
            return result;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set that should be applied to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously instantiated by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPaymentSched</Name>
				<Source><![CDATA[
    void copyPaymentSched(CustInvoiceJour custInvoiceJour)
    {
        CustPaymSched       custPaymSched;
        CustVendPaymSched   custVendPaymSched;

        ttsbegin;

        select custPaymSched
        where custPaymSched.ExtTableId       == this.TableId &&
              custPaymSched.ExtRecId         == this.RecId;

        if (custPaymSched.RecId)
        {
            custVendPaymSched = CustVendPaymSched::construct(SysModule::Cust, custInvoiceJour);
            custVendPaymSched.copyCustVendPaymSched(custPaymSched);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRMALines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the lines from a return order to a sales order.
    /// </summary>
    /// <param name="_returnTable">
    /// A <c>SalesTable</c> record.
    /// </param>
    /// <param name="_copyRMALines">
    /// A Boolean value that indicates whether the lines should be copied.
    /// </param>
    public void copyRMALines(SalesTable _returnTable, NoYes _copyRMALines = NoYes::No)
    {
        SalesTable      returnTable = SalesTable::findRecId(_returnTable.RecId, true);
        boolean mcrCallCenterEnabled = isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter));

        ttsbegin;
        if (mcrCallCenterEnabled)
        {
            returnTable.ReturnReplacementId = this.SalesId;
            if (RetailMCRChannelTable::mcrEnableOrderCompletion(_returnTable))
            {
                // Support credit being applied to the exchange and linking records.
                MCRReturnSalesTable mcrReturnSalesTable = returnTable.mcrReturnSalesTable();
                returnTable.mcrPackMCRReturnSalesTable(mcrReturnSalesTable);
            }

            if (this.ReturnReplacementId)
            {
                SalesTableLinks     salesTableLinks;
                MCRReturnSalesTable mcrReturnSalesTableLocal = this.mcrReturnSalesTable();
                salesTableLinks.MainSalesId = mcrReturnSalesTableLocal.OriginalSalesId;
                salesTableLinks.SubSalesId = this.ReturnReplacementId;

                salesTableLinks.insert();
            }

            returnTable.update();
        }

        if (_copyRMALines == NoYes::Yes && returnTable.returnItem())
        {
            SalesLine salesLine;

            while select forupdate salesLine
                where salesLine.SalesId         == returnTable.SalesId
                    && salesLine.StockedProduct == true
                    && salesLine.ReturnStatus   != ReturnStatusLine::Canceled
            {
                if(this.mustCopyRMALine(salesLine))
                {
                    if (BrazilParameters::isEnabled())
                    {
                        // For BR returned orders the fiscal information needs to be retrieved from
                        // the original sales order line.
                        SalesLine origSalesLine = null;
                        origSalesLine = SalesLine::findInventTransId(salesLine.InventTransIdReturn);
                        if (origSalesLine)
                        {
                            SalesLine_BR salesLine_BR = salesLine.salesLine_BR();
                            salesLine_BR.TaxServiceCode_BR     = origSalesLine.salesLine_BR().TaxServiceCode_BR;
                            salesLine_BR.DeliveryCFOPTable_BR  = origSalesLine.salesLine_BR().DeliveryCFOPTable_BR;
                            salesLine.packSalesLine_BR(salesLine_BR);

                            salesLine.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
                        }
                    }

                    this.initAndCreateReplacementLine(salesLine);
                }
            }
        }

        returnTable.ReturnReplacementId = this.SalesId;
        returnTable.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCopyRMALine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a return order line must be copied to the sales order.
    /// </summary>
    /// <param name = "_salesLine">The return order line.</param>
    /// <returns>
    /// true if the return order line must be copied to the sales order; otherwise, false.
    /// </returns>.
    /// <remarks>
    /// The method is meant as an extension point to change the decision whether a return order line must be copied to the sales order.
    /// </remarks>
    protected boolean mustCopyRMALine(SalesLine _salesLine)
    {
        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            return !this.kittingSkipCopySalesLine(_salesline);
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAndCreateReplacementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and creates a sales order line which is the copy of the specified return order line.
    /// </summary>
    /// <param name = "_salesLine">The return order line to be copied.</param>
    /// <returns>A sales order line which is the copy of the specified return order line.</returns>
    protected SalesLine initAndCreateReplacementLine(SalesLine _salesLine)
    {
        SalesLine replacementLine = this.initReplacementLine(_salesLine);

        SalesLineCreateLineParameters salesLineCreateLineParameters = SalesLineCreateLineParameters::construct();
        salesLineCreateLineParameters.validation                    = true;
        salesLineCreateLineParameters.calcInventQty                 = true;
        salesLineCreateLineParameters.checkReservation              = this.Reservation == ItemReservation::Automatic;
        salesLineCreateLineParameters.skipCreditLimitCheck          = true;
        salesLineCreateLineParameters.searchAgreementLine           = true;
        salesLineCreateLineParameters.mcrExchangeInventRefTransId   = _salesLine.InventTransId;

        this.createReplacementLine(replacementLine, salesLineCreateLineParameters);
        this.setPriceLockedOnReplacementLine(replacementLine);
        this.copyDiscountLines(_salesLine, replacementLine);

        return replacementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReplacementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales order line which is the copy of the specified return order line.
    /// </summary>
    /// <param name = "_salesLine">The return order line to be copied.</param>
    /// <returns>The initialized sales order line which is the copy of the specified return order line.</returns>
    protected SalesLine initReplacementLine(SalesLine _salesLine)
    {
        SalesLine replacementLine;
        replacementLine.clear();

        replacementLine.SalesType = SalesType::Sales;
        replacementLine.CurrencyCode = this.CurrencyCode;
        replacementLine.SalesId = this.SalesId;
        replacementLine.custAccount = _salesLine.custAccount;
        replacementLine.DeliveryType = _salesLine.DeliveryType;
        replacementLine.SourcingOrigin = _salesLine.SourcingOrigin;
        replacementLine.SourcingVendAccount = _salesLine.SourcingVendAccount;
        replacementLine.SourcingCompanyId = _salesLine.SourcingCompanyId;

        // copy from return line
        replacementLine.initFromSalesLine(_salesLine);

        //This call is to utilize the alternative-item functionality
        replacementLine.createAlternativeItem(replacementLine.inventDim(), replacementLine);

        // Clear not product related inventory dimensions.
        InventDim productInventDim = replacementLine.inventDim();
        productInventDim.clearNotProductDim(InventDimGroupSetup::newInventTable(replacementLine.inventTable()));
        replacementLine.setInventDimIdFromInventDim(productInventDim);

        // update with replacement sales order information
        replacementLine.initFromSalesTable(this);

        replacementLine.DefaultDimension = replacementLine.copyDimension(_salesLine.DefaultDimension);

        if (replacementLine.isStocked())
        {
            InventDim inventDim = replacementLine.inventDim();
            replacementLine.setDeliveryDateControlType(inventDim.InventDimId);
            replacementLine.initBarcode(inventDim);
            replacementLine.calcPackingUnit(inventDim);
            replacementLine.calcPackingUnitQty(inventDim);
        }

        replacementLine.PdsCWQty    = -_salesLine.PdsCWExpectedRetQty;

        replacementLine.SalesQty    = -_salesLine.ExpectedRetQty;
        replacementLine.SalesPrice  = ExchangeRateHelper::curPrice2CurPrice(replacementLine.SalesPrice, _salesLine.CurrencyCode, replacementLine.CurrencyCode);
        replacementLine.LineAmount  = -CurrencyExchangeHelper::curAmount2CurAmount(replacementLine.LineAmount, _salesLine.CurrencyCode, replacementLine.CurrencyCode);

        SalesCalcAvailableDlvDates::initDateFields(replacementLine);

        replacementLine.LineAmount  = replacementLine.calcLineAmount();

        return replacementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReplacementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the specified sales order line with the specified parameters.
    /// </summary>
    /// <param name = "_salesLine">The sales order line to be created.</param>
    /// <param name = "_salesLineCreateLineParameters">The parameters used to create the sales order line.</param>
    protected void createReplacementLine(SalesLine _salesLine, SalesLineCreateLineParameters _salesLineCreateLineParameters)
    {
        _salesLine.createLineFromParameters(_salesLineCreateLineParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceLockedOnReplacementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lock price for a retail replacement order line which is a copy of a return order line.
    /// </summary>
    /// <param name = "_replacementLine">The replacement order line which is a copy of a return order line.</param>
    protected void setPriceLockedOnReplacementLine(SalesLine _replacementLine)
    {
        if (this.isRetailSale() && _replacementLine.RecId > 0 && RetailPricingCustomizableFeatureToggle::isPreventUnintendedRecalculationEnabled())
        {
            RetailSalesLine locRetailSalesLine = RetailSalesLine::findBySalesLine(_replacementLine.RecId, true);
            locRetailSalesLine.IsPriceLocked = NoYes::Yes;
            locRetailSalesLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDiscountLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy discount lines.
    /// </summary>
    /// <param name = "_returnLine">The return order line.</param>
    /// <param name = "_replacementLine">The replacement order line.</param>
    protected void copyDiscountLines(SalesLine _returnLine, SalesLine _replacementLine)
    {
        RetailSalesDiscountLine replacementSalesDiscountLine;
        RetailSalesDiscountLine returnSalesDiscountLine;

        RecordSortedList recordSortedList = new RecordSortedList(tableNum(RetailSalesDiscountLine));
        recordSortedList.sortOrder(fieldNum(RetailSalesDiscountLine, InventTransId));

        ttsbegin;

        while select returnSalesDiscountLine
            where returnSalesDiscountLine.InventTransId == _returnLine.InventTransId
        {
            replacementSalesDiscountLine.clear();
            replacementSalesDiscountLine.initFromRetailSalesDiscountLineWithQty(returnSalesDiscountLine, _returnLine.QtyOrdered, _replacementLine.QtyOrdered, _replacementLine.CurrencyCode);
            replacementSalesDiscountLine.InventTransId = _replacementLine.InventTransId;
            replacementSalesDiscountLine.Amount = - replacementSalesDiscountLine.Amount; // the sign is always reverse as is copying from a return line.
            recordSortedList.ins(replacementSalesDiscountLine);
        }

        recordSortedList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyThirdPartyAddressFromCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies address to the <c>SalesTable</c> buffer.
    /// </summary>
    void copyThirdPartyAddressFromCust()
    {
        CustTable       fromCustTable;
        SalesLine       toSalesLine;

        LogisticsPostalAddress address;
        LogisticsLocationDefault defaultLocation;
        LogisticsLocationRole thirdPartyShipRole;
        Addressing      oldThirdPartyBillingAddr;

        ShipCarrierAddress shipCarrierAddress;
        LogisticsLocationEntity fromTpLocation;

        fromCustTable = this.custTable_CustAccount();

        address = LogisticsPostalAddress::findRecId(this.ShipCarrierPostalAddress);
        oldThirdPartyBillingAddr = address.Address;

        if (this.ShipCarrierPostalAddress)
        {
            ttsbegin;

            // Update the sales lines delivery information
            toSalesLine.skipDataMethods(true);
            update_recordset toSalesLine setting
                DeliveryName = fromCustTable.name(),
                ShipCarrierAccount = fromCustTable.ShipCarrierAccount,
                ShipCarrierAccountCode = fromCustTable.ShipCarrierAccountCode,
                ShipCarrierId = fromCustTable.ShipCarrierId,
                DlvMode = fromCustTable.DlvMode
                where toSalesLine.SalesId == this.SalesId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyThirdPartyBillingAddressToLine</Name>
				<Source><![CDATA[
    public void copyThirdPartyBillingAddressToLine()
    {
        SalesLine               salesLine;
        ShipCarrierAddress      shipCarrierAddress;
        LogisticsLocation       carrierLocation = LogisticsLocation::find(LogisticsPostalAddress::findRecId(this.ShipCarrierPostalAddress).Location);
        DlvModeId               custDlvModeId = this.custTable_CustAccount().DlvMode;

        ttsbegin;

        select firstonly ShipCarrierAccount,
                         ShipCarrierAccountCode,
                         ShipCarrierId,
                         DlvModeId
            from shipCarrierAddress
            where shipCarrierAddress.Location == carrierLocation.RecId;

        while select forupdate salesLine
            where salesLine.SalesId == this.SalesId
        {
            if (this.mustCopyThirdPartyBillingAddressToLine(salesLine))
            {
                salesLine.SalesShipCarrierMap::setShipCarrierFromLogisticsLocation(
                    carrierLocation,
                    this.ShipCarrierPostalAddress,
                    shipCarrierAddress);
                salesLine.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCopyThirdPartyBillingAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the third party billing address must be copied to the sales line.
    /// </summary>
    /// <param name = "_salesLine">The <c>SalesLine</c> record to which the address is copied.</param>
    /// <returns>true if the address is to be copied to the sales line; otherwise, false.</returns>
    protected boolean mustCopyThirdPartyBillingAddressToLine(SalesLine _salesLine)
    {
        boolean result = !_salesLine.isDropShipmentPOLineInvoiceMatched() && !_salesLine.isInterCompanyOrderLineInvoiceMatched();
        return FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance())? 
               result && !this.kittingSkipUpdateSalesLine(_salesline) : result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCarrierInfoAndThirdPartyAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes third-party shipping address and carrier information.
    /// </summary>
    void createCarrierInfoAndThirdPartyAddress()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the invoice will create customer transactions based on <c>SalesPurchOperationTye_BR</c> configuration.
    /// </summary>
    /// <returns>
    /// Returns true is operation type is not set on <c>salesTable</c> or the operation type is configured to create customer transactions.
    /// </returns>
    public boolean createCustTrans_BR()
    {
        return BrazilParameters::isEnabled() == false
            || this.salesTable_BR().SalesPurchOperationType_BR == 0
            || SalesPurchOperationType_BR::find(this.salesTable_BR().SalesPurchOperationType_BR).CreateFinancialTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the creation date of the current record.
    /// </summary>
    /// <returns>
    /// The creation date of the current record.
    /// </returns>
    /// <remarks>
    /// Retrieves the date only. Used in fact boxes.
    /// </remarks>
    display CreationDate  createDate()
    {
        return DateTimeUtil::date(this.CreatedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the invoice will create inventory transactions based on <c>SalesPurchOperationTye_BR</c> configuration.
    /// </summary>
    /// <returns>
    /// Returns true is operation type is not set on <c>salesTable</c> or the operation type is configured to inventory transactions.
    /// </returns>
    public boolean createInventTrans_BR()
    {
        return BrazilParameters::isEnabled() == false
            || this.salesTable_BR().SalesPurchOperationType_BR == false
            || SalesPurchOperationType_BR::find(this.salesTable_BR().SalesPurchOperationType_BR).CreateInventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recreateMarkupTransOnUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to recreate charges when updating the sales order.
    /// </summary>
    /// <param name="_salesTableOrig">
    /// The original <c>SalesTable</c> record being updated.
    /// </param>
    /// <returns>
    /// true if charges must be recreated; otherwise, false.
    /// </returns>
    [Replaceable]
    protected boolean recreateMarkupTransOnUpdate(SalesTable _salesTableOrig)
    {
        return this.CustAccount != _salesTableOrig.CustAccount   ||
               this.MarkupGroup != _salesTableOrig.MarkupGroup   ||
               this.DlvMode     != _salesTableOrig.DlvMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates markups for the sales order.
    /// </summary>
    /// <param name="_deleteExistingMarkupTrans">
    /// Determines whether to delete existing markups before creating the new.
    /// </param>
    /// <param name="_createTieredMarkups">
    /// Determines whether to create tiered markups. If this parameter is true then _deleteExistingMarkupTrans will be reset to false.
    /// In this case only existing tiered markups will be deleted before creating the new.
    /// </param>
    public void createMarkupTrans(boolean _deleteExistingMarkupTrans = true,
                                         boolean _createTieredMarkups = false)
    {
        using (var nestedActivityContext = SalesTable::instrumentationLogger().salesOrderActivities().createMarkupTrans(this))
        {
            if (this.SkipCreateMarkup == NoYes::No)
            {
                Amount  totalLineAmount;
                boolean deleteMarkups = _deleteExistingMarkupTrans;

                if (this.markupAllowed())
                {
                    ttsbegin;

                    if (_createTieredMarkups)
                    {
                        totalLineAmount = this.getTotalLineAmount();

                        if (RetailCharges::isRetailOrderWithAdvancedAutoCharges(this))
                        {
                            RetailCharges::deleteTieredCharges(this);
                        }
                        else 
                        {
                            MarkupTrans::deleteTieredCharges(this.TableId, this.RecId);
                        }

                        deleteMarkups = false;
                    }

                    if (!_createTieredMarkups || totalLineAmount > 0)
                    {
                        MarkupTransInsertParameters parameters      = this.instantiateMarkupTransInsertParameters();
                        parameters.TotalAmount                      = totalLineAmount;
                        parameters.DeleteExistingMarkupTrans        = deleteMarkups;
                        parameters.ModuleType                       = MarkupModuleType::Cust;
                        parameters.ShouldDoRetailChargeProration    = _createTieredMarkups && parameters.ShouldDoRetailChargeProration;
        
                        MarkupTransInsert markupTransInsert = MarkupTransInsert::construct();

                        markupTransInsert.insert(parameters);

                        if (this.DlvMode)
                        {
                            // Handle delivery charges
                            parameters                                  = this.instantiateMarkupTransInsertParameters();
                            parameters.TotalAmount                      = totalLineAmount;
                            parameters.ModuleType                       = MarkupModuleType::Delivery;
                            parameters.ShouldDoRetailChargeProration    = _createTieredMarkups && parameters.ShouldDoRetailChargeProration;

                            markupTransInsert = MarkupTransInsert::construct();

                            markupTransInsert.insert(parameters);
                        }

                        if (this.isInterCompanyOrder())
                        {
                            Markup::setMarkupKeepForIntercompany(this);
                        }
                    }

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateMarkupTransInsertParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>MarkupTransInsertParameters</c> used to create the markups for the sales order.
    /// </summary>
    /// <returns>The instantiated <c>MarkupTransInsertParameters</c>.</returns>
    protected MarkupTransInsertParameters instantiateMarkupTransInsertParameters()
    {
        MarkupTransInsertParameters parameters = MarkupTransInsertParameters::construct();

        parameters.initFromSalesTable(this);
        
        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOneTimeAccount</Name>
				<Source><![CDATA[
    void createOneTimeAccount()
    {
        boolean resetTmpCustomerName;

        if (!this.DeliveryName)
        {
            //DeliveryName is used as customer name and is mandatory.
            //The customer name is updated again in transferToOnetimeCustomer which is called as soon as the sales order is being created.
            this.DeliveryName = "@SYS23011";
            resetTmpCustomerName = true;
        }

        this.CustAccount = CustTable::createOneTimeAccount(this);
        this.initFromCustTable();

        if (resetTmpCustomerName)
        {
            this.DeliveryName = '';
            this.SalesName = '';
        }

        if (!this.InvoiceAccount)
        {
            this.InvoiceAccount = this.CustAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentSched</Name>
				<Source><![CDATA[
    void createPaymentSched()
    {
        CustVendPaymSched   custVendPaymSched;
        SalesTotals         salesTotals = SalesTotals::construct(this, SalesUpdate::All);

        salesTotals.prepareTotalAmountCalculation();
        salesTotals.calc();

        custVendPaymSched = CustVendPaymSched::construct(SysModule::Cust,this);
        custVendPaymSched.setSalesTotals(salesTotals);
        custVendPaymSched.createPaymSched(PaymSched::find(this.PaymentSched));

        if (CFMParameters::isModuleEnabled())
        {
            CFMPlannedPaymentCalc cfmPlannedPaymentCalc = CFMPlannedPaymentCalc::construct(this);
            if (cfmPlannedPaymentCalc)
            {
                cfmPlannedPaymentCalc.calc();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReplacementOrderAllowed</Name>
				<Source><![CDATA[
    public boolean createReplacementOrderAllowed(SalesLine _salesLine = null)
    {
        boolean ret = false;
        SalesLine localSalesLine = _salesLine as SalesLine;

        if (this.isInterCompanyOrder()
        &&  this.InterCompanyDirectDeliveryOrig)
        {
            ret = false;
        }
        else if (this.ReturnStatus == ReturnStatusHeader::Created
             && !this.ReturnReplacementId
             && !this.interCompanyReplacementRegistered())
        {
            if (!localSalesLine.isStocked())
            {
                SalesLine findStockedLine;
                select firstonly findStockedLine
                    where findStockedLine.SalesId == this.SalesId
                        && findStockedLine.StockedProduct;

                ret = findStockedLine.RecId;
            }
            else
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnMarkupTrans</Name>
				<Source><![CDATA[
    void createReturnMarkupTrans()
    {
        if (this.markupAllowed())
        {
            Markup::deleteReasonCodeAutoCharges(this);
            Markup::insertReturnMarkupTrans(HeadingLine::Heading,
                                           MarkupModuleType::Cust,
                                           this,
                                           this.CustAccount,
                                           this.MarkupGroup,
                                           this.LanguageId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditCardAuthorizationCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the authorization code that came from the credit card processor.
    /// </summary>
    /// <returns>
    /// The authorization code returned by the credit card processor.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display CreditCardAuthorization creditCardAuthorizationCode()
    {
        return CreditCardAuthTrans::findValidPreApproval(this.SalesId).Authorization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditCardBypassCreditLimit</Name>
				<Source><![CDATA[
    boolean creditCardBypassCreditLimit()
    {
        return this.payment().CreditCardCreditCheck == CreditCardCreditCheck::ByPass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditCardDoPreAuthorize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Authorizes a credit card for a sales order.
    /// </summary>
    /// <param name="_presentExtraMsg">
    /// true to display extra messages; otherwise, false.
    /// </param>
    /// <returns>
    /// true if the authorization process was sucessful or not needed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Authorization is required for a sales order if:
    /// 1) the credit cards feature is configured,
    /// 2) the payment type of the sales order is card card
    /// 3) credit card processing is configured to require authorization and
    /// 4) the total amount is greater than zero
    /// </remarks>
    public boolean creditCardDoPreAuthorize(boolean _presentExtraMsg = true)
    {
        // Only pre-authorization credit card when needed
        if (this.isCreditCardPaymentType() && CustParameters::find().CreditCardPreAuthorization &&
            SalesTotals_Sales::construct(this, SalesUpdate::All).totalAmount() > 0)
        {
            return CreditCardProcess::doPreAuth(this, _presentExtraMsg);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditCardPreauthorizationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the preauthorization amount charged to the credit card.
    /// </summary>
    /// <returns>
    /// The preauthorization amount for the credit card.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display CreditCardPreauthorizationAmount creditCardPreauthorizationAmount()
    {
        return CreditCardAuthTrans::findValidPreApproval(this.SalesId).ApprovalAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerEmail</Name>
				<Source><![CDATA[
    display Email customerEmail()
    {
        return this.custTable_CustAccount().email();
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerName</Name>
				<Source><![CDATA[
    display CustName customerName()
    {
        return this.partyTable_CustAccount().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerPhone</Name>
				<Source><![CDATA[
    display Phone customerPhone()
    {
        return this.custTable_CustAccount().phone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable_CustAccount</Name>
				<Source><![CDATA[
    CustTable custTable_CustAccount(boolean _forUpdate = false)
    {
        return CustTable::find(this.CustAccount, _forUpdate) as CustTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable_InvoiceAccount</Name>
				<Source><![CDATA[
    CustTable  custTable_InvoiceAccount(boolean  _forUpdate = false)
    {
        return CustTable::find(this.InvoiceAccount, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void  delete()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        SalesInstrumentationLogger logger = SalesTable::instrumentationLogger();

        SalesOrderInstrumentationActivities salesOrderActivities = logger.salesOrderActivities();
        
        using (var activityContext = salesOrderActivities.delete(this))
        {
            SalesTable salesTable_Orig = this.orig();
            MCRReturnSalesTable     mcrReturnSalesTable;

            logger.logStackTrace(strFmt('Deleting Sales Order:%1', this.RecId));

            #ISOCountryRegionCodes

            this.type().deleting();

            // Before deletion of release order, remove agreement links
            this.unlinkAgreement(true);

            if (this.returnItem() && this.ReturnReplacementId)
            {
                if (this.mcrIsCallCenter())
                {
                    mcrReturnSalesTable = this.mcrReturnSalesTable();
                }
            }

            if (BankLCExportFeatureChecker::checkBankLCExportEnabled())
            {
                BankLCExport bankLCExport = BankLCExport::findBySalesTable(this.SalesId, true);

                if (bankLCExport && bankLCExport.RecId != 0)
                {
                    if (bankLCExport.validateDelete())
                    {
                        bankLCExport.delete();
                    }
                }
            }

            var deleteSalesLines = SalesTableDeleteLines::newFromSalesTable(this);
            deleteSalesLines.run();
            boolean isSalesLineDeleted = deleteSalesLines.anySalesLinesDeleted();
        
            if (WHSParameters::find().AutoCleanEmptyLoadManifest && this.validateDeleteWHSWorkTable())
            {
                WHSWorkTable whsWorkTable;
                delete_from whsWorkTable
                    where whsWorkTable.OrderNum      == this.SalesId
                        &&  whsWorkTable.WorkTransType == WHSWorkTransType::Sales
                        && (whsWorkTable.WorkStatus    == WHSWorkStatus::Open || whsWorkTable.WorkStatus == WHSWorkStatus::Closed);
            }

            if (SalesTable::exist(this.SalesId)) //Check salesTable since it could have been deleted in call to salesLine.delete()
            {
                if (isSalesLineDeleted) // Saleslines update the status of sales order so we need to reread to avoid update conflicts
                {
                    this.reread();
                }

                SalesTableType salesTableType = this.type();

                // Clear sales id reference on the service objects created from this sales order
                SMAServiceObjectRelation    serviceObjectRelation;
                serviceObjectRelation.skipDataMethods(true);
                update_recordset serviceObjectRelation
                    setting SalesId = ''
                    where serviceObjectRelation.SalesId == this.SalesId;

                if (this.QuotationId)
                {
                    SalesQuotationTable         salesQuotationTable;

                    salesQuotationTable.skipDataMethods(true);
                    update_recordset salesQuotationTable
                        setting SalesIdRef = ''
                        where salesQuotationTable.QuotationStatus == SalesQuotationStatus::Confirmed
                            && salesQuotationTable.QuotationId     == this.QuotationId
                            && salesQuotationTable.SalesIdRef      == this.SalesId;
                }

                if (this.SkipUpdate != InterCompanySkipUpdate::InterCompany
                &&  this.SkipUpdate != InterCompanySkipUpdate::Both
                &&  this.isInterCompanyOrder()
                &&  salesTableType.interCompanyCreateAllowed())
                    salesTableType.interCompanyDelete();

                if (this.SkipUpdate != InterCompanySkipUpdate::Internal
                &&  this.SkipUpdate != InterCompanySkipUpdate::Both
                &&  salesTableType.canCreatePurchOrder()
                &&  salesTableType.interCompanySalesReferenceExist())
                    salesTableType.purchTableDelete(this);

                SpecTransManager::newFromSpec(this).deleteAll();

                if (SalesParameters::find().CancelSales == NoYes::Yes)
                {
                    //The line delete resets the header status to backOrder, so applying original status again.
                    this.SalesStatus = salesTable_Orig.SalesStatus;
                    SalesTableDelete::createFromSalesTable(this);
                }

                SalesTableLinks salesTableLinks = SalesTableLinks::find(this.SalesId,true);
                if (salesTableLinks)
                {
                    salesTableLinks.delete();
                }

                if (TaxIntegrationUtils::isTransitDocumentEnabled())
                {
                    this.TransitDocumentTransactionMap_IN::deleteTransitDocumentsForHeader();
                }

                salesTableType.deleteTaxUncommitted();

                RetailAttributeHelper::removeAllAttributeReferencesPerInstance(this.SalesId,this.DataAreaId);

                salesOrderActivities.logSalesOrder(activityContext, this);

                super();

                // Enter order events
                this.insertOrderEvent(salesTable_Orig);
            }

            if (this.returnItem() && this.ReturnReplacementId)
            {
                if (mcrReturnSalesTable.ApplyCreditToExchange)
                {
                    this.MCRDeleteExchange();
                }
                else
                {
                    SalesTable replacementOrder = SalesTable::find(this.ReturnReplacementId, true);

                    if (replacementOrder)
                    {
                        replacementOrder.ReturnItemNum = '';
                        replacementOrder.update();
                    }
                }
            }

            TradeBLWIJournalPurposeCodes::deleteRecord(this.RecId, TradeBLWITypeOfForm::SalesTable);

            // Update the CRM transaction log
            smmTransLog::initTrans(this, smmLogAction::delete);

            // Delete notifications for the deleted sales order.
            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                RetailEventNotificationAction::deleteRecords(this.RecId);
            }

            this.type().deleted();
            activityContext.addCustomProperty(SalesOrderInstrumentationActivities::SalesId, this.SalesId);
            activityContext.addCustomProperty(tableStr(CompanyInfo), int642str(CompanyInfo::current()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new <c>Query</c> instance which retrieves all lines for this sales order.
    /// </summary>
    /// <param name="_forUpdate">Select the records for update?</param>
    /// <returns>Query retrieving all sales lines for the current order.</returns>
    public Query linesQuery(boolean _forUpdate = false)
    {
        var query = new Query();
        var qbds = query.addDataSource(tableNum(SalesLine));
        qbds.update(_forUpdate);
        qbds.addRange(fieldNum(SalesLine, SalesId)).value(queryValue(this.SalesId));
        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            qbds.addOrderByField(fieldNum(SalesLine, LineNum), SortOrder::Descending);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    LogisticsPostalAddress deliveryAddress()
    {
        return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddressing</Name>
				<Source><![CDATA[
    display LogisticsAddressing deliveryAddressing()
    {
        return this.deliveryAddress().Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryCFOPTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the delivery cfop code of the sales order.
    /// </summary>
    /// <returns>
    /// The delivery cfop code of the sales order.
    /// </returns>
    public RecId deliveryCFOPTable_BR()
    {
        SalesLine salesLine;
        SalesLine_BR salesLine_BR;

        select DeliveryCFOPTable_BR from salesLine_BR
            where salesLine_BR.DeliveryCFOPTable_BR != 0
            exists join salesLine
            where  salesLine.RecId == salesLine_BR.SalesLine
                && salesLine.SalesId == this.SalesId;

        return salesLine_BR.DeliveryCFOPTable_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryCNPJCPFNUM_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the delivery CNPJ or CPF for the current record.
    /// </summary>
    /// <returns>
    /// Returns the CNPJ or CPF of the customer if the adddress is a primary address.
    /// Returns the CNPJ or CPF related to delivery <c>logisticsPostalAddress</c> if the adddress is not a primary address.
    /// </returns>
    public display CNPJCPFNum_BR deliveryCNPJCPFNUM_BR()
    {
        DirPartyLocation dirPartyLocation;

        if (!BrazilParameters::isEnabled())
            return '';

        dirPartyLocation = DirPartyLocation::findByPartyLocation(this.custTable_CustAccount().Party, this.deliveryLocation());

        if (!dirPartyLocation.RecId ||  dirPartyLocation.IsPrimary)
        {
            return this.custTable_CustAccount().cnpjcpfNum_BR;
        }
        else
        {
            return (select cnpjcpfNum_BR from logisticsLocationExt
                where logisticsLocationExt.Location == this.deliveryLocation()).cnpjcpfNum_BR;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateDisplay</Name>
				<Source><![CDATA[
    display DlvDate deliveryDateDisplay(DlvDate _blankDate = dateNull())
    {
        if (this.ShippingDateConfirmed || this.ShippingDateRequested)
        {
            return this.ShippingDateConfirmed ? this.ShippingDateConfirmed : this.ShippingDateRequested;
        }

        if (prmisDefault(_blankDate))
        {
            return InventOrderEntryDeadlineTable::effectiveOrderDate(this.InventSiteId,CustTable::find(this.CustAccount).OrderEntryDeadlineGroupId);
        }
        return _blankDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryIENum_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the delivery IE for the current record.
    /// </summary>
    /// <returns>
    /// Returns the IE of the customer if the adddress is a primary address.
    /// Returns the IE related to delivery <c>logisticsPostalAddress</c> if the adddress is not a primary address.
    /// </returns>
    public display IENum_BR deliveryIENum_BR()
    {
        DirPartyLocation dirPartyLocation;

        if (!BrazilParameters::isEnabled())
            return '';

        dirPartyLocation = DirPartyLocation::findByPartyLocation(this.custTable_CustAccount().Party, this.deliveryLocation());

        if (!dirPartyLocation.RecId ||  dirPartyLocation.IsPrimary)
        {
            return this.custTable_CustAccount().ieNum_BR;
        }
        else
        {
            return (select ieNum_BR from logisticsLocationExt
                where logisticsLocationExt.Location == this.deliveryLocation()).ieNum_BR;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryLocation</Name>
				<Source><![CDATA[
    public LogisticsLocationRecId deliveryLocation()
    {
        return LogisticsPostalAddress::getLocation(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryPhone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the telephone number that is associated with the delivery of a sales order.
    /// </summary>
    /// <returns>
    /// The telephone number that is associated with the delivery of a sales order; otherwise, an empty
    /// string.
    /// </returns>
    public Phone deliveryPhone()
    {
        Phone                       phone;
        LogisticsLocationRecId      locationRecId;
        LogisticsLocation           locationChild;
        LogisticsElectronicAddress  logisticsElectronicAddress;

        // First see if a contact person phone number is available
        if (this.ContactPersonId)
        {
            phone = this.contactPerson().phone();
            if (phone)
            {
                return phone;
            }
        }

        // See if a phone number associated with the delivery location is available
        locationRecId = this.deliveryLocation();
        if (locationRecId)
        {
            // Find a phone number associated with the postal delivery location
            select firstonly TableId from locationChild
                where locationChild.ParentLocation  == locationRecId
                    && locationChild.IsPostalAddress == NoYes::No
                join Locator from logisticsElectronicAddress
                where logisticsElectronicAddress.Location   == locationChild.RecId
                    &&   logisticsElectronicAddress.Type       == LogisticsElectronicAddressMethodType::Phone
                    &&   logisticsElectronicAddress.Locator    != '';
            phone = logisticsElectronicAddress.Locator;
            if (phone)
            {
                return phone;
            }
        }

        return this.customerPhone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryTransDateTime</Name>
				<Source><![CDATA[
    TransDateTime deliveryTransDateTime()
    {
        return DateTimeUtil::newDateTime(this.DeliveryDate,0,DateTimeUtil::getCompanyTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispLastConsDate_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the latest consolidation date for this sales order.
    /// </summary>
    /// <returns>
    /// Consolidation date.
    /// </returns>
    public display CustVendConsDate_JP dispLastConsDate_JP()
    {
        return this.salesPurchTableInterface().getLastConsDate_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispLastConsId_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets latest consolidation invoice Id for this purchase order.
    /// </summary>
    /// <returns>
    /// Consolidation invoice Id.
    /// </returns>
    public display CustConsId_JP dispLastConsId_JP()
    {
        return this.salesPurchTableInterface().getLastConsId_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBankDocumentInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the title on top of the preview pane on the <c>BankLCExportListPage </c>form.
    /// </summary>
    /// <returns>
    /// The title field of the preview pane.
    /// </returns>
    public display Caption displayBankDocumentInfo()
    {
        return strFmt("@SYS327590", this.SalesId, this.BankDocumentType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProformaAmountForBankLC</Name>
				<Source><![CDATA[
    /// <summary>
    /// The display method to display the total proforma invoice amount of the sales order.
    /// </summary>
    /// <returns>
    /// The total proforma invoice amount.
    /// </returns>
    display AmountCur displayProformaAmountForBankLC()
    {
        return BankLCExport::amountProformaTotalInclTax(this.SalesId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dlvModeMandatory</Name>
				<Source><![CDATA[
    boolean dlvModeMandatory()
    {
        return this.type().dlvModeMandatory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editContactPersonName</Name>
				<Source><![CDATA[
    edit ContactPersonName  editContactPersonName(boolean _set, ContactPersonName _name)
    {
        ContactPersonName   name = _name;
        ContactPerson       contactPerson;
        ContactPersonId     contactPersonId;

        if (_set)
        {
            if (name)
            {
                contactPersonId = this.ContactPersonId;
                contactPerson = ContactPerson::find(_name);
                this.ContactPersonId = contactPerson.ContactPersonId;
                if (this.ContactPersonId)
                {
                    name = contactPerson.personName();
                }
                else
                {
                    DirPartyTable       partyTable;
                    CustTable           custTable;

                    select firstonly ContactPersonId from contactPerson
                        join TableId from custTable
                         where custTable.AccountNum == this.CustAccount
                            && contactPerson.ContactForParty ==  custTable.Party
                        join Name from partyTable
                            where partyTable.RecId == contactPerson.Party
                               && partyTable.Name  like name;

                    if (contactPerson.ContactPersonId)
                    {
                        this.ContactPersonId=contactPerson.ContactPersonId;
                        name=partyTable.Name;
                    }
                }
                if (contactPersonId != this.ContactPersonId)
                {
                    if (this.checkContactPerson())
                    {
                        this.initFromContactInfo();
                        if (FormDataUtil::getFormDataSource(this))
                        {
                            FormDataUtil::getFormDataSource(this).refresh();
                        }
                    }
                    else
                    {
                        this.ContactPersonId = contactPersonId;
                    }
                }
            }
            else
            {
                this.ContactPersonId='';
            }
        }
        else
        {
            name = this.contactPersonName();
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCreditCard</Name>
				<Source><![CDATA[
    // NOTE: The value in parameter _creditCardNumber is not a credit card number
    // (EDT CreditCardNumber, type string) but rather the value of CreditCardCust.RecId converted
    // to a string by the lookup form (CreditCardLookup) for the form field.
    // There are two reasons for this:
    // 1) Becuase this is an edit method, it must have a certain signature, RecId is not allowed.
    // 2) We do not want to pass the real credit card number around on the client.
    // The lookup for the credit card number field on a form returns the RecId and this
    // method uses that value to lookup the CreditCardCust record.  Using that (non-HBI)
    // record we then get the obscured credit card number (leading asterisks and last 4
    // digits) and display that string.
    [SysClientCacheDataMethodAttribute(true)]
    edit CreditCardNumber editCreditCard(boolean _set, CreditCardNumber _creditCardNumber)
    {
        RecId recId = str2int64(strRTrim(strLTrim(_creditCardNumber)));
        CreditCardNumber creditCardNumber;
        CreditCardCust creditCardCust;

        boolean okToChange(RefRecId _creditCard)
        {
            if (this.CreditCardCustRefId == _creditCard) // same CC?
            {
                return true; // Yes, same one, no change
            }
            return this.cancelPreAuthorization(); // Yes, see if we need to cancel the PreAuth
        }

        if (_set)
        {
            if (okToChange(recId))
            {
                RecId oldCreditCard = this.CreditCardCustRefId;
                this.CreditCardCustRefId = 0;

                if (recId)
                {
                    creditCardCust = CreditCardCust::find(recId);

                    if (creditCardCust.RecId && this.InvoiceAccount == creditCardCust.CustAccount)
                    {
                        this.CreditCardCustRefId = creditCardCust.RecId;
                        if (!this.validateField(fieldNum(SalesTable, CreditCardCustRefId)))
                        {
                            this.CreditCardCustRefId = oldCreditCard;
                        }
                    }
                }

                creditCardNumber = CreditCard::creditCardNumber(this.CreditCardCustRefId);

                return creditCardNumber;
            }
        }

        // Double check to make sure the record hasn't been deleted
        if (this.CreditCardCustRefId && CreditCardCust::exist(this.CreditCardCustRefId))
        {
            creditCardNumber = CreditCard::creditCardNumber(this.CreditCardCustRefId);
        }
        else
        {
            this.CreditCardCustRefId = 0;
        }

        return creditCardNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editExportSales_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the export sales value for the sales order.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the value has been modified.
    /// </param>
    /// <param name="_value">
    /// The new export sales value.
    /// </param>
    /// <returns>
    /// The export sales value.
    /// </returns>
    public edit PlExportSales editExportSales_PL(boolean _set, PlExportSales _value)
    {
        #ISOCountryRegionCodes
        boolean isExportSalesOrder;

        if (isConfigurationkeyEnabled(configurationKeyNum(LedgerBasicSalesTax)) &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            if (_set)
            {
                if (!ExportSalesOrder::existSalesOrder(this.SalesId))
                {
                    if (_value)
                    {
                        ExportSalesOrder::createFromSalesOrder(this.SalesId);
                    }
                }
                else
                {
                    if (!_value)
                    {
                        ExportSalesOrder::deleteBySalesOrder(this.SalesId);
                    }
                }

                isExportSalesOrder = _value;
            }
            else
            {
                isExportSalesOrder = ExportSalesOrder::existSalesOrder(this.SalesId);
            }
        }

        return isExportSalesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editFixedExchRate</Name>
				<Source><![CDATA[
    public edit SalesFixedExchRate editFixedExchRate(boolean set, SalesFixedExchRate _exchRate)
    {
        ExchangeRateHelper exchangeRateHelper = this.getExchangeRateHelper();

        if (set)
        {
            this.FixedExchRate = exchangeRateHelper.prepareExchangeRateForStorage(_exchRate);
            this.setReportingCurrencyFixedExchangeRate();
        }
        else
        {
            _exchRate = exchangeRateHelper.displayStoredExchangeRate(this.FixedExchRate);
        }

        return _exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReportingCurrencyFixedExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reporting currency fixed exchange rate.
    /// </summary>
    /// <param name = "_set">A boolean value that indicates whether the reporting currency fixed exchange rate is set.</param>
    /// <param name = "_exchRate">The new reporting currency fixed exchange rate when the <paramref name="set" /> value is true.</param>
    /// <returns>The reporting currency fixed exchange rate of the record.</returns>
    internal edit CustExchRate editReportingCurrencyFixedExchangeRate(boolean _set, CustExchRate _exchRate)
    {
        return this.CustVendReportingCurrencyFixedExchangeRate::editReportingCurrencyFixedExchangeRate(_set, _exchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCurrencyExchangeRateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the reporting currency exchange rate field ID.
    /// </summary>
    /// <returns>
    ///     The reporting currency exchange rate field ID.
    /// </returns>
    /// <remarks>
    ///     Used with the <c>CustVendReportingCurrencyFixedExchangeRate</c> map.
    /// </remarks>
    internal FieldId getReportingCurrencyExchangeRateField()
    {
        return fieldNum(SalesTable, ReportingCurrencyFixedExchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the currency code.
    /// </summary>
    /// <returns>
    ///     The currency code.
    /// </returns>
    /// <remarks>
    ///     Used with the <c>CustVendReportingCurrencyFixedExchangeRate</c> map.
    /// </remarks>
    internal CurrencyCode getCurrencyCode()
    {
        return this.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an <c>ExchangeRateHelper</c> for the <c>SalesTable</c>.
    /// </summary>
    /// <returns>An exchange rate helper.</returns>
    private ExchangeRateHelper getExchangeRateHelper()
    {
        return ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason code.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the reason code is set.
    /// </param>
    /// <param name="_reasonCode">
    /// The new reason code when the <paramref name="set" /> value is true.
    /// </param>
    /// <returns>
    /// The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCode(boolean _set, ReasonCode _reasonCode)
    {
        ReasonCode      reasonCode = strLRTrim(_reasonCode);
        RefRecId        originalReasonRefRecId;
        FormDataSource  formSalesTable;

        if (_set)
        {
            if (this.CreditNoteReasonCode == 0)
            {
                this.CreditNoteReasonCode = ReasonTableRef::createFromCode(reasonCode);
            }
            else
            {
                if (reasonCode)
                {
                    //The reasonCode value is not blank.
                    // Save the current ReasonRefRecID for comparision.
                    originalReasonRefRecId = this.CreditNoteReasonCode;
                    this.CreditNoteReasonCode = ReasonTableRef::updateCode(reasonCode, this.CreditNoteReasonCode);

                    if (this.CreditNoteReasonCode == originalReasonRefRecId)
                    {
                        // The reason code has changed but the referenced record ID has not.
                        // Get the current FormDataSource and set forceWrite() to true so that
                        // data validation (validateWrite()) is performed on the updated reason code.
                        formSalesTable = FormDataUtil::getFormDataSource(this);
                        if (formSalesTable)
                        {
                            formSalesTable.forceWrite(true);
                        }
                    }
                }
                else
                {
                    // The reasonCode is blank.
                    this.CreditNoteReasonCode = ReasonTableRef::updateCode(reasonCode, this.CreditNoteReasonCode);
                }
            }

            // Update the reason comment with the default comment value for the updated reason code.
            // A blank reasonCode will result in a blank comment because a blank reasonCode
            // will return an empty reasonTable buffer.

            this.editReasonComment(true, ReasonTable::find(_reasonCode).Description);
        }
        else
        {
            reasonCode = ReasonTableRef::find(this.CreditNoteReasonCode).Reason;
        }

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCodeTH</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets and sets the reason code.
    /// </summary>
    /// <param name="set">
    ///     true if the reason code is set; otherwise, set to false.
    /// </param>
    /// <param name="_reasonCode">
    ///     The new reason code when <paramref name="set" /> is true.
    /// </param>
    /// <returns>
    ///     The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCodeTH(boolean set, ReasonCode _reasonCode)
    {
        return this.salesTableExtensionTH().editReasonCode(set, _reasonCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason comment.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that indicates whether the reason code is set.
    /// </param>
    /// <param name="_reasonComment">
    /// The new reason comment when the <paramref name="set" /> value is true.
    /// </param>
    /// <returns>
    /// The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonComment editReasonComment(boolean set, ReasonComment _reasonComment)
    {
        ReasonComment   reasonComment = _reasonComment;

        if (set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (this.CreditNoteReasonCode == 0)
            {
                this.CreditNoteReasonCode = ReasonTableRef::createFromComment(reasonComment);
            }
            else
            {
                this.CreditNoteReasonCode = ReasonTableRef::updateComment(reasonComment, this.CreditNoteReasonCode);
            }
        }
        else
        {
            reasonComment = ReasonTableRef::find(this.CreditNoteReasonCode).ReasonComment;
        }

        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>euroTriangulation</Name>
				<Source><![CDATA[
    EUROTriangulation euroTriangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (this.SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
        {
            if (this.settleExchRate())
            {
                return NoYes::No;
            }
        }

        if (this.FixedExchRate)
        {
            return NoYes::No;
        }

        return Currency::triangulation(this.CurrencyCode, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluateAddTmsChargeToRetailOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates whether transportation charges can be added to the retail sales order
    /// based on the <c>TMSDlvTerm</c> setup.
    /// </summary>
    /// <returns>
    /// <c>NoYes::Yes</c> if the transportation charge can be added; <c>NoYes::No</c> otherwise.
    /// </returns>
    public NoYes evaluateAddTmsChargeToRetailOrder()
    {
        NoYes ret;

        if (this.isRetailSale())
        {
            ret = TMSDlvTerm::find(this.DlvTerm).AddChargeToRetailOrderPolicy;
        }
        else
        {
            ret = NoYes::Yes;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluateAddTmsChargeToSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates whether transportation charges can be added to the sales order based on
    /// the <c>TMSDlvTerm</c> setup.
    /// </summary>
    /// <returns>
    /// <c>NoYes::Yes</c> if the transportation charge can be added; <c>NoYes::No</c> otherwise.
    /// </returns>
    public NoYes evaluateAddTmsChargeToSalesOrder()
    {
        return TMSDlvTerm::find(this.DlvTerm).TransferChargesToOrder
            && this.evaluateAddTmsChargeToRetailOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), boolean throwOnError = false)
    {
        CustExchRate    exchRate = 0;

        if (this.SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
        {
            exchRate = this.settleExchRate(throwOnError);
        }

        if (!exchRate)
        {
            if (this.FixedExchRate)
            {
                exchRate = this.FixedExchRate;
            }
            else
            {
                exchRate = ExchangeRateHelper::exchRate(this.CurrencyCode, _date);
            }
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reporting currency exchange rate.
    /// </summary>
    /// <param name = "_date">Date used to calculate reporting currency exchange rate.</param>
    /// <returns>The reporting currency exchange rate.</returns>
    [Hookable(false)]
    internal ReportingCurrencyExchRate reportingCurrencyExchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        ReportingCurrencyExchRate reportingCurrencyExchRate = 0;

        if (this.ReportingCurrencyFixedExchRate)
        {
            reportingCurrencyExchRate = this.ReportingCurrencyFixedExchRate;
        }
        else
        {
            Ledger ledger = Ledger::findByLegalEntity(this.companyInfo().RecId);
            
            if (ledger.ReportingCurrency)
            {
                ExchangeRateHelper helper = ExchangeRateHelper::newExchangeDate(ledger.RecId, this.CurrencyCode, _date);
                helper.parmToCurrency(ledger.ReportingCurrency);
                helper.parmExchangeRateTypeRecId(ledger.ReportingCurrencyExchangeRateType);
                reportingCurrencyExchRate = helper.getExchangeRate1();
            }

            if (CustInvoiceJourUseReporCurrFromSettleFlight::instance().isEnabled() &&
                this.SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
            {
                reportingCurrencyExchRate = this.settleExchRateReporting();
            }

            
        }

        return reportingCurrencyExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        ExchRate exchRateSecondary;

        if (this.SettleVoucher == SettlementType::SelectedTransact &&
            SalesParameters::find().UseSettleExchRate &&
            (SpecTrans::getSpecTransCount(this.company(), this.TableId, this.RecId) > 0))
        {
            exchRateSecondary = 0;
        }
        else if (this.FixedExchRate)
        {
            exchRateSecondary = 0;
        }
        else
        {
            exchRateSecondary = ExchangeRateHelper::exchRateSecond(this.CurrencyCode, _date);
        }

        return exchRateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reporting currency exchange rate secondary.
    /// </summary>
    /// <param name = "_date">Date used to calculate reporting currency exchange rate secondary.</param>
    /// <returns>The reporting currency exchange rate secondary.</returns>
    [Hookable(false)]
    internal ReportingCurrencyExchRateSecondary reportingCurrencyExchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        ReportingCurrencyExchRateSecondary reportingCurrencyExchRateSecondary;

        if (this.ReportingCurrencyFixedExchRate)
        {
            reportingCurrencyExchRateSecondary = 0;
        }
        else
        {
            Ledger ledger = Ledger::findByLegalEntity(this.companyInfo().RecId);
            
            if (ledger.ReportingCurrency)
            {
                ExchangeRateHelper helper = ExchangeRateHelper::newExchangeDate(ledger.RecId, this.CurrencyCode, _date);
                helper.parmToCurrency(ledger.ReportingCurrency);
                helper.parmExchangeRateTypeRecId(ledger.ReportingCurrencyExchangeRateType);

                reportingCurrencyExchRateSecondary = helper.getExchangeRate2();
            }
        }

        return reportingCurrencyExchRateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDirectDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is a line with a direct delivery for the current sales order.
    /// </summary>
    /// <returns>True if there is a line with a direct delivery; otherwise, false</returns>
    boolean existDirectDelivery()
    {
        SalesLine   salesLine;

        select firstonly RecId from salesLine where
            salesLine.SalesId           == this.SalesId &&
            salesLine.InventRefId       != ''           &&
            salesLine.DeliveryType      == TradeLineDlvType::DropShip;

        return salesLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existNonDirectDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is a line with a non direct delivery for the current sales order.
    /// </summary>
    /// <returns>True if there is a line with a non direct delivery; otherwise, false</returns>
    boolean existNonDirectDelivery()
    {
        SalesLine   salesLine;

        select firstonly RecId from salesLine where
            salesLine.SalesId           == this.SalesId &&
            (salesLine.InventRefId      == ''           ||
            salesLine.DeliveryType      != TradeLineDlvType::DropShip);

        return salesLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existingJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the journals exist for a <c>SalesTable</c> record.
    /// </summary>
    /// <param name="_journalTypes">
    /// A packed set of journal types to check; optional.
    /// </param>
    /// <param name="_continueOnFound">
    /// A Boolean value that indicates whether the check must continue after the first journal is found;
    /// optional.
    /// </param>
    /// <returns>
    /// A container that contains a set of Boolean values that indicate if a journal exists.
    /// </returns>
    container existingJournals(
        container   _journalTypes    = conNull(),
        boolean     _continueOnFound        = true)
    {
        container   existingJournalContainer;
        Set         journalsToCheckSet;
        boolean     checkQuotation;
        boolean     checkConfirmation;
        boolean     checkPickingList;
        boolean     checkPackingSlip;
        boolean     checkInvoice;
        boolean     found;
        boolean     checkInvoice4Payment;
        boolean     checkFacture;

        #ISOCountryRegionCodes

        boolean     isCountryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        void setExistJournal(boolean _exists, int _pos)
        {
            existingJournalContainer = conPoke(existingJournalContainer, _pos, _exists);
            if (_exists)
            {
                found = true;
            }
        }

        if (_journalTypes)
        {
            journalsToCheckSet = Set::create(_journalTypes);
        }
        checkQuotation       = journalsToCheckSet ? journalsToCheckSet.in(DocumentStatus::Quotation)   : true;
        checkConfirmation    = journalsToCheckSet ? journalsToCheckSet.in(DocumentStatus::Confirmation): true;
        checkPickingList     = journalsToCheckSet ? journalsToCheckSet.in(DocumentStatus::PickingList) : true;
        checkPackingSlip     = journalsToCheckSet ? journalsToCheckSet.in(DocumentStatus::PackingSlip) : true;
        checkInvoice         = journalsToCheckSet ? journalsToCheckSet.in(DocumentStatus::Invoice)     : true;
        if (isCountryRegion_RU)
        {
            checkInvoice4Payment = journalsToCheckSet ? journalsToCheckSet.in(DocumentStatus::Invoice4Paym_RU) : true;
            checkFacture         = journalsToCheckSet ? journalsToCheckSet.in(DocumentStatus::Facture_RU)      : true;

            existingJournalContainer = [false,
                                        false,
                                        false,
                                        false,
                                        false,
                                        false,
                                        false,
                                        false,
                                        false];
        }
        else
        {
            existingJournalContainer = [false,
                                        false,
                                        false,
                                        false,
                                        false];
        }

        if (checkQuotation)
        {
            setExistJournal(this.lastQuotation() != '', SalesTableType::posQuotation());
        }
        if (checkConfirmation && (_continueOnFound || !found))
        {
            setExistJournal(this.lastConfirm() != '', SalesTableType::posConfirmation());
        }
        if (checkPickingList && (_continueOnFound || !found))
        {
            setExistJournal(this.lastPickingList() != '', SalesTableType::posPickingList());
        }
        if (checkPackingSlip && (_continueOnFound || !found))
        {
            setExistJournal(this.lastPackingSlip() != '', SalesTableType::posPackingSlip());
        }
        if (checkInvoice && (_continueOnFound || !found))
        {
            setExistJournal(this.lastInvoice() != '', SalesTableType::posInvoice());
        }
        if (isCountryRegion_RU)
        {
            if (checkInvoice4Payment && (_continueOnFound || !found))
            {
                setExistJournal(this.lastInvoice4Paym_RU() != '', SalesTableType::posInvoice4Paym_RU());
            }
            if (checkFacture && (_continueOnFound || !found))
            {
                setExistJournal(this.lastFacture_RU() != '', SalesTableType::posFacture_RU());
            }
        }

        return existingJournalContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInterCompanyPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is an inter company purch
    /// </summary>
    /// <returns>True if there is an inter company purch; otherwise, false</returns>
    boolean existInterCompanyPurch()
    {
        InterCompanyPurchSalesReference interCompanyPurchSalesReference;

        select firstonly RecId from interCompanyPurchSalesReference
               index hint SalesPurchIdx
               where interCompanyPurchSalesReference.SalesId == this.SalesId;

        return interCompanyPurchSalesReference.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInterCompanySales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is an inter company sales
    /// </summary>
    /// <returns>True if there is an inter company sales; otherwise, false</returns>
    boolean existInterCompanySales(boolean _checkOnlyOne = false)
    {
        InterCompanyPurchSalesReference interCompanyPurchSalesReference;
        PurchTable                      purchTable;

        select forceplaceholders firstonly RecId from interCompanyPurchSalesReference
               index hint SalesPurchIdx
               where interCompanyPurchSalesReference.SalesId == this.SalesId
        join RecId from purchTable
               index hint PurchIdx
               where purchTable.PurchId == interCompanyPurchSalesReference.PurchId
               &&    purchTable.InterCompanyOrder
               &&   (!_checkOnlyOne
                 || ( _checkOnlyOne && purchTable.InterCompanyOriginalSalesId == this.SalesId));

        return purchTable.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existICLinesMarkedAsDirectDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this <c>SalesTable</c> record has intercompany lines that are marked for direct delivery.
    /// </summary>
    /// <param name = "_excludedSalesLineRecId">Optional RecId of a line to exclude from the query.</param>
    /// <returns>true if any line belonging to this <c>SalesTable</c> record is marked for direct delivery; otherwise, false.</returns>
    public boolean existICLinesMarkedAsDirectDelivery(RecId _excludedSalesLineRecId = 0)
    {
        SalesLine   salesLine;

        select firstonly RecId from salesLine where
            salesLine.SalesId == this.SalesId
            && salesLine.DeliveryType == TradeLineDlvType::DropShip
            && salesLine.SourcingOrigin == SalesSourcingOrigin::Intercompany
            && (!_excludedSalesLineRecId || salesLine.RecId != _excludedSalesLineRecId);

        return salesLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existICLinesMarkedAsNotDirectDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this <c>SalesTable</c> record has intercompany lines that are not direct delivery.
    /// </summary>
    /// <param name = "_excludedSalesLineRecId">Optional RecId of a line to exclude from the query.</param>
    /// <returns>true if any line belonging to this <c>SalesTable</c> record delivered from stock but sourced from a vendor; otherwise, false.</returns>
    public boolean existICLinesMarkedAsNotDirectDelivery(RecId _excludedSalesLineRecId = 0)
    {
        SalesLine   salesLine;

        select firstonly RecId from salesLine where
            salesLine.SalesId == this.SalesId
            && salesLine.DeliveryType == TradeLineDlvType::None
            && salesLine.SourcingOrigin == SalesSourcingOrigin::Intercompany
            && (!_excludedSalesLineRecId || salesLine.RecId != _excludedSalesLineRecId);

        return salesLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllLinesDeliveryTypeIdentical</Name>
				<Source><![CDATA[
    internal boolean isAllLinesDeliveryTypeIdentical()
    {
        SalesLine   salesLine;
        SalesLine   differentDeliveryTypeSalesLine;

        select firstonly RecId from salesLine 
            where salesLine.SalesId == this.SalesId
            notexists join differentDeliveryTypeSalesLine
                where differentDeliveryTypeSalesLine.SalesId == salesLine.SalesId
                    && differentDeliveryTypeSalesLine.DeliveryType != salesLine.DeliveryType;

        return salesLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existMarkedSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is a marked settlement
    /// </summary>
    /// <param name = "_fieldId">field for SalesTable</param>
    /// <returns>True if there is a marked settlement; otherwise, false</returns>
    boolean existMarkedSettlement(FieldId _fieldId)
    {
        if (this.SettleVoucher && SpecTrans::getSpecTransCount(this.DataAreaId, this.TableId, this.RecId))
        {
            switch (_fieldId)
            {
                case fieldNum(SalesTable, CustAccount):     error("@SYS99928");
                    break;

                case fieldNum(SalesTable, InvoiceAccount):  error("@SYS100001");
                    break;

                default:                                    return false;
            }
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existNonCanceledLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are non Canceled lines
    /// </summary>
    /// <returns>True if there are non Canceled lines; otherwise, false</returns>
    public boolean existNonCanceledLines()
    {
        SalesLine   salesLine;

        select firstonly RecId from salesLine where salesLine.SalesId == this.SalesId && salesLine.ReturnStatus != ReturnStatusLine::Canceled;

        return salesLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRegisteredReceivedInvoicedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are registered received invoiced lines
    /// </summary>
    /// <returns>True if there are registered received invoiced lines; otherwise, false</returns>
    public boolean existRegisteredReceivedInvoicedLines()
    {
        boolean                           ret;
        SalesLine                         salesLine;
        InterCompanyPurchSalesReference   interCompanyPurchSalesReference;
        PurchTable                        purchTable;
        SalesTable                        salesTable;
        ReturnDispositionCode             returnDispositionCode;

        select firstonly RecId from salesLine
               where salesLine.SalesId      == this.SalesId
               &&   (salesLine.ReturnStatus == ReturnStatusLine::Registered
                  || salesLine.ReturnStatus == ReturnStatusLine::Quarantine
                  || salesLine.ReturnStatus == ReturnStatusLine::Received
                  || salesLine.ReturnStatus == ReturnStatusLine::Invoiced)
            notexists join returnDispositionCode
                where returnDispositionCode.DispositionCodeId == salesLine.ReturnDispositionCodeId
                &&    returnDispositionCode.DispositionAction == DispositionAction::CreditOnly
                &&    salesLine.ReturnStatus                  == ReturnStatusLine::Received;

        ret = salesLine.RecId != 0;

        if (!ret)
        {
            while select RecId from interCompanyPurchSalesReference
                  where interCompanyPurchSalesReference.SalesId == this.SalesId
            join InterCompanyCompanyId, InterCompanySalesId from purchTable
                 where purchTable.PurchId == interCompanyPurchSalesReference.PurchId
                 &&    purchTable.InterCompanyOrder
            {
                changecompany(purchTable.InterCompanyCompanyId)
                {
                    salesTable = null;
                    salesTable = SalesTable::find(purchTable.InterCompanySalesId);
                    ret = salesTable.existRegisteredReceivedInvoicedLines();
                }
                if (ret)
                {
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is a sales Line
    /// </summary>
    /// <returns>True if there is a sales Line; otherwise, false</returns>
    boolean existSalesLine()
    {
        Query       query;
        QueryRun    queryRun;
        SalesLine   salesLine;

        query = this.querySalesLine();
        query.dataSourceTable(tableNum(SalesLine)).firstOnly(true);

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(SalesLine)))
            {
                salesLine = queryRun.get(tableNum(SalesLine)) as SalesLine;
                if (salesLine.RecId)
                {
                    break;
                }
            }
        }

        return salesLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existShippedNotInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is a shipped not invoiced
    /// </summary>
    /// <returns>True if there is a shipped not invoiced; otherwise, false</returns>
    public boolean existShippedNotInvoiced()
    {
        SalesLine                   salesLine;
        InventTrans                 inventTrans;
        InventTransOriginSalesLine  inventTransOriginSalesLine;

        select firstonly RecId from inventTrans
            where inventTrans.StatusIssue   == StatusIssue::Deducted
               || inventTrans.StatusReceipt == StatusReceipt::Received
            exists join inventTransOriginSalesLine
                where inventTransOriginSalesLine.InventTransOrigin == inventTrans.InventTransOrigin
                exists join salesLine
                    where salesLine.DataAreaId    == inventTransOriginSalesLine.SalesLineDataAreaId
                       && salesLine.InventTransId == inventTransOriginSalesLine.SalesLineInventTransId
                       && salesLine.SalesId       == this.SalesId;

        return (inventTrans.RecId!= 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existNegativeAmountLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is a line with a negative line amount for the current sales order.
    /// </summary>
    /// <returns>True if there is a line with a negative line amount; otherwise, false</returns>
    public boolean existNegativeAmountLine()
    {
        SalesLine salesLine;

        select firstonly RecId from salesLine
            where SalesLine.SalesId == this.SalesId
                && SalesLine.LineAmount < 0;

        return (salesLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustVendCreditInvoicingTableRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if reference in credit invoicing table exists.
    /// </summary>
    /// <returns>True if reference in credit invoicing table exists; otherwise, false.</returns>
    public boolean existCustVendCreditInvoicingTableRef()
    {
        CustVendCreditInvoicingTable custVendCreditInvoicingTable;

        select firstonly CustVendCreditInvoicingTable
            where  CustVendCreditInvoicingTable.RefTableId          == this.TableId
                && CustVendCreditInvoicingTable.RefRecId            == this.RecId
                && CustVendCreditInvoicingTable.IsSalesPurchCopying == NoYes::Yes;

        return (custVendCreditInvoicingTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureJourSortedList_RU</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public RecordSortedList factureJourSortedList_RU()
    {
        return this.salesPurchTableInterface().factureJourSortedList_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldChanged</Name>
				<Source><![CDATA[
    boolean  fieldChanged(FieldId  fieldId)
    {
        boolean  ok = false;

        if (!this.RecId)
        {
            ok = true;
        }

        if (this.orig().(fieldId) != this.(fieldId))
        {
            ok = true;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedEuroTriangulation</Name>
				<Source><![CDATA[
    UnknownNoYes fixedEuroTriangulation()
    {
        if (this.SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
        {
            if (this.settleExchRate())
            {
                return UnknownNoYes::No;
            }
        }

        if (this.FixedExchRate)
        {
            return UnknownNoYes::No;
        }

        return UnknownNoYes::Unknown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRate</Name>
				<Source><![CDATA[
    CustExchRate fixedExchRate(boolean throwOnError = false)
    {
        ExchRate exchRate = 0;

        if (this.SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
        {
            exchRate = this.settleExchRate(throwOnError);
        }

        if (!exchRate)
        {
            exchRate = this.FixedExchRate;
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyFixedExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reporting currency fixed exchange rate.
    /// </summary>
    /// <returns>The reporting currency fixed exchange rate.</returns>
    internal CustExchRate reportingCurrencyFixedExchangeRate()
    {
        return this.ReportingCurrencyFixedExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary fixedExchRateSecondary()
    {
        // Should always return zero.
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountryRegionIdByDocumentStatus</Name>
				<Source><![CDATA[
    public LogisticsAddressCountryRegionId getCountryRegionIdByDocumentStatus()
    {
        switch (this.DocumentStatus)
        {
            case DocumentStatus::PackingSlip:
                return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress).CountryRegionId;
            case DocumentStatus::Invoice:
                return this.custTable_InvoiceAccount().postalAddress().CountryRegionId;
            default:
                return this.custTable_CustAccount().postalAddress().CountryRegionId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryEntityRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the delivery entity record based on the postal address.
    /// </summary>
    /// <returns>
    ///    A <c>CustTable</c> record.
    /// </returns>
    public Common getDeliveryEntityRecord()
    {
        return this.TradePostalAddress::getDeliveryEntityRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalDiscPriceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates date for which total discount should be calculated according to the price date type
    /// setting.
    /// </summary>
    /// <returns>
    /// The date for which total discount has to be calculated.
    /// </returns>
    /// <remarks>
    /// The price date type can be set up to use today, the requested shipping date, or the requested
    /// receipt date as price date.
    /// </remarks>
    [Replaceable]
    public PriceDate getFinalDiscPriceDate()
    {
        SalesLine       salesLine;
        SalesParameters salesParameters = SalesParameters::find();

        // When <c>SalesTable</c> is from a retail sales order and the retail parameter
        // UseSessionDateForCalculatingPricesAndDiscounts is active, set price date to user preferred time zone
        // disregarding PriceDateType parameter.
        if (this.retailSalesUseSessionDate())
        {
            return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        switch (salesParameters.PriceDateType)
        {
            case SalesPriceDateType::ShippingDateRequested:
                return (select minof(ShippingDateRequested) from salesLine
                            where salesLine.SalesId == this.SalesId).ShippingDateRequested;

            case SalesPriceDateType::ReceiptDateRequested:
                return (select minof(ReceiptDateRequested) from salesLine
                            where salesLine.SalesId == this.SalesId).ReceiptDateRequested;

            case SalesPriceDateType::Today:
                return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.finalPriceDateDelegate(salesParameters.PriceDateType, result);

                if (result.hasResult())
                {
                    return result.result();
                }

                throw error(strFmt("@SCM:PriceDateNotFound", salesParameters.PriceDateType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailSalesUseSessionDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether this <c>SalesTable</c> is from a retail sale is and the UseSessionDateForCalculatingPricesAndDiscounts
    /// Retail parameter is active.
    /// </summary>
    /// <returns>
    /// true when <c>SalesTable</c> is from a retail sale is and the UseSessionDateForCalculatingPricesAndDiscount
    /// Retail parameter is active, false otherwise.
    /// </returns>
    public boolean retailSalesUseSessionDate()
    {
        return this.isRetailSale();
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalPriceDateDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for providing the date for which to calculate the price.
    /// </summary>
    /// <param name = "_salesPriceDateType">A <c>SalesPriceDateType</c> value.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> to provide the result.</param>
    [SysObsolete('This delegate will be obsoleted; use the method SalesTable.getFinalDiscPriceDate instead.', false, 31\03\2019)]
    delegate void finalPriceDateDelegate(
        SalesPriceDateType          _salesPriceDateType,
        EventHandlerResult          _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Aggregates line amounts for all lines of the sales order except lines in status Canceled.
    /// </summary>
    /// <returns>
    /// Total amount of all lines except lines in status Canceled.
    /// </returns>
    public Amount getTotalLineAmount()
    {
        SalesLine salesLine;

        select sum(LineAmount) from salesLine
            where salesLine.SalesId == this.SalesId
                && salesLine.SalesStatus != SalesStatus::Canceled;

        return salesLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransationEntity_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get entity of transaction.
    /// </summary>
    /// <param name="_roleType">
    /// The value of <c>LogisticsLocationRoleType</c> base enum.
    /// </param>
    /// <returns>
    /// Entity of transaction
    /// </returns>
    public Common getTransationEntity_RU(LogisticsLocationRoleType _roleType)
    {
        SalesTotals salesTotals;
        boolean     isCreditNote    = false;

        Common getLadingEntity()
        {
            if (this.InventLocationId)
            {
                return InventLocation::find(this.InventLocationId);
            }
            if (this.salesTable_RU().ConsignorAccount_RU)
            {
                return VendTable::find(this.salesTable_RU().ConsignorAccount_RU);
            }
            return CompanyInfo::find();
        }

        Common getUnladingEntity()
        {
            return CustTable::find(this.salesTable_RU().ConsigneeAccount_RU ?
                                   this.salesTable_RU().ConsigneeAccount_RU :
                                   this.CustAccount);
        }

        //check if credit note

        salesTotals = SalesTotals::construct(this);
        salesTotals.calc();
        isCreditNote = salesTotals.totalAmount() < 0;

        switch (_roleType)
        {
            case LogisticsLocationRoleType::Lading_W :
                return isCreditNote ? getUnladingEntity() : getLadingEntity();

            case LogisticsLocationRoleType::Unlading_W :
                return isCreditNote ? getLadingEntity() : getUnladingEntity();
        }

        return CompanyInfo::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCODPaymentMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the payment method of the sales order is COD.
    /// </summary>
    /// <returns>
    /// true if the payment method is COD; otherwise, false.
    /// </returns>
    public boolean hasCODPaymentMethod()
    {
        return this.payment().PaymMethod == NetCurrent::COD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIssueFiscalDocument_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether issues has fiscal documents.
    /// </summary>
    /// <returns>
    /// true if issues has fiscal documents; otherwise, false.
    /// </returns>
    public boolean hasIssueFiscalDocument_BR()
    {
        if (RetailParameters::isRetailEnabledAndInUse()
            && (this.isRetailStatement_BR() || this.retailSalesTable().isRetailCustomerOrder()))
        {
            return false;
        }
        else if (this.SalesType == SalesType::ReturnItem)
        {
            return this.custTable_CustAccount().GenerateIncomingFiscalDocument_BR;
        }
        else
        {
            return this.SalesType != SalesType::ReturnItem;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesJournalCreatedFromProductList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the sales journal is created from product list (Order template).
    /// </summary>
    /// <returns>
    /// NoYes::Yes if created from order tempalate; otherwise, NoYes::No.
    /// </returns>
    internal display NoYes isSalesJournalCreatedFromProductList()
    {
        if (this.SalesType == SalesType::Journal && this.retailSalesTable().RetailProductListUpdateId != '')
        {
            return NoYes::Yes;
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPriceDiscChangePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether price discount policies exist for a specified record.
    /// </summary>
    /// <returns>
    /// true if price discount policies exist; otherwise, false.
    /// </returns>
    public boolean hasPriceDiscChangePolicy()
    {
        return this.type().hasPriceDiscChangePolicy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>icCheckUpdateHeaderDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if prices and disounts can be updated in the context of intercompany.
    /// </summary>
    /// <returns>
    ///     true if the context is not intercompany or if the context is intercompany and prices and discounts can be updated; otherwise, false.
    /// </returns>
    public boolean icCheckUpdateHeaderDiscounts()
    {
        return !this.isInterCompanyOrder()
            || (this.SalesType != SalesType::ReturnItem
                && !this.isInterCompanyPOInvoiceMatched()
                && this.interCompanyEndpointActionPolicy().PriceDiscountSearch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBankAccounts_LV</Name>
				<Source><![CDATA[
    public void initBankAccounts_LV()
    {
        #isoCountryRegionCodes

        CurrencyCode standardCurrency;
        BankAccountID bankAccount;
        BankAccountID curBankAcc;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        {
            this.CustBankAccount_LV = CustBankAccount::findDefault_LV(this.InvoiceAccount, this.CurrencyCode).AccountID;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL]))
        {
            standardCurrency = CompanyInfoHelper::standardCurrency();
            bankAccount = BankAccountTable::findDefault_LV(standardCurrency).AccountID;
            curBankAcc = BankAccountTable::findDefault_LV(this.CurrencyCode).AccountID;

            if (curBankAcc || BankParameters::checkCurrCodeControl_W())
            {
                this.CurBankAccount_LV = standardCurrency != this.CurrencyCode ? curBankAcc : '';
            }

            this.BankAccount_LV = bankAccount ? bankAccount : CompanyInfo::find().Bank;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultReturnAddress</Name>
				<Source><![CDATA[
    public void initDefaultReturnAddress()
    {
        CompanyInfo companyInfo = CompanyInfo::find();
        LogisticsLocationRecId locationRecId;

        this.DeliveryName = companyInfo.Name;

        locationRecId = LogisticsLocationDefaultAppUtil::warehouseSiteDefaultLocation(LogisticsLocationRoleType::Delivery,
            this.InventLocationId, this.InventSiteId);
        if (locationRecId)
        {
            this.setLocation(locationRecId);
        }
        else
        {
            // Warehouse and site didn't have location, use company location
            companyInfo = CompanyInfo::find();
            locationRecId = LogisticsLocationDefault::findSimpleDefault(companyInfo,
                LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery)).RecId;

            this.DeliveryPostalAddress  = LogisticsPostalAddress::addressRecIdFromLocationRecId(locationRecId);
            this.AddressRefRecId        = companyInfo.RecId;
            this.AddressRefTableId      = companyInfo.TableId;
            this.setDeliveryName();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromContactInfo</Name>
				<Source><![CDATA[
    void initFromContactInfo()
    {
        ContactPerson contactPerson = this.contactPerson();

        if (contactPerson)
        {
            this.url = contactPerson.url();
            this.Email = contactPerson.email();
            this.Phone = contactPerson.phone();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustConfirmJour</Name>
				<Source><![CDATA[
    void  initFromCustConfirmJour(CustConfirmJour  custConfirmJour)
    {
        this.DlvTerm                = custConfirmJour.DlvTerm;
        this.DlvMode                = custConfirmJour.DlvMode;
        this.LanguageId             = custConfirmJour.LanguageId;
        this.Payment                = custConfirmJour.Payment;
        this.CashDisc               = custConfirmJour.CashDiscCode;
        this.CurrencyCode           = custConfirmJour.CurrencyCode;
        this.DefaultDimension       =  this.copyDimension(custConfirmJour.DefaultDimension);
        this.InclTax                = custConfirmJour.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceJour</Name>
				<Source><![CDATA[
    void initFromCustInvoiceJour(CustInvoiceJour custInvoiceJour)
    {
        MCRReturnSalesTable mcrReturnSalesTable;
        MCROrderParameters  mcrOrderParameters = MCROrderParameters::find();
        #ISOCountryRegionCodes

        SalesTable_BR salesTable_BR;
        // <GMY>
        SalesTable_W    salesTable_W;
        // </GMY>

        this.LanguageId                 = custInvoiceJour.LanguageId;
        this.Payment                    = custInvoiceJour.Payment;
        this.PaymMode                   = custInvoiceJour.paymMode();
        this.NumberSequenceGroup        = custInvoiceJour.NumberSequenceGroup;
        this.CashDisc                   = custInvoiceJour.CashDiscCode;

        if (TaxParameters::find().CashDiscOnInvoice)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceES00021, funcName());
            this.CashDiscPercent        = custInvoiceJour.CashDiscPercent;
        }
        else if (this.CashDisc) // CashDiscPercent should correlate with CashDisc value. 
        {
            this.CashDiscPercent = CashDisc::find(this.CashDisc).Percent;
        }

        this.CurrencyCode               = custInvoiceJour.CurrencyCode;
        this.DlvTerm                    = custInvoiceJour.DlvTerm;
        this.TaxGroup                   = custInvoiceJour.TaxGroup;
        this.DlvMode                    = custInvoiceJour.DlvMode;
        this.DefaultDimension           = this.copyDimension(custInvoiceJour.DefaultDimension);
        this.InclTax                    = custInvoiceJour.InclTax;
        this.SalesOriginId              = custInvoiceJour.SalesOriginId;
        this.setShipCarrierInformation(null, null, custInvoiceJour);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        {
            this.IntrastatAddValue_LV       = custInvoiceJour.custInvoiceJour_W().IntrastatAddValue_LV;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.DeliveryPostalAddress = custInvoiceJour.DeliveryPostalAddress;
            this.DeliveryName = custInvoiceJour.DeliveryName;

            salesTable_W = this.salesTable_W();
            salesTable_W.WithIGSTPayment_IN = custInvoiceJour.salesTable().salesTable_W().WithIGSTPayment_IN;
            this.packSalesTable_W(salesTable_W);
        }

        if (BrazilParameters::isEnabled())
        {
            salesTable_BR = this.salesTable_BR();
            salesTable_BR.ServiceCodeOnDlvAddress_BR    = custInvoiceJour.custInvoiceJour_BR().ServiceCodeOnDlvAddress_BR;
            salesTable_BR.SalesPurchOperationType_BR    = custInvoiceJour.custInvoiceJour_BR().SalesPurchOperationType_BR;
            salesTable_BR.cfpsId_BR                     = custInvoiceJour.fiscalDocument_BR().cfpsId;
            salesTable_BR.CustFinalUser_BR              = custInvoiceJour.custInvoiceJour_BR().CustFinalUser_BR;
            salesTable_BR.PresenceType                  = custInvoiceJour.custTable_InvoiceAccount().PresenceType_BR;
            this.packSalesTable_BR(salesTable_BR);
        }
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            if (this.SalesType == SalesType::ReturnItem)
            {
                mcrReturnSalesTable = this.mcrReturnSalesTable();
                mcrReturnSalesTable.ApplyCreditToExchange = mcrOrderParameters.ApplyCreditToExchange;
                mcrReturnSalesTable.AdvanceExchange = mcrOrderParameters.AdvanceExchange;
                mcrReturnSalesTable.AdvanceCredit = mcrOrderParameters.AdvanceCredit;
                mcrReturnSalesTable.OriginalSalesId = custInvoiceJour.SalesId;
                this.mcrPackMCRReturnSalesTable(mcrReturnSalesTable);
            }
        }

        // Affiliations
        RetailSalesAffiliation::copyRetailSalesAffiliation(this.SalesId, custInvoiceJour.SalesId);

        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            salesTable_W                = this.salesTable_W();
            salesTable_W.InvoiceType_MY = custInvoiceJour.custInvoiceJour_W().InvoiceType_MY;
            this.packSalesTable_W(salesTable_W);
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustPackingSlipJour</Name>
				<Source><![CDATA[
    void  initFromCustPackingSlipJour(CustPackingSlipJour custPackingSlipJour)
    {
        this.LanguageId                 = custPackingSlipJour.LanguageId;
        this.DlvTerm                    = custPackingSlipJour.DlvTerm;
        this.DlvMode                    = custPackingSlipJour.DlvMode;
        this.DlvReason                  = custPackingSlipJour.DlvReason;
        this.DefaultDimension           = this.copyDimension(custPackingSlipJour.DefaultDimension);
        this.setShipCarrierInformation(null, custPackingSlipJour);

        if (IntrastatCountryRegionParameters::isInEUByIsoCode())
        {
            TransportationDocument::copy(custPackingSlipJour, this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustQuotationJour</Name>
				<Source><![CDATA[
    void  initFromCustQuotationJour(CustQuotationJour  custQuotationJour)
    {
        this.DlvTerm                = custQuotationJour.DlvTerm;
        this.DlvMode                = custQuotationJour.DlvMode;
        this.LanguageId             = custQuotationJour.LanguageId;
        this.Payment                = custQuotationJour.Payment;
        this.CashDisc               = custQuotationJour.CashDiscCode;
        this.CurrencyCode           = custQuotationJour.CurrencyCode;
        this.DefaultDimension       = this.copyDimension(custQuotationJour.DefaultDimension);
        this.InclTax                = custQuotationJour.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    void initFromCustTable()
    {
        #ISOCountryRegionCodes

        CustTable custTable = this.custTable_CustAccount();

        CustParameters custParameters = CustParameters::find();

        this.initSalesTableData(custTable);

        this.initDlvModeData(custTable);

        this.initFromCustTableMandatoryFields();

        if (TaxUpdateTaxExemptNumberFromDeliveryAddressFlight::instance().isEnabled())
        {
            this.initRegistrationNumbersFromCustTable(custTable);
        }

        this.setTaxGroup(TaxSales::custTaxGroup(this.DlvTerm, custTable.TaxGroup, this.deliveryLocation()));
        this.OverrideSalesTax = custTable.OverrideSalesTax;

        this.initNameFromVATNumber(custParameters);

        this.DefaultDimension = this.copyDimension(custTable.DefaultDimension);

        this.initCashDiscData(custTable);

        this.initPaymentData(custTable);

        this.PostingProfile = CustParameters::find().PostingProfile;

        this.CreditCardCustRefId = 0;

        this.initContactInformation(custTable);

        this.setListCode();

        this.initSalesPool(custTable);

        this.GiroType = custTable.GiroType;

        this.initInterCompanyData(custTable);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            this.initSalesTable_NO(custTable);
        }

        this.initBankAccounts_LV();

        this.ShipCarrierFuelSurcharge = custTable.ShipCarrierFuelSurcharge;

        BankAccountTable::checkDefaultGiroBank_W(this.CurrencyCode);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.initSalesTable_RU(custTable);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.initSalesTable_IN(custTable);
        }

        if (CustConsInvoiceType_JP::isCustConsInvoiceEnabled())
        {
            this.initSalesTable_JP(custTable);
        }

        this.initSalesTable_PL(custTable);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            this.initSalesTable_LT(custTable);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV, #isoLT]))
        {
            this.initSalesTable_LT_LV(custTable);
        }

        this.initSalesTable_BR(custTable);

        if (SalesTableChangeCustomerSetDebitMandateFlight::instance().isEnabled())
        {
            this.DirectDebitMandate = CustDirectDebitMandate::defaultAndDisplayMandate(
                this.InvoiceAccount,
                this.PaymMode,
                this.DirectDebitMandate,
                /*_overwriteExistingMandate:*/ true,
                FormDataUtil::getFormDataSource(this),
                fieldNum(SalesTable, DirectDebitMandate));
        }
        else if (CustPaymModeTable::find(custTable.PaymMode).IsSEPA)
        {
            this.DirectDebitMandate = CustDirectDebitMandate::getDefaultMandate(this.InvoiceAccount);
        }

        this.initMcrExtensionData(custTable);

        this.initSalesTable_W(custTable, custParameters);

        // packing here is needed due to other places where copying from raw values is made due to RPC calls (outdated).
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.packSalesTable_RU(this.salesTable_RU().data());
        }

        if (BrazilParameters::isEnabled())
        {
            this.packSalesTable_BR(this.salesTable_BR().data());
        }

        if (SalesTable_W::isLegalEntityInCountryRegion())
        {
            this.packSalesTable_W(this.salesTable_W().data());
        }

        if (#PdsRebateEnabled)
        {
            this.initRebateData(custTable);
        }

        this.createRetailSalesAffiliation();

        this.initFromCustTable_MX();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable_MX</Name>
				<Source><![CDATA[
    server void initFromCustTable_MX()
    {
        if (EInvoiceParameters_MX::isElectronicInvoiceEnabled() || EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
        {
            CustTable custTable = this.custTable_CustAccount();

            this.satPurpose_MX      = custTable.satPurpose_MX;
            this.satPaymMethod_MX   = custTable.satPaymMethod_MX;
            this.ForeignTrade_MX    = custTable.ForeignTrade_MX;

            if (this.ForeignTrade_MX)
            {
                this.NumRegIdTrib_MX = custTable.ForeignTaxRegistration_MX;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipInitFromCustTableMandatoryFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to skip the initialization of mandatory fields from <c>CustTable</c>
    /// </summary>
    /// <returns>true if the initialization must be skipped; otherwise, false.</returns>
    /// <remarks>Extension point for skipping the method initFromCusttableMandatoryFields.</remarks>
    protected boolean skipInitFromCustTableMandatoryFields()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTableMandatoryFields</Name>
				<Source><![CDATA[
    void  initFromCustTableMandatoryFields()
    {
        if (this.skipInitFromCustTableMandatoryFields())
        {
            return;
        }

        CustTable custTable  = this.shipCarrierCustTable();
        this.CustGroup = custTable.CustGroup;

        LogisticsLocation location = this.getCustomerDefaultLocation();
        this.initDeliveryDetailsFromCustomer(location);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerDefaultLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default location for the customer of the sales order.
    /// </summary>
    /// <returns>A <c>LogisticsLocation</c> record.</returns>
    protected LogisticsLocation getCustomerDefaultLocation()
    {
        return LogisticsLocationDefault::findSimpleDefault(
            this.custTable_CustAccount(),
            LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDeliveryDetailsFromCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes delivery details from the customer.
    /// </summary>
    /// <param name = "_location">The customer location from which to initialize.</param>
    protected void initDeliveryDetailsFromCustomer(LogisticsLocation _location)
    {

        if (_location.RecId)
        {
            LogisticsLocationEntity locationEntity = LogisticsLocationEntity::constructFromLocationRecId(_location.RecId);
            this.DeliveryPostalAddress  = locationEntity.getPostalAddress().RecId;
            CustTable custTable  = this.custTable_CustAccount();
            this.AddressRefRecId        = custTable.RecId;
            this.AddressRefTableId      = custTable.TableId;

            this.setDeliveryName();

            LogisticsLocationSelectForm_SalesTable::construct(this).copyShipCarrierInfo(_location);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPayment</Name>
				<Source><![CDATA[
    void initFromPayment()
    {
        // Use the installment plan payment schedule if an installment plan exists.
        if ((!isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            || (!MCRInstallmentPlanSalesTable::existSalesId(this.SalesId)))
        {
            this.PaymentSched = this.payment().PaymSched;
        }

        this.FixedDueDate = dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceJour</Name>
				<Source><![CDATA[
    void initFromProjInvoiceJour(ProjInvoiceJour projInvoiceJour)
    {
        // <GMY>
        SalesTable_W    salesTable_W;
        // </GMY>

        this.LanguageId                 = projInvoiceJour.LanguageId;
        this.Payment                    = projInvoiceJour.Payment;
        this.NumberSequenceGroup        = projInvoiceJour.NumberSequenceGroupId;
        this.CashDisc                   = projInvoiceJour.CashDiscCode;

        if (TaxParameters::find().CashDiscOnInvoice)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceES00021, funcName());
            this.CashDiscPercent        = projInvoiceJour.CashDiscPercent;
        }
        this.CurrencyCode               = projInvoiceJour.CurrencyId;
        this.DlvTerm                    = projInvoiceJour.DlvTerm ? projInvoiceJour.DlvTerm : this.DlvTerm;
        this.DlvMode                    = projInvoiceJour.DlvMode ? projInvoiceJour.DlvMode : this.DlvMode;
        this.DefaultDimension           = this.copyDimension(projInvoiceJour.DefaultDimension);

        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            salesTable_W                = this.salesTable_W();
            salesTable_W.InvoiceType_MY = projInvoiceJour.InvoiceType_MY;
            this.packSalesTable_W(salesTable_W);
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceTable</Name>
				<Source><![CDATA[
    void initFromProjInvoiceTable()
    {
        ProjTable           projTable;
        ProjInvoiceTable    projInvoiceTable;
        ProjFundingSource   projFundingSource;
        #ISOCountryRegionCodes

        projTable               = this.projTable();
        projInvoiceTable        = projTable.projInvoice();

        this.TransactionCode    = projInvoiceTable.TransactionCodeId;
        this.Listcode           = projInvoiceTable.ListCodeId;
        this.DefaultDimension   = this.copyDimension(projTable.DefaultDimension);
        
        // If there are multiple external funding sources associated with project, then user will have to pick the funding source explicitly on the UI.
        if (!ProjInvoiceTable::hasMultipleExternalFundingSources(projTable.ProjInvoiceProjId))
        {
            select firstOnly PaymentTermsId from projFundingSource
                where projFundingSource.ContractId == projTable.ProjInvoiceProjId
                && (projFundingSource.FundingType == ProjFundingType::Customer || projFundingSource.FundingType == ProjFundingType::Grant);

            this.FundingSource = projFundingSource.RecId;
        }

        if (projFundingSource.PaymentTermsId)
        {
            this.Payment = projFundingSource.PaymentTermsId;
        }
        else
        {
            this.Payment = projInvoiceTable.Payment;
        }

        this.FixedExchRate = ProjInvoiceCurrency::find(projInvoiceTable.ProjInvoiceProjId,this.CurrencyCode).ExchRate;
        this.setReportingCurrencyFixedExchangeRate();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            this.BankCentralBankPurposeCode = projInvoiceTable.BankCentralBankPurposeCode;
            this.BankCentralBankPurposeText = projInvoiceTable.BankcentralBankPurposeText;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTableForProjOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes customer information for project based orders.
    /// </summary>
    protected void initFromCustTableForProjOrder()
    {
        if (this.skipInitFromCustTableForProjOrder())
        {
            return;
        }

        ProjTable projTable = ProjTable::find(this.ProjId);
        this.CustAccount        = projTable.type().custAccount();
        this.initFromCustTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipInitFromCustTableForProjOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to skip initialization of customer information for project based orders.
    /// </summary>
    /// <returns>true if the initialization should be skipped; otherwise, false.</returns>
    /// <remarks>Extension point for skipping initializing customer data for project based orders.</remarks>
    protected boolean skipInitFromCustTableForProjOrder()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    void initFromProjTable(ProjTable _projTable)
    {
        LogisticsLocationEntity location;
        ProjPriceGroupID        projPriceGroupID;
        ProjFundingSourceEInvoice_NO eInvoiceData;

        if (_projTable.RecId)
        {
            this.ProjId             = _projTable.ProjId;
         
            this.initFromCustTableForProjOrder();

            this.InvoiceAccount     = _projTable.type().invoiceAccount();
            this.initInvoiceAccount();
            this.CurrencyCode               = _projTable.currencyId();

            this.initFromProjInvoiceTable();

            this.InclTax                    = NoYes::No;

            // Address should not be changed when GTE enabled
            if (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                location = LogisticsLocationEntity::constructFromLocationRecId(_projTable.DeliveryLocation);
                this.DeliveryName = location.getPostalAddress().displayLocationDescription();
                this.DeliveryPostalAddress = location.getPostalAddress().RecId;
            }

            projPriceGroupID = ProjTable::findPriceGroup(this.ProjId);
            if (projPriceGroupID)
            {
                this.PriceGroupId = projPriceGroupID;
            }

            if (BrazilParameters::isEnabled())
            {
                this.salesTable_BR().data(this.data().salesTable_BR());
            }

            if (CustTable::isCustPublic_NO(this.InvoiceAccount))
            {
                eInvoiceData = ProjFundingSource::findCustAccount(
                    _projTable.ProjInvoiceProjId).getEInvoiceData(
                    _projTable.ProjId);

                this.EInvoiceAccountCode = eInvoiceData.EInvoiceAccountCode;
                this.CustomerRef = eInvoiceData.CustRef;
                this.PurchOrderFormNum = eInvoiceData.CustPurchaseOrder;
                this.ContactPersonId = eInvoiceData.ContactPersonId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a <c>SalesTable</c> record with values that are based on <c>SalesAgreementHeader</c>
    /// record.
    /// </summary>
    /// <param name="_salesAgreementHeader">
    /// Record of <c>SalesAgreementHeader</c> to copy initial values from
    /// </param>
    /// <param name="_copyDeliveryLocation">
    /// When set to true delivery location is copyed from <c>SalesAgreementHeader</c> Default is true.
    /// </param>
    public void initFromSalesAgreementHeader( SalesAgreementHeader  _salesAgreementHeader, boolean _copyDeliveryLocation = true)
    {
        AgreementHeaderDefault          agreementHeaderDefault;
        SalesAgreementHeaderDefault     salesAgreementHeaderDefault;
        CashDisc                        cashDisc;
        #ISOCountryRegionCodes
        SalesAgreementHeaderExt_RU      salesAgreementHeaderExt;
        SalesTable_RU                   salesTableRU;
        SalesTable_W                    salesTable_W;

        select firstonly DeliveryMode
                        ,DeliveryTerm
                        ,DeliveryName
                        ,DeliveryPostalAddress
                        ,PaymentTerms
                        ,PaymentSchedule
                        ,CashDiscountCode
                        ,ContactPerson
                        ,MiscChargeGroup
                        ,Project
                        ,ExternalReference
            from agreementHeaderDefault
            where agreementHeaderDefault.AgreementHeader == _salesAgreementHeader.RecId
            outer join firstonly CustomerInvoiceAccount
                          ,Campaign
                          ,SalesUnit
                          ,SalesPool
                          ,WorkerSalesResponsible
                          ,CommissionSalesGroup
                          ,CommissionCustomerGroup
                          ,FixedExchangeRate
                          ,ReportingCurrencyFixedExchRate
                          ,CustomerMethodOfPayment
                          ,CustomerPaymentSpec
                          ,CustomerRequisitionNumber
                          ,EntryCertificateRequired_W
                          ,IssueOwnEntryCertificate_W
                from  salesAgreementHeaderDefault
                where salesAgreementHeaderDefault.SalesAgreementHeader == _salesAgreementHeader.RecId
            outer join firstonly RecId,
                                 InventProfileType,
                                 InventProfileId,
                                 CustPostingProfile,
                                 SalesInvoicePostingType
                from salesAgreementHeaderExt
                where salesAgreementHeaderExt.AgreementHeader == _salesAgreementHeader.RecId
                ;

        if (agreementHeaderDefault.CashDiscountCode)
        {
            // When CashDiscountCode is set for agreement header, query cash discount record to set proper cashDiscPercent value
            cashDisc = CashDisc::find(agreementHeaderDefault.CashDiscountCode);
        }

        this.MatchingAgreement = _salesAgreementHeader.RecId;

        this.DefaultDimension = this.mergeDimension(_salesAgreementHeader.DefaultDimension, this.DefaultDimension);

        boolean isRetailOrder = MCRChannelUser::find() ? true : false;
        isRetailOrder = isRetailOrder || this.isRetailSale();

        RetailParameters retailParameters = RetailParameters::find();
        boolean supportOrganizationHierarchy = retailParameters.IsOrganizationHierarchyEnabledOnSalesAgreement;

        if (_copyDeliveryLocation)
        {
            if (!(isRetailOrder && supportOrganizationHierarchy && this.CustAccount != _salesAgreementHeader.CustAccount))
            {
                this.DeliveryName = agreementHeaderDefault.DeliveryName;
                this.DeliveryPostalAddress = agreementHeaderDefault.DeliveryPostalAddress;
            }
        }

        this.CurrencyCode   = _salesAgreementHeader.Currency;
        this.LanguageId     = _salesAgreementHeader.Language;

        this.DlvMode         = agreementHeaderDefault.DeliveryMode;
        this.DlvTerm         = agreementHeaderDefault.DeliveryTerm;
        this.Payment         = agreementHeaderDefault.PaymentTerms;
        this.PaymentSched    = agreementHeaderDefault.PaymentSchedule;
        this.MarkupGroup     = agreementHeaderDefault.MiscChargeGroup;
        this.ProjId          = agreementHeaderDefault.Project;
        this.CustomerRef     = agreementHeaderDefault.ExternalReference;
        this.CashDisc        = agreementHeaderDefault.CashDiscountCode;
        this.CashDiscPercent = (cashDisc.RecId) ? cashDisc.Percent : 0.0;
        this.ContactPersonId = agreementHeaderDefault.ContactPerson;

        this.SmmCampaignId      = salesAgreementHeaderDefault.Campaign;
        this.SalesUnitId        = salesAgreementHeaderDefault.SalesUnit;
        this.SalesPoolId        = salesAgreementHeaderDefault.SalesPool;
        this.WorkerSalesResponsible = salesAgreementHeaderDefault.WorkerSalesResponsible;
        this.SalesGroup         = salesAgreementHeaderDefault.CommissionSalesGroup;
        this.CommissionGroup    = salesAgreementHeaderDefault.CommissionCustomerGroup;
        this.FixedExchRate      = salesAgreementHeaderDefault.FixedExchangeRate;
        this.ReportingCurrencyFixedExchRate = salesAgreementHeaderDefault.ReportingCurrencyFixedExchRate;
        this.PaymMode           = salesAgreementHeaderDefault.CustomerMethodOfPayment;
        this.PaymSpec           = salesAgreementHeaderDefault.CustomerPaymentSpec;
        this.PurchOrderFormNum  = salesAgreementHeaderDefault.CustomerRequisitionNumber;

        if (salesAgreementHeaderDefault.CustomerInvoiceAccount)
        {
            if (!(isRetailOrder && supportOrganizationHierarchy && this.CustAccount != _salesAgreementHeader.CustAccount))
            {
                // Copy CustomerInvoiceAccount ONLY when it is not-empty in Agreement!
                this.InvoiceAccount     = salesAgreementHeaderDefault.CustomerInvoiceAccount;
            }
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            salesTableRU = this.salesTable_RU();

            salesTableRU.AgreementHeaderExt_RU = salesAgreementHeaderExt.RecId;

            this.DefaultDimension = this.copyDimension(_salesAgreementHeader.DefaultDimension);

            if (salesAgreementHeaderExt.InventProfileType || salesAgreementHeaderExt.InventProfileId)
            {
                salesTableRU.InventProfileType_RU = salesAgreementHeaderExt.InventProfileType;
                salesTableRU.InventProfileId_RU   = salesAgreementHeaderExt.InventProfileId;
            }

            if (salesAgreementHeaderExt.CustPostingProfile)
            {
                this.PostingProfile = salesAgreementHeaderExt.CustPostingProfile;
            }

            salesTableRU.initInvoicePostingType_RU(_salesAgreementHeader.custTable(), salesAgreementHeaderExt);

            this.packSalesTable_RU(salesTableRU);
        }

        if (SalesTable_W::isLegalEntityInCountryRegion())
        {
            salesTable_W = this.salesTable_W();
            salesTable_W.EntryCertificateRequired_W = salesAgreementHeaderDefault.EntryCertificateRequired_W;
            salesTable_W.IssueOwnEntryCertificate_W = salesAgreementHeaderDefault.IssueOwnEntryCertificate_W;
            this.packSalesTable_W(salesTable_W);
        }

        TMSSalesTable::initFromTMSSalesAgreement(this.SalesId, _salesAgreementHeader.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesBasket</Name>
				<Source><![CDATA[
    void initFromSalesBasket(SalesBasket salesBasket)
    {
        this.ContactPersonId        = salesBasket.ContactPersonId;

        this.DeliveryDateControlType = SalesDeliveryDateControlType::None;
        this.ShippingDateRequested   = salesBasket.DeliveryDate;
        this.ReceiptDateRequested    = salesBasket.DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a record in the <c>SalesTable</c> table from a record in the <c>SalesQuotationTable</c>
    /// table.
    /// </summary>
    /// <param name="_salesQuotationTable">
    /// The record in the <c>SalesQuotationTable</c> table from which to initialize.
    /// </param>
    void initFromSalesQuotationTable(SalesQuotationTable    _salesQuotationTable)
    {
        this.QuotationId                = _salesQuotationTable.QuotationId;

        this.CustAccount                = _salesQuotationTable.CustAccount;
        this.initFromCustTable();

        this.CurrencyCode               = _salesQuotationTable.CurrencyCode;

        if (_salesQuotationTable.InvoiceAccount)
        {
            this.InvoiceAccount         =  _salesQuotationTable.InvoiceAccount;
        }

        if (_salesQuotationTable.PaymMode)
        {
            this.PaymMode               = _salesQuotationTable.PaymMode;
        }

        this.SmmCampaignId              = _salesQuotationTable.CampaignId;

        this.DeliveryDate               = _salesQuotationTable.ShippingDateRequested;
        this.Deadline                   = _salesQuotationTable.QuotationExpiryDate;

        this.ContactPersonId            = _salesQuotationTable.ContactPersonId;

        this.initFromContactInfo();

        this.CustomerRef                = _salesQuotationTable.CustomerRef;
        this.PurchOrderFormNum          = _salesQuotationTable.CustPurchaseOrder;
        if (_salesQuotationTable.DefaultDimension)
        {
            this.DefaultDimension           = this.copyDimension(_salesQuotationTable.DefaultDimension);
        }
        this.DeliveryName               = _salesQuotationTable.DeliveryName;

        this.TransactionCode            = _salesQuotationTable.TransactionCode;
        this.Transport                  = _salesQuotationTable.Transport;
        this.Port                       = _salesQuotationTable.Port;
        this.StatProcId                 = _salesQuotationTable.StatProcId;
        this.Listcode                   = _salesQuotationTable.Listcode;
        this.CountyOrigDest             = _salesQuotationTable.CountyOrigDest;

        if (_salesQuotationTable.DeliveryPostalAddress)
        {
            this.DeliveryPostalAddress  = _salesQuotationTable.DeliveryPostalAddress;
            this.AddressRefRecId        = _salesQuotationTable.AddressRefRecId;
            this.AddressRefTableId      = _salesQuotationTable.AddressRefTableId;
        }

        this.vatNum                     = _salesQuotationTable.vatNum;
        this.VATNumTableType            = _salesQuotationTable.VATNumTableType;
        this.vatNumRecId                = _salesQuotationTable.vatNumRecId;
        this.TaxGroup                   = _salesQuotationTable.TaxGroup;
        this.InclTax                    = _salesQuotationTable.InclTax;

        this.CashDisc                   = _salesQuotationTable.CashDisc;

        this.CashDiscPercent            = _salesQuotationTable.CashDiscPercent;

        this.DiscPercent                = _salesQuotationTable.DiscPercent;
        this.EndDisc                    = _salesQuotationTable.EndDisc;
        this.LineDisc                   = _salesQuotationTable.LineDisc;
        this.MultiLineDisc              = _salesQuotationTable.MultiLineDisc;
        this.CommissionGroup            = _salesQuotationTable.CommissionGroup;

        this.DlvMode                    = _salesQuotationTable.DlvMode;
        this.DlvTerm                    = _salesQuotationTable.DlvTerm;
        this.DlvReason                  = _salesQuotationTable.DlvReason;

        if (SalesExportReasonFromQuotationFlight::instance().isEnabled())
        {
            this.ExportReason           = _salesQuotationTable.ExportReason;
        }

        if (_salesQuotationTable.SalesGroup)
        {
            this.SalesGroup                 = _salesQuotationTable.SalesGroup;
        }
        if (_salesQuotationTable.PriceGroupId)
        {
            this.PriceGroupId               = _salesQuotationTable.PriceGroupId;
        }
        this.LanguageId                 = _salesQuotationTable.LanguageId;
        if (_salesQuotationTable.MarkupGroup)
        {
            this.MarkupGroup                = _salesQuotationTable.MarkupGroup;
        }
        this.Payment                    = _salesQuotationTable.Payment;
        if (_salesQuotationTable.Payment)
        {
            this.PaymentSched           = _salesQuotationTable.payment().PaymSched;
        }

        this.PostingProfile             = _salesQuotationTable.PostingProfile;
        this.WorkerSalesResponsible     = _salesQuotationTable.WorkerSalesResponsible;
        this.WorkerSalesTaker           = _salesQuotationTable.WorkerSalesTaker;
        this.SalesUnitId                = _salesQuotationTable.SalesUnitId;
        this.SalesOriginId              = _salesQuotationTable.SalesOriginId;

        this.ShippingDateRequested      = _salesQuotationTable.ShippingDateRequested;
        this.ReceiptDateRequested       = _salesQuotationTable.ReceiptDateRequested;
        this.InventLocationId           = _salesQuotationTable.InventLocationId;
        this.setInventSiteId(_salesQuotationTable.InventSiteId);

        this.initFromSalesQuotationTable_BR(_salesQuotationTable);
        this.initFromMCRSalesQuotationTable(_salesQuotationTable);
        this.initFromRetailSalesQuotationTable(_salesQuotationTable);

        // SalesQuotationTable maintains it's own affiliation in RETAILSALESQUOTATIONAFFILIATION.
        // initFromCustTable() will carry over the customer's affiliation, and if user manually removed this affliliation from AX, this will bring unwanted affiliation to the sales order.
        this.cleanupAffiliationForSalesQuotationOrder(_salesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationTable_BR</Name>
				<Source><![CDATA[
    internal void initFromSalesQuotationTable_BR(SalesQuotationTable _salesQuotationTable)
    {
        if (BrazilParameters::isEnabled())
        {
            SalesTable_BR salesTable_BR = this.salesTable_BR();
            salesTable_BR.CustFinalUser_BR              = _salesQuotationTable.CustFinalUser_BR;
            salesTable_BR.SalesPurchOperationType_BR    = _salesQuotationTable.SalesPurchOperationType_BR;
            salesTable_BR.FineCode_BR                   = _salesQuotationTable.FineCode_BR;
            salesTable_BR.InterestCode_BR               = _salesQuotationTable.InterestCode_BR;
            this.packSalesTable_BR(salesTable_BR);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMCRSalesQuotationTable</Name>
				<Source><![CDATA[
    internal void initFromMCRSalesQuotationTable(SalesQuotationTable _salesQuotationTable)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            MCRSalesTable mcrSalesTable = this.mcrSalesTable();
            MCRSalesQuotationTable mcrSalesQuotationTable = _salesQuotationTable.mcrSalesQuotationTable();

            // Copy the source code.
            if (mcrSalesTable.SourceId != mcrSalesQuotationTable.SourceId)
            {
                mcrSalesTable.SourceId = mcrSalesQuotationTable.SourceId;
                this.mcrPackMCRSalesTable(mcrSalesTable);
            }

            mcrSalesTable.SmmTMCallListId = _salesQuotationTable.CallListID;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRetailSalesQuotationTable</Name>
				<Source><![CDATA[
    internal void initFromRetailSalesQuotationTable(SalesQuotationTable _salesQuotationTable)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            RetailSalesQuotationTable retailQuotation = _salesQuotationTable.retailSalesQuotationTable();
            if (this.shouldInitFromRetailSalesQuotationTable(retailQuotation))
            {
                RetailSalesTable retailSales = this.retailSalesTable();
                this.initRetailSalesTableFromRetailSalesQuotationTable(retailSales, retailQuotation);
                this.retailPackRetailSalesTable(retailSales);
            }
            
            RetailMCRChannelTable channelForCurrentUser = RetailMCRChannelTable::findForCurrentUser();

            // If POS quotation is confirmed in HQ then update channel with current user channel.
            if (channelForCurrentUser.RecId != 0 &&
                SalesTable::canConvertNoncallCenterQuoteToCallCenterOrder(this.retailSalesTable().PaymentsType, channelForCurrentUser.ChannelType))
            {
                this.RetailChannelTable = channelForCurrentUser.RecId;
            }
            else
            {
                this.RetailChannelTable = _salesQuotationTable.RetailChannelTable;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canConvertNoncallCenterQuoteToCallCenterOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// For non-call center quotes, check whether we can convert them into call center sales order.
    /// When that quote is confirmed in HQ
    /// </summary>
    /// <param name = "_paymentType">
    /// Payment type of the quotation.
    /// </param>
    /// /// <param name = "_channelType">
    /// Channel type of the quotation.
    /// </param>
    /// <returns>
    /// True, If conversion is allowed. Else, false.
    /// </returns>
    internal static boolean canConvertNoncallCenterQuoteToCallCenterOrder(RetailPaymentsType _paymentType, RetailChannelType _channelType)
    {
        return _paymentType == RetailPaymentsType::Legacy &&
                _channelType == RetailChannelType::MCRCallCenter &&
                RetailPaymentsEnableOrderCompletionForPosQuotesConfirmedInHQFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInitFromRetailSalesQuotationTable</Name>
				<Source><![CDATA[
    internal protected boolean shouldInitFromRetailSalesQuotationTable(RetailSalesQuotationTable _retailQuotation)
    {
        return _retailQuotation && _retailQuotation.RetailChannel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRetailSalesTableFromRetailSalesQuotationTable</Name>
				<Source><![CDATA[
    internal protected void initRetailSalesTableFromRetailSalesQuotationTable(RetailSalesTable _retailSales, RetailSalesQuotationTable _retailQuotation)
    {
        RetailMCRChannelTable channelForCurrentUser = RetailMCRChannelTable::findForCurrentUser();

        // If POS quotation is confirmed in HQ then update channel with current user channel.
        if (channelForCurrentUser.RecId != 0 &&
            SalesTable::canConvertNoncallCenterQuoteToCallCenterOrder(_retailSales.PaymentsType, channelForCurrentUser.ChannelType))
        {
            _retailSales.RetailChannel = channelForCurrentUser.RecId;
        }
        else
        {
            _retailSales.RetailChannel = _retailQuotation.RetailChannel;
        }

        _retailSales.TotalManualDiscountAmount = _retailQuotation.TotalManualDiscountAmount;
        _retailSales.TotalManualDiscountPercentage = _retailQuotation.TotalManualDiscountPercentage;
        _retailSales.RetailLoyaltyCard = _retailQuotation.RetailLoyaltyCard;
        _retailSales.RetailOrder = _retailQuotation.RetailOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupAffiliationForSalesQuotationOrder</Name>
				<Source><![CDATA[
    void cleanupAffiliationForSalesQuotationOrder(SalesQuotationTable _salesQuotationTable)
    {
        RetailSalesAffiliation retailSalesAffiliation;
        RetailSalesQuotationAffiliation     retailSalesQuotationAffiliation;
        SalesIdBase salesId = this.SalesId;

        if (RetailParameters::isRetailEnabledAndInUse() && salesId)
        {
            delete_from retailSalesAffiliation where retailSalesAffiliation.SalesId == salesId
                notexists join retailSalesQuotationAffiliation
                where retailSalesQuotationAffiliation.Affiliation == retailSalesAffiliation.Affiliation && retailSalesQuotationAffiliation.QuotationId == _salesQuotationTable.QuotationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    void initFromSalesTable(SalesTable salesTable)
    {
        SalesTable_BR           salesTable_BR;
        MCRSalesTableShipping   mcrSalesTableShippingLocal;
        MCRSalesTableShipping   mcrSalesTableShipping;
        MCRSalesTable           mcrSalesTableLocal;
        MCRSalesTable           mcrSalesTable;
        // <GMY>
        SalesTable_W            salesTable_W;
        // </GMY>

        RetailSalesTable retailSalesTable;
        #ISOCountryRegionCodes

        this.Payment                    = salesTable.Payment;
        this.PaymMode                   = salesTable.PaymMode;
        this.PaymSpec                   = salesTable.PaymSpec;
        this.NumberSequenceGroup        = salesTable.NumberSequenceGroup;
        this.CashDisc                   = salesTable.CashDisc;
        this.CashDiscBaseDays           = salesTable.CashDiscBaseDays;
        this.CashDiscBaseDate           = salesTable.CashDiscBaseDate;
        this.CashDiscPercent            = salesTable.CashDiscPercent;
        this.CurrencyCode               = salesTable.CurrencyCode;
        this.DlvTerm                    = salesTable.DlvTerm;
        this.DlvMode                    = salesTable.DlvMode;
        this.DlvReason                  = salesTable.DlvReason;
        this.DefaultDimension           = this.copyDimension(salesTable.DefaultDimension);
        this.setTaxGroup(salesTable.TaxGroup);
        this.InclTax                    = salesTable.InclTax;
        this.OverrideSalesTax           = salesTable.OverrideSalesTax;
        this.Transport                  = salesTable.Transport;
        this.Port                       = salesTable.Port;
        this.StatProcId                 = salesTable.StatProcId;
        this.DiscPercent                = salesTable.DiscPercent;
        this.DeliveryName               = salesTable.DeliveryName;

        if (this.CustAccount == salesTable.CustAccount)
        {
            this.DeliveryPostalAddress = salesTable.DeliveryPostalAddress;
        }
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (salesTable.salesTable_RU().AgreementHeaderExt_RU)
            {
                this.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(this.DefaultDimension);
            }
        }

        if (RetailParameters::isRetailEnabledAndInUse())
        {
            retailSalesTable = this.retailSalesTable();
            retailSalesTable.RetailLoyaltyCard    = salesTable.retailSalesTable().RetailLoyaltyCard;
            this.packRetailSalesTable(retailSalesTable);
        }
        this.AddressRefRecId            = salesTable.AddressRefRecId;
        this.AddressRefTableId          = salesTable.AddressRefTableId;
        this.setShipCarrierInformation(salesTable);

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            mcrSalesTableShippingLocal  = this.mcrSalesTableShipping();
            mcrSalesTableShipping       = salesTable.mcrSalesTableShipping();
            mcrSalesTableLocal          = this.mcrSalesTable();
            mcrSalesTable               = salesTable.mcrSalesTable();

            this.DeliveryPostalAddress = salesTable.DeliveryPostalAddress;
            this.DeliveryName = salesTable.DeliveryName;

            if (mcrSalesTableShippingLocal.Expedite != mcrSalesTableShipping.Expedite
                || mcrSalesTableShippingLocal.ShipComplete != mcrSalesTableShipping.ShipComplete)
            {
                mcrSalesTableShippingLocal.Expedite      = mcrSalesTableShipping.Expedite;
                mcrSalesTableShippingLocal.ShipComplete  = mcrSalesTableShipping.ShipComplete;
                this.mcrPackMCRSalesTableShipping(mcrSalesTableShippingLocal);
            }

            if (mcrSalesTableLocal.PostageGroupID != mcrSalesTable.PostageGroupID)
            {
                mcrSalesTableLocal.PostageGroupID        = mcrSalesTable.PostageGroupID;
                this.mcrPackMCRSalesTable(mcrSalesTableLocal);
            }
        }
        if (BrazilParameters::isEnabled())
        {
            salesTable_BR = this.salesTable_BR();
            salesTable_BR.SalesPurchOperationType_BR    = salesTable.salesTable_BR().SalesPurchOperationType_BR;
            salesTable_BR.ServiceCodeOnDlvAddress_BR    = salesTable.salesTable_BR().ServiceCodeOnDlvAddress_BR;
            salesTable_BR.CustFinalUser_BR              = salesTable.salesTable_BR().CustFinalUser_BR;
            salesTable_BR.PresenceType                  = this.custTable_CustAccount().PresenceType_BR;
            this.packSalesTable_BR(salesTable_BR);
        }

        if (this.InvoiceAccount == salesTable.InvoiceAccount)
        {
            this.DirectDebitMandate = salesTable.DirectDebitMandate;
        }

        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            salesTable_W                = this.salesTable_W();
            salesTable_W.InvoiceType_MY = salesTable.salesTable_W().InvoiceType_MY;
            this.packSalesTable_W(salesTable_W);
        }
        // </GMY>

        if (SalesOrderFinTagFeature::isEnabled())
        {
            this.FinTag = salesTable.FinTag;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceAccount</Name>
				<Source><![CDATA[
    void  initInvoiceAccount()
    {
        CustTable      custTable;
        #ISOCountryRegionCodes

        custTable = this.custTable_InvoiceAccount();

        this.NumberSequenceGroup    = custTable.NumberSequenceGroup;
        this.Payment                = custTable.PaymTermId;
        this.initFromPayment();
        if (custTable.PaymSched)
        {
            this.PaymentSched   = custTable.PaymSched;
        }
        if (RetailMCRChannelTable::mcrEnableOrderCompletion(this))
        {
            // Clearing base payment fields, use attached payment record logic instead.
            this.PaymMode               = '';
            this.PaymSpec               = '';
        }
        else
        {
            this.PaymMode               = custTable.PaymMode;
            this.PaymSpec               = custTable.PaymSpec;
        }

        this.initCashDiscData(custTable);
        
        if (SalesTableTakeGiroTypeFromInvoiceAccountFlight::instance().isEnabled())
        {
            this.GiroType = custTable.GiroType;
        }

        this.setListCode();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV, #isoLT]))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00005, funcName());

            this.InvoiceAutoNumbering_LT         = LtInvoiceAutoNumberingGroups::autoNumberingForSalesInvoice(this.InvoiceAccount);
            this.PackingSlipAutoNumbering_LT     = LtInvoiceAutoNumberingGroups::autoNumberingForSalesPackingSlip(this.InvoiceAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReturnFromSalesTable</Name>
				<Source><![CDATA[
    void initReturnFromSalesTable(SalesTable _other)
    {
        this.CustAccount        = _other.CustAccount;
        this.CustGroup          = _other.CustGroup;

        this.initFromCustTable();
        this.initFromSalesTable(_other);

        this.InvoiceAccount = _other.InvoiceAccount;
        this.DeliveryDateControlType = SalesDeliveryDateControlType::None;
        this.ShippingDateRequested = _other.DeliveryDate;
        this.ReceiptDateRequested = _other.DeliveryDate;

        this.SalesId            = NumberSeq::newGetNum(SalesParameters::numRefSalesId()).num();
        this.ReturnItemNum      = NumberSeq::newGetNum(SalesParameters::numRefReturnItemNum()).num();

        this.SalesType          = SalesType::ReturnItem;
        this.ReturnStatus       = ReturnStatusHeader::Created;

        if (IntrastatCountryRegionParameters::isInEUByIsoCode())
        {
            TransportationDocument::copy(_other, this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxDefaultsFromInvoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies fiscal data fields from the invoice account.
    /// </summary>
    protected void initTaxDefaultsFromInvoiceAccount()
    {
        CustTable      custTable;
        CustParameters custParameters;

        custTable = this.custTable_InvoiceAccount();

        this.initRegistrationNumbers(custTable);
        this.setTaxGroup(TaxSales::custTaxGroup(custTable.DlvTerm, custTable.TaxGroup));
        this.OverrideSalesTax = custTable.OverrideSalesTax;
        custParameters = CustParameters::find();
        if (custParameters.CustNameFromVATNum)
        {
            this.setNameUsingVATNum(custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID),
                                    this.payerPostalAddress().CountryRegionId,
                                    custTable.name(),
                                    custParameters);
        }
        else
        {
            this.SalesName = custTable.name();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRegistrationNumbers</Name>
				<Source><![CDATA[
    private void initRegistrationNumbers(CustTable _custTable)
    {
        _custTable.copyPrimaryRegistrationNumberToVATMap(this);
        this.EnterpriseNumber = _custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRegistrationNumbersFromCustTable</Name>
				<Source><![CDATA[
    private void initRegistrationNumbersFromCustTable(CustTable _custTable)
    {
        if (EnableDefaultingOfFiscalDataFromInvoiceAccountFeature::isEnabled())
        {
            this.initRegistrationNumbers(_custTable);
        }
        else
        {
            this.initRegistrationNumbers(this.custTable_InvoiceAccount());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue(SalesType _salesType = SalesParameters::find().OrderType)
    {
        this.SalesType = _salesType;

        super();

        this.initValue_Server();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue_Server</Name>
				<Source><![CDATA[
    void initValue_Server()
    {
        SalesTableType salesTableType;

        salesTableType = this.type();
        salesTableType.initValue();

        if (smmLicense::crm())
        {
            this.WorkerSalesResponsible   = HcmWorkerLookup::currentWorker();
            this.SalesUnitId              = smmUtility::getCurrentSalesUnit();
        }
        this.WorkerSalesTaker   = HcmWorkerLookup::currentWorker();
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableCreationOfSDAFImplementationDataForSalesOrders</Name>
				<Source><![CDATA[
    //Check that feature to not create sdaf data for sales order is turned on
    public static boolean disableCreationOfSDAFImplementationDataForSalesOrders()
    {
        if (!SubledgerCreationOfSourceDocRecordsFlight::instance().isEnabled() ||
           FeatureStateProvider::isFeatureEnabled(SalesOrderDisableCreationOfSourceDocumentImplementationData::instance()))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMockUpSourceDocumentHeader</Name>
				<Source><![CDATA[
    private void createMockUpSourceDocumentHeader()
    {
        if (!this.SourceDocumentHeader)
        {
            SystemSequence systemSequence  = new SystemSequence();
            try
            {
                systemSequence.suspendRecIds(tableNum(SourceDocumentHeader));
                this.SourceDocumentHeader = systemSequence.reserveValues(1, tableNum(SourceDocumentHeader));
            }
            finally
            {
                if (systemSequence)
                {
                    systemSequence.removeRecIdSuspension(tableNum(SourceDocumentHeader));
                }
            }           
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert(boolean _skipMarkup = false)
    {
        #ISOCountryRegionCodes

        if (!this.SalesId)
        {
            throw(error(strFmt("@SYS26332", fieldPName(SalesTable, SalesId))));
        }

        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        SalesInstrumentationLogger salesInstrumentationLogger = SalesTable::instrumentationLogger();

        SalesOrderInstrumentationActivities salesOrderActivities = salesInstrumentationLogger.salesOrderActivities();

        using (var activityContext = salesOrderActivities.insert(this))
        {
            if (!SalesAndPurchTableTypeVariableFlight::instance().isEnabled())
            {
                this.type().inserting();
            }
           
            SalesTableType salesTableType = this.type();

            if (SalesAndPurchTableTypeVariableFlight::instance().isEnabled())
            {
                salesTableType.inserting();
            }

            if (SalesTable::disableCreationOfSDAFImplementationDataForSalesOrders())
            {
                this.createMockUpSourceDocumentHeader();
            }

            if (this.OneTimeCustomer  &&  !this.SalesName)
            {
                this.SalesName = this.DeliveryName;
            }

            using (var nestedActivityContext = salesInstrumentationLogger.salesOrderActivities().synchronize(this))
            {
                if (this.isInterCompanyOrder())
                {
                    salesTableType.interCompanySyncEngine().synchronize();
                }
            }

            if (#PdsRebateEnabled)
            {
                this.PdsCustRebateGroupId = this.custTable_CustAccount().PdsCustRebateGroupId;
            }

            this.DeliveryDate = this.ShippingDateConfirmed ? this.ShippingDateConfirmed : this.ShippingDateRequested;

            this.SkipUpdate = InterCompanySkipUpdate::No;
            this.setPriceDiscSystemChangePolicy();

            if (this.DlvMode)
            {
                using (var nestedActivityContext = salesInstrumentationLogger.salesOrderActivities().tmsModifiedDlvMode(this))
                {
                    this.type().tmsModifiedDlvMode(true);
                }
            }

            if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(SalesTable_Intrastat)))
            {
                salesTable_Intrastat salesTable_Intrastat = this.salesTable_Intrastat();
                salesTable_Intrastat.SpecialMovement_CZ = intrastatParameters::find().SpecificMovement_CZ;
                this.packSalesTable_Intrastat(salesTable_Intrastat);
            }

            using (var nestedActivityContext = salesInstrumentationLogger.salesOrderActivities().mcrSetRetailChannel(this))
            {
                salesOrderActivities.logSalesOrder(activityContext, this);

                super();

                this.mcrSetRetailChannel();
            }

            this.insertOrderEvent(null);

            if (ASOHFeatureVisibilityManager::isEnabled())
            {
                ASOHOrderManagement::orderHoldInsertOrderEvent(this);
            }

            this.SysExtensionSerializerMap::postInsert();

            if (this.OneTimeCustomer && !this.CustAccount)
            {
                this.createOneTimeAccount();
            }
            else
            {
                this.transferToOnetimeCustomer();
            }

            if (this.InterCompanyPurchId)
            {
                using (var nestedActivityContext = salesInstrumentationLogger.salesOrderActivities().intercompanySynchronize(this))
                {
                    salesTableType.forceIntercompanyLineSynchronization();
                }
            }

            if (!_skipMarkup
            &&  (this.SalesType  != SalesType::ReturnItem
             || (this.SalesType  == SalesType::ReturnItem &&
                 this.SkipUpdate == InterCompanySkipUpdate::No &&
                 this.isInterCompanyOrder())))
            {
                this.createMarkupTrans(false);
            }

            if (this.SkipUpdate != InterCompanySkipUpdate::InterCompany
            &&  this.SkipUpdate != InterCompanySkipUpdate::Both
            &&  this.isInterCompanyOrder())
            {
                using (var nestedActivityContext = salesInstrumentationLogger.salesOrderActivities().markupMirror(this))
                {
                    salesTableType.interCompanyMarkupMirror();
                }
            }

            smmTransLog::initTrans(this, smmLogAction::insert);

            this.interCompanyCreateJournalAutoSummary();

            if (SalesParameters::find().mcrCopyNotes)
            {
                using(var nestedActivityContext = salesInstrumentationLogger.salesOrderActivities().documentType(this))
                {
                    DocuType docuType;

                    while select TypeId from docuType
                        where docuType.TypeGroup == DocuTypeGroup::Note
                    {
                        Docu::copy(this.custTable_CustAccount(), this, docuType.TypeId);
                    }
                }
            }

            if (BrazilParameters::isEnabled())
            {
                salesTableType.updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CustVend);
            }

            this.SysExtensionSerializerMap::postInsert();

            TradeBLWIJournalPurposeCodes::createRecord(TradeBLWICustVend::Customer, this.RecId, this.InvoiceAccount, TradeBLWITypeOfForm::SalesTable);

            if (isConfigurationkeyEnabled(configurationKeyNum(LedgerBasicSalesTax)) &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                if (CustTable::find(this.CustAccount).ExportSales_PL)
                {
                    ExportSalesOrder::createFromSalesOrder(this.SalesId);
                }
            }

            this.insertCDSMessageQueue();

            RetailEventNotificationSetting  retailEventNotificationSetting;

            using(var nestedActivityContext = salesInstrumentationLogger.salesOrderActivities().retailEventNotification(this))
            {
                select firstOnly RecId  from retailEventNotificationSetting
            where retailEventNotificationSetting.dataAreaId == curext()
            && retailEventNotificationSetting.EventNotificationType == RetailEventNotificationType::ReplacementOrderCreation;

                // If replacement order is created
                if ((this.SalesType == SalesType::Sales)
            && (this.ReturnItemNum != '')
            && retailEventNotificationSetting.RecId)
                {
                    RetailEventNotificationAction::InsertRetailOENAction(
                            RetailEventNotificationType::ReplacementOrderCreation,
                            this.RecId,
                            this);
                }
                else // Else, any other type of order creation
                {
                    RetailEventNotificationAction::InsertRetailOENAction(
                            RetailEventNotificationType::OrderCreation,
                            this.RecId,
                            this);
                }

                if (SalesAndPurchTableTypeVariableFlight::instance().isEnabled())
                {
                    salesTableType.inserted();
                }
                else
                {
                    this.type().inserted();
                }               
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCDSMessageQueue</Name>
				<Source><![CDATA[
    private void insertCDSMessageQueue()
    {
        if (this.IsIntegration == TradeIntegrationType::Dynamics365Sales
            && this.QuotationId)
        {
            TradeCDSMessageQueue::processCreateSalesOrderFromQuotation(this);

            SalesParameters salesParameters = SalesParameters::find();

            if (salesParameters.IsD365SalesQuotationLifecycleEnabled
                && salesParameters.IsD365SalesDefaultSalesOrderEnabled)
            {
                TradeCDSMessageQueue::processQuotationDefaultSalesOrder(this, minInt(), maxInt(), true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyAllowIndirectCreationOrig</Name>
				<Source><![CDATA[
    public InterCompanyAllowIndirectCreationTxt interCompanyAllowIndirectCreationOrig()
    {
        InterCompanyAllowIndirectCreationTxt interCompanyAllowIndirectCreationTxt;

        if (this.InterCompanyDirectDeliveryOrig
        && !this.InterCompanyAllowIndirectCreationOrig)
        {
            interCompanyAllowIndirectCreationTxt = "@SYS95179";
        }
        return interCompanyAllowIndirectCreationTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyAllowIndirectCreationTxt</Name>
				<Source><![CDATA[
    display InterCompanyAllowIndirectCreationTxt interCompanyAllowIndirectCreationTxt()
    {
        return this.interCompanyAllowIndirectCreationOrig();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyCheckCurrency</Name>
				<Source><![CDATA[
    boolean interCompanyCheckCurrency()
    {
        MarkupTrans     markupTrans;

        if (this.isInterCompanyOrder()
        &&  this.CurrencyCode != this.orig().CurrencyCode)
        {
            if (SalesLine::exist(this.SalesId))
            {
                return checkFailed("@SYS105402");
            }

            select firstonly markupTrans
                   index hint TableRecIdIdx
                   where markupTrans.TransTableId == this.TableId
                   &&    markupTrans.TransRecId   == this.RecId
                   &&   !markupTrans.IsDeleted;
            if (markupTrans)
            {
                return checkFailed("@SYS105402");
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyDirectDeliveryReturn</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the InterCompanyAutoCreateOrders and InterCompanyAllowIndirectCreate fieldsto the value of the
    ///    InterCompanyDirectDelivery field.
    /// </summary>
    /// <remarks>
    ///    This method is used, when the InterCompanyDirectDelivery field is changed for a return order.
    /// </remarks>
    public void interCompanyDirectDeliveryReturn()
    {
        this.InterCompanyAutoCreateOrders      = this.InterCompanyDirectDelivery;
        this.InterCompanyAllowIndirectCreation = this.InterCompanyDirectDelivery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyCreateJournalAutoSummary</Name>
				<Source><![CDATA[
    private void interCompanyCreateJournalAutoSummary()
    {
        using (var nestedActivityContext = SalesTable::instrumentationLogger().salesOrderActivities().interCompanyCreateJournal(this))
        {
            if (this.InterCompanyCompanyId
            &&  this.InterCompanyOriginalCustAccount
            &&  this.interCompanyEndpointActionPolicy().CopyAutoSumFromOriginalCust)
            {
                this.AutoSummaryModuleType = ModuleCustSales::Sales;
                this.doUpdate();
                SalesJournalAutoSummary::interCompanyInitAllFromCustTable(this);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyEndpointActionPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the intercompany trading policy for the current <c>SalesTable</c> table record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InterCompanyEndpointActionPolicy</c> table; otherwise, an empty record.
    /// </returns>
    public InterCompanyEndpointActionPolicy interCompanyEndpointActionPolicy(boolean   _forUpdate = false)
    {
        InterCompanyEndpointActionPolicy    interCompanyEndpointActionPolicy;

        changecompany (
                       this.company()
                       )
        {
            interCompanyEndpointActionPolicy = CustTable::find(this.CustAccount).interCompanyTradingPartner().interCompanyEndpointActionPolicy(_forUpdate);
        }
        return interCompanyEndpointActionPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyNonICExist</Name>
				<Source><![CDATA[
    public boolean interCompanyNonICExist()
    {
        SalesLine   salesLine;
        PurchLine   purchLine;

        select firstonly RecId from salesLine
               where salesLine.SalesId == this.SalesId
               &&   (salesLine.InventRefType != InventRefType::Purch
                 || (salesLine.InventRefType == InventRefType::Purch
                  && salesLine.InventRefTransId))
        notexists join purchLine
             where (purchLine.ItemRefType       == InventRefType::Sales
             &&    !purchLine.IsDeleted
             &&     purchLine.InventTransId     == salesLine.InventRefTransId
             &&     purchLine.InterCompanyInventTransId);

        return salesLine.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyOriginalSalesInfo</Name>
				<Source><![CDATA[
    public container interCompanyOriginalSalesInfo()
    {
        InterCompanySalesType   salesType;
        SalesTable              salesTable;
        SalesStatus             salesStatus = SalesStatus::None;
        PurchTable              purchTable;
        PurchStatus             purchStatus = PurchStatus::None;

        if (this.InterCompanyOrder
        &&  this.InterCompanyCompanyId)
        {
            changecompany(this.InterCompanyCompanyId)
            {
                if (this.InterCompanyOriginalSalesId)
                {
                    select SalesType, SalesStatus from salesTable
                           index hint SalesIdx
                           where salesTable.SalesId == this.InterCompanyOriginalSalesId;
                    salesType   = enum2str(salesTable.SalesType);
                    salesStatus = salesTable.SalesStatus;
                }

                select PurchStatus from purchTable
                       index hint PurchIdx
                       where purchTable.PurchId == this.InterCompanyPurchId;
                purchStatus = purchTable.PurchStatus;
            }
        }
        return [purchStatus,salesType,salesStatus];
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyOriginDisplay</Name>
				<Source><![CDATA[
    display InterCompanyOriginDisplay interCompanyOriginDisplay()
    {
        InterCompanyOriginDisplay   interCompanyOriginDisplay;
        DictEnum                    dictEnum = new DictEnum(enumNum(InterCompanyOrigin));

        if (this.InterCompanyOrder)
        {
            interCompanyOriginDisplay = dictEnum.value2Name(this.InterCompanyOrigin);
        }
        return interCompanyOriginDisplay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyPurchTable</Name>
				<Source><![CDATA[
    PurchTable  interCompanyPurchTable(boolean  _forUpdate = false)
    {
        PurchTable      purchTable;

        if (this.InterCompanyOrder
        &&  this.InterCompanyCompanyId
        &&  this.InterCompanyPurchId)
        {
            changecompany(this.InterCompanyCompanyId)
            {
                purchTable = PurchTable::find(this.InterCompanyPurchId, _forUpdate);
            }
        }
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRightsPostInterCompanyPurchaseOrder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean hasRightsPostInterCompanyPurchaseOrder(boolean _checkDirectDeliveryOrig = true)
    {
        boolean ok = true;

        if (this.isInterCompanyOrder())
        {
            changecompany(this.InterCompanyCompanyId)
            {
                if ((this.InterCompanyDirectDeliveryOrig 
                        || !_checkDirectDeliveryOrig)
                    && this.interCompanyPurchTable().interCompanyEndpointActionPolicy().PostPurchInvoice)
                {
                    SecurityRights rights = SecurityRights::construct();
                    if (rights.menuItemAccessRight(SecurableType::MenuItemDisplay,  menuItemDisplayStr(PurchFormLetter_Invoice)) != AccessRight::Delete)
                    {
                        ok = checkFailed(strFmt("@SCM:NotEnoughRightsForPosting", this.InterCompanyCompanyId));
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyReplacementRegistered</Name>
				<Source><![CDATA[
    private boolean interCompanyReplacementRegistered()
    {
        boolean                 ret;
        SalesLine               salesLine;
        ReturnDispositionCode   returnDispositionCode;

        while select forceplaceholders salesLine
              where salesLine.SalesId       == this.SalesId
              &&    salesLine.InventRefType == InventRefType::Purch
              &&    salesLine.InventRefTransId
        join returnDispositionCode
             where returnDispositionCode.DispositionCodeId == salesLine.ReturnDispositionCodeId
        {
            if (salesLine.interCompanySalesLineExist()
            &&  returnDispositionCode.createReplacement())
            {
                ret = true;
                break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyTradingValueMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the intercompany trading value mapping for the current <c>SalesTable</c> table record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InterCompanyTradingValueMap</c> table; otherwise, an empty record.
    /// </returns>
    public InterCompanyTradingValueMap interCompanyTradingValueMap(boolean   _forUpdate = false)
    {
        InterCompanyTradingValueMap interCompanyTradingValueMap;

        changecompany (
                       this.company()
                       )
        {
            interCompanyTradingValueMap = CustTable::find(this.CustAccount).interCompanyTradingPartner().interCompanyTradingValueMap(_forUpdate);
        }
        return interCompanyTradingValueMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyUpdateNow</Name>
				<Source><![CDATA[
    boolean  interCompanyUpdateNow()
    {
        boolean  ok;
        #isoCountryRegionCodes
        SalesTable_RU salesTableRU;

        if (!this.RecId)
        {
            ok = true;
        }

        if (this.orig().SalesType                       != this.SalesType
        ||  this.orig().CurrencyCode                    != this.CurrencyCode
        ||  this.orig().DlvTerm                         != this.DlvTerm
        ||  this.orig().DlvMode                         != this.DlvMode
        ||  this.orig().DeliveryDate                    != this.DeliveryDate
        ||  this.orig().ReceiptDateRequested            != this.ReceiptDateRequested
        ||  this.orig().ReceiptDateConfirmed            != this.ReceiptDateConfirmed
        ||  this.orig().ShippingDateRequested           != this.ShippingDateRequested
        ||  this.orig().ShippingDateConfirmed           != this.ShippingDateConfirmed
        ||  this.orig().DeliveryPostalAddress           != this.DeliveryPostalAddress
        ||  this.orig().DeliveryName                    != this.DeliveryName
        ||  this.orig().InterCompanyOriginalSalesId     != this.InterCompanyOriginalSalesId
        ||  this.orig().InterCompanyOriginalCustAccount != this.InterCompanyOriginalCustAccount
        ||  this.orig().InterCompanyDirectDelivery      != this.InterCompanyDirectDelivery
        ||  this.orig().InterCompanyDirectDeliveryOrig  != this.InterCompanyDirectDeliveryOrig
        ||  this.orig().PurchOrderFormNum               != this.PurchOrderFormNum
        ||  this.orig().CustomerRef                     != this.CustomerRef
        ||  this.orig().ReturnItemNum                   != this.ReturnItemNum
        ||  this.orig().DiscPercent                     != this.DiscPercent
        ||  this.orig().ReturnReasonCodeId              != this.ReturnReasonCodeId
        ||  this.orig().ReturnReplacementCreated        != this.ReturnReplacementCreated
        ||  this.orig().MatchingAgreement               != this.MatchingAgreement
        ||  !DimensionDefaultFacade::areEqual(this.orig().DefaultDimension, this.DefaultDimension))
        {
            ok = true;
        }
        else
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                salesTableRU = this.salesTable_RU();
                ok = salesTableRU.orig().InventProfileId_RU != salesTableRU.InventProfileId_RU;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceName</Name>
				<Source><![CDATA[
    display CustName invoiceName()
    {
        return this.custTable_InvoiceAccount().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvanceCreditOnReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the return order is advance credit.
    /// </summary>
    /// <returns>
    /// true if the return order is advance credit; otherwise, false.
    /// </returns>
    public boolean isAdvanceCreditOnReturn()
    {
        MCRReturnSalesTable mcrReturnSalesTable;

        select firstonly AdvanceCredit from mcrReturnSalesTable where mcrReturnSalesTable.SalesTable == this.RecId;
        if (mcrReturnSalesTable && mcrReturnSalesTable.AdvanceCredit == NoYes::Yes)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBankDocumentCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a bank document has been created for this order.
    /// </summary>
    /// <returns>
    /// true if it a bank document has been created; otherwise, false.
    /// </returns>
    public boolean isBankDocumentCreated()
    {
        return this.isBankLCCreated()
            || this.isBankLGCreated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBankLCCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a bank LC has been created for this order.
    /// </summary>
    /// <returns>
    /// true if a bank LC has been created; otherwise, false.
    /// </returns>
    public boolean isBankLCCreated()
    {
        boolean     ret = false;

        if (this.isMarkedForBankLC())
        {
            ret = BankLCExport::existBySalesTable(this.SalesId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBankLGCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a bank LG has been created for this order.
    /// </summary>
    /// <returns>
    /// true if a bank LG has been created; otherwise, false.
    /// </returns>
    public boolean isBankLGCreated()
    {
        boolean     ret = false;

        if (this.isMarkedForBankLG() && this.BankLGDocumentMap::isLinkedToGuarantee())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCancellingFiscalDocApproved_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the fiscal document being cancelled is approved
    /// </summary>
    /// <returns>
    /// True if the fiscal document being cancelled is approved, false otherwise
    /// </returns>
    public boolean isCancellingFiscalDocApproved_BR()
    {
        SalesTable_BR       salesTable_BR;
        FiscalDocument_BR   fiscalDocumentBeingCancelled;

        salesTable_BR = this.salesTable_BR();

        if (!salesTable_BR.InvoiceRefRecID_BR)
        {
            return false;
        }

        fiscalDocumentBeingCancelled = FiscalDocument_BR::findByRef(tableNum(CustInvoiceJour), salesTable_BR.InvoiceRefRecID_BR);

        return fiscalDocumentBeingCancelled.Status == FiscalDocumentStatus_BR::Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCancellingSalesReturn_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Verifies whether the sales order is for cancelling a sales return previously entered.
    /// </summary>
    /// <returns>
    ///     true if the sales order is for cancelling a sales return; false otherwise.
    /// </returns>
    public boolean isCancellingSalesReturn_BR()
    {
        SalesTable_BR       salesTable_BR;
        FiscalDocument_BR   fiscalDocumentBeingCancelled;

        salesTable_BR = this.salesTable_BR();

        if (!salesTable_BR.InvoiceRefRecID_BR)
        {
            return false;
        }

        fiscalDocumentBeingCancelled = FiscalDocument_BR::findByRef(tableNum(CustInvoiceJour), salesTable_BR.InvoiceRefRecID_BR);

        if (fiscalDocumentBeingCancelled.Direction == FiscalDocDirection_BR::Incoming)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditCardPaymentType</Name>
				<Source><![CDATA[
    public boolean isCreditCardPaymentType()
    {
        return isConfigurationkeyEnabled(configurationKeyNum(CreditCard)) && this.payment().CreditCardPaymentType == CreditCardPaymentType::CreditCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditCheckEligible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see whether the current sales order type is eligible for the credit limit check.
    /// </summary>
    /// <returns>
    /// true if current sales order type is eligible for the credit limit check; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Calls to the related types overwritten method.
    /// </remarks>
    boolean isCreditCheckEligible()
    {
        return this.type().isCreditCheckEligible();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks to see if any of the lines associated with the current header is a credit note.
    /// </summary>
    /// <returns>
    ///     True, if at least one line is a credit note.
    /// </returns>
    public boolean isCreditNote_CZ()
    {
        SalesLine salesLine;
        SalesLine salesLineRefRet;

        select firstonly RecId from salesLine
            where salesLine.SalesId == this.SalesId &&
                    salesLine.InventTransIdReturn;

        select firstonly RecId from salesLineRefRet
            where salesLineRefRet.SalesId == this.SalesId &&
                    salesLineRefRet.RefReturnInvoiceTrans_W;

        return salesLine.RecId != 0 || salesLineRefRet.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote_PL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks to see if any of the lines associated with the current header is a credit note.
    /// </summary>
    /// <returns>
    ///     True, if at least one line is a credit note.
    /// </returns>
    public boolean isCreditNote_PL()
    {
        #ISOCountryRegionCodes
        SalesLine salesLine;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL,#isoHU,#isoCZ,#isoLT,#isoLV,#isoEE]) && this.SalesId)
        {
            select firstonly RecId from salesLine
                where salesLine.SalesId == this.SalesId &&
                        salesLine.CreditNoteInternalRef_PL;
        }

        return salesLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterCompanyOrder</Name>
				<Source><![CDATA[
    boolean  isInterCompanyOrder()
    {
        return (this.InterCompanyCompanyId != ''
            &&  this.InterCompanyOrder
            && !this.SkipUpdate
            &&  this.areInterCompanyOrdersAllowedForSalesType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterCompanyOrderChain</Name>
				<Source><![CDATA[
    internal boolean isInterCompanyOrderChain()
    {
        return this.InterCompanyOrder && this.InterCompanyCompanyId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>areInterCompanyOrdersAllowedForSalesType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if intercompany orders are allowed for the current sales type.
    /// </summary>
    /// <returns>true, if intercompany orders are allowed; otherwise, false.</returns>
    public boolean areInterCompanyOrdersAllowedForSalesType()
    {
        return this.SalesType == SalesType::Journal
            || this.SalesType == SalesType::Sales
            || this.SalesType == SalesType::Subscription
            || this.SalesType == SalesType::ReturnItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterCompanyPOInvoiceMatched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a related intercompany purchase order was partially or fully invoiced.
    /// </summary>
    /// <returns>
    /// true if the related intercompany purchase order was partially or fully invoiced; otherwise, false.
    /// </returns>
    public boolean isInterCompanyPOInvoiceMatched()
    {
        boolean ret;

        if (this.isInterCompanyOrder())
        {
            ret = (select firstonly crosscompany RecId from vendInvoicePurchLink
                    where vendInvoicePurchLink.OrigPurchId == this.InterCompanyPurchId
                       && vendInvoicePurchLink.DataAreaId  == this.InterCompanyCompanyId).RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkedForBankLC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the sales order is marked for <c>Letter of Credit</c>.
    /// </summary>
    /// <returns>
    /// true if the Sales order is marked for <c>Letter of Credit</c>; otherwise, false.
    /// </returns>
    public boolean isMarkedForBankLC()
    {
        return this.BankDocumentType == BankDocumentType::LetterOfCredit
            || this.BankDocumentType == BankDocumentType::ImportCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkedForBankLG</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the sales order is marked for <c>Letter of Guarantee</c>.
    /// </summary>
    /// <returns>
    /// true if the sales order is marked for <c>Letter of Guarantee</c>; otherwise, false.
    /// </returns>
    public boolean isMarkedForBankLG()
    {
        return this.BankDocumentType == BankDocumentType::LetterOfGuarantee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnlineOrder</Name>
				<Source><![CDATA[
    private boolean isOnlineOrder()
    {
        RetailOnlineChannelTable channelTable;
        RetailSalesTable retailSalesTable;

        // find an online channel if this SO links to it
        select firstonly RecId from channelTable
            join SalesTable, RetailChannel from retailSalesTable
            where retailSalesTable.SalesTable == this.RecId
               && channelTable.RecId == retailSalesTable.RetailChannel;

        return (channelTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SalesTable</c> record is a Retail sales record
    /// </summary>
    /// <returns>
    /// true if the <c>SalesTable</c> record is a Retail sales record; otherwise, false.
    /// </returns>
    public display NoYes isRetailSale()
    {
        return this.retailSalesTable().RetailOrder == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailCashAndCarrySales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SalesTable</c> record is a Retail Cash and Carry sales record
    /// </summary>
    /// <returns>
    /// true if the <c>SalesTable</c> record is a Retail sales record created from Default customer sales
    /// in POS, with or without aggregation; otherwise, false.
    /// </returns>
    public display NoYes isRetailCashAndCarrySales()
    {
        return RetailSalesTableCashAndCarryCache::isRetailCashAndCarrySales(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailCashAndCarrySalesNoCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SalesTable</c> record is a Retail Cash and Carry sales record without using the cached value.
    /// </summary>
    /// <returns>
    /// true if the <c>SalesTable</c> record is a Retail sales record created from Default customer sales
    /// in POS, with or without aggregation; otherwise, false.
    /// </returns>
    public boolean isRetailCashAndCarrySalesNoCache()
    {
        return RetailSalesTableCashAndCarryCache::isRetailCashAndCarrySalesNoCache(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailCashAndCarrySalesWithStrictInvoicing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SalesTable</c> record is a Retail Cash and Carry sales record where invoicing was not marked as skipped.
    /// </summary>
    /// <returns>
    /// true if the <c>SalesTable</c> record is a Retail cash and carry sales where invoicing was not marked as skipped; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If cash and carry and invoicing was not marked as skipped for transactions paid with customer account, then we should restrict invoicing actions.
    /// </remarks>
    internal boolean isRetailCashAndCarrySalesWithStrictInvoicing()
    {
        return this.isRetailSale() && this.isRetailCashAndCarrySalesNoCache() && !SalesTable::isRetailInvoiceSkipped(this.retailSalesTable().StatementId, this.SalesId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailSalesOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the RetailSalesOrderType for the SalesTable.
    /// </summary>
    /// <returns>
    ///     CashAndCarry if a sales order from a cash and carry sales, elseif CustomerOrder if a Retail customer order;
    ///     otherwise, None.
    /// </returns>
    public RetailSalesOrderType getRetailSalesOrderType()
    {
        if (this.isRetailSale())
        {
            return this.isRetailCashAndCarrySales() == NoYes::Yes ? RetailSalesOrderType::CashAndCarry : RetailSalesOrderType::CustomerOrder;
        }

        return RetailSalesOrderType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailStatement_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SalesTable</c> record is originated from a Retail statement
    /// </summary>
    /// <returns>
    /// True if the <c>SalesTable</c> record is originated from a Retail statement; otherwise, false.
    /// </returns>
    public NoYes isRetailStatement_BR()
    {
        return this.isRetailCashAndCarrySales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefIntercompanyOriginalSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serves as the jump reference for the original sales order that relates to the sales order.
    /// </summary>
    /// <param name="_caller">
    /// The object that is calling the <c>SalesTable.jumpRefIntercompanyOriginalSalesOrder</c> method;
    /// optional.
    /// </param>
    public void jumpRefIntercompanyOriginalSalesOrder(Object _caller = null)
    {
        if (this.SalesType == SalesType::ReturnItem)
        {
            TradeInterCompany::construct(this,true).formRun(formStr(ReturnTable),_caller);
        }
        else
        {
            TradeInterCompany::construct(this,true).formRun(formStr(SalesTable),_caller);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefIntercompanyPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serves as the jump reference for the intercompany purchase order that relates to the sales order.
    /// </summary>
    /// <param name="_caller">
    /// The object that is calling the <c>SalesTable.jumpRefIntercompanyPurchaseOrder</c> method; optional.
    /// </param>
    [Replaceable]
    public void jumpRefIntercompanyPurchaseOrder(Object _caller = null)
    {
        TradeInterCompany::construct(this).formRun(formStr(PurchTable),_caller);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefReturnItemNum</Name>
				<Source><![CDATA[
    void jumpRefReturnItemNum(Object object)
    {
        Args            args;
        FormRun         formRun;
        SalesTable      salesTable;

        salesTable = this.SalesType != SalesType::ReturnItem ? SalesTable::findReturnItemNum(this.ReturnItemNum) : this;

        args = new Args(formStr(ReturnTable));
        args.record(salesTable);
        args.caller(object);

        // Menu item info will be used by security framework, when setting access rights to form datasources
        args.menuItemType(MenuItemType::Display);
        args.menuItemName(menuitemDisplayStr(ReturnTableDetails));

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastConfirm</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display CustConfirmDocNum lastConfirm()
    {
        CustConfirmSalesLink    custConfirmSalesLink;
        CustConfirmJour         custConfirmJour;

        select firstonly TableId from custConfirmSalesLink
                index hint origSalesIdx
                order by ConfirmDate desc, ConfirmId desc
                where custConfirmSalesLink.OrigSalesId == this.SalesId
            join ConfirmDocNum from custConfirmJour
                where custConfirmJour.ConfirmId     == custConfirmSalesLink.ConfirmId   &&
                      custConfirmJour.ConfirmDate   == custConfirmSalesLink.ConfirmDate;
        return custConfirmJour.ConfirmDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastConfirmDate</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display TransDate lastConfirmDate()
    {
        return (select maxof(ConfirmDate) from custConfirmSalesLink
                    index hint origSalesIdx
                    where custConfirmSalesLink.OrigSalesId == this.SalesId).ConfirmDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastFacture_RU</Name>
				<Source><![CDATA[
    #define.FactureNumPosition(1)
    public FactureExternalId_RU lastFacture_RU()
    {
        return conPeek(this.lastFactureNumDate_RU(), #FactureNumPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastFactureNumDate_RU</Name>
				<Source><![CDATA[
    private container lastFactureNumDate_RU()
    {
        FactureJour_RU       jour;
        RecordSortedList     list = new RecordSortedList(tableNum(FactureJour_RU)),
                             tmpList;
        CustInvoiceSalesLink invoiceSalesLink;
        CustInvoiceJour      invoiceJour;

        // to avoid BP warning
        void dummy()
        {
        }
        select firstonly RecId from jour;
        if (! jour.RecId)
            return [ "", dateNull() ];

        list.sortOrder(fieldNum(FactureJour_RU, FactureDate),
                       fieldNum(FactureJour_RU, FactureId),
                       fieldNum(FactureJour_RU, ModifiedDateTime),
                       fieldNum(FactureJour_RU, RecId));

        while select RecId from invoiceSalesLink
            index hint origSalesIdx
            where invoiceSalesLink.OrigSalesId == this.SalesId
        join invoiceJour
            where invoiceJour.SalesId          == invoiceSalesLink.SalesId   &&
                  invoiceJour.InvoiceId        == invoiceSalesLink.InvoiceId &&
                  invoiceJour.InvoiceDate      == invoiceSalesLink.InvoiceDate
        {
            tmpList = invoiceJour.factureJourSortedList_RU();
            tmpList.first(jour);
            if (jour)
            {
                while (tmpList.next(jour))
                {
                    dummy();
                }
                // last element

                if (! list.find(jour))
                {
                    list.ins(jour);
                }
            }
        }

        list.first(jour);
        while (list.next(jour))
        {
            dummy();
        }
        // last element

        return [ jour.FactureExternalId, jour.FactureDate ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the document number of the last invoice posted for this sales order.
    /// </summary>
    /// <param name="_skipVendorFulfilledInvoices">
    /// true if sales invoices that have been fulfilled by intercompany invoices should be skipped; otherwise, false.
    /// </param>
    /// <returns>
    /// The document number of the last invoice posted for this sales order.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display InvoiceId lastInvoice(boolean _skipVendorFulfilledInvoices = false)
    {
        ProjInvoiceItem projInvoiceItem;
        CustInvoiceSalesLink    custInvoiceSalesLink;
        VendInvoiceJour         vendInvoiceJour;
        container               vendInvoiceCompany = [this.InterCompanyCompanyId];
        InvoiceId               firstInvoiceId;

        if (!this.ProjId)
        {
            while select InvoiceId from custInvoiceSalesLink
                    index hint origSalesIdx
                    order by InvoiceDate desc, InvoiceId desc
                   where custInvoiceSalesLink.OrigSalesId == this.SalesId
            {
                if (_skipVendorFulfilledInvoices)
                {
                    // Return the most recent sales invoice without a corresponding vendor invoice
                    select crossCompany:vendInvoiceCompany RecId from vendInvoiceJour
                        where vendInvoiceJour.PurchId == this.InterCompanyPurchId &&
                              vendInvoiceJour.InvoiceId == custInvoiceSalesLink.InvoiceId;

                    if (vendInvoiceJour.RecId == 0)
                    {
                        return custInvoiceSalesLink.InvoiceId;
                    }

                    if (firstInvoiceId == '')
                    {
                        firstInvoiceId = custInvoiceSalesLink.InvoiceId;
                    }
                }
                else
                {
                    return custInvoiceSalesLink.invoiceId;
                }
            }

            // If we didn't find any sales invoice without a corresponding vendor invoice, return the first invoice ID
            return firstInvoiceId;
        }

        // This is invoiced from Project
        return (select firstonly ProjInvoiceId
                from projInvoiceItem
                index hint InvoiceIdx
                order by InvoiceDate desc, ProjInvoiceId desc
                where projInvoiceItem.SalesId == this.SalesId).ProjInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoice4Paym_RU</Name>
				<Source><![CDATA[
    display Invoice4PaymId_RU lastInvoice4Paym_RU()
    {
        CustInvoice4PaymSalesLink_RU custInvoice4PaymSalesLink_RU;

        return (select reverse firstonly Invoice4PaymId from custInvoice4PaymSalesLink_RU
                    index hint OrigSalesIdx
                    order by Invoice4PaymDate
                    where custInvoice4PaymSalesLink_RU.OrigSalesId == this.SalesId).Invoice4PaymId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoice4PaymDate_RU</Name>
				<Source><![CDATA[
    display TransDate lastInvoice4PaymDate_RU()
    {
        CustInvoice4PaymSalesLink_RU custInvoice4PaymSalesLink_RU;

        return (select maxof(Invoice4PaymDate) from custInvoice4PaymSalesLink_RU
                    index hint OrigSalesIdx
                    where custInvoice4PaymSalesLink_RU.OrigSalesId == this.SalesId).Invoice4PaymDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoiceDate</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display TransDate lastInvoiceDate()
    {
        ProjInvoiceItem projInvoiceItem;

        if (!this.ProjId)
        {
            return (select maxof(InvoiceDate) from custInvoiceSalesLink
                        index hint origSalesIdx
                        where  custInvoiceSalesLink.OrigSalesId == this.SalesId).InvoiceDate;
        }

        // This is invoiced from Project
        return (select maxof(InvoiceDate)
                from projInvoiceItem
                where projInvoiceItem.SalesId==this.SalesId).InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastJournals</Name>
				<Source><![CDATA[
    container lastJournals()
    {
        #ISOCountryRegionCodes

        container  c;

        c = conIns(c, SalesTableType::posQuotation(),       [this.lastQuotation(),      this.lastQuotationDate()]);
        c = conIns(c, SalesTableType::posConfirmation(),    [this.lastConfirm(),        this.lastConfirmDate()]);
        c = conIns(c, SalesTableType::posPickingList(),     [this.lastPickingList(),    this.lastPickingListDate()]);
        c = conIns(c, SalesTableType::posPackingSlip(),     [this.lastPackingSlip(),    this.lastPackingSlipDate()]);
        c = conIns(c, SalesTableType::posInvoice(),         [this.lastInvoice(),        this.lastInvoiceDate()]);
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            c += ["", dateNull()];
            c += ["", dateNull()];
            c = conIns(c, SalesTableType::posInvoice4Paym_RU(), [this.lastInvoice4Paym_RU(),this.lastInvoice4PaymDate_RU()]);
            c = conIns(c, SalesTableType::posFacture_RU(),      this.lastFactureNumDate_RU());
        }

        return c;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the last packing slip ID.
    /// </summary>
    /// <returns>The last packing slip ID.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    display PackingSlipId lastPackingSlip()
    {
        return (select firstonly PackingSlipId from custPackingSlipSalesLink
                    index hint origSalesIdx
                    order by DeliveryDate desc, CreatedDateTime desc, PackingSlipId desc // CreatedDateTime is not set on all records
                    where custPackingSlipSalesLink.OrigSalesId  == this.SalesId).PackingSlipId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPackingSlipDate</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display TransDate  lastPackingSlipDate()
    {
        
        return (select firstonly DeliveryDate from custPackingSlipSalesLink
                    index hint origSalesIdx
                    order by DeliveryDate desc, CreatedDateTime desc // CreatedDateTime is not set on all records
                    where custPackingSlipSalesLink.OrigSalesId  == this.SalesId).DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPickingList</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display WMSPickingRouteID  lastPickingList()
    {
        return (select firstonly PickingRouteId from wmsPickingRouteLink
                    order by ActivationDateTime desc, PickingRouteId desc
                    where wmsPickingRouteLink.OrigInventTransRefId == this.SalesId).PickingRouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPickingListDate</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display TransDate  lastPickingListDate()
    {
        WMSPickingRoute     wmsPickingRoute;
        WMSPickingRouteLink wmsPickingRouteLink;
        utcdatetime         dateTime;

        select maxof(ActivationDateTime) from wmsPickingRouteLink
            where wmsPickingRouteLink.OrigInventTransRefId == this.SalesId;

        dateTime = wmsPickingRouteLink.ActivationDateTime;

        if (!dateTime)
        {
            select maxof(EndDateTime) from wmsPickingRoute
                exists join wmsPickingRouteLink
                    where wmsPickingRouteLink.PickingRouteId        == wmsPickingRoute.PickingRouteID
                    &&    wmsPickingRouteLink.ActivationDateTime    == wmsPickingRoute.ActivationDateTime
                    &&    wmsPickingRouteLink.OrigInventTransRefId  == this.SalesId;

            dateTime = wmsPickingRoute.EndDateTime;
        }

        dateTime = DateTimeUtil::applyTimeZoneOffset(dateTime,DateTimeUtil::getUserPreferredTimeZone());
        return DateTimeUtil::date(dateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>quotationTypesForLastQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the quotation types to use for finding the last quotation.
    /// </summary>
    /// <returns>The quotation types to use for finding the last quotation.</returns>
    protected container quotationTypesForLastQuotation()
    {
        return [QuotationType::Sales];
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastQuotation</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display QuotationDocNum lastQuotation()
    {
        CustQuotationConfirmSalesLink   custQuotationConfirmSalesLink;
        CustQuotationConfirmJour        custQuotationConfirmJour;

        if (this.QuotationId)
        {
            select firstonly TableId from custQuotationConfirmSalesLink
                    order by QuotationDate desc, QuotationConfirmId desc
                    where custQuotationConfirmSalesLink.OrigQuotationId == this.QuotationId
                join QuotationDocNum from custQuotationConfirmJour
                    where custQuotationConfirmJour.QuotationConfirmId   == custQuotationConfirmSalesLink.QuotationConfirmId   &&
                          custQuotationConfirmJour.QuotationDate        == custQuotationConfirmSalesLink.QuotationDate &&
                          custQuotationConfirmJour.QuotationType        in this.quotationTypesForLastQuotation();
        }
        return custQuotationConfirmJour.QuotationDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastQuotationDate</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display TransDate lastQuotationDate()
    {
        TransDate   lastQuotationDate;

        if (this.QuotationId)
        {
            lastQuotationDate = (select maxof(QuotationDate) from custQuotationConfirmSalesLink
                    where custQuotationConfirmSalesLink.OrigQuotationId == this.QuotationId).QuotationDate;
        }
        return lastQuotationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID of the table considered the line table in the current header-line
    /// relationship.
    /// </summary>
    /// <returns>
    /// ID of the <c>SalesLine</c> table.
    /// </returns>
    public RefTableId lineMapping()
    {
        return tableNum(SalesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineNumForCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line number of the sales credit note line.
    /// </summary>
    /// <returns>
    /// The line number.
    /// </returns>
    public LineNum lineNumForCreditNote()
    {
        SalesLine   tmpSalesLine;
        LineNum     lineCount = 0;

        select RecId from tmpSalesLine
            where tmpSalesLine.SalesId == this.SalesId &&
                tmpSalesLine.CreditNoteInternalRef_PL != 0;

        if (tmpSalesLine.RecId)
        {
            // Force the new line to have the last LineNum
            select count (LineNum) from tmpSalesLine
                where tmpSalesLine.SalesId == this.SalesId;

            lineCount = tmpSalesLine.LineNum;
        }

        return lineCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupCustomerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the customer account used for lookup of charges.
    /// </summary>
    /// <returns>The charges customer account number.</returns>
    [Replaceable]
    public CustAccount markupCustomerAccount()
    {
        return this.CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    public boolean markupAllowed()
    {
        return this.type().markupAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayBankDocumentTypeBeBankLCExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the Bank document type can be set to the types of Bank LC Export.
    /// </summary>
    /// <returns>
    /// true if it is allowed; otherwise, false.
    /// </returns>
    public boolean mayBankDocumentTypeBeBankLCExport()
    {
        return this.SalesType           == SalesType::Sales
            && this.SalesStatus         == SalesStatus::Backorder
            && this.InterCompanyOrder   == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayBankDocumentTypeBeBankLG</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>Bank</c> document type can be set to the types of <c>Bank LG</c>.
    /// </summary>
    /// <returns>
    /// true if the document type can be set to the specified types; otherwise, false.
    /// </returns>
    public boolean mayBankDocumentTypeBeBankLG()
    {
        // It is not allowed to create LG on sales order if
        // the related project's bank document type is set to LG.
        return !(this.ProjId && ProjTable::find(this.ProjId).isMarkedForBankLG());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayConfirmationBeUpdated</Name>
				<Source><![CDATA[
    boolean mayConfirmationBeUpdated()
    {
        return this.type().mayConfirmationBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayInvoice4PaymBeUpdated_RU</Name>
				<Source><![CDATA[
    public boolean mayInvoice4PaymBeUpdated_RU()
    {
        return this.type().mayInvoice4PaymBeUpdated_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayInvoiceBeUpdated</Name>
				<Source><![CDATA[
    boolean mayInvoiceBeUpdated()
    {
        return this.type().mayInvoiceBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPackingSlipBeUpdated</Name>
				<Source><![CDATA[
    boolean mayPackingSlipBeUpdated()
    {
        return this.type().mayPackingSlipBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPickingListBeRegistered</Name>
				<Source><![CDATA[
    boolean mayPickingListBeRegistered()
    {
        return this.type().mayPickingListBeRegistered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPickingListBeUpdated</Name>
				<Source><![CDATA[
    boolean mayPickingListBeUpdated()
    {
        return this.type().mayPickingListBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayProjectPickingListBeUpdated</Name>
				<Source><![CDATA[
    boolean mayProjectPickingListBeUpdated()
    {
        return this.type().mayProjectPickingListBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayProjectPackingSlipBeUpdated</Name>
				<Source><![CDATA[
    boolean mayProjectPackingSlipBeUpdated()
    {
        return this.type().mayProjectPackingSlipBeUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrAllowOpenOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the sales order is allowed to remain in the open order
    /// status.
    /// </summary>
    /// <returns>
    /// true if the sales order is allowed to remain in the open order status; otherwise, false.
    /// </returns>
    boolean mcrAllowOpenOrder()
    {
        return this.type().mcrAllowOpenOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrAllowStatusRollback</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the sales order status can be rolled back or not.
    /// </summary>
    /// <returns>
    ///     true if the sales order status can be rolled back; otherwise, false.
    /// </returns>
    public boolean mcrAllowStatusRollback()
    {
        boolean ok = true;
        SalesLine salesLineLocal;
        MCRSalesLineDropShipment mcrSalesLineDropShipmentLocal;

        if (this.SalesStatus != SalesStatus::Backorder)
        {
            // If the order is a return and the status is no longer open,
            // don't allow the user to rollback which also makes it so the modify button is disabled.
            if (this.SalesType == SalesType::ReturnItem)
            {
                ok = false;
            }
            else
            {
                // If salestable status cancelled then modify should disabled.
                if (this.SalesStatus == SalesStatus::Canceled)
                {
                    ok = false;
                }
                else
                {
                    // Allow changes as long as PO has not been released to the vendor.
                    // If any line is a drop ship and released to the customer, do not allow rollback
                    select firstonly RecId from salesLineLocal
                        where salesLineLocal.SalesId == this.SalesId
                            exists join mcrSalesLineDropShipmentLocal
                                where mcrSalesLineDropShipmentLocal.DropShipment == NoYes::Yes
                                    && mcrSalesLineDropShipmentLocal.DropShipStatus != MCRDropShipStatus::ToBeDropShipped
                                    && mcrSalesLineDropShipmentLocal.SalesLine == salesLineLocal.RecId;
                    if (salesLineLocal)
                    {
                        ok = false;
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrAnySalesLinesNegative</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any <c>SalesLine</c> records have a negative quantity.
    /// </summary>
    /// <returns>
    /// true if there are any <c>SalesLine</c> records that have a negative quantity; otherwise, false.
    /// </returns>
    boolean mcrAnySalesLinesNegative()
    {
        SalesLine salesLine;
        boolean   ret = false;

        select firstonly RecId from salesLine
            where salesLine.SalesId == this.SalesId
                && salesLine.LineDeliveryType  != LineDeliveryType::OrderLineWithMultipleDeliveries
                && salesLine.SalesStatus       != SalesStatus::Canceled && salesLine.SalesQty          <  0;

        if (salesLine.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMcrShipComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets 'ShipComplete' flag from the original <c>SalesTable</c> record associated with this record.
    /// </summary>
    /// <returns>
    /// true if the original <c>SalesTable</c> record exists and 'ShipComplete' flag is set; otherwise, false.
    /// </returns>
    protected boolean isMcrShipComplete()
    {
        return this.mcrSalesTableShipping().ShipComplete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCompletedCallCenterOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets if the order is a completed call center order.
    /// </summary>
    /// <returns>Returns true if the order is a completed call center order; otherwise, false.</returns>
    internal boolean isCompletedCallCenterOrder()
    {
        // This will also return false if this is not a call center order or order completion is not enabled for the call center.
        return RetailSalesTable::findSalesTable(this).mcrIsCallCenter()
            && RetailMCRChannelTable::mcrEnableOrderCompletion(this)
            && !this.MCROrderStopped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildShipCompleteValidationSearchObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds <c>SysDaQueryObject</c> that performs standard ship complete validation.
    /// </summary>
    /// <returns>
    /// Prepared <c>SysDaQueryObject</c> that performs standard ship complete validation.
    /// </returns>
    protected SysDaQueryObject buildShipCompleteValidationSearchObject()
    {
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        SalesLine salesLine;

        var qeInventTrans = new SysDaQueryObject(inventTrans);
        qeInventTrans.firstOnlyHint = true;
        qeInventTrans.projection().add(fieldStr(InventTrans, RecId));
        qeInventTrans.whereClause(new SysDaEqualsExpression(new SysDaFieldExpression(inventTrans, fieldStr(InventTrans, StatusIssue)), new SysDaValueExpression(StatusIssue::OnOrder))
                .or(qeInventTrans.whereClause(new SysDaEqualsExpression(new SysDaFieldExpression(inventTrans, fieldStr(InventTrans, StatusIssue)), new SysDaValueExpression(StatusIssue::ReservOrdered)))));

        var qeInventTransOrigin = new SysDaQueryObject(inventTransOrigin);
        qeInventTransOrigin.projection().add(fieldStr(InventTransOrigin, RecId));
        qeInventTransOrigin.whereClause(new SysDaEqualsExpression(new SysDaFieldExpression(inventTransOrigin, fieldStr(InventTransOrigin, RecId)), new SysDaFieldExpression(inventTrans, fieldStr(InventTrans, InventTransOrigin))));
        qeInventTrans.joinClause(SysDaJoinKind::InnerJoin, qeInventTransOrigin);
        
        var qeSalesLine = new SysDaQueryObject(salesLine);
        qeSalesLine.projection().add(fieldStr(SalesLine, RecId));
        qeSalesLine.whereClause(new SysDaEqualsExpression(new SysDaFieldExpression(salesLine, fieldStr(SalesLine, InventTransId)), new SysDaFieldExpression(inventTransOrigin, fieldStr(InventTransOrigin, InventTransId)))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(salesLine, fieldStr(SalesLine, SalesId)), new SysDaValueExpression(this.SalesId)))
            .and(new SysDaNotEqualsExpression(new SysDaFieldExpression(salesLine, fieldStr(SalesLine, LineDeliveryType)), new SysDaValueExpression(LineDeliveryType::OrderLineWithMultipleDeliveries))));
        qeInventTransOrigin.joinClause(SysDaJoinKind::InnerJoin, qeSalesLine);

        return qeInventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrApplyPostageDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and applies any postage discounts to the postage of an order.
    /// </summary>
    /// <param name="_totalPostageValue">
    /// Current value of postage for a sales order.
    /// </param>
    /// <param name="_orderTotal">
    /// Total order value for a sales order.
    /// </param>
    /// <returns>
    /// The amount the postage value was discounted.
    /// </returns>
    public AmountCur mcrApplyPostageDisc(AmountCur _totalPostageValue, AmountCur _orderTotal)
    {
        AmountCur   discAmount;
        AmountCur   discPercent;
        AmountCur   discountedAmount;

        if (_totalPostageValue)
        {
            [discAmount, discPercent] = PriceDisc::mcrFindPostageDisc(this, _orderTotal);

            //Customization can be made to reduce postage amount by postage discount.
        }

        return discountedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCheckShipComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the sales order should be shipped as a whole
    /// </summary>
    /// <returns>
    /// true if the order should be shipped as a whole; otherwise, false.
    /// </returns>
    public boolean mcrCheckShipComplete()
    {
        boolean ret;

        if (!this.isMcrShipComplete())
        {
            // If ship complete flag not on then check passes.
            ret = true;
        }
        else
        {
            // If there is an open quantity on any lines, the order is not going to ship complete.
            if (RetailExtensibleShipCompleteEnabled::instance().isEnabled())
            {
                var searchObject = new SysDaSearchObject(this.buildShipCompleteValidationSearchObject());
                var searchStatement = new SysDaSearchStatement();

                if (!searchStatement.nextRecord(searchObject))
                {
                    ret = true;
                }
            }
            else
            {
                InventTrans         inventTrans;
                SalesLine           salesLine;
                InventTransOrigin   inventTransOrigin;
                MCRSalesLine        mcrSalesLine;

                select firstonly RecId from inventTrans
                where (inventTrans.StatusIssue == StatusIssue::OnOrder
                    || inventTrans.StatusIssue == StatusIssue::ReservOrdered)
                join RecId from inventTransOrigin
                join RecId from salesLine
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    && inventTransOrigin.InventTransId == salesLine.InventTransId
                    && salesLine.SalesId == this.SalesId
                    && salesLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries
                outer join RecId from mcrSalesLine
                where mcrSalesLine.SalesLine == salesLine.RecId
                    && !mcrSalesLine.ContinuityScheduleId;

                if (!inventTrans.RecId)
                {
                    ret = true;
                }
            }
            
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCreateExchangeHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an exchange sales order.
    /// </summary>
    /// <param name="_salesTableOriginal">
    /// The original <c>SalesTable</c> record for which this method is creating an exchange; optional.
    /// </param>
    /// <param name="_salesParameters">
    /// The <c>SalesParameters</c> record used in the creation of the exchange order.
    /// </param>
    /// <returns>
    /// The newly created <c>SalesTable</c> record for the exchange order.
    /// </returns>
    public SalesTable mcrCreateExchangeHeader(SalesTable _salesTableOriginal = null, SalesParameters _salesParameters = null)
    {
        NumberSeq           numberSeq;
        SalesTable          salesTableCopy;
        SalesTable          salesTableExchange;
        SalesTable          salesTableOriginal;
        SalesParameters     salesParameters;
        SalesTableLinks     salesTableLinks;
        MCROrderParameters  mcrOrderParameters = MCROrderParameters::find();
        Catalog             catalog;
        MCRReturnSalesTable mcrReturnSalesTable;
        MCRReturnSalesTable mcrReturnSalesTableLocal;
        MCRSalesTable       mcrSalesTable, mcrSalesTableOriginal;

        if (this.ReturnReplacementId)
        {
            return this.mcrSalesTableExchange();
        }

        try
        {
            ttsbegin;

            if (_salesTableOriginal)
            {
                salesTableOriginal = _salesTableOriginal;
            }
            else
            {
                salesTableOriginal = this.mcrSalesTableOriginal();
            }

            if (_salesParameters)
            {
                salesParameters = _salesParameters;
            }
            else
            {
                salesParameters = SalesParameters::find();
            }

            // load exchange header.
            numberSeq = NumberSeq::newGetNum(SalesParameters::numRefSalesId(), false, true);
            mcrSalesTable = salesTableExchange.mcrSalesTable();
            mcrSalesTableOriginal = salesTableOriginal.mcrSalesTable();
            salesTableExchange.SalesId = numberSeq.num();
            salesTableExchange.SalesType = SalesType::Sales;
            salesTableExchange.SalesStatus = SalesStatus::Backorder;

            if (mcrOrderParameters.mcrExchangeSourceCode == MCRExchangeSourceCode::Original)
            {
                mcrSalesTable.SourceId = mcrSalesTableOriginal.SourceId;

                // If the original source code is not valid, use the default one specified in sales parameters.
                catalog = Catalog::find(MCRSourceCodeSetup::find(mcrSalesTable.SourceId).Catalog);

                if (!mcrOrderParameters.mcrAllowExpiredSourceCode
                    && (catalog.ValidFrom > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                    || catalog.ValidTo < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) )
                {
                    mcrSalesTable.SourceId = mcrOrderParameters.mcrDefaultExchangeSourceID;
                }
            }
            else if (mcrOrderParameters.mcrExchangeSourceCode == MCRExchangeSourceCode::DefaultSourceCode)
            {
                mcrSalesTable.SourceId = mcrOrderParameters.mcrDefaultExchangeSourceID;
            }

            // Default to the original sales order.
            salesTableExchange.DlvMode = salesTableOriginal.DlvMode;

            salesTableExchange.CustAccount = this.CustAccount;
            salesTableExchange.initFromCustTable();

            if (salesTableOriginal.InvoiceAccount)
            {
                salesTableExchange.InvoiceAccount = salesTableOriginal.InvoiceAccount;
            }
            mcrReturnSalesTable = salesTableExchange.mcrReturnSalesTable();
            mcrReturnSalesTable.IsExchange = NoYes::Yes;
            salesTableExchange.mcrPackMCRReturnSalesTable(mcrReturnSalesTable);
            SalesCalcAvailableDlvDates::initDateFields(salesTableExchange);

            salesTableExchange.SmmCampaignId = salesTableOriginal.SmmCampaignId;
            salesTableExchange.ContactPersonId = salesTableOriginal.ContactPersonId;
            mcrSalesTable.SmmTMCallListId = mcrSalesTableOriginal.SmmTMCallListId;
            salesTableExchange.mcrPackMCRSalesTable(mcrSalesTable);

            // Default to the original sales order.
            if (salesTableOriginal.DlvMode)
            {
                salesTableExchange.DlvMode = salesTableOriginal.DlvMode;
            }

            if (salesTableExchange.validateWrite())
            {
                salesTableExchange.insert();

                // Link exchange order to return.
                salesTableCopy.data(this);
                this.selectForUpdate(true);
                this.reread();
                this.data(salesTableCopy);
                this.ReturnReplacementId = salesTableExchange.SalesId;
                this.ReturnReplacementCreated = NoYes::Yes;

                if (RetailMCRChannelTable::mcrEnableOrderCompletion(_salesTableOriginal))
                {
                    mcrReturnSalesTableLocal = this.mcrReturnSalesTable();
                    mcrReturnSalesTableLocal.ApplyCreditToExchange = NoYes::Yes;
                    mcrReturnSalesTableLocal.AdvanceExchange = MCRAdvanceExchange::DoNotRelease;
                    mcrReturnSalesTableLocal.AdvanceCredit = NoYes::No;
                    this.mcrPackMCRReturnSalesTable(mcrReturnSalesTableLocal);
                }
                this.doUpdate();

                if (this.ReturnReplacementId)
                {
                    salesTableLinks.MainSalesId = this.mcrReturnSalesTable().OriginalSalesId;
                    salesTableLinks.SubSalesId = this.ReturnReplacementId;

                    if (salesTableLinks.validateWrite())
                    {
                        salesTableLinks.insert();
                    }
                    else
                    {
                        throw error("@SYS104318");
                    }
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::Error)
        {
            ttsabort;
            throw error("@SYS93835");
        }

        return salesTableExchange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDeleteExchange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes the corresponding exchange order for this return.
    /// </summary>
    internal void mcrDeleteExchange()
    {
        // If return is tied to an exchange order
        if (this.returnItem() && this.ReturnReplacementId)
        {
            SalesTable salesTableExch = SalesTable::find(this.ReturnReplacementId, true);
            if (salesTableExch.validateDelete())
            {
                salesTableExch.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDeliveryInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer's default delivery address.
    /// </summary>
    /// <returns>
    /// The delivery information for the customer's default delivery address.
    /// </returns>
    public display MCRString100 mcrDeliveryInfo()
    {
        str deliveryInfo;

        if (this.DeliveryName)
        {
            deliveryInfo = this.DeliveryName;
        }
        if (this.deliveryAddress())
        {
            deliveryInfo = deliveryInfo + '\n' + this.deliveryAddress().Address + " ";
        }
        return deliveryInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayCustCreditMax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the maximum credit allowed for the specified customer.
    /// </summary>
    /// <returns>
    /// The maximum credit allowed for the specified customer.
    /// </returns>
    public display CustCreditMaxMST mcrDisplayCustCreditMax()
    {
        return CustTable::find(this.CustAccount).CreditMax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayDeliveryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Displays the delivery name from the <c>SalesTable</c> unless the order lines
    ///  ship to a different address.
    /// </summary>
    /// <returns>
    /// The delivery name on the <c>SalesTable</c> if the order lines have the same ship to address;
    /// otherwise, a message saying to check the line delivery information.
    /// </returns>
    public display CustName mcrDisplayDeliveryName()
    {
        if (this.mcrLineHasDifferentAddress())
        {
            return "@MCR12684";
        }
        else
        {
            return this.DeliveryName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayLastShipDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the last date something was shipped on the order.
    /// </summary>
    /// <returns>
    /// The last date something was shipped on the order.
    /// </returns>
    public display TransDate mcrDisplayLastShipDate()
    {
        CustPackingSlipJour custPackingSlipJour;
        TransDate           dateCreated = dateNull();

        select maxof(CreatedDateTime) from custPackingSlipJour
            where   custPackingSlipJour.RefNum == RefNum::SalesOrder
                && custPackingSlipJour.SalesId == this.SalesId;

        if (custPackingSlipJour)
        {
            dateCreated = DateTimeUtil::date(custPackingSlipJour.CreatedDateTime);
        }
        return dateCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayMiscChargesTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the total amount of miscellaneous charges.
    /// </summary>
    /// <returns>
    /// The total amount of miscellaneous charges.
    /// </returns>
    public display MarkupSumSales mcrDisplayMiscChargesTotal()
    {
        MCRSalesOrderTotals  mcrSalesOrderTotals;

        mcrSalesOrderTotals = new MCRSalesOrderTotals(this);

        return mcrSalesOrderTotals.getTotalMarkup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the image for a held order.
    /// </summary>
    /// <returns>
    /// The image for a held order.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display container mcrDisplayOnHold()
    {
        if (this.mcrOrderStopped
            && MCRHoldCodeTrans::findActiveOrderHolds(this.SalesId))
        {
            return ImageReference::constructForSymbol(ImageReferenceSymbol::Pause).pack();
        }
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayOrderNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collects all of the order notes into one string and display them.
    /// </summary>
    /// <returns>
    /// A string of all of the order notes.
    /// </returns>
    public display Notes mcrDisplayOrderNotes()
    {
        DocuRef             docuRef;
        MCROrderParameters  mcrOrderParameters;
        TextBuffer          textBuffer = new TextBuffer();
        SelectableDataArea  refCompanyID = curext();
        TransDate           dateCreated;
        SalesParameters     salesParameters = SalesParameters::find();

        mcrOrderParameters = MCROrderParameters::find();

        // Don't show fraud or hold code notes because these are shown on other tabs.
        while select docuRef order by RecId desc
            where   docuRef.RefCompanyId == refCompanyID
                && docuRef.RefTableId == tableNum(SalesTable)
                && docuRef.RefRecId == this.RecId
                && docuRef.TypeId != salesParameters.mcrHoldCodeNoteType
                && docuRef.TypeId != mcrOrderParameters.mcrFraudCommentTypeId
        {
            textBuffer.appendText("@MCR28844");
            textBuffer.appendText(' ');
            textBuffer.appendText(docuRef.CreatedBy);
            textBuffer.appendText(' ');
            textBuffer.appendText("@MCR31247");
            textBuffer.appendText(' ');
            dateCreated = DateTimeUtil::date(docuRef.CreatedDateTime);
            textBuffer.appendText(date2StrUsr(dateCreated, DateFlags::FormatAll));
            textBuffer.appendText(' ');
            textBuffer.appendText("@SYS77038");
            textBuffer.appendText(' ');
            textBuffer.appendText(docuRef.Notes);
            textBuffer.appendText('\n\n');
        }
        return textBuffer.getText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayOrderTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the total amount of the sales order.
    /// </summary>
    /// <returns>
    /// The total amount of the sales order.
    /// </returns>
    public display AmountCur mcrDisplayOrderTotal()
    {
        MCRSalesOrderTotals  mcrSalesOrderTotals;

        if (this.RecId)
        {
            mcrSalesOrderTotals = new MCRSalesOrderTotals(this);
            return mcrSalesOrderTotals.getTotalOrder();
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayOrderTotalLessTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the order total less tax.
    /// </summary>
    /// <returns>
    /// The order total less tax.
    /// </returns>
    public display AmountCur mcrDisplayOrderTotalLessTax()
    {
        MCRSalesOrderTotals     mcrSalesOrderTotals;
        AmountCur               totalWithoutTax;

        mcrSalesOrderTotals = new MCRSalesOrderTotals(this);
        totalWithoutTax = mcrSalesOrderTotals.getTotalOrder() - mcrSalesOrderTotals.getTotalTax();

        return totalWithoutTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayOverallOldestOverUnderpaidDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the oldest order payment created date that is over the customers credit limit.
    /// </summary>
    /// <returns>
    /// The oldest order payment created date that is over the customers credit limit.
    /// </returns>
    public display TransDate mcrDisplayOverallOldestOverUnderpaidDate()
    {
        MCRCustPaymTable    mcrCustPaymTable;
        TransDate           dateCreated = dateNull();

        select minof(CreatedDateTime) from mcrCustPaymTable
            where (mcrCustPaymTable.Status == MCRCustPaymStatus::NotSubmitted);

        if (mcrCustPaymTable)
        {
            dateCreated = DateTimeUtil::date(mcrCustPaymTable.CreatedDateTime);
        }
        return dateCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayOverallTotalOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of orders in the <c>MCRCustPaymTable</c> that are
    /// over the customers credit limit.
    /// </summary>
    /// <returns>
    /// The number of orders in the <c>MCRCustPaymTable</c> that are
    /// over the customers credit limit.
    /// </returns>
    public display Integer mcrDisplayOverallTotalOrders()
    {
        MCRCustPaymTable mcrCustPaymTable;

        select count(RecId) from mcrCustPaymTable
            where (mcrCustPaymTable.Status == MCRCustPaymStatus::NotSubmitted);

        return (any2int(mcrCustPaymTable.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayPhone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the phone contact information of the customer on the sales order.
    /// </summary>
    /// <returns>
    /// The phone contact information of the customer on the sales order.
    /// </returns>
    public display LogisticsElectronicAddressLocator mcrDisplayPhone()
    {
        LogisticsLocation           logisticsLocation;
        LogisticsElectronicAddress  logisticsElectronicAddress;

        select firstonly RecId, ParentLocation from logisticsLocation
            where logisticsLocation.ParentLocation == this.deliveryAddress().Location
        join Locator, Location, Type from logisticsElectronicAddress
            where logisticsElectronicAddress.Location == logisticsLocation.RecId
            && logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Phone;

        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayProductTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the total amount of the product.
    /// </summary>
    /// <returns>
    /// The total amount of the product.
    /// </returns>
    public display AmountCur mcrDisplayProductTotal()
    {
        MCRSalesOrderTotals  mcrSalesOrderTotals;

        mcrSalesOrderTotals = new MCRSalesOrderTotals(this);

        return mcrSalesOrderTotals.getTotalProduct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayTaxTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the total tax amount for the sales order.
    /// </summary>
    /// <returns>
    /// The total tax amount for the sales order.
    /// </returns>
    public display TaxAmountCur mcrDisplayTaxTotal()
    {
        MCRSalesOrderTotals  mcrSalesOrderTotals;

        mcrSalesOrderTotals = new MCRSalesOrderTotals(this);

        return mcrSalesOrderTotals.getTotalTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayTender</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tender type being used to pay for the order.
    /// </summary>
    /// <returns>
    /// If only one payment then the tender used to pay for the order;
    ///     otherwise; a label indicating multiple.
    /// </returns>
    public display RetailTenderTypeId mcrDisplayTender()
    {
        MCRCustPaymTable    mcrCustPaymTable;
        PaymMode            paymMethod;

        while select TenderTypeId from mcrCustPaymTable
            where mcrCustPaymTable.RefTableId == this.TableId
            && mcrCustPaymTable.RefRecId == this.RecId
            && mcrCustPaymTable.Amount != 0
        {
            if (paymMethod)
            {
                return "@SYS78137";
            }

            paymMethod = mcrCustPaymTable.TenderTypeId;
        }

        return paymMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayTotalDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the total ending discount amount for the sales order.
    /// </summary>
    /// <returns>
    /// The total ending discount amount for the sales order.
    /// </returns>
    public display SalesEndDiscAmount mcrDisplayTotalDisc()
    {
        MCRSalesOrderTotals  mcrSalesOrderTotals;

        mcrSalesOrderTotals = new MCRSalesOrderTotals(this);

        return mcrSalesOrderTotals.getTotalDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDlvModeModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the <c>MCRExpedite</c> flag based on the delivery mode.
    /// </summary>
    void mcrDlvModeModified()
    {
        MCRExpedite             mcrExpedite;
        MCRSalesTableShipping   mcrSalesTableShipping = this.mcrSalesTableShipping();

        mcrExpedite = DlvMode::find(this.DlvMode).mcrExpedite;

        if (mcrSalesTableShipping.Expedite != mcrExpedite)
        {
            mcrSalesTableShipping.Expedite = mcrExpedite;
            this.mcrPackMCRSalesTableShipping(mcrSalesTableShipping);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrEvalSalesOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates the sales order type.
    /// </summary>
    /// <returns>
    /// The sales order type.
    /// </returns>
    /// <remarks>
    /// A sales order based on the current MCR functionality can be of a few different types.
    /// Regular order, that has custpaym record tie to the sales order.
    /// Installment only  that has custpaymrecord tied custpaymsched lines and may or may not have
    ///  a record that needs to be authorized.
    /// Continuity only that has a custpaym record tied to the continuity cust header and may or may not
    ///  a record that needs to be authorized.
    /// Regular order and installment.If the installment has a record that needs to be authorized
    /// Regular order and continuity.
    /// Regular order, installment and continuity.
    /// </remarks>
    MCRSalesOrderType mcrEvalSalesOrderType()
    {
        MCRSalesOrderTotals             mcrSalesOrderTotals;
        MCRSalesOrderType               mcrSalesOrderType;
        AmountCur                       totalOrderAmount;
        AmountCur                       totalOnInstallment;
        AmountCur                       totalContinuityAmt;
        AmountCur                       installmentTotal;
        AmountCur                       remainingOrder;
        AmountCur                       invoicedOrder;
        MCRCustPaymTable                mcrCustPaymTable;
        MCRSalesTable                   mcrSalesTable;
        boolean                         installmentExist;

        if (this.mcrIsCallCenter())
        {
            mcrSalesTable = this.mcrSalesTable();

            // Retrieve the custpaymtable record to ensure that some part of the order
            // was paid down before deciding that this order is an order and an installment.
            select firstonly mcrCustPaymTable
                where mcrCustPaymTable.RefTableId == tableNum(SalesTable)
                && mcrCustPaymTable.RefRecId == this.RecId
                && mcrCustPaymTable.Amount > 0;

            mcrSalesOrderTotals = new MCRSalesOrderTotals(this);

            // Assign all totals buckets from salesordertotals
            totalOrderAmount = mcrSalesOrderTotals.getTotalOrder();
            remainingOrder = mcrSalesOrderTotals.getRemainingOrder();
            invoicedOrder = mcrSalesOrderTotals.getInvoicedOrder();

            if (invoicedOrder != 0)
            {
                totalOrderAmount = remainingOrder+invoicedOrder;
            }
            totalContinuityAmt = mcrSalesOrderTotals.getContinuityPayNow();
            totalOnInstallment = mcrSalesOrderTotals.getInstallmentEligibleRemaining();
            // Assign totals bucket from the installment totals if applicable.
            installmentTotal = mcrSalesOrderTotals.getInstallmentEligibleTotal();

            installmentExist = MCRInstallmentPlanSalesTable::existSalesId(this.SalesId);
            if (!mcrSalesTable.ContinuityOrder
                && !installmentExist)
            {
                mcrSalesOrderType = MCRSalesOrderType::RegularOrder;
            }
            else if (mcrSalesTable.ContinuityOrder
                && !installmentExist)
            {
                // Determine if this is a continuity order and a regular order or
                // just a continuity order.
                if ((totalOrderAmount - totalContinuityAmt) == 0)
                {
                    mcrSalesOrderType = MCRSalesOrderType::Continuityonly;
                }
                else
                {
                    mcrSalesOrderType = MCRSalesOrderType::OrderAndContinuity;
                }
            }
            else if (!mcrSalesTable.ContinuityOrder
                && installmentExist)
            {
                // Set the sales order type to installment only unless
                // we determine otherwise.
                mcrSalesOrderType = MCRSalesOrderType::InstallmentOnly;

                // For installments not only the sales order totals but the installment
                // totals also needs to be considered.
                if (installmentTotal == 0)
                {
                    if (totalOrderAmount - totalOnInstallment == 0)
                    {
                        mcrSalesOrderType = MCRSalesOrderType::InstallmentOnly;
                    }
                    else
                    {
                        if (mcrCustPaymTable)
                        {
                            mcrSalesOrderType = MCRSalesOrderType::OrderAndInstallment;
                        }
                    }
                }
                else
                {
                    if (totalOrderAmount == installmentTotal)
                    {
                        mcrSalesOrderType = MCRSalesOrderType::InstallmentOnly;
                    }
                    else
                    {
                        if (mcrCustPaymTable)
                        {
                            mcrSalesOrderType = MCRSalesOrderType::OrderAndInstallment;
                        }
                    }
                }
            }
            else if (mcrSalesTable.ContinuityOrder
                && installmentExist)
            {
                mcrSalesOrderType = MCRSalesOrderType::MixedOrder;
            }
        }

        return mcrSalesOrderType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrExistNonOnAccountPaym</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether payments with types other than on account exist for the
    /// sales order.
    /// </summary>
    /// <returns>
    /// true if payments with types other than on account exist for the sales order;
    /// otherwise, false.
    /// </returns>
    boolean mcrExistNonOnAccountPaym()
    {
        MCRCustPaymTable    mcrCustPaymTable;
        boolean             nonOnAccountPaymentsExist = false;

        select firstonly RecId from mcrCustPaymTable
            where mcrCustPaymTable.RefTableId == tableNum(SalesTable)
                && mcrCustPaymTable.RefRecId == this.RecId
                && mcrCustPaymTable.CustPaymType != MCRCustPaymType::OnAccount;

        if (mcrCustPaymTable.RecId)
        {
            nonOnAccountPaymentsExist = true;
        }

        return nonOnAccountPaymentsExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrExistOpenReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an open return order exists for this sales order.
    /// </summary>
    /// <returns>
    /// true if a return order exists; otherwise, false.
    /// </returns>
    public boolean mcrExistOpenReturn()
    {
        SalesTable salesTable;
        MCRReturnSalesTable mcrReturnSalesTable;

        select firstonly RecId from salesTable
            where salesTable.ReturnStatus == ReturnStatusHeader::Open
            exists join mcrReturnSalesTable
            where mcrReturnSalesTable.SalesTable == salesTable.RecId
                && mcrReturnSalesTable.OriginalSalesId == this.SalesId;

        if (salesTable.RecId)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFraudHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the order has a fraud hold or not.
    /// </summary>
    /// <param name="_clearedHolds">
    /// A <c>Boolean</c> value defining whether the method will check for cleared holds on the order.
    /// </param>
    /// <param name="_isNowOnHold">
    /// A <c>Boolean</c> value defining whether the method will check to see if
    /// the order is currently on hold; optional.
    /// </param>
    /// <returns>
    /// A <c>Boolean</c> value defining whether the order has or has had fraud holds,
    /// based on the passed parameters.
    /// </returns>
    /// <remarks>
    /// Parameter is whether or not you want to only check cleared holds.
    /// If <c>_clearedHolds</c> equals true:  returns true if order has fraud hold codes and has been cleared. else false
    /// If <c>_clearedHolds</c> equals false: returns true if an order has ever had fraud hold codes. else false
    /// If <c>_IsNowOnHold</c> equals true: returns true if an order is now on hold and hasn't been cleared yet.
    /// </remarks>
    boolean mcrFraudHold(boolean _clearedHolds, boolean _isNowOnHold = false)
    {
        MCRHoldCodeTrans    mcrHoldCodeTrans;
        MCROrderParameters  mcrOrderParameters;
        boolean             ret = false;

        // Go through the hold codes looking for hold codes that are fraud holds.
        mcrOrderParameters = MCROrderParameters::find();

        while select mcrHoldCode, mcrCleared from mcrHoldCodeTrans
            where mcrHoldCodeTrans.InventRefId == this.SalesId
            && (mcrHoldCodeTrans.mcrHoldCode == mcrOrderParameters.mcrFraudHoldCode
            || mcrHoldCodeTrans.mcrHoldCode == mcrOrderParameters.mcrFraudManualHoldCode)
        {
            // If on hold but not cleared yet.
            if (_isNowOnHold == true)
            {
                if (mcrHoldCodeTrans.mcrCleared == NoYes::No)
                ret = true;
                break;
            }
            else
            {
                if (_clearedHolds)
                {
                    // If on hold but cleared
                    if (mcrHoldCodeTrans.mcrCleared == NoYes::Yes)
                    {
                        ret = true;
                        break;
                    }
                }
                else
                {
                    // If order has ever been on hold.
                    ret = true;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetDeclinedCCAuthRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to gather a list of declined credit card authorization
    /// records attached to this sales order's payment records.
    /// </summary>
    /// <returns>
    /// The <c>CustPaymTable</c> query that was built.
    /// </returns>
    Query mcrGetDeclinedCCAuthRecords()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsCustPaymTable, qbdsCCAuthTable;

        qbdsCustPaymTable = query.addDataSource(tableNum(MCRCustPaymTable));

        qbdsCustPaymTable.addRange(fieldNum(MCRCustPaymTable, RefTableId)).value(
                                    queryValue(this.TableId));
        qbdsCustPaymTable.addRange(fieldNum(MCRCustPaymTable, RefRecId)).value(
                                    queryValue(this.RecId));
        qbdsCustPaymTable.addRange(fieldNum(MCRCustPaymTable, CustPaymType)).value(
                                    queryValue(MCRCustPaymType::CreditCard));
        qbdsCustPaymTable.addRange(fieldNum(MCRCustPaymTable, CustPaymType)).value(
                                    queryValue(MCRCustPaymStatus::Declined));

        qbdsCCAuthTable = qbdsCustPaymTable.addDataSource(tableNum(CreditCardAuthTrans));
        qbdsCCAuthTable.addLink(fieldNum(MCRCustPaymTable, RecId), fieldNum(CreditCardAuthTrans, mcrPaymRecId));
        qbdsCCAuthTable.addRange(fieldNum(CreditCardAuthTrans, ProcessorStatus)).value(
                                    queryValue(CreditCardProcessorStatus::Declined));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetDeliveryAddresses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query which will get all the unique delivery addresses used on all <c>SalesLine</c> records
    /// on this order.
    /// </summary>
    /// <returns>
    /// The <c>SalesLine</c> query for delivery addresses.
    /// </returns>
    Query mcrGetDeliveryAddresses()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsSalesLine;

        qbdsSalesLine = query.addDataSource(tableNum(SalesLine));

        qbdsSalesLine.addRange(fieldNum(SalesLine, SalesId)).value(this.SalesId);

        qbdsSalesLine.addRange(fieldNum(SalesLine, LineDeliveryType)).
            value(SysQuery::valueNot(LineDeliveryType::OrderLineWithMultipleDeliveries));

        qbdsSalesLine.orderMode(OrderMode::GroupBy);

        qbdsSalesLine.addSortField(fieldNum(SalesLine, DeliveryName));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetNumExpeditedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of expedited lines on this sales order.
    /// </summary>
    /// <returns>
    /// The count of expedited lines on this sales order.
    /// </returns>
    public int64 mcrGetNumExpeditedLines()
    {
        SalesLine               salesLine;
        MCRSalesLine            mcrSalesLine;

        select count(RecId) from salesLine
            where salesLine.SalesId == this.SalesId
            exists join mcrSalesLine
            where mcrSalesLine.SalesLine == salesLine.RecId
                && mcrSalesLine.Expedite;

        return salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of invoiced line discount amount.
    /// </summary>
    /// <returns>
    /// The amount in accounting currency.
    /// </returns>
    display AmountCur lineDiscInvoiced()
    {
        CustInvoiceJour custInvoiceJour;

        select sum(SumLineDisc) from custInvoiceJour
            where custInvoiceJour.RefNum  == RefNum::SalesOrder
                && custInvoiceJour.SalesId == this.SalesId;

        return custInvoiceJour.SumLineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of invoiced charge amount.
    /// </summary>
    /// <returns>
    /// The amount in accounting currency.
    /// </returns>
    display AmountCur markupInvoiced()
    {
        CustInvoiceJour custInvoiceJour;

        select sum(SumMarkup) from custInvoiceJour
            where custInvoiceJour.RefNum  == RefNum::SalesOrder
               && custInvoiceJour.SalesId == this.SalesId;

        return custInvoiceJour.SumMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of invoiced tax amount.
    /// </summary>
    /// <returns>
    /// The amount in accounting currency.
    /// </returns>
    display AmountCur taxAmountInvoiced()
    {
        CustInvoiceJour custInvoiceJour;

        select sum(SumTax) from custInvoiceJour
            where custInvoiceJour.RefNum  == RefNum::SalesOrder
                && custInvoiceJour.SalesId == this.SalesId;

        return custInvoiceJour.SumTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetPaymStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the overall payment status for the sales order.
    /// </summary>
    /// <returns>
    /// The overall payment status for the sales order.
    /// </returns>
    public display MCRCustPaymStatus mcrGetPaymStatus()
    {
        MCRCustPaymStatus mcrCustPaymStatus = MCRCustPaymStatus::NotSubmitted;
        MCRCustPaymTotals mcrCustPaymTotals;
        MCRSalesTable     mcrSalesTable;
        
        mcrCustPaymTotals = MCRCustPaymTotals::construct(this.TableId, this.RecId, new MCRSalesOrderTotals(this, false));

        if (mcrCustPaymTotals)
        {
            mcrCustPaymStatus = mcrCustPaymTotals.getOverallPaymStatus();
            mcrSalesTable = MCRSalesTable::find(this.RecId);
            if (mcrSalesTable.ContinuityOrder
                && mcrSalesTable.ContinuityLineEval == MCRContinuityLineEval::PayAllLater
                && this.SalesStatus != SalesStatus::Canceled
                && mcrCustPaymStatus == MCRCustPaymStatus::NotSubmitted
                && mcrCustPaymTotals.existPaym())
            {
                return MCRCustPaymStatus::Authorized;
            }
        }

        return mcrCustPaymStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetTotalPaymAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the sum of payment amounts for this sales order.
    /// </summary>
    /// <returns>
    /// The sum of payment amounts for this sales order.
    /// </returns>
    public display Amount mcrGetTotalPaymAmount()
    {
        MCRCustPaymTotals mcrCustPaymTotals;

        mcrCustPaymTotals = MCRCustPaymTotals::construct(this.TableId, this.RecId);

        if (mcrCustPaymTotals)
        {
            return mcrCustPaymTotals.getTotalPaymAmount();
        }
        else
        {
            return 0.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrHasExpeditedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order has one or more <c>SalesLine</c> records marked as expedited.
    /// </summary>
    /// <returns>
    /// true if the order has one or more <c>SalesLine</c> records marked as expedited;
    /// otherwise, false.
    /// </returns>
    display public MCRExpeditedOrder mcrHasExpeditedLines()
    {
        SalesLine       salesLine;
        MCRSalesLine    mcrSalesLine;

        select firstonly RecId from salesLine
            where salesLine.SalesId == this.SalesId
            exists join mcrSalesLine
            where mcrSalesLine.SalesLine == salesLine.RecId
                && mcrSalesLine.Expedite;

        return (salesLine.RecId ? NoYes::Yes: NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrHasMultipleCCPayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of credit card payments associated with this order.
    /// </summary>
    /// <returns>
    /// The number of credit card payments associated with this order.
    /// </returns>
    public display Integer mcrHasMultipleCCPayments()
    {
        MCRCustPaymTable mcrCustPaymTable;

        select count(RecId) from mcrCustPaymTable
            where mcrCustPaymTable.RefRecId == this.RecId
                && mcrCustPaymTable.RefTableId == this.TableId
                && mcrCustPaymTable.CustPaymType == MCRCustPaymType::CreditCard;

        return (any2int(mcrCustPaymTable.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMultipleCreditCardsAssociatedWithPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether there are more than one credit card associated with payment for this order.
    /// </summary>
    /// <returns>
    /// True if there are more than one credit card associated with payment for this order; otherwise, false.
    /// </returns>
    internal boolean hasMultipleCreditCardsAssociatedWithPayment()
    {
        // Given the current design of MCR payment, this number has to be that of McrCustPaymTable associated with the order.
        return this.MCRHasMultipleCCPayments() > 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrValidateGiftItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate a gift item.
    /// </summary>
    /// <returns>True if gift item is valid; otherwise return false.</returns>
    public boolean mcrValidateGiftItem()
    {
        boolean  ret = true;
        ItemId   giftCardItem = RetailParameters::find().GiftcardItem;
        MCRSalesLine    mcrSalesLine;
        SalesLine       salesLine;

        if (giftCardItem && this.SalesId)
        {
            // Check if there is any virtual gift card do not have an email
            select firstonly salesLine
                where salesLine.SalesId == this.salesId
                    && salesLine.ItemId == giftCardItem
                exists join mcrSalesLine
                where  mcrSalesLine.SalesLine == salesLine.RecId
                && mcrSalesLine.GiftCardType == MCRGiftCardType::Email
                && !mcrSalesLine.GiftCardRecipientEmail;

            if (salesLine)
            {
                ret = checkFailed("@MCR10854");
            }
            else
            {
                // Check if there is any physic gift card do not have a contact name
                select firstonly salesLine
                where salesLine.SalesId == this.salesId
                    && salesLine.ItemId == giftCardItem
                exists join mcrSalesLine
                where  mcrSalesLine.SalesLine == salesLine.RecId
                && mcrSalesLine.GiftCardType == MCRGiftCardType::Physical
                && !mcrSalesLine.GiftCardRecipientName;

                if (salesLine)
                {
                    ret = checkFailed("@MCR10855");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetNumPickedOrPackedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of picked/packed (that not invoiced) lines on this sales order.
    /// </summary>
    /// <returns>
    /// The count of expedited lines on this sales order.
    /// </returns>
    internal int mcrGetNumPickedOrPackedLines()
    {
        SalesLine salesLine;
        RetailSalesLine retailSalesLine;

        select count(RecId) from salesLine
            join retailSalesLine
            where salesLine.SalesId == this.SalesId && retailSalesLine.SalesLine == salesLine.RecId &&
                (retailSalesLine.FulfillmentStatus ==  RetailFulfillmentLineStatus::Picking ||
                retailSalesLine.FulfillmentStatus ==  RetailFulfillmentLineStatus::PartiallyPicked ||
                retailSalesLine.FulfillmentStatus ==  RetailFulfillmentLineStatus::Picked ||
                retailSalesLine.FulfillmentStatus ==  RetailFulfillmentLineStatus::PartiallyPacked ||
                retailSalesLine.FulfillmentStatus ==  RetailFulfillmentLineStatus::Packed ||
                retailSalesLine.FulfillmentStatus ==  RetailFulfillmentLineStatus::PartiallyInvoiced);


        return salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrHasReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the sales order has a return order associated with it.
    /// </summary>
    /// <returns>
    /// true if the sales order has a return order associated with it; otherwise, false.
    /// </returns>
    public boolean mcrHasReturn()
    {
        SalesTable          salesTableReturn;
        MCRReturnSalesTable mcrReturnSalesTable;

        if (this.SalesId)
        {
            select firstonly RecId 
                from salesTableReturn
                exists join mcrReturnSalesTable
                where mcrReturnSalesTable.SalesTable == salesTableReturn.RecId
                    && mcrReturnSalesTable.OriginalSalesId == this.SalesId;
        }

        if (salesTableReturn)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrHasShipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any part of the order has shipped.
    /// </summary>
    /// <returns>
    /// true if any part of the order has shipped; otherwise, false.
    /// </returns>
    boolean mcrHasShipped()
    {
        SalesLine           salesLine;
        InventTrans         inventTrans;
        boolean             hasShipped;
        InventTransOrigin   inventTransOrigin;

        select firstonly RecId, InventTransId from salesLine
            where salesLine.SalesId == this.SalesId
            exists join inventTrans
            exists join inventTransOrigin
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                && inventTransOrigin.InventTransId == salesLine.InventTransId
                && (inventTrans.StatusIssue == StatusIssue::Sold
                || inventTrans.StatusIssue == StatusIssue::Deducted);

        hasShipped = (salesLine.RecId == 0) ? false: true;

        return hasShipped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrHasTender</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if one or more payments using the specified tender
    ///  are associated with this sales order.
    /// </summary>
    /// <param name="_tenderTypeId">
    /// The tender for which to check the sales order.
    /// </param>
    /// <param name="_ignoreCanceled">
    /// A <c>Boolean</c> value that defines whether the search should take into acount
    /// canceled orders or not; optional.
    /// </param>
    /// <returns>
    /// true if one or more payments using the specified tender
    ///     are associated with this sales order; otherwise, false.
    /// </returns>
    boolean mcrHasTender(RetailTenderTypeId _tenderTypeId, boolean _ignoreCanceled = true)
    {
        MCRCustPaymTable mcrCustPaymTable;

        if (_ignoreCanceled)
        {
            select firstonly RecId from mcrCustPaymTable
                where mcrCustPaymTable.RefTableId == this.TableId
                    && mcrCustPaymTable.RefRecId == this.RecId
                    && mcrCustPaymTable.TenderTypeId == _tenderTypeId
                    && (mcrCustPaymTable.PercentAmount != 0.0
                    || mcrCustPaymTable.Amount != 0.0
                    || mcrCustPaymTable.PostedAmount != 0);
        }
        else
        {
            select firstonly RecId from mcrCustPaymTable
                where mcrCustPaymTable.RefTableId == this.TableId
                    && mcrCustPaymTable.RefRecId == this.RecId
                    && mcrCustPaymTable.TenderTypeId == _tenderTypeId;
        }

        return mcrCustPaymTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInterCompanyAutoCreateOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates intercompany orders.
    /// </summary>
    void mcrInterCompanyAutoCreateOrders()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInterCompanyOrigSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the corresponding <c>SalesId</c> for the intercompany direct delivery sales order
    /// transaction based on the current sales order.
    /// </summary>
    /// <returns>
    /// the corresponding <c>SalesId</c> for the intercompany direct delivery sales order
    /// transaction based on the current sales order.
    /// </returns>
    SalesId mcrInterCompanyOrigSalesId()
    {
        PurchTable          purchTable;
        MCRReturnSalesTable mcrReturnSalesTable;

        select firstonly InterCompanyOriginalSalesId, InterCompanySalesId from purchTable
            exists join mcrReturnSalesTable
            where mcrReturnSalesTable.SalesTable == this.RecId
            && purchTable.InterCompanyOriginalSalesId == mcrReturnSalesTable.OriginalSalesId;

        return purchTable.InterCompanySalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsCallCenter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the sales order is associated with a call center or not.
    /// </summary>
    /// <returns>
    /// true if the sales order is a call center order; otherwise, false.
    /// </returns>
    public boolean mcrIsCallCenter()
    {
        return RetailSalesTable::findSalesTable(this).mcrIsCallCenter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsContParentOrderBillUpFront</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether or not the continuity parent order is bill up front.
    /// </summary>
    /// <returns>
    /// true if the continuity parent order is bill up front; otherwise, false.
    /// </returns>
    boolean mcrIsContParentOrderBillUpFront()
    {
        MCRContinuityCustLine   mcrContinuityCustLine;
        MCRContinuityCustHeader mcrContinuityCustHeader;
        boolean                 ret = false;
        MCRSalesTable           mcrSalesTable = this.mcrSalesTable();

        if (mcrSalesTable.ContinuityChild)
        {
            // If it is paid, it was bill up front without schedule.
            if (mcrSalesTable.ContinuityLineEval == MCRContinuityLineEval::Paid)
            {
                ret = true;
            }
            else
            {
                select firstonly InventTransId, RecId from mcrContinuityCustLine
                    where mcrContinuityCustLine.SalesId == this.SalesId
                        && mcrContinuityCustLine.InventTransId
                    exists join mcrContinuityCustHeader
                    where mcrContinuityCustHeader.InventTransId == mcrContinuityCustLine.InventTransId;

                if (mcrContinuityCustLine.RecId)
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsOrderFullyReturned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether or not all invoiced quantity on the order has been returned.
    /// </summary>
    /// <returns>
    /// true if all invoiced quantity on the order has been returned; otherwise, false.
    /// </returns>
    boolean mcrIsOrderFullyReturned()
    {
        boolean     fullyReturned = true;
        SalesLine   salesLine;

        while select salesLine
            where salesLine.SalesId == this.SalesId
        {
            // If line is not fully returned.
            if (!salesLine.mcrIsLineFullyReturned())
            {
                fullyReturned = false;
                break;
            }
        }

        return fullyReturned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the returned quantity.
    /// </summary>
    /// <returns>
    /// The quantity that has been returned from the sales order.
    /// </returns>
    /// <remarks>
    /// This method aggregates the SalesQty across Sales Lines. Caller should decide the rounding of the returned quantity.
    /// </remarks>
    internal SalesQty getReturnedQty()
    {
        SalesLine   salesLine;
        SalesLine   salesLineReturn;

        // Since there are different unit of measures for different lines, no rounding is made here.
        select sum(SalesQty)
        from salesLineReturn join salesLine
        where salesLineReturn.InventTransIdReturn == salesLine.InventTransId
            && salesLine.SalesId == this.SalesId;

        return abs(salesLineReturn.SalesQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsOrderInFuture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the future order processing dates.
    /// </summary>
    /// <returns>
    /// true if the delivery date is greater than the number of days the user has set up on the
    /// sales parameters form for future orders; otherwise, false.
    /// </returns>
    boolean mcrIsOrderInFuture()
    {
        boolean             orderInFuture = false;
        MCRFutureOrderDays  days;
        MCROrderParameters  mcrOrderParameters;
        date                deliverydate;
        SalesLine           salesLine;

        mcrOrderParameters = MCROrderParameters::find();
        // If future orders processing is on.
        if (mcrOrderParameters.mcrFutureOrder)
        {
            days = mcrOrderParameters.mcrFutureOrderDays;
            if (days>0)
            {
                // Obtain the erliest shipping date from the sales lines.
                select minof(ConfirmedDlv) from salesLine
                        where salesLine.SalesId == this.SalesId;

                deliveryDate = salesLine.ConfirmedDlv;
                if ((deliveryDate -DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))>days)
                {
                    orderInFuture = true;
                }
            }
        }
        return orderInFuture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsOrderInstallment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether or not this order has an installment plan.
    /// </summary>
    /// <returns>
    /// true if the order has an installment plan; otherwise, false.
    /// </returns>
    boolean mcrIsOrderInstallment()
    {
        if (MCRInstallmentPlanSalesTable::existSalesId(this.SalesId)
            && !this.mcrSalesTable().ContinuityOrder)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsOrderOnFraudHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether or not the order is on fraud hold.
    /// </summary>
    /// <returns>
    /// true if the order is on fraud hold; otherwise, false.
    /// </returns>
    boolean mcrIsOrderOnFraudHold()
    {
        if (this.mcrOrderStopped == NoYes::Yes)
        {
            if (MCRHoldCodeTrans::isOrderOnFraudHold(this.SalesId))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrLineHasDifferentAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for a different delivery address on the order lines.
    /// </summary>
    /// <returns>
    /// true if there is a different delivery address on the order lines; otherwise, false.
    /// </returns>
    boolean mcrLineHasDifferentAddress()
    {
        SalesLine   salesLine;

        select firstonly DeliveryPostalAddress, RecId
         from salesLine
         where salesLine.SalesId == this.SalesId
            && salesLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries
            && salesLine.DeliveryName != this.DeliveryName;

        if (salesLine && salesLine.deliveryAddress() == this.deliveryAddress())
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrLineHasNonBillAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the order line delivery addresses against the sold-to address on the customer.
    /// </summary>
    /// <returns>
    /// true if the order line delivery addresses differs from the sold-to address on the customer;
    /// otherwise, false.
    /// </returns>
    boolean mcrLineHasNonBillAddress()
    {
        SalesLine   salesLine;
        CustTable   custTable;

        custTable = this.custTable_CustAccount();

        select firstonly RecId from salesLine
         where salesLine.SalesId == this.SalesId
            && salesLine.DeliveryPostalAddress != custTable.invoiceAddress().RecId
            && salesLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries;

        if (salesLine.RecId)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrOpenSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates that sales status to be that of an open order.
    /// </summary>
    void mcrOpenSalesOrder()
    {
        MCRSalesTable           mcrSalesTable;

        if (this.checkUpdate(false))
        {
            ttsbegin;
            this.SalesStatus = SalesStatus::Backorder;
            if (RetailMCRChannelTable::mcrEnableOrderCompletion(this) || RetailCommercePaymentsFeatureHelper::commercePaymentsEnabledForOrder(this, funcName() ))
            {
                this.mcrOrderStopped = NoYes::Yes;
            }

            // Modification of a sales order nullifies out of
            // balance status as well as it's release
            mcrSalesTable = this.mcrSalesTable();
            if (mcrSalesTable.PaymOutOfBalance != MCRPaymOutOfBalance::None
                || mcrSalesTable.OutOfBalanceReleased != MCROutOfBalanceReleaseType::None)
            {
                mcrSalesTable.PaymOutOfBalance = MCRPaymOutOfBalance::None;
                mcrSalesTable.OutOfBalanceReleased = MCROutOfBalanceReleaseType::None;

                // calling update here because when the table is a formDataSource, the extension framework doesn't pack
                // the extension table.
                if (this.isFormDataSource())
                {
                    mcrSalesTable.selectForUpdate(true);
                    mcrSalesTable.update();
                }
                else
                {
                    this.mcrPackMCRSalesTable(mcrSalesTable);
                }
            }

            this.update();

            // create return charge when it is a return order
            if (this.SalesType == SalesType::ReturnItem)
            {
                this.createReturnMarkupTrans();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCallCenterOrderOpened</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether the current sales order is call center sales order and it is an open order.
    /// </summary>
    /// <returns>
    /// True when the created sales order is call center specific and open order; otherwise, false.
    /// </returns>
    internal boolean isCallCenterOrderOpened()
    {
        return (this.mcrIsCallCenter() && (this.SalesStatus != SalesStatus::Backorder));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrOrderProcessed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current order has been processed.
    /// </summary>
    /// <returns>
    /// true if it has been processed; otherwise, false.
    /// </returns>
    public boolean mcrOrderProcessed()
    {
        MCRCustPaymTotals mcrCustPaymTotals;

        // If order completion is not enabled, skip all logic.
        if (RetailMCRChannelTable::mcrEnableOrderCompletion(this))
        {
            // if the status of the order being evaluated has had
            // its status changed to something other than backorder
            // or if there are payments return true
            if (this.SalesStatus == SalesStatus::Backorder
                && this.mcrOrderStopped == NoYes::Yes
                && !MCRHoldCodeTrans::findActiveOrderHolds(this.SalesId))
            {
                mcrCustPaymTotals = MCRCustPaymTotals::construct(this.TableId, this.RecId);
                if (!MCRCustPaymTable::exists(this.TableId, this.RecId)
                    || !mcrCustPaymTotals.allPaymentsSubmitted())
                {
                    return false;
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrOrderReleaseDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the date on which a future order will be released.
    /// </summary>
    /// <returns>
    /// The order realse date of the future order.
    /// </returns>
    public display TransDate mcrOrderReleaseDate()
    {
        date                releaseDate;
        MCRFutureOrderDays  mcrFutureOrderDays;
        date                deliverydate;
        SalesLine           salesLine;

        // Only if the order is in the future will the release
        // date need to be calculated.
        if (this.mcrIsOrderInFuture())
        {
            mcrFutureOrderDays = MCROrderParameters::find().mcrFutureOrderDays;

            // Obtain the earliest shipping date from the sales lines
            select minof(ConfirmedDlv) from salesLine
                        where salesLine.SalesId == this.SalesId;

            deliveryDate = salesLine.ConfirmedDlv;

            releaseDate = deliveryDate-mcrFutureOrderDays;
        }
        else
        {
            releaseDate = DateTimeUtil::date(this.CreatedDateTime);
        }

        return releaseDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPackMCRReturnSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the retail return sales table extension table into <c>MCRReturnSalesTable</c> field.
    /// </summary>
    /// <param name="_mcrReturnSalesTable">
    /// Extension table to be packed.
    /// </param>
    public void mcrPackMCRReturnSalesTable(MCRReturnSalesTable _mcrReturnSalesTable)
    {
        _mcrReturnSalesTable.SalesTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_mcrReturnSalesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPackMCRSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the retail sales table extension table into <c>MCRSalesTable</c> field.
    /// </summary>
    /// <param name="_mcrSalesTable">
    /// Extension table to be packed.
    /// </param>
    public void mcrPackMCRSalesTable(MCRSalesTable _mcrSalesTable)
    {
        _mcrSalesTable.SalesTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_mcrSalesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPackMCRSalesTableShipping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the retail sales table shipping extension table into <c>MCRSalesTableShipping</c> field.
    /// </summary>
    /// <param name="_mcrSalesTableShipping">
    /// Extension table to be packed.
    /// </param>
    public void mcrPackMCRSalesTableShipping(MCRSalesTableShipping _mcrSalesTableShipping)
    {
        _mcrSalesTableShipping.SalesTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_mcrSalesTableShipping);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrReturnSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recovers the retail return sales table record.
    /// </summary>
    /// <returns>
    /// A record of <c>MCRReturnSalesTable</c>
    /// </returns>
    public MCRReturnSalesTable mcrReturnSalesTable()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(MCRReturnSalesTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesManualFraudHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Puts a sales order on manual fraud hold.
    /// </summary>
    /// <returns>
    /// The form arguments from the fraud hold form.
    /// </returns>
    Args mcrSalesManualFraudHold()
    {
        FormRun             formRun;
        Args                formArgs = new Args();
        str                 formArgsFormStr;

        // Pop up form for user to enter a comment
        // as to why the order is going on fraud hold.
        formArgsFormStr = formStr(MCRFraudHoldCommentDialog);
        formArgs.name(formArgsFormStr);
        formArgs.record(this);
        formRun = classfactory.formRunClass(formArgs);
        formRun.init();
        formRun.run();
        formRun.wait();

        if (formArgs.parmEnum()) // Put order on hold.
        {
            //Even if the args().parm() is empty, meaning the user did not enter a comment
            //the order should still be put on hold.
            SalesTable::mcrInsertFraudHold(this.SalesId, formRun.args().parm());
        }
        return formArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesOrderDetailedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the order sales status.
    /// </summary>
    /// <returns>
    /// The detailed order status of the sales order.
    /// </returns>
    public display MCRSalesOrderDetailedStatus mcrSalesOrderDetailedStatus()
    {
        MCRSalesOrderDetailedStatus status;

        status = MCRSalesDetailedStatus::salesOrderDetailedStatus(this);

        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recovers the retail sales table record.
    /// </summary>
    /// <param name="_packNewExtensionTable">
    /// A Boolean value that indicates whether to pack new extension table record; optional.
    /// </param>
    /// <returns>
    /// A record of <c>MCRSalesTable</c>
    /// </returns>
    public MCRSalesTable mcrSalesTable(boolean _packNewExtensionTable = false)
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(MCRSalesTable), _packNewExtensionTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesTableExchange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>SalesTable</c> record marked as an exchange for this record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A boolean that determines whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>SalesTable</c> record marked as an exchange for this record if one exists;
    /// otherwise, and empty buffer.
    /// </returns>
    public SalesTable mcrSalesTableExchange(boolean _forUpdate = false)
    {
        SalesTable  salesTableExchange;

        salesTableExchange.selectForUpdate(_forUpdate);

        select firstonly salesTableExchange
            where salesTableExchange.SalesId == this.ReturnReplacementId;

        return salesTableExchange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesTableOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original <c>SalesTable</c> record associated with this records.
    /// </summary>
    /// <param name="_forUpdate">
    /// A boolean that determines whether to select the table for update; optional.
    /// </param>
    /// <returns>
    /// The original <c>SalesTable</c> record associated with this record if one exists;
    /// otherwise, an empty buffer.
    /// </returns>
    public SalesTable mcrSalesTableOriginal(boolean _forUpdate = false)
    {
        SalesTable          salesTableOriginal;
        MCRReturnSalesTable mcrReturnSalesTable;

        salesTableOriginal.selectForUpdate(_forUpdate);

        select firstonly salesTableOriginal
            exists join mcrReturnSalesTable
            where mcrReturnSalesTable.SalesTable == this.RecId
                && salesTableOriginal.SalesId == mcrReturnSalesTable.OriginalSalesId;

        return salesTableOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesTableShipping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recovers the retail sales table shipping record.
    /// </summary>
    /// <param name="_packNewExtensionTable">
    /// A Boolean value that indicates whether to pack new extension table record; optional.
    /// </param>
    /// <returns>
    /// A record of <c>MCRSalesTableShipping</c>
    /// </returns>
    public MCRSalesTableShipping mcrSalesTableShipping(boolean _packNewExtensionTable = false)
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(MCRSalesTableShipping), _packNewExtensionTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateChannelReferenceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// To generate the ChannelReferenceId for the order new created.
    /// Currently setting the length to 12 to align the length of the channel reference identifier generated for online orders.
    /// </summary>
    /// <returns>
    /// The channel reference identifier.
    /// </returns>
    protected str generateChannelReferenceId()
    {
        return RetailData::generateRandomBase32Str(12);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateRelatedRetailSalesTable</Name>
				<Source><![CDATA[
    protected boolean mustCreateRelatedRetailSalesTable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateRetailSalesTable</Name>
				<Source><![CDATA[
    [SysObsolete('This method is deprecated, please use mustCreateRelatedRetailSalesTable instead.', false, 17\3\2022)]
    public static boolean mustCreateRetailSalesTable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetMcrOrderStopped</Name>
				<Source><![CDATA[
    protected boolean mustSetMcrOrderStopped()
    {
        return !this.InterCompanyOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustResetSiteAndLocationId</Name>
				<Source><![CDATA[
    protected boolean mustResetSiteAndLocationId()
    {
        return !this.InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMcrOrderStopped</Name>
				<Source><![CDATA[
    internal protected boolean getMcrOrderStopped()
    {
        return RetailMCRChannelTable::mcrEnableOrderCompletionFindByUser();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetRetailChannel</Name>
				<Source><![CDATA[
    private void mcrSetRetailChannel()
    {
        RetailSalesTable    retailSalesTable;
        MCRChannelUser      mcrChannelUser = MCRChannelUser::find();

        boolean shouldCreateCallCenterOrder = true;

        if (this.ProjId && RetailOrdersFeatureControl::skipOrderCompletionForProjectOrderFeatureEnabled())
        {
            shouldCreateCallCenterOrder = false;
        }

        if ((mcrChannelUser && shouldCreateCallCenterOrder) || this.mustCreateRelatedRetailSalesTable())
        {
            retailSalesTable = this.retailSalesTable();

            if (!retailSalesTable.RetailChannel
                || retailSalesTable.RetailChannel == mcrChannelUser.Channel)  //Call center channel order
            {
                RecId channelRecId = this.RetailChannelTable;
                RetailChannelTable retailChannelTable;

                // If channel is selected through form and feature is enabled use the selected channel
                if (channelRecId && RetailEnableB2b2bAndEnhanceB2bOrdersFeature::isEnabled())
                {
                    retailChannelTable = RetailChannelTable::findByRecId(channelRecId);
                }
                else
                {
                    retailChannelTable = RetailChannelTable::findByRecId(mcrChannelUser.Channel);
                }

                this.RetailChannelTable = retailChannelTable.RecId;
                retailSalesTable.RetailChannel = retailChannelTable.RecId;

                if (this.mustSetMcrOrderStopped())
                {
                    this.mcrOrderStopped = this.getMcrOrderStopped();
                }
                this.DefaultDimension = this.mergeDimension(retailChannelTable.DefaultDimension);

                if (this.mustResetSiteAndLocationId())
                {
                    // Default warehouse on call centre should be used as a fallback warehouse for call centre sales orders when none provided.
                    this.InventLocationId = retailChannelTable.inventLocation;
                    // Fallback to call center channel warehouse site in case none is defined.
                    this.InventSiteId = InventLocation::findInLegalEntity(retailChannelTable.inventLocation, retailChannelTable.inventLocationDataAreaId).InventSiteId;

                    this.modifiedField(fieldNum(SalesTable, InventSiteId));
                }

                RetailCallCenterOrderExtensions::initializeRetailSalesTable(retailSalesTable, this);

                retailSalesTable.SalesTable = this.RecId;

                retailSalesTable.RetailChannel = retailChannelTable.RecId;

                retailSalesTable.OriginChannel = mcrChannelUser.Channel;
                retailSalesTable.RetailOrder = this.isRetailOrder(retailSalesTable);

                retailSalesTable.OMInternalOrganization = retailChannelTable.OMOperatingUnitID;
                retailSalesTable.PaymentsType = RetailCommercePaymentsFeatureHelper::getPaymentsType();

                // Only assign the ChannelReferenceId with the random string when the RetailOmniChannelGenerateOrderConfirmationIdFeature enabled.
                if (FeatureStateProvider::isFeatureEnabled(RetailOmniChannelGenerateOrderConfirmationIdFeature::instance()))
                {
                    retailSalesTable.ChannelReferenceId = this.generateChannelReferenceId();
                }

                if (retailChannelTable && retailChannelTable.ChannelType == RetailChannelType::MCRCallCenter)
                {
                    RetailCallCenterOrderExtensions::initializeCallCenterOrder(this);
                }

                this.doUpdate();

                this.packRetailSalesTable(retailSalesTable);

                Args salesTableArgs = new Args();
                salesTableArgs.record(this);
                RetailAttributevalueInstance::main(salesTableArgs);
            }

            // When the order is being created, find the default loyalty card based the order customer.
            // Add the card to the order and update the loyalty programs and tiers that apply to the order.
            if (!retailSalesTable.RetailLoyaltyCard)
            {
                RetailLoyaltyCard card = RetailLoyaltyCard::findDefaultLoyaltyCardByCustomer(this.CustAccount);
                if (card)
                {
                    retailSalesTable.RetailLoyaltyCard = card.RecId;
                    this.packRetailSalesTable(retailSalesTable);

                    RetailLoyaltyManager::UpdateRetailSalesAffiliationForLoyalty(this.SalesId, card.RecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailOrder</Name>
				<Source><![CDATA[
    protected NoYes isRetailOrder(RetailSalesTable _retailSalesTable)
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrShowNotes</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Shows the existing notes field and allows editing.
    /// </summary>
    void mcrShowNotes()
    {
        FormRun    formRun;
        Args       formArgs = new Args();
        str        formArgsFormStr;
        Common     formArgsRecord;

        formArgsRecord = this;
        formArgsFormStr = formStr(MCRFraudHoldCommentDialog);
        formArgs.name(formArgsFormStr);
        formArgs.record(formArgsRecord);
        formRun = classfactory.formRunClass(formArgs);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized from the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        SalesTableType  salesTableType;
        SalesTable_W salesTable_W;

        super(_fieldId);

        salesTableType = this.type();
        salesTableType.modifiedField(_fieldId);
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // Default in the MCRExpedite flag based on the delivery mode.
            if (_fieldId == fieldNum(SalesTable, DlvMode))
            {
                this.mcrDlvModeModified();
            }

            // Refresh to update any other form controls displaying this field.
            if (FormDataUtil::isFormDataSource(this))
            {
                FormDataUtil::getFormDataSource(this).refresh();
            }
        }

        if (!SalesDirectDebitMandateFromInvoiceAccountFlight::instance().isEnabled() && _fieldId == fieldNum(SalesTable, InvoiceAccount))
        {
            if (CustPaymModeTable::find(this.custTable_CustAccount().PaymMode).IsSEPA)
            {
                this.DirectDebitMandate = CustDirectDebitMandate::getDefaultMandate(this.InvoiceAccount);
            }
        }

        #ISOCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            switch (_fieldId)
            {
                case fieldnum(SalesTable, CustAccount):
                    this.salesTable_W().initializeWithTaxPayment_IN();
                    break;

                case fieldnum(SalesTable, InvoiceAccount):
                    if (FeatureStateProvider::isFeatureEnabled(TaxCalculateGSTBasedOnInvoiceAccountFeature::instance()))
                    {
                        this.salesTable_W().initializeWithTaxPayment_IN();
                    }
                    break;

                case fieldnum(SalesTable, DeliveryPostalAddress):
                    if (!FeatureStateProvider::isFeatureEnabled(TaxCalculateGSTBasedOnInvoiceAccountFeature::instance()))
                    {
                        this.salesTable_W().initializeWithTaxPayment_IN();
                    }
                    break;
            }
        }

        if (_fieldId == fieldNum(SalesTable, MpsExcludeSalesOrder))
        {
            this.MpsUpdateExcludeSalesOrder = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldDDC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the modified field event for delivery date control fields.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID for the modified field.
    /// </param>
    /// <param name="_uiEnabled">
    /// Controls whether UI interactions with the user are allowed.
    /// </param>
    void modifiedFieldDDC(FieldId _fieldId, boolean _uiEnabled = true) //Enhanced Delivery Date Control
    {
        Object                      obj;
        SalesCalcAvailableDlvDates  calcAvailableDlvDates;
        container                   c;

        if (this.DeliveryDateControlType != SalesDeliveryDateControlType::None && !this.shouldSkipCheckDeliveryDateControl())
        {
            calcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(this,_fieldId);

            switch (_fieldId)
            {
                case fieldNum(SalesTable, DlvMode):
                    if (!this.RecId)
                    {
                        calcAvailableDlvDates = SalesCalcAvailableDlvDates::modifiedFieldOrderEntryDeadLine(this,_fieldId);
                    }
                    break;

                case fieldNum(SalesTable, DeliveryPostalAddress):                 //fall through
                case fieldNum(SalesTable, InventLocationId):
                    if (!this.RecId)
                    {
                        calcAvailableDlvDates = SalesCalcAvailableDlvDates::modifiedFieldOrderEntryDeadLine(this,_fieldId);
                    }
                    this.setListCode();
                    break;

                case fieldNum(SalesTable, InventSiteId):
                    this.setListCode();
                    break;

                case fieldNum(SalesTable, DeliveryDateControlType):
                    if (this.RecId)
                    {
                        calcAvailableDlvDates.modifiedField(this, _uiEnabled);
                    }
                    else
                    {
                        calcAvailableDlvDates = SalesCalcAvailableDlvDates::modifiedFieldOrderEntryDeadLine(this,_fieldId);
                    }
                    break;

                case fieldNum(SalesTable, ReceiptDateRequested):
                    calcAvailableDlvDates.modifiedField(this, _uiEnabled);

                    if (this.ShippingDateRequested > this.ReceiptDateRequested)
                    {
                        this.ShippingDateRequested = this.ReceiptDateRequested;
                    }
                    break;

                case fieldNum(SalesTable, ShippingDateRequested):
                    calcAvailableDlvDates.modifiedField(this, _uiEnabled);

                    if (this.ShippingDateRequested > this.ReceiptDateRequested)
                    {
                        this.ReceiptDateRequested = this.ShippingDateRequested;
                    }
                    break;

                case fieldNum(SalesTable, ShippingDateConfirmed):
                    calcAvailableDlvDates.modifiedField(this, _uiEnabled);

                    if (this.ShippingDateConfirmed > this.ReceiptDateConfirmed)
                    {
                        this.ReceiptDateConfirmed = this.ShippingDateConfirmed;
                    }
                    break;

                case fieldNum(SalesTable, ReceiptDateConfirmed):
                    calcAvailableDlvDates.modifiedField(this, _uiEnabled);

                    if (this.ShippingDateConfirmed > this.ReceiptDateConfirmed)
                    {
                        this.ShippingDateConfirmed = this.ReceiptDateConfirmed;
                    }
                    break;

                default:
            }

            if (!_uiEnabled && calcAvailableDlvDates.parmErrorText())
            {
                throw error(calcAvailableDlvDates.parmErrorText());
            }
        }

        if (FormDataUtil::isFormDataSource(this) && FormDataUtil::getFormDataSource(this).formRun() && FormDataUtil::getFormDataSource(this).formRun().name() == formStr(SalesCreateOrder))
        {
            obj = FormDataUtil::getFormDataSource(this).formRun();

            if (calcAvailableDlvDates && calcAvailableDlvDates.parmCancelModifiedField())
            {
                if (formHasMethod(obj,identifierStr(getInitialValuesDeliveryDate)))
                {
                    c = obj.getInitialValuesDeliveryDate();

                    if (c)
                    {
                        this.ShippingDateConfirmed   = conPeek(c, 1);
                        this.ShippingDateRequested   = conPeek(c, 2);
                        this.ReceiptDateConfirmed    = conPeek(c, 3);
                        this.ReceiptDateRequested    = conPeek(c, 4);
                        this.DeliveryDateControlType = conPeek(c, 5);
                    }
                }
                else
                {
                    this.(_fieldId) = this.orig().(_fieldId);
                }
            }
            else
            {
                if (formHasMethod(obj,identifierStr(setInitialValuesDeliveryDate)))
                {
                    obj.setInitialValuesDeliveryDate();
                }
            }
        }

        this.DeliveryDate = this.ShippingDateConfirmed ? this.ShippingDateConfirmed : this.ShippingDateRequested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipCheckDeliveryDateControl</Name>
				<Source><![CDATA[
    public boolean shouldSkipCheckDeliveryDateControl()
    {
        return this.isNewRecord()
            && this.IsIntegration == TradeIntegrationType::Dynamics365Sales
            && this.SalesOrderIntegrationCreationType == SalesOrderIntegrationCreationType::WinQuote
            && SalesTableSkipDeliveryDateControlWhenWonInD365Flight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedInterCompanyOrder</Name>
				<Source><![CDATA[
    public void modifiedInterCompanyOrder()
    {
        if (this.InterCompanyOrder)
        {
            this.InterCompanyCompanyId = this.custTable_CustAccount().interCompanyTradingPartnerCompanyID();
            if (this.isMarkedForBankLC())
            {
                this.BankDocumentType = BankDocumentType::None;
            }
        }
        else
        {
            this.InterCompanyCompanyId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedInventSiteFromParent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default values on the current or parent record because the <c>InventSiteId</c> field is modified.
    /// </summary>
    /// <param name="_parent">
    ///    The parent record buffer that is joined to the <c>SalesTable</c> record buffer; optional.
    /// </param>
    public void modifiedInventSiteFromParent(Common _parent = this)
    {
        this.InventStorageDimMap::modifiedInventSiteFromParent(_parent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedOneTimeCustomer</Name>
				<Source><![CDATA[
    void  modifiedOneTimeCustomer()
    {
        if (this.OneTimeCustomer && !CustTable::createOneTimeAccountValidate())
        {
            this.OneTimeCustomer = NoYes::No;
        }

        if (this.OneTimeCustomer && !this.CustAccount)
        {
            this.createOneTimeAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedProjId</Name>
				<Source><![CDATA[
    void  modifiedProjId()
    {
        ProjTable           projTable = ProjTable::find(this.ProjId);
        ProjFundingSource   projFundingSource;

        this.initFromProjTable(projTable);

        if (ProjFundingSource::numberOfFundingSources(projTable.ProjInvoiceProjId) == 1)
        {
            // Project does not support Sales Orders / Item Requirements for multiple funded contracts
            select firstonly CustAccount, LanguageId from projFundingSource where projFundingSource.ContractId == projTable.ProjInvoiceProjId;
            this.LanguageId       = projFundingSource.LanguageId;
        }

        this.OneTimeCustomer  = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeCovPlanned</Name>
				<Source><![CDATA[
    boolean  mustBeCovPlanned()
    {
        SalesTableType  salesTableType;

        salesTableType = this.type();
        return salesTableType.mustBeCovPlanned();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDoCreditLimitAfterUpdate</Name>
				<Source><![CDATA[
    /**
        The method returns true if creditlimit must be executed after salesTable.update().
    **/
    boolean mustDoCreditLimitAfterUpdate()
    {
        SalesTable this_orig = this.orig();

        return (this.InclTax            != this_orig.InclTax ||
                this.CustAccount        != this_orig.CustAccount
                || this.SalesType       != this_orig.SalesType
                || this.FixedExchRate   != this_orig.FixedExchRate
                || this.PriceGroupId    != this_orig.PriceGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nfePaymentMethod_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets payment method for NF-e
    /// </summary>
    /// <returns>
    /// The payment method for NF-e
    /// </returns>
    public EFDocPaymentMethod_BR nfePaymentMethod_BR()
    {
        CustPaymModeTable custPaymModeTable;
        
        select firstOnly PaymentMethod_BR from custPaymModeTable
            where custPaymModeTable.PaymMode == this.PaymMode;
        
        return custPaymModeTable.PaymentMethod_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfLines</Name>
				<Source><![CDATA[
    public NumberOfRecords numberOfLines()
    {
        return (select count(RecId) from salesLine where salesLine.SalesId == this.SalesId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingSlipTotal</Name>
				<Source><![CDATA[
    public Amount packingSlipTotal()
    {
        SalesTotals_Sales   salesTotals = SalesTotals_Sales::construct(this, SalesUpdate::PackingSlip);
        container           displayFields = salesTotals.displayFieldsCurrency(salesTotals.currencyCode());

        return conPeek(displayFields, TradeTotals::posTotalAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>packRetailSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs Retail extension table into <c>PackedExtensions</c> field
    /// </summary>
    /// <param name="_retailSalesTable">
    /// Extension table to be packed
    /// </param>
    public void packRetailSalesTable(RetailSalesTable _retailSalesTable)
    {
        _retailSalesTable.SalesTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_retailSalesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSalesTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs brazilian extension table into <c>PackedExtensions</c> field
    /// </summary>
    /// <param name="_salesTable_BR">
    /// Extension table to be packed
    /// </param>
    public void packSalesTable_BR(SalesTable_BR _salesTable_BR)
    {
        _salesTable_BR.SalesTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_salesTable_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSalesTable_Intrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs <c>SalesTable_Intrastat</c> extension table record.
    /// </summary>
    /// <param name="_salesTable_Intrastat">
    /// The extension table record to pack.
    /// </param>
    public void packSalesTable_Intrastat(SalesTable_Intrastat _salesTable_Intrastat)
    {
        this.SysExtensionSerializerMap::packExtensionTable(_salesTable_Intrastat);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSalesTable_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an <c>SalesTable_RU</c> record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_salesTable_RU">
    /// The source record of <c>SalesTable_RU</c> table.
    /// </param>
    public void packSalesTable_RU(SalesTable_RU _salesTable_RU)
    {
        _salesTable_RU.SalesTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_salesTable_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSalesTable_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Packs an <c>SalesTable_W</c> record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_salesTable_W">
    ///    The source record of <c>SalesTable_W</c> table.
    /// </param>
    public void packSalesTable_W(SalesTable_W _salesTable_W)
    {
        _salesTable_W.SalesTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_salesTable_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyTable_CustAccount</Name>
				<Source><![CDATA[
    DirPartyTable partyTable_CustAccount(boolean _forUpdate = false)
    {
        DirPartyTable   partyTable;
        CustTable       custTable;

        if (this.CustAccount)
        {
            if (_forUpdate)
            {
                partyTable.selectForUpdate(_forUpdate);
            }

            select firstonly partyTable
                exists join custTable
                where custTable.Party      == partyTable.RecId
                   && custTable.AccountNum == this.CustAccount;
        }
        return partyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payer</Name>
				<Source><![CDATA[
    CustTable payer(boolean  _forUpdate = false)
    {
        return this.custTable_InvoiceAccount(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>payerPostalAddress</Name>
				<Source><![CDATA[
    LogisticsPostalAddress payerPostalAddress()
    {
        return DirParty::primaryPostalAddress(this.custTable_InvoiceAccount().Party,this.deliveryTransDateTime());
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymDayId</Name>
				<Source><![CDATA[
    CustPaymDayId paymDayId()
    {
        CustPaymDayId    paymDayId;

        paymDayId = this.custTable_InvoiceAccount().PaymDayId;

        if (!paymDayId)
        {
            paymDayId = this.payment().PaymDayId;
        }

        return paymDayId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payment</Name>
				<Source><![CDATA[
    PaymTerm payment(boolean _update = false)
    {
        return PaymTerm::find(this.Payment, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymModeModified</Name>
				<Source><![CDATA[
    void paymModeModified()
    {
        this.PaymModeMap::modifiedPaymMode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the title on top of the preview pane.
    /// </summary>
    /// <returns>
    /// The title field of the preview pane.
    /// </returns>
    display Caption previewPaneTitle()
    {
        return strFmt("@SYS330566", this.SalesId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitleReturnItemNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the title on top of the preview pane.
    /// </summary>
    /// <returns>
    /// The title field of the preview pane.
    /// </returns>
    display Caption previewPaneTitleReturnItemNum()
    {
        return strFmt("@SYS330566", this.ReturnItemNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDiscChangePolicyExistOnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a line record related to the current record has a price discount policy.
    /// </summary>
    /// <returns>
    /// true if a line with a price discount policy exists; otherwise, false
    /// </returns>
    public boolean priceDiscChangePolicyExistOnLine()
    {
        SalesLine salesLine;

        select firstonly RecId from salesLine
            where salesLine.SalesId == this.SalesId
               && (salesLine.SystemEntryChangePolicy != 0
               || salesLine.ManualEntryChangepolicy != 0);

        return salesLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDiscChangePolicyUpdateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the price discount policy fields on a set of purchase line records related to the current
    /// <c>SalesTable</c> record.
    /// </summary>
    /// <param name="_priceDiscChangePoliciesTmp">
    /// A buffer of the temporary <c>PriceDiscChangePoliciesTmp</c> table.
    /// </param>
    public void priceDiscChangePolicyUpdateLine(PriceDiscChangePoliciesTmp  _priceDiscChangePoliciesTmp)
    {
        SalesLine salesLine;

        salesLine.skipDataMethods();
        update_recordset salesLine
        setting ManualEntryChangepolicy = _priceDiscChangePoliciesTmp.ManualEntryChangepolicy,
                SystemEntryChangePolicy = _priceDiscChangePoliciesTmp.SystemEntryChangePolicy,
                SystemEntrySource       = _priceDiscChangePoliciesTmp.SystemEntrySource
        join _priceDiscChangePoliciesTmp
            where _priceDiscChangePoliciesTmp.RefRecId == salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectedFreightCharge</Name>
				<Source><![CDATA[
    public AmountCur projectedFreightCharge(AmountCur _amt = 0)
    {
        CustParameters      custParameters = CustParameters::find();
        AmountCur           amtTotal, amtFreight, amtTax, amtMisc;
        SalesTotals_Sales   salesTotals;

        if (custParameters.CreditCardEstShippingChargeType == CreditCardEstShippingChargeType::Fixed)
        {
            amtFreight = custParameters.CreditCardEstShippingChargeValue;
        }
        else
        {
            amtTotal = _amt;
            if (prmisDefault(_amt) || _amt == 0)
            {
                salesTotals = SalesTotals_Sales::construct(this, SalesUpdate::All);
                amtTotal    = salesTotals.totalAmount();
                amtTax      = salesTotals.totalTaxAmount();
                amtMisc     = salesTotals.totalMarkup();
            }

            amtFreight = amtTotal - amtTax - amtMisc;

            if (amtFreight > 0)
            {
                amtFreight = amtFreight * custParameters.CreditCardEstShippingChargeValue / 100;
                if (custParameters.CreditCardEstShippingChargeMax)
                {
                    amtFreight = min(custParameters.CreditCardEstShippingChargeMax, amtFreight);
                }
            }
            else
            {
                amtFreight = 0;
            }
        }

        return amtFreight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    ProjTable projTable(boolean  _forUpdate = false)
    {
        return ProjTable::find(this.ProjId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrderStatusDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the status of the associated quality orders.
    /// </summary>
    /// <returns>
    ///    The current quality order status.
    /// </returns>
    display InventTestOrderStatusDisplay qualityOrderStatusDisplay()
    {
        InventQualityOrderTable orderTable;

        if (!InventParameters::find().UseQualityManagement)
        {
            return InventTestOrderStatusDisplay::None;
        }

        orderTable = InventQualityOrderTable::findLastQualityOrder(InventTestReferenceType::Sales, this.SalesId);

        return orderTable ? orderTable.statusDisplay() : InventTestOrderStatusDisplay::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySalesLine</Name>
				<Source><![CDATA[
    Query querySalesLine(boolean _update = false)
    {
        DictRelation    dictRelation;
        DictField       externdictField;
        DictField       dictField;
        Query           query = new Query();
        Counter         c;

        query.addDataSource(tableNum(SalesLine));

        dictRelation = new DictRelation(tableNum(SalesLine));
        dictRelation.loadTableRelation(this.TableId);

        if (dictRelation.lines())
        {
            for (c=1; c <= dictRelation.lines(); c++)
            {
                externdictField   = new DictField(this.TableId,dictRelation.lineExternTableValue(c));
                dictField   = new DictField(tableNum(SalesLine),dictRelation.lineTableValue(c));
                query.dataSourceTable(tableNum(SalesLine)).addRange(dictField.id()).value(queryValue(this.(externdictField.id())));
            }
        }
        query.dataSourceTable(tableNum(SalesLine)).update(_update);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referencePurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a reference purchase table record.
    /// </summary>
    /// <returns>
    /// A reference purchase table record.
    /// </returns>
    /// <remarks>
    /// This method is used for finding the reference purchase table in the same legal entity in 3-leged
    /// intercompany scenarios.
    /// </remarks>
    public PurchTable referencePurchTable()
    {
        InterCompanyPurchSalesReference     interCompanyPurchSalesReference;
        PurchTable                          referencePurchTable;

        select firstonly referencePurchTable order by InterCompanySalesId desc
            exists join interCompanyPurchSalesReference
            where interCompanyPurchSalesReference.PurchId == referencePurchTable.PurchId
            &&    interCompanyPurchSalesReference.SalesId == this.SalesId;

        return referencePurchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeReferenceToCancelledFiscalDoc_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// removes the reference to cancelled fiscal document for Brazil Localization.
    /// </summary>
    public void removeReferenceToCancelledFiscalDoc_BR()
    {
        SalesTable_BR salesTable_BR;

        ttsBegin;
        salesTable_BR = this.salesTable_BR();
        salesTable_BR.selectForUpdate(true);
        salesTable_BR.InvoiceRefRecId_BR = 0;
        salesTable_BR.update();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLinePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets price discount policies on the lines that are related to the current record.
    /// </summary>
    public void resetLinePolicies()
    {
        SalesLine salesLine;

        update_recordset salesLine
            setting SystemEntrySource       = PriceDiscSystemSource::None,
                    SystemEntryChangePolicy = 0,
                    ManualEntryChangepolicy = 0
        where salesLine.SalesId == this.SalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks Retail extension table from <c>PackedExtensions</c> field
    /// </summary>
    /// <param name="_packNewExtensionTable">
    /// A Boolean value that indicates whether to pack new extension table record; optional.
    /// </param>
    /// <returns>
    /// The unpacked <c>RetailSalesTable</c> record
    /// </returns>
    public RetailSalesTable retailSalesTable(boolean _packNewExtensionTable = true)
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(RetailSalesTable), _packNewExtensionTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnChangeStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the return status.
    /// </summary>
    /// <param name="_newStatus">
    /// The <c>ReturnStatusHeader</c> enumeration value to set.
    /// </param>
    public void returnChangeStatus(ReturnStatusHeader _newStatus)
    {
        if (this.RecId
            && this.ReturnStatus != _newStatus)
        {
            this.ReturnStatus = _newStatus;
            this.update();

            if (this.SalesType == SalesType::ReturnItem && this.isInterCompanyOrder())
            {
                changecompany(this.InterCompanyCompanyId)
                {
                    SalesTable salesTable = SalesTable::find(this.InterCompanyOriginalSalesId, true);

                    if (salesTable.RecId)
                    {
                        salesTable.ReturnStatus = _newStatus;
                        salesTable.update();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnCreateReplacement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a replacement order can be created for the sales table that is in scope.
    /// </summary>
    /// <returns>
    ///    true if no replacement order exists; otherwise, false.
    /// </returns>
    public boolean returnCreateReplacement()
    {
        boolean ret = true;

        if (this.ReturnReplacementCreated == NoYes::Yes
        || (this.InterCompanyOrder && this.InterCompanyDirectDeliveryOrig))
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnExistReturnToCustLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if Return to cust lines exist for the sales order.
    /// </summary>
    /// <returns>
    /// true if Return to cust lines exist; otherwise,false.
    /// </returns>
    public boolean returnExistReturnToCustLines()
    {
        SalesLine               returnToCustLine;
        ReturnDispositionCode   returnDispositionCode;

        select firstonly RecId from returnToCustLine
            where returnToCustLine.SalesId         == this.SalesId
               && returnToCustLine.SalesType       == SalesType::ReturnItem
               && returnToCustLine.ExpectedRetQty  >  0
            exists join returnDispositionCode
                where returnDispositionCode.DispositionCodeId == returnToCustLine.ReturnDispositionCodeId
                &&    returnDispositionCode.DispositionAction == DispositionAction::ReturnToCust;

        return returnToCustLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the current item is the return item.
    /// </summary>
    /// <returns>
    /// true if the current item is return item; otherwise, false.
    /// </returns>
    boolean returnItem()
    {
        return this.type().returnItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnReservationAllowedIsSet</Name>
				<Source><![CDATA[
    public boolean returnReservationAllowedIsSet()
    {
        SalesLine returnLine;
        boolean   ret;

        select firstonly RecId from returnLine where returnLine.SalesId                == this.SalesId &&
                                                     returnLine.ReturnAllowReservation == NoYes::Yes;

        ret = returnLine.RecId ? true : false;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnValidateDeleteReplaceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches a dialog box that asks for confirmation of deletion of the specified return order in case
    /// a replacement order exists.
    /// </summary>
    /// <returns>
    /// true if the user confirms deletion; otherwise, false.
    /// </returns>
    boolean returnValidateDeleteReplaceId()
    {
        boolean ret = true;

        // Are you sure you want to delete return order %1. A replacement order is attached
        if (this.ReturnReplacementId && Box::yesNo(strFmt("@SYS106299", this.ReturnItemNum), DialogButton::No) == DialogButton::No)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recovers brazilian extension table
    /// </summary>
    /// <returns>
    /// A record of <c>SalesTable_BR</c>
    /// </returns>
    public SalesTable_BR salesTable_BR()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesTable_BR));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable_Intrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>SalesTable_Intrastat</c> extension table record.
    /// </summary>
    /// <returns>
    /// The extension table record related to current record.
    /// </returns>
    public SalesTable_Intrastat salesTable_Intrastat()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesTable_Intrastat));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets extension table record for current base table record.
    /// </summary>
    /// <returns>
    /// The extension table record.
    /// </returns>
    public SalesTable_RU salesTable_RU()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesTable_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets extension table record for current base table record.
    /// </summary>
    /// <returns>
    ///    The extension table record.
    /// </returns>
    public SalesTable_W salesTable_W()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesTable_W));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableExtensionTH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>SalesTableExtensionTH</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>SalesTableExtensionTH</c> associated with the current record.
    /// </returns>
    public SalesTableExtensionTH salesTableExtensionTH()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SalesTableExtensionTH));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes sales order from the agreement.
    /// </summary>
    public void setAgreement_RU()
    {
        SalesAgreementHeaderExt_RU salesAgreementHeaderExt;
        SalesAgreementHeader salesAgreementHeader;
        SalesTable_RU salesTableRU;

        salesTableRU = this.salesTable_RU();

        if (salesTableRU.AgreementHeaderExt_RU)
        {
            salesAgreementHeaderExt = SalesAgreementHeaderExt_RU::find(salesTableRU.AgreementHeaderExt_RU);

            salesAgreementHeader = SalesAgreementHeader::find(salesAgreementHeaderExt.AgreementHeader);

            if (Box::yesNo("@SYS305724",DialogButton::Yes) == DialogButton::Yes)
            {
                // Transfer default settings from Agreement to SalesTable buffer...
                this.initFromSalesAgreementHeader(salesAgreementHeader);
            }
            else
            {
                this.DefaultDimension = this.copyDimension(salesAgreementHeader.DefaultDimension);
            }
        }
        else
        {
            this.MatchingAgreement = 0;
            this.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(this.DefaultDimension);
            this.transferCustAccount_Server(true);
            this.initInvoiceAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the delivery name field based on the specified logistic location.
    /// </summary>
    /// <param name="_skipDeliveryRoleCheck">
    ///     A flag indicating whether to skip the check for determining the delivery role; optional.
    /// </param>
    public void setDeliveryName(boolean _skipDeliveryRoleCheck = false)
    {
        this.TradePostalAddress::setDeliveryName(_skipDeliveryRoleCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEstimate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the estimated amount is calculated and has changed.
    /// </summary>
    /// <param name = "_salesTotals">The SalesTotals value.</param>
    /// <returns>True if the estimated amount is calculated and has changed.</returns>
    public boolean setEstimate(SalesTotals _salesTotals = null)
    {
        boolean hasEstimatedChanged = false;

        //Total estimate for the order would be calculated on order save, if credit limit check is enabled for the company.
        if (this.custTable_CustAccount().shouldEstimateBeCalculated())
        {
            AmountMST estimatedOld = this.Estimate;

            this.updateEstimateBasedOnCreditMaxCheck();
            
            hasEstimatedChanged = (this.Estimate != estimatedOld);
        }

        this.Touched = NoYes::No;

        return hasEstimatedChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEstimateBasedOnCreditMaxCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Estimate value based on the <c>TypeOfCreditmaxCheck</c> from the <c>CustParameters</c> table.
    /// </summary>
    /// <param name = "_salesTotals">The SalesTotals value.</param>
    protected void updateEstimateBasedOnCreditMaxCheck(SalesTotals _salesTotals = null)
    {
        SalesTotals             salesTotals;

        using (var taxIntegrationSkipUpdateContext = TaxIntegrationSkipUpdateContext::getInstance())
        {
            if (!TaxIntegrationConstructWithSourceRecordFlight::instance().isEnabled())
            {
                taxIntegrationSkipUpdateContext.parmSkipUpdate(true);
            }

            switch (CustParameters::find().CreditMaxCheck)
            {
                case TypeOfCreditmaxCheck::BalanceDelivered:
                    if (this.isCreditCheckEligible())
                    {
                        if (this.mcrIsCallCenter())
                        {
                            salesTotals = (_salesTotals == null) ? SalesTotals::construct(this, SalesUpdate::PackingSlip) : _salesTotals;
                            this.Estimate       = CurrencyExchangeHelper::amountCur2MST(salesTotals.totalAmount(), this.CurrencyCode);
                        }
                        else
                        {
                            salesTotals         = (_salesTotals == null) ? SalesTotals::construct(this, SalesUpdate::PackingSlip) : _salesTotals;
                            salesTotals.parmCalcEstimate(true);

                            this.Estimate       = CurrencyExchangeHelper::amountCur2MST(salesTotals.totalAmount(), this.CurrencyCode, this.fixedExchRate());
                        }
                    }
                    break;

                case TypeOfCreditmaxCheck::BalanceAll:
                    if (this.isCreditCheckEligible())
                    {
                        if (this.mcrIsCallCenter())
                        {
                            MCRSalesOrderTotals mcrSalesOrderTotals;
                            mcrSalesOrderTotals = (_salesTotals == null) ? new MCRSalesOrderTotals(this) : MCRSalesOrderTotals::construct(this, _salesTotals);
                            this.Estimate = CurrencyExchangeHelper::amountCur2MST(mcrSalesOrderTotals.getRemainingOrder(), this.CurrencyCode);
                        }
                        else
                        {
                            salesTotals         = (_salesTotals == null) ? SalesTotals::construct(this, SalesUpdate::All) : _salesTotals;
                            this.Estimate       = CurrencyExchangeHelper::amountCur2MST(salesTotals.totalAmount(), this.CurrencyCode, this.fixedExchRate());
                        }
                    }
                    break;
            }
        }

        this.postUpdateEstimateBasedOnCreditMaxCheck(salesTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateEstimateBasedOnCreditMaxCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes post logic to the updateEstimateBasedOnCreditMaxCheck() method.
    /// </summary>
    /// <param name = "_salesTotals">A SalesTotals class instance.</param>
    protected void postUpdateEstimateBasedOnCreditMaxCheck(SalesTotals _salesTotals)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSiteId</Name>
				<Source><![CDATA[
    public void setInventSiteId(InventSiteId _inventSiteId)
    {
        this.InventSiteId = _inventSiteId;
        this.modifiedInventSiteFromParent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setListCode</Name>
				<Source><![CDATA[
    void setListCode()
    {
        LogisticsPostalAddress logisticsPostalAddress;
        LogisticsPostalAddress legalPostalAddress = IntrastatParametersHelper::getDefaultLogisticsAddress(this.InventLocationId, this.InventSiteId);

        if (this.SalesType == SalesType::ReturnItem)
        {
            CustTable custTable = CustTable::find(this.CustAccount);
            DirPartyLocation dirPartyLocation = DirPartyLocation::findPrimaryPartyLocation(custTable.Party);
            logisticsPostalAddress = LogisticsPostalAddress::findByLocation(dirPartyLocation.Location);
        }
        else
        {
            logisticsPostalAddress = this.deliveryAddress();
        }

        this.Listcode = EUSalesList::resolveListCodeByCountryState(logisticsPostalAddress, legalPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the delivery address information and related information.
    /// </summary>
    /// <param name="_location">
    /// The record ID of the logistics location.
    /// </param>
    /// <param name="_skipDeliveryRoleCheck">
    /// A flag indicating whether this is a new online Retail sale; optional;
    /// </param>
    /// <remarks>
    /// If the <c>SalesType</c> enumeration value is <c>ReturnItem</c>, the address is set to the default
    /// value of a receiving address.
    /// </remarks>
    void  setLocation(LogisticsLocationRecId _location, boolean _skipDeliveryRoleCheck = false)
    {
        LogisticsLocationEntity location = this.instantiateLocationFromLocationRecId(_location);

        if (location)
        {
            this.DeliveryPostalAddress = location.getPostalAddress().RecId;
            this.setDeliveryName(_skipDeliveryRoleCheck);

            Email locationEmail = location.getEmail();

            if (locationEmail)
            {
                this.Email = locationEmail;
            }

            this.url                        = location.getURL();

            if (this.SalesType == SalesType::ReturnItem)
            {
                Common transferFromTable = this.getDeliveryEntityRecord();
                this.AddressRefRecId = transferFromTable.RecId;
                this.AddressRefTableId = transferFromTable.TableId;
            }
            else
            {
                this.AddressRefRecId            = location.parmLocationRecId();
                this.AddressRefTableId          = tableNum(LogisticsLocation);
            }
        }
        this.setListCode();
        this.setTaxGroup(TaxSales::custTaxGroup(this.DlvTerm, this.TaxGroup, _location));
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateLocationFromLocationRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the logistics location instance.
    /// </summary>
    /// <param name = "_locationRecId">The record ID of the logistics location.</param>
    /// <returns>An instance of <c>LogisticsLocationEntity</c>.</returns>
    protected LogisticsLocationEntity instantiateLocationFromLocationRecId(LogisticsLocationRecId _locationRecId)
    {
        return LogisticsLocationEntity::constructFromLocationRecId(_locationRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNameUsingVATNum</Name>
				<Source><![CDATA[
    private void setNameUsingVATNum(VATNum                              _vatNum,
                                    LogisticsAddressCountryRegionId     _countryRegionId,
                                    Name                                _name,
                                    CustParameters                      _custParameters = CustParameters::find())
    {
        TaxVATNumTable      taxVATNumTable;
        CountryRegionType   countryRegionType;

        taxVATNumTable = TaxVATNumTable::find(_vatNum, _countryRegionId);

        if (taxVATNumTable.Name)
        {
            this.SalesName      = taxVATNumTable.Name;
        }
        else
        {
            switch (_custParameters.MandatoryInvoiceVATNum)
            {
                case TaxVATNumCountryRegionType::None:
                    this.SalesName = _name;
                    break;
                case TaxVATNumCountryRegionType::DomesticEU:
                    countryRegionType = IntrastatCountryRegionParameters::type(_countryRegionId);
                    switch (countryRegionType)
                    {
                        case CountryRegionType::Domestic:
                        case CountryRegionType::EU:
                            this.SalesName = '';
                            break;
                        default:
                            this.SalesName = _name;
                            break;
                    }
                    break;
                case TaxVATNumCountryRegionType::EU:
                    countryRegionType = IntrastatCountryRegionParameters::type(_countryRegionId);
                    switch (countryRegionType)
                    {
                        case CountryRegionType::EU:
                            this.SalesName = '';
                            break;
                        default:
                            this.SalesName = _name;
                            break;
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscChangePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the price disc change policy.
    /// </summary>
    /// <param name="_policySource">
    /// An outcome of the PriceDiscSystemSource enumeration specifying the source of the policy.
    /// </param>
    /// <param name="_fieldId">
    /// The id of the field in question.
    /// </param>
    void setPriceDiscChangePolicy(PriceDiscSystemSource _policySource, RefFieldId _fieldId = 0)
    {
        if (!this.isInterCompanyOrder())
        {
            this.PriceDiscResultFields::createPriceDiscChangePolicy(ModuleSalesPurch::Sales, _policySource, _fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscChangePolicyMultiLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>setPriceDiscChangePolicy</c> method with fixed price discount change parameters for
    /// the multiline discount fields.
    /// </summary>
    public void setPriceDiscChangePolicyMultiLine()
    {
        this.setPriceDiscChangePolicy(PriceDiscSystemSource::ManualEntry, fieldNum(SalesTable, MultiLineDisc));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscSystemChangePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the policy source for selected system sources.
    /// </summary>

    void setPriceDiscSystemChangePolicy()
    {
        if (this.ProjId)
        {
            this.setPriceDiscChangePolicy(PriceDiscSystemSource::Project);
        }

        if (this.QuotationId)
        {
            this.setPriceDiscChangePolicy(PriceDiscSystemSource::SalesQuotation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnAddressFromInventLocationId</Name>
				<Source><![CDATA[
    public boolean setReturnAddressFromInventLocationId(InventLocationId _inventLocationId)
    {
        InventLocation                      inventLocation;
        LogisticsLocationRecId              inventLocationAddress;

        boolean                             addressSet;

        addressSet = false;

        if (_inventLocationId)
        {
            inventLocation          = InventLocation::find(_inventLocationId);
            inventLocationAddress   = LogisticsLocationDefault::findSimpleDefault(inventLocation,
                                        LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery)).RecId;

            if (inventLocationAddress)
            {
                this.setLocation(inventLocationAddress);
                addressSet = true;
            }
        }

        if (!addressSet)
        {
            addressSet = this.setReturnAddressFromInventSiteId(this.InventSiteId);
        }

        return addressSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnAddressFromInventSiteId</Name>
				<Source><![CDATA[
    public boolean setReturnAddressFromInventSiteId(InventSiteId _inventSiteId)
    {
        LogisticsLocationRecId          logisticsLocationRecId;
        boolean                         addressSet = false;

        if (_inventSiteId)
        {
            logisticsLocationRecId = LogisticsLocationDefault::findSimpleDefault(InventSite::find(_inventSiteId), LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery)).RecId;

            if (logisticsLocationRecId)
            {
                this.setLocation(logisticsLocationRecId);
                addressSet = true;
            }
        }

        if (!addressSet)
        {
            this.initDefaultReturnAddress();
            addressSet = true;
        }

        return addressSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipCarrierFromLogisticsLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ship carrier data both on the header and the line level, depending on the
    /// <c>LogisticsLocation</c> data.
    /// </summary>
    /// <param name="_logisticsLocation">
    /// A <c>LogisticsLocation</c> record of a ship carrier.
    /// </param>
    /// <param name="_addressRecId">
    /// The <c>LogisticsPostalAddress</c> record ID of the ship carrier.
    /// </param>
    /// <param name="_shipCarrierAddress">
    /// A <c>ShipCarrierAddress</c> record.
    /// </param>
    /// <remarks>
    /// If the ship carrier address has delivery terms assigned, the delivery terms are transferred to the
    /// sales header.
    /// </remarks>
    public void setShipCarrierFromLogisticsLocation(
        LogisticsLocation           _logisticsLocation,
        LogisticsPostalAddressRecId _addressRecId,
        ShipCarrierAddress          _shipCarrierAddress)
    {
        ShipCarrierAddress      shipCarrierAddress;
        CustTable               custTable = this.shipCarrierCustTable();

        if (_shipCarrierAddress)
        {
            shipCarrierAddress = _shipCarrierAddress;
        }
        else
        {
            shipCarrierAddress = ShipCarrierAddress::findByCustomerLocation(this.CustAccount, _logisticsLocation.RecId);
        }

        this.SalesShipCarrierMap::setShipCarrierFromLogisticsLocation(
            _logisticsLocation,
            _addressRecId,
            shipCarrierAddress);

        if (shipCarrierAddress.DlvTermId)
        {
            this.DlvTerm = shipCarrierAddress.DlvTermId;
        }
        else
        {
            this.DlvTerm = custTable.DlvTerm;
            warning("@SCM:NoThirdPartyAddressDeliveryTermUpdateCancelled");
        }

        this.ShipCarrierResidential     = shipCarrierAddress.ShipCarrierResidentialDest;
        this.ShipCarrierBlindShipment   = shipCarrierAddress.ShipCarrierBlindShipment;
        this.ShipCarrierFuelSurcharge   = custTable.ShipCarrierFuelSurcharge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipCarrierCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ship carrier CustTable.
    /// </summary>
    /// <returns>The <c>CustTable</c> table.</returns>
    protected CustTable shipCarrierCustTable()
    {
        return this.custTable_CustAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipCarrierInformation</Name>
				<Source><![CDATA[
    void setShipCarrierInformation(SalesTable           _salesTable,
                                   CustPackingSlipJour  _custPackingSlipJour = null,
                                   CustInvoiceJour      _custInvoiceJour = null)
    {
        DlvMode     dlvMode;
        DlvModeId   dlvModeId;

        if (_custPackingSlipJour)
        {
            dlvModeId   = _custPackingSlipJour.DlvMode;
        }
        else if (_custInvoiceJour)
        {
            dlvModeId   = _custInvoiceJour.DlvMode;
        }
        else
        {
            dlvModeId = _salesTable.DlvMode;
        }

        dlvMode = DlvMode::find(dlvModeId);

        this.ShipCarrierId              = dlvMode.ShipCarrierId;
        this.ShipCarrierAccountCode     = dlvMode.ShipCarrierAccountCode;
        this.ShipCarrierDlvType         = dlvMode.ShipCarrierDlvType;

        if (_salesTable)
        {
            this.ShipCarrierAccount         = _salesTable.ShipCarrierAccount;
            this.ShipCarrierDeliveryContact = _salesTable.ShipCarrierDeliveryContact;
            this.ShipCarrierFuelSurcharge   = _salesTable.ShipCarrierFuelSurcharge;
            this.ShipCarrierBlindShipment   = _salesTable.ShipCarrierBlindShipment;
            this.ShipCarrierResidential     = _salesTable.ShipCarrierResidential;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroup</Name>
				<Source><![CDATA[
    void setTaxGroup(TaxGroup _taxGroup)
    {
        SalesTableType salesTableType;

        salesTableType = this.type();
        salesTableType.setTaxGroup(_taxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleExchRate</Name>
				<Source><![CDATA[
    CustExchRate settleExchRate(boolean throwOnError = false)
    {
        QueryRun        queryRun;
        CustTransOpen   custTransOpen;
        CustTrans       custTrans;
        CustExchRate    exchRate = 0;
        CustExchRate    custExchRate;

        if (this.SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
        {
            queryRun = SpecTrans::createQueryRunToRefTable(this.company(), this.TableId, this.RecId, tableNum(CustTransOpen));

            queryRun.allowCrossCompany(true);

            while (queryRun.next())
            {
                if (queryRun.changed(tableNum(CustTransOpen)))
                {
                    custTransOpen = queryRun.get(tableNum(CustTransOpen)) as CustTransOpen;
                    if (custTransOpen)
                    {
                        custTrans = custTransOpen.custTrans();

                        if (SalesTable::skipCustTransWhenCalculatingSettleExchRate(custTrans))
                        {
                            continue;
                        }

                        custExchRate = round(custTrans.AmountMST * 100 / custTrans.AmountCur, 0.01);
                        if (!exchRate)
                        {
                            exchRate = custExchRate;
                        }
                        else
                        {
                            if (exchRate != custExchRate)
                            {
                                exchRate = 0;
                                if (throwOnError)
                                {
                                    throw error("@SYS59594");
                                }

                                checkFailed("@SYS59594");
                                break;
                            }
                        }
                    }
                }
            }
        }
        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleExchRateReporting</Name>
				<Source><![CDATA[
    CustExchRate settleExchRateReporting(boolean throwOnError = false)
    {
        QueryRun        queryRun;
        CustTransOpen   custTransOpen;
        CustTrans       custTrans;
        CustExchRate    exchRate = 0;
        CustExchRate    custExchRate;

        if (this.SettleVoucher == SettlementType::SelectedTransact && SalesParameters::find().UseSettleExchRate)
        {
            queryRun = SpecTrans::createQueryRunToRefTable(this.company(), this.TableId, this.RecId, tableNum(CustTransOpen));

            queryRun.allowCrossCompany(true);

            while (queryRun.next())
            {
                if (queryRun.changed(tableNum(CustTransOpen)))
                {
                    custTransOpen = queryRun.get(tableNum(CustTransOpen)) as CustTransOpen;
                    if (custTransOpen)
                    {
                        custTrans = custTransOpen.custTrans();

                        if (SalesTable::skipCustTransWhenCalculatingSettleExchRate(custTrans))
                        {
                            continue;
                        }

                        custExchRate = round(custTrans.reportingCurrencyExchRate, 0.01);
                        if (!exchRate)
                        {
                            exchRate = custExchRate;
                        }
                        else
                        {
                            if (exchRate != custExchRate)
                            {
                                exchRate = 0;
                                if (throwOnError)
                                {
                                    throw error("@SYS59594");
                                }

                                checkFailed("@SYS59594");
                                break;
                            }
                        }
                    }
                }
            }
        }
        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipCarrierLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the record in the <c>LogisticsLocationRecId</c> table that is associated with
    /// the selected ship carrier postal address.
    /// </summary>
    /// <returns>
    /// The record ID of the record in the <c>LogisticsLocationRecId</c> table.
    /// </returns>
    public LogisticsLocationRecId shipCarrierLocation()
    {
        return LogisticsPostalAddress::getLocation(this.ShipCarrierPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipCarrierThirdPartyName</Name>
				<Source><![CDATA[
    Name shipCarrierThirdPartyName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>showContactPerson</Name>
				<Source><![CDATA[
    display ContactPersonName showContactPerson()
    {
        return ContactPerson::find(this.ContactPersonId).personName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDocHanIcon</Name>
				<Source><![CDATA[
    display smmDocIconNum showDocHanIcon()
    {
        #macrolib.resource

        if ((select docuRef
               where docuRef.RefCompanyId == this.DataAreaId &&
                     docuRef.RefTableId   == this.TableId &&
                     docuRef.RefRecId     == this.RecId).RecId)
        {
            return #RES_NODE_DOC;
        }

        return #RES_AM_NEW;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmAmountDeliveredMST</Name>
				<Source><![CDATA[
    display AmountMST smmAmountDeliveredMST()
    {
        return this.amountMST(this.amountDelivered());
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmAmountInvoicedMST</Name>
				<Source><![CDATA[
    display AmountMST smmAmountInvoicedMST()
    {
        return this.amountMST(this.amountInvoiced());
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmAmountOrderedNotInvoicedMST</Name>
				<Source><![CDATA[
    display AmountMST smmAmountOrderedNotInvoicedMST()
    {
        return this.amountMST(this.amountOrderedNotInvoiced());
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxModuleType</Name>
				<Source><![CDATA[
    TaxModuleType taxModuleType()
    {
        return TaxModuleType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeZoneSite</Name>
				<Source><![CDATA[
    display Timezone timeZoneSite()
    {
        return InventSite::timeZoneSite(this.InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsDisplayExpressBOL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the Customer's express bill of lading.
    /// </summary>
    /// <returns>
    /// The customer's express bill of lading.
    /// </returns>
    public display TMSExpressBillofLading tmsDisplayExpressBOL()
    {
        return CustTable::find(this.CustAccount).ExpressBillOfLading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsDisplayRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the Route associated with the Sales order, if applicable.
    /// </summary>
    /// <returns>
    /// The Route code if there is only one associated with the order, otherwise an empty string or "Multiple".
    /// </returns>
    /// <remarks>
    /// Unfortunately we cannot cache this display method by either decorating this method with the
    /// [SysClientCacheDataMethodAttribute(true)] attribute or adding this method to the cache on the
    /// Sales Table Form. Reason behind is that it triggers many database calls for retrieving tmsDisplayRoute
    /// data for all Sales orders that are in current query. Instead, custom cache is implemented in
    /// the SaleTableForm class.
    /// </remarks>
    public display TMSRouteCode tmsDisplayRoute()
    {
        SalesLine                   salesLine;
        TMSRouteSegmentLoadLine     segmentLine;
        TMSRouteCode                ret;
        int                         counter = 0;

        while select RouteCode from segmentLine
            group by RouteCode
            exists join salesLine
                where salesLine.InventTransId   == segmentLine.InventTransId
                   && salesLine.SalesId         == this.SalesId
        {
            ret = segmentLine.RouteCode;
            ++counter;

            if (counter > 1)
            {
                break;
            }
        }

        switch (counter)
        {
            case 0:
                ret = "";
                break;
            case 1:
                break;
            default:
                ret = "@SYS78137";
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tpAddress</Name>
				<Source><![CDATA[
    Addressing tpAddress()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferCustAccount</Name>
				<Source><![CDATA[
    void  transferCustAccount(boolean _isReplacementOrder = false)
    {
        boolean initFromCustTable = true;

        #IsoCountryRegionCodes

        if (this.CustAccount)
        {
            if (!_isReplacementOrder && SalesParameters::find().PromptTransfer &&
                Box::yesNo("@SYS418", DialogButton::Yes) != DialogButton::Yes)
            {
                initFromCustTable = false;
            }

            this.transferCustAccount_Server(initFromCustTable);

            // copy the raw RU fields using this.data().salesTable_RU() from the
            // extension to the buffer instance using this.salesTable_RU().data(<input>)
            // because the RPC causes a disconnect
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#IsoRU]))
            {
                this.salesTable_RU().data(this.data().salesTable_RU());
            }

            if (BrazilParameters::isEnabled())
            {
                this.salesTable_BR().data(this.data().salesTable_BR());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferCustAccount_Server</Name>
				<Source><![CDATA[
    void  transferCustAccount_Server(boolean _initFromCustTable)
    {
        MCRCustPaymTable mcrCustPaymTableCancel;

        if (_initFromCustTable)
        {
            this.initFromCustTable();
            if (this.CustAccount != this.InvoiceAccount)
            {
                this.transferInvoiceAccount();
            }
        }
        else
        {
            this.initFromCustTableMandatoryFields();
        }
        this.copyThirdPartyAddressFromCust();
        SalesCalcAvailableDlvDates::initDateFieldsOrderEntryDeadline(this);

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRPayment)))
        {
            // If Invoice Account has changed back out any existing payments
            // that are not for the new invoice account.
            while select RecId,RefRecId,RefTableId,CustAccount from mcrCustPaymTableCancel
                where mcrCustPaymTableCancel.RefRecId == this.RecId &&
                        mcrCustPaymTableCancel.RefTableId == this.TableId  &&
                        mcrCustPaymTableCancel.CustAccount != this.InvoiceAccount
            {
                MCRCustPaymTable::cancelPaym(mcrCustPaymTableCancel.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferInvoiceAccount</Name>
				<Source><![CDATA[
    void transferInvoiceAccount()
    {
        MCRCustPaymTable mcrCustPaymTableCancel;

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // Invoice account has changed so back out any existing payments
            // that are not for the new invoice account.
            while select RefRecId,RecId,TableId,CustAccount from mcrCustPaymTableCancel
                where mcrCustPaymTableCancel.RefRecId == this.RecId &&
                      mcrCustPaymTableCancel.RefTableId == this.TableId  &&
                      mcrCustPaymTableCancel.CustAccount != this.InvoiceAccount
            {
                MCRCustPaymTable::cancelPaym(mcrCustPaymTableCancel.RecId);
            }
        }
        if (SalesParameters::find().PromptTransfer)
        {
            if (Box::yesNo("@SYS19435"+'\n\n'+this.InvoiceAccount+'\n\n'+CustTable::promptAddress(this.InvoiceAccount, LogisticsLocationRoleType::Delivery),DialogButton::Yes)==DialogButton::Yes)
            {
                this.initInvoiceAccount();
            }
        }
        else
        {
            this.initInvoiceAccount();
        }

        this.transferTaxDefaultsFromInvoiceAcc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustTransferTaxDefaultsFromInvoiceAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines to transfer default tax from invoice account.
    /// </summary>
    /// <returns>
    /// True, should include default tax.
    /// Otherwise, will not contain default tax.
    /// </returns>
    protected boolean mustTransferTaxDefaultsFromInvoiceAcc()
    {
        #ISOCountryRegionCodes
        boolean includeTaxDefaults;

        if (this.isLegalEntityInCountryRegionNeedTransferTaxFromInvoiceAcc()
            || EnableDefaultingOfFiscalDataFromInvoiceAccountFeature::isEnabled())
        {
            switch (CustParameters::find().UseFiscalInvoiceAccount)
            {
                case UseFiscalInvoiceAccount::Always:
                    includeTaxDefaults = true;
                    break;
                case UseFiscalInvoiceAccount::Ask:
                    if (Box::yesNo("@SYS112098"+'\n\n'+ this.InvoiceAccount+'\n\n'+ CustTable::promptAddress(this.InvoiceAccount, LogisticsLocationRoleType::Delivery),DialogButton::Yes)==DialogButton::Yes)
                    {
                        includeTaxDefaults = true;
                    }
                    break;
                case UseFiscalInvoiceAccount::Never:
                    break;
            }
        }

        return includeTaxDefaults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLegalEntityInCountryRegionNeedTransferTaxFromInvoiceAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the legal entity in country region that need transfer default tax from invoice account.
    /// </summary>
    /// <returns>
    /// True, should include default tax.
    /// Otherwise, will not contain default tax.
    /// </returns>
    protected boolean isLegalEntityInCountryRegionNeedTransferTaxFromInvoiceAcc()
    {
        #ISOCountryRegionCodes

        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferToOnetimeCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the related one time customer entity based on the sales order.
    /// </summary>
    void transferToOnetimeCustomer()
    {
        using (var nestedActivityContext = SalesTable::instrumentationLogger().salesOrderActivities().transferToOnetimeCustomer(this))
        {
            CustomerEntity customerEntity;
            if (this.OneTimeCustomer)
            {
                ttsbegin;
                customerEntity = DirParty::constructFromCommon(this.custTable_CustAccount(),
                                                               DateTimeUtil::getSystemDateTime(),
                                                               DirPartyType::None,
                                                               true,
                                                               false);
                customerEntity.initFromSalesTable(this);
                customerEntity.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    SalesTableType type()
    {
        return SalesTableType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlinkAgreement</Name>
				<Source><![CDATA[
    private void unlinkAgreement(boolean _unlinkLines      = false,
                                        boolean _recalculatePrice = false
                                        ,boolean _doUpdateSalesTable = true
                                        ,boolean _doUpdateSalesLine  = true
                                        )
    {
        AgreementReleaseHeaderMatch agreementReleaseHeaderMatch;
        SalesLine                   salesLine;
        boolean                     restorePriceDiscChagnePolicy = true;
        SalesTable_RU               salesTableRU;

        #ISOCountryRegionCodes

        if (this.MatchingAgreement)
        {
            ttsbegin;

            if (_unlinkLines)
            {
                while select forupdate salesLine
                        where salesLine.SalesId == this.SalesId
                {
                    this.unlinkAgreementOnSalesLine(salesLine, _recalculatePrice, _doUpdateSalesLine);
                }
            }

            delete_from agreementReleaseHeaderMatch
            where agreementReleaseHeaderMatch.SalesTableSalesId == this.SalesId
               && agreementReleaseHeaderMatch.SalesTableDataAreaId == this.DataAreaId;

            this.MatchingAgreement = 0;

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                salesTableRU = this.salesTable_RU();
                salesTableRU.AgreementHeaderExt_RU = 0;
                this.packSalesTable_RU(salesTableRU);

                this.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(this.DefaultDimension);
            }

            if (_doUpdateSalesTable)
            {
                this.doUpdate();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlinkAgreementOnSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unlink agreement on <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> record.
    /// </param>
    /// <param name="_recalculatePrice">
    /// A boolean indicates whether to recalculate price or not.
    /// </param>
    /// <param name="_doUpdateSalesLine">
    /// A boolean indicates whether to udpate <c>SalesLine</c> or not.
    /// </param>
    protected void unlinkAgreementOnSalesLine(SalesLine _salesLine, boolean _recalculatePrice, boolean _doUpdateSalesLine)
    {
        if (_salesLine.MatchingAgreementLine)
        {
            if (_recalculatePrice)
            {
                SalesLine::modifySalesQty(_salesLine,_salesLine.inventDim());
            }
            else
            {
                // Set Price Discount Change Policy originated by PriceDiscSystemSource::Agreement.
                _salesLine.setPriceDiscChangePolicy(PriceDiscSystemSource::Agreement);
            }

            _salesLine.unLinkAgreementLine(_doUpdateSalesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlinkAgreementPrompt</Name>
				<Source><![CDATA[
    public boolean unlinkAgreementPrompt(
                                         boolean _doUpdateSalesTable = true
                                         )
    {
        Dialog       dialog;
        DialogField  dialogField;
        boolean      linesExist;

        if (this.MatchingAgreement)
        {
            linesExist = SalesLine::exist(this.SalesId);
            dialog = new Dialog();
            dialog.addText("@SYS305715");
            if (linesExist)
            {
                dialogField = dialog.addField(extendedTypeStr(NoYesId), "@SYS23228", "@SYS305716");
                dialogField.value(NoYes::Yes);
            }
            if (!dialog.run())
            {
                return false;
            }

            if (linesExist)
            {
                this.unlinkAgreement(linesExist, dialogField.value()
                                     , _doUpdateSalesTable
                                     );
            }
            else
            {
                this.unlinkAgreement(linesExist, false
                                     , _doUpdateSalesTable
                                     );
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineToBeUpdatedQuery</Name>
				<Source><![CDATA[
    [SysObsolete('Replaced by buildSalesLinesToBeUpdatedQuery method', false, 30\06\2018)]
    protected Query getSalesLineToBeUpdatedQuery()
    {
        return this.buildSalesLinesToBeUpdatedQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesLinesToBeUpdatedQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for the sales lines to be updated during the header update.
    /// </summary>
    /// <returns>A <c>Query</c> object.</returns>
    protected Query buildSalesLinesToBeUpdatedQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(SalesLine));
        qbds.addRange(fieldNum(SalesLine, SalesId)).value(this.SalesId);
        qbds.update(true);
        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            qbds.addOrderByField(fieldNum(SalesLine, LineNum), SortOrder::Descending);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSalesLineBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the sales line should be updated during the update of the header.
    /// </summary>
    /// <param name = "_salesLine">A sales line.</param>
    /// <returns>true if the sales line should be updated; otherwise, false.</returns>
    protected boolean mustSalesLineBeUpdated(SalesLine _salesLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        SalesInstrumentationLogger salesInstrumentationLogger = SalesTable::instrumentationLogger();

        if (this.shouldSkipUpdateLogic(salesInstrumentationLogger))
        {
            super();
            return;
        }

        SalesOrderInstrumentationActivities salesOrderActivities = salesInstrumentationLogger.salesOrderActivities();

        using (var activityContext = salesOrderActivities.update(this))
        {
            #ISOCountryRegionCodes

            SalesTable salesTable_Orig = this.orig();

            this.type().updating();

            SalesTableType salesTableType;
        
            salesTableType = this.type();

            this.Touched = NoYes::No;

            boolean calcEstimateAfterUpdate = this.mustDoCreditLimitAfterUpdate();

            boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

            if (countryRegion_RU)
            {
                this.salesTable_RU().setInventProfileId_RU();
            }

            this.checkCurrencyCode();

            this.CovStatus = (this.CovStatus == 2 ? 1 : 0);

            if (this.SkipUpdate != InterCompanySkipUpdate::InterCompany
        &&  this.SkipUpdate != InterCompanySkipUpdate::Both
        &&  this.isInterCompanyOrder()
        &&  salesTableType.interCompanyCreateAllowed())
            {
                using (var nestedActivityContext = salesInstrumentationLogger.salesOrderActivities().synchronize(this))
                {
                    salesTableType.interCompanySyncEngine().synchronize();
                }
                
            }

            this.DeliveryDate = this.ShippingDateConfirmed ? this.ShippingDateConfirmed : this.ShippingDateRequested;

            using (var nestedActivityContext = salesInstrumentationLogger.salesOrderActivities().syncPurchTable(this))
            {
                if (this.SkipUpdate != InterCompanySkipUpdate::Internal
                    && this.SkipUpdate != InterCompanySkipUpdate::Both
                    && salesTableType.canCreatePurchOrder())
                {
                    boolean syncDirectDelivery = this.existDirectDelivery();
                    boolean syncInterCompanyDirectDelivery = this.InterCompanyDirectDelivery != salesTable_Orig.InterCompanyDirectDelivery
                                                             && salesTableType.interCompanySalesReferenceExist();
                    if (syncDirectDelivery
                        || syncInterCompanyDirectDelivery)
                    {
                        if (SalesTableTypeSyncPurchTableSaveContext::current())
                        {
                            salesTableType.syncPurchTableSave(this);
                        }
                        else
                        {
					        using (SalesTableTypeSyncPurchTableSaveContext salesTableTypeSyncPurchTableSaveContext = SalesTableTypeSyncPurchTableSaveContext::construct())
					        {
						        salesTableTypeSyncPurchTableSaveContext.parmSyncDirectDelivery(syncDirectDelivery);
						        salesTableTypeSyncPurchTableSaveContext.parmSyncInterCompanyDirectDelivery(syncInterCompanyDirectDelivery);
						        salesTableTypeSyncPurchTableSaveContext.parmInterCompanyDirectDeliveryOrig(salesTable_Orig.InterCompanyDirectDelivery);
						        salesTableType.syncPurchTableSave(this);
					        }
                        }
                    }
                    else if (SalesPurchSyncDeliveryInfoFeature::instance().isEnabled())
                    {
                        PurchParameters purchParameters = PurchParameters::find();
                        if (purchParameters.DeliveryInfoSyncOnUpdateStock)
                        {
                            salesTableType.saveNonIntercompanyPurchTable(this);
                        }
                    }
                }
            }

            this.SkipUpdate = InterCompanySkipUpdate::No;

            using (var nestedActivityContext = salesInstrumentationLogger.salesOrderActivities().tmsModifiedDlvMode(this))
            {
                if (this.DlvMode != salesTable_Orig.DlvMode)
                {
                    salesTableType.tmsModifiedDlvMode();
                }

                salesOrderActivities.logSalesOrder(activityContext, this);

                super();
            }

            if (this.salesTypeChangeFromJournal2Sales(this, salesTable_Orig))
            {
                this.createMarkupTransOnTypeChange(this);
            }
          
            // Only create order events when something changes
            if (this.RecVersion != salesTable_Orig.RecVersion)
            {
                this.insertOrderEvent(salesTable_Orig);
            }

            this.SysExtensionSerializerMap::postUpdate();

            if (this.OneTimeCustomer &&
            (this.DeliveryName             != salesTable_Orig.DeliveryName             ||
             this.DeliveryPostalAddress     != salesTable_Orig.DeliveryPostalAddress))
            {
                CustomerEntity customer = DirParty::constructFromCommon(this.custTable_CustAccount(),
                                                                    DateTimeUtil::getSystemDateTime(),
                                                                    DirPartyType::None,
                                                                    true,
                                                                    false);
                customer.initFromSalesTable(this);
                customer.update();
            }

            if (this.InterCompanyPurchId && !salesTable_Orig.InterCompanyPurchId)
            {
                using (var nestedActivityContext = salesInstrumentationLogger.salesOrderActivities().intercompanySynchronize(this))
                {
                    salesTableType.forceIntercompanyLineSynchronization();
                }
            }
            
            this.updateSalesLinesOnUpdateSalesTable(salesTable_Orig);

            /* The old paymentscedules are deleted */
            if (salesTable_Orig.PaymentSched &&
            salesTable_Orig.PaymentSched != this.PaymentSched )
            {
                CustPaymSched::deleteCustPaymSched(salesTable_Orig.TableId, salesTable_Orig.RecId);
            }

            if (this.recreateMarkupTransOnUpdate(salesTable_Orig))
            {
                this.createMarkupTrans(true);
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter))
            && RetailMCRChannelTable::mcrEnableOrderCompletion(this))
            {
                using (var nestedActivityContext = salesInstrumentationLogger.salesOrderActivities().updateInvoice(this))
                {
                    // If the invoice account has changed, update the invoice account on all
                    //  associated payments.
                    if (this.InvoiceAccount != salesTable_Orig.InvoiceAccount)
                    {
                        MCRCustPaymTotals mcrCustPaymTotals = MCRCustPaymTotals::construct(this.TableId, this.RecId);

                        // NOTE: throws exception::Error if not allowed to update
                        mcrCustPaymTotals.updateInvoiceAccount(this.InvoiceAccount);
                    }
                }
            }

            using (var nestedActivityContext = salesInstrumentationLogger.salesOrderActivities().postUpdate(this))
            {
                this.SysExtensionSerializerMap::postUpdate();

                if (calcEstimateAfterUpdate)
                {
                    if (this.setEstimate())
                    {
                        this.doUpdate();
                    }

                    if (CustParameters::find().salesCheckCreditOnHeader())
                    {
                        this.checkAgainstCreditLimit();
                    }
                }

                if (this.taxRecalculationNeeded(salesTable_Orig))
                {
                    salesTableType.deleteTaxUncommitted();
                }
            }

            using (var nestedActivityContext = salesInstrumentationLogger.salesOrderActivities().markCurrentTaxDocument(this))
            {
                // Update the CRM transaction log
                smmTransLog::initTrans(this, smmLogAction::update);

                boolean isUpdateRequiredIndia = this.mustUpdateSalesLinesOnUpdateSalesTable_IN(salesTable_Orig);
                boolean isUpdateRequired = this.mustUpdateSalesLinesOnUpdateSalesTable(salesTable_Orig);

                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                {
                    if (isUpdateRequired || isUpdateRequiredIndia)
                    {
                        this.markCurrentTaxDocumentTaxStatusDirty();
                    }
                }

                this.type().updated(salesTable_Orig);

                MCRChannelUser mcrChannelUser = MCRChannelUser::find();
                if (mcrChannelUser)
                {
                    RetailCallCenterEventLog::EventWriteCallCenterUserEditedSalesOrder(funcName(), mcrChannelUser.RecId, salesTable_Orig.RecId, this.RecId, 0);
                }
            }

            using (var mpsExcludeSalesOrderLinesActivity = salesInstrumentationLogger.salesOrderActivities().mpsExcludeSalesOrderUpdate(this))
            {
                if (this.MpsUpdateExcludeSalesOrder)
                {
                    if (this.MpsExcludeSalesOrder)
                    {
                        MpsExcludeSpecificSourceDocumentLine::excludeAllSalesLineBySalesOrderId(this.SalesId);    
                    }
                    else
                    {
                        MpsExcludeSpecificSourceDocumentLine::includeAllSalesLineBySalesOrderId(this.SalesId);
                    }
                    this.MpsUpdateExcludeSalesOrder = NoYes::No;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLinesOnUpdateSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the sales lines corresponding to the sales table.
    /// </summary>
    /// <param name = "_salesTable_Orig">The original header corresponding to the sales lines.</param>
    protected void updateSalesLinesOnUpdateSalesTable(SalesTable _salesTable_Orig)
    {
        boolean isUpdateRequiredIndia = this.mustUpdateSalesLinesOnUpdateSalesTable_IN(_salesTable_Orig);
        boolean isUpdateRequired = this.mustUpdateSalesLinesOnUpdateSalesTable(_salesTable_Orig);
        boolean isUpdateRequiredTax = TaxIntegrationMultipleTaxIdForSalesOrderFlight::instance().isEnabled()
            && this.taxRecalculationNeeded(_salesTable_Orig);

        if (!this.SkipLineUpdate && (isUpdateRequired || isUpdateRequiredIndia || isUpdateRequiredTax))
        {
            SalesLine       salesLine;
            SalesLine_IN    salesLine_IN;

            Query query = this.buildSalesLinesToBeUpdatedQuery();
            QueryRun queryRun = new QueryRun(query);
            boolean isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());
            boolean salesLineSalesPriceChanged;

            using (var nestedActivityContext = SalesTable::instrumentationLogger().salesOrderActivities().updateSalesLinesOnUpdateSalesTable(this))
            {
                while (queryRun.next())
                {
                    salesLine = queryRun.get(tableNum(SalesLine));
            
                    if (!this.mustSalesLineBeUpdated(salesLine) || 
                        (isKittingEnabled && this.kittingSkipUpdateLine(salesLine)))
                    {
                        continue;
                    }

                    if (this.salesTypeChangeFromJournal2Sales(this, _salesTable_Orig))
                    {
                        this.createMarkupTransOnTypeChange(salesLine);
                    }

                    if (isUpdateRequired)
                    {
                        this.initializeSalesLineOnUpdate(salesLine, _salesTable_Orig);
                    }

                    if (isUpdateRequired && _salesTable_Orig.PurchOrderFormNum != this.PurchOrderFormNum )
                    {
                        salesLine.PurchOrderFormNum = this.PurchOrderFormNum;
                    }

                    if (isUpdateRequiredIndia)
                    {
                        salesLine_IN = salesLine.salesLine_IN();
                        salesLine_IN.assessableValue(salesLine);
                        salesLine.packSalesLine_IN(salesLine_IN);
                    }

                    if (isUpdateRequiredTax)
                    {
                        SalesLine.TaxId = 0;
                    }

                    SalesLine  salesLineOrig  = SalesLine.Orig();

                    salesLine.update();

                    if (salesLine.SalesPrice != salesLineOrig.SalesPrice
                        && this.SalesType == SalesType::Sales
                        && _salesTable_Orig.SalesType == SalesType::Journal
                        && this.type().canAgreementBeLinked())
                    {
                        SalesLineSalesPriceChanged = true;
                    }
                }
            }

            if (SalesLineSalesPriceChanged )
            {                
                info("@SCM:SalesTypeJournalToSalesPriceUpdate");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipUpdateLogic</Name>
				<Source><![CDATA[
    private boolean shouldSkipUpdateLogic(SalesInstrumentationLogger _logger)
    {
        using (var activityContext = _logger.salesOrderActivities().skipUpdateValidation(this))
        {
            SalesTableSkipBusinessLogicContext salesTableSkipBusinessLogicContext = SalesTableSkipBusinessLogicContext::current();

            if (salesTableSkipBusinessLogicContext && salesTableSkipBusinessLogicContext.parmSkipUpdate())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesLineOnUpdate</Name>
				<Source><![CDATA[
    private void initializeSalesLineOnUpdate(SalesLine _salesLine, SalesTable _salesTableOrig)
    {
        this.initializeSalesLineOnUpdateFromSalesTableOrigin(_salesLine, _salesTableOrig);
        this.initializeSalesLineOnUpdateSalesTable(_salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesLineOnUpdateFromSalesTableOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales line when updating the sales table record.
    /// </summary>
    /// <param name = "_salesLine">The sales line.</param>
    /// <param name = "_salesTable_Orig">The original header corresponding to the sales lines.</param>
    /// <remarks>
    /// This empty method is to be used as an extension point.
    /// </remarks>
    protected void initializeSalesLineOnUpdateFromSalesTableOrigin(SalesLine _salesLine, SalesTable _salesTableOrig)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesLineOnUpdateSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales line when updating the sales table record.
    /// </summary>
    /// <param name = "salesLine">The sales line.</param>
    protected void initializeSalesLineOnUpdateSalesTable(SalesLine _salesLine)
    {
        _salesLine.CustAccount       = this.CustAccount;
        _salesLine.CustGroup         = this.CustGroup;
        _salesLine.SalesType         = this.SalesType;

        if (this.CustomerRef)
        {
            _salesLine.CustomerRef       = this.CustomerRef;
        }

        if (_salesLine.InventRefType == InventRefType::Purch
        &&  _salesLine.InventRefId
        &&  PurchTable::find(_salesLine.InventRefId).isInterCompanyOrder())
        {
            if (this.InterCompanyDirectDelivery)
            {
                _salesLine.DeliveryType = TradeLineDlvType::DropShip;
                _salesLine.DlvMode      = this.DlvMode;
            }
            else
            {
                _salesLine.DeliveryType = TradeLineDlvType::None;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateSalesLinesOnUpdateSalesTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the sales lines must be updated.
    /// </summary>
    /// <param name = "_salesTable_Orig">The original header corresponding to the sales lines.</param>
    /// <returns>true if the sales lines must be updated; false, otherwise.</returns>
    protected boolean mustUpdateSalesLinesOnUpdateSalesTable_IN(SalesTable _salesTable_Orig)
    {
        return (TaxParameters::checkTaxParameters_IN()  &&
                    (_salesTable_Orig.LineDisc       != this.LineDisc      ||
                     _salesTable_Orig.MultiLineDisc  != this.MultiLineDisc ||
                     _salesTable_Orig.EndDisc        != this.EndDisc));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateSalesLinesOnUpdateSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the sales lines must be updated.
    /// </summary>
    /// <param name = "_salesTable_Orig">The original header corresponding to the sales lines.</param>
    /// <returns>true if the sales lines must be updated; false, otherwise.</returns>
    protected boolean mustUpdateSalesLinesOnUpdateSalesTable(SalesTable _salesTable_Orig)
    {
        return (_salesTable_Orig.CustAccount                 != this.CustAccount                 ||
                _salesTable_Orig.CustGroup                   != this.CustGroup                   ||
                _salesTable_Orig.SalesType                   != this.SalesType                   ||
                _salesTable_Orig.InterCompanyDirectDelivery  != this.InterCompanyDirectDelivery  ||
                _salesTable_Orig.CustomerRef                 != this.CustomerRef                 ||
                _salesTable_Orig.PurchOrderFormNum           != this.PurchOrderFormNum           ||
                _salesTable_Orig.FixedExchRate               != this.FixedExchRate               ||
                _salesTable_Orig.ReportingCurrencyFixedExchRate != this.ReportingCurrencyFixedExchRate ||
                (_salesTable_Orig.DlvMode                    != this.DlvMode && this.InterCompanyDirectDelivery));
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark current tax status of <c> SalesTable </c> to dirty
    /// </summary>
    public void markCurrentTaxDocumentTaxStatusDirty()
    {
        TaxableDocumentDescriptor descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this);
        ITaxableDocument taxableDocument = TaxableDocumentObject::construct(descriptor);
        TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBackStatus</Name>
				<Source><![CDATA[
    void  updateBackStatus()
    {
        SalesTableType  salesTableType;

        salesTableType = this.type();
        salesTableType.updateBackStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeadline</Name>
				<Source><![CDATA[
    void  updateDeadline(SalesDeadline  deadline)
    {
        SalesTableType  salesTableType;

        salesTableType = this.type();
        salesTableType.updateDeadline(deadline);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeadlineOnLine</Name>
				<Source><![CDATA[
    void updateDeadlineOnLine()
    {
        SalesLine   salesLine;

        ttsbegin;

        update_recordset salesLine
            setting ReturnDeadline = this.ReturnDeadline
            where   salesLine.SalesId == this.SalesId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentStatus</Name>
				<Source><![CDATA[
    void  updateDocumentStatus(DocumentStatus  documentStatus)
    {
        SalesTableType  salesTableType;

        salesTableType = this.type();
        salesTableType.updateDocumentStatus(documentStatus);

        if (documentStatus == DocumentStatus::Confirmation)
        {
            RetailEventNotificationAction::InsertRetailOENAction(
                            RetailEventNotificationType::OrderConfirmation,
                            this.RecId,
                            this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFinalDisc</Name>
				<Source><![CDATA[
    void updateFinalDisc()
    {
        SalesLine salesLine;
        boolean   processDisc = true;

        // Do not calculate final discounts if they've been overridden or the sales order is associated with a call center.
        if (this.mcrIsCallCenter() || ((#MCRPriceOverrideEnabled && this.mcrSalesTable().PriceOverride)))
        {
            processDisc = false;
        }

        if (processDisc)
        {
            if (this.icCheckUpdateHeaderDiscounts()
                   && this.PriceDiscHeading::updateFinalDiscount(salesLine))
            {
                // This will trigger the creditlimit calculation when salesTable.validateWrite is called
                this.Touched = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCov</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates cash flow forecasts for the <c>SalesTable</c> record.
    /// </summary>
    /// <param name = "_ledgerCoverage">The cash flow forecasting calculations.</param>
    public void  updateLedgerCov(LedgerCoverage _ledgerCoverage)
    {
        SalesTableType salesTableType;

        salesTableType = this.type();

        salesTableType.updateLedgerCov(_ledgerCoverage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineFieldsBasedOnHeaderChanges_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// It is responsible for updating the SalesLine when fiscal information
    /// on header is changed
    /// </summary>
    public void updateLineFieldsBasedOnHeaderChanges_BR()
    {
        SalesLine           salesLine;
        SalesLine_BR        salesLine_BR;
        CFOPValidation_BR   cfopValidation;

        ttsbegin;

        while select forupdate salesLine
            where salesLine.SalesId == this.SalesId
        {
            cfopValidation = CFOPValidation_BR::construct(this);

            salesLine_BR = salesLine.salesLine_BR();
            salesLine_BR.cfopTable_BR = cfopValidation.getDefaultCFOP();
            salesLine.packSalesLine_BR(salesLine_BR);

            if (salesLine_BR.cfopTable_BR != salesLine_BR.orig().cfopTable_BR)
            {
                salesLine.setTaxGroupAndTaxItemGroupFields_BR();

                salesLine_BR = salesLine.salesLine_BR();
                salesLine_BR.DeliveryCFOPTable_BR = CFOPTable_BR::find(salesLine_BR.cfopTable_BR).DeliveryCFOPTable_BR;
                salesLine.packSalesLine_BR(salesLine_BR);

                salesLine.update();

                salesLine.type().updateFiscalDocumentText_BR(FiscalDocumentTextType_BR::CFOP);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the reason code for the sales lines of a sales order.
    /// </summary>
    public void updateLineReasonCode()
    {
        SalesLine       tmpSalesLine;
        ReasonTableRef  reasonTableRefLine;
        ReasonCode      reasonCode;

        reasonCode = ReasonTableRef::find(this.CreditNoteReasonCode).Reason;

        ttsbegin;

        while select forupdate CreditNoteReasonCode from tmpSalesLine
            where tmpSalesLine.SalesId == this.SalesId &&
                ((tmpSalesLine.RefReturnInvoiceTrans_W == 0 && tmpSalesLine.CreditNoteInternalRef_PL != 0) ||
                (tmpSalesLine.RefReturnInvoiceTrans_W != 0 && tmpSalesLine.CreditNoteInternalRef_PL == 0))
        {
            if (tmpSalesLine.CreditNoteReasonCode)
            {
                reasonTableRefLine = ReasonTableRef::find(tmpSalesLine.CreditNoteReasonCode, true);
                reasonTableRefLine.Reason = reasonCode;
                reasonTableRefLine.doUpdate();
            }
            else
            {
                if (reasonCode != "")
                {
                    reasonTableRefLine.Reason = reasonCode;
                    reasonTableRefLine.insert();

                    tmpSalesLine.CreditNoteReasonCode = reasonTableRefLine.RecId;
                    tmpSalesLine.doUpdate();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the reason code comments for the sales lines of a sales order.
    /// </summary>
    public void updateLineReasonComment()
    {
        SalesLine       tmpSalesLine;
        ReasonComment   reasonComment;

        reasonComment = ReasonTableRef::find(this.CreditNoteReasonCode).ReasonComment;

        ttsbegin;

        while select forupdate CreditNoteReasonCode from tmpSalesLine
            where tmpSalesLine.SalesId == this.SalesId &&
                ((tmpSalesLine.RefReturnInvoiceTrans_W == 0 && tmpSalesLine.CreditNoteInternalRef_PL != 0) ||
                (tmpSalesLine.RefReturnInvoiceTrans_W != 0 && tmpSalesLine.CreditNoteInternalRef_PL == 0))
        {
            tmpSalesLine.editReasonComment(true, reasonComment);
            tmpSalesLine.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMultiLineDisc</Name>
				<Source><![CDATA[
    public boolean  updateMultiLineDisc()
    {
        SalesLine salesLine;
        boolean   ret;

        if (this.PriceDiscHeading::updateMultiLineDiscount(salesLine))
        {
            ret = true;

            //This will trigger the creditlimit calculation when salesTable.validateWrite is called
            this.Touched = NoYes::Yes;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLineDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes deletion-related updates to records in the <c>SalesTable</c> table.
    /// </summary>
    public void updateSalesLineDelete()
    {
        SalesTableType  salesTableType;

        salesTableType = this.type();
        salesTableType.updateSalesLineDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesType</Name>
				<Source><![CDATA[
    void  updateSalesType()
    {
        SalesTableType  salesTableType;

        salesTableType = this.type();
        salesTableType.updateSalesType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceCode_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates lines service code values
    /// </summary>
    /// <param name="_servicecodeOnDlvAddress">
    /// Defines the which method will be called to search <c>TaxServiceCode_BR</c>
    /// </param>
    void updateServiceCode_BR(boolean _servicecodeOnDlvAddress)
    {
        SalesLine                 salesLine;

        ttsbegin;

        while select forupdate salesLine
              where salesLine.SalesId   == this.SalesId
        {
            salesLine.setServiceCodeId_BR(_servicecodeOnDlvAddress);
            salesLine.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllLinesDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the delivery mode for each sales line is valid.
    /// </summary>
    /// <returns>True if all sales lines are valid or there are no lines in the table; false if one or more lines are invalid.</returns>
    public boolean validateAllLinesDelivery()
    {
        return RetailShippingDeliveryMode::validateOrderLinesDelivery(this, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllCatalogsForRetailB2b2bOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the catalog for each sales line is valid in a retail B2b2b order.
    /// </summary>
    /// <returns>True if all sales lines are valid or there are no lines in the table; false if one or more lines are invalid.</returns>
    public boolean validateAllCatalogsForRetailB2b2bOrder()
    {
        if (!B2B2BDataHelper::shouldRespectCatalog(this.RetailChannelTable))
        {
            return true;
        }

        str invalidCatalogListStr = B2B2BDataHelper::getAllInvalidCatalogs(this);

        if (invalidCatalogListStr != "")
        {
            return checkFailed(strFmt("@Retail:ValidateAllCatalogsError", RetailChannelTable::findByRecId(this.RetailChannelTable).name(), invalidCatalogListStr));
        }

        if (this.isCatalogMissingOnLinesForRetailB2b2bOrder())
        {
            return checkFailed(strFmt("@Retail:MissingCatalogError", RetailChannelTable::findByRecId(this.RetailChannelTable).name()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatalogMissingOnLinesForRetailB2b2bOrder</Name>
				<Source><![CDATA[
    private boolean isCatalogMissingOnLinesForRetailB2b2bOrder()
    {
        RetailSalesLine retailSalesLine;
        SalesLine salesLine;

        select firstonly retailSalesLine
            join salesLine
            where retailSalesLine.SalesLine == salesLine.RecId && salesLine.SalesId == this.salesId && retailSalesLine.Catalog == 0;

        return RetailSalesLine.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isB2b2bOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the sales order is a B2b2b order.
    /// </summary>
    /// <returns>True if it's a B2b2b order. Otherwise, false.</returns>
    public boolean isB2b2bOrder()
    {
        if (RetailEnableB2b2bAndEnhanceB2bOrdersFeature::isEnabled())
        {
            RetailOnlineChannelTable onlineChannel = RetailOnlineChannelTable::find(this.RetailChannelTable);
            if (onlineChannel.CustomerType == OnlineStoreCustomerType::B2B)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean validateDelete(boolean _mcrCancel = false)
    {
        boolean            ok = true;
        SalesTableType     salesTableType;

        ok = super();

        if (ok)
        {
            salesTableType = this.type();
            ok = salesTableType.validateDelete(_mcrCancel && this.mcrIsCallCenter());
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteWHSWorkTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches WHSWorkTable for linked records with work status different from Open, Closed and Cancelled.
    /// </summary>
    /// <returns>
    /// If record is found return false, otherwise return true.
    /// </returns>
    public boolean validateDeleteWHSWorkTable()
    {
        WHSWorkTable    whsWorkTable;
        container       workStatusesEligibleForSalesOrderDelete = [WHSWorkStatus::Open, WHSWorkStatus::Closed, WHSWorkStatus::Cancelled];

        select firstonly RecId from whsWorkTable
            where whsWorkTable.OrderNum      == this.SalesId
              &&  whsWorkTable.WorkTransType == WHSWorkTransType::Sales
              && !(whsWorkTable.WorkStatus in workStatusesEligibleForSalesOrderDelete);
       
        return whsWorkTable.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId  _fieldId)
    {
        boolean     ok = true;
        CustTable   custTable = CustTable::find(this.InvoiceAccount);

        if (this.mcrIsCallCenter())
        {
            // A user may not turn on a price override via the checkbox,
            // they may only turn off the price override via the checkbox.
            if (_fieldId == fieldNum(MCRSalesTable, PriceOverride))
            {
                ok = ! this.mcrSalesTable().PriceOverride;
            }

            // Warn that they are invoicing a merged customer
            if (_fieldId == fieldNum(SalesTable, InvoiceAccount))
            {
                if (custTable.mcrMergedParent)
                {
                    warning(strFmt("@MCR12337",this.InvoiceAccount,custTable.mcrMergedParent));
                    ok = false;
                }
            }
        }
        ok = super(_fieldId) && ok;

        if (ok)
        {
            ok = this.validateFieldServer(_fieldId);
        }

        if (ok && this.FundingSource &&  _fieldId == fieldNum(SalesTable, FundingSource))
        {
            ProjFundingSource projFundingSource;
            select firstonly RecId, FundingType from projFundingSource
                where projFundingSource.RecId == this.FundingSource;

            if (projFundingSource.FundingType == ProjFundingType::Organization || projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource)
            {
                ok = false;
            }

            if (ok && projFundingSource && this.ProjId == '')
            {
                ok = false;
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a changed field on the server side.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the changed field.
    /// </param>
    /// <returns>
    /// true if the validation succeeded; otherwise, false.
    /// </returns>
    public boolean validateFieldServer(FieldId  _fieldId)
    {
        boolean            ok;
        SalesTableType     salesTableType;

        salesTableType = this.type();
        ok = salesTableType.validateField(_fieldId);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean  validateWrite()
    {
        boolean            ok = true;

        ok = super();
        ok = ok && this.validateWriteServer();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteServer</Name>
				<Source><![CDATA[
    public boolean  validateWriteServer()
    {
        boolean            ok = true;
        SalesTableType     salesTableType;
        MCROrderParameters mcrOrderParameters;
        smmCampaignTable   campaignTable;
        #ISOCountryRegionCodes

        if (ok && !this.SalesId)
        {
            ok = checkFailed(strFmt("@SYS26332", fieldPName(SalesTable, SalesId)));
        }
        salesTableType = this.type();

        if (ok && this.Touched)
        {
            ok = SalesTableType::checkAgainstCreditLimit(this);
        }

        if (ok)
        {
            setPrefix(strFmt("@SYS25975", this.SalesId));
            ok = salesTableType.validateWrite();
        }

        if (ok && this.InclTax && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoHU]))
        {
            ok = this.salesPurchTableInterface().validateExcludeTaxFromInvoice();
        }
        if (this.mcrIsCallCenter())
        {
            mcrOrderParameters = MCROrderParameters::find();
            // Check for sourceId if parameters set to mandatory.
            if (mcrOrderParameters.mcrSourceCodeRequired
                && this.SalesType != SalesType::ReturnItem
                && this.RecId
                && this.mcrSalesTable().SourceId == "")
            {
                ok = checkFailed("@MCR12004");
            }

            // Don't allow user to create a sales order for a parent campaign.
            if (this.SmmCampaignId)
            {
                select firstonly RecId from campaignTable
                    where campaignTable.CampaignParentId == this.SmmCampaignId;
                if (campaignTable.RecId)
                {
                    ok = checkFailed("@MCR26162");
                }
            }
        }

        if (ok && this.ShippingDateRequested && this.ReceiptDateRequested && this.ShippingDateRequested > this.ReceiptDateRequested)
        {
            ok = checkFailed("@SYS78769");
        }

        if (ok && this.ShippingDateConfirmed && this.ReceiptDateConfirmed && this.ShippingDateConfirmed > this.ReceiptDateConfirmed)
        {
            ok = checkFailed("@SYS78769");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidCreditCardPreauthorize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Voids the credit card pre-authorization for a sales order.
    /// </summary>
    /// <summary>
    /// Voids the credit card pre-authorization for a sales order.
    /// </summary>
    void voidCreditCardPreauthorize()
    {
        this.tryVoidCreditCardPreauthorize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryVoidCreditCardPreauthorize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Voids the credit card pre-authorization for a sales order.
    /// </summary>
    /// <summary>
    /// Voids the credit card pre-authorization for a sales order.
    /// </summary>
    /// <returns>
    /// true if the void succeeded; otherwise, false.
    /// </returns>
    internal boolean tryVoidCreditCardPreauthorize()
    {
        CreditCardAuthTrans creditCardAuthTrans;
        boolean ret = true;
        boolean isCallCenterOrCommercePaymentsEnabledOrder = RetailTransactionPaymentsHelper::isCallCenterOrCommercePaymentsEnabledOrder(this);

        // Void pre-authorization for Regular Sales Orders
        if (this.CreditCardCustRefId && this.isCreditCardPaymentType() && !isCallCenterOrCommercePaymentsEnabledOrder)
        {
            creditCardAuthTrans = CreditCardAuthTrans::findValidPreApproval(this.SalesId);
            if (creditCardAuthTrans != null)
            {
                ret = CreditCardProcess::doVoidAuth(creditCardAuthTrans);
            }
        }
        else if (isCallCenterOrCommercePaymentsEnabledOrder)
        {
            MCRCustPaymTable mcrCustPaymTable;

            ret = this.hasNoExternalGiftCardPrePayments();

            if (ret)
            {
                // Can only process credit cards
                TableId salesTableId = tableNum(SalesTable);
                boolean featureEnabled = RetailIncrementalCaptureFeatureExposure::isEnabled();

                // Voids all valid pre-authorizations for sales order
                while select mcrCustPaymTable
                        order by RecId asc
                      where mcrCustPaymTable.RefRecId == this.RecId
                        && mcrCustPaymTable.RefTableId == salesTableId
                        && mcrCustPaymTable.CustPaymType == MCRCustPaymType::CreditCard
                        exists join creditCardAuthTrans
                            where creditCardAuthTrans.MCRPaymRecId == mcrCustPaymTable.RecId
                                && creditCardAuthTrans.ApprovalType == CreditCardOperation::Authorize
                                && creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved
                                && creditCardAuthTrans.ApprovalVoid == NoYes::No
                                && creditCardAuthTrans.ApprovalExpired == NoYes::No
                {
                    // Set the adjustAuth amount if incremental capture enabled
                    if (featureEnabled)
                    {
                        CreditCardProcess_ExtendedParameters creditCardProcess_ExtendedParameters = CreditCardProcess::extendedParameters;
                        creditCardProcess_ExtendedParameters.parmDoVoidAuth_AdjustAuthorizationAmount(mcrCustPaymTable.Amount - mcrCustPaymTable.PostedAmount);
                    }

                    ret = ret && CreditCardProcess::mcrDoVoidPreAuth(mcrCustPaymTable);

                    if (!ret)
                    {
                        break;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNoExternalGiftCardPrePayments</Name>
				<Source><![CDATA[
    private boolean hasNoExternalGiftCardPrePayments()
    {
        MCRCustPaymTable mcrCustPaymTable;
        boolean ret = true;
        TableId salesTableId = tableNum(SalesTable);

        while select mcrCustPaymTable
            where mcrCustPaymTable.RefRecId == this.RecId
                && mcrCustPaymTable.RefTableId == salesTableId
                && mcrCustPaymTable.Status == MCRCustPaymStatus::Paid
        {
            if (mcrCustPaymTable.RecId != 0 && mcrCustPaymTable.isExternalGiftCardPayment())
            {
                // External gift card does not support refunds
                return false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsCheckSalesLineDeliveryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the sales lines postal addresses for current sales order.
    /// </summary>
    /// <returns>
    ///     false if the <c>SalesLine</c> table <c>DeliveryPostalAddress</c> field is 0; otherwise, true.
    /// </returns>
    public boolean whsCheckSalesLineDeliveryPostalAddress()
    {
        SalesLine   salesLine;
        boolean     ok = true;

        select firstonly RecId from salesLine
            where salesLine.SalesId                == this.SalesId
                && salesLine.DeliveryPostalAddress == 0;

        ok = salesLine.RecId == 0;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeliveryPostalAddressInUse</Name>
				<Source><![CDATA[
    internal boolean isDeliveryPostalAddressInUse(LogisticsPostalAddressRecId _recId)
    {
        SalesLine   salesLine;

        select firstonly RecId from salesLine
            where salesLine.SalesId                == this.SalesId
                && salesLine.DeliveryPostalAddress == _recId;

        return salesLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeReturnStatus</Name>
				<Source><![CDATA[
    public static Counter changeReturnStatus(FormDataSource _datasource, ReturnUpdateAction _updateAction)
    {
        SalesTable          returnTable;
        SalesLine           returnLine;
        SalesTable          returnTableUpdate;
        Counter             numberOfRecords;
        SalesTable          salesTable;
        PurchTable          purchTable;
        PurchLine           purchLine;

        ttsbegin;

        for (returnTable = (_datasource.getFirst(true) ? _datasource.getFirst(true) : _datasource.cursor()) as SalesTable;
        returnTable;
        returnTable = _datasource.getNext() as SalesTable)
        {
            if (returnTable.ReturnStatus == ReturnStatusHeader::Created && !returnTable.existRegisteredReceivedInvoicedLines() && !returnTable.type().interCompanyIsDerivedOrder())
            {
                if (_updateAction == ReturnUpdateAction::Cancel)
                {
                    while select forupdate returnLine
                          where returnLine.SalesId == returnTable.SalesId
                    {
                        if (returnLine.interCompanySalesLineExist())
                        {
                            purchLine            = PurchLine::findInventTransId(returnLine.InventRefTransId,true);
                            purchTable           = PurchTable::find(purchLine.PurchId);

                            purchLine.SkipUpdate = InterCompanySkipUpdate::Internal;
                            purchLine.delete(false);

                            if (!purchTable.existPurchLine())
                            {
                                if (purchTable.InterCompanyCompanyId
                                &&  purchTable.InterCompanySalesId)
                                {
                                    changecompany(purchTable.InterCompanyCompanyId)
                                    {
                                        salesTable = null;
                                        salesTable = SalesTable::find(purchTable.InterCompanySalesId,true);
                                        if (salesTable)
                                            salesTable.delete();
                                    }
                                }
                            }
                        }
                        else if (SalesDirectDlvReturnOrderCancelReferencedPOFlight::instance().isEnabled()
                            && returnLine.referencedPurchLine() 
                            && returnLine.validateWrite() 
                            && SalesTableType::construct(returnLine.salesTable()).checkUpdate())
                        {
                            InterCompanyUpdateRemPhys::synchronize(returnLine,
                                                    returnLine.RemainInventPhysical,
                                                    returnLine.RemainSalesPhysical,
                                                    InterCompanySkipUpdate::No,
                                                    returnLine.PdsCWRemainInventPhysical);
                            returnLine.reread();
                        }

                        returnLine.SalesQty            = 0;
                        returnLine.CostPrice           = 0;
                        returnLine.ExpectedRetQty      = 0;
                        returnLine.salesQtyModified();
                        returnLine.DeliveryType        = TradeLineDlvType::None;
                        returnLine.SourcingOrigin      = SalesSourcingOrigin::Inventory;
                        returnLine.SkipUpdate          = InterCompanySkipUpdate::Internal;
                        returnLine.ReturnStatus        = ReturnStatusLine::Canceled;   // This assignment is required to make sure that InventPendingQuantity gets cleaned up
                        returnLine.SalesStatus         = SalesStatus::Canceled;        // This assignment is required to make sure that InventPendingQuantity gets cleaned up
                        returnLine.ReturnClosedDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                        returnLine.InventTransIdReturn = '';
                        returnLine.update();
                    }
                    if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
                    {
                        returnLine.skipDataMethods(true);
                        update_recordset returnLine
                        setting          ReturnStatus         = ReturnStatusLine::Canceled,
                                         CostPrice            = 0,
                                         InventTransIdReturn  = '',
                                         SalesStatus          = SalesStatus::Canceled,
                                         ReturnClosedDate     = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                        where returnLine.SalesId == returnTable.SalesId;
                    }

                    SpecTransManager::newFromSpec(returnTable).deleteAll();

                    returnTableUpdate = SalesTable::find(returnTable.SalesId, true);
                    returnTableUpdate.ReturnStatus               = ReturnStatusHeader::Canceled;
                    returnTableUpdate.SalesStatus                = SalesStatus::Canceled;
                    returnTableUpdate.InterCompanyDirectDelivery = false;
                    returnTableUpdate.unlinkAgreement(true, false, false, true);
                    returnTableUpdate.update();
                }

                numberOfRecords++;
            }
        }

        ttscommit;

        return numberOfRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomsExportOrder_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether in <c>SalesTable</c> table exist record wiht CustomsExportOrder_IN equal yes.
    /// </summary>
    /// <param name="_salesId">
    /// The sales id is used to find record.
    /// </param>
    /// <returns>
    /// Returns true, if exist record; otherwise, false.
    /// </returns>
    public static boolean checkCustomsExportOrder_IN(SalesId  _salesId)
    {
        return _salesId
            && (select firstonly RecId from salesTable
                where salesTable.SalesId                == _salesId
                   && (salesTable.DocumentStatus        == DocumentStatus::Invoice
                   || salesTable.DocumentStatus         == DocumentStatus::ShippingBill_IN
                   || salesTable.DocumentStatus         == DocumentStatus::ProjectInvoice)
                   && salesTable.CustomsExportOrder_IN  == NoYes::Yes).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist(SalesId  salesId)
    {
        if (salesId && !SalesTable::exist(salesId))
        {
            return checkFailed(strFmt(SalesTable::txtNotExist(),salesId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesTable_Replacement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a sales order replacement.
    /// </summary>
    /// <param name="_originalSalesTable">
    /// The sales table with the original sales order.
    /// </param>
    /// <returns>
    /// The replacement sales order.
    /// </returns>
    static SalesTable createSalesTable_Replacement(SalesTable _originalSalesTable)
    {
        SalesTable      salesTable;

        ttsbegin;
        salesTable.SalesType            = SalesType::Sales;
        salesTable.initValue();
        salesTable.CustAccount          = _originalSalesTable.CustAccount;
        salesTable.initFromCustTable();
        salesTable.CurrencyCode         = _originalSalesTable.CurrencyCode;
        salesTable.ReturnItemNum        = _originalSalesTable.ReturnItemNum;
        salesTable.SalesId              = NumberSeq::newGetNum(SalesParameters::numRefSalesId()).num();

        if (_originalSalesTable.MatchingAgreement)
        {
            salesTable.MatchingAgreement = _originalSalesTable.MatchingAgreement;
            AgreementHeader::find(_originalSalesTable.MatchingAgreement).createAgreementReleaseHeaderMatch(salesTable);
        }

        salesTable.insert();

        ttscommit;

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custOpenOrders</Name>
				<Source><![CDATA[
    static SalesTable  custOpenOrders(CustAccount  custAccount, boolean  _forUpdate = false)
    {
        SalesTable salesTable;

        salesTable.selectForUpdate(_forUpdate);

        select salesTable
               index hint CustIdx
               where salesTable.CustAccount  == custAccount                &&
                     (salesTable.SalesStatus == SalesStatus::None      ||
                      salesTable.SalesStatus == SalesStatus::Backorder ||
                      salesTable.SalesStatus == SalesStatus::Delivered);

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllLines</Name>
				<Source><![CDATA[
    public static void deleteAllLines(SalesId _salesId)
    {
        SalesLine   salesLine;

        ttsbegin;

        delete_from salesLine where salesLine.SalesId == _salesId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(SalesId  salesId)
    {
        if (!salesId)
        {
            return false;
        }

        return (select firstonly RecId from salesTable
                    index hint SalesIdx
                    where salesTable.SalesId == salesId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustOpenOrder</Name>
				<Source><![CDATA[
    static boolean existCustOpenOrder(CustAccount custAccount)
    {
        SalesTable salesTable;

        return (select firstonly RecId from salesTable
                    index hint CustIdx
                    where salesTable.CustAccount  == custAccount                &&
                          (salesTable.SalesStatus == SalesStatus::None      ||
                           salesTable.SalesStatus == SalesStatus::Backorder ||
                           salesTable.SalesStatus == SalesStatus::Delivered)).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDlvModeNotInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the delivery mode is used on a non-invoiced sales order.
    /// </summary>
    /// <param name="_dlvModeId">
    /// The <c>DlvModeId</c> value that specifies the delivery mode record.
    /// </param>
    /// <returns>
    /// true if the deliver mode is used on a non-invoiced sales order; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The check is made against the sales order header and all of the non-invoiced lines.
    /// </remarks>
    public static boolean existDlvModeNotInvoiced(DlvModeId _dlvModeId)
    {
        boolean         isReferenced;
        SalesTable      salesTable;
        SalesLine       salesLine;

        if (_dlvModeId == '')
        {
            return false;
        }

        select firstonly RecId from salesTable
            where (salesTable.SalesStatus == SalesStatus::None || salesTable.SalesStatus == SalesStatus::Backorder || salesTable.SalesStatus == SalesStatus::Delivered)
                && salesTable.DlvMode == _dlvModeId;

        isReferenced = (salesTable.RecId != 0);
        if (!isReferenced)
        {
            select firstonly RecId from salesLine
            where (salesTable.SalesStatus == SalesStatus::None || salesTable.SalesStatus == SalesStatus::Backorder || salesTable.SalesStatus == SalesStatus::Delivered)
                && salesLine.DlvMode == _dlvModeId;

            isReferenced = (salesLine.RecId != 0);
        }

        return isReferenced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsRegQrRecInvLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are a RegQrRecInvLines
    /// </summary>
    /// <param name = "_salesId">sales id</param>
    /// <returns>True if there is a RegQrRecInvLines; otherwise, false</returns>
    public static boolean existsRegQrRecInvLines(SalesId _salesId)
    {
        return (select firstonly salesLine where salesLine.SalesId == _salesId &&
                                    salesLine.ReturnStatus > ReturnStatusLine::Awaiting &&
                                    salesLine.ReturnStatus < ReturnStatusLine::Canceled).RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static SalesTable find(SalesId          salesId,
                           boolean          _forUpdate = false,
                           ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        SalesTable  salesTable;

        if (salesId)
        {
            if (_forUpdate)
            {
                salesTable.selectForUpdate (_forUpdate);
                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    salesTable.concurrencyModel(_concurrencyModel);
                }
            }
            salesTable.selectLocked    (_forUpdate);

            select firstonly salesTable
                where salesTable.SalesId == salesId;
        }

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBankLG</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record that is linked to a specified record in the <c>BankLGGuarantee</c> table.
    /// </summary>
    /// <param name="_bankLGRefRecId">
    /// The record ID of the related record in the <c>BankLGGuarantee</c> table.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>SalesTable</c> table; otherwise, an empty record.
    /// </returns>
    public static SalesTable findByBankLG(
        BankLGRefRecId   _bankLGRefRecId,
        boolean          _forUpdate = false)
    {
        SalesTable                          salesTable;
        BankLGGuaranteeCustomerSalesOrder   bankLGGuaranteeCustomerSalesOrder;

        salesTable.selectForUpdate(_forUpdate);

        if (_bankLGRefRecId)
        {
            select firstonly salesTable
                exists join bankLGGuaranteeCustomerSalesOrder
                where bankLGGuaranteeCustomerSalesOrder.CustomerSalesOrder  == salesTable.SalesId
                    && bankLGGuaranteeCustomerSalesOrder.Guarantee          == _bankLGRefRecId;
        }

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateSalesTable_ItemReq</Name>
				<Source><![CDATA[
    static SalesTable findOrCreateSalesTable_ItemReq(CustAccount _custAccount, CustCurrencyCode _currencyCode, ProjId _projId)
    {
        SalesTable salesTable;

        if (_projId && ProjItemRequirementMultipleFundingSourcesFeatureHelper::isFeatureEnabled())
        {
            salesTable = SalesTable::findOrCreateSalesTable_ItemReqWhenMFSFeatureEnabled(_currencyCode, _projId);
        }
        else
        {
            ProjTable       projTable;
            SalesTableType  salesTableType;

            projTable = ProjTable::find(_projId);

            if (_projId)
            {
                ttsbegin;

                select firstonly forupdate salesTable
                    where salesTable.ProjId         == ''                   &&
                          salesTable.CustAccount    == _custAccount         &&
                          salesTable.CurrencyCode   == _currencyCode        &&
                          salesTable.SalesType      == SalesType::ItemReq;

                if (salesTable.RecId && !salesTable.numberOfLines())
                {
                    salesTable.ProjId           = _projId;

                    salesTableType              = SalesTableType::construct(salesTable);
                    salesTableType.initValue();

                    salesTable.CurrencyCode     = _currencyCode;
                    salesTable.FixedExchRate    = ProjInvoiceCurrency::find(projTable.projInvoice().ProjInvoiceProjId,salesTable.CurrencyCode).ExchRate;
                    salesTable.setReportingCurrencyFixedExchangeRate();
                    salesTable.update();
                }

                ttscommit;
            }

            select firstonly salesTable
                where salesTable.ProjId         == _projId              &&
                      salesTable.CustAccount    == _custAccount         &&
                      salesTable.CurrencyCode   == _currencyCode        &&
                      salesTable.SalesType      == SalesType::ItemReq;

            if (!salesTable.RecId)
            {
                salesTable = projTable.createSalesTable_ItemReq(_currencyCode);
            }
        }
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateSalesTable_ItemReqWhenMFSFeatureEnabled</Name>
				<Source><![CDATA[
    public static SalesTable findOrCreateSalesTable_ItemReqWhenMFSFeatureEnabled(CustCurrencyCode _currencyCode, ProjId _projId)
    {
        SalesTable salesOrderItemReq;
        ProjTable projTableLoc = ProjTable::find(_projId);
        
        if (projTableLoc.hasMultipleFundingSourcesWithItemReqMultFundSourcesFeatureEnabled())
        {
            salesOrderItemReq = projTableLoc.salesTable_ItemReqMultFundingSources(_currencyCode, projTableLoc.getProjectDefaultInvoiceAccount(false));
        }
        else
        {
            salesOrderItemReq = projTableLoc.salesTable_ItemReq(_currencyCode);
        }
        
        if (!salesOrderItemReq)
        {
            salesOrderItemReq = SalesTable::createSalesTable_ItemReqWhenMFSFeatureEnabled(_currencyCode, projTableLoc);
        }
        
        return salesOrderItemReq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesTable_ItemReqWhenMFSFeatureEnabled</Name>
				<Source><![CDATA[
    public static SalesTable createSalesTable_ItemReqWhenMFSFeatureEnabled(CustCurrencyCode _currencyCode, ProjTable _projTable)
    {
        if (_projTable.hasMultipleFundingSourcesWithItemReqMultFundSourcesFeatureEnabled())
        {
            return _projTable.createSalesTable_ItemReqMultFundingSources(_currencyCode, _projTable.getProjectDefaultInvoiceAccount(false));
        }
        else if (_projTable.validateCreateItemReqFromPOLine())
        {
            return _projTable.createSalesTable_ItemReq(_currencyCode);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static SalesTable findRecId(RecId       recId,
                                boolean     _forUpdate = false )
    {
        SalesTable salesTable;

        salesTable.selectForUpdate(_forUpdate);

        select salesTable
            where salesTable.RecId == recId;

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReturnItemNum</Name>
				<Source><![CDATA[
    static SalesTable findReturnItemNum(SalesReturnItemNum _returnItemNum, boolean _forupdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        SalesTable  salesTable;

        if (_returnItemNum)
        {
            if (_forupdate)
            {
                salesTable.selectForUpdate(_forupdate);
                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    salesTable.concurrencyModel(_concurrencyModel);
                }
            }

            salesTable.selectLocked(_forupdate);

            if (salesTable.mcrIsCallCenter())
            {
                select firstonly salesTable  where salesTable.ReturnItemNum == _returnItemNum &&
                                    salesTable.SalesType == SalesType::ReturnItem;
            }
            else
            {
                select firstonly salesTable  where salesTable.ReturnItemNum == _returnItemNum &&
                                    salesTable.ReturnStatus  != ReturnStatusHeader::None;
            }
        }

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesIdLocationSalesType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>SalesTable</c> record, depending on the specified sales ID, location, and sales type.
    /// </summary>
    /// <param name="salesId">
    /// A sales ID.
    /// </param>
    /// <param name="location">
    /// A location.
    /// </param>
    /// <param name="salesType">
    /// A sales type.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>SalesTable</c> record if found; otherwise, an empty record.
    /// </returns>
    static SalesTable findSalesIdLocationSalesType(SalesId   salesId,RetailLocationEx2  location, SalesType salesType,
                           boolean  _forUpdate = false)
    {
        SalesTable  salesTable;

        if (salesId)
        {
            salesTable.selectForUpdate (_forUpdate);
            salesTable.selectLocked    (_forUpdate);

            select firstonly salesTable
                index hint SalesIdx
                where salesTable.SalesId            == salesId
                    && salesTable.SalesType         == salesType
                    && salesTable.InventLocationId  == location;
        }

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesIdSalesType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>SalesTable</c> record, depending on the specified sales ID and sales type.
    /// </summary>
    /// <param name="salesId">
    /// A sales ID.
    /// </param>
    /// <param name="salesType">
    /// A sales type.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>SalesTable</c> record if found; otherwise, an empty record.
    /// </returns>
    static SalesTable findSalesIdSalesType(SalesId   salesId,
                                              SalesType salesType,
                                              boolean   _forUpdate = false)
    {
        SalesTable  salesTable;

        if (salesId)
        {
            salesTable.selectForUpdate(_forUpdate);
            salesTable.selectLocked(_forUpdate);

            select firstonly salesTable
                index hint SalesIdx
                where salesTable.SalesId   == salesId  &&
                      salesTable.SalesType == salesType;
        }

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtFieldId_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the extended field ID representation.
    /// </summary>
    /// <param name="_fieldId">
    /// Normal field ID to be included in the extended representation.
    /// </param>
    /// <param name="_tableId">
    /// field ID to be included in the extended representation; optional.
    /// </param>
    /// <returns>
    /// The extended field ID.
    /// </returns>
    /// <remarks>
    /// Extended field ID contains the table ID in the upper bits.
    /// If no table ID is given the field is considered as being from <c>SalesTable</c>.
    /// </remarks>
    public static FieldId getExtFieldId_BR(FieldId _fieldId,
                                           TableId _tableId = tableNum(SalesTable))
    {
        TableId internalTableId;

        switch (_tableId)
        {
            case tableNum(SalesTable):
                internalTableId = 0;
                break;

            case tableNum(SalesTable_BR):
                internalTableId = 1;
                break;

            case tableNum(SalesTableExtensionTH):
                internalTableId = 2;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ((internalTableId << 24) | _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIdFromExt_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the field ID from extended field ID representation.
    /// </summary>
    /// <param name="_fieldId">
    /// Extended field ID to retrieve normal field ID from.
    /// </param>
    /// <returns>
    /// Normal field ID.
    /// </returns>
    /// <remarks>
    /// Extended field ID contains the table ID in the upper bits.
    /// </remarks>
    public static FieldId getFieldIdFromExt_BR(FieldId _fieldId)
    {
        return (_fieldId & 0xffffff);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailChannelName</Name>
				<Source><![CDATA[
    /// <summary>
    /// For retrieving original channel name for the sales order.
    /// </summary>
    /// <returns>
    /// Channel name for the current salestable record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display RetailStoreName getRetailChannelName()
    {
        RetailChannelView    retailChannelView;
        RetailChannelTable   retailChannelTable;
        RetailStoreTable     retailStoreTable;
        RetailStoreName      storeName;

        if (this.RetailChannelTable)
        {
            retailChannelTable = RetailChannelTable::findByRecId(this.RetailChannelTable);

            if (retailChannelTable.ChannelType == RetailChannelType::RetailStore)
            {
                retailStoreTable = RetailStoreTable::findRecId(retailChannelTable.RecId);
                storeName = retailStoreTable.StoreNumber;
            }
            else
            {
                select Name from  retailChannelView
                where retailChannelView.Recid1 == this.RetailChannelTable;

                storeName = retailChannelView.Name;
            }
        }

        return storeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableIdFromExt_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID from extended field ID representation.
    /// </summary>
    /// <param name="_fieldId">
    /// Extended field ID to retrieve table ID from.
    /// </param>
    /// <returns>
    /// The table ID
    /// </returns>
    /// <remarks>
    /// Extended field ID contains the table ID in the upper bits.
    /// </remarks>
    public static TableId getTableIdFromExt_BR(FieldId _fieldId)
    {
        TableId internalTableId = (_fieldId >> 24);
        TableId tableId;

        switch (internalTableId)
        {
            case 0:
                tableId = tableNum(SalesTable);
                break;

            case 1:
                tableId = tableNum(SalesTable_BR);
                break;

            case 2:
                tableId = tableNum(SalesTableExtensionTH);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesTableData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes general sales order data.
    /// </summary>
    /// <param name = "_custTable">A customer record.</param>
    protected void initSalesTableData(CustTable _custTable)
    {
        DirPartyTable partyTable;
        
        if (_custTable.Party)
        {
            select firstonly Name, LanguageId from partyTable where partyTable.RecId == _custTable.Party;
        }

        this.CustAccount                = _custTable.AccountNum;
        this.SalesName                  = partyTable.Name;
        this.DeliveryName               = partyTable.Name;

        this.InclTax                    = _custTable.InclTax;
        this.PriceGroupId               = _custTable.PriceGroup;
        this.LineDisc                   = _custTable.LineDisc;
        this.MultiLineDisc              = _custTable.MultiLineDisc;
        this.EndDisc                    = _custTable.EndDisc;
        this.MarkupGroup                = _custTable.MarkupGroup;

        this.FreightZone                = _custTable.FreightZone;
        this.SalesGroup                 = _custTable.SalesGroup;
        this.CommissionGroup            = _custTable.CommissionGroup;

        if (this.mustUpdateInventoryLocation())
        {
            this.InventLocationId       = _custTable.InventLocation;
            this.setInventSiteId(_custTable.InventSiteId);
        }

        this.LanguageId = this.getLanguageId(_custTable);

        this.CurrencyCode               = _custTable.Currency;
        this.InvoiceAccount             = _custTable.InvoiceAccount
                                                    ? _custTable.InvoiceAccount
                                                    : _custTable.AccountNum;

        if (!TaxUpdateTaxExemptNumberFromDeliveryAddressFlight::instance().isEnabled())
        {
            this.initRegistrationNumbersFromCustTable(_custTable);
        }

        this.NumberSequenceGroup        = this.custTable_InvoiceAccount().NumberSequenceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLanguageId</Name>
				<Source><![CDATA[
    private LanguageId getLanguageId(CustTable _custTable)
    {
        LanguageId languageId;
        SalesParameters salesParameters = SalesParameters::find();

        if (_custTable.InvoiceAccount && salesParameters.DefaultLanguage == CustLanguageAccountType::InvoiceAccount)
        {
            languageId = CustTable::find(_custTable.InvoiceAccount).languageId();
        }
        else
        {
            languageId = _custTable.languageId();
        }

        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNameFromVATNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes name using VAT.
    /// </summary>
    /// <param name = "_custParameters">Customer parameters.</param>
    protected void initNameFromVATNumber(CustParameters _custParameters)
    {
        if (_custParameters.CustNameFromVATNum)
        {
            this.setNameUsingVATNum(this.vatNum,
                this.deliveryAddress().CountryRegionId,
                this.DeliveryName,
                _custParameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDlvModeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes Dlv mode relevant data.
    /// </summary>
    /// <param name = "_custTable">A customer record.</param>
    protected void initDlvModeData(CustTable _custTable)
    {
        this.DlvTerm                        = _custTable.DlvTerm;
        this.DlvMode                        = _custTable.DlvMode;
        this.DlvReason                      = _custTable.DlvReason;

        DlvMode dlvMode                     = DlvMode::find(_custTable.DlvMode);
        if (this.DlvMode)
        {
            this.ShipCarrierId              = dlvMode.ShipCarrierId;
            this.ShipCarrierAccountCode     = dlvMode.ShipCarrierAccountCode;
            this.ShipCarrierDlvType         = dlvMode.ShipCarrierDlvType;
            if (dlvMode.Transport)
            {
                this.Transport              = dlvMode.Transport;
            }

            // Update expedite value based on mode of delivery.
            if (RetailUpdateExpediteValueBasedOnModeOfDeliveryFlight::instance().isEnabled())
            {
                this.mcrDlvModeModified();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCashDiscData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes cash discount relevant data.
    /// </summary>
    /// <param name = "_custTable">A customer record.</param>
    protected void initCashDiscData(CustTable _custTable)
    {
        this.CashDisc = _custTable.CashDisc;
        this.CashDiscBaseDays = _custTable.CashDiscBaseDays;

        if (_custTable.CashDisc)
        {
            this.CashDiscPercent = CashDisc::find(_custTable.CashDisc).Percent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes payment relevant data.
    /// </summary>
    /// <param name = "_custTable">A customer record.</param>
    protected void initPaymentData(CustTable _custTable)
    {
        this.Payment = _custTable.PaymTermId;
        this.initFromPayment();
        if (_custTable.PaymSched)
        {
            this.PaymentSched = _custTable.PaymSched;
        }

        this.PaymMode = _custTable.PaymMode;
        this.PaymSpec = _custTable.PaymSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initContactInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes sales order contact information data.
    /// </summary>
    /// <param name = "_custTable">A customer record.</param>
    protected void initContactInformation(CustTable _custTable)
    {
        this.ContactPersonId = _custTable.ContactPersonId;

        if (_custTable.ContactPersonId)
        {
            this.initFromContactInfo();
        }
        else
        {
            this.url = _custTable.url();
            this.Email = _custTable.email();
            this.Phone = _custTable.phone();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesPool</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes sales order sales pool data.
    /// </summary>
    /// <param name = "_custTable">A customer record.</param>
    protected void initSalesPool(CustTable _custTable)
    {
        if (_custTable.SalesPoolId)
        {
            this.SalesPoolId = _custTable.SalesPoolId;
        }
        else if (!this.SalesPoolId)
        {
            this.SalesPoolId = SalesParameters::find().SalesPoolId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInterCompanyData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes sales order intercompany relevant data.
    /// </summary>
    /// <param name = "_custTable">A customer record.</param>
    protected void initInterCompanyData(CustTable _custTable)
    {
        this.InterCompanyOrder          = _custTable.interCompanyTradingRelationActive();

        if (this.InterCompanyOrder)
        {
            this.InterCompanyCompanyId  = _custTable.interCompanyTradingPartnerCompanyID();
        }

        this.InterCompanyAutoCreateOrders         = SalesTable::mustAutoCreateICOrdersForCustomer(_custTable, this.SalesType);
        this.InterCompanyDirectDelivery           = SalesTable::mustDirectDeliverICOrdersForCustomer(_custTable, this.SalesType);
        this.InterCompanyAllowIndirectCreation    = _custTable.InterCompanyAllowIndirectCreation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesTable_NO</Name>
				<Source><![CDATA[
    private void initSalesTable_NO(CustTable _custTable)
    {
        this.BankCentralBankPurposeCode = _custTable.BankCentralBankPurposeCode;
        this.BankCentralBankPurposeText = _custTable.BankCentralBankPurposeText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesTable_RU</Name>
				<Source><![CDATA[
    private void initSalesTable_RU(CustTable _custTable)
    {
        SalesTable_RU salesTableRU = this.salesTable_RU();

        if (_custTable.InventProfileType_RU || _custTable.InventProfileId_RU)
        {
            salesTableRU.InventProfileType_RU   = _custTable.InventProfileType_RU;
            salesTableRU.InventProfileId_RU     = _custTable.InventProfileId_RU;
        }

        salesTableRU.initInvoicePostingType_RU(_custTable);

        if (!this.DlvTerm)
        {
            this.DlvTerm = _custTable.DlvTerm;
        }

        this.packSalesTable_RU(salesTableRU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesTable_IN</Name>
				<Source><![CDATA[
    private void initSalesTable_IN(CustTable _custTable)
    {
        boolean isIndiaTaxParameterMarked                     = TaxParameters::checkTaxParameters_IN();
        if (isIndiaTaxParameterMarked && _custTable.isForeign())
        {
            this.CustomsExportOrder_IN  = NoYes::Yes;
        }

        this.initTaxWithholdDefaultsFromAccount(_custTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesTable_JP</Name>
				<Source><![CDATA[
    private void initSalesTable_JP(CustTable _custTable)
    {
        this.ConsTarget_JP = _custTable.ConsDay_JP != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesTable_PL</Name>
				<Source><![CDATA[
    private void initSalesTable_PL(CustTable _custTable)
    {
        this.TaxPeriodPaymentCode_PL  = _custTable.TaxPeriodPaymentCode_PL;
        this.FiscalDocType_PL         = _custTable.FiscalDocType_PL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesTable_LT</Name>
				<Source><![CDATA[
    private void initSalesTable_LT(CustTable _custTable)
    {
        this.UnitedVATInvoice_LT = _custTable.UnitedVATInvoice_LT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesTable_LT_LV</Name>
				<Source><![CDATA[
    private void initSalesTable_LT_LV(CustTable _custTable)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00005, funcName());

        this.InvoiceAutoNumbering_LT         = LtInvoiceAutoNumberingGroups::autoNumberingForSalesInvoice(this.CustAccount);
        this.PackingSlipAutoNumbering_LT     = LtInvoiceAutoNumberingGroups::autoNumberingForSalesPackingSlip(this.CustAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesTable_BR</Name>
				<Source><![CDATA[
    private void initSalesTable_BR(CustTable _custTable)
    {
        if (BrazilParameters::isEnabled())
        {
            SalesTable_BR salesTable_BR                 = this.salesTable_BR();
            salesTable_BR.CustFinalUser_BR              = _custTable.CustFinalUser_BR;
            salesTable_BR.ServiceCodeOnDlvAddress_BR    = _custTable.ServiceCodeOnDlvAddress_BR;
            salesTable_BR.FineCode_BR                   = _custTable.FineCode_BR;
            salesTable_BR.InterestCode_BR               = _custTable.InterestCode_BR;
            salesTable_BR.PresenceType                  = _custTable.PresenceType_BR;

            this.packSalesTable_BR(salesTable_BR);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMcrExtensionData</Name>
				<Source><![CDATA[
    private void initMcrExtensionData(CustTable _custTable)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            MCRCustTable mcrCustTable = _custTable.mcrCustTable();
            if (mcrCustTable.soAllocPriority
                || mcrCustTable.PostageGroupID)
            {
                MCRSalesTable mcrSalesTable = this.mcrSalesTable();

                // Default allocation priority from Customer
                mcrSalesTable.soAllocPriority = mcrCustTable.soAllocPriority;

                // If there is no postage group ID, set it to the customer group
                mcrSalesTable.PostageGroupID = mcrCustTable.PostageGroupID ? mcrCustTable.PostageGroupID : _custTable.CustGroup;
                this.SysExtensionSerializerMap::packExtensionTable(mcrSalesTable);
            }

            this.DefaultDimension = this.copyDimension(_custTable.DefaultDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesTable_W</Name>
				<Source><![CDATA[
    private void initSalesTable_W(CustTable _custTable, CustParameters _custParameters)
    {
        if (SalesTable_W::isLegalEntityInCountryRegion())
        {
            SalesTable_W salesTable_W = this.salesTable_W();

            if (_custParameters.EntryCertificateManagementEnabled_W)
                salesTable_W.EntryCertificateRequired_W = _custTable.EntryCertificateRequired_W;

            if (_custParameters.EntryCertificateIssuingEnabled_W)
                salesTable_W.IssueOwnEntryCertificate_W = _custTable.IssueOwnEntryCertificate_W;

            this.packSalesTable_W(salesTable_W);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initRebateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes rebate data.
    /// </summary>
    /// <param name = "_custTable">A customer record.</param>
    protected void initRebateData(CustTable _custTable)
    {
        this.PdsRebateProgramTMAGroup = _custTable.PdsRebateTMAGroup;
        this.PdsCustRebateGroupId     = _custTable.PdsCustRebateGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRetailSalesAffiliation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates retail sales affiliation.
    /// </summary>
    protected void createRetailSalesAffiliation()
    {
        SalesIdBase salesId = this.SalesId;

        if (RetailParameters::isRetailEnabledAndInUse() && salesId)
        {
            RetailSalesAffiliation retailSalesAffiliation;
            RetailCustAffiliation retailCustAffiliation;

            // Cleaning up any old affiliations before inserting for a new or changed customer while creating sales order.
            select retailSalesAffiliation where retailSalesAffiliation.SalesId == salesId;

            if (retailSalesAffiliation)
            {
                delete_from retailSalesAffiliation
                    where retailSalesAffiliation.SalesId == salesId;
            }

            // Set based operation such as insert_recordset while providing good performance for large data sets
            // has a higher initial cost for lower size data sets as it creates/drops temp table.  
            // recordInsertlist will give better performance for smaller sets of data (as is expected for Affiliations) and
            // still are sent over in bulk to reduce communications between the AOS and SQL.  Thus instead of using the insert_recordset
            // for this scenario we will now use recordInsertList.
            RecordInsertList retailSalesAffiliationList;
            RetailSalesAffiliation retailSalesAffiliationNew;

            retailSalesAffiliationList = new RecordInsertList(tableNum(RetailSalesAffiliation));
            while select RetailAffiliationId from retailCustAffiliation
                where retailCustAffiliation.CustAccountNum == this.CustAccount
                notExists join retailSalesAffiliation
                    where retailSalesAffiliation.SalesId == salesId
                    && retailSalesAffiliation.Affiliation == retailCustAffiliation.RetailAffiliationId
            {
                retailSalesAffiliationNew.initValue();
                retailSalesAffiliationNew.SalesId = salesId;
                retailSalesAffiliationNew.Affiliation = retailCustAffiliation.RetailAffiliationId;
                retailSalesAffiliationList.Add(retailSalesAffiliationNew);
            }

            retailSalesAffiliationList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventoryLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines whether inventory location must be updated.
    /// </summary>
    /// <returns>true if inventory location must be updated; otherwise, false.</returns>
    protected boolean mustUpdateInventoryLocation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefSalesIdReturnTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the sales return order form by using jump reference.
    /// </summary>
    /// <param name="_salesId">
    /// A <c>SalesId</c> enumeration value that specifies the sales return order.
    /// </param>
    public static void jumpRefSalesIdReturnTable(SalesId _salesId)
    {
        Args args = new Args();

        args.record(SalesTable::find(_salesId));

        new MenuFunction(menuitemDisplayStr(ReturnTableDetails), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCustomsExportOrder_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides filtered lookup functionality for the <c>CustomsExportOrder_IN</c> field.
    /// </summary>
    /// <param name="_formControl">
    /// A <c>FormStringControl</c> object.
    /// </param>
    public static void lookupCustomsExportOrder_IN(FormControl _formControl)
    {
        TaxTmpCustomsExportOrder_IN tmpCustomsExportOrder_IN = CustomsShippingBillPresenter_IN::populateTmpForlookupCustomsExportOrder_IN();

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(TaxTmpCustomsExportOrder_IN), _formControl);
        sysTableLookup.addLookupfield(fieldNum(TaxTmpCustomsExportOrder_IN, SalesId));
        sysTableLookup.addLookupfield(fieldNum(TaxTmpCustomsExportOrder_IN, SalesName));
        sysTableLookup.addLookupfield(fieldNum(TaxTmpCustomsExportOrder_IN, SalesStatus));
        sysTableLookup.addLookupfield(fieldNum(TaxTmpCustomsExportOrder_IN, CustAccount));
        sysTableLookup.parmTmpBuffer(tmpCustomsExportOrder_IN);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDispositionCodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides filtered lookup functionality for the <c>DispositionCodeId</c> field.
    /// </summary>
    /// <param name="_salesId">
    /// An extended data type that identifies a sales order.
    /// </param>
    /// <param name="_lookupCtrl">
    /// A <c>FormStringControl</c> object.
    /// </param>
    public static void lookupDispositionCodeId(
        SalesId             _salesId,
        FormStringControl   _lookupCtrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(ReturnDispositionCode), _lookupCtrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(ReturnDispositionCode));
        QueryBuildRange         queryBuildRange;

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(ReturnDispositionCode, DispositionAction));
        queryBuildRange.value(SysQuery::valueNot(DispositionAction::CreditOnly));

        if (SalesTable::find(_salesId).ReturnReplacementCreated)
        {
            queryBuildRange.value(strFmt('!%1, !%2 , !%3', DispositionAction::CreditOnly, DispositionAction::ReplaceCredit, DispositionAction::ReplaceScrap));
        }

        sysTableLookup.addLookupfield(fieldNum(ReturnDispositionCode, DispositionCodeId));
        sysTableLookup.addLookupfield(fieldNum(ReturnDispositionCode, DispositionAction));
        sysTableLookup.addLookupfield(fieldNum(ReturnDispositionCode, Description));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDispositionCodeIdNonStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides filtered lookup functionality for the <c>DispositionCodeId</c> field for non-stocked items.
    /// </summary>
    /// <param name="_salesId">
    /// An extended data type that identifies a sales order.
    /// </param>
    /// <param name="_lookupCtrl">
    /// A <c>FormStringControl</c> object.
    /// </param>
    public static void lookupDispositionCodeIdNonStocked(
        SalesId             _salesId,
        FormStringControl   _lookupCtrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(ReturnDispositionCode), _lookupCtrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(ReturnDispositionCode));
        QueryBuildRange         queryBuildRange;

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(ReturnDispositionCode, DispositionAction));
        queryBuildRange.value(SysQuery::valueNot(DispositionAction::CreditOnly));
        queryBuildRange.value(SysQuery::valueNot(DispositionAction::ReplaceCredit));
        queryBuildRange.value(SysQuery::valueNot(DispositionAction::ReplaceScrap));

        queryBuildRange.value(strFmt('!%1, !%2 , !%3', DispositionAction::CreditOnly, DispositionAction::ReplaceCredit, DispositionAction::ReplaceScrap));

        sysTableLookup.addLookupfield(fieldNum(ReturnDispositionCode, DispositionCodeId));
        sysTableLookup.addLookupfield(fieldNum(ReturnDispositionCode, DispositionAction));
        sysTableLookup.addLookupfield(fieldNum(ReturnDispositionCode, Description));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWMSReception</Name>
				<Source><![CDATA[
    static void lookupWMSReception(FormStringControl ctrl, CustAccount custAccount)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(SalesTable), ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesId));
        sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesName));
        sysTableLookup.addLookupfield(fieldNum(SalesTable, CustAccount));

        queryBuildDataSource = query.addDataSource(tableNum(SalesTable));

        if (custAccount)
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(SalesTable, CustAccount));
            queryBuildRange.value(queryValue(custAccount));
        }
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(SalesTable, SalesStatus));
        queryBuildRange.value(queryValue(SalesStatus::Backorder));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWMSReceptionRMA</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides filtered look up functionality to the ReturnItemNum field.
    /// </summary>
    /// <param name="ctrl">
    ///    The form string object.
    /// </param>
    /// <param name="_custAccount">
    ///    A CustTable table buffer; optional.
    /// </param>
    /// <remarks>
    ///    Look up Return orders.
    /// </remarks>
    static void lookupWMSReceptionRMA(FormStringControl ctrl, CustAccount _custAccount = '')
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(SalesTable), ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        ListEnumerator listEnumerator;
        List list = new List(Types::Int64);
        sysTableLookup.addLookupfield(fieldNum(SalesTable, ReturnItemNum));
        sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesId));
        sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesName));
        sysTableLookup.addLookupfield(fieldNum(SalesTable, CustAccount));

        queryBuildDataSource = query.addDataSource(tableNum(SalesTable));

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            list = List::create(SalesTable::mcrFindRefundChecksNotApprovedOrDeclined());
            listEnumerator = list.getEnumerator();
            listEnumerator.reset();
            // Also show sales tables with refund checks that have not been approved nor declined yet.
            while (listEnumerator.moveNext())
            {
                queryBuildDataSource.addRange(fieldNum(SalesTable, RecId)).value(queryValue(listEnumerator.current()));
            }
        }
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(SalesTable, ReturnStatus));
        queryBuildRange.value(strFmt("%1, %2", SysQuery::value(ReturnStatusHeader::Created), SysQuery::value(ReturnStatusHeader::Open)));

        if (_custAccount)
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(SalesTable, CustAccount));
            queryBuildRange.value(SysQuery::value(_custAccount));
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCalculatePostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines and sets the posting profile of the passed in sales order.
    /// </summary>
    /// <param name = "_salesTable">
    /// The <c>SalesTable</c> record for which to set the posting profile.
    /// </param>
    /// <param name = "_prePay">
    /// true if payment method is pre pay; otherwise, false.
    /// </param>
    /// <returns>
    /// The posting profile that the sales order should be updated with.
    /// </returns>
    public static PostingProfile mcrCalculatePostingProfile(SalesTable _salesTable, boolean _prePay)
    {
        MCRCustPaymTable            mcrCustPaymTable, mcrCustPaymTable_Count;
        CustParameters              custParameters = CustParameters::find();
        MCROrderParameters          mcrOrderParameters = MCROrderParameters::find();
        MCRContinuityCustHeader     mcrContinuityCustHeader;
        PostingProfile              newProfile = _salesTable.PostingProfile;

        if (_salesTable.PostingProfile == custParameters.PostingProfile
            || _salesTable.PostingProfile == custParameters.PrepaymentPostingProfile
            || _salesTable.PostingProfile == mcrOrderParameters.ContinuityPaymentProfile)
        {
            select firstonly RecId from mcrContinuityCustHeader
                where mcrContinuityCustHeader.SalesId == _salesTable.SalesId
                    && mcrContinuityCustHeader.BillUpFront;

            // If the order has a bill up front parent set the
            //posting profile to the continuity posting profile.
            if (mcrContinuityCustHeader.RecId)
            {
                newProfile = mcrOrderParameters.ContinuityPaymentProfile;
            }
            else
            {
                // If this order has 1 or more payments and none of them are not prepay
                // use the prepayment posting profile.
                select count(Amount) from mcrCustPaymTable_Count
                    where mcrCustPaymTable_Count.RefTableId == _salesTable.TableId
                        && mcrCustPaymTable_Count.RefRecId == _salesTable.RecId
                        && mcrCustPaymTable_Count.Amount > 0;

                if (mcrCustPaymTable_Count.Amount > 0)
                {
                    select firstonly RecId from mcrCustPaymTable
                        where mcrCustPaymTable.RefRecId == _salesTable.RecId
                            && mcrCustPaymTable.RefTableId == _salesTable.TableId
                            && mcrCustPaymTable.Amount > 0
                            && mcrCustPaymTable.IsPrepay == NoYes::No;

                    if (!mcrCustPaymTable.RecId || _prePay) // Pick pre payment posting profile if payment method is pre pay.
                    {
                        newProfile = custParameters.PrepaymentPostingProfile;
                    }
                    else
                    {
                        newProfile = custParameters.PostingProfile;
                    }
                }
            }
        }

        // If the order does not have a posting profile and it was not determined
        // to be continuity or prepayment, set it to general posting profile.
        if (!newProfile)
        {
            newProfile = custParameters.PostingProfile;
        }

        return newProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCalcPostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines and sets the posting profile of the passed in sales order.
    /// </summary>
    /// <param name = "_salesTable">
    /// The <c>SalesTable</c> record for which to set the posting profile.
    /// </param>
    /// <returns>
    /// The posting profile that the sales order should be updated with.
    /// </returns>
    [SysObsolete('Use SalesTable:mcrCalculatePostingProfile() instead.', false, 30\06\2018)]
    public static PostingProfile mcrCalcPostingProfile(SalesTable _salesTable)
    {
        return SalesTable::mcrCalculatePostingProfile(_salesTable, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrContinuityLineEvalResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enumeration to indicate what type of continuity
    /// order is being dealt with.
    /// </summary>
    /// <param name="_contLineEval">
    /// A <c>Container</c> holding the continuity data necessary for finding the type
    /// of the continuity.
    /// </param>
    /// <returns>
    /// The type of continuity order.
    /// </returns>
    /// <remarks>
    /// The <c>MCRContinuityLineEval</c> enumeration to indicate the type of continuity order.
    /// </remarks>
    public static MCRContinuityLineEval mcrContinuityLineEvalResult(container _contLineEval)
    {
        if (conPeek(_contLineEval, 1) != 0)
        {
            if (conPeek(_contLineEval, 2)==0 && conPeek(_contLineEval, 3) == 0)
                return MCRContinuityLineEval::PayAllNow;
            if (conPeek(_contLineEval, 2)==0 && conPeek(_contLineEval, 3)!=0)
                return MCRContinuityLineEval::PayPartNowPartSched;
            if (conPeek(_contLineEval, 2)!=0 && conPeek(_contLineEval, 3)==0)
                return MCRContinuityLineEval::PayPartNowPartSched;
            if (conPeek(_contLineEval, 2)!=0 && conPeek(_contLineEval, 3)!=0)
                return MCRContinuityLineEval::PayPartNowPartSched;
        }
        if (conPeek(_contLineEval, 2) != 0)
        {
            if (((conPeek(_contLineEval, 1)==0
                && conPeek(_contLineEval, 3)==0))
                || ((conPeek(_contLineEval, 1)==0
                && conPeek(_contLineEval, 3)!=0)))
            {
                if (conPeek(_contLineEval, 4)!=0)
                return MCRContinuityLineEval::PayPartNowPartSched;
                else
                return MCRContinuityLineEval::PayAllLater;
            }
            if (conPeek(_contLineEval, 2) != 0)
            {
                if ((conPeek(_contLineEval, 1)!=0
                && conPeek(_contLineEval, 3)== 0)
                || (conPeek(_contLineEval, 1)!=0
                && conPeek(_contLineEval, 3 != 0)))
                return MCRContinuityLineEval::PayPartNowPartSched;
            }
        }
        if (conPeek(_contLineEval, 3)!=0)
        {
            if ((conPeek(_contLineEval, 1)==0
                && conPeek(_contLineEval, 2)==0)
                || (conPeek(_contLineEval, 1)==0
                && conPeek(_contLineEval, 2)!=0))
            {
                if (conPeek(_contLineEval, 4)==0)
                    return MCRContinuityLineEval::PayAllLater;
                else
                    return MCRContinuityLineEval::PayPartNowPartSched;
            }
            if ((conPeek(_contLineEval, 1)!=0
                && conPeek(_contLineEval, 2)==0)
                || (conPeek(_contLineEval, 1)!=0
                && conPeek(_contLineEval, 2)!=0))
            {
                return MCRContinuityLineEval::PayPartNowPartSched;
            }
        }
        return MCRContinuityLineEval::Blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrEvalContOrderLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loops through all sales lines associated with this sales order and returns a
    /// container with the number if lines that are bill up fronts with no payment schedules, bill up front with
    /// payment schedules, or regular items.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>SalesId</c> of the sales order for wihich to count the continuity lines.
    /// </param>
    /// <returns>
    /// The counts of the number if lines that are bill up fronts with no payment schedules, bill up front with
    /// payment schedules, or regular items.
    /// </returns>
    public static container mcrEvalContOrderLines(SalesId _salesId)
    {
        SalesLine   salesLine;
        int         billUpFrontPaymSched = 0;
        int         billUpFrontNoPaymSched = 0;
        int         nonBillUpFront = 0;
        int         regularItemLines = 0;
        InventTable inventTable;
        MCRInventTable mcrInventTable;

        while select ItemId  from salesLine
            where  salesLine.SalesId == _salesId
            outer join RecId from inventTable
                where inventTable.ItemId == salesLine.ItemId
            outer join ContinuityScheduleId from mcrInventTable
                where mcrInventTable.InventTable == inventTable.RecId

        {
            // Is this item continuity.
            if (InventTable::mcrIsItemContinuity(salesLine.ItemId))
            {
                // If continuity item, is the attached schedule a bill up front
                // with no payment schedule.
                if (MCRContinuityScheduleHeader::isBillUPFrontWithNoPaymSched(mcrInventTable.ContinuityScheduleId))
                {
                    billUpFrontNoPaymSched += 1;
                }
                else if (MCRContinuityScheduleHeader::isBillUPFrontWithPaymSched(mcrInventTable.ContinuityScheduleId))
                {
                    billUpfrontPaymSched += 1;
                }
                else
                {
                    nonBillUpFront += 1;
                }
            }
            else
            {
                regularItemLines += 1;
            }
        }
        return[billUpFrontNoPaymSched, billUpFrontPaymSched, nonBillUpFront, regularItemLines];
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrExistCustSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an order exists for the passed customer.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer's account number for which this method determins if a sales order exists.
    /// </param>
    /// <returns>
    /// true if a sales order exists for the passed customer; otherwise, false.
    /// </returns>
    public static boolean mcrExistCustSalesOrder(AccountNum _custAccount)
    {
        SalesTable salesTable;
        if (_custAccount)
        {
            return (select firstonly RecId from salesTable
                where salesTable.CustAccount == _custAccount).RecId != 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindRefundChecksNotApprovedOrDeclined</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds refund checks that have not been approved or declined.
    /// </summary>
    /// <returns>
    /// A list of <c>SalesTable</c> records that have declined or
    ///     unapproved refund checks.
    /// </returns>
    private static container mcrFindRefundChecksNotApprovedOrDeclined()
    {
        SalesTable              salesTable;
        MCRCustPaymTable        mcrCustPaymTable;
        List                    list = new List(Types::Int64);

        //Also show sales tables with refund checks that have not been approved nor declined yet.
        while select RecId from salesTable
            where  (salesTable.ReturnStatus == ReturnStatusHeader::Created
                    || salesTable.ReturnStatus == ReturnStatusHeader::Open)
                    || salesTable.mcrOrderStopped == NoYes::Yes
            exists join mcrCustPaymTable
                where mcrCustPaymTable.RefTableId == salesTable.TableId
                    && mcrCustPaymTable.RefRecId   == salesTable.RecId
                    && mcrCustPaymTable.Status != MCRCustPaymStatus::Declined
                    && mcrCustPaymTable.CustPaymType == MCRCustPaymType::RefundCheck
        {
            list.addEnd(salesTable.RecId);
        }

        return list.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindReturnByExchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the returns sales order based on the passed in exchange order <c>SalesId</c>.
    /// </summary>
    /// <param name="_exchSalesId">
    /// The <c>SalesId</c> of the exchange order  to use in finding the sales order recrod.
    /// </param>
    /// <param name="_forUpdate">
    ///  A <c>Boolean</c> value defining whether or not the <c>SalesTable</c> record
    /// should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The sales order found by the exchange order <c>SalesId</c>.
    /// </returns>
    public static SalesTable mcrFindReturnByExchId(SalesId _exchSalesId, boolean  _forUpdate = false)
    {
        SalesTable  salesTable;

        if (_exchSalesId)
        {
            salesTable.selectForUpdate (_forUpdate);

            select firstonly salesTable
                where salesTable.ReturnReplacementId == _exchSalesId;
        }

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a sales order containing the passed <c>MCRSourceID</c>.
    /// </summary>
    /// <param name="_sourceId">
    /// The <c>MCRSourceId</c> used to find a sales order.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean that determines whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>SalesTable</c> record containing the passed <c>MCRSourceId</c> if one exists;
    /// otheriwse, an empty buffer.
    /// </returns>
    public static SalesTable mcrFindSource(MCRSourceID _sourceId, boolean  _forUpdate = false)
    {
        SalesTable      salesTable;
        MCRSalesTable   mcrSalesTable;

        if (_sourceId)
        {
            salesTable.selectForUpdate (_forUpdate);

            select firstonly salesTable
            exists join mcrSalesTable
            where mcrSalesTable.SalesTable == salesTable.RecId
            && mcrSalesTable.SourceId == _sourceId;
        }

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetOldestOutOfBalanceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the oldest sales order that is over or under paid.
    /// </summary>
    /// <param name="_status">
    /// The out of balance status for which to search.
    /// </param>
    /// <returns>
    /// The date that the oldest sales order that is over or under paid was created.
    /// </returns>
    static TransDate mcrGetOldestOutOfBalanceDate(MCRPaymOutOfBalance _status)
    {
        SalesTable              salesTable;
        MCRSalesTable           mcrSalesTable;
        TransDate               dateCreated=dateNull();

        select firstonly CreatedDateTime, RecId from salesTable
            order by CreatedDateTime
            where salesTable.SalesStatus == SalesStatus::Backorder
            exists join mcrSalesTable
            where mcrSalesTable.SalesTable == salesTable.RecId
                && mcrSalesTable.PaymOutOfBalance == _status;

        if (salesTable.RecId)
        {
            dateCreated = DateTimeUtil::date(salesTable.CreatedDateTime);
        }

        return dateCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInsertFraudHold</Name>
				<Source><![CDATA[
    private static void mcrInsertFraudHold(SalesId salesId, MCRHoldCodeComment _mcrHoldCodeComment)
    {
        MCRHoldCodeTrans    mcrHoldCodeTrans;

        ttsbegin;
        mcrHoldCodeTrans.InventRefId = salesId;
        mcrHoldCodeTrans.mcrHoldCode = MCROrderParameters::find().mcrFraudManualHoldCode;
        mcrHoldCodeTrans.mcrHoldCodeComment = _mcrHoldCodeComment;

        if (mcrHoldCodeTrans.validateWrite())
        {
            mcrHoldCodeTrans.insert();
        }
        else
        {
            throw error("@SYS104318");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrderEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes an event for changing the delivery address, FTC exemption status, order expedite value or on order creation.
    /// </summary>
    /// <param name = "_salesTableOrig">
    /// The original sales order which is changed.
    /// </param>
    protected void insertOrderEvent(SalesTable _salesTableOrig)
    {
        MCROrderEventTable      mcrOrderEventTable;

        // On-Update and delete events go in here

        // Must check salesTable_Orig (and not salesTable),
        // because this method is called after the 'do'
        // method (doInsert or doUpdate) call in either
        // insert or update.
        using (var nestedActivityContext = SalesTable::instrumentationLogger().salesOrderActivities().mcrInsert(this))
        {
            if (_salesTableOrig.RecId)
            {
                SalesTable salesTableExist = SalesTable::findRecId(this.RecId);
                // If the order still exists, create an update event
                if (salesTableExist.RecId)
                {
                    // Write an event for modifying the sales order
                    if (this.SalesType == SalesType::ReturnItem)
                    {
                        mcrOrderEventTable.insertSalesIdEventType(this.SalesId, MCROrderEventType::ModifyReturnOrder);
                    }
                    else
                    {
                        if (this.SalesStatus == SalesStatus::Canceled)
                        {
                            mcrOrderEventTable.insertSalesIdEventType(this.SalesId, MCROrderEventType::CancelSalesOrder);
                        }
                        else
                        {
                            mcrOrderEventTable.insertSalesIdEventType(this.SalesId, MCROrderEventType::ModifySalesOrder);
                        }
                    }
                }
                // If not write an event for deleting the sales order
                else
                {
                    mcrOrderEventTable.insertSalesIdEventType(_salesTableOrig.SalesId, MCROrderEventType::DeleteSalesOrder);
                }
            }
            else
            // On-Insert only type order events go in here
            {
                // Write Order event for creating a sales order
                if (this.SalesType == SalesType::ReturnItem)
                {
                    mcrOrderEventTable.insertFromSalesTable(this, MCROrderEventType::ReturnCreated);
                }
                else
                {
                    mcrOrderEventTable.insertFromSalesTable(this, MCROrderEventType::CreateSalesOrder);
                }
            }
        }
        // Events appropriate for both insert and update should go below.
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsOrderContinuityParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>SalesTable</c> record, found by the passed sales ID,
    /// is a continuity order parent.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>SalesId</c> of the sales order for which this method determins if it is a
    /// continuity order parent.
    /// </param>
    /// <returns>
    /// True if the sales order containing the passed <c>SalesId</c> is a continuity order
    /// parent; otherwise, false.
    /// </returns>
    public static boolean mcrIsOrderContinuityParent(SalesId _salesId)
    {
        if (SalesTable::find(_salesId, false).mcrSalesTable().ContinuityOrder)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Passes records to the <c>SalesTable</c> menu function based on the passed record and string.
    /// </summary>
    /// <param name="_record">
    /// The record to be passed to the <c>SalesTable</c> menu function.
    /// </param>
    /// <param name="_customerServiceParam">
    /// Thestring parameter for the customer service form.
    /// </param>
    /// <param name="_caller">
    /// The calling object; optional.
    /// </param>
    /// <returns>
    /// The returned value from the <c>SalesTable</c> menu function.
    /// </returns>
    public static str mcrJumpRef(Common _record, MCRCustomerServiceParam _customerServiceParam, Object _caller = null)
    {
        Args                    args;
        FormRun                 formRun;
        str                     rv;
        MCRSalesTableConfigure  salesTableConfigure = new MCRSalesTableConfigure();

        args = new Args();
        args.parmEnum(NoYes::Yes);
        args.record(_record);
        salesTableConfigure.parmCustomerServiceParam(_customerServiceParam);
        args.parmObject(salesTableConfigure);
        args.caller(_caller);
        formRun = new MenuFunction(menuitemDisplayStr(salesTable), MenuItemType::Display).create(args);
        formRun.run();
        formRun.wait();

        rv = args.parm();
        return rv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrlookupByInvoiceAccountInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// looks up all sales orders that have the passed customer invoice account and are related to
    /// the customer invoice journal with the passed invoice ID.
    /// </summary>
    /// <param name="_callingControl">
    /// The calling form control.
    /// </param>
    /// <param name="_custInvoiceAccount">
    /// The customer invoice account to search for.
    /// </param>
    /// <param name="_invoiceId">
    /// The invoice number to search for.
    /// </param>
    public static void mcrlookupByInvoiceAccountInvoiceId(FormControl         _callingControl,
                                                        CustInvoiceAccount    _custInvoiceAccount,
                                                        InvoiceId             _invoiceId)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    qbdsSalesTable;
        QueryBuildDataSource    qbdsCustInvoiceJour;

        sysTableLookup = SysTableLookup::newParameters(tableNum(SalesTable), _callingControl);
        sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesId));
        sysTableLookup.addLookupfield(fieldNum(SalesTable, CustAccount));
        sysTableLookup.addLookupfield(fieldNum(SalesTable, InvoiceAccount));
        sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesStatus));

        query = new Query();
        qbdsSalesTable = query.addDataSource(tableNum(SalesTable));

        if (_custInvoiceAccount)
        {
            qbdsSalesTable.addRange(fieldNum(SalesTable, InvoiceAccount))
                .value(SysQuery::value(_custInvoiceAccount));
        }

        // Sort by sales ID descending.
        qbdsSalesTable.addSortField(fieldNum(SalesTable, SalesId), SortOrder::Descending);

        if (_invoiceId)
        {
            qbdsCustInvoiceJour = qbdsSalesTable.addDataSource(tableNum(CustInvoiceJour));
            qbdsCustInvoiceJour.relations(true);
            qbdsCustInvoiceJour.addRange(fieldNum(CustInvoiceJour, InvoiceId))
                .value(SysQuery::value(_invoiceId));
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrlookupInWarehouseOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up sales orders that are no picked or in warehouse status.
    /// </summary>
    /// <param name="ctrl">
    /// The form string control.
    /// </param>
    public static void mcrlookupInWarehouseOrders(FormStringControl ctrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(SalesTable), ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesId));
        sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesName));
        sysTableLookup.addLookupfield(fieldNum(SalesTable, CustAccount));

        queryBuildDataSource = query.addDataSource(tableNum(SalesTable));
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(SalesTable, SalesStatus));
        queryBuildRange.value(queryValue(SalesStatus::Backorder));
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(SalesTable, mcrOrderStopped));
        queryBuildRange.value(queryValue(NoYes::No));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrUnReserveOrderLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Un-reserves all of the sales order lines for the <c>SalesId</c> passed.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>SalesId</c> for which to un-reserve any sales order lines that have been reserved.
    /// </param>
    public static void mcrUnReserveOrderLines(SalesId _salesId)
    {
        SalesLine           salesLine;
        InventTrans         inventTrans;
        InventDim           inventDim;
        InventTransOrigin   inventTransOrigin;

        // Get all of the lines which are reserved and un-reserve them.
        while select salesLine
            where salesLine.SalesId == _salesId
            join inventTrans
            exists join inventTransOrigin
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                && inventTransOrigin.InventTransId == salesLine.InventTransId
                && inventTrans.StatusIssue == StatusIssue::ReservPhysical
        {
            MCRAutoallocatebo::unreserve(salesLine, inventTrans, inventDim, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrUpdateContinuityPayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the continuity payment records when the
    /// invoice account is modified.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales order record for which the continuity payment records need to be updated.
    /// </param>
    public static void mcrUpdateContinuityPayments(SalesTable _salesTable)
    {
        MCRCustPaymTable            mcrCustPaymTableHeader;
        MCRContinuityCustHeader     mcrContinuityCustHeader;
        CustPaymSchedLine           custPaymSchedLine;
        CustPaymSched               custPaymSched;
        MCRCustPaymTable            mcrCustPaymTable;

        // For all header records related to this order we need to update the assocated continuity
        //  payment records.
        while select forupdate mcrContinuityCustHeader
            where mcrContinuityCustHeader.SalesId == _salesTable.SalesId
        {
            // Find the payment associated with the continuity header.
            select forupdate mcrCustPaymTableHeader
                where mcrCustPaymTableHeader.RefRecId == mcrContinuityCustHeader.RecId
                    && mcrCustPaymTableHeader.RefTableId == mcrContinuityCustHeader.TableId
                    && mcrCustPaymTableHeader.CustAccount != _salesTable.InvoiceAccount;

            // If a header payment was found update the account.
            if (mcrCustPaymTableHeader)
            {
                mcrCustPaymTableHeader.CustAccount = _salesTable.InvoiceAccount;
                ttsbegin;
                if (mcrCustPaymTableHeader.validateWrite())
                {
                    mcrCustPaymTableHeader.update();
                }
                else
                {
                    throw error("@SYS104318");
                }
                ttscommit;
            }
            // Regardless of whether or not a header payment record was found, need to make
            //  sure that a related payment schedule is correct.
            select firstonly RecId from custPaymSched
                where custPaymSched.ExtTableId == mcrContinuityCustHeader.TableId
                    && custPaymSched.ExtRecId == mcrContinuityCustHeader.RecId;

            // If there is a payment schedule related to the order update the record.
            if (custPaymSched.RecId)
            {
                // Find the lines associated with the payment schedule.
                while select RecId, TableId from custPaymSchedLine
                    where custPaymSchedLine.ParentRecID == custPaymSched.RecId
                    join forupdate mcrCustPaymTable
                    where mcrCustPaymTable.RefRecId == custPaymSchedLine.RecId
                        && mcrCustPaymTable.RefTableId == custPaymSchedLine.TableId
                        && mcrCustPaymTable.CustAccount != _salesTable.InvoiceAccount
                {
                    if (mcrCustPaymTable)
                    {
                        mcrCustPaymTable.CustAccount = _salesTable.InvoiceAccount;
                        ttsbegin;
                        if ( mcrCustPaymTable.validateWrite())
                        {
                            mcrCustPaymTable.update();
                        }
                        else
                        {
                            throw error("@SYS104318");
                        }
                        ttscommit;
                    }
                }
            }

            ttsbegin;
            mcrContinuityCustHeader.CustAccount = _salesTable.InvoiceAccount;
            if (mcrContinuityCustHeader.validateWrite())
            {
                mcrContinuityCustHeader.update();
            }
            else
            {
                throw error("@SYS104318");
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrUpdateSalesStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status and order stopped flag of the passed <c>SalesTable</c> record.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record for which this methods updates status and stopped order flag.
    /// </param>
    /// <param name="_status">
    /// The status to be set on the passed sales order.
    /// </param>
    /// <param name="_mcrOrderStopped">
    /// The <c>NoYes</c> enumeration that determines whether the order is stopped; optional.
    /// </param>
    public static void mcrUpdateSalesStatus(SalesTable _salesTable,
                                            SalesStatus _status,
                                            MCROrderStopped _mcrOrderStopped = NoYes::No)
    {
        if (_salesTable)
        {
            ttsbegin;
            _salesTable.selectForUpdate(true);
            _salesTable.reread();
            _salesTable.SalesStatus = _status;
            _salesTable.mcrOrderStopped = _mcrOrderStopped;
            _salesTable.DocumentStatus = _mcrOrderStopped ? DocumentStatus::None : DocumentStatus::Confirmation;
            _salesTable.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrUserName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the user name based on the <c>UserId</c>.
    /// </summary>
    /// <returns>
    /// The user name.
    /// </returns>
    public static UserName mcrUserName()
    {
        UserInfo userInfo;

        select firstonly Name, Id from userInfo
            where userInfo.Id == curUserId();

        return userInfo.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>meetsFulfilmentRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the Sales Order is fulfilled or not.
    /// </summary>
    /// <param name="_salesId">
    /// The identifier of the Sales Order to check.
    /// </param>
    /// <returns>
    /// True if the Sales Order is fulfilled or doesn't have the fulfillment type, false otherwise.
    /// </returns>
    public static boolean meetsFulfilmentRate(SalesId _salesId)
    {
        return WHSFulfillmentRateValidator::checkFulfillmentRate(SalesTable::find(_salesId), ErrorTolerance::Warning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptConvertCurrencyCode</Name>
				<Source><![CDATA[
    static container promptConvertCurrencyCode(SalesTable _salesTable = null)
    {
        DialogButton            dialogButton;
        if (!isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
        {
            dialogButton = Box::okCancel("@SYS54755", DialogButton::Ok);

            if (dialogButton == DialogButton::Ok)
            {
                return [NoYes::Yes, TradeCurencyConversion::ExchRate];
            }

            return [NoYes::No, TradeCurencyConversion::ExchRate];
        }

        return TradeCurrencyConversionPrompt::newFromParm(_salesTable,
                                                          _salesTable.SalesId,
                                                          _salesTable.priceDiscChangePolicyExistOnLine()
                                                          ).promptConvertCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCopyDeliveryAddress</Name>
				<Source><![CDATA[
    static DialogButton  promptCopyDeliveryAddress()
    {
        return Box::yesYesAllNoCancel("@SYS78472", DialogButton::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCopyThirdPartyBillingAddress</Name>
				<Source><![CDATA[
    static DialogButton  promptCopyThirdPartyBillingAddress()
    {
        return Box::yesNo("@SYS119160", DialogButton::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnUpdatedHeaderStatus</Name>
				<Source><![CDATA[
    static void returnUpdatedHeaderStatus(SalesId _salesId, DocumentStatus _documentStatus = DocumentStatus::None)
    {
        SalesLine                   salesLine;
        SalesTable                  salesTable;
        SalesTableType_ReturnItem   salesTableType_ReturnItem;

        switch (_documentStatus)
        {
            case DocumentStatus::PackingSlip :
                select firstonly RecId from salesLine where salesLine.SalesId       == _salesId &&
                                                    (salesLine.ReturnStatus == ReturnStatusLine::Received   ||
                                                     salesLine.ReturnStatus == ReturnStatusLine::Registered);

                if (salesLine.RecId)
                {
                    ttsbegin;
                    salesTable = SalesTable::find(_salesId, true);
                    salesTable.ReturnStatus = ReturnStatusHeader::Open;
                    salesTable.update();
                    ttscommit;
                }
                break;

            case DocumentStatus::Invoice :
            case DocumentStatus::Facture_RU  :

                select firstonly RecId from salesLine where salesLine.SalesId       == _salesId &&
                                                    (salesLine.ReturnStatus == ReturnStatusLine::Awaiting   ||
                                                     salesLine.ReturnStatus == ReturnStatusLine::None       ||
                                                     salesLine.ReturnStatus == ReturnStatusLine::Quarantine ||
                                                     salesLine.ReturnStatus == ReturnStatusLine::Received   ||
                                                     salesLine.ReturnStatus == ReturnStatusLine::Registered);

                if (!salesLine.RecId)
                {
                    ttsbegin;
                    salesTable = SalesTable::find(_salesId, true);
                    salesTable.ReturnStatus = ReturnStatusHeader::Closed;
                    salesTable.update();
                    ttscommit;
                }
                if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
                {
                    // Check exchange holds to see if they can be released.
                    if (!salesTable)
                    {
                        salesTable = SalesTable::find(_salesId);
                    }

                    if (salesTable.ReturnReplacementId)
                    {
                        salesTableType_ReturnItem = SalesTableType::construct(salesTable);
                        salesTableType_ReturnItem.mcrUpdateExchangeReturnHold();
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnUpdateReplacement</Name>
				<Source><![CDATA[
    public static void returnUpdateReplacement(ReturnItemNum _returnItemNum, SalesId _replacementSalesId)
    {
        SalesTable returnOrder;

        ttsbegin;
        returnOrder = SalesTable::findReturnItemNum(_returnItemNum,true);
        returnOrder.ReturnReplacementCreated    = NoYes::Yes;
        returnOrder.ReturnReplacementId         = _replacementSalesId;
        returnOrder.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnValidateReturnItemNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the input to the return order field.
    /// </summary>
    /// <param name="_returnItemNum">
    /// A <c>ReturnItemNum</c> type.
    /// </param>
    /// <returns>
    /// true if the return order in question exists; otherwise, false.
    /// </returns>
    static boolean returnValidateReturnItemNum(ReturnItemNum _returnItemNum)
    {
        boolean ret = true;
        SalesTable salesTable = SalesTable::findReturnItemNum(strLTrim(_returnItemNum));

        if (_returnItemNum && !salesTable.RecId)
        {
            //Return order %1 doesn't exists
            ret = checkFailed(strFmt("@SYS115108", _returnItemNum));
        }

        if (ret)
        {
            if (salesTable.ReturnStatus   == ReturnStatusHeader::Created
               || salesTable.ReturnStatus == ReturnStatusHeader::Open
               || SalesTable::mustValidationForOtherReturnStatus())
            {
                ret = true;
            }
            else
            {
                //Only Return orders with status %1 or %2 are legal input.
                ret = checkFailed(strFmt("@SYS123163", ReturnStatusHeader::Created, ReturnStatusHeader::Open));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidationForOtherReturnStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Must validate for other return status.
    /// </summary>
    /// <returns>True or false.</returns>
    protected static boolean mustValidationForOtherReturnStatus()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesOrderReleasedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the released status for a sales order.
    /// </summary>
    /// <param name="_salesId">
    /// The sales Id of the sales order to be updated.
    /// </param>
    public static void setSalesOrderReleasedStatus(SalesId _salesId)
    {
        WHSSetSalesOrderReleasedStatusParameters currentParameters = WHSSetSalesOrderReleasedStatusParameters::current();
        
        if (currentParameters)
        {
            SalesTable::setSalesOrderReleasedStatusFromParameters(currentParameters);
        }
        else
        {
            using (var defaultParameters = WHSSetSalesOrderReleasedStatusParameters::newSales(_salesId))
            {
                SalesTable::setSalesOrderReleasedStatusFromParameters(defaultParameters);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesOrderReleasedStatusFromParameters</Name>
				<Source><![CDATA[
    private static void setSalesOrderReleasedStatusFromParameters(WHSSetSalesOrderReleasedStatusParameters _parameters)
    {
        WHSSalesOrderReleasedStatusUpdater salesOrderReleasedStatusUpdater = WHSSalesOrderReleasedStatusUpdater::newFromParameters(_parameters);
        salesOrderReleasedStatusUpdater.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesOrderReleasedStatusFromParametersDeferred</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void setSalesOrderReleasedStatusFromParametersDeferred(WHSSetSalesOrderReleasedStatusParameters _parameters)
    {
        Debug::assert(_parameters != null);

        if (appl.ttsLevel())
        {
            WHSSalesOrderReleasedStatusUpdater::deferUpdate(_parameters);
        }
        else
        {
            SalesTable::setSalesOrderReleasedStatusFromParameters(_parameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTableReleaseStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the release status <c>SalesTable</c> records.
    /// </summary>
    /// <param name ="_salesId">
    /// The <c>SalesId</c> of the sales order to be updated.
    /// </param>
    /// <param name ="_calculatedReleaseStatus">
    /// The release status value to set.
    /// </param>
    [SysObsolete('Please use the class WHSSalesOrderReleasedStatusUpdater instead.', false, 30\06\2018)]
    protected void updateSalesTableReleaseStatus(SalesId _salesId, WHSReleaseStatus _calculatedReleaseStatus)
    {
        SalesTable salesTable;

        salesTable.skipDataMethods(true);
        update_recordSet salesTable
            setting ReleaseStatus = _calculatedReleaseStatus
            where salesTable.SalesId == _salesId
                && salesTable.ReleaseStatus != _calculatedReleaseStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipCarrierPostPickup</Name>
				<Source><![CDATA[
    static void shipCarrierPostPickup(
        SalesTable          _salesTable,
        DocumentStatus      _documentStatus)
    {
        SalesFormLetter     salesFormLetter;

        if (_documentStatus != DocumentStatus::PackingSlip && _documentStatus != DocumentStatus::Invoice
            && _documentStatus != DocumentStatus::Facture_RU)
        {
            return;
        }

        salesFormLetter = SalesFormLetter::construct(_documentStatus);

        salesFormLetter.allowEmptyTable(salesFormLetter.initAllowEmptyTable(true));

        salesFormLetter.transDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        salesFormLetter.update(_salesTable, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), SalesUpdate::All, AccountOrder::None, false, true);

        salesFormLetter.runShipCarrier();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static str  txtNotExist()
    {
        return "@SYS15067";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDlvModeFromCarrierService</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates delivery mode on sales order and optionally on related sales lines.
    /// </summary>
    /// <param name="_salesId">
    ///   The sales order ID.
    /// </param>
    /// <param name="_carrierCode">
    ///   The carrier code.
    /// </param>
    /// <param name="_carrierServiceCode">
    ///   The carrier service code.
    /// </param>
    /// <param name="_updateLines">
    ///   true if sales lines should be updated; otherwise false; optional.
    /// </param>
    /// <remarks>
    ///   The delivery mode is assigned based on carrier code and carrier service.
    /// </remarks>
    public static void updateDlvModeFromCarrierService(
        SalesId                 _salesId,
        TMSCarrierCode          _carrierCode,
        TMSCarrierServiceCode   _carrierServiceCode,
        boolean                 _updateLines = false)
    {
        DlvModeId   dlvModeId = TMSCarrierService::findDlvModeId(_carrierCode, _carrierServiceCode);

        if (dlvModeId)
        {
            ttsbegin;

            IntrastatTransport transport = DlvMode::find(dlvModeId).Transport;

            SalesTable salesTable;
            update_recordset salesTable
                setting DlvMode = dlvModeId, Transport = transport
                where salesTable.SalesId == _salesId;

            if (_updateLines)
            {
                SalesLine salesLine;
                salesLine.skipDataMethods(true);
                update_recordset salesLine
                    setting DlvMode = dlvModeId, Transport = transport
                    where salesLine.SalesId == _salesId;
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailPackRetailSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the retail sales table extension table into <c>RetailSalesTable</c> field.
    /// </summary>
    /// <param name="_retailSalesTable">
    /// Extension table to be packed.
    /// </param>
    public void retailPackRetailSalesTable(RetailSalesTable _retailSalesTable)
    {
        _retailSalesTable.SalesTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_retailSalesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalWeightAndVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total weight and volume aggregated over all sales order lines.
    /// </summary>
    /// <returns>
    /// Container with two elements: total wieght and total volume.
    /// </returns>
    public container totalWeightAndVolume()
    {
        Volume      totalVolume;
        Weight      totalWeight;
        SalesLine   salesLine;

        while select ItemId, QtyOrdered, PdsCWQty from salesLine
            where salesLine.SalesId == this.SalesId
        {
            totalWeight += salesLine.tmsWeight();
            totalVolume += salesLine.tmsVolume();
        }

        return [totalWeight, totalVolume];
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocuRefOnInsert</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(DocuRefExtension), delegatestr(DocuRefExtension, OnInsert))]
    static void DocuRefOnInsert(DocuRef _docuRef, RecId _interCompanyFromRecId)
    {
        if (_docuRef.RefTableId == tablenum(SalesTable))
        {
            changecompany(_docuRef.RefCompanyId)
            {
                _docuRef.Party              = CustTable::find(SalesTable::findRecId(_docuRef.RefRecId).CustAccount).Party;
                _docuRef.Author             = DirPersonUser::current().PersonParty;
                _docuRef.ActualCompanyId    = curext();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesWithoutRefrence_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any lines don't have original invoice.
    /// </summary>
    /// <returns>
    /// true if any lines don't have original invoice; otherwise, false.
    /// </returns>
    public boolean hasLinesWithoutRefrence_MY()
    {
        SalesLine           salesLine;
        SalesLine_W         salesLine_W;

        select firstOnly salesLine
            where salesLine.SalesId             == this.SalesId
            notexists join salesLine_W
            where salesLine_W.SalesLine         == salesLine.RecId
               && salesLine_W.RefInvoiceId_MY   != "";
        if (salesLine)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesWithRefrence_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any lines have original invoice.
    /// </summary>
    /// <returns>
    /// true if any lines have original invoice; otherwise, false.
    /// </returns>
    public boolean hasLinesWithRefrence_MY()
    {
        SalesLine           salesLine;
        SalesLine_W         salesLine_W;

        select firstOnly salesLine
            where salesLine.SalesId             == this.SalesId
            exists join salesLine_W
            where salesLine_W.SalesLine         == salesLine.RecId
               && salesLine_W.RefInvoiceId_MY   != "";
        if (salesLine)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExcisable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks to see if any of the lines associated with the current header is a excise type.
    /// </summary>
    /// <returns>
    ///     True, if at least one line is of excise type.
    /// </returns>
    public boolean isExcisable_IN()
    {
        SalesLine                                       salesLine;
        TaxOnItem                                       taxOnItem;
        TaxTable                                        taxTable;
        TransitDocumentTransTaxInfoRelation_IN          relation;
        TransTaxInformation                             transTaxInformation;

        select firstOnly RecId, SalesId, SalesQty from salesLine
            where salesLine.SalesId == this.SalesId
                && salesLine.SalesType == SalesType::Sales
                && salesLine.SalesQty > 0
            exists join relation
                where relation.TransactionTableId == salesLine.TableId
                    && relation.TransactionRecId == salesLine.RecId
            exists join transTaxInformation
                where transTaxInformation.RecId == relation.TransTaxInformationRecId
                    && transTaxInformation.ExciseType == ExciseType_IN::Manufacturer
            exists join taxOnItem
                where taxOnItem.TaxItemGroup == salesLine.TaxItemGroup
            exists join taxTable
                where taxTable.TaxCode == taxOnItem.TaxCode
                    && taxTable.TaxType_IN == TaxType_IN::Excise;

        return salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDiscAmountForReturns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the total discount for return order.
    /// </summary>
    public AmountCur calcDiscAmountForReturns()
    {
        SalesLine               salesLine;
        CustInvoiceJour         custInvoiceJour;
        CustInvoiceTrans        custInvoiceTrans;
        Amount                  totalDiscount = 0;

        while select LineAmount from salesLine
            where salesLine.SalesId == this.SalesId
            join RecId from custInvoiceTrans
                where custInvoiceTrans.RecId              == salesLine.RefReturnInvoiceTrans_W
            join EndDisc, SalesBalance from custInvoiceJour
                where custInvoiceJour.SalesId             == custInvoiceTrans.SalesId
                    && custInvoiceJour.InvoiceId           == custInvoiceTrans.InvoiceId
                    && custInvoiceJour.InvoiceDate         == custInvoiceTrans.InvoiceDate
                    && custInvoiceJour.numberSequenceGroup == custInvoiceTrans.numberSequenceGroup

        {
            if (SalesTableCalcDiscAmountForReturnsFlight::instance().isEnabled())
            {
                if (custInvoiceJour.SalesBalance && salesLine.LineAmount)
                {
                    totalDiscount +=  custInvoiceJour.EndDisc / custInvoiceJour.SalesBalance * abs(salesLine.LineAmount);
                }
            }
            else
            {
                totalDiscount +=  custInvoiceJour.EndDisc / custInvoiceJour.SalesBalance * abs(salesLine.LineAmount);
            }

        }

        return totalDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SalesPurchModifiedTableExtension::newNonRecursive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrHasAllValidPayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify if a call center order has at least one payment, and that all credit card payments are already authorized.
    /// </summary>
    /// <returns>Returns true if at least one payment exists and all CC payments are authorized.</returns>
    public boolean mcrHasAllValidPayments()
    {
        MCRCustPaymTable mCRCustPaymTable;
        boolean ret = true;
        boolean hasAllPaymentsAuthorized = true;
        boolean hasAtLeastOnePayment = false;

        if (this.mcrIsCallCenter() && this.MCROrderStopped)
        {
            // loop thru all payments for the order
            while
                select RecId
                from mCRCustPaymTable
                where mCRCustPaymTable.RefRecId == this.RecId &&
                      mCRCustPaymTable.RefTableId == tableNum(SalesTable)
            {
                if (mCRCustPaymTable.CustPaymType == MCRCustPaymType::CreditCard)
                {
                    CreditCardAuthTrans creditCardAuthTrans = CreditCardAuthTrans::mcrFindValidPreApproval(mCRCustPaymTable.RecId);

                    if (! creditCardAuthTrans)
                    {
                        // If didn't find a valid authorization for the Credit card payment
                        hasAllPaymentsAuthorized = false;
                    }
                }

                // found at least one payment for the order
                hasAtLeastOnePayment = true;
            }

            ret = hasAllPaymentsAuthorized && hasAtLeastOnePayment;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditPdsBatchAttribAutoRes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether it is allowed to edit the batch attribute auto reservation field.
    /// </summary>
    /// <returns>true, if it is allowed to edit the batch attribute auto reservation field; otherwise, false.</returns>
    public boolean canEditPdsBatchAttribAutoRes()
    {
        return #PdsBatchAttribEnabled && this.Reservation == ItemReservation::Automatic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDirectDeliveryFlagHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// The direct delivery flag in the header should be set to yes if the parameter passed is direct delivery
    // and to no if the parameter is not direct delivery and no intercompany lines remain as direct delivery.
    /// </summary>
    /// <param name = "_deliveryType">The delivery type of the sales order line modified.</param>
    public void updateDirectDeliveryFlagHeader(TradeLineDlvType _deliveryType)
    {
        switch (_deliveryType)
        {
            case TradeLineDlvType::DropShip :
                this.InterCompanyDirectDelivery = true;
                break;
            case TradeLineDlvType::None :
                this.InterCompanyDirectDelivery = false;
                break;
        }

        // Updating the DirectDelivery field of the SalesTable will trigger an update to all SalesLine records belonging to the SalesTable.
        // Since the SalesLine calling this method might not have been updated yet, this needs to be blocked.
        this.SkipLineUpdate = NoYes::Yes;
        this.update();
        this.SkipLineUpdate = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAutoCreateICOrdersForCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether intercompany chain should be automatically created, based on the customer record.
    /// </summary>
    /// <param name = "_custTable">The customer.</param>
    /// <param name = "_salesType">The sales type.</param>
    /// <returns>True if intercompany chain should be automatically created, otherwhise false.</returns>
    public static boolean mustAutoCreateICOrdersForCustomer(CustTable _custTable, SalesType _salesType)
    {
        if (_salesType == SalesType::ItemReq
        ||  _salesType == SalesType::ReturnItem)
        {
            return  false;
        }

        return _custTable.InterCompanyAutoCreateOrders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSalesTotalDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total sales discount for a sales order
    /// </summary>
    /// <param name = "_salesId">The sales id of the sales order</param>
    /// <returns>
    /// The total sales discount for the sales order
    /// </returns>
    public static AmountCur calcSalesTotalDisc(SalesId  _salesId)
    {
        SalesLine              salesLine;
        AmountCur              balanceEndDisc;

        SalesTableQueryBuilder salesTableQueryBuilder = SalesTableQueryBuilder_calcSalesTotalDisc::newFromParameters(_salesId, salesLine);
        SysDaQueryObject salesLineQueryObject = salesTableQueryBuilder.buildQueryObject();

        SysDaSearchObject searchObject = new SysDaSearchObject(salesLineQueryObject);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();

        while (searchStatement.next(searchObject))
        {
            balanceEndDisc += salesLine.LineAmount;
        }
        
        return balanceEndDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDirectDeliverICOrdersForCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether created intercompany chain should be direct delivery, based on the customer record.
    /// </summary>
    /// <param name = "_custTable">The customer.</param>
    /// <param name = "_salesType">The sales type.</param>
    /// <returns>True if created intercompany chain should be direct delivery; otherwhise false.</returns>
    public static boolean mustDirectDeliverICOrdersForCustomer(CustTable _custTable, SalesType _salesType)
    {
        if (_salesType == SalesType::ItemReq
        ||  _salesType == SalesType::ReturnItem)
        {
            return  false;
        }

        return _custTable.InterCompanyDirectDelivery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymSchedTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the total of the <c>CustPaymSched</c> against the total of
    /// <c>SalesTable</c> document
    /// </summary>
    /// <param name="_custPaymSched">
    /// <c>CustPaymSched</c> to check against, if null retreives the <c>CustPaymSched</c>
    /// related to this <c>SalesTable</c> record
    /// </param>
    /// <returns>
    /// true if the totals match or if no <c>CustPaymSched</c> is found; otherwise false
    /// </returns>
    public boolean validatePaymSchedTotals(CustPaymSched _custPaymSched = null)
    {
        AmountCur totalAmount;
        boolean valid = true;

        CustPaymSched custPaymSched = (_custPaymSched ? _custPaymSched : CustPaymSched::find(this.TableId, this.RecId));

        if (custPaymSched)
        {
            SalesTotals salesTotals = SalesTotals::construct(this);

            salesTotals.calc();

            //<GIN>
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                if (TaxWithholdEnableIncludeTCSInTotalFeatureToggle::includeTCSInInvoiceAmount(salesTotals.taxWithhold_IN()))
                {
                    totalAmount = salesTotals.totalAmount() + CurrencyExchange::roundWithRuleType(
                        salesTotals.parmTaxWithholdAmount_IN(),
                        this.CurrencyCode,
                        CurrencyRoundingRuleType::SalesOrder);
                }
                else
                {
                    totalAmount = salesTotals.totalAmount() + salesTotals.parmTaxWithholdAmount_IN();
                }
            }
            //</GIN>
            //<GBR>
            else if (BrazilParameters::isEnabled())
            {
                totalAmount = salesTotals.totalAmount() - salesTotals.totalTaxAmountRetained_BR();
            }
            //<GBR>
            else
            {
                totalAmount = salesTotals.totalAmount();
            }

            if (!totalAmount)
            {
                valid = true;
            }
            else
            {
                valid = (totalAmount == custPaymSched.paymScheduleAmount());
            }
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJumpRefDisplayMenuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the display menu item name used to look up the details for the current sales order record.
    /// </summary>
    /// <returns>Name of a display menu item.</returns>
    public MenuItemName getJumpRefDisplayMenuItemName()
    {
        if (this.SalesType == SalesType::ReturnItem)
        {
            return menuitemDisplayStr(ReturnTableDetails);
        }

        return menuitemDisplayStr(SalesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrUpdatePriceOverrideOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the sales order need to be put on hold due to the price override. If any line has NeedToSubmit = true and not approved, then insert hold code, else clear hold code.
    /// </summary>
    /// <param name="_salesId">
    /// Sales order ID
    /// </param>
    static void mcrUpdatePriceOverrideOnHold(SalesId _salesId)
    {
        SalesLine           salesLine;
        MCRSalesLine        mcrSalesLine;
        MCRHoldCodeTrans    mcrHoldCodeTrans;

        // check if any line is NeedToSubmit and not approved then add price override hold code, otherwise clear price override code
        select firstonly RecId from mcrSalesLine
            join RecId from salesLine
                where mcrSalesLine.SalesLine == salesLine.RecId
                   && salesLine.SalesId == _salesId
                   && mcrSalesLine.RetailPriceOverrideWorkflowState != RetailPriceOverrideWorkflowState::None
                   && mcrSalesLine.RetailPriceOverrideWorkflowState != RetailPriceOverrideWorkflowState::Approved;

        if (mcrSalesLine)
        {
            // add price override on hold info
            mcrHoldCodeTrans.insertPriceOverrideHold(_salesId);
        }
        else
        {
            mcrHoldCodeTrans.clearPriceOverrideHold(_salesId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchTableInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesPurchTableInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchTableInterface</c> object.
    /// </returns>
    public SalesPurchTableInterface salesPurchTableInterface()
    {
        return this.salesPurchTable::salesPurchTableInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>SalesTable</c> record by the <c>SourceDocument</c>.
    /// </summary>
    /// <param name="_sourceDocumentHeader">
    /// A <c>SourceDocumentHeader</c> record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>SalesTable</c> record.
    /// </returns>
    public static SalesTable findSourceDocumentHeader(RefRecId _sourceDocumentHeader, boolean _forUpdate = false)
    {
        SalesTable    salesTable;

        salesTable.selectForUpdate(_forUpdate);

        if (_sourceDocumentHeader)
        {
            select firstonly salesTable
                where salesTable.SourceDocumentHeader == _sourceDocumentHeader;
        }

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCashAndCarryAssociatedWithSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if there is an associated retail cash and carry transaction for the sales Id.
    /// </summary>
    /// <returns>The <c>SalesId</c>.</returns>
    public static RefRecId findCashAndCarryAssociatedWithSalesId(SalesId salesId)
    {
        RetailTransactionTable retailTransactionTable;

        if (isConfigurationkeyEnabled(configurationKeyNum(RetailEodBackwardCompatibility)))
        {
            // Look for the cash and carry transaction in the transaction table if the legacy EOD key is enabled.
            select firstonly RecId from retailTransactionTable
                where retailTransactionTable.salesOrderId == salesId
                    && retailTransactionTable.type == RetailTransactionType::Sales;
        }

        return retailTransactionTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailInvoiceSkipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if invoicing skipped during invoicing of Retail cash and carry sales order.
    /// </summary>
    /// <param name = "_statementId">The <c>StatementId</c>.</param>
    /// <param name = "_salesId">The <c>SalesId</c>.</param>
    /// <returns> False, as default </returns>
    public static boolean isRetailInvoiceSkipped(RetailStatementId _statementId, SalesId _salesId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupTransOnTypeChange</Name>
				<Source><![CDATA[
    private void createMarkupTransOnTypeChange(Common _common)
    {
        MarkupTrans intercompanyMarkupTrans;
        InterCompanyMarkup  interCompanyMarkup;
        MarkupTrans salesMarkupTrans;

        using (var nestedActivityContext = SalesTable::instrumentationLogger().salesOrderActivities().createMarkupTransOnType(this))
        {
            while select forupdate salesMarkupTrans
                where salesMarkupTrans.TransRecId == _common.RecId
                    &&  salesMarkupTrans.TransTableId ==  _common.TableId
            {
                interCompanyMarkup = InterCompanyMarkup::construct(InterCompanyMarkupAction::Calc,salesMarkupTrans);
                interCompanyMarkup.run(true);
                intercompanyMarkupTrans = interCompanyMarkup.parmMarkupTrans();
                intercompanyMarkupTrans.InterCompanySkipUpdate = false;
                intercompanyMarkupTrans.doUpdate();
            }

            Markup::setMarkupKeepForIntercompany(_common);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTypeChangeFromJournal2Sales</Name>
				<Source><![CDATA[
    private boolean salesTypeChangeFromJournal2Sales(SalesTable _salesTable, SalesTable _salesTable_Orig)
    {
        if (_salesTable.SalesType == SalesType::Sales && _salesTable_Orig.SalesType == SalesType::Journal)
        {
            return _salesTable.isInterCompanyOrder();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSalesOrderBeenReleasedToWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a sales order has been fully released to warehouse or not.
    /// </summary>
    /// <returns>
    /// true if the sales order has been fully released; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean hasSalesOrderBeenReleasedToWarehouse()
    {
        return this.ReleaseStatus == WHSReleaseStatus::Released;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferTaxDefaultsFromInvoiceAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies tax setup fields from the invoice account.
    /// </summary>
    public void transferTaxDefaultsFromInvoiceAcc()
    {
        if (this.mustTransferTaxDefaultsFromInvoiceAcc())
        {
            this.initTaxDefaultsFromInvoiceAccount();
        }
        this.initTaxWithholdDefaultsFromAccount(this.custTable_InvoiceAccount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxWithholdDefaultsFromAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes withholding tax setup fields from the given account.
    /// </summary>
    /// <param name="_custTable">
    /// The account from which the withholding tax defaults are initialized.
    /// </param>
    internal void initTaxWithholdDefaultsFromAccount(CustTable _custTable)
    {
        TaxWithholdParameters_IN taxWithholdParameters = TaxWithholdParameters_IN::find();
        TaxInformationCustTable_IN taxInformationCustTableLoc = _custTable.getTaxInformationCustTable_IN();

        if (taxWithholdParameters.tcsInvoice)
        {
            this.NatureOfAssessee_IN = taxInformationCustTableLoc.NatureOfAssessee;
            this.TCSGroup_IN = taxInformationCustTableLoc.tcsGroup;
        }
        if (taxWithholdParameters.tdsInvoice)
        {
            this.NatureOfAssessee_IN = taxInformationCustTableLoc.NatureOfAssessee;
            this.TDSGroup_IN = taxInformationCustTableLoc.tdsGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportingCurrencyFixedExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reporting currency fixed exchange rate for the current buffer.
    /// </summary>
    /// <remarks>Reporting currency fixed exchange rate is set only if a reporting currency is setup in the <c>Ledger</c>.</remarks>
    internal void setReportingCurrencyFixedExchangeRate()
    {
        this.CustVendReportingCurrencyFixedExchangeRate::setReportingCurrencyFixedExchangeRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDualUseProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// checks for Country of Origin dual use product certificates for the current buffer
    /// </summary>
    [Hookable(false)]
    internal void checkDualUseProduct()
    {
        SalesLine salesLine;
        boolean   invalid;

        if (isConfigurationkeyEnabled(configurationKeyNum(COOCertification)))
        {  
            while select salesLine where salesLine.SalesId == this.SalesId
            {
                LogisticsAddressCountryRegionId countryId = salesLine.DeliveryAddress().CountryRegionId;
            
                if (COODualUseCountry::isDualUseCertRequired(countryId) &&
                    InventTable::find(salesLine.ItemId).COODualUseProduct)
                {
                    if (!COODualUseCertificate::validateCerts(salesLine.ItemId, salesLine.ShippingDateConfirmed, countryId))
                    {
                        warning(strFmt("@SCM:NeedDualUseCertWarning", salesLine.ItemId, countryId));
                        invalid = true;
                    }
                }
            }
            
            if (invalid)
            {
                DialogButton db = Box::yesNo("@SCM:DualUseCertInvalidMessage", DialogButton::No, "@SCM:DualUseCertCheck");
            
                if (db == DialogButton::No)
                {
                    throw warning("@SCM:ConfirmAbortAsCertInvalid");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingSkipUpdateSalesLine_delegate</Name>
				<Source><![CDATA[
    delegate void kittingSkipUpdateSalesLine_delegate(SalesLine _salesLine, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingSkipUpdateSalesLine</Name>
				<Source><![CDATA[
    private boolean kittingSkipUpdateSalesLine(SalesLine _salesLine)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingSkipUpdateSalesLine_delegate(_salesLine, resultValue);
        return resultValue.hasResult() && resultValue.booleanResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingSkipCopySalesLine_delegate</Name>
				<Source><![CDATA[
    delegate void kittingSkipCopySalesLine_delegate(SalesLine _salesLine, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingSkipCopySalesLine</Name>
				<Source><![CDATA[
    private boolean kittingSkipCopySalesLine(SalesLine _salesLine)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingSkipCopySalesLine_delegate(_salesLine, resultValue);
        return resultValue.hasResult() && resultValue.booleanResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingSkipUpdateLine_delegate</Name>
				<Source><![CDATA[
    delegate void kittingSkipUpdateLine_delegate(SalesLine _salesLine, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingSkipUpdateLine</Name>
				<Source><![CDATA[
    protected boolean kittingSkipUpdateLine(SalesLine _salesLine)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        this.kittingSkipUpdateLine_delegate(_salesLine, resultValue);
        return resultValue.hasResult() && resultValue.booleanResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockPriceForRetailOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lock the price for a retail order.
    /// </summary>
    public void lockPriceForRetailOrder()
    {
        ttsbegin;

        SalesLine salesLine;
        RetailSalesLine retailSalesLine;

        update_recordset retailSalesLine
            setting IsPriceLocked = NoYes::Yes
            exists join salesLine
            where retailSalesLine.SalesLine == salesLine.RecId && salesLine.SalesId == this.SalesId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateCustExternalItemDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an external item description object to lookup customer external item descriptions for a product.
    /// </summary>
    /// <param name = "_itemId">An item number.</param>
    /// <param name = "_inventDim">An inventory dimension record.</param>
    /// <returns>The instantiated <c>CustExternalItemDescription</c> object.</returns>
    public CustExternalItemDescription instantiateCustExternalItemDescription(ItemId _itemId, InventDim _inventDim)
    {
        return new CustExternalItemDescription(_itemId, _inventDim, this.externalItemDescriptionCustomerAccount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalItemDescriptionCustomerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the customer account used for lookup of external item descriptions.
    /// </summary>
    /// <returns>The external item description customer account number.</returns>
    [Replaceable]
    protected CustAccount externalItemDescriptionCustomerAccount()
    {
        return this.CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private static SalesInstrumentationLogger instrumentationLogger()
    {
        return SalesInstrumentationLogger::createLogger(tableStr(SalesTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFullRunCTPStatusOnSalesLineUpdated</Name>
				<Source><![CDATA[
    internal void updateFullRunCTPStatusOnSalesLineUpdated()
    {
        MPSFullRunCTPStatus newStatus = MpsFullRunCtpStatusResolver::getSalesTableFullRunCTPStatusFromAllSalesLines(this.SalesId);

        if (this.MPSFullRunCTPStatus == newStatus)
        {
            return;
        }

        #OCCRetryCount
        try
        {
            this.MPSFullRunCTPStatus = newStatus;
            this.doUpdate();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    this.reread();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>SalesTable</c> table will update the tax.
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The <c>Transaction table</c> record.
    /// </param>
    /// <returns>true if current tax should be recalculated; otherwise false.</returns>
    protected boolean taxRecalculationNeeded(Common _origTransactionTable)
    {
        #ISOCountryRegionCodes

        if (TaxIntegrationCacheCalculationResultFlight::instance().isEnabled()
            && Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales))
        {
            SalesTable salesTableOrig = _origTransactionTable ? _origTransactionTable : this.orig();

            return (this.CustAccount                   != salesTableOrig.CustAccount
                || this.InvoiceAccount                 != salesTableOrig.InvoiceAccount
                || this.InclTax                        != salesTableOrig.InclTax
                || this.CurrencyCode                   != salesTableOrig.CurrencyCode
                || this.VATNum                         != salesTableOrig.VATNum
                || this.VATNumRecId                    != salesTableOrig.VATNumRecId
                || this.VATNumTableType                != salesTableOrig.VATNumTableType
                || this.Listcode                       != salesTableOrig.Listcode
                || this.SalesType                      != salesTableOrig.SalesType
                || this.InventLocationId               != salesTableOrig.InventLocationId
                || this.InventSiteId                   != salesTableOrig.InventSiteId
                || this.DlvTerm                        != salesTableOrig.DlvTerm
                || this.DeliveryPostalAddress          != salesTableOrig.DeliveryPostalAddress
                || this.TransportationDocument         != salesTableOrig.TransportationDocument
                || this.LineDisc                       != salesTableOrig.LineDisc
                || this.PriceGroupId                   != salesTableOrig.PriceGroupId
                || this.MultiLineDisc                  != salesTableOrig.MultiLineDisc
                || this.EndDisc                        != salesTableOrig.EndDisc
                || this.DiscPercent                    != salesTableOrig.DiscPercent
                || this.MarkupGroup                    != salesTableOrig.MarkupGroup
                || this.InterCompanyDirectDelivery     != salesTableOrig.InterCompanyDirectDelivery
                || this.FixedExchRate                  != salesTableOrig.FixedExchRate
                || this.ReportingCurrencyFixedExchRate != salesTableOrig.ReportingCurrencyFixedExchRate
                || (this.DeliveryDate                  != salesTableOrig.DeliveryDate
                    && TaxParameters::find().TaxCalculationDateType == TaxCalculationDateType::DeliveryDate)
                || this.CashDisc != salesTableOrig.CashDisc
                || !DimensionDefaultFacade::areEqual(this.DefaultDimension, salesTableOrig.DefaultDimension)
                || (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL])
                    && this.TaxPeriodPaymentCode_PL != salesTableOrig.TaxPeriodPaymentCode_PL));
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostedRetailCashAndCarrySales</Name>
				<Source><![CDATA[
    internal boolean isPostedRetailCashAndCarrySales()
    {
        return this.isRetailCashAndCarrySales() && !RetailStatementTable::findBySalesId(this.SalesId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124484</DeveloperDocumentation>
	<Label>@SYS25193</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>SalesId</TitleField1>
	<TitleField2>SalesName</TitleField2>
	<AllowArchival>Yes</AllowArchival>
	<AllowRetention>Yes</AllowRetention>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>SalesIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>SalesIdx</PrimaryIndex>
	<ReplacementKey>SalesIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SourceDocumentHeader</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SourceDocumentHeader</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TransportationDocument</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TransportationDocument</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustPaymSched</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustPaymSched</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustVendCreditInvoicingTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustVendCreditInvoicingTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InterCompanyPurchSalesReference</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InterCompanyPurchSalesReference</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventQualityOrderTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventQualityOrderTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MCRCouponSalesTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MCRCouponSalesTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MCRCustPaymTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MCRCustPaymTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MCRHoldCodeTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MCRHoldCodeTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerCov</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerCov</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PrintMgmtDocInstance</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PrintMgmtDocInstance</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SalesJournalAutoSummary</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SalesJournalAutoSummary</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxWorkRegulation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxWorkRegulation</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountsReceivable</Name>
			<Label>@SYS25196</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OneTimeCustomer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressDisplay</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>deliveryAddressing</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressLookup</Name>
			<Label>@SYS88672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressReference</Name>
			<Label>@SYS88679</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AddressRefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesTaker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPoolId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesResponsible</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesOriginId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Agreement</Name>
			<Label>@SYS15240</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MatchingAgreement</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Agreement_RU</Name>
			<Label>@SYS15240</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>agreementDocumentTitle_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankAccounts_LV</Name>
			<Label>@SYS21829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankAccount_LV</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurBankAccount_LV</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustBankAccount_LV</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Campaign</Name>
			<Label>@SYS80187</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>smmCampaignId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CarrierInfo</Name>
			<Label>@SYS50722</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierAccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierFuelSurcharge</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierExpeditedShipment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierResidential</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CarrierIssues</Name>
			<Label>@SYS116986</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CaseMoreInformation</Name>
			<Label>@SYS314356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>agreementIsLinked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchOrderFormNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CaseMoreInformation_ReturnOrder</Name>
			<Label>@SYS314356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnItemNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnDeadline</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Commission</Name>
			<Label>@SYS2489</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommissionGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConsTarget_JP</Name>
			<Label>@SYS106495</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConsTarget_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ContactInfo</Name>
			<Label>@SYS21663</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>URL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Email</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Phone</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CreditCard</Name>
			<Label>@SYS101746</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editCreditCard</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardAuthorization</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardApprovalAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyFixedExchRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CurrencyShow</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editFixedExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editReportingCurrencyFixedExchangeRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustInvoice</Name>
			<Label>@SYS14204</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS11779</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OneTimeCustomer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customs_IN</Name>
			<Label>@GLS5007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomsExportOrder_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustomsMisc_IN</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomsShippingBill_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReceiptDateRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingDateRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptDateConfirmed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingDateConfirmed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDateControlType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvReason</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExportReason</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierBlindShipment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryAddition</Name>
			<Label>@SYS88262</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryAddress</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierDeliveryContact</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryAddress_RU</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierDeliveryContact</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliverySummary</Name>
			<Label>@SYS22058</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@SYS11829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DiscountMiscCharges</Name>
			<Label>@SYS22031</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCustRebateGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsRebateProgramTMAGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice</Name>
			<Label>@SYS100769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EInvoiceLineSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EInvoiceAccountCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Emails</Name>
			<Label>@SYS96646</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Email</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPMiniPage</Name>
			<Label>@SYS108232</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>smmSalesAmountTotal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExternalReference</Name>
			<Label>@SYS21697</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchOrderFormNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnItemNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalDocType_PL</Name>
			<Label>@GLS109781</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalDocType_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Listcode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountyOrigDest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatAddValue_LV</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GiroMoneyTransferSlip</Name>
			<Label>@SYS2723</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GiroType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>HeaderToLineUpdate</Name>
			<Label>@SYS62436</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reservation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TCSGroup_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TDSGroup_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MpsExcludeSalesOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Intercompany</Name>
			<Label>@SYS75319</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyCompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyPurchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterCompanyAdmin</Name>
			<Label>@SYS74106</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyAutoCreateOrders</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyDirectDelivery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>interCompanyOriginDisplay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyAllowIndirectCreation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterCompanyOriginal</Name>
			<Label>@SYS93838</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyOriginalSalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyOriginalCustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyDirectDeliveryOrig</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterCompanyReturn</Name>
			<Label>@SYS120343</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnReplacementCreated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRCCAuthorization</Name>
			<Label>@MCR23339</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRDefaultClassification</Name>
			<Label>@MCR22225</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRReturn</Name>
			<Label>@MCR12123</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnItemNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRWebConfirmation</Name>
			<Label>@MCR28470</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NotificationToTheCentralBank</Name>
			<Label>@SYS67156</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCentralBankPurposeText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CreditCardCustRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardAuthorizationError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierDlvType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierPostalAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qualityOrderStatusDisplay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview_RU</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>showContactPerson</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedDueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscBaseDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankDocumentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DirectDebitMandate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAutoNumbering_LT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingSlipAutoNumbering_LT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS4534</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quotation</Name>
			<Label>@SYS5864</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reservation</Name>
			<Label>@SYS7669</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Reservation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribAutoRes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Retail</Name>
			<Label>@RET3066</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailChannelTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Return</Name>
			<Label>@SYS24700</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnReasonCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReturnItemNum</Name>
			<Label>@SYS104082</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnItemNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReturnListPage</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnItemNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnReasonCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnDeadline</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReturnOrder</Name>
			<Label>@SYS105841</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnItemNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnReasonCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnDeadline</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editContactPersonName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReturnReplacement</Name>
			<Label>@SYS84714</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnReplacementId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnReplacementCreated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesAmountTotal</Name>
			<Label>@SYS23862</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>smmSalesAmountTotal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesOrderTable</Name>
			<Label>@SYS12847</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnItemNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CovStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reservation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Deadline</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Estimate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Touched</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnterpriseNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitedVATInvoice_LT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editExportSales_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Deadline</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qualityOrderStatusDisplay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCROrderStopped</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SummaryOrder</Name>
			<Label>@SYS24079</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SummaryUpdate</Name>
			<Label>@SYS57755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPoolId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommissionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightSlipType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Listcode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedDueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyCompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyOriginalCustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyDirectDeliveryOrig</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyFixedExchRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SummaryUpdateParameters</Name>
			<Label>@SYS57738</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AutoSummaryModuleType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SummaryUpdateShow</Name>
			<Label>@SYS57755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPoolId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommissionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightSlipType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Listcode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedDueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyFixedExchRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transport</Name>
			<Label>@SYS3843</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FreightZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightSlipType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Warehouse</Name>
			<Label>@WAX374</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReleaseStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WebCategoryBrowsing</Name>
			<Label>@SYS74258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WebCategoryBrowsingReturn</Name>
			<Label>@SYS74258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WebDelivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTax_IN</Name>
			<Label>@SYS33817</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NatureOfAssessee_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TDSGroup_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TCSGroup_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReasonCode_W</Name>
			<Label>@SYS114719</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CreditNoteReasonCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice_MX</Name>
			<Label>@SYS341123</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SATPaymMethod_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATPurpose_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATIncotermCode_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATShippingReason_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EInvoiceCFDIConfirmNumber_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignTrade_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumRegIdTrib_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalAddress_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceCertificate_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VATNum</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNumRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNumTableType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MpsMasterPlanning</Name>
			<Label>@SCMPlanning:MpsMasterPlanning</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustLineDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesIdBase</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TDSGroup_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
			<Label>@GLS5362</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AddressRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AddressRefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressRefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoSummaryModuleType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS57738</Label>
			<Visible>No</Visible>
			<EnumType>ModuleCustSales</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankAccount_LV</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CZ,EE,HU,LT,LV,PL</CountryRegionCodes>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@GLS220786</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCentralBankPurposeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>BankCentralBankPurposeCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCentralBankPurposeText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>BankCentralBankPurposeText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankDocumentType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankDocumentFacilityNature</ExtendedDataType>
			<Label>@SYS313726</Label>
			<EnumType>BankDocumentType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CaseTagging</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RFIDCaseTagging</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCashDiscCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CashDiscBaseDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscBaseDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CashDiscBaseDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscBaseDays</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CommissionGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CommissCustomerGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConsTarget_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustConsTarget_JP</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountyOrigDest</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressCountyOrigDest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CovStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CovStatus</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CreditCardApprovalAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>CreditCard</ConfigurationKey>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS116984</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CreditCardAuthorization</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>CreditCard</ConfigurationKey>
			<ExtendedDataType>CreditCardAuthorization</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreditCardAuthorizationError</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>CreditCard</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS117748</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CreditCardCustRefId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>CreditCard</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS71999</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CreditNoteReasonCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReasonTableRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurBankAccount_LV</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CZ,EE,HU,LT,LV,PL</CountryRegionCodes>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@GLS108456</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustBankAccount_LV</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LV</CountryRegionCodes>
			<ExtendedDataType>CustBankAccountId</ExtendedDataType>
			<Label>@SYS88297</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustInvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInvoiceId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustomsExportOrder_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS5723</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustomsShippingBill_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS5773</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Deadline</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesDeadline</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DeliveryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DeliveryDateControlType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesDeliveryDateControlType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsDeliveryName</ExtendedDataType>
			<GroupPrompt>@SYS7399</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DirectDebitMandate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDirectDebitMandateRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesEndDiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvModeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvReason</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvReasonId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvTermId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>DocumentStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EInvoiceAccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceAccountCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EInvoiceLineSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceLineSpecific</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Email</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Email</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EndDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustEndDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EnterpriseNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxEnterpriseNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Estimate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesEstimateGross</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExportReason</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesExportReason</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FiscalDocType_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>PL</CountryRegionCodes>
			<EnumType>PlFiscalDocType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FixedDueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesFixedDueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FixedExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesFixedExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FreightSlipType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustFreightSlipType</ExtendedDataType>
			<EnumType>FreightSlipType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FreightZone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustFreightZoneId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GiroType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentStubInvoiceId</ExtendedDataType>
			<EnumType>PaymentStub</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InclTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyAllowIndirectCreation</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyAllowIndirectCreation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyAllowIndirectCreationOrig</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyAllowIndirectCreation</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyAutoCreateOrders</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyAutoCreateOrders</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyCompanyId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyCompanyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyDirectDelivery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyDirectDelivery</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyDirectDeliveryOrig</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyDirectDelivery</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyCustomer</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>InterCompanyOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyOriginalCustAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyOriginalCustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyOriginalSalesId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyOriginalSalesId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyPurchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyPurchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IntrastatAddValue_LV</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LvIntrastatAddValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>IntrastatFulfillmentDate_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatFulfillmentDate_HU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesInventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInvoiceAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceAutoNumbering_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>LtInvoiceAutoNumbering</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemTagging</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RFIDItemTagging</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustLanguageId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Listcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListcodeId</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
			<EnumType>Listcode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ManualEntryChangepolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscPolicyManual</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustMarkupGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MatchingAgreement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementHeaderRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCROrderStopped</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCROrderStopped</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MultiLineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustMultiLineDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NatureOfAssessee_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NatureOfAssessee_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequenceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OneTimeCustomer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OneTimeCustomer</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PackingSlipAutoNumbering_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>LtPackingSlipAutoNumbering</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PalletTagging</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RFIDPalletTagging</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Payment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymTermId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS828</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentSched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymMode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymSpec</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsBatchAttribAutoRes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribAutoRes</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsCustRebateGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCustRebateGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsRebateProgramTMAGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsRebateProgramTMAGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Port</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
			<FeatureClass>IntrastatPortToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriceGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPriceGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchOrderFormNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPurchaseOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QuotationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QuotationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReceiptDateConfirmed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesReceiptDateConfirmed</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReceiptDateRequested</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesReceiptDateRequested</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReleaseStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSReleaseStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reservation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ItemReservation</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RetailChannelTable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailChannelRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReturnDeadline</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnDeadline</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnItemNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesReturnItemNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnReasonCodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnReasonCodeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReturnReplacementCreated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnReplacementCreated</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnReplacementId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnReplacementId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReturnStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReturnStatusHeader</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CommissSalesGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesName</ExtendedDataType>
			<Label>@SYS27874</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesOriginId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesOriginId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesPoolId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPoolId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmSalesUnitId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SettleVoucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesSettlementType</ExtendedDataType>
			<EnumType>SettlementType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipCarrierAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ShipCarrier</ConfigurationKey>
			<ExtendedDataType>ShipCarrierAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipCarrierAccountCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ShipCarrier</ConfigurationKey>
			<ExtendedDataType>ShipCarrierAccountCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShipCarrierBlindShipment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ShipCarrierBlindShipment</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipCarrierDeliveryContact</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ShipCarrier</ConfigurationKey>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS116731</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShipCarrierDlvType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ShipCarrierDlvType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShipCarrierExpeditedShipment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ShipCarrierExpeditedShipment</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShipCarrierFuelSurcharge</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ShipCarrierFuelSurcharge</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipCarrierId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ShipCarrier</ConfigurationKey>
			<ExtendedDataType>ShipCarrierId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipCarrierName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsShipCarrierName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ShipCarrierPostalAddress</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShipCarrierResidential</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ShipCarrierResidentialDest</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShippingDateConfirmed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDateConfirmed</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShippingDateRequested</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDateRequested</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>InterCompanySkipUpdate</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>smmCampaignId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>smmSalesAmountTotal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmSalesAmountTotal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentHeader</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS314386</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatProcId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatProcId</ExtendedDataType>
			<FeatureClass>IntrastatProcToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SystemEntryChangePolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscPolicySystem</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SystemEntrySource</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>PriceDiscSystemSource</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPeriodPaymentCode_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlTaxPeriodPaymentCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TCSGroup_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
			<Label>@GLS5363</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Touched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeTouched</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransactionCodeId</ExtendedDataType>
			<FeatureClass>IntrastatTransactionCodeToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransport</ExtendedDataType>
			<FeatureClass>IntrastatTransportToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransportationDocument</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransportationDocumentRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UnitedVATInvoice_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitedVATInvoice_LT</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>URL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>URL</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATNumJournal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerSalesResponsible</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WorkerSalesResponsible</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerSalesTaker</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesTaker</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipCreateMarkup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupSkipCreateMarkup</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipLineUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceRegister_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>LtInvoiceAutoNumbering</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PackingSlipRegister_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>LtPackingSlipAutoNumbering</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EInvoiceCFDIConfirmNumber_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceCFDIConfirmNumber_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATPaymMethod_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SATPaymMethod_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATPurpose_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SATPurpose_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateNumber_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CertificateNumber_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalAddress_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>LogisticsAddressCountryRegionId</ExtendedDataType>
			<Label>@MexicoCFDI:FiscalAddress</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ForeignTrade_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForeignTrade_MX</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumRegIdTrib_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumRegIdTrib_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATIncotermCode_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SATIncoterm_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SourceCertificate_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SourceCertificate_MX</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATShippingReason_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SATShippingReason_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SalesOrderSourceDocumentExtension</ConfigurationKey>
			<ExtendedDataType>AccountingDistributionTemplateRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FundingSource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjFundingSourceRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyFixedExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ASOHOrderClass</Name>
			<ExtendedDataType>ASOHOrderClass</ExtendedDataType>
			<FeatureClass>AdvancedOrderHoldStatusFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Phone</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Phone</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VATNumRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATNumTableType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxExemptNumberSourceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MPSFullRunCTPStatus</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<FeatureClass>MpsFullRunCTPFeature</FeatureClass>
			<HelpText>@SCM:MPSFullRunCTPStatusSalesTableHelpText</HelpText>
			<EnumType>MPSFullRunCTPStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SysRowVersionNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysRowVersionNumber</ExtendedDataType>
			<Null>Yes</Null>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsIntegration</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>TradeIntegrationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FinTag</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FinTagRecId</ExtendedDataType>
			<FeatureClass>SalesOrderFinTagFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MpsExcludeSalesOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Req</ConfigurationKey>
			<ExtendedDataType>MpsExcludeSalesOrder</ExtendedDataType>
			<FeatureClass>MpsExcludeSpecificSalesOrdersAndSalesLinesFeature</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MpsUpdateExcludeSalesOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Req</ConfigurationKey>
			<ExtendedDataType>MpsExcludeSalesOrder</ExtendedDataType>
			<FeatureClass>MpsExcludeSpecificSalesOrdersAndSalesLinesFeature</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesOrderIntegrationCreationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>SalesOrderIntegrationCreationType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchOrderFormNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>Project</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusCustAccIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceAccStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReturnNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>ReturnItem</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReturnItemNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AgreementHeaderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>MatchingAgreement</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustCreatedDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>createdDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ConsTarget_JPIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ConsTarget_JP</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CreatedByDocumentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DocumentStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CreatedBy</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjFundingSourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>Project</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FundingSource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeliveryPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CreditNoteReasonCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CreditNoteReasonCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LongTermRetentionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CreatedDateTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>INTERCOMPANYORDER</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>INTERCOMPANYDIRECTDELIVERY</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>BankLGDocumentMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BankDocumentType</MapField>
					<MapFieldTo>BankDocumentType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>FiscalDocumentTextUpdateTableMap_BR</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventStorageDimMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>MCRHistSalesTableMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AddressRefRecId</MapField>
					<MapFieldTo>AddressRefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AddressRefTableId</MapField>
					<MapFieldTo>AddressRefTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AutoSummaryModuleType</MapField>
					<MapFieldTo>AutoSummaryModuleType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankCentralBankPurposeCode</MapField>
					<MapFieldTo>BankCentralBankPurposeCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankCentralBankPurposeText</MapField>
					<MapFieldTo>BankCentralBankPurposeText</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CaseTagging</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDisc</MapField>
					<MapFieldTo>CashDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscPercent</MapField>
					<MapFieldTo>CashDiscPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CommissionGroup</MapField>
					<MapFieldTo>CommissionGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ContactPersonId</MapField>
					<MapFieldTo>ContactPersonId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CountyOrigDest</MapField>
					<MapFieldTo>CountyOrigDest</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CovStatus</MapField>
					<MapFieldTo>CovStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CreditCardApprovalAmount</MapField>
					<MapFieldTo>CreditCardApprovalAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CreditCardAuthorization</MapField>
					<MapFieldTo>CreditCardAuthorization</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CreditCardAuthorizationError</MapField>
					<MapFieldTo>CreditCardAuthorizationError</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CreditCardCustRefId</MapField>
					<MapFieldTo>CreditCardCustRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CreditCardProcessorTransactionId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustGroup</MapField>
					<MapFieldTo>CustGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustInvoiceId</MapField>
					<MapFieldTo>CustInvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomerRef</MapField>
					<MapFieldTo>CustomerRef</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Deadline</MapField>
					<MapFieldTo>Deadline</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDate</MapField>
					<MapFieldTo>DeliveryDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDateControlType</MapField>
					<MapFieldTo>DeliveryDateControlType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent</MapField>
					<MapFieldTo>DiscPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvMode</MapField>
					<MapFieldTo>DlvMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvReason</MapField>
					<MapFieldTo>DlvReason</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvTerm</MapField>
					<MapFieldTo>DlvTerm</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentStatus</MapField>
					<MapFieldTo>DocumentStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EInvoiceAccountCode</MapField>
					<MapFieldTo>EInvoiceAccountCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EInvoiceAccountCode1</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EInvoiceLineSpec</MapField>
					<MapFieldTo>EInvoiceLineSpec</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Email</MapField>
					<MapFieldTo>Email</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc</MapField>
					<MapFieldTo>EndDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EnterpriseNumber</MapField>
					<MapFieldTo>EnterpriseNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Estimate</MapField>
					<MapFieldTo>Estimate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExportReason</MapField>
					<MapFieldTo>ExportReason</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FixedDueDate</MapField>
					<MapFieldTo>FixedDueDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FixedExchRate</MapField>
					<MapFieldTo>FixedExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FreightSlipType</MapField>
					<MapFieldTo>FreightSlipType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FreightZone</MapField>
					<MapFieldTo>FreightZone</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>GiroType</MapField>
					<MapFieldTo>GiroType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
					<MapFieldTo>InclTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyAllowIndirectCreation</MapField>
					<MapFieldTo>InterCompanyAllowIndirectCreation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyAllowIndirectCreationOrig</MapField>
					<MapFieldTo>InterCompanyAllowIndirectCreationOrig</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyAutoCreateOrders</MapField>
					<MapFieldTo>InterCompanyAutoCreateOrders</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyCompanyId</MapField>
					<MapFieldTo>InterCompanyCompanyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyDirectDelivery</MapField>
					<MapFieldTo>InterCompanyDirectDelivery</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyDirectDeliveryOrig</MapField>
					<MapFieldTo>InterCompanyDirectDeliveryOrig</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyOrder</MapField>
					<MapFieldTo>InterCompanyOrder</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyOrigin</MapField>
					<MapFieldTo>InterCompanyOrigin</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyOriginalCustAccount</MapField>
					<MapFieldTo>InterCompanyOriginalCustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyOriginalSalesId</MapField>
					<MapFieldTo>InterCompanyOriginalSalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyPurchId</MapField>
					<MapFieldTo>InterCompanyPurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanySkipUpdate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemTagging</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LanguageId</MapField>
					<MapFieldTo>LanguageId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Listcode</MapField>
					<MapFieldTo>Listcode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ManualEntryChangepolicy</MapField>
					<MapFieldTo>ManualEntryChangepolicy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MarkupGroup</MapField>
					<MapFieldTo>MarkupGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MatchingAgreement</MapField>
					<MapFieldTo>MatchingAgreement</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRAdvanceCredit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRAdvanceExchange</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRApplyCreditToExchange</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRBrokerContractID</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRBrokerID</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCloseDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRContinuitychild</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRContinuityLineEval</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRContinuityOrder</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRDefaultClassification</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCREndOrder</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRExpedite</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRFTCExempt</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRInclComplete</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRInstallmentOrderSubmitted</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRIsExchange</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRIsStandingOrder</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRLastInvoiceDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRMarkupTotal</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRNoAlternate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROfferUpSellShown</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROriginalBalance</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROriginalSalesId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrigShippingDateRequested</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROutOfBalanceReleased</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRPaymOutOfBalance</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRPriceOverride</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRPromptedForInstBillingOption</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRRefWMSShipmentId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipComplete</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRSmmTMCallListID</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRSOAllocPriority</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRSourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRWebConfirmDtTime</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLineDisc</MapField>
					<MapFieldTo>MultiLineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup</MapField>
					<MapFieldTo>NumberSequenceGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OneTimeCustomer</MapField>
					<MapFieldTo>OneTimeCustomer</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PalletTagging</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Payment</MapField>
					<MapFieldTo>Payment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentSched</MapField>
					<MapFieldTo>PaymentSched</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec</MapField>
					<MapFieldTo>PaymSpec</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Port</MapField>
					<MapFieldTo>Port</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostingProfile</MapField>
					<MapFieldTo>PostingProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceGroupId</MapField>
					<MapFieldTo>PriceGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchOrderFormNum</MapField>
					<MapFieldTo>PurchOrderFormNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QuotationId</MapField>
					<MapFieldTo>QuotationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateConfirmed</MapField>
					<MapFieldTo>ReceiptDateConfirmed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateRequested</MapField>
					<MapFieldTo>ReceiptDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Reservation</MapField>
					<MapFieldTo>Reservation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnDeadline</MapField>
					<MapFieldTo>ReturnDeadline</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnItemNum</MapField>
					<MapFieldTo>ReturnItemNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnReasonCodeId</MapField>
					<MapFieldTo>ReturnReasonCodeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnReplacementCreated</MapField>
					<MapFieldTo>ReturnReplacementCreated</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnReplacementId</MapField>
					<MapFieldTo>ReturnReplacementId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReturnStatus</MapField>
					<MapFieldTo>ReturnStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesGroup</MapField>
					<MapFieldTo>SalesGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesName</MapField>
					<MapFieldTo>SalesName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesOriginId</MapField>
					<MapFieldTo>SalesOriginId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPoolId</MapField>
					<MapFieldTo>SalesPoolId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesStatus</MapField>
					<MapFieldTo>SalesStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesTableRefRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesType</MapField>
					<MapFieldTo>SalesType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesUnitId</MapField>
					<MapFieldTo>SalesUnitId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SettleVoucher</MapField>
					<MapFieldTo>SettleVoucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccount</MapField>
					<MapFieldTo>ShipCarrierAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccountCode</MapField>
					<MapFieldTo>ShipCarrierAccountCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierBlindShipment</MapField>
					<MapFieldTo>ShipCarrierBlindShipment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierDeliveryContact</MapField>
					<MapFieldTo>ShipCarrierDeliveryContact</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierDlvType</MapField>
					<MapFieldTo>ShipCarrierDlvType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierExpeditedShipment</MapField>
					<MapFieldTo>ShipCarrierExpeditedShipment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierFuelSurcharge</MapField>
					<MapFieldTo>ShipCarrierFuelSurcharge</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierId</MapField>
					<MapFieldTo>ShipCarrierId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierName</MapField>
					<MapFieldTo>ShipCarrierName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierResidential</MapField>
					<MapFieldTo>ShipCarrierResidential</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateConfirmed</MapField>
					<MapFieldTo>ShippingDateConfirmed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
					<MapFieldTo>ShippingDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SkipUpdate</MapField>
					<MapFieldTo>SkipUpdate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>smmCampaignId</MapField>
					<MapFieldTo>smmCampaignId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>smmSalesAmountTotal</MapField>
					<MapFieldTo>smmSalesAmountTotal</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatProcId</MapField>
					<MapFieldTo>StatProcId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Touched</MapField>
					<MapFieldTo>Touched</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionCode</MapField>
					<MapFieldTo>TransactionCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Transport</MapField>
					<MapFieldTo>Transport</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>URL</MapField>
					<MapFieldTo>URL</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNum</MapField>
					<MapFieldTo>VATNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WorkerSalesResponsible</MapField>
					<MapFieldTo>WorkerSalesResponsible</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WorkerSalesTaker</MapField>
					<MapFieldTo>WorkerSalesTaker</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PaymModeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec</MapField>
					<MapFieldTo>PaymSpec</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PriceDiscHeading</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AgreementPartnerCode_RU</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Currency</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent</MapField>
					<MapFieldTo>DiscPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc</MapField>
					<MapFieldTo>EndDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLineDisc</MapField>
					<MapFieldTo>MultiLineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceGroup</MapField>
					<MapFieldTo>PriceGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PriceDiscResultFields</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent</MapField>
					<MapFieldTo>DiscPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ManualEntryChangePolicy</MapField>
					<MapFieldTo>ManualEntryChangepolicy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLineDiscCode</MapField>
					<MapFieldTo>MultiLineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RecieptDeliveryDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateConfirmed</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntryChangePolicy</MapField>
					<MapFieldTo>SystemEntryChangePolicy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SystemEntrySource</MapField>
					<MapFieldTo>SystemEntrySource</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesDeliveryDateControlMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ATPApplyDemandTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPApplySupplyTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPBackwardDemandTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPBackwardSupplyTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPInclPlannedOrders</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPTimeFence</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDateControlType</MapField>
					<MapFieldTo>DeliveryDateControlType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvMode</MapField>
					<MapFieldTo>DlvMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Location</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateConfirmed</MapField>
					<MapFieldTo>ReceiptDateConfirmed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateRequested</MapField>
					<MapFieldTo>ReceiptDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccount</MapField>
					<MapFieldTo>ShipCarrierAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccountCode</MapField>
					<MapFieldTo>ShipCarrierAccountCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierDlvType</MapField>
					<MapFieldTo>ShipCarrierDlvType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierID</MapField>
					<MapFieldTo>ShipCarrierId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateConfirmed</MapField>
					<MapFieldTo>ShippingDateConfirmed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
					<MapFieldTo>ShippingDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SkipUpdate</MapField>
					<MapFieldTo>SkipUpdate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CashDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscPercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsTarget_JP</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendGroup_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LanguageId_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentSched_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Payment_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymMode_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec_CZ</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNum_CZ</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchTable_RU</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AgreementHeaderExt_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsignorAccount_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceAgreementDate_RU</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesShipCarrierMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CustAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvMode</MapField>
					<MapFieldTo>DlvMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccount</MapField>
					<MapFieldTo>ShipCarrierAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccountCode</MapField>
					<MapFieldTo>ShipCarrierAccountCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierDlvType</MapField>
					<MapFieldTo>ShipCarrierDlvType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierId</MapField>
					<MapFieldTo>ShipCarrierId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierName</MapField>
					<MapFieldTo>ShipCarrierName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierPostalAddress</MapField>
					<MapFieldTo>ShipCarrierPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TradePostalAddress</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendInvoiceOrderAccountMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>RetailOrderHeaderMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomerRef</MapField>
					<MapFieldTo>CustomerRef</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomerRequisition</MapField>
					<MapFieldTo>PurchOrderFormNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvMode</MapField>
					<MapFieldTo>DlvMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Email</MapField>
					<MapFieldTo>Email</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Id</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
					<MapFieldTo>InclTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LanguageId</MapField>
					<MapFieldTo>LanguageId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup</MapField>
					<MapFieldTo>NumberSequenceGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Phone</MapField>
					<MapFieldTo>Phone</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateRequested</MapField>
					<MapFieldTo>ReceiptDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailChannelTable</MapField>
					<MapFieldTo>RetailChannelTable</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesGroup</MapField>
					<MapFieldTo>SalesGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
					<MapFieldTo>ShippingDateRequested</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WorkerSalesResponsible</MapField>
					<MapFieldTo>WorkerSalesResponsible</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WorkerSalesTaker</MapField>
					<MapFieldTo>WorkerSalesTaker</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
					<MapFieldTo>InclTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Posted</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ListCode</MapField>
					<MapFieldTo>ListCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendReportingCurrencyFixedExchangeRate</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ExchangeRate</MapField>
					<MapFieldTo>FixedExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingCurrencyExchangeRate</MapField>
					<MapFieldTo>ReportingCurrencyFixedExchRate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxExemptVATNumMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>VATNum</MapField>
					<MapFieldTo>VATNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNumRecId</MapField>
					<MapFieldTo>VATNumRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNumTableType</MapField>
					<MapFieldTo>VATNumTableType</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Agreement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AgreementHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AgreementHeader</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AgreementHeader_SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MatchingAgreement</Name>
					<Field>MatchingAgreement</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankAccount_LV</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankAccount_LV</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankAccount_LV</Name>
					<Field>BankAccount_LV</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankCentralBankPurpose</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankCentralBankPurpose</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankCentralBankPurposeCode</Name>
					<Field>BankCentralBankPurposeCode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDisc</Name>
					<Field>CashDisc</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CommissionCustomerGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CommissionCustomerGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CommissionGroup</Name>
					<Field>CommissionGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CommissionSalesGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CommissionSalesGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesGroup</Name>
					<Field>SalesGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Common</Name>
			<RelatedTable>Common</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefRecId</Name>
					<Field>AddressRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefTableId</Name>
					<Field>AddressRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CountyOrigDest</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCounty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CountyOrigDest</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountyOrigDest</Name>
					<Field>CountyOrigDest</Field>
					<RelatedField>CountyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CreditCard</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CreditCardCust</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CreditCardCustRefId</Name>
					<Field>CreditCardCustRefId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CurBankAccount_LV</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CurBankAccount_LV</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurBankAccount_LV</Name>
					<Field>CurBankAccount_LV</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustBankAccount_LV</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustBankAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<Field>InvoiceAccount</Field>
					<RelatedField>CustAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustBankAccount_LV</Name>
					<Field>CustBankAccount_LV</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustDirectDebitMandate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustDirectDebitMandate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DirectDebitMandate</Name>
					<Field>DirectDebitMandate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustGroup</Name>
					<Field>CustGroup</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostingIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustLineDiscountGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustLineDiscountGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineDisc</Name>
					<SourceEDT>CustLineDiscCode</SourceEDT>
					<Field>LineDisc</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>CustLineDiscCode</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::LineDiscGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>CustLineDiscCode</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustMarkupGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustMarkupGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupGroup</Name>
					<Field>MarkupGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<RelatedField>Module</RelatedField>
					<ValueStr>MarkupModuleType::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustMultiLineDiscountGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustMultiLineDiscountGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MultiLineDisc</Name>
					<SourceEDT>CustMultiLineDiscCode</SourceEDT>
					<Field>MultiLineDisc</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>CustMultiLineDiscCode</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::MultiLineDiscGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>CustMultiLineDiscCode</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPaymModeSpec</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustPaymModeSpec</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymSpec</Name>
					<Field>PaymSpec</Field>
					<RelatedField>Specification</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustPaymModeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustPaymModeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymModeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPriceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustPriceGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceGroupId</Name>
					<SourceEDT>CustPriceGroup</SourceEDT>
					<Field>PriceGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>CustPriceGroup</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::PriceGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>CustPriceGroup</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTotalDiscountGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTotalDiscountGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EndDisc</Name>
					<SourceEDT>CustEndDiscCode</SourceEDT>
					<Field>EndDisc</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>CustEndDiscCode</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::EndDiscGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>CustEndDiscCode</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvMode</Name>
					<Field>DlvMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvReason</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvReason</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvReason</Name>
					<Field>DlvReason</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTerm</Name>
					<Field>DlvTerm</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InterCompany</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InterCompany</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterCompanyCompanyId</Name>
					<Field>InterCompanyCompanyId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatPort</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatPort</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Port</Name>
					<Field>Port</Field>
					<RelatedField>PortId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PortIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatStatProc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatStatProc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatProcId</Name>
					<Field>StatProcId</Field>
					<RelatedField>StatProcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatProcIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransactionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatTransactionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCode</Name>
					<Field>TransactionCode</Field>
					<RelatedField>TransactionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransportMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatTransportMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Transport</Name>
					<Field>Transport</Field>
					<RelatedField>TransPortCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransPortCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InvoiceCustomer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InvoiceCustomer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<SourceEDT>CustInvoiceAccount</SourceEDT>
					<Field>InvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MarkupGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<RelatedField>Module</RelatedField>
					<ValueStr>MarkupModuleType::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupGroup</Name>
					<Field>MarkupGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRHoldCodeTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRHoldCodeTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>InventRefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRInstallmentPlanSalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRInstallmentPlanSalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceGroup</Name>
					<Field>NumberSequenceGroup</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OrderCustomer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>OrderCustomer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentSched</Name>
					<Field>PaymentSched</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Payment</Name>
					<Field>Payment</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsCustRebateGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsCustRebateGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsCustRebateGroupId</Name>
					<Field>PdsCustRebateGroupId</Field>
					<RelatedField>PdsCustRebateGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsRebateProgramTMATable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsRebateProgramTMATable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsRebateProgramTMAGroup</Name>
					<Field>PdsRebateProgramTMAGroup</Field>
					<RelatedField>PdsRebateProgramTMAGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PlTaxDueTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlTaxDueTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PlTaxDueTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriodPaymentCode_PL</Name>
					<Field>TaxPeriodPaymentCode_PL</Field>
					<RelatedField>TaxPeriodPaymentCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PriceDiscChangePolicyRecId1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscChangePolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscChangePolicy</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PriceDiscChangePolicy_SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SystemEntryChangePolicy</Name>
					<Field>SystemEntryChangePolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PriceDiscChangePolicyRecId2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscChangePolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscChangePolicy_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PriceDiscChangePolicy_1_SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ManualEntryChangepolicy</Name>
					<Field>ManualEntryChangepolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InterCompanyOrder</Name>
					<Field>InterCompanyOrder</Field>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTableInterCompany</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTableInterCompany</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InterCompanyOrder</Name>
					<Field>InterCompanyOrder</Field>
					<ValueStr>NoYes::Yes</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterCompanyCompanyId</Name>
					<Field>InterCompanyCompanyId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterCompanyPurchId</Name>
					<Field>InterCompanyPurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CreditNoteReasonCode</Name>
					<Field>CreditNoteReasonCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReturnReasonCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReturnReasonCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReturnReasonCodeId</Name>
					<Field>ReturnReasonCodeId</Field>
					<RelatedField>ReasonCodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ReturnReasonCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesOriginId</Name>
					<Field>SalesOriginId</Field>
					<RelatedField>OriginId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesOriginIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesPool</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesPool</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesPoolId</Name>
					<Field>SalesPoolId</Field>
					<RelatedField>SalesPoolId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesPoolIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReturnReplacementId</Name>
					<SourceEDT>ReturnReplacementId</SourceEDT>
					<Field>ReturnReplacementId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ShipCarrierPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_1_SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipCarrierPostalAddress</Name>
					<Field>ShipCarrierPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ShipCarrierTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ShipCarrierTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipCarrierId</Name>
					<Field>ShipCarrierId</Field>
					<RelatedField>CarrierId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>IdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmCampaignTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmCampaignTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>smmCampaignId</Name>
					<Field>smmCampaignId</Field>
					<RelatedField>CampaignId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CampaignIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmSalesUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmSalesUnit</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesUnitId</Name>
					<Field>SalesUnitId</Field>
					<RelatedField>SalesUnitId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesUnitIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentHeader</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SourceDocumentHeader_SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentHeader</Name>
					<Field>SourceDocumentHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxServiceTariff</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxServiceTariff</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxServiceTariff</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesTable</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>ParentRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>ParentTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdGroupHeadingTCS_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdGroupHeading_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdGroupHeading_1_SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TCSGroup_IN</Name>
					<SourceEDT>TaxWithholdGroup</SourceEDT>
					<Field>TCSGroup_IN</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdGroupHeadingTDS_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdGroupHeading_SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TDSGroup_IN</Name>
					<SourceEDT>TaxWithholdGroup</SourceEDT>
					<Field>TDSGroup_IN</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransportationDocument</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TransportationDocument</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportationDocument</Name>
					<Field>TransportationDocument</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerSalesResponsible_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesResponsible</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesResponsible_SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerSalesResponsible</Name>
					<Field>WorkerSalesResponsible</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerSalesTaker_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTaker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesTaker_SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerSalesTaker</Name>
					<Field>WorkerSalesTaker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsPostalAddressBaseEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddressBaseEntity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>AddressRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailChannel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailChannelTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailChannelTable</Name>
					<Field>RetailChannelTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATPaymMethod_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ExtTablePaymMethod</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATPaymMethod_MX</Name>
					<Field>SATPaymMethod_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>4</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATPurpose_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ExtTablePurpose</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATPurpose_MX</Name>
					<Field>SATPurpose_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>3</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATIncotermCode_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATIncotermCode_MX</Name>
					<Field>SATIncotermCode_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>5</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalAddress_MX</Name>
					<SourceEDT>LogisticsAddressCountryRegionId</SourceEDT>
					<Field>FiscalAddress_MX</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATShippingReason_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATShippingReason_MX</Name>
					<Field>SATShippingReason_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>8</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AccountingDistributionTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AccountingDistributionTemplate_SalesTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjFundingSource</Name>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjFundingSource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FundingSource</Name>
					<Field>FundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ASOHOrderClass</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ASOHOrderClassTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ASOHOrderClass</Name>
					<SourceEDT>ASOHOrderClass</SourceEDT>
					<Field>ASOHOrderClass</Field>
					<RelatedField>OrderClass</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FinTag</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FinTag</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FinTag</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FinTag</Name>
					<Field>FinTag</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailChannelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailChannelTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailChannelTable</Name>
					<Field>RetailChannelTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>