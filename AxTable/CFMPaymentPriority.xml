<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPaymentPriority</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CFMPaymentPriority extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findHighestPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the highest payment priority record with the highest priority among records passed in parameters.
    /// </summary>
    /// <param name="_prioritiesRecIds">
    /// Collection of RecIds of <c>CFMPaymentPriority</c> records.
    /// </param>
    /// <returns>
    /// RecId of <c>CFMPaymentPriority</c>
    /// </returns>
    public static CFMPaymentPriorityRecId findHighestPriority(container _prioritiesRecIds)
    {
        CFMPaymentPriorityRecId priorityRecId;

        if (conLen(_prioritiesRecIds))
        {
            Query query = new Query();
            QueryBuildDataSource qbds = query.addDataSource(tableNum(CFMPaymentPriority));

            qbds.addSelectionField(fieldNum(CFMPaymentPriority, RecId));
            qbds.addSortField(fieldNum(CFMPaymentPriority, Priority), SortOrder::Ascending);
            qbds.firstOnly(true);

            findOrCreateRange_W(qbds, fieldNum(CFMPaymentPriority, RecId), con2Str(_prioritiesRecIds));

            QueryRun qr = new QueryRun(query);
            qr.next();

            priorityRecId = qr.get(tableNum(CFMPaymentPriority)).RecId;
        }

        return priorityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static public CFMPaymentPriority findRecId(RecId _recId, boolean _update = false)
    {
        CFMPaymentPriority  paymentPriority;

        paymentPriority.selectForUpdate(_update);

        if (_recId)
        {
            select firstonly paymentPriority
                where paymentPriority.RecId == _recId;
        }

        return paymentPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentPriorityDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the default priority.
    /// </summary>
    /// <returns>
    /// Default priority.
    /// </returns>
    public static CFMPaymentPriorityRecId getPaymentPriorityDefault()
    {
        CFMPaymentPriority paymentPriority;

        select firstonly RecId from paymentPriority
            order by Priority desc;

        return paymentPriority.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentPriorityForAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the priority for selected account.
    /// </summary>
    /// <param name="_sourceDataArea">
    /// Company of account.
    /// </param>
    /// <param name="_accountType">
    /// Account type.
    /// </param>
    /// <param name="_accountNum">
    /// Account num.
    /// </param>
    /// <returns>
    /// RecId of found priority record.
    /// </returns>
    public static CFMPaymentPriorityRecId getPaymentPriorityForAccount(SelectableDataArea _sourceDataArea, CFMAccountType _accountType,CFMAccountNum _accountNum)
    {
        CFMPaymentPriorityRecId paymentPriority = 0;
        CFMDirPartyTable dirPartyTableCFM;

        if (_accountNum && _sourceDataArea)
        {
            switch (_accountType)
            {
                case CFMAccountType::Cust:
                    CustTable custTable;

                    select firstonly crossCompany PaymentPriority from dirPartyTableCFM
                    exists join custTable
                        where custTable.DataAreaId == _sourceDataArea
                           && custTable.AccountNum == _accountNum
                           && custTable.Party == dirPartyTableCFM.DirPartyTable;

                    paymentPriority = dirPartyTableCFM.PaymentPriority;
                    break;

                case CFMAccountType::Vend:
                    VendTable vendTable;

                    select firstonly crossCompany PaymentPriority from dirPartyTableCFM
                    exists join vendTable
                        where vendTable.DataAreaId == _sourceDataArea
                           && vendTable.AccountNum == _accountNum
                           && vendTable.Party == dirPartyTableCFM.DirPartyTable;

                    paymentPriority = dirPartyTableCFM.PaymentPriority;
                    break;

                case CFMAccountType::Worker:
                    DirPerson dirPerson = HcmWorker::findByPersonnelNumber(_accountNum).DirPerson();
                    dirPartyTableCFM = CFMDirPartyTable::findDirParty(dirPerson.RecId);

                    paymentPriority = dirPartyTableCFM.PaymentPriority;
                    break;
            }
        }

        return paymentPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(CFMPaymentMatchingPriority _priorityId)
    {
        CFMPaymentPriority  paymentPriority;

        if (_priorityId)
        {
            select firstonly RecId from paymentPriority
                where paymentPriority.Priority == _priorityId;
        }

        return paymentPriority.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static CFMPaymentPriority find(CFMPaymentMatchingPriority _priorityId, boolean _update = false)
    {
        CFMPaymentPriority  paymentPriority;

        paymentPriority.selectForUpdate(_update);

        if (_priorityId)
        {
            select firstonly paymentPriority
                where paymentPriority.Priority == _priorityId;
        }

        return paymentPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriorityAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get Priority After param priority.
    /// </summary>
    /// <param name = "_priorityId"></param>
    /// <param name = "_update"></param>
    /// <returns>return Priority After param priority.</returns>
    public static CFMPaymentPriority getPriorityAfter(CFMPaymentMatchingPriority _priorityId, boolean _update = false)
    {
        CFMPaymentPriority after;

        after.selectForUpdate(_update);

        select firstonly after
            order by Priority
            where after.Priority > _priorityId;

        return after;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriorityBefore</Name>
				<Source><![CDATA[
    /// <summary>
    /// get Priority Before param priority.
    /// </summary>
    /// <param name = "_priorityId"></param>
    /// <param name = "_update"></param>
    /// <returns>return Priority Before param priori</returns>
    public static CFMPaymentPriority getPriorityBefore(CFMPaymentMatchingPriority _priorityId, boolean _update = false)
    {
        CFMPaymentPriority before;

        before.selectForUpdate(_update);

        select forupdate firstonly before
            order by Priority desc
            where before.Priority < _priorityId;

        return before;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priorityMove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change priority for current record.
    /// </summary>
    /// <param name = "_curRecord">Current record.</param>
    /// <param name = "_isDown"></param>
    public static void priorityMove(CFMPaymentPriority _curRecord, boolean _isDown)
    {
        CFMPaymentPriority neighborRecord = _isDown ? CFMPaymentPriority::getPriorityAfter(_curRecord.Priority, true):
                                                      CFMPaymentPriority::getPriorityBefore(_curRecord.Priority, true);

        if (neighborRecord.RecId && _curRecord.RecId)
        {
            CFMPaymentPriority currentRecord = CFMPaymentPriority::findRecId(_curRecord.RecId, true);

            if (currentRecord.RecId)
            {
                ttsbegin;

                CFMPaymentPriority lRecord = _isDown ? currentRecord: neighborRecord;
                CFMPaymentPriority hRecord = _isDown ? neighborRecord: currentRecord;

                CFMPaymentMatchingPriority deltaPriority = (hRecord.Priority - lRecord.Priority)/2;

                hRecord.Priority  = lRecord.Priority;
                lRecord.Priority += deltaPriority;

                lRecord.update();
                hRecord.update();
                ttscommit;

                if (_curRecord.dataSource())
                {
                    FormDataSource fds = _curRecord.dataSource();
                    CFMPaymentPriority positionRecord = CFMPaymentPriority::findRecId(_curRecord.RecId);
                    fds.research();
                    fds.positionToRecord(positionRecord);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentPriorityFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines payment priority from Cash flow management parameters.
    /// </summary>
    /// <param name="_prepayment">
    /// Prepayment
    /// </param>
    /// <param name="_accountType">
    /// Type of account
    /// </param>
    /// <returns>
    /// Payment priority
    /// </returns>
    public static CFMPaymentPriorityRecId getPaymentPriorityFromParameters(boolean _prepayment, CFMAccountType _accountType)
    {
        CFMPaymentRequestTypeRef paymentRequestTypeRecId;
        CFMPaymentPriorityRecId paymentPriorityRecId;

        CFMParameters parameters = CFMParameters::findInCentralizedPaymentsCompany();

        if (_prepayment)
        {
            paymentRequestTypeRecId = parameters.SupplierPrepayment;
        }
        else
        {
            switch (_accountType)
            {
                case CFMAccountType::Vend:
                    paymentRequestTypeRecId = parameters.IndebtednessToVendor;

                    break;

                case CFMAccountType::Cust:
                    paymentRequestTypeRecId = parameters.IndebtednessToCustomer;

                    break;

                case CFMAccountType::Worker:
                    paymentRequestTypeRecId = parameters.IndebtednessToWorker;

                    break;
            }
        }

        if (paymentRequestTypeRecId)
        {
            CFMPaymentRequestType paymentRequestType = CFMPaymentRequestType::find(paymentRequestTypeRecId);

            paymentPriorityRecId = paymentRequestType.PaymentPriority;
        }

        return paymentPriorityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentPriorityForPaymTerm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines payment priority using Terms of payment.
    /// </summary>
    /// <param name="_dataAreaId">
    /// Identifier of legal entity where terms of payment to be find.
    /// </param>
    /// <param name="_paymTermId">
    /// Terms of payment id.
    /// </param>
    /// <param name="_prepayment">
    /// Prepayment
    /// </param>
    /// <returns>
    /// Identifier of payment priority record.
    /// </returns>

    public static CFMPaymentPriorityRecId getPaymentPriorityForPaymTerm(SelectableDataArea _dataAreaId, PaymTermId _paymTermId, boolean _prepayment)
    {
        CFMPaymentPriorityRecId paymentPriorityRecId = 0;
        CFMPaymentRequestTypeRef paymentRequestTypeRecId;

        if (_paymTermId && _dataAreaId)
        {
            PaymTerm paymTerm;

            changecompany (_dataAreaId)
            {
                paymTerm = PaymTerm::find(_paymTermId);
            }

            if (_prepayment)
            {
                paymentRequestTypeRecId = paymTerm.cfmPaymentRequestTypePrepayment;
            }
            else
            {
                paymentRequestTypeRecId = paymTerm.cfmPaymentRequestTypePayment;
            }
        }

        if (paymentRequestTypeRecId)
        {
            CFMPaymentRequestType paymentRequestType = CFMPaymentRequestType::find(paymentRequestTypeRecId);

            paymentPriorityRecId = paymentRequestType.PaymentPriority;
        }

        return paymentPriorityRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CFMCashflowManagement</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@CashFlowManagement:PaymentPriorityTableDevDescription</DeveloperDocumentation>
	<FormRef>CFMPaymentPriority</FormRef>
	<Label>@CashFlowManagement:PaymentPriority</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Group</TableGroup>
	<TitleField1>PriorityCode</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>PriorityIdx</ClusteredIndex>
	<Modules>RCashFlowManagement</Modules>
	<ReplacementKey>PriorityCodeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriorityCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriorityCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriorityCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriorityCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Priority</Name>
			<Label>@CashFlowManagement:PaymentPriority</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS6047</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriorityCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<HelpText>@CashFlowManagement:EnterDescriptionForPaymPriority</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriorityCode</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>CFMPaymentPriorityCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Priority</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CFMPaymentMatchingPriority</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PriorityCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PriorityCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PriorityIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Priority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>