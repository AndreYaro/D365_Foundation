<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EXILFeatures_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EXILFeatures_IT extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EXILFeatures_IT</c> table.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EXILFeatures_IT</c> table; otherwise, an empty record.
    /// </returns>
    [Hookable(false)]
    public static EXILFeatures_IT find(boolean _forUpdate = false)
    {
        EXILFeatures_IT parameter;

        if (_forUpdate)
        {
            parameter.selectForUpdate(_forUpdate);
        }

        select firstonly parameter
            where parameter.Key == 0;

        if (!parameter && !parameter.isTmp())
        {
            Company::createParameter(parameter);
        }

        return parameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledFeaturesSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>Set</c> with enabled features.
    /// </summary>
    /// <returns>
    /// <c>Set</c> with enabled features.
    /// </returns>
    [Hookable(false)]
    public Set getEnabledFeaturesSet()
    {
        Set ret;
        
        if (this.EnabledFeatures)
        {
            ret = Set::create(this.EnabledFeatures);
            if (!ret || ret.typeId() != Types::Enum)
            {
                ret = new Set(Types::Enum);
            }
        }
        else
        {
            ret = new Set(Types::Enum);
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEnabledFeatures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates set with enabled features.
    /// </summary>
    /// <param name = "_exilFeaturesTmp">
    /// The <c>EXILFeaturesTmp_IT</c> record.
    /// </param>
    internal void updateEnabledFeatures(EXILFeaturesTmp_IT _exilFeaturesTmp)
    {
        Set enabledFeaturesSet = this.getEnabledFeaturesSet();
        
        if (_exilFeaturesTmp.Enabled == NoYes::Yes)
        {
            enabledFeaturesSet.add(_exilFeaturesTmp.Feature);
        }
        else
        {
            enabledFeaturesSet.remove(_exilFeaturesTmp.Feature);
        }

        this.EnabledFeatures = enabledFeaturesSet.pack();
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a feature is enabled.
    /// </summary>
    /// <param name = "_feature">
    /// The feature.
    /// </param>
    /// <returns>
    /// true if the feature is enabled; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public static boolean isFeatureEnabled(EXILFeature _feature)
    {
        boolean ret;

        Set enabledFeaturesSet = EXILFeatures_IT::find().getEnabledFeaturesSet();


        if (enabledFeaturesSet.in(_feature))
        {
            ret = ThirdPartyFeatureModelChecker::checkContextApplicability(_feature);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@ExtendedItallianLocalization:EXILFeatures_ITDevDoc</DeveloperDocumentation>
	<Label>@ExtendedItallianLocalization:SpecificItalianFeatures</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Parameter</TableGroup>
	<Visible>No</Visible>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>Key</ClusteredIndex>
	<Modules>NotApplicable</Modules>
	<PrimaryIndex>Key</PrimaryIndex>
	<ReplacementKey>Key</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Key</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Key</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ParametersKey</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>EnabledFeatures</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Key</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Key</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>