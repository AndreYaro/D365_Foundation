<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentPosting</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankDocumentPosting extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAccountRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the account relation field is correct, based on the account code field.
    /// </summary>
    /// <returns>
    ///    true if the the accoun relation field is correct; otherwise, false.
    /// </returns>
    private boolean checkAccountRelation()
    {
        boolean ok = true;
        RecId   recId;

        switch (this.AccountCode)
        {
            case TableGroupAll::Table :
                if (this.BankDocumentFacilityType == 0)
                {
                    ok = checkFailed("@SYS17074");
                }

                if (ok)
                {
                    recId = BankDocumentPosting::findByCodeAndRelation(
                              TableGroupAll::Table,
                              this.BankDocumentFacilityType).RecId;
                }
                break;
            case TableGroupAll::GroupId :
                if (this.BankDocumentFacilityGroup == 0)
                {
                    ok = checkFailed("@SYS17074");
                }

                if (ok)
                {
                    recId = BankDocumentPosting::findByCodeAndRelation(
                              TableGroupAll::GroupId,
                              this.BankDocumentFacilityGroup).RecId;
                }
                break;
            case TableGroupAll::All :
                if (ok)
                {
                    recId = BankDocumentPosting::findByCodeAndRelation(
                              TableGroupAll::All).RecId;
                }
        }

        if (ok)
        {
            if (recId && recId != this.RecId)
            {
                ok = checkFailed("@SYS17074");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editBankDocumentAccountRelationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the account relation field.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set the value.
    /// </param>
    /// <param name="_value">
    ///    The value set from the form control.
    /// </param>
    /// <returns>
    ///    The value to display on the form control.
    /// </returns>
    edit BankDocumentFacilityGroupOrType editBankDocumentAccountRelationRefRecId(
        boolean                          _set,
        BankDocumentFacilityGroupOrType  _value)
    {
        BankDocumentFacilityType        bankDocumentFacilityType;
        BankDocumentFacilityGroup       bankDocumentFacilityGroup;
        BankDocumentFacilityGroupOrType ret;

        if (_set)
        {
            switch (this.AccountCode)
            {
                case TableGroupAll::Table :
                    bankDocumentFacilityType = BankDocumentFacilityType::findByFacilityTypeName(_value);
                    if (!bankDocumentFacilityType || bankDocumentFacilityType.RecId == 0)
                    {
                        checkFailed(
                            strfmt(
                                "@SYS112224",
                                _value,
                                fieldpname(BankDocumentFacilityType, FacilityTypeName),
                                tableid2pname(tablenum(BankDocumentFacilityType))));
                    }

                    this.BankDocumentFacilityType = bankDocumentFacilityType.RecId;

                    break;
                case TableGroupAll::GroupId :
                    bankDocumentFacilityGroup = BankDocumentFacilityGroup::findByFacilityGroupName(_value);

                    if (!bankDocumentFacilityGroup || bankDocumentFacilityGroup.RecId == 0)
                    {
                        checkFailed(
                            strfmt(
                                "@SYS112224",
                                _value,
                                fieldpname(BankDocumentFacilityGroup, FacilityGroupName),
                                tableid2pname(tablenum(BankDocumentFacilityGroup))));
                    }

                    this.BankDocumentFacilityGroup = bankDocumentFacilityGroup.RecId;

                    break;
                case TableGroupAll::All :
                    break;
            }
        }

        switch (this.AccountCode)
        {
            case TableGroupAll::Table :
                bankDocumentFacilityType = BankDocumentFacilityType::find(this.BankDocumentFacilityType);
                ret = bankDocumentFacilityType.FacilityTypeName;

                break;
            case TableGroupAll::GroupId :
                bankDocumentFacilityGroup = BankDocumentFacilityGroup::find(this.BankDocumentFacilityGroup);
                ret = bankDocumentFacilityGroup.FacilityGroupName;

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
        public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldstr(BankDocumentPosting, BankDocumentFacilityType)  :
                case fieldstr(BankDocumentPosting, BankDocumentFacilityGroup) :
                    ret = this.checkAccountRelation();
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = this.checkAccountRelation();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByCodeAndRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>BankDocumentPosting</c> table exists by using the
    ///    specified account code and account relation.
    /// </summary>
    /// <param name="_bankDocumentAccountCode">
    ///    The account code of the <c>BankDocumentPosting</c> record.
    /// </param>
    /// <param name="_bankDocumentAccountRelationRefRecId">
    ///    The account relation of the <c>BankDocumentPosting</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_bankDocumentAccountRelationRefRecId" /> parameter can be reference record ID
    ///    to a facility type or a group.
    /// </remarks>
    public static boolean existByCodeAndRelation(
        BankDocumentAccountCode             _bankDocumentAccountCode,
        BankDocumentAccountRelationRefRecId _bankDocumentAccountRelationRefRecId)
    {
        BankDocumentPosting bankDocumentPosting;

        if (_bankDocumentAccountRelationRefRecId != 0)
        {
            bankDocumentPosting = BankDocumentPosting::findByCodeAndRelation(_bankDocumentAccountCode, _bankDocumentAccountRelationRefRecId);
            if (bankDocumentPosting && bankDocumentPosting.RecId != 0)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record of the <c>BankDocumentPosting</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BankDocumentPosting</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>BankDocumentPosting</c> table; otherwise, an empty record.
    /// </returns>
    public static BankDocumentPosting find(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        BankDocumentPosting bankDocumentPosting;

        if (_recId)
        {
            bankDocumentPosting.selectForUpdate(_forUpdate);

            select firstonly bankDocumentPosting
                where bankDocumentPosting.RecId == _recId;
        }

        return bankDocumentPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCodeAndRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>BankDocumentFacilityGroup</c> table by using the specified
    ///    account code and account relation.
    /// </summary>
    /// <param name="_bankDocumentAccountCode">
    ///    The account code of the <c>BankDocumentPosting</c> record to find.
    /// </param>
    /// <param name="_bankDocumentAccountRelationRefRecId">
    ///    The account relation of the <c>BankDocumentPosting</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>BankDocumentPosting</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_ bankDocumentAccountRelationRefRecId" /> parameter can be a reference record
    ///    ID to a facility type or a group.
    /// </remarks>
    public static BankDocumentPosting findByCodeAndRelation(
        BankDocumentAccountCode             _bankDocumentAccountCode,
        BankDocumentAccountRelationRefRecId _bankDocumentAccountRelationRefRecId = 0,
        boolean                             _forUpdate                           = false)
    {
        BankDocumentPosting bankDocumentPosting;

        bankDocumentPosting.selectForUpdate(_forUpdate);

        switch (_bankDocumentAccountCode)
        {
            case TableGroupAll::Table :
                if (_bankDocumentAccountRelationRefRecId != 0)
                {
                    select firstonly bankDocumentPosting
                        where bankDocumentPosting.AccountCode               == _bankDocumentAccountCode
                            && bankDocumentPosting.BankDocumentFacilityType == _bankDocumentAccountRelationRefRecId;
                }
                break;
            case TableGroupAll::GroupId :
                if (_bankDocumentAccountRelationRefRecId != 0)
                {
                    select firstonly bankDocumentPosting
                        where bankDocumentPosting.AccountCode                == _bankDocumentAccountCode
                            && bankDocumentPosting.BankDocumentFacilityGroup == _bankDocumentAccountRelationRefRecId;
                }
                break;
            case TableGroupAll::All :
                select firstonly bankDocumentPosting
                    where bankDocumentPosting.AccountCode == _bankDocumentAccountCode;
                break;
        }

        return bankDocumentPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByFacilityType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>BankDocumentFacilityGroup</c> table by using the specified
    ///    facility type.
    /// </summary>
    /// <param name="_bankDocumentFacilityTypeRecId">
    ///    The record ID of the facility type of the <c>BankDocumentPosting</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>BankDocumentPosting</c> table; otherwise, an empty record.
    /// </returns>
    public static BankDocumentPosting findByFacilityType(
        BankDocumentFacilityTypeRefRecId _bankDocumentFacilityTypeRecId,
        boolean                          _forUpdate = false)
    {
        BankDocumentPosting bankDocumentPosting;

        bankDocumentPosting = BankDocumentPosting::findByCodeAndRelation(
                                TableGroupAll::Table,
                                _bankDocumentFacilityTypeRecId,
                                _forUpdate);

        if (!bankDocumentPosting
            || bankDocumentPosting.RecId == 0)
        {
            bankDocumentPosting = BankDocumentPosting::findByCodeAndRelation(
                                    TableGroupAll::GroupId,
                                    BankDocumentFacilityType::find(_bankDocumentFacilityTypeRecId).BankDocumentFacilityGroup,
                                    _forUpdate);

            if (!bankDocumentPosting
                || bankDocumentPosting.RecId == 0)
            {
                bankDocumentPosting = BankDocumentPosting::findByCodeAndRelation(TableGroupAll::All, 0, _forUpdate);
            }
        }

        return bankDocumentPosting;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BankDocument</ConfigurationKey>
	<DeveloperDocumentation>@SYS313663</DeveloperDocumentation>
	<Label>@SYS313669</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>AccountCode</TitleField1>
	<TitleField2>SettleLedgerDimension</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Bank</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankDocumentFacilityType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MiscChargesLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarginLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankDocumentFacilityGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MiscChargesLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarginLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankDocumentFacilityGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankDocumentFacilityType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankLGLiquidationLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankDocumentFacilityGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankDocumentFacilityType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankDocumentAccountCode</ExtendedDataType>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankDocumentFacilityGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankDocumentFacilityGroupRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankDocumentFacilityType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankDocumentFacilityTypeRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankLGLiquidationLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
			<Label>@SYS314691</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MarginLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
			<Label>@SYS313671</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MiscChargesLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
			<Label>@SYS313674</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SettleLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
			<Label>@SYS3286</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BankDocumentFacilityTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BankDocumentFacilityType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BankDocumentFacilityGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BankDocumentFacilityGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BankLGLiquidationLedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BankLGLiquidationLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankDocumentFacilityGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankDocumentFacilityGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankDocumentFacilityGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankDocumentFacilityGroup_BankDocumentPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankDocumentFacilityGroup</Name>
					<Field>BankDocumentFacilityGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankDocumentFacilityType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankDocumentFacilityType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankDocumentFacilityType</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankDocumentFacilityType_BankDocumentPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankDocumentFacilityType</Name>
					<Field>BankDocumentFacilityType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankLGLiquidationLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination_3</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_3_BankDocumentPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankLGLiquidationLedgerDimension</Name>
					<Field>BankLGLiquidationLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MarginLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_BankDocumentPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarginLedgerDimension</Name>
					<Field>MarginLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MiscChargesLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_1_BankDocumentPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MiscChargesLedgerDimension</Name>
					<Field>MiscChargesLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SettleLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination_2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_2_BankDocumentPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SettleLedgerDimension</Name>
					<Field>SettleLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>