<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetStatementRow</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetStatementRow extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        AssetStatementInterval assetStatementInterval;

        ttsbegin;

        if (this.RowType == RowType::Header &&
            this.orig().RowType == RowType::Total)
        {
            delete_from assetStatementInterval
                    where assetStatementInterval.AssetStatementLineNum   == this.LineNum;
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist( AssetStatementLineNum _lineNum)
    {
        boolean ret = true;

        if (!AssetStatementRow::exist(_lineNum))
        {
            ret = checkFailed(strfmt(AssetStatementRow::txtNotExist(), _lineNum));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchangeLineNum</Name>
				<Source><![CDATA[
    static boolean exchangeLineNum(AssetStatementRow _assetStatementRow1,
                                          AssetStatementRow _assetStatementRow2)
    {
        boolean                ret              = false;
        AssetStatementLineNum  tmpLineNum1;
        AssetStatementLineNum  tmpLineNum2;
        AssetStatementInterval assetStatementInterval;
        RecordInsertList       recordInsertList = new RecordInsertList(assetStatementInterval.TableId);

        ttsbegin;

        if (_assetStatementRow1.RecId && _assetStatementRow2.RecId)
        {
            tmpLineNum1 = _assetStatementRow1.LineNum;
            tmpLineNum2 = _assetStatementRow2.LineNum;

            _assetStatementRow1.LineNum = 0;
            _assetStatementRow1.update();
            _assetStatementRow2.LineNum = tmpLineNum1;
            _assetStatementRow2.update();
            _assetStatementRow1.LineNum = tmpLineNum2;
            _assetStatementRow1.update();

            while select forupdate assetStatementInterval
                  where assetStatementInterval.AssetStatementLineNum == tmpLineNum1 ||
                        assetStatementInterval.AssetStatementLineNum == tmpLineNum2
            {
                if (assetStatementInterval.AssetStatementLineNum == tmpLineNum1)
                {
                    assetStatementInterval.AssetStatementLineNum = tmpLineNum2;
                }
                else
                {
                    assetStatementInterval.AssetStatementLineNum = tmpLineNum1;
                }
                recordInsertList.add(assetStatementInterval);
            }

            // delete all rows used for calculation in the above while select loop
            delete_from assetStatementInterval
                where assetStatementInterval.AssetStatementLineNum == tmpLineNum1 ||
                    assetStatementInterval.AssetStatementLineNum == tmpLineNum2;

            recordInsertList.insertDatabase();
            ret = true;
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(AssetStatementLineNum _lineNum)
    {
        boolean found;

        found = (select firstonly
                     RecId
                 from
                     assetStatementRow
                 where
                     assetStatementRow.LineNum == _lineNum).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static AssetStatementRow find(
        AssetStatementLineNum _lineNum,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetStatementRow      assetStatementRow;

        assetStatementRow.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetStatementRow.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            assetStatementRow
        where
            assetStatementRow.LineNum == _lineNum;

        return assetStatementRow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMaxLineNum</Name>
				<Source><![CDATA[
    public static AssetStatementLineNum findMaxLineNum()
    {
        AssetStatementRow tmpAssetStatementRow;

        select maxof(LineNum) from tmpAssetStatementRow;

        return tmpAssetStatementRow.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMinLineNum</Name>
				<Source><![CDATA[
    public static AssetStatementLineNum findMinLineNum()
    {
        AssetStatementRow tmpAssetStatementRow;

        select minof(LineNum) from tmpAssetStatementRow;

        return tmpAssetStatementRow.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineNumDown</Name>
				<Source><![CDATA[
    public static boolean lineNumDown(AssetStatementRow _assetStatementRow)
    {
        boolean                ret = false;
        AssetStatementRow      nextAssetStatementRow;

        ttsbegin;

        select firstonly forupdate nextAssetStatementRow
            order by LineNum
            where nextAssetStatementRow.LineNum > _assetStatementRow.LineNum;

        if (nextAssetStatementRow.RecId)
        {
            ret = AssetStatementRow::exchangeLineNum(_assetStatementRow,
                                                      nextAssetStatementRow);
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineNumUp</Name>
				<Source><![CDATA[
    public static boolean lineNumUp(AssetStatementRow _assetStatementRow)
    {
        boolean                ret = false;
        AssetStatementRow      previousAssetStatementRow;

        ttsbegin;

        select firstonly forupdate previousAssetStatementRow
            order by LineNum desc
            where previousAssetStatementRow.LineNum < _assetStatementRow.LineNum;

        if (previousAssetStatementRow.RecId)
        {
            ret = AssetStatementRow::exchangeLineNum(_assetStatementRow,
                                                      previousAssetStatementRow);
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS100044";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<DeveloperDocumentation>@SYS127382</DeveloperDocumentation>
	<FormRef>AssetStatementRow</FormRef>
	<Label>@SYS75428</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>RowName</TitleField1>
	<TitleField2>RowType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>LineNumIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>LineNumIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>AssetStatementInterval</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetStatementInterval</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RowName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RowType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RowName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RowType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RowName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RowType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Number</Name>
			<Label>@SYS13864</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetStatementLineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RowName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetStatementRowName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RowType</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>RowType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LineNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>