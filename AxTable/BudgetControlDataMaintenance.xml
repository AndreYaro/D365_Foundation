<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlDataMaintenance</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetControlDataMaintenance extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        BudgetControlDataMaintenance budgetControlDataMaintenance;

        select firstonly id from budgetControlDataMaintenance order by id desc;

        this.id = budgetControlDataMaintenance.id + 1;
        this.PrimaryLedger = Ledger::current();
        this.DocumentSourceTrackingStatus = BudgetSourceTrackingStatus::Confirmed;

        BudgetControlConfiguration budgetControlConfiguration = BudgetControlConfiguration::findActiveByPrimaryLedger(Ledger::current());

        FiscalCalendarRecId fiscalCalendarRecId = Ledger::fiscalCalendar(CompanyInfo::current());
        FiscalCalendarYear currentFiscalYear = FiscalCalendarYear::findYearByCalendarDate(fiscalCalendarRecId, DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));

        this.DocumentFromDate = currentFiscalYear.StartDate;
        this.DocumentToDate = currentFiscalYear.EndDate;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetControlDataMaintenance</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BudgetControlDataMaintenance</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetControlDataMaintenance</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetControlDataMaintenance find(
        BudgetControlDataMaintenanceRecId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetControlDataMaintenance budgetControlDataMaintenance;

        budgetControlDataMaintenance.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetControlDataMaintenance.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetControlDataMaintenance
            where budgetControlDataMaintenance.RecId == _recId;

        return budgetControlDataMaintenance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedDocumentCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the number of selected documents in the budget control data maintenance process group.
    /// </summary>
    /// <param name="_budgetControlDataMaintenanceRecId">
    /// The <c>BudgetControlDataMaintenanceRecId</c> of a process group.
    /// </param>
    /// <returns>
    /// The count of selected documents in the process group.
    /// </returns>
    public static int64 getSelectedDocumentCount(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        BudgetControlDataMaintenanceTracking budgetControlDataMaintenanceTracking;

        select count(RecId) from budgetControlDataMaintenanceTracking
            where budgetControlDataMaintenanceTracking.BudgetControlDataMaintenance == _budgetControlDataMaintenanceRecId
                && budgetControlDataMaintenanceTracking.Selected == NoYes::Yes;

        return budgetControlDataMaintenanceTracking.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProcessGroupStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the budget control data maintenance process status.
    /// </summary>
    /// <param name = "_budgetControlDataMaintenanceRecId">
    /// The <c>BudgetControlDataMaintenanceRecId</c> of a process group.
    /// </param>
    /// <param name = "_dataMaintenanceStatus">
    /// The <c>BudgetControlDataMaintenanceStatus</c> that will be set.
    /// </param>
    public static void setProcessGroupStatus(
        BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId,
        BudgetControlDataMaintenanceStatus _dataMaintenanceStatus)
    {
        BudgetControlDataMaintenance budgetControlDataMaintenance;

        ttsbegin;

        select firstonly forupdate budgetControlDataMaintenance
            where budgetControlDataMaintenance.RecId == _budgetControlDataMaintenanceRecId;

        switch (_dataMaintenanceStatus)
        {
            case BudgetControlDataMaintenanceStatus::Executing:
                budgetControlDataMaintenance.ProcessStartDateTime = DateTimeUtil::getSystemDateTime();
                break;

            case BudgetControlDataMaintenanceStatus::Completed:
                budgetControlDataMaintenance.ProcessEndDateTime = DateTimeUtil::getSystemDateTime();
                break;
        }

        budgetControlDataMaintenance.ProcessStatus = _dataMaintenanceStatus;
        budgetControlDataMaintenance.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectedForExecutionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Selected field for every document tracked by a budget control
    /// data maintenance process group.
    /// </summary>
    /// <param name="_budgetControlDataMaintenanceRecId">
    /// The <c>BudgetControlDataMaintenanceRecId</c> of a process group.
    /// </param>
    /// <param name="_selected">
    /// The boolean value that will be set in the Selected field.
    /// </param>
    public static void setSelectedForExecutionGroup(
        BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId,
        boolean _selected)
    {
        BudgetControlDataMaintenanceTracking budgetControlDataMaintenanceTracking;

        update_recordset budgetControlDataMaintenanceTracking
            setting Selected = _selected
            where budgetControlDataMaintenanceTracking.BudgetControlDataMaintenance == _budgetControlDataMaintenanceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProviderNames</Name>
				<Source><![CDATA[
    internal static Set getProviderNames(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId, boolean _onlySelected = false)
    {
        Set providerClassNames = new Set(Types::String);

        BudgetControlDataMaintenanceTracking budgetControlDataMaintenanceTracking, budgetControlDataMaintenanceTrackingProviders;

        while select DataMaintenanceProvider from budgetControlDataMaintenanceTrackingProviders
            group by DataMaintenanceProvider
            where budgetControlDataMaintenanceTrackingProviders.BudgetControlDataMaintenance == _budgetControlDataMaintenanceRecId
                && (!_onlySelected || budgetControlDataMaintenanceTrackingProviders.Selected == NoYes::Yes)
        {
            providerClassNames.add(budgetControlDataMaintenanceTrackingProviders.DataMaintenanceProvider);
        }

        return providerClassNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDates</Name>
				<Source><![CDATA[
    private boolean validateDates()
    {
        boolean isValid = true;

        if (!this.DocumentFromDate)
        {
            isValid = checkFailed("@Budget:DocumentFromDateRequired");
        }

        if (isValid && !this.DocumentToDate)
        {
            isValid = checkFailed("@Budget:DocumentToDateRequired");
        }

        if (isValid && (this.DocumentFromDate > this.DocumentToDate))
        {
            isValid = checkFailed(strfmt("@Budget:DocumentFromDateMustPrecedeToDate", date2StrUsr(this.DocumentFromDate, DateFlags::FormatAll), date2StrUsr(this.DocumentToDate, DateFlags::FormatAll)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        return super() && this.validateDates();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
	<DeveloperDocumentation>@Budget:BudgetControlDataMaintenanceTable</DeveloperDocumentation>
	<FormRef>BudgetControlDataMaintenance</FormRef>
	<Label>@Budget:BudgetControlDataMaintenanceProcessGroup</Label>
	<TitleField1>PrimaryLedger</TitleField1>
	<TitleField2>ID</TitleField2>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>IDIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrimaryLedger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessStartDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessEndDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentSourceTrackingStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentSourceTrackingStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrimaryLedger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessStartDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessEndDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description255</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentFromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@Budget:DataMaintenanceDocumentFromDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentSourceTrackingStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Budget:DataMaintenanceDocumentStatus</Label>
			<EnumType>BudgetSourceTrackingStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@Budget:DataMaintenanceDocumentToDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PositiveNumber</ExtendedDataType>
			<Label>@Budget:DataMaintenanceID</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PrimaryLedger</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ProcessEndDateTime</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UTCTimestamp</ExtendedDataType>
			<Label>@Budget:DataMaintenanceProcessEndTime</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ProcessStartDateTime</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UTCTimestamp</ExtendedDataType>
			<Label>@Budget:DataMaintenanceProcessStartTime</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProcessStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BudgetControlDataMaintenanceStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsOverrunApproved</Name>
			<Label>@Budget:DataMaintenanceIsOverrunApproved</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IDIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Ledger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>Ledger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Ledger</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Ledger_BudgetControlDataMaintenance</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PrimaryLedger</Name>
					<Field>PrimaryLedger</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>