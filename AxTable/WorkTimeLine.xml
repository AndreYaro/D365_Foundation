<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkTimeLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WorkTimeLine extends common
{
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cache key value.
    /// </summary>
    /// <returns></returns>
    public str cacheKey()
    {
        return this.WorkTimeId+'#'+int2str(this.WeekDay);
    }

]]></Source>
			</Method>
			<Method>
				<Name>capacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the capacity if Effectivity field has a value.
    /// </summary>
    /// <param name = "_effectivity">The effectivity value to use for capacity calculation.</param>
    /// <returns>The calculated capacity.</returns>
    public RealBase capacity(Percent _effectivity = 100)
    {
        if (this.Effectivity)
        {
            return  (this.ToTime - this.FromTime) *
                    this.Effectivity / 100 *
                    _effectivity     / 100;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateDayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the day name from the weekday field.
    /// </summary>
    /// <returns>The day name.</returns>
    public display DateDayName dateDayName()
    {
        return dayname(this.WeekDay);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record.
    /// </summary>
    public void initValue()
    {
        super();

        this.Effectivity = 100;
        this.ToTime = #secondsPerDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkTimeCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a work time checker for the current record.
    /// </summary>
    /// <returns>A work time checker.</returns>
    protected WorkTimeCheck createWorkTimeCheck()
    {
        return new WorkTimeCheck(this.FromTime, this.ToTime, this.Effectivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the to and from times.
    /// </summary>
    /// <returns>true if valid; otherwise, false.</returns>
    [Wrappable]
    protected internal boolean checkTime()
    {
        return this.createWorkTimeCheck().checkRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOverlapValidationQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to validate overlaps.
    /// </summary>
    /// <param name = "_workTimeLine">The cursor for the query.</param>
    /// <returns>The query to validate overlaps.</returns>
    protected SysDaQueryObject buildOverlapValidationQuery(WorkTimeLine _workTimeLine)
    {
        SysDaQueryObject query = new SysDaQueryObject(_workTimeLine);

        query.whereClause(
            new SysDaEqualsExpression(new SysDaFieldExpression(_workTimeLine, fieldStr(WorkTimeLine, WorkTimeId)), new SysDaValueExpression(this.WorkTimeId))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_workTimeLine, fieldStr(WorkTimeLine, WeekDay)), new SysDaValueExpression(this.WeekDay))
            .and(new SysDaNotEqualsExpression(new SysDaFieldExpression(_workTimeLine, fieldStr(WorkTimeLine, RecId)), new SysDaValueExpression(this.RecId)))));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for overlap with other existing periods.
    /// </summary>
    /// <returns>true if valid; otherwise, false.</returns>
    internal boolean checkOverlap()
    {
        WorkTimeCheck workTimeCheck = this.createWorkTimeCheck();
        WorkTimeLine workTimeLine;
        SysDaSearchObject searchObject = new SysDaSearchObject(this.buildOverlapValidationQuery(workTimeLine));
        SysDaSearchStatement statement = new SysDaSearchStatement();

        while (statement.nextRecord(searchObject))
        {
            if (workTimeLine.isOverlapping(workTimeCheck))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOverlapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the record is overlapping with the time checker.
    /// </summary>
    /// <param name = "_workTimeCheck">The time checker.</param>
    /// <returns>true if overlapping; otherwise, false.</returns>
    protected boolean isOverlapping(WorkTimeCheck _workTimeCheck)
    {
        return !_workTimeCheck.checkNotOverlapping(this.FromTime, this.ToTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if current work time line record is valid.
    /// </summary>
    /// <returns>true if work time line record is valid; otherwise, false.</returns>
    public boolean validateWrite()
    {
        boolean ret = super();

        ret = ret && this.checkTime();
        ret = ret && this.checkOverlap();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDefinedSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the defined seconds.
    /// </summary>
    /// <param name = "_workTimeId">The work time id.</param>
    /// <param name = "_weekDay">The week day.</param>
    /// <returns>The number of seconds for the given work time id and week day.</returns>
    public static Seconds calcDefinedSeconds(
        WorkTimeId  _workTimeId,
        WeekDay     _weekDay
        )
    {
        WorkTimeLine    workTimeLine;
        Seconds         seconds;

        while select workTimeLine
            index hint TimeDayIdx
            where workTimeLine.WorkTimeId   == _workTimeId &&
                  workTimeLine.WeekDay      == _weekDay
        {
            seconds += real2int(workTimeLine.capacity(100));
        }

        return seconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record exists in the <c>WorkTimeLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        return _recId &&
               (select firstonly RecId from workTimeLine
                    where workTimeLine.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WorkTimeLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>WorkTimeLine</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WorkTimeLine</c> table; otherwise, an empty record.
    /// </returns>
    public static WorkTimeLine find(
        recId   _recId,
        boolean _forUpdate = false)
    {
        WorkTimeLine workTimeLine;

        if (_recId)
        {
            workTimeLine.selectForUpdate(_forUpdate);

            select firstonly workTimeLine
                where workTimeLine.RecId == _recId;
        }

        return workTimeLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        if (_fieldName == fieldStr(WorkTimeLine, ToTime))
        {
            if (this.ToTime == 0)
            {
                // Needed in order to support 12H calendar entry of midnight
                this.ToTime = #secondsPerDay;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS124215</DeveloperDocumentation>
	<FormRef>WorkTimeTable</FormRef>
	<Label>@SYS1</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>WeekDay</TitleField1>
	<TitleField2>WorkTimeId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>TimeDayIdx</ClusteredIndex>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkTimeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WeekDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Effectivity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Property</Name>
			<Label>@SYS682</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkingTime</Name>
			<Label>@SYS11965</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WeekDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Effectivity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkingTimeTemplate</Name>
			<Label>@SYS25935</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkTimeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Effectivity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EffectivityPct</ExtendedDataType>
			<Label>@SYS1472</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>FromTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromTime</ExtendedDataType>
			<Label>@SCM:WorkCalendarFrom</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ToTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToTime</ExtendedDataType>
			<Label>@SCM:WorkCalendarTo</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>WeekDay</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WeekDay</ExtendedDataType>
			<Label>@SYS4569</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkTimeId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WorkTimeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS11965</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TimeDayIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkTimeId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WeekDay</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>MRPTimeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124216</EntityRelationshipRole>
			<RelatedTable>WorkTimeTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>WorkingTimeTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TimeTransaction</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkTimeId</Name>
					<Field>WorkTimeId</Field>
					<RelatedField>WorkTimeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WrkCtrProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PropertyId</Name>
					<Field>PropertyId</Field>
					<RelatedField>PropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PropertyIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>