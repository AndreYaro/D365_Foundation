<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResPhysicalProductDimensions</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResPhysicalProductDimensions extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.DimensionType = EcoResPhysicalDimensionType::Packing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>volume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the volume from the length dimensions.
    /// </summary>
    /// <returns>
    /// The calculated volume.
    /// </returns>
    [Hookable(false)]
    public display Volume volume()
    {
        return this.Depth * this.Height * this.Width;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(EcoResPhysicalProductDimensions, Product):
                if (this.Product)
                {
                    if (EcoResProduct::find(this.Product) is EcoResDistinctProductVariant)
                    {
                        ret = checkFailed("@SCM:PhysicalProductVariantDimensionsNotEnabledError");
                    }
                }
                break;

            case fieldNum(EcoResPhysicalProductDimensions, Depth):
                if (this.Depth < 0)
                {
                    ret = checkFailed("@WAX2925");
                }
                break;

            case fieldNum(EcoResPhysicalProductDimensions, Height):
                if (this.Height < 0)
                {
                    ret = checkFailed("@WAX2925");
                }
                break;

            case fieldNum(EcoResPhysicalProductDimensions, Width):
                if (this.Width < 0)
                {
                    ret = checkFailed("@WAX2925");
                }
                break;

            case fieldNum(EcoResPhysicalProductDimensions, Weight):
                if (this.Weight < 0)
                {
                    ret = checkFailed("@WAX2925");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static EcoResPhysicalProductDimensions find(
        EcoResProductRecId          _productRecId, 
        UnitOfMeasureSymbol         _physicalUnitSymbol, 
        EcoResPhysicalDimensionType _dimensionType, 
        boolean                     _forupdate = false)
    {
        EcoResPhysicalProductDimensions physicalProductDimensions;

        if (_productRecId && _physicalUnitSymbol)
        {
            physicalProductDimensions.selectForUpdate(_forupdate);

            select firstonly physicalProductDimensions
                where physicalProductDimensions.Product             == _productRecId        &&
                      physicalProductDimensions.PhysicalUnitSymbol  == _physicalUnitSymbol  &&
                      physicalProductDimensions.DimensionType       == _dimensionType;
        }

        return physicalProductDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePhysicalDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the physical dimensions for a specific product, unit of measure and type.
    /// </summary>
    /// <param name = "_productKey">
    /// A <c>EcoResProductKey</c> object to identify the product.
    /// </param>
    /// <param name = "_physicalUnitSymbol">
    /// A unit of measure symbol.
    /// </param>
    /// <param name = "_dimensionType">
    /// A <c>EcoResPhysicalDimensionType</c> value identify the type of physical dimension to retrieve.
    /// </param>
    /// <returns>
    /// The identified EcoResPhysicalProductDimensions record.
    /// </returns>
    [Hookable(false)]
    public static EcoResPhysicalProductDimensions retrievePhysicalDimensions(
        EcoResProductKey            _productKey,
        UnitOfMeasureSymbol         _physicalUnitSymbol,
        EcoResPhysicalDimensionType _dimensionType)
    {
        EcoResPhysicalProductDimensions physicalProductDimensions;

        if (!_productKey.isSpecified() || !_physicalUnitSymbol)
        {
            return physicalProductDimensions;
        }

        EcoResProductRecId productRecId = _productKey.parmProductRecId();
        EcoResProduct product = EcoResProduct::find(productRecId);

        if (product is EcoResDistinctProductVariant)
        {
            EcoResDistinctProductVariant productVariant = product as EcoResDistinctProductVariant;
            productRecId = productVariant.ProductMaster;
        }
       
        physicalProductDimensions = EcoResPhysicalProductDimensions::find(productRecId, _physicalUnitSymbol, _dimensionType);

        return physicalProductDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePackingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a packing dimensions object for a specific product and unit of measure.
    /// </summary>
    /// <param name = "_productKey">
    /// A <c>EcoResProductKey</c> object to identify the product.
    /// </param>
    /// <param name = "_physicalUnitSymbol">
    /// A unit of measure symbol.
    /// </param>
    /// <returns>
    /// The <c>EcoResIPhysicalDimensions</c> physical dimension object.
    /// </returns>
    [Hookable(false)]
    internal static EcoResIPhysicalDimensions retrievePackingDimensions(
        EcoResProductKey    _productKey,
        UnitOfMeasureSymbol _physicalUnitSymbol)
    {
        EcoResIPhysicalDimensions physicalDimensions;

        EcoResPhysicalProductDimensions physicalProductDimensions = EcoResPhysicalProductDimensions::retrievePhysicalDimensions(_productKey, _physicalUnitSymbol, EcoResPhysicalDimensionType::Packing);

        if (physicalProductDimensions.RecId)
        {
            physicalDimensions = EcoResPhysicalProductDimensionsPhysicalDimensionsImplementation::createInstance(physicalProductDimensions);
        }
        else
        {
            if (_productKey.instanceItemKey() && _productKey.instanceItemKey().parmItemDataAreaId())
            {
                changecompany(_productKey.instanceItemKey().parmItemDataAreaId())
                {
                    WHSPhysDimUOM physDimUOM = WHSPhysDimUOM::getPhysDimUOMByItem(_productKey.instanceItemKey().parmItemId(), _physicalUnitSymbol);

                    if (physDimUOM.RecId)
                    {
                        physicalDimensions = WHSPhysDimUOMPhysicalDimensionsImplementation::createInstance(physDimUOM);
                    }
                }
            }
        }

        return physicalDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveNestedPackingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a nested packing dimensions object for a specific product and unit of measure.
    /// </summary>
    /// <param name = "_productKey">
    /// A <c>EcoResProductKey</c> object to identify the product.
    /// </param>
    /// <param name = "_physicalUnitSymbol">
    /// A unit of measure symbol.
    /// </param>
    /// <returns>
    /// The <c>EcoResIPhysicalDimensions</c> physical dimension object.
    /// </returns>    
    [Hookable(false)]
    internal static EcoResIPhysicalDimensions retrieveNestedPackingDimensions(
        EcoResProductKey    _productKey,
        UnitOfMeasureSymbol _physicalUnitSymbol)
    {
        EcoResIPhysicalDimensions physicalDimensions;

        EcoResPhysicalProductDimensions physicalProductDimensions = EcoResPhysicalProductDimensions::retrievePhysicalDimensions(_productKey, _physicalUnitSymbol, EcoResPhysicalDimensionType::NestedPacking);

        if (physicalProductDimensions.RecId)
        {
            physicalDimensions = EcoResPhysicalProductDimensionsPhysicalDimensionsImplementation::createInstance(physicalProductDimensions);
        }

        return physicalDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveStandardPackingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a standard packaging dimensions object for a specific product in handling unit.
    /// </summary>
    /// <param name = "_productKey">
    /// A <c>EcoResProductKey</c> object to identify the product.
    /// </param>
    /// <returns>
    /// The <c>EcoResIPhysicalDimensions</c> physical dimension object.
    /// </returns>
    [Hookable(false)]
    internal static EcoResIPhysicalDimensions retrieveStandardPackingDimensions(
        EcoResProductKey    _productKey)
    {
        EcoResIPhysicalDimensions physicalDimensions = InventTablePhysicalDimensionsImplementation::createInstance(_productKey);

        return physicalDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePackingVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the packing volume for a quanity of a product according to the specified volume unit.
    /// </summary>
    /// <param name = "_productKey">
    /// A <c>EcoResProductKey</c> object to identify the product.
    /// </param>
    /// <param name = "_handlingQty">
    /// A handling quantity.
    /// </param>
    /// <param name = "_handlingUnitSymbol">
    /// A handling unit.
    /// </param>
    /// <param name = "_volumeUnitSymbol">
    /// A volume unit. 
    /// </param>
    /// <returns>
    /// The volume in the volume unit.
    /// </returns>
    [Hookable(false)]
    public static Volume calculatePackingVolume(
        EcoResProductKey    _productKey,
        InventHandlingQty   _handlingQty,
        UnitOfMeasureSymbol _handlingUnitSymbol,
        UnitOfMeasureSymbol _volumeUnitSymbol)
    {
        if (!_productKey.isSpecified())
        {
            throw error(Error::missingMethodParameter(tableStr(EcoResPhysicalProductDimensions), funcName(), identifierStr(_productKey)));
        }

        Volume volume;

        if (!_handlingUnitSymbol || !_handlingQty)
        {
            return volume;
        }

        InventHandlingQty handlingQty = abs(_handlingQty);

        if (handlingQty > 1.0) // Nested packing dimensions are relevant for all quantities except the first piece.
        {
            EcoResIPhysicalDimensions nestedPackingDimensions = EcoResPhysicalProductDimensions::retrieveNestedPackingDimensions(_productKey, _handlingUnitSymbol);

            if (nestedPackingDimensions)
            {
                nestedPackingDimensions = EcoResUnitConvertedPhysicalDimensions::createInstance(nestedPackingDimensions, nestedPackingDimensions.parmMassUnitSymbol(), nestedPackingDimensions.parmLengthUnitSymbol(), _volumeUnitSymbol);

                volume += (handlingQty - 1.0) * nestedPackingDimensions.parmVolume();
                handlingQty = 1.0;
            }
        }

        EcoResIPhysicalDimensions packingDimensions = EcoResPhysicalProductDimensions::retrievePackingDimensions(_productKey, _handlingUnitSymbol);

        if (!packingDimensions)
        {
            packingDimensions = EcoResPhysicalProductDimensions::retrieveStandardPackingDimensions(_productKey);

            handlingQty = EcoResPhysicalProductDimensions::convertProductHandlingQty(_productKey, _handlingUnitSymbol, packingDimensions.parmPhysicalUnitSymbol(), handlingQty);
        }

        packingDimensions = EcoResUnitConvertedPhysicalDimensions::createInstance(packingDimensions, packingDimensions.parmMassUnitSymbol(), packingDimensions.parmLengthUnitSymbol(), _volumeUnitSymbol);

        volume += handlingQty * packingDimensions.parmVolume();

        return _handlingQty >= 0.0 ? volume : -volume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePackingWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the packing weight for a quanity of a product according to the specified mass unit.
    /// </summary>
    /// <param name = "_productKey">
    /// A <c>EcoResProductKey</c> object to identify the product.
    /// </param>
    /// <param name = "_handlingQty">
    /// A handling quantity.
    /// </param>
    /// <param name = "_handlingUnitSymbol">
    /// A handling unit.
    /// </param>
    /// <param name = "_massUnitSymbol">
    /// A mass unit.
    /// </param>
    /// <returns>
    /// The weight in the mass unit.
    /// </returns>    
    [Hookable(false)]
    public static Weight calculatePackingWeight(
        EcoResProductKey    _productKey,
        InventHandlingQty   _handlingQty,
        UnitOfMeasureSymbol _handlingUnitSymbol,
        UnitOfMeasureSymbol _massUnitSymbol)
    {
        if (!_productKey.isSpecified())
        {
            throw error(Error::missingMethodParameter(tableStr(EcoResPhysicalProductDimensions), funcName(), identifierStr(_productKey)));
        }

        Weight weight;

        if (!_handlingUnitSymbol || !_handlingQty)
        {
            return weight;
        }

        InventHandlingQty handlingQty = abs(_handlingQty);

        if (handlingQty > 1.0) // Nested packing dimensions are relevant for all quantities except the first piece.
        {
            EcoResIPhysicalDimensions nestedPackingDimensions = EcoResPhysicalProductDimensions::retrieveNestedPackingDimensions(_productKey, _handlingUnitSymbol);

            if (nestedPackingDimensions)
            {
                nestedPackingDimensions = EcoResUnitConvertedPhysicalDimensions::createInstance(nestedPackingDimensions, _massUnitSymbol, nestedPackingDimensions.parmLengthUnitSymbol(), nestedPackingDimensions.parmVolumeUnitSymbol());

                weight += (handlingQty - 1.0) * nestedPackingDimensions.parmWeight();
                handlingQty = 1.0;
            }
        }

        EcoResIPhysicalDimensions packingDimensions = EcoResPhysicalProductDimensions::retrievePackingDimensions(_productKey, _handlingUnitSymbol);

        if (!packingDimensions)
        {
            packingDimensions = EcoResPhysicalProductDimensions::retrieveStandardPackingDimensions(_productKey);

            handlingQty = EcoResPhysicalProductDimensions::convertProductHandlingQty(_productKey, _handlingUnitSymbol, packingDimensions.parmPhysicalUnitSymbol(), handlingQty);
        }

        packingDimensions = EcoResUnitConvertedPhysicalDimensions::createInstance(packingDimensions, _massUnitSymbol, packingDimensions.parmLengthUnitSymbol(), packingDimensions.parmVolumeUnitSymbol());
            
        weight += handlingQty * packingDimensions.parmWeight();

        return _handlingQty >= 0.0 ? weight : -weight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertProductHandlingQty</Name>
				<Source><![CDATA[
    static private InventHandlingQty convertProductHandlingQty(EcoResProductKey _productKey, UnitOfMeasureSymbol _fromPhysicalUnitSymbol, UnitOfMeasureSymbol _toPhysicalUnitSymbol, InventHandlingQty _handlingQty)
    {
        InventItemKey inventItemKey = _productKey.instanceItemKey();
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
            inventItemKey.parmItemId(),
            inventItemKey.parmInventDimId(),
            _handlingQty,
            _fromPhysicalUnitSymbol,
            _toPhysicalUnitSymbol,
            NoYes::Yes,
            NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:EcoResPhysicalProductDimensionsDevDoc</DeveloperDocumentation>
	<FormRef>EcoResPhysicalProductDimensions</FormRef>
	<Label>@SCM:PhysicalProductDimensions</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Product</TitleField1>
	<TitleField2>PhysicalUnitSymbol</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>PhysicalProductUnitIdx</ClusteredIndex>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhysicalUnitSymbol</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Weight</Name>
			<Label>@SYS11575</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Weight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MassUnitSymbol</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Length</Name>
			<Label>@SYS3064</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Depth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Height</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Width</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LengthUnitSymbol</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Volume</Name>
			<Label>@SYS16590</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>volume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VolumeUnitSymbol</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DimensionType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>EcoResPhysicalDimensionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PhysicalUnitSymbol</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Label>@SCM:PhysicalDimensionPhysicalUnit</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Depth</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDepth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Height</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventHeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Weight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Weight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Width</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventWidth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MassUnitSymbol</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Label>@SCM:PhysicalDimensionWeightUnit</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LengthUnitSymbol</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Label>@SCM:PhysicalDimensionLengthUnit</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VolumeUnitSymbol</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Label>@SCM:PhysicalDimensionVolumeUnit</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PhysicalProductUnitIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DimensionType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PhysicalUnitSymbol</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Product</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EcoResProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product</Name>
					<Field>Product</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PhysicalUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PhysicialUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PhysicalUnitProductDimensions</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PhysicalUnitSymbol</Name>
					<Field>PhysicalUnitSymbol</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SymbolIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MassUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>MassUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MassUnitProductDimensions</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MassUnitSymbol</Name>
					<Field>MassUnitSymbol</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>UnitOfMeasureClass</Name>
					<RelatedField>UnitOfMeasureClass</RelatedField>
					<ValueStr>UnitOfMeasureClass::Mass</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SymbolIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VolumeUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VolumeUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VolumeUnitProductDimensions</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VolumeUnitSymbol</Name>
					<Field>VolumeUnitSymbol</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>UnitOfMeasureClass</Name>
					<RelatedField>UnitOfMeasureClass</RelatedField>
					<ValueStr>UnitOfMeasureClass::DryVolume</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SymbolIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LengthUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LengthUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LengthUnitProductDimensions</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LengthUnitSymbol</Name>
					<Field>LengthUnitSymbol</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>UnitOfMeasureClass</Name>
					<RelatedField>UnitOfMeasureClass</RelatedField>
					<ValueStr>UnitOfMeasureClass::Length</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SymbolIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>