<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpTaxWithholdCertificateHeader_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpTaxWithholdCertificateHeader_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromTaxWithholdTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c> TmpTaxWithholdCertificateHeader_IN </c> table.
    /// </summary>
    /// <param name="_taxType">
    /// The withhold tax type that is used to find the record.
    /// </param>
    /// <param name="_account">
    /// The account ID used to find the record.
    /// </param>
    /// <param name="_fromDate">
    /// The start date is used to find the record.
    /// </param>
    /// <param name="_toDate">
    /// The end date is used to find the record.
    /// </param>
    /// <param name="_certificateNum">
    /// The withhold tax certification number is used to find the record.
    /// </param>
    /// <param name="_tmpTaxWithholdCertificateHeader">
    /// The <c> TmpTaxWithholdCertificateHeader_IN </c> table buffer.
    /// </param>
    /// <param name="_custVendACType">
    /// The <c>custVendACType</c> type.
    /// </param>
    public void initFromTaxWithholdTrans(
        TaxWithholdType_IN                  _taxType,
        AccountNum                           _account,
        TransDate                            _fromDate,
        TransDate                            _toDate,
        TaxWithholdCertificateNumber_IN      _certificateNum,
        TmpTaxWithholdCertificateHeader_IN   _tmpTaxWithholdCertificateHeader,
        TaxWithholdACType_IN                 _custVendACType)
    {
        TaxWithholdTrans_IN                taxWithholdTrans;
        TaxWithholdTrans_IN                taxWithholdTransLoc;
        TaxWithholdCodeType_IN             taxWithholdType;
        TaxWithholdCertificateTrans_IN     taxWithholdCertificateTrans;
        AmountCur                          amountOrigin;
        AmountCur                          adjustedAmount;
        LedgerJournalTrans                 ledgerJournalTransLoc;
        boolean                            checkLedger = true;

        taxWithholdType = _taxType == TaxWithholdType_IN::TDS ? TaxWithholdCodeType_IN::TDS : TaxWithholdCodeType_IN::TCS;
        ttsbegin;
        delete_from _tmpTaxWithholdCertificateHeader;
        ttscommit;

        ttsbegin;
        if (_certificateNum)
        {
            while select sum(TaxWithholdAmountCur),sum(AdjustedTaxWithholdAmount), Voucher, TransDate, TaxType, Source from taxWithholdTrans
                group by Voucher, TransDate, TaxType, Source
                where taxWithholdTrans.TransDate            >= _fromDate
                   && taxWithholdTrans.TransDate            <= _toDate
                   &&(taxWithholdTrans.CustAccount          == _account
                   || taxWithholdTrans.VendAccount          == _account
                   || taxWithholdTrans.AccountId)
                   && taxWithholdTrans.TaxType              == taxWithholdType
                   && taxWithholdTrans.RecoverableAccount   == true

            {
                if (_custVendACType == TaxWithholdACType_IN::Ledger)
                {
                    select firstonly LedgerDimension, OffsetLedgerDimension, Voucher from ledgerJournalTransLoc
                        where ledgerJournalTransLoc.Voucher     ==  taxWithholdTrans.Voucher;

                    if (LedgerDimensionFacade::getMainAccountFromLedgerDimension(ledgerJournalTransLoc.LedgerDimension).MainAccountId        == _account ||
                        LedgerDimensionFacade::getMainAccountFromLedgerDimension(ledgerJournalTransLoc.OffsetLedgerDimension).MainAccountId  == _account)
                    {
                        checkLedger = true;
                    }
                    else
                    {
                        checkLedger = false;
                    }
                }
                if (checkLedger)
                {
                    amountOrigin = 0;
                    select firstonly CertificateNumber from taxWithholdCertificateTrans
                        where taxWithholdCertificateTrans.Account               == _account
                           && taxWithholdCertificateTrans.Voucher               == taxWithholdTrans.Voucher
                           && taxWithholdCertificateTrans.TransDate             == taxWithholdTrans.TransDate
                           && taxWithholdCertificateTrans.TaxType               == taxWithholdType;

                    while select AmountOriginMST from taxWithholdTransLoc
                        group by Voucher,LineNum, AmountOriginMST
                        where taxWithholdTransLoc.TransDate   >= _fromDate
                           && taxWithholdTransLoc.TransDate   <= _toDate
                           &&(taxWithholdTransLoc.CustAccount == _account
                           || taxWithholdTransLoc.VendAccount == _account
                           || taxWithholdTransLoc.Voucher     == ledgerJournalTransLoc.Voucher)
                           && taxWithholdTransLoc.TaxType     == taxWithholdType
                           && taxWithholdTransLoc.Voucher     == taxWithholdTrans.Voucher
                    {
                        amountOrigin += taxWithholdTransLoc.AmountOriginMST;
                    }

                    adjustedAmount = abs(taxWithholdTrans.AdjustedTaxWithholdAmount) == 0 ? abs(taxWithholdTrans.TaxWithholdAmountCur) : abs(taxWithholdTrans.AdjustedTaxWithholdAmount);
                    if (!taxWithholdCertificateTrans.CertificateNumber)
                    {
                        this.Voucher   = taxWithholdTrans.Voucher;
                        this.TransDate = taxWithholdTrans.TransDate;
                        this.TaxAmount = adjustedAmount;
                        this.Amount    = amountOrigin;
                        this.TaxType   = _taxType;
                        this.Source    = taxWithholdTrans.Source;
                        this.doInsert();
                    }
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInToTmpTaxWithhold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c> TmpTaxWithholdCertificateHeader_IN </c> table.
    /// </summary>
    /// <param name="_taxType">
    /// The withhold tax type that is used to allocate the value.
    /// </param>
    public void  insertInToTmpTaxWithhold(TaxWithholdType_IN    _taxType)
    {
        ttsbegin;
        this.TaxType    = _taxType;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c> TmpTaxWithholdCertificateHeader_IN </c> table for the specified record ID.
    /// </summary>
    /// <param name="_recId">
    /// The unique record ID.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A value that is used when the table is not automatically concurrent; optional.
    /// </param>
    /// <returns>
    /// A buffer that contains the <c>TmpTaxWithholdCertificateHeader_IN</c> table.
    /// </returns>
    public static TmpTaxWithholdCertificateHeader_IN find(
        RefRecId            _recId,
        boolean             _forupdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TmpTaxWithholdCertificateHeader_IN tmpTaxWithholdCertificateHeader;

        tmpTaxWithholdCertificateHeader.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            tmpTaxWithholdCertificateHeader.concurrencyModel(_concurrencyModel);
        }

        select firstonly tmpTaxWithholdCertificateHeader
            where tmpTaxWithholdCertificateHeader.RecId == _recId;

        return tmpTaxWithholdCertificateHeader;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<Label>@GLS6141</Label>
	<TableGroup>Transaction</TableGroup>
	<ClusteredIndex></ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex></PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS6928</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS6928</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Source</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxModuleTypeId</ExtendedDataType>
			<EnumType>TaxModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS76123</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxWithholdType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>