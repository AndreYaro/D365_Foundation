<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxPurchaseTaxValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxPurchaseTaxValue extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existDateInInterval</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Check for an interval record, excluding the current one, based on the specified date.
    /// </summary>
    /// <param name="_date">
    ///    A date in a valid date range record.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    private boolean existDateInInterval(TaxValidDate _date)

    {
        date                d1 = dateNull();
        date                d2 = maxDate();
        boolean             returnValue = false;
        TaxPurchaseTaxValue taxPurchaseTaxValueCheck;
        ;

        if (_date)
        {
            select validtimestate(d1, d2) RecId
                from taxPurchaseTaxValueCheck
                    where taxPurchaseTaxValueCheck.TaxPurchaseTaxTable   == this.TaxPurchaseTaxTable
                        && taxPurchaseTaxValueCheck.ValidFrom            <= _date
                        && taxPurchaseTaxValueCheck.ValidTo              >= _date
                        && taxPurchaseTaxValueCheck.RecId                != this.RecId;
            returnValue = taxPurchaseTaxValueCheck.RecId != 0;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            /// The date effectivity framework automatically adjust the date of the overlapping period.  Per requirement,
            /// the user will be warned about the adjustment.
            case fieldNum(TaxPurchaseTaxValue, ValidFrom) :
                if (this.existDateInInterval(this.ValidFrom)
                    && hasGUI())
                {
                    if (Box::yesNo("@SYS152367", DialogButton::Yes) == DialogButton::No)
                    {
                        ret = false;
                    }
                }
                break;

            case fieldNum(TaxPurchaseTaxValue, ValidTo) :
                if (this.existDateInInterval(this.ValidTo)
                    && hasGUI())
                {
                    if (Box::yesNo("@SYS152370", DialogButton::Yes) == DialogButton::No)
                    {
                        ret = false;
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the <c>TaxPurchaseTaxValue</c> table.
    /// </summary>
    /// <param name="_validFrom">
    ///    The start date of the period.
    /// </param>
    /// <param name="_validTo">
    ///    The end date of the period.
    /// </param>
    /// <param name="_taxPurchaseTaxRefRecId">
    ///    The record ID of the <c>TaxPurchaseTaxTable</c> record.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(validFromDate _validFrom, validToDate _validTo,
                                        RefRecId _taxPurchaseTaxRefRecId = 0)
    {
        boolean ret = true;
        ;

        if (!TaxPurchaseTaxValue::exist(_validFrom, _validTo, _taxPurchaseTaxRefRecId))
        {
            ret = checkFailed(strFmt(TaxPurchaseTaxValue::txtNotExist(), _validFrom, _validTo));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGapExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a gap exists in the date ranges that are used in existing records.
    /// </summary>
    /// <returns>
    ///    true if a gap exists; otherwise, false.
    /// </returns>
    public static boolean checkGapExists()
    {
        TaxPurchaseTaxValue taxPurchaseTaxValue;
        date                lastToDate;
        date                lastFromDate;
        boolean             isFirstRecord = true;

        date d1 = dateNull();
        date d2 = maxDate();

        select validtimestate(d1, d2) taxPurchaseTaxValue
            order by ValidFrom;
        while (taxPurchaseTaxValue)
        {
            if (!isFirstRecord)
            {
                // Check to make sure there is no gap in the intervals
                //  If the last periods toDate and this period's fromDate are not
                //  successive or the Maximum percentage and Maximum relation fields
                //  are 0, return true
                if ((taxPurchaseTaxValue.TaxCalcMode == TaxCalcMode::FullAmounts
                        && (lastToDate+1) != taxPurchaseTaxValue.ValidFrom)
                    || (taxPurchaseTaxValue.TaxCalcMode == TaxCalcMode::Interval
                        && lastFromDate != taxPurchaseTaxValue.ValidFrom
                        && (lastToDate+1) != taxPurchaseTaxValue.ValidFrom))
                {
                    return true;
                }
            }
            else    // If this is the first record, just set the lastToDate
            {
                isFirstRecord = false;
            }

            lastToDate = taxPurchaseTaxValue.ValidTo;
            lastFromDate = taxPurchaseTaxValue.ValidFrom;

            next taxPurchaseTaxValue;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the <c>TaxPurchaseTaxValue</c> table.
    /// </summary>
    /// <param name="_validFrom">
    ///    The start date of the period.
    /// </param>
    /// <param name="_validTo">
    ///    The end date of the period.
    /// </param>
    /// <param name="_taxPurchaseTaxRefRecId">
    ///    The record ID of the <c>TaxPurchaseTaxTable</c> record.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(validFromDate _validFrom, validToDate _validTo,
                                RefRecId _taxPurchaseTaxRefRecId = 0)
    {
        date                minDateLimit = dateNull();
        date                maxDateLimit = maxDate();
        TaxPurchaseTaxValue taxPurchaseTaxValue;
        RefRecId            taxPurchaseTaxRefRecId;
        boolean             returnValue = false;

        taxPurchaseTaxRefRecId = _taxPurchaseTaxRefRecId;
        if (taxPurchaseTaxRefRecId == 0)
        {
            taxPurchaseTaxRefRecId = TaxPurchaseTaxTable::find().RecId;
        }

        select firstonly validtimestate(minDateLimit, maxDateLimit) RecId from
            taxPurchaseTaxValue
                    where
                    taxPurchaseTaxValue.TaxPurchaseTaxTable == taxPurchaseTaxRefRecId
                    && taxPurchaseTaxValue.ValidFrom        == _validFrom
                    && taxPurchaseTaxValue.ValidTo          == _validTo;

        if (taxPurchaseTaxValue.RecId != 0)
        {
            returnValue = true;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>TaxPurchaseTaxValue</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <param name="_minDate">
    ///    The minimum date for which to perform the search.
    /// </param>
    /// <param name="_maxDate">
    ///    The maximum date for which to perform the search.
    /// </param>
    /// <returns>
    ///    A buffer that contains the <c>TaxPurchaseTaxValue</c> table.
    /// </returns>
    public static TaxPurchaseTaxValue find(
        recId                   _recId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto,
        date                    _minDate = dateNull(),
        date                    _maxDate = maxDate())
    {
        TaxPurchaseTaxValue taxPurchaseTaxValue;

        taxPurchaseTaxValue.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxPurchaseTaxValue.concurrencyModel(_concurrencyModel);
        }

        select firstonly validtimestate(_minDate, _maxDate)
            taxPurchaseTaxValue
            where
                taxPurchaseTaxValue.RecId == _recId;

        return taxPurchaseTaxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>TaxPurchaseTaxValue</c> table for the specified ID.
    /// </summary>
    /// <param name="_date">
    ///    The date for which the records will be searched.
    /// </param>
    /// <param name="_taxPurchaseTaxRefRecId">
    ///    The record ID of a record in the <c>TaxPurchaseTaxTable</c> table.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for updating; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <param name="_minDate">
    ///    The minimum date for which the search will be done.
    /// </param>
    /// <param name="_maxDate">
    ///    The maximum date for which the search will be done.
    /// </param>
    /// <returns>
    ///    A buffer that contains the <c>TaxPurchaseTaxValue</c> table.
    /// </returns>
    /// <remarks>
    ///    This method was named find() in Microsoft Dynamics AX 2009, and it is used by Austrian reports.
    /// </remarks>
    public static TaxPurchaseTaxValue findByTaxDate(
        TaxValidDate            _date,
        RefRecId                _taxPurchaseTaxRefRecId = 0,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto,
        date                    _minDate = dateNull(),
        date                    _maxDate = maxDate())
    {
        TaxPurchaseTaxValue taxPurchaseTaxValue;

        taxPurchaseTaxValue.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxPurchaseTaxValue.concurrencyModel(_concurrencyModel);
        }

        if (_taxPurchaseTaxRefRecId == 0)
        {
            _taxPurchaseTaxRefRecId = TaxPurchaseTaxTable::find().RecId;
        }

        select firstonly validtimestate(_minDate, _maxDate)
            taxPurchaseTaxValue
                    where
                    taxPurchaseTaxValue.TaxPurchaseTaxTable == _taxPurchaseTaxRefRecId &&
                    ((taxPurchaseTaxValue.ValidFrom  <= _date) || !taxPurchaseTaxValue.ValidFrom) &&
                    ((taxPurchaseTaxValue.ValidTo    >= _date) || !taxPurchaseTaxValue.ValidTo);

        return taxPurchaseTaxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchaseTaxAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the duty tax.
    /// </summary>
    /// <param name="_transDate">
    ///    The date of the transaction.
    /// </param>
    /// <param name="_baseAmountMST">
    ///    The amount of the transaction.
    /// </param>
    /// <returns>
    ///    The duty tax amount, based on the periods that are set up in duty tax setup table.
    /// </returns>
    static AmountMST purchaseTaxAmountMST(TransDate _transDate,
                                        AmountMST _baseAmountMST)
    {
        AmountMST           purchaseTaxAmountMST;

        purchaseTaxAmountMST = _baseAmountMST *
                               TaxPurchaseTaxValue::findByTaxDate(_transDate).Percent / 100;
        return CurrencyExchangeHelper::amount(purchaseTaxAmountMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS108307";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        if (ret)
        {
            if (this.TaxLimitMax 
                && this.TaxLimitMin > this.TaxLimitMax)
            {
                return checkFailed("@Tax:LowerLimitLessThanUpperLimitCheck");
            }
            if (TaxPurchaseTaxValue::existSamePeriod(this.TaxPurchaseTaxTable, this.ValidFrom, this.ValidTo, this.RecId))
            {
                if (TaxPurchaseTaxValue::existAmountOverlap(this.TaxPurchaseTaxTable, this.ValidFrom, this.ValidTo, this.TaxLimitMin, this.TaxLimitMax, this.RecId))
                {
                    return checkFailed("@Tax:AmountLimitOverlap");
                }
            }
            else
            {
                if (this.existPeriodOverlap(this.TaxPurchaseTaxTable,
                    this.ValidFrom,
                    this.ValidTo,
                    this.RecId))
                {
                    return checkFailed("@Tax:DateIntervalOverlap");
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPeriodOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if period overlap exists.
    /// </summary>
    /// <param name="_taxPurchaseTaxTable">
    /// The recId for <c>TaxPurchaseTaxTable</c>.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <param name="_recId">
    /// The recid for <c>TaxPurchaseTaxValue</c>.
    /// </param>
    /// <returns>
    /// True if period overlap exist, otherwise false.
    /// </returns>
    private boolean existPeriodOverlap(RecId _taxPurchaseTaxTable,
        TaxValidDate _fromDate,
        TaxValidDate _toDate,
        RecId _recId)
    {
        TaxPurchaseTaxValue taxPurchaseTaxValue;
        date validMinDate = dateNull();
        date validMaxDate = maxDate();
        boolean ret = false;
    
        if (_taxPurchaseTaxTable)
        {
            while select validtimestate(validMinDate, validMaxDate) ValidFrom, ValidTo from taxPurchaseTaxValue
                where taxPurchaseTaxValue.TaxPurchaseTaxTable == _taxPurchaseTaxTable
                    && taxPurchaseTaxValue.RecId != _recId
            {
                if (!_fromDate || !_toDate)
                    ret = true;

                if ((_fromDate >= taxPurchaseTaxValue.ValidFrom
                        && _fromDate <= taxPurchaseTaxValue.ValidTo)
                    || (_toDate >= taxPurchaseTaxValue.ValidFrom
                        && _toDate <= taxPurchaseTaxValue.ValidTo))
                    ret = true;

                if ((taxPurchaseTaxValue.ValidFrom >= _fromDate
                        && taxPurchaseTaxValue.ValidFrom <= _toDate)
                    || (taxPurchaseTaxValue.ValidTo >= _fromDate
                        && taxPurchaseTaxValue.ValidTo <= _toDate))
                    ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSamePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the same period exists.
    /// </summary>
    /// <param name = "_taxPurchaseTaxTransRecId">The recId for <c>TaxPurchaseTaxTable</c>.</param>
    /// <param name = "_fromDate">The from date.</param>
    /// <param name = "_toDate">The to date.</param>
    /// <param name = "_recId">The recId for <c>TaxPurchaseTaxTrans</c></param>
    /// <returns>True if the same period exists, otherwise false.</returns>
    private static boolean existSamePeriod(RecId _taxPurchaseTaxTableRecId,
        TaxValidDate _fromDate,
        TaxValidDate _toDate,
        RecId _recId)
    {
        TransDate validMinDate = dateNull();
        TransDate validMaxDate = maxDate();

        TaxPurchaseTaxValue taxPurchaseTaxValue;
        return (select validtimestate(validMinDate, validMaxDate) RecId from taxPurchaseTaxValue
            where taxPurchaseTaxValue.TaxPurchaseTaxTable == _taxPurchaseTaxTableRecId 
                && taxPurchaseTaxValue.ValidFrom == _fromDate 
                && taxPurchaseTaxValue.ValidTo == _toDate 
                && taxPurchaseTaxValue.RecId != _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAmountOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if amount overlap exists.
    /// </summary>
    /// <param name = "_taxPurchaseTaxId">The recId for <c>TaxPurchaseTaxTable</c>.</param>
    /// <param name = "_fromDate">The from date.</param>
    /// <param name = "_toDate">The to date.</param>
    /// <param name = "_taxLimitMin">The tax limit min.</param>
    /// <param name = "_taxLimitMax">The tax limit max.</param>
    /// <param name = "_recid">The recId for <c>TaxPurchaseTaxTrans</c>.</param>
    /// <returns>True if amount overlap exist, otherwise false.</returns>
    private static boolean existAmountOverlap(RefRecId _taxPurchaseTaxTableRecId,
        TaxValidDate _fromDate,
        TaxValidDate _toDate,
        TaxBase _taxLimitMin,
        TaxBase _taxLimitMax,
        RecId _recid)
    {
        TaxPurchaseTaxValue taxPurchaseTaxValue;
        boolean ret = false;
        TransDate validMinDate = dateNull();
        TransDate validMaxDate = maxDate();

        if (_taxPurchaseTaxTableRecId)
        {
            while select validtimestate(validMinDate, validMaxDate) TaxLimitMax, TaxLimitMin from taxPurchaseTaxValue
                where taxPurchaseTaxValue.TaxPurchaseTaxTable == _taxPurchaseTaxTableRecId 
                    && taxPurchaseTaxValue.ValidFrom == _fromDate 
                    && taxPurchaseTaxValue.ValidTo == _toDate 
                    && taxPurchaseTaxValue.RecId != _recid
            {
                if (! taxPurchaseTaxValue.TaxLimitMax && ! _taxLimitMax)
                    ret = true;

                if (taxPurchaseTaxValue.TaxLimitMin == _taxLimitMin 
                    && taxPurchaseTaxValue.TaxLimitMax == _taxLimitMax)
                    ret = true;

                if (taxPurchaseTaxValue.TaxLimitMin <= _taxLimitMin 
                    && (taxPurchaseTaxValue.TaxLimitMax >  _taxLimitMin 
                        || ! taxPurchaseTaxValue.TaxLimitMax))
                    ret = true;

                if (_taxLimitMax 
                    && taxPurchaseTaxValue.TaxLimitMin <  _taxLimitMax 
                    && (taxPurchaseTaxValue.TaxLimitMax >= _taxLimitMax 
                        || ! taxPurchaseTaxValue.TaxLimitMax))
                    ret = true;

                if (taxPurchaseTaxValue.TaxLimitMax 
                    && taxPurchaseTaxValue.TaxLimitMin >= _taxLimitMin 
                    && (taxPurchaseTaxValue.TaxLimitMax <= _taxLimitMax 
                        || ! _taxLimitMax))
                    ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>limitAmountMaxWithTaxPurchaseTaxTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets limit amount max.
    /// </summary>
    /// <param name = "_taxPurchaseTaxTable">The record for <c>TaxPurchaseTaxTable</c></param>
    /// <param name = "_date">The trans date.</param>
    /// <param name = "_amount">The start amount.</param>
    /// <returns>The limit amount max and percent.</returns>
    public static container limitAmountMaxWithTaxPurchaseTaxTable(TaxPurchaseTaxTable _taxPurchaseTaxTable,
        TransDate _date,
        TaxBase _amount)
    {
        TaxPurchaseTaxValue taxPurchaseTaxValue;
        real taxLimitMax, taxLimitMin;
        PurchaseDutyPercent purchaseDutyPercent;

        [taxLimitMax, purchaseDutyPercent, taxLimitMin] = TaxPurchaseTaxValue::limitAmountMaxAndMinWithTaxPurchaseTaxTable(_taxPurchaseTaxTable, _date, _amount);

        return [taxLimitMax, purchaseDutyPercent];
    }

]]></Source>
			</Method>
			<Method>
				<Name>limitAmountMaxAndMinWithTaxPurchaseTaxTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets limit amount max.
    /// </summary>
    /// <param name = "_taxPurchaseTaxTable">The record for <c>TaxPurchaseTaxTable</c></param>
    /// <param name = "_date">The trans date.</param>
    /// <param name = "_amount">The start amount.</param>
    /// <returns>The limit amount max, min and percent.</returns>
    public static container limitAmountMaxAndMinWithTaxPurchaseTaxTable(TaxPurchaseTaxTable _taxPurchaseTaxTable,
        TransDate _date,
        TaxBase _amount)
    {
        TaxPurchaseTaxValue taxPurchaseTaxValue;
        real taxLimitMax, taxLimitMin;
        PurchaseDutyPercent purchaseDutyPercent;

        if (_taxPurchaseTaxTable.TaxPurchaseTaxId)
        {
            // Determine upper limit of the interval
            taxPurchaseTaxValue  = TaxPurchaseTaxValue::findMax(_taxPurchaseTaxTable.RecId, _date, _amount);
            if (taxPurchaseTaxValue)
            {
                taxLimitMax = taxPurchaseTaxValue.TaxLimitMax;
                taxLimitMin = taxPurchaseTaxValue.TaxLimitMin;
                purchaseDutyPercent = taxPurchaseTaxValue.Percent;
            }
            else
            {
                taxPurchaseTaxValue  = TaxPurchaseTaxValue::findMinNextInterval(_taxPurchaseTaxTable.RecId, _date, _amount);
                taxLimitMax = taxPurchaseTaxValue.TaxLimitMin;
                taxLimitMin = _amount;
            }
        }
        return [taxLimitMax, purchaseDutyPercent, taxLimitMin];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record for <c>TaxPurchaseTaxValue</c>. 
    /// </summary>
    /// <param name = "_taxPurchaseTaxTableRecid">The recId for <c>TaxPurchaseTaxTable</c>.</param>
    /// <param name = "_date">The trans date.</param>
    /// <param name = "_base">The base amount.</param>
    /// <returns>The record of <c>TaxPurchaseTaxValue</c>.</returns>
    private static TaxPurchaseTaxValue findMax(RecId _taxPurchaseTaxTableRecid,
        TransDate _date,
        TaxBase _base)
    {
        TaxPurchaseTaxValue taxPurchaseTaxValue;
        TransDate validMinDate = dateNull();
        TransDate validMaxDate = maxDate();

        if (_taxPurchaseTaxTableRecid)
            select validtimestate(validMinDate, validMaxDate) taxPurchaseTaxValue order by TaxLimitMin desc
                where  taxPurchaseTaxValue.TaxPurchaseTaxTable == _taxPurchaseTaxTableRecid 
                    && (taxPurchaseTaxValue.ValidFrom <= _date 
                        && (taxPurchaseTaxValue.ValidTo >= _date 
                            || !taxPurchaseTaxValue.ValidTo)) 
                    && (taxPurchaseTaxValue.TaxLimitMin <= abs(_base) 
                        && (taxPurchaseTaxValue.TaxLimitMax > abs(_base)   
                            || !taxPurchaseTaxValue.TaxLimitMax));

        return taxPurchaseTaxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMinNextInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record for <c>TaxPurchaseTaxValue</c>.
    /// </summary>
    /// <param name = "_taxPurchaseTaxTableRecId">The recId for <c>TAxPurchaseTaxTable</c>.</param>
    /// <param name = "_date">The trans date.</param>
    /// <param name = "_base">The base amount.</param>
    /// <returns>The record for <c>TaxPurchaseTaxValue</c>.</returns>
    private static TaxPurchaseTaxValue findMinNextInterval(RecId _taxPurchaseTaxTableRecId,
        TransDate _date,
        TaxBase _base)
    {
        TaxPurchaseTaxValue taxPurchaseTaxValue;
        TransDate validMinDate = dateNull();
        TransDate validMaxDate = maxDate();

        if (_taxPurchaseTaxTableRecId)
        {
            select validtimestate(validMinDate, validMaxDate) taxPurchaseTaxValue
                order by TaxLimitMin
                where taxPurchaseTaxValue.TaxPurchaseTaxTable == _taxPurchaseTaxTableRecId 
                    && (taxPurchaseTaxValue.ValidFrom <= _date 
                        && (taxPurchaseTaxValue.ValidTo >= _date 
                            || !taxPurchaseTaxValue.ValidTo)) 
                    && taxPurchaseTaxValue.TaxLimitMin > abs(_base);
        }
        return taxPurchaseTaxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfIntervals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets num of interval tax purchase tax value.
    /// </summary>
    /// <param name = "_taxPurchaseTaxTableRecid">The recId of <c>TaxPurchaseTaxTable</c>.</param>
    /// <param name = "_taxdate">The trans date.</param>
    /// <returns>The num of interval tax purchase tax value.</returns>
    public static Counter numOfIntervals(RecId _taxPurchaseTaxTableRecid,
        TransDate _taxdate)
    {
        TransDate minDate = dateNull();
        TransDate validMaxDate = maxDate();
        TaxPurchaseTaxValue taxPurchaseTaxValue;
        select validtimestate(minDate, validMaxDate) count(RecId) from taxPurchaseTaxValue
            where taxPurchaseTaxValue.TaxPurchaseTaxTable == _taxPurchaseTaxTableRecid
                && taxPurchaseTaxValue.TaxCalcMode == TaxCalcMode::Interval
                && (taxPurchaseTaxValue.ValidFrom <= _taxdate 
                    && (taxPurchaseTaxValue.ValidTo >= _taxdate 
                        || !taxPurchaseTaxValue.ValidTo));

        return any2int(taxPurchaseTaxValue.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>AT</CountryRegionCodes>
	<DeveloperDocumentation>@SYS327062</DeveloperDocumentation>
	<Label>@SYS58692</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>TaxPurchaseTaxTable</TitleField1>
	<TitleField2>Percent</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>DateEffcIdx</ReplacementKey>
	<ValidTimeStateFieldType>Date</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPurchaseTaxTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Values</Name>
			<Label>@SYS16124</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPurchaseTaxTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxCalcMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxLimitMin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxLimitMax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchaseDutyPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxPurchaseTaxTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
			<Label>@SYS5209</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
			<Label>@SYS80662</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxCalcMode</Name>
			<EnumType>TaxCalcMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxLimitMax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBaseMax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxLimitMin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBaseMin</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DateEffcIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<ValidTimeStateMode>Gap</ValidTimeStateMode>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxPurchaseTaxTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxLimitMin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxPurchaseTaxTableFK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxPurchaseTaxTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DutyTaxes</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>DutyTaxesValues</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPurchaseTaxTable</Name>
					<Field>TaxPurchaseTaxTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>