<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlInventPackageTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PlInventPackageTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display related customer name
    /// </summary>
    /// <returns>
    /// Related customer name
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display CustAccount custAccountName()
    {
        return CustTable::find(this.CustAccount).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display related item ID
    /// </summary>
    /// <returns>
    /// Related item ID
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display ItemId itemId()
    {
        ItemId itemId;

        switch (this.RefTableId)
        {
            case tablenum(SalesLine):
                itemId = SalesLine::findRecId(this.RefRecId).ItemId;
                break;
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packageDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays package description
    /// </summary>
    /// <returns>
    /// Package description
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display Description packageDescription()
    {
        return PlInventPackageTable::find(this.PackageId).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates remaining amount to return
    /// </summary>
    /// <returns>
    /// Difference between delivered and returned amounts
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display AmountMST remainingAmount()
    {
        return this.DepositAmount - this.ReturnedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates remaining quantity to return
    /// </summary>
    /// <returns>
    /// Difference between delivered and returned quantities
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display InventQty remainingQty()
    {
        return this.Qty - this.ReturnedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnDepositAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates package transactions being returned and calculates return deposit amount
    /// </summary>
    /// <param name="_inventPT">
    /// Package transaction for return. Contains return quantity and search criterias
    /// </param>
    /// <param name="_inventTransIdReturn">
    /// Return inventory lot
    /// </param>
    /// <returns>
    /// Deposit amount for packages being returned
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if return quantity is greater then applicable total given out quantity
    /// </exception>
    public AmountMST returnDepositAmount(PlInventPackageTrans _inventPT,
                                         InventTransId        _inventTransIdReturn = "")
    {
        PlInventPackageTrans inventPackageTrans;
        InventQty            qty2Settle = -_inventPT.Qty;
        InventQty            tmpQty;
        InventQty            sumQty;
        AmountMST            retAmount;

        void updateReturnedQty()
        {
            AmountMST lineAmount;

            tmpQty = inventPackageTrans.Qty - inventPackageTrans.ReturnedQty;
            tmpQty = min(tmpQty, qty2Settle);
            sumQty += tmpQty;

            if (tmpQty == (inventPackageTrans.Qty - inventPackageTrans.ReturnedQty))
            {
                lineAmount = inventPackageTrans.DepositAmount - inventPackageTrans.ReturnedAmount;
            }
            else
            {
                lineAmount = CurrencyExchangeHelper::amount(inventPackageTrans.DepositAmount / inventPackageTrans.Qty * tmpQty);
                lineAmount = min(lineAmount,
                                 inventPackageTrans.DepositAmount - inventPackageTrans.ReturnedAmount);
            }
            inventPackageTrans.ReturnedAmount += lineAmount;
            retAmount                         += lineAmount;

            inventPackageTrans.ReturnedQty    += tmpQty;
            qty2Settle                        -= tmpQty;

            if (inventPackageTrans.Qty == inventPackageTrans.ReturnedQty)
            {
                inventPackageTrans.Closed = NoYes::Yes;
            }

            inventPackageTrans.doUpdate();
        }

        if (qty2Settle > 0)
        {
            ttsbegin;

            while (qty2Settle)
            {
                if (_inventTransIdReturn)
                {
                    select firstonly forupdate inventPackageTrans
                        order by TransDate asc, InvoiceId asc
                        where inventPackageTrans.InventTransId == _inventTransIdReturn &&
                              inventPackageTrans.Qty           >  0                    &&
                              inventPackageTrans.TransDate                             &&
                              ! inventPackageTrans.Closed;
                }
                else
                {
                    select firstonly forupdate inventPackageTrans
                        order by TransDate asc, InvoiceId asc
                        where inventPackageTrans.PackageId   == _inventPT.PackageId   &&
                              inventPackageTrans.RefTableId  == _inventPT.RefTableId  &&
                              inventPackageTrans.RefRecId    == _inventPT.RefRecId    &&
                              inventPackageTrans.CustAccount == _inventPT.CustAccount &&
                              inventPackageTrans.Qty         >  0                     &&
                              inventPackageTrans.TransDate                            &&
                              ! inventPackageTrans.Closed;
                }

                if (inventPackageTrans)
                {
                    updateReturnedQty();
                }
                else
                {
                    select firstonly forupdate inventPackageTrans
                        order by TransDate asc, InvoiceId asc
                        where inventPackageTrans.PackageId   == _inventPT.PackageId   &&
                              inventPackageTrans.CustAccount == _inventPT.CustAccount &&
                              inventPackageTrans.Qty         >  0                     &&
                              inventPackageTrans.TransDate                            &&
                              ! inventPackageTrans.Closed;

                    if (inventPackageTrans)
                    {
                        updateReturnedQty();
                    }
                    else
                    {
                        throw error("@GLS110341");
                    }
                }
            }

            ttscommit;
        }

        return retAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create package transaction from sales order update line
    /// </summary>
    /// <param name="_salesParmLine">
    /// Sales order update line
    /// </param>
    /// <param name="_custPackingSlipTrans">
    /// Packing slip line
    /// </param>
    /// <param name="_isProforma">
    /// true if the process is proforma
    /// </param>
    public static void createFromSalesLine(
        SalesParmLine        _salesParmLine,
        CustPackingSlipTrans _custPackingSlipTrans,
        boolean              _isProforma)
    {
        PlInventPackageTrans        inventPackageTrans;
        PlInventPackageParm         inventPackageParm, packageParmSalesLine;
        SalesLine                   salesLine;

        boolean                     historyInitied;
        CustPackingSlipVersion      previousPackingSlipJour;
        CustPackingSlipTransHistory previousPackingSlipTrans;
        InventQty                   originalQty;

        void initPackingSlipHistory()
        {
            if (historyInitied)
                return;
            historyInitied = true;

            previousPackingSlipJour = CustPackingSlipVersion::findLatest(
                                            CustPackingSlipJour::findFromCustPackingSlipTrans(
                                                _custPackingSlipTrans.SalesId,
                                                _custPackingSlipTrans.PackingSlipId,
                                                _custPackingSlipTrans.DeliveryDate).RecId);
            if (previousPackingSlipJour)
            {
                previousPackingSlipTrans = CustPackingSlipTransHistory::find(_custPackingSlipTrans.RecId, false, previousPackingSlipJour.VersionDateTime);
            }
        }

        if (! isConfigurationkeyEnabled(configurationkeynum(InventPackaging)))
            return;

        ttsbegin;

        salesLine = _salesParmLine.salesLine();

        while select PackageId, PackageQty from inventPackageParm
            where inventPackageParm.RefTableId == _salesParmLine.TableId &&
                  inventPackageParm.RefRecId   == _salesParmLine.RecId
        {
            initPackingSlipHistory();

            if (previousPackingSlipTrans)
            {
                select firstOnly forUpdate inventPackageTrans
                    where inventPackageTrans.RefTableId     == salesLine.TableId                    &&
                          inventPackageTrans.RefRecId       == salesLine.RecId                      &&
                          inventPackageTrans.PackageId      == inventPackageParm.PackageId          &&
                          inventPackageTrans.InvoiceId      == _custPackingSlipTrans.PackingSlipId  &&
                          inventPackageTrans.InvoiceDate    == _custPackingSlipTrans.DeliveryDate   &&
                          inventPackageTrans.SalesId        == _custPackingSlipTrans.SalesId        &&
                          inventPackageTrans.CustAccount    == _salesParmLine.CustAccount           &&
                          inventPackageTrans.InventTransId  == _salesParmLine.InventTransId;
                originalQty = inventPackageTrans.Qty;
            }
            else
            {
                inventPackageTrans.clear();
                originalQty = 0;
            }

            inventPackageTrans.RefTableId    = salesLine.TableId;
            inventPackageTrans.RefRecId      = salesLine.RecId;
            inventPackageTrans.PackageId     = inventPackageParm.PackageId;
            inventPackageTrans.InvoiceId     = _custPackingSlipTrans.PackingSlipId;
            inventPackageTrans.InvoiceDate   = _custPackingSlipTrans.DeliveryDate;
            inventPackageTrans.SalesId       = _custPackingSlipTrans.SalesId;
            inventPackageTrans.CustAccount   = _salesParmLine.CustAccount;
            inventPackageTrans.InventTransId = _salesParmLine.InventTransId;

            if (inventPackageParm.PackageQty > 0)
            {
                inventPackageTrans.Qty = inventPackageParm.PackageQty;
            }
            else
            {
                inventPackageTrans.Qty = -1 * min(abs(inventPackageParm.PackageQty),
                                                  PlInventPackageTrans::invoicedForCreditNote(salesLine.InventTransIdReturn));
            }

            if (originalQty && abs(inventPackageTrans.Qty) > abs (originalQty))
            {
                throw error("@SYS331617");
            }

            if (inventPackageTrans.Qty && inventPackageTrans.PackageId)
            {
                inventPackageTrans.write();

                if (! _isProforma)
                {
                    packageParmSalesLine = PlInventPackageParm::find(inventPackageTrans.RefTableId,
                                                                     inventPackageTrans.RefRecId,
                                                                     inventPackageTrans.PackageId,
                                                                     true);
                    packageParmSalesLine.PackageQty = 0;
                    packageParmSalesLine.update();
                }
            }
            else
            if (originalQty && ! inventPackageTrans.Qty)
            {
                inventPackageTrans.delete();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create package transaction from sales order update header
    /// </summary>
    /// <param name="_salesParmTable">
    /// Sales order update header
    /// </param>
    /// <param name="_custPckSlpJour">
    /// Packing slip header
    /// </param>
    /// <param name="_isProforma">
    /// true if the process is proforma
    /// </param>
    public static void createFromSalesTable(
        SalesParmTable      _salesParmTable,
        CustPackingSlipJour _custPckSlpJour,
        boolean             _isProforma)
    {
        PlInventPackageTrans inventPackageTrans;
        PlInventPackageParm  inventPackageParm, packageParmSalesTable;
        SalesTable           salesTable;

        boolean                     historyInitied;
        CustPackingSlipVersion      previousPackingSlipJour;
        InventQty                   originalQty;

        void initPackingSlipHistory()
        {
            if (historyInitied)
                return;
            historyInitied = true;

            previousPackingSlipJour = CustPackingSlipVersion::findLatest(_custPckSlpJour.RecId);
        }

        if (! isConfigurationkeyEnabled(configurationkeynum(InventPackaging)))
            return;

        ttsbegin;

        salesTable = _salesParmTable.salesTable();

        while select PackageId, PackageQty from inventPackageParm
            where inventPackageParm.RefTableId == _salesParmTable.TableId &&
                  inventPackageParm.RefRecId   == _salesParmTable.RecId
        {
            initPackingSlipHistory();
            if (previousPackingSlipJour)
            {
                select firstOnly forUpdate inventPackageTrans
                    where inventPackageTrans.RefTableId  == salesTable.TableId            &&
                          inventPackageTrans.RefRecId    == salesTable.RecId              &&
                          inventPackageTrans.PackageId   == inventPackageParm.PackageId   &&
                          inventPackageTrans.InvoiceId   == _custPckSlpJour.PackingSlipId &&
                          inventPackageTrans.InvoiceDate == _custPckSlpJour.DeliveryDate  &&
                          inventPackageTrans.SalesId     == _custPckSlpJour.SalesId       &&
                          inventPackageTrans.CustAccount == _salesParmTable.CustAccount   &&
                        ! inventPackageTrans.InventTransId;
                originalQty = inventPackageTrans.Qty;
            }
            else
            {
                inventPackageTrans.clear();
                originalQty = 0;
            }
            inventPackageTrans.RefTableId  = salesTable.TableId;
            inventPackageTrans.RefRecId    = salesTable.RecId;
            inventPackageTrans.PackageId   = inventPackageParm.PackageId;
            inventPackageTrans.InvoiceId   = _custPckSlpJour.PackingSlipId;
            inventPackageTrans.InvoiceDate = _custPckSlpJour.DeliveryDate;
            inventPackageTrans.SalesId     = _custPckSlpJour.SalesId;
            inventPackageTrans.CustAccount = _salesParmTable.CustAccount;

            if (inventPackageParm.PackageQty > 0)
            {
                inventPackageTrans.Qty = inventPackageParm.PackageQty;
            }
            else
            {
                inventPackageTrans.Qty = -1 * min(abs(inventPackageParm.PackageQty),
                                                  PlInventPackageTrans::invoicedInTotal(salesTable.TableId,
                                                                                        salesTable.RecId,
                                                                                        inventPackageParm.PackageId));
            }

            if (originalQty && abs(inventPackageTrans.Qty) > abs (originalQty))
            {
                throw error("@SYS331617");
            }

            if (inventPackageTrans.Qty && inventPackageTrans.PackageId)
            {
                inventPackageTrans.write();

                if (! _isProforma)
                {
                    packageParmSalesTable = PlInventPackageParm::find(inventPackageTrans.RefTableId,
                                                                      inventPackageTrans.RefRecId,
                                                                      inventPackageTrans.PackageId,
                                                                      true);
                    packageParmSalesTable.RefTableId = inventPackageTrans.RefTableId;
                    packageParmSalesTable.RefRecId   = inventPackageTrans.RefRecId;
                    packageParmSalesTable.PackageId  = inventPackageTrans.PackageId;

                    packageParmSalesTable.PackageQty = 0;
                    packageParmSalesTable.write();
                }
            }
            else
            if (originalQty && ! inventPackageTrans.Qty)
            {
                inventPackageTrans.delete();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveredInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totally delivered packages quantity
    /// </summary>
    /// <param name="_refTableId">
    /// Table ID of related line / header
    /// </param>
    /// <param name="_refRecId">
    /// Record ID of related line / header
    /// </param>
    /// <param name="_packageId">
    /// Package ID
    /// </param>
    /// <returns>
    /// Totally delivered packages quantity
    /// </returns>
    public static Qty deliveredInTotal(
        RefTableId  _refTableId,
        RefRecId    _refRecId,
        PlPackageId _packageId)
    {
        PlInventPackageTrans inventPackageTrans;

        select sum(Qty) from inventPackageTrans
            where inventPackageTrans.RefTableId == _refTableId &&
                  inventPackageTrans.RefRecId   == _refRecId   &&
                  inventPackageTrans.PackageId  == _packageId  &&
                  ! inventPackageTrans.TransDate;

        return inventPackageTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveredInTotalPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totally delivered packages quantity filtered by packing slips,
    /// selected during invoice posting in 'By packing slip' mode
    /// </summary>
    /// <param name="_refTableId">
    /// Table ID of related line / header
    /// </param>
    /// <param name="_refRecId">
    /// Record ID of related line / header
    /// </param>
    /// <param name="_packageId">
    /// Package ID
    /// </param>
    /// <param name="_salesParmTable">
    /// SalesParmTable to filter on
    /// </param>
    /// <returns>
    /// Totally delivered packages quantity
    /// </returns>
    public static Qty deliveredInTotalPackingSlip(
        RefTableId      _refTableId,
        RefRecId        _refRecId,
        PlPackageId     _packageId,
        SalesParmTable  _salesParmTable)
    {
        PlInventPackageTrans inventPackageTrans;

        CustPackingSlipTrans custPackingSlipTrans;
        SalesParmLine        salesParmLine;
        SalesParmSubLine     salesParmSubLine;

        select sum(Qty) from inventPackageTrans
            where inventPackageTrans.RefTableId      == _refTableId                    &&
                  inventPackageTrans.RefRecId        == _refRecId                      &&
                  inventPackageTrans.PackageId       == _packageId                     &&
                ! inventPackageTrans.TransDate
        exists join custPackingSlipTrans
            where custPackingSlipTrans.SalesId       == inventPackageTrans.SalesId     &&
                  custPackingSlipTrans.PackingSlipId == inventPackageTrans.InvoiceId   &&
                  custPackingSlipTrans.DeliveryDate  == inventPackageTrans.InvoiceDate
        exists join salesParmSubLine
            where salesParmSubLine.JournalRefRecId   == custPackingSlipTrans.RecId
        exists join salesParmLine
            where salesParmLine.RecId                == salesParmSubLine.LineRefRecId  &&
                  salesParmLine.TableRefId           == _salesParmTable.TableRefId;

        return inventPackageTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveredInTotalPackingSlipLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totally delivered packages quantity filtered by packing slips,
    /// selected during invoice posting in 'By packing slip' mode
    /// </summary>
    /// <param name="_refTableId">
    /// Table ID of related line / header
    /// </param>
    /// <param name="_refRecId">
    /// Record ID of related line / header
    /// </param>
    /// <param name="_packageId">
    /// Package ID
    /// </param>
    /// <param name="_salesParmLine">
    /// SalesParmLine to filter on
    /// </param>
    /// <returns>
    /// Totally delivered packages quantity
    /// </returns>
    public static Qty deliveredInTotalPackingSlipLine(
        RefTableId      _refTableId,
        RefRecId        _refRecId,
        PlPackageId     _packageId,
        SalesParmLine   _salesParmLine)
    {
        PlInventPackageTrans inventPackageTrans;

        CustPackingSlipTrans custPackingSlipTrans;
        SalesParmSubLine     salesParmSubLine;

        select sum(Qty) from inventPackageTrans
            where inventPackageTrans.RefTableId      == _refTableId                    &&
                  inventPackageTrans.RefRecId        == _refRecId                      &&
                  inventPackageTrans.PackageId       == _packageId                     &&
                ! inventPackageTrans.TransDate
        exists join custPackingSlipTrans
            where custPackingSlipTrans.SalesId       == inventPackageTrans.SalesId     &&
                  custPackingSlipTrans.PackingSlipId == inventPackageTrans.InvoiceId   &&
                  custPackingSlipTrans.DeliveryDate  == inventPackageTrans.InvoiceDate
        exists join salesParmSubLine
            where salesParmSubLine.JournalRefRecId   == custPackingSlipTrans.RecId &&
                  salesParmSubLine.LineRefRecId      == _salesParmLine.RecId;

        return inventPackageTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedForCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total non-invoiced quantity of returned packages for original sales order line
    /// </summary>
    /// <param name="_inventTransId">
    /// Return inventory transaction ID
    /// </param>
    /// <returns>
    /// Total non-invoiced quantity of returned packages for original sales order line
    /// </returns>
    public static Qty invoicedForCreditNote(InventTransId _inventTransId)
    {
        PlInventPackageTrans inventPackageTrans;

        select sum(Qty), sum(ReturnedQty) from inventPackageTrans
            where inventPackageTrans.InventTransId == _inventTransId &&
                  inventPackageTrans.Qty           >  0              &&
                  inventPackageTrans.TransDate;

        return inventPackageTrans.Qty - inventPackageTrans.ReturnedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total invoiced quantity for given record / package
    /// </summary>
    /// <param name="_refTableId">
    /// Related table's ID
    /// </param>
    /// <param name="_refRecId">
    /// Related record's ID
    /// </param>
    /// <param name="_packageId">
    /// Package ID
    /// </param>
    /// <returns>
    /// Total invoiced quantity
    /// </returns>
    public static Qty invoicedInTotal(RefTableId  _refTableId,
                                      RefRecId    _refRecId,
                                      PlPackageId _packageId)
    {
        PlInventPackageTrans inventPackageTrans;

        select sum(Qty) from inventPackageTrans
            where inventPackageTrans.RefTableId == _refTableId &&
                  inventPackageTrans.RefRecId   == _refRecId   &&
                  inventPackageTrans.PackageId  == _packageId  &&
                  inventPackageTrans.TransDate;

        return inventPackageTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedInTotalPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total invoiced quantity for given record / package filtered by packing slips,
    /// selected during invoice posting in 'By packing slip' mode
    /// </summary>
    /// <param name="_refTableId">
    /// Related table's ID
    /// </param>
    /// <param name="_refRecId">
    /// Related record's ID
    /// </param>
    /// <param name="_packageId">
    /// Package ID
    /// </param>
    /// <param name="_salesParmTable">
    /// SalesParmTable to filter on
    /// </param>
    /// <returns>
    /// Total invoiced quantity
    /// </returns>
    public static Qty invoicedInTotalPackingSlip(
        RefTableId      _refTableId,
        RefRecId        _refRecId,
        PlPackageId     _packageId,
        SalesParmTable  _salesParmTable)
    {
        PlInventPackageTrans inventPackageTrans;

        CustInvoiceTrans                    custInvoiceTrans;
        CustInvoicePackingSlipQuantityMatch link;
        CustPackingSlipTrans                custPackingSlipTrans;
        SalesParmLine                       salesParmLine;
        SalesParmSubLine                    salesParmSubLine;

        select sum(Qty) from inventPackageTrans
            where inventPackageTrans.RefTableId             == _refTableId                    &&
                  inventPackageTrans.RefRecId               == _refRecId                      &&
                  inventPackageTrans.PackageId              == _packageId                     &&
                  inventPackageTrans.TransDate
        exists join custInvoiceTrans
            where custInvoiceTrans.SalesId                  == inventPackageTrans.SalesId     &&
                  custInvoiceTrans.InvoiceId                == inventPackageTrans.InvoiceId   &&
                  custInvoiceTrans.InvoiceDate              == inventPackageTrans.InvoiceDate &&
                  custInvoiceTrans.numberSequenceGroup      == inventPackageTrans.NumberSequenceGroupId
        exists join link
            where link.InvoiceSourceDocumentLine            == custInvoiceTrans.SourceDocumentLine
        exists join custPackingSlipTrans
            where custPackingSlipTrans.SourceDocumentLine   == link.PackingSlipSourceDocumentLine
        exists join salesParmSubLine
            where salesParmSubLine.JournalRefRecId          == custPackingSlipTrans.RecId
        exists join salesParmLine
            where salesParmLine.RecId                       == salesParmSubLine.LineRefRecId  &&
                  salesParmLine.TableRefId                  == _salesParmTable.TableRefId;

        return inventPackageTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedInTotalPackingSlipLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total invoiced quantity for given record / package filtered by packing slips,
    /// selected during invoice posting in 'By packing slip' mode
    /// </summary>
    /// <param name="_refTableId">
    /// Related table's ID
    /// </param>
    /// <param name="_refRecId">
    /// Related record's ID
    /// </param>
    /// <param name="_packageId">
    /// Package ID
    /// </param>
    /// <param name="_salesParmLine">
    /// SalesParmLine to filter on
    /// </param>
    /// <returns>
    /// Total invoiced quantity
    /// </returns>
    public static Qty invoicedInTotalPackingSlipLine(
        RefTableId      _refTableId,
        RefRecId        _refRecId,
        PlPackageId     _packageId,
        SalesParmLine   _salesParmLine)
    {
        PlInventPackageTrans inventPackageTrans;

        CustInvoiceTrans                    custInvoiceTrans;
        CustInvoicePackingSlipQuantityMatch link;
        CustPackingSlipTrans                custPackingSlipTrans;
        SalesParmSubLine                    salesParmSubLine;

        select sum(Qty) from inventPackageTrans
            where inventPackageTrans.RefTableId             == _refTableId                    &&
                  inventPackageTrans.RefRecId               == _refRecId                      &&
                  inventPackageTrans.PackageId              == _packageId                     &&
                  inventPackageTrans.TransDate
        exists join custInvoiceTrans
            where custInvoiceTrans.SalesId                  == inventPackageTrans.SalesId     &&
                  custInvoiceTrans.InvoiceId                == inventPackageTrans.InvoiceId   &&
                  custInvoiceTrans.InvoiceDate              == inventPackageTrans.InvoiceDate &&
                  custInvoiceTrans.numberSequenceGroup      == inventPackageTrans.NumberSequenceGroupId
        exists join link
            where link.InvoiceSourceDocumentLine            == custInvoiceTrans.SourceDocumentLine
        exists join custPackingSlipTrans
            where custPackingSlipTrans.SourceDocumentLine   == link.PackingSlipSourceDocumentLine
        exists join salesParmSubLine
            where salesParmSubLine.JournalRefRecId          == custPackingSlipTrans.RecId &&
                  salesParmSubLine.LineRefRecId             == _salesParmLine.RecId;

        return inventPackageTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainSalesFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates remaining packages amount to be invoiced
    /// </summary>
    /// <param name="_refTableId">
    /// Related table's ID
    /// </param>
    /// <param name="_refRecId">
    /// Related record's ID
    /// </param>
    /// <param name="_packageId">
    /// Package ID
    /// </param>
    /// <returns>
    /// Remaining packages amount to be invoiced
    /// </returns>
    public static Qty remainSalesFinancial(
        RefTableId  _refTableId,
        RefRecId    _refRecId,
        PlPackageId _packageId)
    {
        return PlInventPackageTrans::deliveredInTotal(_refTableId,
                                                      _refRecId,
                                                      _packageId) -
               PlInventPackageTrans::invoicedInTotal(_refTableId,
                                                     _refRecId,
                                                     _packageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainSalesFinancialPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates remaining packages amount to be invoiced filtered by packing slips,
    /// selected during invoice posting in 'By packing slip' mode
    /// </summary>
    /// <param name="_refTableId">
    /// Related table's ID
    /// </param>
    /// <param name="_refRecId">
    /// Related record's ID
    /// </param>
    /// <param name="_packageId">
    /// Package ID
    /// </param>
    /// <param name="_salesParmTable">
    /// SalesParmTable to filter on
    /// </param>
    /// <returns>
    /// Remaining packages amount to be invoiced
    /// </returns>
    public static Qty remainSalesFinancialPackingSlip(
        RefTableId      _refTableId,
        RefRecId        _refRecId,
        PlPackageId     _packageId,
        SalesParmTable  _salesParmTable)
    {
        return PlInventPackageTrans::deliveredInTotalPackingSlip(_refTableId,
                                                                 _refRecId,
                                                                 _packageId,
                                                                 _salesParmTable) -
               PlInventPackageTrans::invoicedInTotalPackingSlip( _refTableId,
                                                                 _refRecId,
                                                                 _packageId,
                                                                 _salesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainSalesFinancialPackingSlipLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates remaining packages amount to be invoiced filtered by packing slips,
    /// selected during invoice posting in 'By packing slip' mode
    /// </summary>
    /// <param name="_refTableId">
    /// Related table's ID
    /// </param>
    /// <param name="_refRecId">
    /// Related record's ID
    /// </param>
    /// <param name="_packageId">
    /// Package ID
    /// </param>
    /// <param name="_salesParmLine">
    /// SalesParmLine to filter on
    /// </param>
    /// <returns>
    /// Remaining packages amount to be invoiced
    /// </returns>
    public static Qty remainSalesFinancialPackingSlipLine(
        RefTableId      _refTableId,
        RefRecId        _refRecId,
        PlPackageId     _packageId,
        SalesParmLine   _salesParmLine)
    {
        return PlInventPackageTrans::deliveredInTotalPackingSlipLine(_refTableId,
                                                                     _refRecId,
                                                                     _packageId,
                                                                     _salesParmLine) -
               PlInventPackageTrans::invoicedInTotalPackingSlipLine( _refTableId,
                                                                     _refRecId,
                                                                     _packageId,
                                                                     _salesParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFinancial</Name>
				<Source><![CDATA[
    public static void updateFinancial(SalesParmLine    _salesParmLine,
                                              CustInvoiceTrans _custInvoiceTrans,
                                              boolean          _isProforma)
    {
        PlInventPackageTrans inventPackageTrans;
        PlInventPackageParm  inventPackageParm, packageParmSalesLine;
        Qty                  remainQty;
        SalesLine            salesLine = _salesParmLine.salesLine();

        if (salesLine.ProjId)
            return;

        ttsbegin;

        while select PackageId, PackageQty from inventPackageParm
            where inventPackageParm.RefTableId == _salesParmLine.TableId &&
                  inventPackageParm.RefRecId   == _salesParmLine.RecId
        {
            remainQty = PlInventPackageTrans::remainSalesFinancial(salesLine.TableId,
                                                                   salesLine.RecId,
                                                                   inventPackageParm.PackageId);
            inventPackageTrans.clear();
            inventPackageTrans.RefTableId            = salesLine.TableId;
            inventPackageTrans.RefRecId              = salesLine.RecId;
            inventPackageTrans.PackageId             = inventPackageParm.PackageId;
            inventPackageTrans.Qty                   = min(abs(remainQty), abs(inventPackageParm.PackageQty)) *
                                                       sign(inventPackageParm.PackageQty);
            inventPackageTrans.InvoiceId             = _custInvoiceTrans.InvoiceId;
            inventPackageTrans.InvoiceDate           = _custInvoiceTrans.InvoiceDate;
            inventPackageTrans.SalesId               = _custInvoiceTrans.SalesId;
            inventPackageTrans.NumberSequenceGroupId = _custInvoiceTrans.NumberSequenceGroup;
            inventPackageTrans.TransDate             = _custInvoiceTrans.InvoiceDate;
            inventPackageTrans.CustAccount           = _salesParmLine.CustAccount;
            inventPackageTrans.InventTransId         = _salesParmLine.InventTransId;

            if (inventPackageTrans.Qty && inventPackageTrans.PackageId)
            {
                if (! CustTable::find(inventPackageTrans.CustAccount).PackageDepositExcempt_PL)
                {
                    if (inventPackageTrans.Qty > 0)
                    {
                        inventPackageTrans.DepositAmount = inventPackageTrans.Qty *
                                                           PlInventPackageTable::find(inventPackageTrans.PackageId).DepositValue;
                    }
                    else if (! _isProforma)
                    {
                        inventPackageTrans.DepositAmount = - inventPackageTrans.returnDepositAmount(inventPackageTrans,
                                                                                                    _salesParmLine.salesLine().InventTransIdReturn);
                    }
                }

                inventPackageTrans.doInsert();

                if (! _isProforma)
                {
                    packageParmSalesLine = PlInventPackageParm::find(inventPackageTrans.RefTableId,
                                                                     inventPackageTrans.RefRecId,
                                                                     inventPackageTrans.PackageId,
                                                                     true);
                    packageParmSalesLine.PackageQty = 0;
                    packageParmSalesLine.update();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFinancialFromTable</Name>
				<Source><![CDATA[
    public static void updateFinancialFromTable(SalesParmTable   _salesParmTable,
                                                       CustInvoiceJour  _custInvoiceJour)
    {
        PlInventPackageTrans inventPackageTrans;
        PlInventPackageParm  inventPackageParm, packageParmSalesTable;
        Qty                  remainQty;
        SalesTable           salesTable = _salesParmTable.salesTable();

        if (salesTable.ProjId)
            return;

        ttsbegin;

        while select PackageId, PackageQty from inventPackageParm
            where inventPackageParm.RefTableId == _salesParmTable.TableId &&
                  inventPackageParm.RefRecId   == _salesParmTable.RecId
        {
            remainQty = PlInventPackageTrans::remainSalesFinancial(salesTable.TableId,
                                                                   salesTable.RecId,
                                                                   inventPackageParm.PackageId);
            inventPackageTrans.clear();
            inventPackageTrans.RefTableId            = salesTable.TableId;
            inventPackageTrans.RefRecId              = salesTable.RecId;
            inventPackageTrans.PackageId             = inventPackageParm.PackageId;
            inventPackageTrans.Qty                   = min(abs(remainQty), abs(inventPackageParm.PackageQty)) *
                                                       sign(inventPackageParm.PackageQty);
            inventPackageTrans.InvoiceId             = _custInvoiceJour.InvoiceId;
            inventPackageTrans.InvoiceDate           = _custInvoiceJour.InvoiceDate;
            inventPackageTrans.SalesId               = _custInvoiceJour.SalesId;
            inventPackageTrans.NumberSequenceGroupId = _custInvoiceJour.NumberSequenceGroup;
            inventPackageTrans.TransDate             = _custInvoiceJour.InvoiceDate;
            inventPackageTrans.CustAccount           = _salesParmTable.CustAccount;

            if (inventPackageTrans.Qty && inventPackageTrans.PackageId)
            {
                if (! CustTable::find(inventPackageTrans.CustAccount).PackageDepositExcempt_PL)
                {
                    if (inventPackageTrans.Qty > 0)
                    {
                        inventPackageTrans.DepositAmount = inventPackageTrans.Qty *
                                                           PlInventPackageTable::find(inventPackageTrans.PackageId).DepositValue;
                    }
                    else if (! _custInvoiceJour.Proforma)
                    {
                        inventPackageTrans.DepositAmount = - inventPackageTrans.returnDepositAmount(inventPackageTrans);
                    }
                }

                inventPackageTrans.doInsert();

                if (! _custInvoiceJour.Proforma)
                {
                    packageParmSalesTable = PlInventPackageParm::find(inventPackageTrans.RefTableId,
                                                                      inventPackageTrans.RefRecId,
                                                                      inventPackageTrans.PackageId,
                                                                      true);
                    packageParmSalesTable.RefTableId = inventPackageTrans.RefTableId;
                    packageParmSalesTable.RefRecId   = inventPackageTrans.RefRecId;
                    packageParmSalesTable.PackageId  = inventPackageTrans.PackageId;

                    packageParmSalesTable.PackageQty = 0;
                    packageParmSalesTable.write();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>PL</CountryRegionCodes>
	<DeveloperDocumentation>@GLS222467</DeveloperDocumentation>
	<Label>@GLS110007</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>PackageId</TitleField1>
	<TitleField2>Qty</TitleField2>
	<ClusteredIndex>InvoiceDateIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Deposited</Name>
			<Label>@SYS15979</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepositAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS80392</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NumberSequenceGroup</Name>
			<Label>@SYS54850</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS81042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS81755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Returned</Name>
			<Label>@GLS110006</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnedAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesOrder</Name>
			<Label>@SYS7443</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Voucher</Name>
			<Label>@SYS12371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Closed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GEE28874</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DepositAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@GLS110000</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Num</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequenceGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlPackageId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Printed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@GLS109998</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReturnedAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReturnedQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS14475</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InvoiceDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PackageId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceId</Name>
					<Field>InvoiceId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceDate</Name>
					<Field>InvoiceDate</Field>
					<RelatedField>InvoiceDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceGroupId</Name>
					<Field>NumberSequenceGroupId</Field>
					<RelatedField>numberSequenceGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPackingSlipJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustPackingSlipJour</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceId</Name>
					<Field>InvoiceId</Field>
					<RelatedField>PackingSlipId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceDate</Name>
					<Field>InvoiceDate</Field>
					<RelatedField>DeliveryDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceGroupId</Name>
					<SourceEDT>NumberSequenceGroupId</SourceEDT>
					<Field>NumberSequenceGroupId</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PlInventPackageReturn</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlInventPackageReturn</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlInventPackageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PlInventPackageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PackageId</Name>
					<SourceEDT>PlPackageId</SourceEDT>
					<Field>PackageId</Field>
					<RelatedField>PackageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PackageIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>