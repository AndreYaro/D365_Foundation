<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFDIWithholdingType_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CFDIWithholdingType_MX extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkWithholdingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given Withholing type code is compatible with the given tax combination.
    /// </summary>
    /// <param name="_withholdingTypeCode">
    /// The Withholding type code to check.
    /// </param>
    /// <param name="_taxGroup">
    /// The tax group to check.
    /// </param>
    /// <param name="_taxItemGroup">
    /// The tax item group to check.
    /// </param>
    /// <returns>
    /// true if the given Withholing type code is compatible with the given tax combination; otherwise false.
    /// </returns>
    public static boolean checkWithholdingType(
        CFDIWithholdingTypeCode_MX _withholdingTypeCode,
        TaxGroup _taxGroup,
        TaxItemGroup _taxItemGroup)
    {
        Boolean ret = true;

        if (!_withholdingTypeCode && EInvoiceCFDIParameters_MX::find().EnabledCFDIWithholding)
        {
            TaxGroupData    taxGroupData;
            TaxOnItem       taxOnItem;
            TaxTable        taxTable;
            select firstOnly RecId from taxTable
            where taxTable.NegativeTax == NoYes::Yes
            exists join taxGroupData
                where taxGroupData.TaxGroup == _taxGroup
                   && taxGroupData.TaxCode == taxTable.TaxCode
            exists join taxOnItem
                where taxOnItem.TaxItemGroup == _taxItemGroup
                    && taxOnItem.TaxCode == taxTable.TaxCode;
            if (taxTable)
            {
                ret = checkFailed("@SYP4889813");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>complementFldClearOnWithholdTypeModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears complement fields.
    /// </summary>
    /// <param name="_fieldGroupName">
    /// Field group name.
    /// </param>
    /// <param name="_cursor">
    /// Cursor.
    /// </param>
    public static void complementFldClearOnWithholdTypeModified(
        FieldGroupName _fieldGroupName,
        Common _cursor)
    {
        if (EInvoiceCFDIParameters_MX::find().EnabledCFDIWithholding)
        {
            SysDictTable dictTable = SysDictTable::newTableId(_cursor.TableId);
            Integer i, j;
            for (i = 1; i <= dictTable.fieldGroupCnt(); i++)
            {
                if (dictTable.fieldGroup(i) == _fieldGroupName)
                {
                    SysDictFieldGroup dictFieldGroup = new SysDictFieldGroup(dictTable.id(), dictTable.fieldGroup(i));
                    for (j = 1; j <= dictFieldGroup.numberOfFields(); j++)
                    {
                        SysDictField sysDictField = new SysDictField(dictFieldGroup.tableid(), dictFieldGroup.field(j));
                        if (sysDictField.typeId() != extendedTypeNum(CFDIWithholdingTypeCode_MX))
                        {

                            _cursor.(dictFieldGroup.field(j)) = sysDictField.nullValue();
                        }
                    }

                    FormDataSource dataSource = _cursor.dataSource();
                    if (dataSource)
                    {
                        dataSource.refresh();
                    }

                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>complementFldEnabledByWithholdingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensbles/disbles complement fields related to complement type.
    /// </summary>
    /// <param name="_withholdingTypeCode">
    /// Withholding type code.
    /// </param>
    /// <param name="_fieldGroupName">
    /// Field group name.
    /// </param>
    /// <param name="_formDataSource">
    /// Form datasource.
    /// </param>
    public static void complementFldEnabledByWithholdingType(
        CFDIWithholdingTypeCode_MX _withholdingTypeCode,
        FieldGroupName _fieldGroupName,
        FormDataSource _formDataSource)
    {

        Set enabledComplementDataTypes(CFDIWithholdingComplementType_MX _complementType)
        {
            Set set = new Set(Types::Integer);

            set.add(extendedTypeNum(CFDIWithholdingTypeCode_MX));

            switch (_complementType)
            {
                case CFDIWithholdingComplementType_MX::ForeignResidentPaym:
                    set.add(extendedTypeNum(CFDIBeneficiaryRetains_MX));
                    break;
                case CFDIWithholdingComplementType_MX::Interests:
                    set.add(extendedTypeNum(CFDIFinancialSystem_MX));
                    set.add(extendedTypeNum(CFDIInterestCashedInTheCurrentPeriod_MX));
                    set.add(extendedTypeNum(CFDIInterestBelongsDerivedFinOp_MX));
                    set.add(extendedTypeNum(CFDIInterestNominalAmount_MX));
                    set.add(extendedTypeNum(CFDIInterestRealAmount_MX));
                    set.add(extendedTypeNum(CFDIInterestLossAmount_MX));
                    break;
            }
            return set;
        }

        SysDictTable dictTable = SysDictTable::newTableId(_formDataSource.table());
        CFDIWithholdingType_MX  withholdingType = CFDIWithholdingType_MX::find(_withholdingTypeCode);
        Integer i, j;
        for (i = 1; i <= dictTable.fieldGroupCnt(); i++)
        {
            if (dictTable.fieldGroup(i) == _fieldGroupName)
            {
                SysDictFieldGroup dictFieldGroup = new SysDictFieldGroup(dictTable.id(), dictTable.fieldGroup(i));
                Set enabledComplementDataTypes = enabledComplementDataTypes(withholdingType.ComplementType);

                for (j = 1; j <= dictFieldGroup.numberOfFields(); j++)
                {
                    SysDictField sysDictField = new SysDictField(dictFieldGroup.tableid(), dictFieldGroup.field(j));

                    _formDataSource.object(sysDictField.id()).enabled(enabledComplementDataTypes.in(sysDictField.typeId()));
                }
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds <c>WithholdingTypeCode_MX</c> record by code.
    /// </summary>
    /// <param name="_code">
    /// Witholding type code.
    /// </param>
    /// <param name="_forUpdate">
    /// Defines if record selected for update.
    /// </param>
    /// <returns>
    /// Found <c>WithholdingTypeCode_MX</c> record.
    /// </returns>
    public static CFDIWithholdingType_MX find(CFDIWithholdingTypeCode_MX _code, boolean _forUpdate = false)
    {
        CFDIWithholdingType_MX witholdingType_MX;

        witholdingType_MX.selectForUpdate(_forupdate);

        select firstonly witholdingType_MX
        where witholdingType_MX.Code == _code;

        return witholdingType_MX;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>MX</CountryRegionCodes>
	<DeveloperDocumentation>@MexicoCFDIWithholding:CFDIWithholdingType_TableDevelopment</DeveloperDocumentation>
	<Label>@MexicoCFDIWithholding:CFDIWithholdingType_Table</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Code</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>EInvoice</Modules>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ComplementType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ComplementType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ComplementType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Code</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>CFDIWithholdingTypeCode_MX</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ComplementType</Name>
			<EnumType>CFDIWithholdingComplementType_MX</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>ExtCodeDescription</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Code</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>