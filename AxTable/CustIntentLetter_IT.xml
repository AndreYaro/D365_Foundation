<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustIntentLetter_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustIntentLetter_IT extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels intent letter.
    /// </summary>
    /// <param name = "_notes">Cancel notes.</param>
    public void cancel(Notes _notes = '')
    {
        this.calculateClosedAmounts();
        this.Status = IntentLetterStatus_IT::Canceled;

        if (_notes)
        {
            this.Notes = _notes;
        }

        this.ClosedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00043, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes intent letter.
    /// </summary>
    public void close()
    {
        this.calculateClosedAmounts();
        this.Status = IntentLetterStatus_IT::Closed;
        this.ClosedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00043, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateClosedAmounts</Name>
				<Source><![CDATA[
    private void calculateClosedAmounts()
    {
        this.LastClosedRemainingAmount = this.remainAmountMST();
        this.LastClosedSalesAmount = this.salesAmountMST();
        this.LastClosedValueCalculated = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrecalculatedAmounts</Name>
				<Source><![CDATA[
    private boolean showPrecalculatedAmounts()
    {
        return this.Status != IntentLetterStatus_IT::Open && this.LastClosedValueCalculated == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens intent letter.
    /// </summary>
    public void open()
    {
        this.Status = IntentLetterStatus_IT::Open;
        this.ClosedDate = dateNull();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00043, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.DateRegister = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.IntentLetterType = IntentLetterType_IT::Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.InternalLetterId == '')
        {
            NumberSequenceReference numberSequenceReference = NumberSeqReference::findReference(extendedTypeNum(IntentLetterInternalId_IT));
            NumberSeq numberSeq = NumberSeq::newGetNum(numberSequenceReference);
            this.InternalLetterId = numberSeq.num();
        }

        super();

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00043, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedByInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if intent letter is referred by some customer invoice.
    /// </summary>
    /// <returns>true if intent letter is referred by some customer invoice; false otherwise.</returns>
    public boolean isUsedByInvoices()
    {
        CustInvoiceJour custInvoiceJour;

        select firstonly RecId from custInvoiceJour
            where custInvoiceJour.IntentLetterId_IT == this.LetterId
                && custInvoiceJour.InvoiceAccount == this.AccountNum;

        return (custInvoiceJour.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if intent letter can be used according to its dates.
    /// </summary>
    /// <returns>true if intent letter can be used, false otherwise.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display Valid isValidPeriod()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) >= this.FromDate
            && DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) <= this.ToDate
            && this.ClosedDate == datenull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the remaining intent letter amount.
    /// </summary>
    /// <returns>The remaining intent letter amount.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display AmountMST remainAmountMST()
    {
        AmountMST amountMST = 0;

        if (this.IntentLetterAmountMST)
        {
            if (this.showPrecalculatedAmounts())
            {
                amountMST = this.LastClosedRemainingAmount;
            }
            else
            {
                TaxTrans taxTrans;
                TaxTrans_IT taxTrans_IT;
                select sum(TaxBaseAmount) from taxTrans
                    join taxTrans_IT
                    where taxTrans_IT.TaxTrans == taxTrans.RecId
                        && taxTrans_IT.IntentLetterOrigin == IntentLetterOrigin_IT::Cust
                        && taxTrans_IT.IntentLetterId == this.InternalLetterId;

                amountMST = this.IntentLetterAmountMST + taxTrans.TaxBaseAmount;
            }
        }

        return min(amountMST, this.IntentLetterAmountMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sales order amount.
    /// </summary>
    /// <returns>Sales order amount.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display AmountMST salesAmountMST()
    {
        AmountMST amountMST = 0;

        if (this.InternalLetterId)
        {
            if (this.showPrecalculatedAmounts())
            {
                amountMST = this.LastClosedSalesAmount;
            }
            else
            {
                SalesTable salesTable;

                while select salesTable
                    where salesTable.IntentLetterId_IT == this.InternalLetterId
                {
                    SalesTotals salesTotals = SalesTotals::construct(salesTable);
                    salesTotals.calc();
                    amountMST += salesTotals.totalAmount();
                }
            }
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainSalesAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets remaining intent letter amount that includes sales order amount too.
    /// </summary>
    /// <returns>The remaining intent letter amount that includes sales order amount too.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display AmountMST remainSalesAmountMST()
    {
        return this.remainAmountMST() - this.salesAmountMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (this.FromDate > this.ToDate)
        {
            ret = checkFailed("@SYS16982");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustIntentLetter</c> record.
    /// </summary>
    /// <param name = "_intentLetterId">Intent letter ID.</param>
    /// <param name = "_accountNum">Account number.</param>
    /// <param name = "_forUpdate">true if selected record can be updated, false otherwise; optional.</param>
    /// <returns>The <c>CustIntentLetter</c> record.</returns>
    public static CustIntentLetter_IT find(
        IntentLetterId_IT _intentLetterId,
        AccountNum _accountNum,
        boolean _forUpdate = false)
    {
        CustIntentLetter_IT custIntentLetter;

        if (_intentLetterId)
        {
            custIntentLetter.selectForUpdate(_forUpdate);

            select firstonly custIntentLetter
                where custIntentLetter.LetterId   == _intentLetterId 
                    && custIntentLetter.AccountNum == _accountNum;
        }

        return custIntentLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveIntentLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets active intent letter.
    /// </summary>
    /// <param name = "_custAccount">Associated account number.</param>
    /// <param name = "currentDate">Validity intent letter date.</param>
    /// <returns>The active intent letter.</returns>
    public static CustIntentLetter_IT findActiveIntentLetter(
        CustAccount _custAccount,
        TransDate currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CustIntentLetter_IT custIntentLetter;

        if (_custAccount)
        {
            select firstonly custIntentLetter
                order by ToDate asc, DateLetter
                where  custIntentLetter.AccountNum == _custAccount
                    && custIntentLetter.FromDate   <= currentDate
                    && custIntentLetter.ToDate     >= currentDate
                    && custIntentLetter.Status     != IntentLetterStatus_IT::Canceled
                    && (custIntentLetter.ClosedDate > currentDate
                        || custIntentLetter.ClosedDate == dateNull());
        }

        return custIntentLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveIntentLetterByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets active intent letter.
    /// </summary>
    /// <param name = "_custAccount">Associated account number.</param>
    /// <param name = "_intentLetterType">Intent letter type.</param>
    /// <param name = "_refDate">Validity intent letter date.</param>
    /// <returns>The active intent letter.</returns>
    public static CustIntentLetter_IT findActiveIntentLetterByType(
        CustAccount _custAccount,
        IntentLetterType_IT _intentLetterType,
        TransDate _refDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CustIntentLetter_IT custIntentLetter;

        if (_custAccount)
        {
            select firstonly custIntentLetter
                order by ToDate asc, DateLetter
                where  custIntentLetter.AccountNum == _custAccount
                    && custIntentLetter.IntentLetterType == _intentLetterType
                    && custIntentLetter.Status == IntentLetterStatus_IT::Open
                    && (_intentLetterType == IntentLetterType_IT::SpecificOperation ||
                        (custIntentLetter.FromDate <= _refDate && custIntentLetter.ToDate >= _refDate));
        }

        return custIntentLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInternalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustIntentLetter</c> record.
    /// </summary>
    /// <param name = "_id">Internal intent letter ID.</param>
    /// <param name = "_forUpdate">true if record can be updated, false otherwiese; optional.</param>
    /// <returns>The <c>CustIntentLetter</c> record.</returns>
    public static CustIntentLetter_IT findInternalId(
        IntentLetterInternalId_IT _id,
        boolean _forUpdate = false)
    {
        CustIntentLetter_IT custIntentLetter;

        if (_id)
        {
            custIntentLetter.selectForUpdate(_forUpdate);

            select firstonly custIntentLetter
                where custIntentLetter.InternalLetterId == _id;
        }

        return custIntentLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpSalesTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates temporary <c>TmpSalesOrderMark_IT</c> records that will
    /// be used to update sales oreder references to intent letter
    /// </summary>
    /// <param name = "_salesTable">Sales order record.</param>
    /// <param name = "_custIntentLetter">Customer intent letter record.</param>
    /// <param name = "_salesOrderMark"><c>TmpSalesOrderMark_IT</c> temporary table to insert to.</param>
    /// <returns>true if <c>TmpSalesOrderMark_IT</c> records were created; false otherwise.</returns>
    public static boolean createTmpSalesTrans(
        SalesTable _salesTable,
        CustIntentLetter_IT _custIntentLetter,
        TmpSalesOrderMark_IT _salesOrderMark)
    {

        if (_custIntentLetter.ClosedDate != dateNull())
        {
            return false;
        }

        CustIntentLetter_IT intentLetterCurrent;
        SalesLine salesLine;
        SalesTable salesTable;
        RefRecId prevSalesTableRecId;

        boolean insertionMade;
        ttsbegin;

        if (CustIntentLetterUpdateSalesOrderQuery_ITFlight::instance().isEnabledByDefault())
        {
            Query query = CustIntentLetter_IT::buildSalesTableIntentLetterQuery(_custIntentLetter.AccountNum);
            QueryRun queryRun = new QueryRun(query);

            while (queryrun.next())
            {
                salesTable = queryRun.get(tableNum(SalesTable));
                salesLine = queryRun.get(tableNum(SalesLine));
                if (salesTable.RecId != prevSalesTableRecId)
                {
                    TransDate salesLineDate = salesLine.deliveryDate();

                    if (CustIntentLetter_IT::needSalesLineBeIncluded(salesLineDate, _custIntentLetter))
                    {
                        _salesOrderMark.clear();
                        _salesOrderMark.initValue();
                        _salesOrderMark.CustAccount = _custIntentLetter.AccountNum;
                        _salesOrderMark.SalesId = salesTable.SalesId;
                        _salesOrderMark.IntentLetterId = _custIntentLetter.LetterId;
                        _salesOrderMark.SalesCreatedDate = salesLineDate;
                        _salesOrderMark.Marked = NoYes::Yes;
                        _salesOrderMark.Delivered = !(salesTable.lastPackingSlip() == '' && salesTable.lastInvoice() == '');
                        _salesOrderMark.insert();

                        insertionMade = true;
                    }
                    prevSalesTableRecId = salesTable.RecId;
                }
            }
        }
        else
        {
            while select salesTable
                outer join intentLetterCurrent
                    where intentLetterCurrent.InternalLetterId == salesTable.IntentLetterId_IT
                join salesLine
                    where salesLine.SalesId == salesTable.SalesId
                       && salesLine.SalesStatus != SalesStatus::Invoiced
                       && salesTable.InvoiceAccount == _custIntentLetter.AccountNum
                       && (salesTable.IntentLetterId_IT == '' || intentLetterCurrent.Status != IntentLetterStatus_IT::Open)
            {
                if (salesTable.RecId != prevSalesTableRecId)
                {
                    TransDate SalesLineDate = salesLine.deliveryDate();
                    if ((SalesLineDate >= _custIntentLetter.FromDate) && (SalesLineDate <= _custIntentLetter.ToDate))
                    {
                        _salesOrderMark.clear();
                        _salesOrderMark.initValue();
                        _salesOrderMark.CustAccount = _custIntentLetter.AccountNum;
                        _salesOrderMark.SalesId = salesTable.SalesId;
                        _salesOrderMark.IntentLetterId = _custIntentLetter.LetterId;
                        _salesOrderMark.SalesCreatedDate = SalesLineDate;
                        _salesOrderMark.Marked = NoYes::Yes;
                        _salesOrderMark.Delivered = !(salesTable.lastPackingSlip() == '' && salesTable.lastInvoice() == '');
                        _salesOrderMark.insert();

                        insertionMade = true;
                    }
                    prevSalesTableRecId = salesTable.RecId;
                }
            }
        }

        ttscommit;
        return insertionMade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesTableIntentLetterQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query object for SalesTable and SalesLine when the corresponding customer account
    /// is mapped to an intent letter.
    /// </summary>
    /// <param name = "_custAccount">The customer account tied to CustIntentLetter_IT</param>
    /// <returns>Query object for <c>SalesTable</c>, <c>SalesLine</c> and <c>CustIntentLetter_IT</c> record.</returns>
    [Hookable]
    public static Query buildSalesTableIntentLetterQuery(CustAccount _custAccount)
    {
        Query query = new Query();
        QueryBuildDataSource qbdsSalesTable = query.addDataSource(tableNum(SalesTable));
        qbdsSalesTable.addRange(fieldNum(SalesTable, InvoiceAccount)).value(_custAccount);
 
        QueryBuildDataSource qbdsSalesLine = qbdsSalesTable.addDataSource(tableNum(SalesLine));
        qbdsSalesLine.addRange(fieldNum(SalesLine, SalesStatus)).value(SysQuery::valueNot(SalesStatus::Invoiced));
        qbdsSalesLine.joinMode(JoinMode::InnerJoin);
        qbdsSalesLine.fetchmode(QueryFetchMode::One2One);
        qbdsSalesLine.addLink(fieldNum(SalesTable, SalesId), fieldNum(SalesLine, SalesId));

        QueryBuildDataSource qbdsIntentLetterCurrent = qbdsSalesTable.addDataSource(tableNum(CustIntentLetter_IT)); 
        qbdsIntentLetterCurrent.relations(false);
        qbdsIntentLetterCurrent.joinMode(JoinMode::OuterJoin);
        qbdsIntentLetterCurrent.fetchMode(QueryFetchMode::One2One);
        qbdsIntentLetterCurrent.addLink(fieldNum(SalesTable, IntentLetterId_IT), fieldNum(CustIntentLetter_IT, InternalLetterId));
        qbdsIntentLetterCurrent.addRange(fieldNum(CustIntentLetter_IT, Status)).value(SysQuery::valueNot(IntentLetterStatus_IT::Open));
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needSalesLineBeIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether sales order details needs to be inserted in TmpSalesOrderMark_IT table 
    /// while updating sales orders for an intent letter.
    /// </summary>
    /// <param name = "_salesLineDate">Trans date on SalesLine</param>
    /// <param name = "_custIntentLetter">CustomerIntentLetter_IT record</param>
    /// <returns>true if sales order details needs to be inserted; false otherwise.</returns>
    [Hookable]
    protected static boolean needSalesLineBeIncluded(TransDate _salesLineDate, CustIntentLetter_IT _custIntentLetter)
    {
        boolean includeSalesLine;

        if ((_salesLineDate >= _custIntentLetter.FromDate) && (_salesLineDate <= _custIntentLetter.ToDate))
        {
            includeSalesLine = true;
        }

        return includeSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates temporary <c>TmpSalesOrderMark</c> records that will
    /// be used to update sales oreder references to intent letter.
    /// </summary>
    /// <param name = "dataSource"><c>FormDataSource</c> object.</param>
    public static void updateSalesOrders(FormDataSource _dataSource)
    {
        TmpSalesOrderMark_IT salesOrderMark;
        SalesTable salesTable;
        CustIntentLetter_IT intentLetter;
        boolean insertionMade;

        if (_dataSource.table() != tableNum(custIntentLetter_IT))
        {
            return;
        }

        if (_dataSource.anyMarked())
        {
            intentLetter = _dataSource.getFirst(1);
            while (intentLetter)
            {
                if (!insertionMade)
                {
                    insertionMade = CustIntentLetter_IT::createTmpSalesTrans(
                        salesTable,
                        intentLetter,
                        salesOrderMark);
                }
                else
                {
                    CustIntentLetter_IT::createTmpSalesTrans(
                        salesTable,
                        intentLetter,
                        salesOrderMark);
                }
                intentLetter = _dataSource.getNext();
            }
        }


        else
        {
            intentLetter = _dataSource.cursor();
            insertionMade = CustIntentLetter_IT::createTmpSalesTrans(
                salesTable,
                intentLetter,
                salesOrderMark);
        }

        if (insertionMade)
        {
            Args args = new Args();
            args.caller(args.caller());
            args.record(salesOrderMark);
            FormRun formRun = new MenuFunction(menuitemDisplayStr(TmpSalesOrderMark_IT), MenuItemType::Display).create(args);
            formRun.run();
        }
        else
        {
            info("@ExtendedItallianLocalization:NoOrdersToUpdate");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupOpenIntentLetter_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets open intent letter for selected customer account.
    /// </summary>
    /// <param name = "_formControl"><c>FormControl</c> object.</param>
    /// <param name = "_custAccount">Customer account.</param>
    public static void lookupOpenIntentLetter_IT(FormControl _formControl, CustAccount _custAccount = '')
    {
        Query q = new Query();
        QueryBuildDataSource qbds = q.addDataSource(tableNum(CustIntentLetter_IT));
        qbds.addRange(fieldNum(CustIntentLetter_IT, Status)).value(queryValue(IntentLetterStatus_IT::Open));

        if (_custAccount)
        {
            qbds.addRange(fieldNum(CustIntentLetter_IT, AccountNum)).value(_custAccount);
        }

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(CustIntentLetter_IT), _formControl, true);
        sysTableLookup.parmQuery(q);

        sysTableLookup.addLookupfield(fieldNum(CustIntentLetter_IT, InternalLetterId));
        sysTableLookup.addLookupfield(fieldNum(CustIntentLetter_IT, LetterId));
        sysTableLookup.addLookupfield(fieldNum(CustIntentLetter_IT, Protocol));
        sysTableLookup.addLookupfield(fieldNum(CustIntentLetter_IT, IntentLetterType));
        sysTableLookup.addLookupfield(fieldNum(CustIntentLetter_IT, FromDate));
        sysTableLookup.addLookupfield(fieldNum(CustIntentLetter_IT, ToDate));
        sysTableLookup.addLookupfield(fieldNum(CustIntentLetter_IT, IntentLetterAmountMST));
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        if (_fieldId == fieldNum(CustIntentLetter_IT, IntentLetterYear) && this.IntentLetterYear)
        {
            this.FromDate = mkDate(1, 1, this.IntentLetterYear);
            this.ToDate = mkDate(31, 12, this.IntentLetterYear);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefIntentLetterInternalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the number sequence related to intent letters.
    /// </summary>
    /// <returns>The number sequence found.</returns>
    public static NumberSequenceReference numRefIntentLetterInternalId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(IntentLetterInternalId_IT));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(CustIntentLetter_IT, IntentLetterType):
                if (this.IntentLetterType == IntentLetterType_IT::Period)
                {
                    isValid = checkFailed("@ExtendedItallianLocalization:PeriodLetterTypeOutdated");
                }
                break;
            default:
                break;
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IT</CountryRegionCodes>
	<DeveloperDocumentation>@ExtendedItallianLocalization:CustIntentLetterTableDoc</DeveloperDocumentation>
	<FormRef>CustIntentLetter_IT</FormRef>
	<Label>@ExtendedItallianLocalization:CustIntentLetters</Label>
	<TitleField1>LetterId</TitleField1>
	<TitleField2>AccountNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<ClusteredIndex>InternalLetterIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>InternalLetterIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LetterId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InternalLetterId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LetterId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntentLetterType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntentLetterAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS24704</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dates</Name>
			<Label>@ExtendedItallianLocalization:Dates</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExternalID</Name>
			<Label>@ExtendedItallianLocalization:ExternalIdentification</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LetterId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateLetter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Protocol</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntentLetterYear</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InternalID</Name>
			<Label>@ExtendedItallianLocalization:InternalIdentification</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InternalLetterId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateRegister</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Notes</Name>
			<Label>@SYS40182</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS116429</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntentLetterType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntentLetterAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ClosedDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@ExtendedItallianLocalization:CloosingDateOfValidity</HelpText>
			<Label>@SYS22065</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DateLetter</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@ExtendedItallianLocalization:LetterDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DateRegister</Name>
			<ExtendedDataType>IntentLetterPostingDate_IT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IntentLetterAmountMST</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IntentLetterType</Name>
			<EnumType>IntentLetterType_IT</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InternalLetterId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>IntentLetterInternalId_IT</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LetterId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>IntentLetterId_IT</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Notes</Name>
			<ExtendedDataType>Notes</ExtendedDataType>
			<HelpText>@ExtendedItallianLocalization:NoteInsertedWhenLetterClosed</HelpText>
			<Label>@SYS70989</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Protocol</Name>
			<ExtendedDataType>IntentLetterProtocol_IT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<EnumType>IntentLetterStatus_IT</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>IntentLetterYear</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>IntentLetterYear_IT</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LastClosedRemainingAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@ExtendedItallianLocalization:LastClosedRemainingAmount</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LastClosedSalesAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@ExtendedItallianLocalization:LastClosedSalesAmount</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LastClosedValueCalculated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@ExtendedItallianLocalization:LastClosedValueCalculated</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountLetterIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LetterId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IntentLetterYear</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InternalLetterIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InternalLetterId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>