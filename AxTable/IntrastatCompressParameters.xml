<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatCompressParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class IntrastatCompressParameters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(FieldId _fieldId)
    {
        if (!_fieldId)
        {
            return false;
        }

        return (select firstonly RecId
                    from intrastatCompressParameters
                        where intrastatCompressParameters.FieldId == _fieldId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldEnabled</Name>
				<Source><![CDATA[
    static boolean fieldEnabled(FieldId _fieldId)
    {
        boolean enabled                                 = true;
        DictField               dictField               = new DictField(tablenum(Intrastat), _fieldId);
        DictConfigurationKey    dictConfigurationKey    = new DictConfigurationKey(dictField.configurationKeyId());

        if (dictConfigurationKey)
        {
            enabled = dictConfigurationKey.enabled();
        }

        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldName</Name>
				<Source><![CDATA[
    static str fieldName(fieldId _fieldId)
    {
        str name;

        if (_fieldId == fieldNum(Intrastat, VATNum) &&
            TaxIntegrationUtils::isMultipleTaxIdEnabledForIntrastat())
        {
            name = "@IntrastatByTaxId:CounterpartyTaxRegistrationNumber";
        }
        
        else
        {
            name = fieldid2pname(tablenum(Intrastat), _fieldId);
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static IntrastatCompressParameters find(FieldId          _fieldId,
                                            boolean          _update = false)
    {
        IntrastatCompressParameters intrastatCompressParameters;

        if (_fieldId)
        {
            intrastatCompressParameters.selectForUpdate (_update);

            select firstonly intrastatCompressParameters
                where intrastatCompressParameters.FieldId == _fieldId;
        }

        return intrastatCompressParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiate</Name>
				<Source><![CDATA[
    static void initiate()
    {
        IntrastatCompressParameters intrastatCompressParameters;
        List                        compressFieldIdList;
        ListEnumerator              listEnumerator;

        if (!IntrastatCompressParameters::initiated())
        {
            compressFieldIdList = IntrastatCompressParameters::notSelectedFieldIdList();
            listEnumerator      = compressFieldIdList.getEnumerator();

            ttsbegin;

            while (listEnumerator.moveNext())
            {
                intrastatCompressParameters.clear();
                intrastatCompressParameters.initValue();
                intrastatCompressParameters.FieldId = listEnumerator.current();
                intrastatCompressParameters.insert();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiated</Name>
				<Source><![CDATA[
    static boolean initiated()
    {
        IntrastatCompressParameters intrastatCompressParameters;

        select count(RecId)
            from intrastatCompressParameters;

        return intrastatCompressParameters.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notSelectedFieldIdList</Name>
				<Source><![CDATA[
    static List notSelectedFieldIdList()
    {
        int             i,h;
        List            notSelectedFieldList    = new List(Types::Integer);
        SysDictField    sysDictField;
        DictTable       dictTable = new DictTable(tablenum(Intrastat));
        DictFieldGroup  dictFieldGroup;

        for (i=1;i<=dictTable.fieldGroupCnt();i++)
        {
            if (dictTable.fieldGroup(i) == tablefieldgroupstr(Intrastat, CompressionOfIntrastat))
            {
                dictFieldGroup = new DictFieldGroup(dictTable.id(),dictTable.fieldGroup(i));
                for (h=1;h<=dictFieldGroup.numberOfFields();h++)
                {
                    sysDictField = new SysDictField(dictFieldGroup.tableid(), dictFieldGroup.field(h));
                    if (IntrastatCompressParameters::fieldEnabled(sysDictField.id()))
                    {
                        if (!IntrastatCompressParameters::exist(sysDictField.id()))
                        {
                            notSelectedFieldList.addEnd(sysDictField.id());
                        }
                    }
                }
            }
        }

        return notSelectedFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedNotSelectedFieldIdList</Name>
				<Source><![CDATA[
    static container packedNotSelectedFieldIdList()
    {
        return IntrastatCompressParameters::notSelectedFieldIdList().pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedSelectedFieldIdList</Name>
				<Source><![CDATA[
    static container packedSelectedFieldIdList()
    {
        return IntrastatCompressParameters::selectedFieldIdList().pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedFieldIdList</Name>
				<Source><![CDATA[
    static List selectedFieldIdList()
    {
        IntrastatCompressParameters intrastatCompressParameters;
        List                        selectedFieldIdList     = new List(Types::Integer);
        DictField                   dt;

        while select FieldId from intrastatCompressParameters
        {
            dt = new DictField(tableNum(Intrastat), intrastatCompressParameters.FieldId);
            if (dt)
            {
                selectedFieldIdList.addEnd(intrastatCompressParameters.FieldId);
            }
        }

        return selectedFieldIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeFromPackedList</Name>
				<Source><![CDATA[
    static void writeFromPackedList(container packedList)
    {
        IntrastatCompressParameters intrastatCompressParameters;
        List                        selectedFieldIdList;
        ListEnumerator              selectedEnumerator;
        fieldId                     fieldId;

        ttsbegin;

        delete_from intrastatCompressParameters;

        if (packedList)
        {
            selectedFieldIdList = List::create(packedList);
            selectedEnumerator  = selectedFieldIdList.getEnumerator();

            while (selectedEnumerator.moveNext())
            {
                fieldId = selectedEnumerator.current();

                intrastatCompressParameters.clear();
                intrastatCompressParameters.initValue();
                intrastatCompressParameters.FieldId = fieldId;
                intrastatCompressParameters.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ForeignTrade</ConfigurationKey>
	<DeveloperDocumentation>@SYS124553</DeveloperDocumentation>
	<Label>@SYS5255</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>FieldId</TitleField1>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>IntrastatCompressParametersIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Intrastat</Modules>
	<PrimaryIndex>IntrastatCompressParametersIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FieldId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FieldId</ExtendedDataType>
			<RelatedTable>Intrastat</RelatedTable>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IntrastatCompressParametersIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FieldId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>