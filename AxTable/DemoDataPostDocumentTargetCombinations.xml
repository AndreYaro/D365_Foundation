<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DemoDataPostDocumentTargetCombinations</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DemoDataPostDocumentTargetCombinations extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a document target lookup.
    /// </summary>
    /// <param name = "_stringControl">The control to attach the lookup to.</param>
    /// <param name = "_lookupDocument">The document type to screen targets.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void createLookup(FormStringControl _stringControl, DemoDataPostDocument _lookupDocument)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(DemoDataPostDocumentTargetCombinations));
        qbds.addRange(fieldNum(DemoDataPostDocumentTargetCombinations, Document)).value(queryValue(_lookupDocument));

        SysTableLookup documentTargetLookup = SysTableLookup::newParameters(tableNum(DemoDataPostDocumentTargetCombinations), _stringControl, true);

        documentTargetLookup.addLookupfield(fieldNum(DemoDataPostDocumentTargetCombinations, DocumentTarget));
        documentTargetLookup.parmQuery(query);
        documentTargetLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a given document and document target tuple exists.
    /// </summary>
    /// <param name = "_document">The document type.</param>
    /// <param name = "_target">The document target.</param>
    /// <returns>True if the record exists; otherwise, false.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exists(DemoDataPostDocument _document, DemoDataPostDocumentTarget _target)
    {
        DemoDataPostDocumentTargetCombinations combinations;

        select firstonly RecId from combinations
            where combinations.Document == _document
                && combinations.DocumentTarget == _target;

        return combinations.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a combination record.
    /// </summary>
    /// <param name = "_document">The document type.</param>
    /// <param name = "_target">The document target.</param>
    /// <param name = "_forUpdate">Flag whether to select for update.</param>
    /// <returns>The combination record, if any.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static DemoDataPostDocumentTargetCombinations find(DemoDataPostDocument _document, DemoDataPostDocumentTarget _target, boolean _forUpdate = false)
    {
        DemoDataPostDocumentTargetCombinations combinations;

        combinations.selectForUpdate(_forUpdate);

        select firstonly combinations
            where combinations.Document == _document
                && combinations.DocumentTarget == _target;

        return combinations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIfEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the document target combinations to default values if none exist.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void initIfEmpty()
    {
        DemoDataPostDocumentTargetCombinations combinations;

        select firstonly RecId from combinations;

        if (combinations.RecId == 0)
        {
            DemoDataPostDocumentTargetCombinations::initDefaultCombinations();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultCombinations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the set of default document and document target tuples.
    /// </summary>
    /// <remarks>
    /// Each tuple defines a valid combination of document and document target
    /// for demo data automatic processing.
    /// Extensions to the demo data processor should add new combinations to this method
    /// with the chain of command to insure correct validation.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void initDefaultCombinations()
    {
        DemoDataPostDocumentTargetCombinations combinations;

        combinations.Document = DemoDataPostDocument::BudgetTransaction;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::Post;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::CostingVersion;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::Activate;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::CustPaymentJournal;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::Post;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::FixedAssetJournal;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::Post;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::FreeTextInvoice;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::Post;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::GeneralJournal;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::Post;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::InventoryAdjustment;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::Post;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::InvoiceJournal;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::Post;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::PriceCalculation;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::Calculate;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::PurchaseOrder;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::Confirm;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::PurchaseOrder;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::VendorConfirm;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::PurchaseOrder;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::ProductReceipt;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::PurchaseOrder;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::Invoice;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::SalesOrder;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::Confirm;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::SalesOrder;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::PackingSlip;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::SalesOrder;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::Invoice;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::TradeAgreement;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::Post;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::VendorInvoice;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::Post;
        combinations.insert();

        combinations.Document = DemoDataPostDocument::VendPaymentJournal;
        combinations.DocumentTarget = DemoDataPostDocumentTarget::Post;
        combinations.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@DemoDataPost:DocumentTargetCombinationsDevDoc</DeveloperDocumentation>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<Modules>AccountsPayable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Document</Name>
			<Label>@DemoDataPost:Document</Label>
			<EnumType>DemoDataPostDocument</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentTarget</Name>
			<Label>@DemoDataPost:DocumentTarget</Label>
			<EnumType>DemoDataPostDocumentTarget</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>KeyIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Document</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DocumentTarget</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>DemoDataPostRunDocument</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DemoDataPostRunDocument</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Document</Name>
					<Field>Document</Field>
					<RelatedField>Document</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>