<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGERequisiteTypes_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGERequisiteTypes_W extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>baseTypeName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEBaseTypeStr_W baseTypeName()
    {
        return new SysDictEnum(enumNum(LedgerRRGEBaseType_W)).value2Symbol(this.BaseType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editBaseType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit LedgerRRGEBaseTypeStr_W editBaseType(boolean                   _set,
                                                     LedgerRRGEBaseTypeStr_W   _baseTypeStr)
    {
        SysDictEnum sysDictEnum = new SysDictEnum(enumNum(LedgerRRGEBaseType_W));

        if(_set)
        {
            this.BaseType = sysDictEnum.symbol2Value(_baseTypeStr);
        }

        return sysDictEnum.value2Symbol(this.BaseType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullTypeName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display LedgerRRGEFullTypeName_W fullTypeName()
    {
        LedgerRRGERequisiteTypes_W  requisiteType   = LedgerRRGERequisiteTypes_W::find(this.RecId);
        LedgerRRGEPatternDesc_W     patternDesc     = requisiteType.patternValue().PatternDesc;
        LedgerRRGEValue_W           value           = requisiteType.permissibleValue().Value;
        const str                   CharUnd	        = '_';

        return requisiteType.baseTypeName()                 + CharUnd +
               int2str(requisiteType.MinLength)             + CharUnd +
               int2str(requisiteType.MaxLength)             + CharUnd +
               int2str(requisiteType.Length)                + CharUnd +
               num2str(requisiteType.MinExclusive,0,0,2,0)  + CharUnd +
               num2str(requisiteType.MaxExclusive,0,0,2,0)  + CharUnd +
               num2str(requisiteType.MinInclusive,0,0,2,0)  + CharUnd +
               num2str(requisiteType.MaxInclusive,0,0,2,0)  + CharUnd +
               int2str(requisiteType.TotalDigits)           + CharUnd +
               int2str(requisiteType.FractionDigits)        + (patternDesc ? CharUnd : '') +
               subStr(patternDesc, 1, 10)                   + (value       ? CharUnd : '') +
               subStr(value, 1, 10);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldFromObject</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFieldFromObject(Object _schemaObject)
    {
        switch (classIdGet(_schemaObject))
        {
            case classNum(XmlSchemaMaxInclusiveFacet):
                this.MaxInclusive = _schemaObject.value();
                break;

            case classNum(XmlSchemaMaxExclusiveFacet):
                this.MinExclusive = _schemaObject.value();
                break;

            case classNum(XmlSchemaMinInclusiveFacet):
                this.MinInclusive = _schemaObject.value();
                break;

            case classNum(XmlSchemaMinExclusiveFacet):
                this.MinExclusive = _schemaObject.value();
                break;

            case classNum(XmlSchemaLengthFacet):
                this.Length = _schemaObject.value();
                break;

            case classNum(XmlSchemaMinLengthFacet):
                this.MinLength = _schemaObject.value();
                break;

            case classNum(XmlSchemaMaxLengthFacet):
                this.MaxLength = _schemaObject.value();
                break;

            case classNum(XmlSchemaTotalDigitsFacet):
                this.TotalDigits = _schemaObject.value();
                break;

            case classNum(XmlSchemaFractionDigitsFacet):
                this.FractionDigits = _schemaObject.value();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSchemaSimpleType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container initFromSchemaSimpleType(XmlSchemaSimpleType _schemaSimpleType)
    {
        XmlSchemaSimpleType             schemaSimpleType;
        XmlSchemaSimpleTypeContent      content;
        XmlSchemaSimpleTypeRestriction  restriction;
        XmlQualifiedName                xmlQualifiedName;
        const str                       XsdNameSpace	= 'http://www.w3.org/2001/XMLSchema';
        container                       contPatternValue;
        container                       contPermissibleValue;

        void initFields()
        {
            Object                      schemaObject;
            XmlSchemaObjectCollection   xmlSchemaObjectCollection = restriction.facets();
            XmlSchemaObjectEnumerator   objectEnumerator          = xmlSchemaObjectCollection.getEnumerator();

            while(objectEnumerator.moveNext())
            {
                schemaObject = objectEnumerator.current();
                switch (classIdGet(schemaObject))
                {
                    case classNum(XmlSchemaEnumerationFacet):
                        contPermissibleValue += schemaObject.value();
                        break;

                    case classNum(XmlSchemaPatternFacet):
                        contPatternValue += schemaObject.value();
                        break;

                    default:
                        this.initFieldFromObject(schemaObject);
                }
            }
        }
       
        if(_schemaSimpleType)
        {
            content              = _schemaSimpleType.content();
            this.TypeAnnotation  = LedgerRRGESchemaParser_W::annotation(_schemaSimpleType);
            this.RequisiteTypeId = _schemaSimpleType.name();
            this.AutomaticCreate = NoYes::Yes;

            if (classIdGet(content) == classNum(XmlSchemaSimpleTypeRestriction))
            {
                restriction = content;
                initFields();

                if(restriction.baseType())
                {
                    restriction = restriction.baseType().content();
                    initFields();
                }

                xmlQualifiedName = restriction.baseTypeName();

                if(xmlQualifiedName.namespace() != XsdNamespace)
                {
                    schemaSimpleType = _schemaSimpleType.baseXmlSchemaType();
                    restriction      = schemaSimpleType.content();

                    initFields();

                    xmlQualifiedName     = restriction.baseTypeName();
                    this.TypeAnnotation  = LedgerRRGESchemaParser_W::annotation(schemaSimpleType);
                    this.RequisiteTypeId = schemaSimpleType.name();
                }

                this.BaseType = new SysDictEnum(enumNum(LedgerRRGEBaseType_W)).symbol2Value(xmlQualifiedName.name());
            }
        }

        return [contPatternValue, contPermissibleValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTypeId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    server public void initTypeId()
    {
        LedgerRRGERequisiteTypes_W  requisiteTypes;
        LedgerRRGERequisiteTypeId_W requisiteTypeId;
        int                         typeNameNum = 0;
        int                         pos;
        int                         lenStr;
        const str                   Underscore	= '_';

        select BaseType, RequisiteTypeId, maxof(RecId) from requisiteTypes group by BaseType, RequisiteTypeId
            where requisiteTypes.BaseType == this.BaseType &&
                  requisiteTypes.RecId    != this.RecId;

        if(requisiteTypes.RequisiteTypeId)
        {
            requisiteTypeId = requisiteTypes.RequisiteTypeId;
            lenStr          = strLen(requisiteTypeId);
            pos             = strScan(requisiteTypeId, Underscore, lenStr, -lenStr);

            if(pos)
            {
                typeNameNum = str2int(subStr(requisiteTypeId, lenStr, -(lenStr - pos)));
            }
        }

        select count(RecId) from requisiteTypes
            where requisiteTypes.BaseType == this.BaseType &&
                  requisiteTypes.RecId    != this.RecId;

        typeNameNum = max(requisiteTypes.RecId, typeNameNum);

        requisiteTypeId = this.RequisiteTypeId;
        if(!requisiteTypeId)
        {
            requisiteTypeId = this.baseTypeName();
        }

        do
        {
            typeNameNum++;
            this.RequisiteTypeId = requisiteTypeId + Underscore + int2str(typeNameNum);
        }
        while (LedgerRRGERequisiteTypes_W::existTypeId(this.RequisiteTypeId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>patternValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEPatternValue_W patternValue()
    {
        LedgerRRGEPatternValue_W patternValue;
       
        select firstonly patternValue
            where patternValue.LedgerRRGERequisiteTypes_W == this.RecId;

        return patternValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>permissibleValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEPermissibleValue_W permissibleValue()
    {
        LedgerRRGEPermissibleValue_W permissibleValue;
       
        select firstonly permissibleValue
            where  permissibleValue.LedgerRRGERequisiteTypes_W == this.RecId;

        return permissibleValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the first <c>LedgerRRGERequisiteTypes_W</c> record based on the type id value.
    /// </summary>
    /// <param name="_typeId">
    ///    The type id value of the record to be found.
    /// </param>
    /// <returns>
    ///    True if a record is found; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean existTypeId(LedgerRRGERequisiteTypeId_W _typeId)
    {
        return _typeId && (select firstonly RecId from ledgerRRGERequisiteTypes_W
            where ledgerRRGERequisiteTypes_W.RequisiteTypeId == _typeId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LedgerRRGERequisiteTypes_W</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The RecId of the LedgerRRGERequisiteTypes_W record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerRRGERequisiteTypes_W</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGERequisiteTypes_W find(
        RecId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerRRGERequisiteTypes_W ledgerRRGERequisiteTypes;

        ledgerRRGERequisiteTypes.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerRRGERequisiteTypes.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerRRGERequisiteTypes
            where ledgerRRGERequisiteTypes.RecId == _recId;

        return ledgerRRGERequisiteTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllDataTypes</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public server static LedgerRRGERequisiteTypes_W findAllDataTypes(LedgerRRGERequisiteTypes_W _dataTypes,
                                                                     container                  _cont)
    {
        LedgerRRGERequisiteTypes_W  dataTypes;
        container                   contPatternValue;
        container                   contPermissibleValue;

        [contPatternValue, contPermissibleValue] = _cont;

        while select dataTypes where
                         dataTypes.TypeAnnotation  == _dataTypes.TypeAnnotation
                      && dataTypes.BaseType        == _dataTypes.BaseType
                      && dataTypes.MinLength       == _dataTypes.MinLength
                      && dataTypes.MaxLength       == _dataTypes.MaxLength
                      && dataTypes.Length          == _dataTypes.Length
                      && dataTypes.MaxExclusive    == _dataTypes.MaxExclusive
                      && dataTypes.MinExclusive    == _dataTypes.MinExclusive
                      && dataTypes.TotalDigits     == _dataTypes.TotalDigits
                      && dataTypes.MaxInclusive    == _dataTypes.MaxInclusive
                      && dataTypes.FractionDigits  == _dataTypes.FractionDigits
                      && dataTypes.MinInclusive    == _dataTypes.MinInclusive
        {
            if(LedgerRRGEPatternValue_W::accordWithCont(contPatternValue, dataTypes.RecId)    &&
               LedgerRRGEPermissibleValue_W::accordWithCont(contPermissibleValue, dataTypes.RecId))
            {
                return dataTypes;
            }
        }

        return dataTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds a type by its ID.
    /// </summary>
    /// <param name="_typeId">
    ///  An ID of the type.
    /// </param>
    /// <param name="_update">
    ///   Whether select for update or not.
    /// </param>
    /// <returns>
    ///  A type found.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGERequisiteTypes_W findByTypeId(LedgerRRGERequisiteTypeId_W   _typeId,
                                                          boolean                       _update = false)
    {
        LedgerRRGERequisiteTypes_W  dataType;

        dataType.selectForUpdate(_update);

        if (_typeId)
        {
            select firstonly dataType where dataType.RequisiteTypeId == _typeId;
        }

        return dataType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBaseType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void lookupBaseType(FormStringControl _ctrl)
    {
        EnumLookup_RU::lookup(_ctrl, enumNum(LedgerRRGEBaseType_W), conNull(), false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<Label>@SYS5619</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>RequisiteTypeId</TitleField1>
	<TitleField2>TypeAnnotation</TitleField2>
	<ClusteredIndex>TypeIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Ledger</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TypeIdIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LedgerRRGEPatternValue_W</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGEPatternValue_W</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerRRGEPermissibleValue_W</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGEPermissibleValue_W</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerRRGEProperties_W</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGEProperties_W</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerRRGESectionProperties_W</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGESectionProperties_W</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerRRGETableColumns_W</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGETableColumns_W</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequisiteTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TypeAnnotation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editBaseType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequisiteTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TypeAnnotation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>fullTypeName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequisiteTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Create</Name>
			<Label>@SYS39804</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AutomaticCreate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequisiteTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TypeAnnotation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editBaseType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequisiteTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TypeAnnotation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editBaseType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Properties</Name>
			<Label>@SYS10344</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MinLength</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxLength</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Length</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalDigits</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FractionDigits</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinExclusive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxExclusive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinInclusive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxInclusive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutomaticCreate</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@LedgerRRG:LedgerRRG_AutomaticCreation</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BaseType</Name>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>LedgerRRGEBaseType_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FractionDigits</Name>
			<ExtendedDataType>LedgerRRGEFractionDigits_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Length</Name>
			<ExtendedDataType>LedgerRRGELength_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxExclusive</Name>
			<ExtendedDataType>LedgerRRGEMaxExclusive_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxInclusive</Name>
			<ExtendedDataType>LedgerRRGEMaxInclusive_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MaxLength</Name>
			<ExtendedDataType>LedgerRRGEMaxLength_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MinExclusive</Name>
			<ExtendedDataType>LedgerRRGEMinExclusive_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MinInclusive</Name>
			<ExtendedDataType>LedgerRRGEMinInclusive_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MinLength</Name>
			<ExtendedDataType>LedgerRRGEMinLength_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RequisiteTypeId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>LedgerRRGERequisiteTypeId_W</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TotalDigits</Name>
			<ExtendedDataType>LedgerRRGETotalDigits_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TypeAnnotation</Name>
			<ExtendedDataType>LedgerRRGETypeAnnotation_W</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TypeIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RequisiteTypeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>