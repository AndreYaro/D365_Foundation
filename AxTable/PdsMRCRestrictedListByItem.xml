<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsMRCRestrictedListByItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsMRCRestrictedListByItem extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        // Flush any cached information
        classFactory.globalObjectCache().clear(tableStr(PdsMRCRestrictedListByItem));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        // Flush any cached information
        classFactory.globalObjectCache().clear(tableStr(PdsMRCRestrictedListByItem));
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the item that has ItemId equal to the record's ItemId.
    /// </summary>
    /// <returns>
    /// Name of the item with the same ItemId as this record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display ItemName itemName()
    {
        return InventTable::find(this.ItemId).defaultProductName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>stateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method that returns the name of the state for the current record.
    /// </summary>
    /// <returns>Name of the state with record's CountryId and StateId.</returns>
    public display AddressStatename stateName()
    {
        return LogisticsAddressState::name(this.CountryId, this.StateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        // Flush any cached information
        classFactory.globalObjectCache().clear(tableStr(PdsMRCRestrictedListByItem));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch ( _fieldName )
        {
            case fieldStr(PdsMRCRestrictedListByItem, ItemId):
                if ( InventTable::find(this.ItemId).ItemType == ItemType::Service )
                {
                    ret = checkFailed("@PDS1383");
                }
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                     ret;
        PdsMRCRestrictionList       restrictionList;
        PdsMRCRestrictionList       otherRestList;
        PdsMRCRestrictedListByItem  listByItem;

        ret = super();

        if (ret)
        {
            restrictionList = PdsMRCRestrictionList::findState(
                this.ListId, this.CountryId, this.StateId);

            if (!restrictionList.RecId)
            {
                ret = checkFailed("@PDS872");
            }
            else
            {
                select firstonly TableId
                    from listByItem
                    where  listByItem.CountryId == this.CountryId
                        && listByItem.ItemId    == this.ItemId
                        && listByItem.RecId     != this.RecId
                    join RecId
                    from otherRestList
                    where  otherRestList.ListId    == listByItem.ListId
                        && otherRestList.CountryId == listByItem.CountryId
                        && otherRestList.StateId   == listByItem.StateId
                        && otherRestList.ListType  != restrictionList.ListType;

                if (otherRestList.RecId)
                {
                    ret = checkFailed("@PDS873");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if record exists with the same _listId, countryId, stateId and ItemId.
    /// </summary>
    /// <param name="_itemId">ItemId to search for.</param>
    /// <param name="_countryId">CountryId to search for</param>
    /// <param name="_stateId">StateId to search for.</param>
    /// <param name="_listId">MRCListId to search for.</param>
    /// <returns>result of search for restricted list.</returns>
    public static boolean checkExist(
        ItemId                  _itemId,
        AddressCountryRegionId  _countryId,
        AddressStateId          _stateId,
        PdsMRCListId            _listId)
    {
        boolean ret = true;

        if (_listId && _countryId && _itemId
            && !PdsMRCRestrictedListByItem::existItemId(_itemId,
                                               _countryId,
                                               _stateId,
                                               _listId))
        {
            ret = checkFailed(strFmt(PdsMRCRestrictedListByItem::txtNotExist(),
                                      _listId,
                                      _countryId,
                                      _stateId,
                                      _itemId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemIsRestricted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if any restricted lists exist for an item.
    /// </summary>
    /// <param name="_itemId">
    /// ID of the item to check.
    /// </param>
    /// <returns>
    /// true if there is a restricted list; otherwise, false.
    /// </returns>
    public static boolean checkItemIsRestricted(ItemId _itemId)
    {
        SysGlobalObjectCache sgoc;
        container            result;
        container            cacheKey;
        boolean              isRestricted;

        if (_itemId)
        {
            // The query below will not hit kernel record cache due to the fact that a full AK is not
            // provided to the query. To cut down on RPC and SQL query load, the memoization pattern
            // is used here to avoid queries.
            sgoc = classFactory.globalObjectCache();
            cacheKey = [curext(), funcName(), _itemId];
            result = sgoc.find(tableStr(PdsMRCRestrictedListByItem), cacheKey);

            if (result == conNull())
            {
                isRestricted = ((select PdsMRCRestrictedListByItem where pdsMRCRestrictedListByItem.ItemId == _itemId).RecId != 0);

                sgoc.insert(tableStr(PdsMRCRestrictedListByItem), cacheKey, [isRestricted]);
            }
            else
            {
                [isRestricted] = result;
            }
        }

        return isRestricted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemRestrictedForCountry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if an item is restricted in a country/region.
    /// </summary>
    /// <param name="_countryId">
    /// ID of the country/region to check.
    /// </param>
    /// <param name="_itemId">
    /// ID of the item to check.
    /// </param>
    /// <returns>
    /// true if the item is restricted in a country/region; otherwise, false.
    /// </returns>
    public static boolean checkItemRestrictedForCountry(
        AddressCountryRegionId  _countryId,
        ItemId                  _itemId)
    {
        PdsMRCRestrictedListByItem  restrictedByItem;
        PdsMRCRestrictionList       restrictionList;
        SysGlobalObjectCache        sgoc;
        container                   result;
        container                   cacheKey;
        boolean                     isRestricted;

        if (_countryId && _itemId)
        {
            // The query below will not hit kernel record cache due to the fact that a full AK is not
            // provided to the query. To cut down on RPC and SQL query load, the memoization pattern
            // is used here to avoid queries.
            sgoc = classFactory.globalObjectCache();
            cacheKey = [curext(), funcName(), _itemId, _countryId];
            result = sgoc.find(tableStr(PdsMRCRestrictedListByItem), cacheKey);

            if (result == conNull())
            {
                select firstonly RecId
                from   restrictionList
                where  restrictionList.ListType     == PdsMRCListType::Exclusive
                    && restrictionList.StateId      == ''
                exists join RecId
                from restrictedByItem
                where  restrictedByItem.CountryId   == restrictionList.CountryId
                    && restrictedByItem.ListId      == restrictionList.ListId
                    && restrictedByItem.CountryId   == _countryId
                    && restrictedByItem.ItemId      == _itemId;

                isRestricted = (restrictionList.RecId != 0);

                sgoc.insert(tableStr(PdsMRCRestrictedListByItem), cacheKey, [isRestricted]);
            }
            else
            {
                [isRestricted] = result;
            }
        }

        return isRestricted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemRestrictedForState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if an item is restricted in a country/region and state.
    /// </summary>
    /// <param name="_countryId">
    /// ID of the country/region to check.
    /// </param>
    /// <param name="_stateId">
    /// ID of the state to check.
    /// </param>
    /// <param name="_itemId">
    /// ID of the item to check.
    /// </param>
    /// <returns>
    /// true if the item is restricted in a country/region and state; otherwise, false.
    /// </returns>
    public static boolean checkItemRestrictedForState(
        AddressCountryRegionId  _countryId,
        AddressStateId          _stateId,
        ItemId                  _itemId)
    {
        SysGlobalObjectCache sgoc;
        container            result;
        container            cacheKey;
        boolean              isRestricted;

        if (_countryId && _stateId && _itemId)
        {
            // The query below will not hit kernel record cache due to the fact that a full AK is not
            // provided to the query. To cut down on RPC and SQL query load, the memoization pattern
            // is used here to avoid queries.
            sgoc = classFactory.globalObjectCache();
            cacheKey = [curext(), funcName(), _itemId, _countryId, _stateId];
            result = sgoc.find(tableStr(PdsMRCRestrictedListByItem), cacheKey);

            if (result == conNull())
            {
                isRestricted = ((select pdsMRCRestrictedListByItem
                                 where  pdsMRCRestrictedListByItem.CountryId == _countryId
                                     && pdsMRCRestrictedListByItem.StateId   == _stateId
                                     && pdsMRCRestrictedListByItem.ItemId    == _itemId).RecId != 0);

                sgoc.insert(tableStr(PdsMRCRestrictedListByItem), cacheKey, [isRestricted]);
            }
            else
            {
                [isRestricted] = result;
            }
        }

        return isRestricted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _recId)
    {
        return _recId
            && (select pdsMRCRestrictedListByItem
                where  pdsMRCRestrictedListByItem.RecId == _recId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record exists
    /// </summary>
    /// <param name="_itemId">
    /// ItemId to search for.
    /// </param>
    /// <param name="_countryId">
    /// CountryId to search for
    /// </param>
    /// <param name="_stateId">
    /// StateId to search for.
    /// </param>
    /// <param name="_listId">
    /// MRCListId to search for.
    /// </param>
    /// <returns>
    /// result of search for restricted list.
    /// </returns>
    public static boolean existItemId(
        ItemId                  _itemId,
        AddressCountryRegionId  _countryId,
        AddressStateId          _stateId,
        PdsMRCListId            _listId
        )
    {
        return _itemId && _countryId && _listId
            && (select pdsMRCRestrictedListByItem
                where  pdsMRCRestrictedListByItem.ListId    == _listId
                    && pdsMRCRestrictedListByItem.CountryId == _countryId
                    && pdsMRCRestrictedListByItem.StateId   == _stateId
                    && pdsMRCRestrictedListByItem.ItemId    == _itemId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PdsMRCRestrictedListByItem find(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        PdsMRCRestrictedListByItem restrictedItemList;

        if (_recId)
        {
            restrictedItemList.selectForUpdate(_forUpdate);
            select firstonly restrictedItemList
                where restrictedItemList.RecId == _recId;
        }

        return restrictedItemList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRestricted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an item is part of a restricted list.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <param name="_countryId">
    /// The ID of the country/region.
    /// </param>
    /// <param name="_stateId">
    /// The ID of the state.
    /// </param>
    /// <returns>
    /// True if the given item is part of a restricted list; otherwise, false.
    /// </returns>
    public static boolean isRestricted(
        ItemId _itemId,
        AddressCountryRegionId _countryId = '',
        LogisticsAddressStateId _stateId = '')
    {
        PdsMRCRestrictedListByItem  pdsMRCRestrictedListByItem;
        SysGlobalObjectCache        sgoc;
        container                   result;
        container                   cacheKey;
        boolean                     isRestricted;

        if (_itemId)
        {
            // The query below will not hit kernel record cache due to the or conditions
            // and the fact that a full AK is not provided to the query. To cut down on
            // RPC and SQL query load, the memoization pattern is used here to avoid queries.
            sgoc = classFactory.globalObjectCache();
            cacheKey = [curext(), funcName(), _itemId, _countryId, _stateId];
            result = sgoc.find(tableStr(PdsMRCRestrictedListByItem), cacheKey);

            if (result == conNull())
            {
                select firstonly RecId
                    from pdsMRCRestrictedListByItem
                    where   pdsMRCRestrictedListByItem.ItemId == _itemId
                        &&  (   !_countryId
                             || pdsMRCRestrictedListByItem.CountryId == _countryId)
                        &&  (   !_stateId
                             || pdsMRCRestrictedListByItem.StateId == _stateId
                             || pdsMRCRestrictedListByItem.StateId == '');
                isRestricted = (pdsMRCRestrictedListByItem.RecId != 0);

                sgoc.insert(tableStr(PdsMRCRestrictedListByItem), cacheKey, [isRestricted]);
            }
            else
            {
                [isRestricted] = result;
            }
        }

        return isRestricted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns default warning used in the checkExist method when record doens't exist.
    /// </summary>
    /// <returns>Static text used to display that a record doens't exist.</returns>
    public static str txtNotExist()
    {
        return "@PDS874";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsMRC</ConfigurationKey>
	<DeveloperDocumentation>@PDS1088</DeveloperDocumentation>
	<FormRef>PdsMRCRestrictedItemsByCountryState</FormRef>
	<Label>@PDS945</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>StateId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ItemCountryStateListIdx</ClusteredIndex>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ItemCountryStateListIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Id</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressCountryRegionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ListId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsMRCListId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemCountryStateListIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ListId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CountryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CountryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ListIdRelation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsMRCRestrictionList</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ListId</Name>
					<Field>ListId</Field>
					<RelatedField>ListId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryId</Name>
					<Field>CountryId</Field>
					<RelatedField>CountryId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StateId</Name>
					<Field>StateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryId</Name>
					<SourceEDT>AddressCountryRegionId</SourceEDT>
					<Field>CountryId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressState_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StateId</Name>
					<Field>StateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>