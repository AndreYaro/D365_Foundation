<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendStateTaxID</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendStateTaxID extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether there is at least one document attached to the state tax ID record.
    /// </summary>
    /// <returns>
    /// true if the state tax ID has documents; otherwise, false.
    /// </returns>
    display VendProfileHasDocuments hasDocuments()
    {
        return DocuRef::exist(this.DataAreaId, this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.StateTaxID = Tax1099ElectronicCheck::formatTIN(this.StateTaxID, this.TaxIDType);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.StateTaxID = Tax1099ElectronicCheck::formatTIN(this.StateTaxID, this.TaxIDType);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIfStateCanBeSent</Name>
				<Source><![CDATA[
    private boolean validateIfStateCanBeSent()
    {
        boolean ret = true;
        #define.AL('AL')
        #define.AZ('AZ')
        #define.AR('AR')
        #define.CA('CA')
        #define.CO('CO')
        #define.CT('CT')
        #define.DE('DE')
        #define.DC('DC')
        #define.GA('GA')
        #define.HI('HI')
        #define.ID('ID')
        #define.IN('IN')
        #define.IA('IA')
        #define.KS('KS')
        #define.LA('LA')
        #define.ME('ME')
        #define.MD('MD')
        #define.MA('MA')
        #define.MN('MN')
        #define.MS('MS')
        #define.MO('MO')
        #define.MT('MT')
        #define.NE('NE')
        #define.NJ('NJ')
        #define.NM('NM')
        #define.NC('NC')
        #define.ND('ND')
        #define.OH('OH')
        #define.SC('SC')
        #define.VA('VA')
        #define.WI('WI')

        switch (this.StateId)
        {
            case #AL, #AZ, #AR, #CA, #CO, #CT, #DE, #DC, #GA, #HI, #ID, #IN,
                #IA, #KS, #LA, #ME, #MD, #MA, #MN, #MS, #MO, #MT, #NE, #NJ, #NM, #NC, #ND, #OH, #SC, #VA, #WI:
                break;

            default:
                if (this.FileStateElectronically == NoYes::Yes)
                {
                    ret = checkFailed("@SYS85178");
                }
                this.FileStateElectronically = NoYes::No;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIRSData</Name>
				<Source><![CDATA[
    public boolean validateIRSData(boolean _writeToFile = false)
    {
        return Tax1099ElectronicCheck::validateTINIRS(this.StateTaxID, tablepname(VendStateTaxID), fieldpname(VendStateTaxID, StateTaxID), _writeToFile, this.VendAccount, this.TaxIDType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();
        CompanyInfo companyInfo = CompanyInfo::findDataArea(curext());

        if (ret)
        {
            if (companyInfo.Validate1099OnEntry)
            {
                ret = this.validateIRSData(false);
            }
        }

        if (ret && this.FileStateElectronically == NoYes::Yes)
        {
            ret = this.validateIfStateCanBeSent();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(VendAccount vendAccount, AddressStateId stateId)
    {
        boolean ret = true;

        if (!VendStateTaxID::exist(vendAccount, stateId))
        {
            ret = checkFailed(strfmt(VendStateTaxID::txtNotExist(), vendAccount, stateId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(VendAccount vendAccount, AddressStateId stateId)
    {
        return (select firstonly RecId
                    from vendStateTaxID
                        where vendStateTaxID.VendAccount == vendAccount
                            && vendStateTaxID.StateId == stateId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>VendStateTaxID</c> table for the specified ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID with which to find the record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A concurrency model. This parameter is used when the table is not automatically concurrent;
    /// optional.
    /// </param>
    /// <returns>
    /// A buffer that contains a <c>VendStateTaxID</c> record.
    /// </returns>
    public static VendStateTaxID find(recId _recId, boolean _forupdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendStateTaxID vendStateTaxID;

        vendStateTaxID.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendStateTaxID.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendStateTaxID
            where vendStateTaxID.RecId == _recId;

        return vendStateTaxID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVendState</Name>
				<Source><![CDATA[
    public static VendStateTaxID findByVendState(
        VendAccount vendAccount,
        AddressStateId stateId ,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendStateTaxID vendStateTaxID;

        vendStateTaxID.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendStateTaxID.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendStateTaxID
            where vendStateTaxID.VendAccount == vendAccount && vendStateTaxID.StateId == stateId;

        return vendStateTaxID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static str txtNotExist()
    {
        return "@SYS84746";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProspectiveVendorRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>VendStateTaxID</c> table record from a <c>VendProspectiveVendorRegistration</c> table record.
    /// </summary>
    /// <param name = "_vendorRegistration">
    /// The <c>VendProspectiveVendorRegistration</c> table record from which to Initialize the <c>VendStateTaxID</c> record.
    /// </param>
    public void initFromProspectiveVendorRegistration(VendProspectiveVendorRegistration _vendorRegistration)
    {
        this.initValue();
        this.StateId      = _vendorRegistration.TaxState;
        this.StateTaxID   = _vendorRegistration.TaxStateIdentifier;
        this.TaxIDType    = _vendorRegistration.TaxStateIdentifierType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>US</CountryRegionCodes>
	<DeveloperDocumentation>@SYS123592</DeveloperDocumentation>
	<FormRef>VendStateTaxIDAction</FormRef>
	<Label>@SYS84731</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>StateId</TitleField1>
	<TitleField2>StateTaxID</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Single</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>VendStateIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateTaxID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxIDType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileStateElectronically</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SpecialReport</Name>
			<Label>@SYS10223</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateTaxID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxIDType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileStateElectronically</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendProfileStateTaxDetails</Name>
			<Label>@SYS315079</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StateTaxID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxIDType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FileStateElectronically</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099FileStateElectronically</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StateTaxID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099StateTaxID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxIDType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxIDType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendStateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>AddressState</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123582</EntityRelationshipRole>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressStateId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendorStateTaxID</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StateId</Name>
					<Field>StateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Tax1099Summary</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123593</EntityRelationshipRole>
			<RelatedTable>Tax1099Summary</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Tax1099SummaryVendAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendorStateTaxIDVendAccount</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<Field>VendAccount</Field>
					<RelatedField>VendAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Vendor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendorAccountNumber</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendorStateTaxIDVendAccount</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>