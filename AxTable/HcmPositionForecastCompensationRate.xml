<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastCompensationRate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HcmPositionForecastCompensationRate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        try
        {
            ttsbegin;
            HcmPositionForecastCompGroupRefPoint::removeCompensationGroupCompensationGrid(this.CompensationGroup);
            super();
            ttscommit;
        }

        catch (Exception::Error)
        {
            Global::exceptionTextFallThrough();
            error('Deletion is not completed');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.EffectiveDate  = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        this.ExpirationDate = dateMax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompGroupVersions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>Effective</c> and the <c>Expiration</c> date of the
    /// <c>HcmPositionForecastCompensationRate</c> table.
    /// </summary>
    /// <returns>
    /// true if the <c>HcmPositionForecastCompensationRate</c> value passes the dates validation; otherwise, false.
    /// </returns>

    public boolean validateCompGroupVersions()
    {
        boolean isValid = true;
        HcmPositionForecastCompensationRate   positionForecastCompensationRate;

        if (isValid && this.EffectiveDate > this.ExpirationDate)
        {
            isValid = checkFailed("@SYS4005409");
        }

        if (isValid && HcmPositionForecastCompensationRate::existOverLappingCompGroupVersion(this.EffectiveDate, this.ExpirationDate, this.CompensationGroup, this.RecId))
        {
            isValid = checkFailed(strFmt("@SYP4940000" , positionForecastCompensationRate.CompensationGroup));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean allowDelete = super();

        if (allowDelete && HcmPositionForecastScenario::existPosForecastScenarioByCompRate(this.RecId)
            || HcmPositionForecastBudgetAcctLine::existByCompensationRate(this.RecId))
        {
            allowDelete = checkFailed("@SYP4940011");
        }

        return allowDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;

        isValid = super();

        isValid = isValid && this.validateCompGroupVersions();

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>HcmPositionForecastCompensationRate</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_positionForecastCompensationRateRecId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>

    public static boolean checkExist(HcmPositionForecastCompensationRateRecId _positionForecastCompensationRateRecId)
    {
        boolean isExist = true;

        if (!HcmPositionForecastCompensationRate::exist(_positionForecastCompensationRateRecId))
        {
            isExist = checkFailed(strFmt(HcmPositionForecastCompensationRate::txtNotExist(), tableStr(HcmPositionForecastCompensationRate)));
        }

        return isExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record ID exists in the <c>HcmPositionForecastCompensationRate</c> table.
    /// </summary>
    /// <param name="_positionForecastCompRateRecId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>

    public static boolean exist(HcmPositionForecastCompensationRateRecId _positionForecastCompRateRecId)
    {
        return _positionForecastCompRateRecId && (select firstonly RecId from hcmPositionForecastCompensationRate
                    where hcmPositionForecastCompensationRate.RecId == _positionForecastCompRateRecId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOverLappingCompGroupVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an overlapping version record ID exists in the <c>HcmPositionForecastCompensationRate</c> table.
    /// </summary>
    /// <param name="_effectiveDate">
    /// The effective date of the record ID to check.
    /// </param>
    /// <param name="_expirationDate">
    /// The expiration date of the record ID to check.
    /// </param>
    /// <param name="_compGroupRecId">
    /// The record ID of the Compensation group to check for overlap.
    /// </param>
    /// <param name="_recIdToExclude">
    /// The record ID to exclude for overlap check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false .
    /// </returns>

    public static boolean existOverLappingCompGroupVersion( ValidFromDate _effectiveDate,
                                                     ValidToDate _expirationDate,
                                                     HcmPositionForecastCompGroupRecId _compGroupRecId,
                                                     HcmPositionForecastCompensationRateRecId _recIdToExclude = 0)
    {
        HcmPositionForecastCompensationRate   positionForecastCompensationRate;

        if (_effectiveDate && _expirationDate)
        {
            select firstonly RecId from positionForecastCompensationRate
                where positionForecastCompensationRate.RecId != _recIdToExclude
                && ((positionForecastCompensationRate.EffectiveDate >= _effectiveDate
                    && positionForecastCompensationRate.EffectiveDate < _expirationDate)
                || (positionForecastCompensationRate.EffectiveDate <= _effectiveDate
                    && positionForecastCompensationRate.ExpirationDate >= _effectiveDate))
                    && positionForecastCompensationRate.CompensationGroup == _compGroupRecId;
        }

        return positionForecastCompensationRate.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionForecastCompensationRate</c> table that is based on a record ID value.
    /// </summary>
    /// <param name="_positionForecastCompRateRecId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmPositionForecastCompensationRate</c> table.
    /// </returns>

    public static HcmPositionForecastCompensationRate find(
        HcmPositionForecastCompensationRateRecId _positionForecastCompRateRecId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecastCompensationRate hcmPositionForecastCompensationRate;

        hcmPositionForecastCompensationRate.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionForecastCompensationRate.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmPositionForecastCompensationRate
            where hcmPositionForecastCompensationRate.RecId == _positionForecastCompRateRecId;

        return hcmPositionForecastCompensationRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByGroupAndDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionForecastCompensationRate</c> table that is based on the specific group and date range.
    /// </summary>
    /// <param name="_compensationGroupRecId">
    /// The record ID of the Compensation group to find.
    /// </param>
    /// <param name="_startDate">
    /// The start date of the specified date range to find.
    /// </param>
    /// <param name="_endDate">
    /// The end ate of the specified date range to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmPositionForecastCompensationRate</c> table.
    /// </returns>
    public static HcmPositionForecastCompensationRate findByGroupAndDateRange(HcmPositionForecastCompGroupRecId _compensationGroupRecId,
                                                                                    ValidFromDate _startDate,
                                                                                    ValidToDate _endDate,
                                                                                    boolean             _forUpdate = false,
                                                                                    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecastCompensationRate hcmPositionForecastCompensationRate;

        hcmPositionForecastCompensationRate.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionForecastCompensationRate.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmPositionForecastCompensationRate
            order by EffectiveDate asc
            where hcmPositionForecastCompensationRate.CompensationGroup == _compensationGroupRecId
                && hcmPositionForecastCompensationRate.EffectiveDate <= _endDate
                && hcmPositionForecastCompensationRate.ExpirationDate >= _startDate;

        return hcmPositionForecastCompensationRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByGroupReferencePoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionForecastCompensationRate</c> table that is based on the specific group reference.
    /// </summary>
    /// <param name="_compensationGroupRefPointId">
    /// The record id of the <c>HcmPositionForecastCompGroupRefPoint</c> table.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean parameter that indicates whether to read the record for update or not. This is an optional parameter.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table. This is an optional parameter.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmPositionForecastCompensationRate</c> table.
    /// </returns>
    public static HcmPositionForecastCompensationRate findByGroupReferencePoint(HcmPositionForecastCompGroupRefPtRecId _compensationGroupRefPointId,
                                                                                     boolean _forUpdate = false,
                                                                                     ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecastCompensationRate     hcmPositionForecastCompensationRate;
        HcmPositionForecastCompGroupRefPoint    compensationGroupRef;

        hcmPositionForecastCompensationRate.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionForecastCompensationRate.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmPositionForecastCompensationRate
            order by  hcmPositionForecastCompensationRate.EffectiveDate
            exists join compensationGroupRef
            where compensationGroupRef.RecId == _compensationGroupRefPointId
                && hcmPositionForecastCompensationRate.RecId == compensationGroupRef.CompensationRate;

        return hcmPositionForecastCompensationRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompensationRateStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the greatest expiration date from the <c>HcmPositionForecastCompensationRate</c> table based on the
    /// compensation group.
    /// </summary>
    /// <param name="_hcmPositionForecastCompGroupRecId">
    /// The <c>HcmPositionForecastCompensationGroup</c> table record Id associated with the <c>HcmPositionForecastCompensationRate</c> table compensation group field.
    /// </param>
    /// <returns>
    /// The next available end date based on the expiration date of the latest rate table. If a <c>HcmPositionForecastCompensationRate</c> record is not found
    /// for the <c>HCMPositionForecastCompGroupRecId</c> value or the end date is the max value, the current date is returned.
    /// </returns>
    public static ValidFromDate getCompensationRateStartDate(HcmPositionForecastCompGroupRecId _hcmPositionForecastCompGroupRecId)
    {
        HcmPositionForecastCompensationRate hcmPositionForecastCompensationRate;
        ValidFromDate nextAvailableEndDate;

        select firstonly ExpirationDate, RecId from hcmPositionForecastCompensationRate
            order by hcmPositionForecastCompensationRate.ExpirationDate desc
            where hcmPositionForecastCompensationRate.CompensationGroup == _hcmPositionForecastCompGroupRecId;

        if (hcmPositionForecastCompensationRate.RecId == 0
            || hcmPositionForecastCompensationRate.ExpirationDate == dateMax())
        {
            nextAvailableEndDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            nextAvailableEndDate = hcmPositionForecastCompensationRate.ExpirationDate + 1;
        }

        return nextAvailableEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasGapWithinDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is a date gap for rate version within the specific date range.
    /// </summary>
    /// <param name="_compensationGroupRecId">
    /// The record ID of the <c>HcmPositionForecastCompensationGroup</c> table.
    /// </param>
    /// <param name="_startDate">
    /// The start date of the criteria date range.
    /// </param>
    /// <param name="_endDate">
    /// The end date of the criteria date range.
    /// </param>
    /// <returns>
    /// true if there is a date gap for rate version within specific date range; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Uses the cross company data access pattern in order to prevent the data from being restricted to just the current company context.
    /// </remarks>
    public static boolean hasGapWithinDateRange(HcmPositionForecastCompGroupRecId _compensationGroupRecId,
                                                    ValidFromDate _startDate,
                                                    ValidToDate _endDate)
    {
        HcmPositionForecastCompensationRate positionForecastCompensationRate;
        TransDate                           expirationDate;
        boolean                             hasGap = true;

        expirationDate = dateNull();

        // Check the passing date range fully covered by compensation rate table
        while select crossCompany EffectiveDate, ExpirationDate from positionForecastCompensationRate
            order by EffectiveDate
            where positionForecastCompensationRate.CompensationGroup == _compensationGroupRecId
                && positionForecastCompensationRate.EffectiveDate <= _endDate
                && positionForecastCompensationRate.ExpirationDate >= _startDate
        {
            //
            // Find any compensation rate gaps.
            // The loop will be exited when any compensation rate date gaps are found.
            //
            if (expirationDate == dateNull())
            {
                if (positionForecastCompensationRate.EffectiveDate <= _startDate)
                {
                    expirationDate = positionForecastCompensationRate.ExpirationDate;
                }
                else
                {
                    // Finds a date gap when the first compensation rate has an effective date after the _startdate.
                    break;
                }
            }
            else if (expirationDate == positionForecastCompensationRate.EffectiveDate - 1)
            {
                expirationDate = positionForecastCompensationRate.ExpirationDate;
            }
            else
            {
                //
                // Find a date gap when any consecutive compensation rate effective date is more than
                // one day after previous compensation rate's expiration date
                //
                break;
            }
        }

        if (expirationDate != dateNull() && expirationDate >= _endDate)
        {
            hasGap = false;
        }

        return hasGap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@SYS4005884</DeveloperDocumentation>
	<Label>@SYP4940020</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>Description</TitleField1>
	<TitleField2>CompensationGroup</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>HcmPositionForecastCompensationGridIdx</ClusteredIndex>
	<Modules>Budget</Modules>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompensationGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompensationGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpirationDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CompensationGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionForecastCompGroupRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EffectiveDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ExpirationDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HcmPositionForecastCompensationGridIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EffectiveDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ExpirationDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CompensationGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmPositionForecastCompensationGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>HcmPositionForecastCompensationGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompensationGroup</Name>
					<Field>CompensationGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>