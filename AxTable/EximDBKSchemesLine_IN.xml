<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximDBKSchemesLine_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EximDBKSchemesLine_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayBalanceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays balance amount.
    /// </summary>
    /// <returns>
    /// The balance amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display AmountMST displayBalanceAmount()
    {
        return (this.AllowedDrawback - this.RealizedAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBillOfLadingNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays bill of lading number.
    /// </summary>
    /// <returns>
    /// The bill of lading number.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display WMSBillOfLadingId displayBillOfLadingNumber()
    {
        return EximDBKSchemesLine_IN::custInvoiceJour(this.ShippingBillTransRecId).BillOfLadingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCalculatedExportValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays export value for customs shipping bill transation.
    /// </summary>
    /// <returns>
    /// The export value for customs shipping bill transation.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display AmountMST displayCalculatedExportValue()
    {
        return EximDBKSchemesLine_IN::calculatedExportValue(this.ShippingBillTransRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCalculatedShippingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays shipping quantity for customs shipping bill transation.
    /// </summary>
    /// <returns>
    /// The shipping quantity for customs shipping bill transation.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display CustomsQty_IN displayCalculatedShippingQty()
    {
        return EximDBKSchemesLine_IN::calculatedShippingQty(this.ShippingBillTransRecId, this.Unit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays customer account for customs shipping bill transation.
    /// </summary>
    /// <returns>
    /// The customer account for customs shipping bill transation.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display CustAccount displayCustAccount()
    {
        return EximDBKSchemesLine_IN::custInvoiceJour(this.ShippingBillTransRecId).OrderAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDrawbackAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays draw back amount for customs shipping bill transation.
    /// </summary>
    /// <returns>
    /// The draw back amount for customs shipping bill transation.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display AmountMST displayDrawbackAmount()
    {
        return EximDBKSchemesLine_IN::drawbackAmount(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayExportValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays assessable value for customs shipping bill transation.
    /// </summary>
    /// <returns>
    /// The assessable value for customs shipping bill transation.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display AmountCur displayExportValue()
    {
        return EximShippingBillTrans_IN::findByShippingBillTransRecId(this.ShippingBillTransRecId).AssessableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays unit id for customs shipping bill transation.
    /// </summary>
    /// <returns>
    /// The unit id for customs shipping bill transation.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display UnitOfMeasureSymbol displayUnitId()
    {
        return EximDBKSchemesLine_IN::unitId(this.ShippingBillTransRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record based on a field modification.
    /// </summary>
    /// <param name="_fieldId">
    /// ID of the field being modified.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(EximDBKSchemesLine_IN, AmountToSettle) :
                if (this.AmountToSettle > (this.AllowedDrawback - this.RealizedAmount))
                {
                    this.AmountToSettle = this.AllowedDrawback - this.RealizedAmount;
                }
                else if (this.AmountToSettle == 0)
                {
                    this.AmountToSettle = this.orig().AmountToSettle;
                }
                break;

            case fieldnum(EximDBKSchemesLine_IN, Status) :
                this.MarkSelect = (this.Status == EximDBKTransStatus_IN::Applied) ? NoYes::Yes : NoYes::No;
                if (this.Status == EximDBKTransStatus_IN::Closed)
                {
                    this.Status = this.orig().Status;
                }
                break;

            default :
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAmountToSettle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the AmountToSettle from EximDBKSchemesLine_IN table for given EximAuthorizationSchemesTable_IN table RecId.
    /// </summary>
    /// <param name="_schemesTableRecId">EximAuthorizationSchemesTable_IN RecId</param>
    /// <returns>AmountToSettle from EximDBKSchemesLine_IN table</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AmountMST calculateAmountToSettle(RefRecId _schemesTableRecId)
    {
        EximDBKSchemesLine_IN dbkSchemesLine;

        select sum(AmountToSettle) from dbkSchemesLine
            where dbkSchemesLine.SchemesTableRecId == _schemesTableRecId
               && dbkSchemesLine.MarkSelect        == NoYes::Yes;

        return dbkSchemesLine.AmountToSettle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatedExportValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates ExportValue for specified ShippingBill order.
    /// </summary>
    /// <param name="_shippingBillTransRecId">CustomsShippingBillTrans_IN RecId</param>
    /// <returns>ExportValue for Customs Shipping Bill Trans</returns>
    private static AmountMST calculatedExportValue(RefRecId _shippingBillTransRecId)
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        EximShippingBillTrans_IN    eximShippingBillTrans;
        CustInvoiceTrans            custInvoiceTrans;

        select firstonly ShippingBillDate from customsShippingBillTrans
            where customsShippingBillTrans.RecId == _shippingBillTransRecId
        join AssessableValue from eximShippingBillTrans
            where eximShippingBillTrans.ShippingBillTransRecId == customsShippingBillTrans.RecId
        join CurrencyCode from custInvoiceTrans
            where custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
               && custInvoiceTrans.InvoiceId     == customsShippingBillTrans.InvoiceId
               && custInvoiceTrans.InvoiceDate   == customsShippingBillTrans.InvoiceDate;

        return CurrencyHelper_IN::customsMSTAmount_IN(eximShippingBillTrans.AssessableValue,
                                             custInvoiceTrans.CurrencyCode,
                                             Direction_IN::Export,
                                             customsShippingBillTrans.ShippingBillDate,
                                             false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatedShippingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculated the Customs ShippingBill Quantity for specified Shipping Bill
    /// </summary>
    /// <param name="_shippingBillTransRecId">CustomsShippingBillTrans_IN table RecId</param>
    /// <param name="_unitId">UnitOfMeasureSymbol</param>
    /// <returns>CustomsQty_IN for given CustomsShippingBillTrans_IN</returns>
    private static CustomsQty_IN calculatedShippingQty(
        RefRecId            _shippingBillTransRecId,
        UnitOfMeasureSymbol _unitId)
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        CustInvoiceTrans            custInvoiceTrans;

        select firstonly ShippingBillQty, ItemId, InventDimId
            from customsShippingBillTrans
            where customsShippingBillTrans.RecId == _shippingBillTransRecId
        join SalesUnit from custInvoiceTrans
            where custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
               && custInvoiceTrans.InvoiceId     == customsShippingBillTrans.InvoiceId
               && custInvoiceTrans.InvoiceDate   == customsShippingBillTrans.InvoiceDate;

        return !custInvoiceTrans.SalesUnit
             ? customsShippingBillTrans.ShippingBillQty
             : EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                                customsShippingBillTrans.ItemId,
                                                customsShippingBillTrans.InventDimId,
                                                customsShippingBillTrans.ShippingBillQty,
                                                custInvoiceTrans.SalesUnit,
                                                _unitId,
                                                NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the container with AllowedDrawback and Realized Amounts for specified EximDBKSchemesTable_IN table RecId
    /// </summary>
    /// <param name="_schemesTableRecId">EximDBKSchemesTable_IN table RecId</param>
    /// <returns>Container with AllowedDrawback and Realized Amounts</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container calculateTotalAmounts(RefRecId _schemesTableRecId)
    {
        EximDBKSchemesLine_IN dbkSchemesLine;

        select sum(AllowedDrawback), sum(RealizedAmount)
            from dbkSchemesLine
            where dbkSchemesLine.SchemesTableRecId == _schemesTableRecId;

        return [dbkSchemesLine.AllowedDrawback, dbkSchemesLine.RealizedAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the CustInvoiceJour for specified CustomsShippingBillTrans_IN Record.
    /// </summary>
    /// <param name="_shippingBillTransRecId">CustomsShippingBillTrans_IN RecId</param>
    /// <returns>CustInvoiceJour for specified CustomsShippingBillTrans_IN</returns>
    private static CustInvoiceJour custInvoiceJour(RefRecId _shippingBillTransRecId)
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        CustInvoiceTrans            custInvoiceTrans;
        CustInvoiceJour             custInvoiceJour;

        select firstonly InventTransId from customsShippingBillTrans
            where customsShippingBillTrans.RecId == _shippingBillTransRecId
        join RecId from custInvoiceTrans
            where custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
               && custInvoiceTrans.InvoiceId     == customsShippingBillTrans.InvoiceId
               && custInvoiceTrans.InvoiceDate   == customsShippingBillTrans.InvoiceDate
        join BillOfLadingId, OrderAccount
            from custInvoiceJour
            where custInvoiceJour.InvoiceId           == custInvoiceTrans.InvoiceId
               && custInvoiceJour.InvoiceDate         == custInvoiceTrans.InvoiceDate
               && custInvoiceJour.NumberSequenceGroup == custInvoiceTrans.NumberSequenceGroup
               && custInvoiceJour.SalesId             == custInvoiceTrans.SalesId;

        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>drawbackAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculated the drwbackAmount for specified EximDBKSchemesLine_IN record.
    /// </summary>
    /// <param name="_dbkSchemesLine">EximDBKSchemesLine_IN table buffer</param>
    /// <returns>AmountMST, drwbackAmount</returns>
    private static AmountMST drawbackAmount(EximDBKSchemesLine_IN _dbkSchemesLine)
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        EximShippingBillTrans_IN    eximShippingBillTrans;
        CustInvoiceTrans            custInvoiceTrans;
        EximDBKValues_IN            dbkValues;
        EximProductGroupTable_IN    productGroupTable;
        EximDBKRates_IN             dbkRates;
        AmountMST                   drawbackAmt;
        AmountMST                   assessableValue;
        Qty                         shippingQty;

        select firstonly ShippingBillDate, ItemId, InventDimId, ShippingBillQty
            from customsShippingBillTrans
            where customsShippingBillTrans.RecId == _dbkSchemesLine.ShippingBillTransRecId
            join EximProductGroupTable, CustomsTariffCodeTable, dbkCenvatStatus, dbkRateType, dbkPercent, AssessableValue
                from eximShippingBillTrans
                where eximShippingBillTrans.ShippingBillTransRecId == customsShippingBillTrans.RecId
        join CurrencyCode, SalesUnit
                from custInvoiceTrans
                where custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
                   && custInvoiceTrans.InvoiceId     == customsShippingBillTrans.InvoiceId
                   && custInvoiceTrans.InvoiceDate   == customsShippingBillTrans.InvoiceDate
        join ProductGroup from productGroupTable
                where productGroupTable.RecId        == eximShippingBillTrans.EximProductGroupTable
        join RecId from dbkRates
                where dbkRates.ProductGroupTableRecId == productGroupTable.RecId;

        dbkValues = EximDBKValues_IN::findByTariffCodeId(eximShippingBillTrans.CustomsTariffCodeTable,
                                           eximShippingBillTrans.dbkCenvatStatus,
                                           eximShippingBillTrans.dbkRateType,
                                           DateTimeUtil::newDateTime(customsShippingBillTrans.ShippingBillDate, 0, DateTimeUtil::getUserPreferredTimeZone()),
                                           dbkRates.RecId);

        if (_dbkSchemesLine.DrawbackRate
            && eximShippingBillTrans.dbkPercent
            && dbkValues)
        {
            assessableValue = CurrencyHelper_IN::customsMSTAmount_IN(eximShippingBillTrans.AssessableValue,
                                                            custInvoiceTrans.CurrencyCode,
                                                            Direction_IN::Export,
                                                            customsShippingBillTrans.ShippingBillDate,
                                                            false);
            shippingQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                customsShippingBillTrans.ItemId,
                customsShippingBillTrans.InventDimId,
                customsShippingBillTrans.ShippingBillQty,
                custInvoiceTrans.SalesUnit,
                _dbkSchemesLine.Unit,
                NoYes::Yes);

            drawbackAmt = ((assessableValue * _dbkSchemesLine.DrawbackRate/100 * eximShippingBillTrans.dbkPercent/100 < shippingQty * _dbkSchemesLine.ValueCap)
                         ? assessableValue * _dbkSchemesLine.DrawbackRate/100 * eximShippingBillTrans.dbkPercent/100
                         : shippingQty * _dbkSchemesLine.ValueCap);

            drawbackAmt = EximDBKValues_IN::roundedOffDrawbackAmount(drawbackAmt,
                                                                     dbkValues.RoundOff,
                                                                     dbkValues.RoundingForm);
        }

        return drawbackAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if EximDBKSchemesLine_IN record exists for specified EximDbkSchemesTable_IN recId and CustomsShippingBillTrans_IN RecId.
    /// </summary>
    /// <param name="_schemesTableRecId">EximDbkSchemesTable_IN table RecId</param>
    /// <param name="_shippingBillTransRecId">CustomsShippingBillTrans_IN RecId</param>
    /// <returns>true, if EximDBKSchemesLine_IN record is found otherwise, false</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(
        RefRecId _schemesTableRecId,
        RefRecId _shippingBillTransRecId)
    {
        return _schemesTableRecId
            && _shippingBillTransRecId
            && (select firstonly RecId from eximDBKSchemesLine_IN
                    where eximDBKSchemesLine_IN.SchemesTableRecId      == _schemesTableRecId
                       && eximDBKSchemesLine_IN.ShippingBillTransRecId == _shippingBillTransRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximDBKSchemesLine_IN table for the specified id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing EximDBKSchemesLine_IN table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximDBKSchemesLine_IN find(
        RefRecId            _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        EximDBKSchemesLine_IN    eximDBKSchemesLine;

        eximDBKSchemesLine.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            eximDBKSchemesLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly eximDBKSchemesLine
            where eximDBKSchemesLine.RecId == _recId;

        return eximDBKSchemesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySchemesTableShippingBillTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximDBKSchemesLine_IN table for the specified EximDBKSchemesTable_IN recId and CustomsShippingBillTrans_IN recId.
    /// </summary>
    /// <param name="_schemesTableRecId">EximDBKSchemesTable_IN RecId</param>
    /// <param name="_shippingBillTransRecId">CustomsShippingBillTrans_IN RecId</param>
    /// <param name="_forUpdate">SelectForUpdate</param>
    /// <returns>EximDBKSchemesLine_IN table buffer</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximDBKSchemesLine_IN findBySchemesTableShippingBillTransRecId(
        RefRecId _schemesTableRecId,
        RefRecId _shippingBillTransRecId,
        boolean  _forUpdate = false)
    {
        EximDBKSchemesLine_IN dbkSchemesLine;

        if (_schemesTableRecId && _shippingBillTransRecId)
        {
            dbkSchemesLine.selectForUpdate(_forUpdate);

            select firstonly dbkSchemesLine
                where dbkSchemesLine.SchemesTableRecId      == _schemesTableRecId
                   && dbkSchemesLine.ShippingBillTransRecId == _shippingBillTransRecId;
        }

        return dbkSchemesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openAccountFinancialDimensionForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the financial dimensions form for the AccountType of the <c> EximDBKSchemesLine_IN </c> table.
    /// </summary>
    /// <param name="_eximDBKSchemesLine">
    /// takes _eximDBKSchemesLine parameter to open the financial dimensions form for the account type.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void openAccountFinancialDimensionForm(EximDBKSchemesLine_IN _eximDBKSchemesLine)
    {
        FormRun formRun;
        MenuFunction menuFunction;
        Args args;

        // Launch the Dimension form modally, this form will change the default dimension field on the record
        menuFunction = new MenuFunction(menuitemdisplaystr(LedgerJournalTransDimension), MenuItemType::Display);
        args = new Args();
        args.record(_eximDBKSchemesLine);
        formRun = menuFunction.create(args);
        formRun.run();
        formRun.wait(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openOffsetAccountFinancialDimensionForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the financial dimensions form for the OffsetAccountType of the <c> EximDBKSchemesLine_IN </c> table.
    /// </summary>
    /// <param name="_eximDBKSchemesLine">
    /// takes _eximDBKSchemesLine parameter to open the financial dimensions form for the offsetaccount type.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void openOffsetAccountFinancialDimensionForm(EximDBKSchemesLine_IN _eximDBKSchemesLine)
    {
        FormRun formRun;
        MenuFunction menuFunction;
        Args args;

        // Launch the Dimension form modally
        menuFunction = new MenuFunction(menuitemdisplaystr(LedgerJournalTransOffsetDimension), MenuItemType::Display);
        args = new Args();
        args.record(_eximDBKSchemesLine);
        formRun = menuFunction.create(args);
        formRun.run();
        formRun.wait(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SalesUnit for specified CustomsShippingBillTrans_IN record.
    /// </summary>
    /// <param name="_shippingBillTransRecId">CustomsShippingBillTrans_IN RecId</param>
    /// <returns>UnitOfMeasureSymbol</returns>
    private static UnitOfMeasureSymbol unitId(RefRecId _shippingBillTransRecId)
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        CustInvoiceTrans            custInvoiceTrans;

        select firstonly InventTransId from customsShippingBillTrans
            where customsShippingBillTrans.RecId == _shippingBillTransRecId
        join SalesUnit from custInvoiceTrans
            where custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
               && custInvoiceTrans.InvoiceId     == customsShippingBillTrans.InvoiceId
               && custInvoiceTrans.InvoiceDate   == customsShippingBillTrans.InvoiceDate;

        return custInvoiceTrans.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAmountToSettle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates AmountToSettle field of EximDBKSchemesLine_IN table record for specified EximDBKSchemesTable_IN record.
    /// </summary>
    /// <param name="_schemesTableRecId">EximDBKSchemesTable_IN recId</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateAmountToSettle(RefRecId _schemesTableRecId)
    {
        EximDBKSchemesLine_IN dbkSchemesLine;

        ttsbegin;

        update_recordset dbkSchemesLine
            setting AmountToSettle = (dbkSchemesLine.AllowedDrawback - dbkSchemesLine.RealizedAmount)
        where dbkSchemesLine.SchemesTableRecId == _schemesTableRecId;

        update_recordset dbkSchemesLine
            setting MarkSelect = NoYes::Yes
        where dbkSchemesLine.SchemesTableRecId == _schemesTableRecId
           && dbkSchemesLine.Status != EximDBKTransStatus_IN::Rejected;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates MarkSelect field of EximDBKSchemesLine_IN table record for specified EximDBKSchemesTable_IN record and status is Applied.
    /// </summary>
    /// <param name="_schemesTableRecId">EximDBKSchemesTable_IN recId</param>
    /// <param name="_markSelect">NoYes</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateMarkSelect(
        RefRecId _schemesTableRecId,
        NoYes    _markSelect)
    {
        EximDBKSchemesLine_IN dbkSchemesLine;

        ttsbegin;

        update_recordset dbkSchemesLine
            setting MarkSelect = _markSelect
        where dbkSchemesLine.SchemesTableRecId == _schemesTableRecId
           && dbkSchemesLine.Status            == EximDBKTransStatus_IN::Applied;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates RealizedAmount, AmountToSettle and Status fields of EximDBKSchemesLine_IN table record for specified EximDBKSchemesTable_IN record and status is Applied.
    /// </summary>
    /// <param name="_schemesTableRecId">EximDBKSchemesTable_IN RecId</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateTransStatus(RefRecId _schemesTableRecId)
    {
        EximDBKSchemesLine_IN  dbkSchemesLine;

        ttsbegin;

        update_recordset dbkSchemesLine
            setting RealizedAmount = dbkSchemesLine.RealizedAmount + dbkSchemesLine.AmountToSettle,
                    AmountToSettle = dbkSchemesLine.AllowedDrawback - (dbkSchemesLine.RealizedAmount + dbkSchemesLine.AmountToSettle)
        where dbkSchemesLine.SchemesTableRecId == _schemesTableRecId
           && dbkSchemesLine.Status            == EximDBKTransStatus_IN::Applied
           && dbkSchemesLine.MarkSelect        == NoYes::Yes;

        update_recordset dbkSchemesLine
            setting Status = EximDBKTransStatus_IN::Closed
        where dbkSchemesLine.SchemesTableRecId == _schemesTableRecId
           && dbkSchemesLine.RealizedAmount == dbkSchemesLine.AllowedDrawback;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS62430</DeveloperDocumentation>
	<Label>@GLS61934</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>MarkSelect</TitleField1>
	<TitleField2>Status</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ExportImportIndia</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>SchemesTableShippingBillTransRecIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountToSettle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowedDrawback</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkSelect</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchemesTableRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingBillTransRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS80374</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DutyDrawback</Name>
			<Label>@GLS61946</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchemesTableRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingBillTransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkSelect</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DrawbackRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValueCap</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowedDrawback</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountToSettle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealizedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AllowedDrawback</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@GLS61940</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountToSettle</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS114018</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<Visible>No</Visible>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DrawbackRate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@GLS61937</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MarkSelect</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS7444</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetDefaultDimension</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<Visible>No</Visible>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RealizedAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@GLS61943</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SchemesTableRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>EximDBKSchemesTableRecId_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ShippingBillTransRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EximDBKTransStatus_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Unit</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ValueCap</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@GLS61816</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SchemesTableShippingBillTransRecIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SchemesTableRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ShippingBillTransRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustomsShippingBillTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ShippingBillTransRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueSetIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomsShippingBillTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomsShippingBillTrans_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustomsShippingBillTrans_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustomsShippingBillTrans_IN_EximDBKSchemesLine_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShippingBillTransRecId</Name>
					<Field>ShippingBillTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_EximDBKSchemesLine_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EximDBKSchemesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximDBKSchemesTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EximDBKSchemesTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximDBKSchemesTable_IN_EximDBKSchemesLine_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SchemesTableRecId</Name>
					<Field>SchemesTableRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OffsetDefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet_Offset</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_EximDBKSchemesLine_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetDefaultDimension</Name>
					<Field>OffsetDefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Unit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UnitOfMeasure_EximDBKSchemesLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Unit</Name>
					<Field>Unit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>