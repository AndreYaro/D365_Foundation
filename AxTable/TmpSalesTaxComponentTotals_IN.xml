<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpSalesTaxComponentTotals_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpSalesTaxComponentTotals_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBaseCurrency</Name>
				<Source><![CDATA[
    display CurrencyCode getBaseCurrency()
    {
        return  Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSecondaryCurrency</Name>
				<Source><![CDATA[
    display CurrencyCode getSecondaryCurrency()
    {
        return  Ledger::reportingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTaxComponentTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c>TmpSalesTaxComponentTotals_IN</c> table that is based on the specified
    /// criteria.
    /// </summary>
    /// <param name="_tmpSalesTaxInquiryTable">
    /// The <c>TmpSalesTaxInquiryTable_IN</c> table.
    /// </param>
    /// <param name="_common">
    /// A record that is used to find the record.
    /// </param>
    /// <returns>
    /// A <c>TmpSalesTaxComponentTotals_IN</c> record.
    /// </returns>
    public TmpSalesTaxComponentTotals_IN salesTaxComponentTotals(TmpSalesTaxInquiryTable_IN  _tmpSalesTaxInquiryTable,
                                                                 Common                      _common)
    {
        TmpSalesTaxInquiryTable_IN          tmpSalesTaxInquiryTableLoc;
        TmpSalesTaxComponentTotals_IN       tmpSalesTaxComponentTotals;
        SalesTaxTotal_IN                    salesTaxTotal;
        CurrencyExchangeHelper              currencyHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                                                     _tmpSalesTaxInquiryTable.TransDate);

        switch (_common.TableId)
        {
            case tableNum(SalesTaxTotal_IN):
                salesTaxTotal = _common;

                while select sum(TaxAmount), TaxComponentTable from _tmpSalesTaxInquiryTable
                    group by TaxComponentTable
                {
                    tmpSalesTaxComponentTotals.TaxComponentTable          = _tmpSalesTaxInquiryTable.TaxComponentTable;
                    tmpSalesTaxComponentTotals.AmountMST                  = TmpSalesTaxComponentTotals_IN::getAmountMST(_tmpSalesTaxInquiryTable.TaxComponentTable,
                                                                                                                        salesTaxTotal);
                    tmpSalesTaxComponentTotals.AccumulatedAmountMST       = _tmpSalesTaxInquiryTable.TaxAmount;
                    tmpSalesTaxComponentTotals.AmountSecondary            = currencyHelper.calculateTransactionCurrencyToReportingCurrency(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                           tmpSalesTaxComponentTotals.AmountMST);

                    tmpSalesTaxComponentTotals.AccumulatedAmountSecondary = currencyHelper.calculateTransactionCurrencyToReportingCurrency(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                           tmpSalesTaxComponentTotals.AccumulatedAmountMST);

                    tmpSalesTaxComponentTotals.insert();
                }
                break;

            case tableNum(TmpSalesTaxInquiryTable_IN):
                tmpSalesTaxInquiryTableLoc = _common;

                while select sum(TaxAmount), TaxComponentTable from _tmpSalesTaxInquiryTable
                    group by TaxComponentTable
                {
                    tmpSalesTaxComponentTotals.TaxComponentTable          = _tmpSalesTaxInquiryTable.TaxComponentTable;
                    tmpSalesTaxComponentTotals.AmountMST                  = TmpSalesTaxComponentTotals_IN::getAmountMST(_tmpSalesTaxInquiryTable.TaxComponentTable,
                                                                                                                        null,
                                                                                                                        tmpSalesTaxInquiryTableLoc);
                    tmpSalesTaxComponentTotals.AccumulatedAmountMST       = _tmpSalesTaxInquiryTable.TaxAmount;
                    tmpSalesTaxComponentTotals.AmountSecondary            = currencyHelper.calculateTransactionCurrencyToReportingCurrency(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                           tmpSalesTaxComponentTotals.AmountMST);

                    tmpSalesTaxComponentTotals.AccumulatedAmountSecondary = currencyHelper.calculateTransactionCurrencyToReportingCurrency(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                           tmpSalesTaxComponentTotals.AccumulatedAmountMST);

                    tmpSalesTaxComponentTotals.insert();
                }
                break;

            default:
                break;
        }

        return tmpSalesTaxComponentTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the value of the tax amount that is based on a specified condition.
    /// </summary>
    /// <param name="_taxComponent">
    /// The record ID of a <c>TaxComponentTable_IN</c> record.
    /// </param>
    /// <param name="_salesTaxTotal">
    /// The <c>SalesTaxTotal_IN</c> table.
    /// </param>
    /// <param name="_tmpSalesTaxInquiryTable">
    /// The <c>TmpSalesTaxInquiryTable_IN</c> table.
    /// </param>
    /// <returns>
    /// The tax amount that is based on the specified condition.
    /// </returns>
    public static AmountMST getAmountMST(TaxComponentRecId_IN          _taxComponent,
                                         SalesTaxTotal_IN              _salesTaxTotal = null,
                                         TmpSalesTaxInquiryTable_IN    _tmpSalesTaxInquiryTable = null)
    {
        AmountMST amount;

        if (_salesTaxTotal)
        {
            if (_taxComponent == _salesTaxTotal.TaxComponentTable)
            {
                amount = _salesTaxTotal.TaxAmount;
            }
            else
            {
                amount = 0;
            }
        }
        else
        {
            if (_taxComponent == _tmpSalesTaxInquiryTable.TaxComponentTable)
            {
                amount = _tmpSalesTaxInquiryTable.TaxAmount;
            }
            else
            {
                amount = 0;
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpSalesTaxCompTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c>TmpSalesTaxComponentTotals_IN</c> table.
    /// </summary>
    /// <param name="_salesTaxRecId">
    /// The record ID of the sales tax component record.
    /// </param>
    /// <param name="_salesInquiryRecId">
    /// The record ID of the <c>TmpSalesTaxInquiryTable_IN</c> record.
    /// </param>
    static void insertTmpSalesTaxCompTotals(recId   _salesTaxRecId,
                                            recId   _salesInquiryRecId)
    {
        TmpSalesTaxInquiryTable_IN          tmpSalesTaxInquiryTable;
        TmpSalesTaxInquiryTable_IN          tmpSalesTaxInquiryTableLoc;
        TmpSalesTaxComponentTotals_IN       tmpSalesTaxComponentTotals;
        SalesTaxTotal_IN                    salesTaxTotal;
        CurrencyExchangeHelper              currencyHelper = CurrencyExchangeHelper::newLedger(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId));

        if (_salesTaxRecId)
        {
            while select sum(TaxAmount), TaxComponentTable from tmpSalesTaxInquiryTable
                group by TaxComponentTable
            {
                tmpSalesTaxComponentTotals.TaxComponentTable          = tmpSalesTaxInquiryTable.TaxComponentTable;
                tmpSalesTaxComponentTotals.AmountMST                  = TmpSalesTaxComponentTotals_IN::getAmountMST(tmpSalesTaxInquiryTable.TaxComponentTable,
                                                                                                                    salesTaxTotal);
                tmpSalesTaxComponentTotals.AccumulatedAmountMST       = tmpSalesTaxInquiryTable.TaxAmount;
                tmpSalesTaxComponentTotals.AmountSecondary            = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                tmpSalesTaxComponentTotals.AmountMST,
                                                                                                                                true);
                tmpSalesTaxComponentTotals.AccumulatedAmountSecondary = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                tmpSalesTaxComponentTotals.AccumulatedAmountMST,
                                                                                                                                true);
                tmpSalesTaxComponentTotals.insert();
            }
        }

        if (_salesInquiryRecId)
        {
            while select sum(TaxAmount), TaxComponentTable from tmpSalesTaxInquiryTable
                group by TaxComponentTable
            {
                tmpSalesTaxComponentTotals.TaxComponentTable          = tmpSalesTaxInquiryTable.TaxComponentTable;
                tmpSalesTaxComponentTotals.AmountMST                  = TmpSalesTaxComponentTotals_IN::getAmountMST(tmpSalesTaxInquiryTable.TaxComponentTable,
                                                                                                                    null,
                                                                                                                    tmpSalesTaxInquiryTableLoc);
                tmpSalesTaxComponentTotals.AccumulatedAmountMST       = tmpSalesTaxInquiryTable.TaxAmount;
                currencyHelper                                        = CurrencyExchangeHelper::newLedger(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId));
                tmpSalesTaxComponentTotals.AmountSecondary            = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                tmpSalesTaxComponentTotals.AmountMST,
                                                                                                                                true);
                tmpSalesTaxComponentTotals.AccumulatedAmountSecondary = currencyHelper.calculateAccountingToReportingAdjustment(Ledger::accountingCurrency(CompanyInfo::current()),
                                                                                                                                tmpSalesTaxComponentTotals.AccumulatedAmountMST,
                                                                                                                                true);
                tmpSalesTaxComponentTotals.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<Label>@GLS6563</Label>
	<TitleField1>TaxComponentTable</TitleField1>
	<TitleField2>AmountMST</TitleField2>
	<ClusteredIndex>RecId</ClusteredIndex>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxComponentTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccumulatedAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccumulatedAmountMST</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS25443</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccumulatedAmountSecondary</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@GLS6075</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountSecondary</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS83899</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxComponentTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxComponentRecId_IN</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxComponentTable_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxComponentTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxComponentTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxComponentTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxComponentTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxComponentTable_IN_TmpSalesTaxComponentTotals_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxComponentTable</Name>
					<Field>TaxComponentTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>