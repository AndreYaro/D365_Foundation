<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqReaderWriterLockSettings</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Cross-company singleton table containing settings for <c>ReqReaderWriterLock</c>.
/// </summary>
internal class ReqReaderWriterLockSettings extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the singleton ReqReaderWriterLockSettings record.
    /// </summary>
    /// <returns>Returns <c>ReqReaderWriterLockSettings</c></returns>
    internal static ReqReaderWriterLockSettings find()
    {
        ReqReaderWriterLockSettings settings;

        select firstOnly settings
            where settings.Key == 0;
 
        if (!settings.RecId)
        {
            return ReqReaderWriterLockSettings::ensureCreated();
        }

        return settings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        const int DefaultTransientErrorsMaxRetryCount = 15;

        super();

        this.TransientErrorsMaxRetryCount = DefaultTransientErrorsMaxRetryCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // never delete from this table
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();
        flush ReqReaderWriterLockSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureCreated</Name>
				<Source><![CDATA[
    private static ReqReaderWriterLockSettings ensureCreated()
    {
        var infologLine = infologLine();
        try
        {
            ReqReaderWriterLockSettings::create();
        }
        catch (Exception::DuplicateKeyException)
        {
            // DuplicateKeyException can occour if there was a race condition
            
            infolog.clear(infologLine);
        }

        ReqReaderWriterLockSettings settings;
        settings.disableCache(true);
        select firstOnly settings
            where settings.Key == 0;

        if (!settings.RecId)
        {
            // this should never occour since records from this table should never be deleted
            Debug::assert(settings.RecId);
        }

        return settings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    private static void create()
    {
        UserConnection userConnection;
        try
        {
            userConnection = new UserConnection();
            ReqReaderWriterLockSettings settings;
            settings.setConnection(userConnection);
            settings.initValue();

            userConnection.ttsbegin();
            settings.insert();
            userConnection.ttscommit();
        }
        finally
        {
            if (userConnection)
            {
                userConnection.finalize();
            }
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SCMPlanning:ReqReaderWriterLockSettingsDeveloperDocumentation</DeveloperDocumentation>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<Visibility>Internal</Visibility>
	<Visible>No</Visible>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>KeyIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex>KeyIdx</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Key</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TransientErrorsMaxRetryCount</Name>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>KeyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Key</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>