<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxValueThresholdProfile_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxValueThresholdProfile_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes record from table <c>TaxValueThresholdProfile_IN</c> and other table's records referring to it
    /// </summary>
    public void delete()
    {
        ThresholdReferenceType_IN::deleteByReference(this.TableId, this.RecId);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records set of table <c>ConcessionCertificate_IN</c> by Source Reference RecId
    /// </summary>
    public void deleteCertificate()
    {
        ConcessionCertificateDetails_IN concessionCertificateDetailsLoc;

        ttsBegin;
        delete_from concessionCertificateDetailsLoc
            where concessionCertificateDetailsLoc.SourceReferenceRecId == this.RecId;
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays account name of account in the <C>TaxValueThresholdProfile</C>.
    /// </summary>
    /// <returns>
    ///     Return account name;
    /// </returns>
    Display public Name displayAccountName()
    {
        if (this.AccountType == AccountType_IN::Cust)
        {
            return DirPartyTable::findRec(CustTable::find(this.CustVendGroupOrTable).Party).Name;
        }
        else if (this.AccountType == AccountType_IN::Vend)
        {
            return DirPartyTable::findRec(VendTable::find(this.CustVendGroupOrTable).Party).Name;
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get account type in the <C>TaxValueThresholdProfile</C>.
    /// </summary>
    /// <returns>
    ///     Return account type.
    /// </returns>
    Display public AccountType_IN displayAccountType()
    {
        return this.AccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxWithholdCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays withhold tax name.
    /// </summary>
    /// <returns>
    ///     Return withhold tax name.
    /// </returns>
    Display public TaxWithholdCode displayTaxWithholdCode()
    {
        TaxWithholdTable    taxWithholdTableLoc;

        select firstOnly TaxWithholdCode,RecId,TableId from taxWithholdTableLoc
            where taxWithholdTableLoc.RecId     == this.SourceCodeRecId
                && taxWithholdTableLoc.TableId  == this.SourceCodeTableId;

        return taxWithholdTableLoc.TaxWithholdCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxWithholdSectionCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays withhold section code.
    /// </summary>
    /// <returns>
    ///     Return section code.
    /// </returns>
    Display public TaxWithholdSectionCode_IN displayTaxWithholdSectionCode()
    {
        TaxWithholdTable    taxWithholdTableLoc;

        select TaxWithholdName,RecId,TableId,TaxWithholdComponent_IN from taxWithholdTableLoc
            where this.SourceCodeRecId      == taxWithholdTableLoc.RecId
                && this.SourceCodeTableId   == taxWithholdTableLoc.TableId;

        return TaxWithholdComponentGroupTable_IN::find(
            TaxWithholdComponentTable_IN::find(taxWithholdTableLoc.TaxWithholdComponent_IN).TaxWithholdComponentGroup).SectionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPAN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets PAN for form concession certificate details
    /// </summary>
    /// <returns>
    /// PAN
    /// </returns>
    Display public AccountNum getPAN()
    {
        TaxInformationVendTable_IN  taxInformationVendTable_IN;
        TaxInformationCustTable_IN  taxInformationCustTable_IN;
        PANNumber_IN                panNum;

        if (this.AccountType == AccountType_IN::Vend)
        {
            select firstOnly PANNumber from taxInformationVendTable_IN
                where taxInformationVendTable_IN.VendTable == this.CustVendGroupOrTable;
            panNum = taxInformationVendTable_IN.PANNumber;
        }
        else if (this.AccountType == AccountType_IN::Cust)
        {
            select firstOnly PANNumber from taxInformationCustTable_IN
                where taxInformationCustTable_IN.CustTable == this.CustVendGroupOrTable;
            panNum = taxInformationCustTable_IN.PANNumber;
        }

        return panNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getThresholdReferenceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets name of <c>taxWithholdCode</c>
    /// </summary>
    /// <returns>
    /// name of <c>taxWithholdCode</c>
    /// </returns>
    display public ThresholdReferenceName_IN getThresholdReferenceName()
    {
        TaxWithholdTable                taxWithholdTable;
        ThresholdReferenceName_IN       refName;

        switch (this.SourceCodeTableId)
        {
            case tableNum(TaxWithholdTable):
                select firstOnly TaxWithholdCode from taxWithholdTable where taxWithholdTable.RecId == this.SourceCodeRecId;
                refName = taxWithholdTable.TaxWithholdCode;
                break;

            default:
                break;
        }

        return refName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getThresholdReferencePath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets path to application that consuming threshold definition framework
    /// </summary>
    /// <returns>
    /// <c>ThresholdReferencePath_IN</c>
    /// </returns>
    public ThresholdReferencePath_IN getThresholdReferencePath()
    {
        ThresholdReferencePath_IN path;

        switch (this.SourceCodeTableId)
        {
            case tableNum(TaxWithholdTable):
                path = strFmt("@SYS4003459", "@SYS333959", "@SYS333869", "@SYS334007", "@SYS81672");
                break;
            default:
                break;
        }

        return path;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets default values
    /// </summary>
    public void initValue()
    {
        super();
        this.AccountTableGroupAll   = TableGroupAll::All;
        this.AccountType            = AccountType_IN::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts record to table <c>TaxValueThresholdProfile_IN</c> and record the impact of this insertion
    /// </summary>
    public void insert()
    {
        super();
        if (this.Threshold)
        {
            ThresholdReferenceType_IN::createThresholdReference(this.TableId, this.RecId, this.Threshold);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// It will be Called when specified field value changed
    /// </summary>
    /// <param name="_fieldName">
    /// field name
    /// </param>
    /// <param name="_arrayIndex">
    /// array index
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);
        switch (_fieldName)
        {
            case fieldStr (TaxValueThresholdProfile_IN, AccountType):
                this.AccountTableGroupAll   = TableGroupAll::All;
                this.CustVendGroupOrTable   = '';
                this.deleteCertificate();
                break;
            case fieldStr (TaxValueThresholdProfile_IN, AccountTableGroupAll):
                this.CustVendGroupOrTable = '';
                this.deleteCertificate();
                break;
            case fieldStr (TaxValueThresholdProfile_IN, CustVendGroupOrTable):
            case fieldStr (TaxValueThresholdProfile_IN, Threshold):
                this.deleteCertificate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates records and impact of them
    /// </summary>
    public void update()
    {
        if (this.Threshold != this.orig().Threshold)
        {
            ThresholdReferenceType_IN::deleteByReference(this.TableId, this.RecId);
            if (this.Threshold)
            {
                ThresholdReferenceType_IN::createThresholdReference(this.TableId, this.RecId, this.Threshold);
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConfirmModifyField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether there is concession certificate associate with ccurrent profile.
    /// </summary>
    /// <returns>
    ///     Return false when there is concession certificate and user click NO on the messagebox, otherwise, false.
    /// </returns>
    private boolean validateConfirmModifyField()
    {
        boolean                         ret;
        DialogButton                    diagBut;
        ConcessionCertificateDetails_IN concessionCertificateDetailsLoc;

        ret = true;

        select firstonly recid,SourceReferenceRecId from concessionCertificateDetailsLoc
            where this.RecId == concessionCertificateDetailsLoc.SourceReferenceRecId;

        if (concessionCertificateDetailsLoc.RecId)
        {
            diagBut = Box::yesNo("@SYS4003636",
                                DialogButton::No);

            ret = (diagBut == DialogButton::No)?false:true;
        }
        else
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean         ret;
        DialogButton    diagBut;
        ConcessionCertificateDetails_IN concessionCertificateDetailsLoc;

        ret = super();

        if (ret)
        {
            select firstonly recid,SourceReferenceRecId from concessionCertificateDetailsLoc
                where this.RecId == concessionCertificateDetailsLoc.SourceReferenceRecId;

            if (concessionCertificateDetailsLoc.RecId)
            {
                diagBut = Box::yesNo("@SYS4003636",
                                    DialogButton::No);

                ret = (diagBut == DialogButton::No)?false:true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(TaxValueThresholdProfile_IN, AccountType):
                case fieldNum(TaxValueThresholdProfile_IN, AccountTableGroupAll):
                case fieldNum(TaxValueThresholdProfile_IN, CustVendGroupOrTable):
                case fieldNum(TaxValueThresholdProfile_IN, Threshold):
                    ret = this.validateConfirmModifyField();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records set of table <c>TaxValueThresholdProfile_IN</c> by Source Reference TableId and Source Reference RecId
    /// </summary>
    /// <param name="_taxValueThresholdProfileSourceTableId">
    /// <c>_taxValueThresholdProfileSourceTableId</c>
    /// </param>
    /// <param name="_taxValueThresholdProfileSourceRecId">
    /// <c>_taxValueThresholdProfileSourceRecId</c>
    /// </param>
    public static void deleteByReference(RefTableId _taxValueThresholdProfileSourceTableId, RefRecId _taxValueThresholdProfileSourceRecId)
    {
        TaxValueThresholdProfile_IN     taxValueThresholdProfile_IN;

        while select forUpdate taxValueThresholdProfile_IN
            where taxValueThresholdProfile_IN.SourceCodeTableId ==  _taxValueThresholdProfileSourceTableId
                && taxValueThresholdProfile_IN.SourceCodeRecId  == _taxValueThresholdProfileSourceRecId
        {
            ttsBegin;
            taxValueThresholdProfile_IN.delete();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsBySource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether table <c>TaxValueThresholdProfile_IN</c> contains records associated with specified TableId and RecId
    /// </summary>
    /// <param name="_sourceCodeTableId">
    /// <c>_sourceCodeTableId</c>
    /// </param>
    /// <param name="_sourceCodeRecId">
    /// <c>_sourceCodeRecId</c>
    /// </param>
    /// <returns>
    /// Exists or not
    /// </returns>
    public static boolean existsBySource(RefTableId _sourceCodeTableId, RefRecId _sourceCodeRecId)
    {
        TaxValueThresholdProfile_IN     taxValueThresholdProfile;

        select firstOnly RecId
            from taxValueThresholdProfile
            where taxValueThresholdProfile.SourceCodeTableId    == _sourceCodeTableId
                && taxValueThresholdProfile.SourceCodeRecId     == _sourceCodeRecId;

        return taxValueThresholdProfile.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds by record Id
    /// </summary>
    /// <param name="_recId">
    /// record Id
    /// </param>
    /// <param name="_selectForUpdate">
    /// Whether the selected record allows to be updated or not
    /// </param>
    /// <returns>
    /// Set of records
    /// </returns>
    public static TaxValueThresholdProfile_IN findByRecId(RefRecId _recId, boolean _selectForUpdate = false)
    {
        TaxValueThresholdProfile_IN     taxValueThresholdProfile;

        if (_recId)
        {
            if (_selectForUpdate)
            {
                taxValueThresholdProfile.selectForUpdate(true);
            }

            select firstOnly taxValueThresholdProfile
                where taxValueThresholdProfile.RecId == _recId;
        }

        return taxValueThresholdProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdTable</c> table for the specified record id.
    /// </summary>
    /// <param name="_thresholdProfileId">
    /// The source reference table id.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdTable</c> table.
    /// </returns>
    public static TaxWithholdTable findTaxType(RefRecId _thresholdProfileId)
    {
        TaxValueThresholdProfile_IN taxWithholdProfile;
        TaxWithholdTable            taxWithholdTableLoc;

        if(_thresholdProfileId)
        {
            select firstOnly taxWithholdTableLoc
             exists join taxWithholdProfile
             where taxWithholdProfile.RecId    == _thresholdProfileId
             && taxWithholdTableLoc.RecId         == taxWithholdProfile.SourceCodeRecId
             && taxWithholdTableLoc.TableId       == taxWithholdProfile.SourceCodeTableId;
        }
        return taxWithholdTableLoc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicWithholdingTax</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4003425</DeveloperDocumentation>
	<Label>@SYS4003421</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>AccountType</TitleField1>
	<TitleField2>CustVendGroupOrTable</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Tax</Modules>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TaxValueData_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>
      </Relation>
			<Table>TaxValueData_IN</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Threshold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendGroupOrTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountTableGroupAll</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Threshold</Name>
			<Label>@SYS4003290</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Threshold</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ThresholdUser</Name>
			<Label>@SYS4003436</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountTableGroupAll</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendGroupOrTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountTableGroupAll</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountTableGroupAll_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:AccountCodeHelpText</HelpText>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxWithholdParameters:AccountTypeHelpText</HelpText>
			<EnumType>AccountType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustVendGroupOrTable</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustVendGroupOrTable_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:AccountOrGroupHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceCodeRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceCodeTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Threshold</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ThresholdRecId_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:ThresholdHelpText</HelpText>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CodeAccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceCodeTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceCodeRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountTableGroupAll</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustVendGroupOrTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroup</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>TaxthresholdProfile</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountTableGroupAll</Name>
					<Field>AccountTableGroupAll</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>AccountType_IN::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendGroupOrTable</Name>
					<Field>CustVendGroupOrTable</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendGroupOrTable</Name>
					<Field>CustVendGroupOrTable</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountTableGroupAll</Name>
					<Field>AccountTableGroupAll</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>AccountType_IN::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxWithholdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceCodeRecId</Name>
					<Field>SourceCodeRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceCodeTableId</Name>
					<Field>SourceCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Threshold</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Threshold_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Threshold</Name>
					<Field>Threshold</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxValueThresholdProfile_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendGroupOrTable</Name>
					<Field>CustVendGroupOrTable</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountTableGroupAll</Name>
					<Field>AccountTableGroupAll</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>AccountType_IN::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendGroupOrTable</Name>
					<Field>CustVendGroupOrTable</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountTableGroupAll</Name>
					<Field>AccountTableGroupAll</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>AccountType_IN::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>