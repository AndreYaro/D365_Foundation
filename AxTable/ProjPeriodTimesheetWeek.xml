<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPeriodTimesheetWeek</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjPeriodTimesheetWeek extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
        ProjPeriodId   _periodId,
        ProjPeriodFrom _periodFrom)
    {
        return  _periodId   &&
                _periodFrom &&
                (select projPeriodTimesheetWeek
                     where projPeriodTimesheetWeek.PeriodId   == _periodId
                        && projPeriodTimesheetWeek.PeriodFrom == _periodFrom
                 ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjPeriodTimesheetWeek find(
        ProjPeriodId   _periodId,
        ProjPeriodFrom _periodFrom,
        boolean        _forUpdate = false)
    {
        ProjPeriodTimesheetWeek projPeriodTimesheetWeek = null;

        projPeriodTimesheetWeek.selectForUpdate(_forUpdate);

        if (_periodId && _periodFrom)
        {
            select firstonly projPeriodTimesheetWeek
                where projPeriodTimesheetWeek.PeriodId   == _periodId
                   && projPeriodTimesheetWeek.PeriodFrom == _periodFrom;
        }

        return projPeriodTimesheetWeek;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromPeriod</Name>
				<Source><![CDATA[
    public static ProjPeriodTimesheetWeek findFromPeriod(
        ProjPeriodId    _periodId,
        TransDate       _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        boolean         _forUpdate = false)
    {
        ProjPeriodTimesheetWeek projPeriodTimesheetWeek = null;

        projPeriodTimesheetWeek.selectForUpdate(_forUpdate);

        if (_periodId && _transDate)
        {
            select firstonly reverse projPeriodTimesheetWeek
                where projPeriodTimesheetWeek.PeriodId     == _periodId
                   && projPeriodTimesheetWeek.PeriodFrom   <= _transDate;
        }

        return projPeriodTimesheetWeek;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextFromPeriodTo</Name>
				<Source><![CDATA[
    public static ProjPeriodTimesheetWeek findNextFromPeriodTo(
        ProjPeriodId _periodId,
        ProjPeriodTo _periodTo,
        boolean      _forUpdate = false)
    {
        ProjPeriodTimesheetWeek projPeriodTimesheetWeek = null;

        projPeriodTimesheetWeek.selectForUpdate(_forUpdate);

        if (_periodId && _periodTo)
        {
            select firstonly projPeriodTimesheetWeek
                where projPeriodTimesheetWeek.PeriodId == _periodId
                   && projPeriodTimesheetWeek.PeriodTo >  _periodTo;
        }
        return projPeriodTimesheetWeek;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePeriods</Name>
				<Source><![CDATA[
    public static void generatePeriods(
        ProjPeriodId _periodId,
        date         _fromDate,
        date         _toDate)
    {
        #OCCRetryCount
        ProjPeriodLine  projPeriodLine;

        try
        {
            ProjPeriodTimesheetWeek projPeriodTimesheetWeek;
            ProjPeriodTable         projPeriodTable = ProjPeriodTable::find(_periodId);

            ttsbegin;

            while select PeriodFrom, PeriodId, PeriodTo, PeriodName from projPeriodLine
                where  projPeriodLine.PeriodId   == _periodId   &&
                       projPeriodLine.PeriodFrom >= _fromDate   &&
                       projPeriodLine.PeriodFrom <= _toDate
            {
                TransDate weekBegin = TSPeriods::getStartOfWeekOffset(projPeriodTable.WeekStart, projPeriodLine.PeriodFrom);
                int       idx       = 0;

                projPeriodTimesheetWeek.clear();
                while (weekBegin <= projPeriodLine.PeriodTo)
                {
                    idx++;
                    if (weekBegin < projPeriodLine.PeriodFrom)
                    {
                        projPeriodTimesheetWeek = ProjPeriodTimesheetWeek::find(_periodId, projPeriodLine.PeriodFrom, true);
                    }
                    else
                    {
                        projPeriodTimesheetWeek = ProjPeriodTimesheetWeek::find(_periodId, weekBegin, true);
                    }

                    if (!projPeriodTimesheetWeek && projPeriodLine.PeriodTo >= weekBegin)
                    {
                        projPeriodTimesheetWeek.clear();

                        projPeriodTimesheetWeek.PeriodId    = _periodId;
                        if (weekBegin < projPeriodLine.PeriodFrom)
                        {
                            projPeriodTimesheetWeek.PeriodFrom  = projPeriodLine.PeriodFrom;
                        }
                        else
                        {
                            projPeriodTimesheetWeek.PeriodFrom  = weekBegin;
                        }
                        projPeriodTimesheetWeek.PeriodTo    = weekBegin + 6;
                        if (projPeriodTimesheetWeek.PeriodTo > projPeriodLine.PeriodTo)
                        {
                            projPeriodTimesheetWeek.PeriodTo = projPeriodLine.PeriodTo;
                        }
                        projPeriodTimesheetWeek.PeriodName = strFmt("@SYS183896", projPeriodLine.PeriodName, int2str(idx));
                        projPeriodTimesheetWeek.insert();
                    }
                    else if (projPeriodTimesheetWeek && projPeriodTimesheetWeek.PeriodTo > projPeriodLine.PeriodTo)
                    {
                        projPeriodTimesheetWeek.PeriodTo = projPeriodLine.PeriodTo;
                        projPeriodTimesheetWeek.PeriodName = strFmt("@SYS183896", projPeriodLine.PeriodName, int2str(idx));
                        projPeriodTimesheetWeek.update();
                    }

                    weekBegin += 7;
                }
            }

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            else
            {
                projPeriodLine.reread();
                retry;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS322124</DeveloperDocumentation>
	<FormRef>ProjPeriodTimesheet</FormRef>
	<Label>@SYS190483</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>PeriodId</TitleField1>
	<TitleField2>PeriodName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>PeriodIdFromToIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>PeriodIdFromToIdx</PrimaryIndex>
	<ReplacementKey>PeriodIdFromToIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransactionPeriod</Name>
			<Label>@SYS190493</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodFrom</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TSPeriodFrom</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PeriodId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodId</ExtendedDataType>
			<Label>@SYS23329</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PeriodName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodTo</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TSPeriodTo</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PeriodIdFromToIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PeriodId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PeriodIdToIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PeriodId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjPeriodTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjPeriodTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjPeriodTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProjPeriodTimesheetWeek</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PeriodId</Name>
					<SourceEDT>ProjPeriodId</SourceEDT>
					<Field>PeriodId</Field>
					<RelatedField>PeriodId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PeriodIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>