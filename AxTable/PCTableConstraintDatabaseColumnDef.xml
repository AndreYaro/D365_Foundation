<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCTableConstraintDatabaseColumnDef</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCTableConstraintDatabaseColumnDef extends PCTableConstraintColumnDefinition
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        _visitor.visitStart(this);
        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the field name of a system table constraint column.
    /// </summary>
    /// <param name="_set">
    /// true if field name is set; otherwise, false.
    /// </param>
    /// <param name="_fieldName">
    /// A field name.
    /// </param>
    /// <returns>
    /// A field name.
    /// </returns>
    edit fieldName editFieldName(boolean _set, fieldName _fieldName)
    {
        PCDatabaseRelationConstraintDefinition  tcDefinition = PCDatabaseRelationConstraintDefinition::find(this.TableConstraintDefinition);

        if (_set)
        {
            // Set the redundant ReferencedTableId which is needed for table export feature.
            this.ReferencedTableId = tcDefinition.ReferencedTableId;
            this.ReferencedFieldId = fieldname2id(tcDefinition.ReferencedTableId, _fieldName);
        }

        return  fieldId2name(tcDefinition.ReferencedTableId, this.ReferencedFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean                                 ret;
        PCDatabaseRelationConstraintDefinition  tableConstraintDefinition;
        DictTable                               dictTable;
        DictField                               dictField;

        ret = super();

        tableConstraintDefinition = PCDatabaseRelationConstraintDefinition::find(this.TableConstraintDefinition);

        dictTable = DictTable::construct(tableId2name(tableConstraintDefinition.ReferencedTableId));
        dictField = dictTable.fieldObject(this.ReferencedFieldId);

        // validate type match
        switch (dictField.baseType())
        {
            case Types::Enum:
                    // A boolean or Yes/No field
                    if (dictField.enumId() == enumNum(NoYes)
                        || dictField.enumId() == enumNum(boolean))
                    {
                        if (this.getDataType() != AttributeDataType::TrueFalse
                            && this.getDataType() != AttributeDataType::Text)
                        {
                            ret = checkFailed("@GLS180417");
                        }
                    }
                    else if (this.getDataType() != AttributeDataType::Text)
                    {
                        ret = checkFailed("@SYS308835");
                    }
                break;
            case Types::String:
                    if (this.getDataType() != AttributeDataType::Text)
                    {
                        ret = checkFailed("@SYS308835");
                    }
                break;
            case Types::Integer:
                    if (this.getDataType() != AttributeDataType::Integer)
                    {
                        ret = checkFailed(strFmt("@SYS308836", AttributeDataType::Integer));
                    }
                break;
            default:
                ret = checkFailed(strFmt("@SYS308837", Types::Enum, Types::String, Types::Integer));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PCTableConstraintColumnDBColumnDef</c> table
    ///    exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCTableConstraintDatabaseColumnDef::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCTableConstraintColumnDBColumnDef</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCTableConstraintColumnDBColumnDef</c> table; otherwise, an empty buffer.
    /// </returns>
    public static PCTableConstraintDatabaseColumnDef find(RefRecId _recId, boolean _forupdate = false)
    {
        PCTableConstraintDatabaseColumnDef record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS323994</DeveloperDocumentation>
	<Label>@SYS191150</Label>
	<TableGroup>Main</TableGroup>
	<TitleField2>TableId</TitleField2>
	<Extends>PCTableConstraintColumnDefinition</Extends>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReferencedFieldIdRelation</Name>
			<Label>@SYS339542</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReferencedTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReferencedFieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TableConstraintColumnGroup</Name>
			<Label>@SYS5771</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editFieldName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ReferencedFieldId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefFieldId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ReferencedTableId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TableConstraintColumnDefinition_Database</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PCTableConstraintColumnDefinition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TableConstraintColumn</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Role>SystemDefinedTableConstraintColumn</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>