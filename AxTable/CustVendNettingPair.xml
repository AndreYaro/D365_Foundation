<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNettingPair</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendNettingPair extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    internal static CustVendNettingPair find(RecId _recId, boolean _forUpdate = false)
    {
        CustVendNettingPair nettingPair;
        nettingPair.selectForUpdate(_forUpdate);

        select firstonly nettingPair
            where nettingPair.RecId == _recId;

        return nettingPair;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(CustVendNettingPair, CreditCompany):
                this.CreditAccountNum = '';
                break;
            case fieldNum(CustVendNettingPair, DebitCompany):
                this.DebitAccountNum = '';
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(CustVendNettingPair, CreditAccountNum):
                    if (CustVendNettingPair::validateDuplicateCustAccount(this.CreditCompany, this.CreditAccountNum, this.CustVendNettingAgreement))
                    {
                        ret = checkFailed(strFmt("@CashManagement:DuplicateNettingRelation", this.CreditAccountNum));
                    }
                    if (CustVendNettingPair::validateCustEnableWithholdingTax(this.CreditAccountNum, this.CreditCompany))
                    {
                        ret = checkFailed(strFmt("@CashManagement:WrongCustOrVendAccount", this.CreditAccountNum));
                    }
                    break;

                case fieldNum(CustVendNettingPair, DebitAccountNum):
                    if (CustVendNettingPair::validateDuplicateVendAccount(this.DebitCompany, this.DebitAccountNum, this.CustVendNettingAgreement))
                    {
                        ret = checkFailed(strFmt("@CashManagement:DuplicateNettingRelation", this.DebitAccountNum));
                    }
                    if (CustVendNettingPair::validateVendEnableWithholdingTax(this.DebitAccountNum, this.DebitCompany))
                    {
                        ret = checkFailed(strFmt("@CashManagement:WrongCustOrVendAccount", this.DebitAccountNum));
                    }
                    break;

                case fieldNum(CustVendNettingPair, StartDate):
                case fieldNum(CustVendNettingPair, ExpireDate):
                    if (this.ExpireDate != dateNull() && this.StartDate > this.ExpireDate)
                    {
                        ret = checkFailed("@CashManagement:WrongStartDateOrExpireDate");
                    }
                    break;

                case fieldNum(CustVendNettingPair, CreditCompany):
                    if (this.CreditCompany != curext() && !isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
                    {
                        ret = checkFailed("@SYS125880");
                    }
                    ret = ret && xDataArea::checkAccessible(this.CreditCompany);
                    ret = ret && this.checkInterCompany(this.CreditCompany, this.DebitCompany);
                    break;

                case fieldNum(CustVendNettingPair, DebitCompany):
                    if (this.DebitCompany != curext() && !isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
                    {
                        ret = checkFailed("@SYS125880");
                    }
                    ret = ret && xDataArea::checkAccessible(this.DebitCompany);
                    ret = ret && this.checkInterCompany(this.DebitCompany, this.CreditCompany);
                    break;

                default:
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDuplicateCustAccount</Name>
				<Source><![CDATA[
    internal static boolean validateDuplicateCustAccount(CompanyId _custCompany, CustAccount _custAccount, RefRecId _custVendNettingAgreement)
    {
        CustVendNettingPair custVendNettingPair;

        select firstonly RecId from custVendNettingPair
            where custVendNettingPair.CreditAccountNum == _custAccount
                && custVendNettingPair.CreditCompany == _custCompany
                && custVendNettingPair.CreditAccountType == LedgerJournalACType::Cust
                && custVendNettingPair.CustVendNettingAgreement == _custVendNettingAgreement;

        return custVendNettingPair.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDuplicateVendAccount</Name>
				<Source><![CDATA[
    internal static boolean validateDuplicateVendAccount(CompanyId _vendCompany, VendAccount _vendAccount, RefRecId _custVendNettingAgreement)
    {
        CustVendNettingPair custVendNettingPair;

        select firstonly RecId from custVendNettingPair
            where custVendNettingPair.DebitAccountNum == _vendAccount
                && custVendNettingPair.DebitCompany == _vendCompany
                && custVendNettingPair.DebitAccountType == LedgerJournalACType::Vend
                && custVendNettingPair.CustVendNettingAgreement == _custVendNettingAgreement;

        return custVendNettingPair.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustEnableWithholdingTax</Name>
				<Source><![CDATA[
    private static boolean validateCustEnableWithholdingTax(CustAccount _custAccount, CompanyId _custCompany)
    {
        CustTable custTable;
        changecompany(_custCompany)
        {
            select firstonly RecId from custTable
                where custTable.AccountNum == _custAccount
                    && ((custTable.TaxWithholdCalculate_TH == NoYes::Yes
                            && custTable.TaxWithholdGroup_TH != '')
                        || custTable.TaxWithholdCalculate_IN == NoYes::Yes);
        }

        return custTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendEnableWithholdingTax</Name>
				<Source><![CDATA[
    private static boolean validateVendEnableWithholdingTax(VendAccount _vendAccount, CompanyId _vendCompany)
    {
        VendTable vendTable;

        changecompany(_vendCompany)
        {
            select firstonly RecId from vendTable
                where vendTable.AccountNum == _vendAccount
                    && vendTable.TaxWithholdCalculate == NoYes::Yes
                    && vendTable.TaxWithholdGroup != '';
        }

        return vendTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInterCompany</Name>
				<Source><![CDATA[
    private boolean checkInterCompany(CompanyId _company, CompanyId _offsetCompany)
    {
        boolean ret = true;
        if (_company && _company != curExt())
        {
            if (!BankParameters::find().AllowNettingIntercompany)
            {
                ret = checkFailed("@CashManagement:NettingHasIntercompanyPerAgreementValidation");
            }
            LedgerInterCompany ledgerInterCompany = LedgerInterCompany::findCompanyPair(curExt(), _company);
            if (!ledgerInterCompany.OriginatingDebitLedgerDimension
                || !ledgerInterCompany.OriginatingCreditLedgerDimension
                || !ledgerInterCompany.DestinationCreditLedgerDimension
                || !ledgerInterCompany.DestinationDebitLedgerDimension)
            {
                ret = checkFailed(strFmt("@CashManagement:NettingIntercompanyconfigValidation", _company));
            }

            if (ret && _offsetCompany != curExt())
            {
                ret = checkFailed(strFmt("@CashManagement:NettingBothIntercompanyValidation", curExt()));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCustName</Name>
				<Source><![CDATA[
    display DirPartyName showCustName()
    {
        DirPartyName custName;
        changecompany(this.CreditCompany)
        {
            CustTable custTable;
            select firstonly Party from custTable
                where custTable.AccountNum == this.CreditAccountNum;

            custName = DirPartyTable::getName(custTable.Party);
        }
        return custName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showVendName</Name>
				<Source><![CDATA[
    display DirPartyName showVendName()
    {
        DirPartyName vendName;
        changecompany(this.DebitCompany)
        {
            VendTable vendTable;
            select firstonly Party from vendTable
                where vendTable.AccountNum == this.DebitAccountNum;

            vendName = DirPartyTable::getName(vendTable.Party);
        }
        return vendName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.DebitCompany = curExt();
        this.CreditCompany = curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpToCustVendTable</Name>
				<Source><![CDATA[
    private void jumpToCustVendTable(LedgerJournalACType _accountType, CustVendAC _accountNum)
    {
        switch (_accountType)
        {
            case LedgerJournalACType::Cust:
                CustTable::jumpRefCustomer(_accountNum);
                break;
            case LedgerJournalACType::Vend:
                VendTable::jumpRefVendor(_accountNum);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpToCreditor</Name>
				<Source><![CDATA[
    internal void jumpToCreditor()
    {
        changecompany(this.CreditCompany)
        {
            this.jumpToCustVendTable(this.CreditAccountType, this.CreditAccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpToDebitor</Name>
				<Source><![CDATA[
    internal void jumpToDebitor()
    {
        changecompany(this.DebitCompany)
        {
            this.jumpToCustVendTable(this.DebitAccountType, this.DebitAccountNum);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@CashManagement:NettingPair</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CreditAccountNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreditAccountType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CreditCompany</Name>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@CashManagement:CustLegalEntity</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustVendNettingAgreement</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DebitAccountNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DebitAccountType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DebitCompany</Name>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@CashManagement:VendLegalEntity</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ExpireDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendNettingExpireDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendNettingStartDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustVendNettingAgreementIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustVendNettingAgreement</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustVendNettingAgreement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustVendNettingAgreement</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustVendNettingAgreement</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendNettingAgreement</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendNettingAgreement</Name>
					<Field>CustVendNettingAgreement</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>