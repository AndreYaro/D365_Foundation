<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorLogContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCommerceValidatorLogContext extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves RecIds for products and variants.
    /// </summary>
    /// <param name = "_product">An <c>EcoresProduct</c> record id.</param>
    /// <returns>A container with Product Record Id and Variant record Id.</returns>
    public static container getProduct(RefRecId _product)
    {
        EcoResDistinctProductVariant ecoresProductVariant = EcoResDistinctProductVariant::find(_product);

        if (ecoresProductVariant)
        {
            return [ecoresProductVariant.ProductMaster, ecoresProductVariant.RecId];
        }
        else
        {
            return [0,0];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextProductColor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates product color context.
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <param name = "_product">The <c>EcoResProduct</c> record id.</param>
    /// <param name = "_color">The <c>EcoResColor</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextProductColor(RetailCommerceValidatorId _validationId,
        RefRecId _product,
        EcoResColorRecId _color)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RefRecId masterProductRecId;
        RefRecId variantRecId;
        RetailCommerceValidatorEntityContextText contextText = strFmt("@Retail:RetailCommerceValidatorContextProductColorText", EcoResProduct::find(_product).DisplayProductNumber, EcoResColor::find(_color).Name);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        ttsbegin;
        // Get variant and it's master recid if it is variant product.
        [masterProductRecId,variantRecId] = RetailCommerceValidatorLogContext::getProduct(_product);

        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.ProductRefRecId == _product
                && context.MasterProductRefRecId == masterProductRecId
                && context.VariantRefRecId == variantRecId
                && context.ProductColorRefRecId == _color
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.ProductRefRecId = _product;
                context.MasterProductRefRecId = masterProductRecId;
                context.VariantRefRecId = variantRecId;
                context.ProductColorRefRecId = _color;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextProductColor'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextProductColor'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }

        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextProductStyle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create product style context.
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <param name = "_product">The <c>EcoResProduct</c> record id.</param>
    /// <param name = "_style">The <c>EcoResStyle</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextProductStyle(RetailCommerceValidatorId _validationId,
        RefRecId _product,
        EcoResStyleRecId _style)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RefRecId masterProductRecId;
        RefRecId variantRecId;
        RetailCommerceValidatorEntityContextText contextText = strFmt("@Retail:RetailCommerceValidatorContextProductStyleText", EcoResProduct::find(_product).DisplayProductNumber, EcoResStyle::find(_style).Name);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        ttsbegin;
        // Get variant and it's master recid if it is variant product.
        [masterProductRecId,variantRecId] = RetailCommerceValidatorLogContext::getProduct(_product);

        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.ProductRefRecId == _product
                && context.MasterProductRefRecId == masterProductRecId
                && context.VariantRefRecId == variantRecId
                && context.ProductStyleRefRecId == _style
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.ProductRefRecId = _product;
                context.MasterProductRefRecId = masterProductRecId;
                context.VariantRefRecId = variantRecId;
                context.ProductStyleRefRecId = _style;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextProductStyle'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextProductStyle'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextProductSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create product size context.
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <param name = "_product">The <c>EcoResProduct</c> record id.</param>
    /// <param name = "_size">The <c>EcoResSize</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextProductSize(RetailCommerceValidatorId _validationId,
        RefRecId _product,
        EcoResSizeRecId _size)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RefRecId masterProductRecId;
        RefRecId variantRecId;
        RetailCommerceValidatorEntityContextText contextText = strFmt("@Retail:RetailCommerceValidatorContextProductSizeText", EcoResProduct::find(_product).DisplayProductNumber, EcoResSize::find(_size).Name);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        ttsbegin;
        // Get variant and it's master recid if it is variant product.
        [masterProductRecId,variantRecId] = RetailCommerceValidatorLogContext::getProduct(_product);

        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.ProductRefRecId == _product
                && context.MasterProductRefRecId == masterProductRecId
                && context.VariantRefRecId == variantRecId
                && context.ProductSizeRefRecId == _size
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.ProductRefRecId = _product;
                context.MasterProductRefRecId = masterProductRecId;
                context.VariantRefRecId = variantRecId;
                context.ProductSizeRefRecId = _size;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextProductSize'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextProductSize'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextProductConfig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create product size context.
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <param name = "_product">The <c>EcoResProduct</c> record id.</param>
    /// <param name = "_configuration">The <c>EcoResConfiguration</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextProductConfig(RetailCommerceValidatorId _validationId,
        RefRecId _product,
        EcoResConfigurationRecId _configuration)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RefRecId masterProductRecId;
        RefRecId variantRecId;
        RetailCommerceValidatorEntityContextText contextText = strFmt("@Retail:RetailCommerceValidatorContextProductConfigText", EcoResProduct::find(_product).DisplayProductNumber, EcoResConfiguration::find(_configuration).Name);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        ttsbegin;
        // Get variant and it's master recid if it is variant product.
        [masterProductRecId,variantRecId] = RetailCommerceValidatorLogContext::getProduct(_product);

        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.ProductRefRecId == _product
                && context.MasterProductRefRecId == masterProductRecId
                && context.VariantRefRecId == variantRecId
                && context.ProductConfigRefRecId == _configuration
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.ProductRefRecId = _product;
                context.MasterProductRefRecId = masterProductRecId;
                context.VariantRefRecId = variantRecId;
                context.ProductConfigRefRecId = _configuration;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextProductConfig'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextProductConfig'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Product Context.
    /// </summary>
    /// <param name = "_validationId">The <c>RetailCommerceValidatorId</c> log.</param>
    /// <param name = "_product">The <c>EcoresProduct</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table record.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextProduct(RetailCommerceValidatorId _validationId, RefRecId _product)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RefRecId masterProductRecId;
        RefRecId variantRecId;
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);

        RetailCommerceValidatorEntityContextText contextText = strFmt("@Retail:RetailCommerceValidatorContextProductText", EcoResProduct::find(_product).DisplayProductNumber);

        // Get variant and it's master recid if it is variant product.
        [masterProductRecId,variantRecId] = RetailCommerceValidatorLogContext::getProduct(_product);

        select context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.ProductRefRecId == _product
                && context.MasterProductRefRecId == masterProductRecId
                && context.VariantRefRecId == variantRecId
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                ttsbegin;
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.ProductRefRecId = _product;
                context.MasterProductRefRecId = masterProductRecId;
                context.VariantRefRecId = variantRecId;
                context.EntityContextText = contextText;
                context.insert();
                context.selectForUpdate(true);
                ttscommit;
            }
            catch (exception)
            {
                // Context may have been added by another thread. Trying to select it instead.
                int counter = 0;
                boolean found = false;
                for (counter = 0; counter <= parameters.MaxRetryCount; counter++)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorProductContextLogRetryRecovered", context.RecId), xSession::currentRetryCount(), false, exception);

                    select context
                        where context.ValidationId == _validationId
                            && context.BatchJobId == validator.CurrentBatchJobId
                            && context.ProductRefRecId == _product
                            && context.MasterProductRefRecId == masterProductRecId
                            && context.VariantRefRecId == variantRecId;

                    if (context)
                    {
                        found = true;
                        break;
                    }
                }
                if (!found)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorProductContextLogRetryUnrecovered", context.RecId), xSession::currentRetryCount(), false, exception);
                    error(strFmt("@Retail:RetailCommerceValidatorCreateProductContextUnrecoverable", context.RecId));
                }
            }
        }

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextProductAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create product attribute context.
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <param name = "_product">The <c>EcoResProduct</c> record id.</param>
    /// <param name = "_attribute">The <c>EcoResAttribute</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextProductAttribute(RetailCommerceValidatorId _validationId, RefRecId _product, Refrecid _attribute)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RefRecId masterProductRecId;
        RefRecId variantRecId;
        RetailCommerceValidatorEntityContextText contextText = strFmt("@Retail:RetailCommerceValidatorContextProductAttributeText", EcoResProduct::find(_product).DisplayProductNumber, EcoResAttribute::find(_attribute).Name);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        ttsbegin;
        // Get variant and it's master recid if it is variant product.
        [masterProductRecId,variantRecId] = RetailCommerceValidatorLogContext::getProduct(_product);

        select firstonly context
            where context.ValidationId == _validationId
                && context.ProductRefRecId == _product
                && context.MasterProductRefRecId == masterProductRecId
                && context.VariantRefRecId == variantRecId
                && context.AttributeRefRecId == _attribute
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.AttributeGroupRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.ProductRefRecId = _product;
                context.MasterProductRefRecId = masterProductRecId;
                context.VariantRefRecId = variantRecId;
                context.AttributeRefRecId = _attribute;
                context.EntityContextText = contextText;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextProductAttribute'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextProductAttribute'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Catalog Context.
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <param name = "_catalog">The <c>Catalog</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextCatalog(RetailCommerceValidatorId _validationId, RefRecId _catalog)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RetailCommerceValidatorEntityContextText contextText = strFmt("@Retail:RetailCommerceValidatorContextCatalogText", Catalog::find(_catalog).CatalogId);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        ttsbegin;

        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.CatalogRefRecId == _catalog
                && context.ProductRefRecId == 0
                && context.MasterProductRefRecId == 0
                && context.VariantRefRecId == 0
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.CatalogRefRecId = _catalog;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextCatalog'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextCatalog'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextCatalogProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Catalog product context.
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <param name = "_catalog">The <c>Catalog</c> record id.</param>
    /// <param name = "_product">The <c>EcoResProduct</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextCatalogProduct(RetailCommerceValidatorId _validationId, RefRecId _catalog, RefRecId _product)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RefRecId masterProductRecId;
        RefRecId variantRecId;
        RetailCommerceValidatorEntityContextText contextText = strFmt("@Retail:RetailCommerceValidatorContextCatalogProductText",Catalog::find(_catalog).CatalogId, EcoResProduct::find(_product).DisplayProductNumber);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        ttsbegin;
        // Get variant and it's master recid if it is variant product.
        [masterProductRecId,variantRecId] = RetailCommerceValidatorLogContext::getProduct(_product);

        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.ProductRefRecId == _product
                && context.MasterProductRefRecId == masterProductRecId
                && context.VariantRefRecId == variantRecId
                && context.CatalogRefRecId == _catalog
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.ProductRefRecId = _product;
                context.MasterProductRefRecId = masterProductRecId;
                context.VariantRefRecId = variantRecId;
                context.CatalogRefRecId = _catalog;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextCatalogProduct'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextCatalogProduct'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create category context
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <param name = "_category">The <c>EcoResCategory</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextCategory(RetailCommerceValidatorId _validationId, RefRecId _category)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RetailCommerceValidatorEntityContextText contextText = strFmt("@Retail:RetailCommerceValidatorContextCategoryText", EcoResCategory::find(_category).Name);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        ttsbegin;
        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.CategoryRefRecId == _category
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.ProductRefRecId == 0
                && context.VariantRefRecId == 0
                && context.MasterProductRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.CategoryRefRecId = _category;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextCategory'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextCategory'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextCategoryHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Category hierarchy Context.
    /// </summary>
    /// <param name = "_validationId">The <c>RetailCommerceValidatorId</c> log.</param>
    /// <param name = "_categoryHierarchy">The <c>RefRecId</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table record.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextCategoryHierarchy(RetailCommerceValidatorId _validationId, RefRecId _categoryHierarchy)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RetailCommerceValidatorEntityContextText contextText = strFmt("@Retail:RetailCommerceValidatorContextCategoryHierarchyText", EcoResCategoryHierarchy::find(_categoryHierarchy).Name);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        ttsbegin;
        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.CategoryHierarchyRefRecId == _categoryHierarchy
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.ProductRefRecId == 0
                && context.VariantRefRecId == 0
                && context.MasterProductRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.CategoryHierarchyRefRecId = _categoryHierarchy;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextCategoryHierarchy'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextCategoryHierarchy'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Attribute Context.
    /// </summary>
    /// <param name = "_validationId">The Validation Id</param>
    /// <param name = "_attribute">The <c>EcoResAttribute</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextAttribute(RetailCommerceValidatorId _validationId, RefRecId _attribute)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RetailCommerceValidatorEntityContextText contextText = strFmt("@Retail:RetailCommerceValidatorContextAttributeText", EcoResAttribute::find(_attribute).Name);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        ttsbegin;
        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.AttributeRefRecId == _attribute
                && context.AttributeGroupRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.ProductRefRecId == 0
                && context.VariantRefRecId == 0
                && context.MasterProductRefRecId == 0
                && context.AssortmentRefRecId == 0
                && context.AttributeEnumerationValueRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.AttributeRefRecId = _attribute;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextAttribute'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextAttribute'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextAttributeAttributeEnumeration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Attribute enumeration Context.
    /// </summary>
    /// <param name = "_validationId">The Validation Id</param>
    /// <param name = "_attribute">The <c>EcoResAttribute</c> record id.</param>
    /// <param name = "_attributeType">The <c>EcoResAttributeType</c> record id.</param>
    /// <param name = "_enumerationTxt">The Enumeration Text Value</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextAttributeAttributeEnumeration(RetailCommerceValidatorId _validationId, RefRecId _attribute, RefRecId _attributeType, AttributeValueText _enumerationTxt)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RetailCommerceValidatorEntityContextText contextText = strFmt("@Retail:RetailCommerceValidatorContextAttributeEnumerationText", EcoResAttribute::find(_attribute).Name, EcoResAttributeType::find(_attributeType).Name, _enumerationTxt);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        ttsbegin;
        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.AttributeRefRecId == _attribute
                && context.AttributeTypeRefRecId == _attributeType
                && context.AttributeGroupRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.ProductRefRecId == 0
                && context.VariantRefRecId == 0
                && context.MasterProductRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.AttributeRefRecId = _attribute;
                context.AttributeTypeRefRecId = _attributeType;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextAttributeAttributeEnumeration'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextAttributeAttributeEnumeration'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextAttributeAttributeEnumerationValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Attribute enumeration Context.
    /// </summary>
    /// <param name = "_validationId">The Validation Id</param>
    /// <param name = "_attribute">The <c>EcoResAttribute</c> record id.</param>
    /// <param name = "_attributeType">The <c>EcoResAttributeType</c> record id.</param>
    /// <param name = "_attributeValueRecId">The record id of Enumeration Value</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextAttributeAttributeEnumerationValue(RetailCommerceValidatorId _validationId, RefRecId _attribute, RefRecId _attributeType, RefRecId _attributeValueRecId)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RetailCommerceValidatorEntityContextText contextText = strFmt("@Retail:RetailCommerceValidatorContextAttributeEnumerationText",
            EcoResAttribute::find(_attribute).Name,
            EcoResAttributeType::find(_attributeType).Name,
            EcoResTextValue::find(_attributeValueRecId).TextValue);

        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        ttsbegin;
        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.AttributeRefRecId == _attribute
                && context.AttributeTypeRefRecId == _attributeType
                && context.AttributeEnumerationValueRecId == _attributeValueRecId
                && context.AttributeGroupRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.ProductRefRecId == 0
                && context.VariantRefRecId == 0
                && context.MasterProductRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.AttributeRefRecId = _attribute;
                context.AttributeTypeRefRecId = _attributeType;
                context.AttributeEnumerationValueRecId = _attributeValueRecId;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextAttributeAttributeEnumerationValue'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextAttributeAttributeEnumerationValue'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextAttributeGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Attribute Group Context.
    /// </summary>
    /// <param name = "_validationId">The Validation id</param>
    /// <param name = "_attributeGroup">The <c>EcoResAttributeGroup</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextAttributeGroup(RetailCommerceValidatorId _validationId, RefRecId _attributeGroup)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RetailCommerceValidatorEntityContextText contextText = strFmt("@Retail:RetailCommerceValidatorContextAttributeGroupText", EcoResAttributeGroup::find(_attributeGroup).Name);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        ttsbegin;
        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.AttributeGroupRefRecId == _attributeGroup
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.ProductRefRecId == 0
                && context.VariantRefRecId == 0
                && context.MasterProductRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.AttributeGroupRefRecId = _attributeGroup;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextAttributeGroup'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextAttributeGroup'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextKitComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Channel Kit Component Context.
    /// </summary>
    /// <param name = "_validationId">The Validation id</param>
    /// <param name = "_KitMaster">The <c>RetailKit</c> record id.</param>
    /// <param name = "_KitComponent">The <c>RetailKitComponent</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextKitComponent(RetailCommerceValidatorId _validationId, RefRecId _KitMaster, RefRecId _KitComponent)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RetailCommerceValidatorEntityContextText contextText;
        RetailKit retailKit = RetailKit::find(_KitMaster);
        EcoResProductMaster productMaster = EcoResProductMaster::find(retailKit.ProductMaster);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        contextText = strFmt("@Retail:RetailCommerceValidatorContextKitComponentText", productMaster.DisplayProductNumber,
            EcoResDistinctProduct::find(RetailKitComponent::find(_KitComponent,retailKit).Component).DisplayProductNumber);

        ttsbegin;

        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.ProductRefRecId == retailKit.ProductMaster
                && context.KitRefRecId == _KitMaster
                && context.KitComponentRefRecId == _KitComponent
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;

                // This is the Kit product, as we are showing kit related issues as a package so, ProductRefRecId should be kit item.
                context.ProductRefRecId = retailKit.ProductMaster;
                context.KitRefRecId = _KitMaster;
                context.KitComponentRefRecId = _KitComponent;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextKitComponent'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextKitComponent'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextKitComponentAssortment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Channel Kit Component Assortment Context.
    /// </summary>
    /// <param name = "_validationId">The Validation id</param>
    /// <param name = "_KitMaster">The <c>RetailKit</c> record id.</param>
    /// <param name = "_KitComponent">The <c>RetailKitComponent</c> record id.</param>
    /// <param name = "_assortmentRecId">The <c>RetailAssortmentTable</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextKitComponentAssortment(RetailCommerceValidatorId _validationId, RefRecId _KitMaster, RefRecId _KitComponent, RefRecId _assortmentRecId)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RetailCommerceValidatorEntityContextText contextText;
        RetailKit retailKit = RetailKit::find(_KitMaster);
        EcoResProductMaster productMaster = EcoResProductMaster::find(retailKit.ProductMaster);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        contextText = strFmt("@Retail:RetailCommerceValidatorContextKitComponentAssortmentText",
            RetailAssortmentTable::findRecId(_assortmentRecId).AssortmentID,
            productMaster.DisplayProductNumber,
            EcoResDistinctProduct::find(RetailKitComponent::find(_KitComponent,retailKit).Component).DisplayProductNumber);

        ttsbegin;

        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.ProductRefRecId == retailKit.ProductMaster
                && context.KitRefRecId == _KitMaster
                && context.KitComponentRefRecId == _KitComponent
                && context.AssortmentRefRecId == _assortmentRecId
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;

                // This is the Kit product, as we are showing kit related issues as a package so, ProductRefRecId should be kit item.
                context.ProductRefRecId = retailKit.ProductMaster;
                context.KitRefRecId = _KitMaster;
                context.KitComponentRefRecId = _KitComponent;
                context.AssortmentRefRecId = _assortmentRecId;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextKitComponentAssortment'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextKitComponentAssortment'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextKitComponentSubstitute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Channel Kit Component Context.
    /// </summary>
    /// <param name = "_validationId">The Validation id</param>
    /// <param name = "_KitMaster">The <c>RetailKit</c> record id.</param>
    /// <param name = "_KitComponent">The <c>RetailKitComponent</c> record id.</param>
    /// <param name = "_kitComponentSubstitute">The <c>RetailKitComponentSubstitute</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextKitComponentSubstitute(RetailCommerceValidatorId _validationId, RefRecId _KitMaster, RefRecId _KitComponent, RefRecId _kitComponentSubstitute)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RetailCommerceValidatorEntityContextText contextText;
        RetailKit retailKit = RetailKit::find(_KitMaster);
        EcoResProductMaster productMaster = EcoResProductMaster::find(retailKit.ProductMaster);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();
        RetailKitComponentSubstitute kitComponentSubstitue;

        select firstonly SubstituteProduct from kitComponentSubstitue
            where kitComponentSubstitue.RecId == _kitComponentSubstitute;

        contextText = strFmt("@Retail:RetailCommerceValidatorContextKitComponentSubstituteText", productMaster.DisplayProductNumber,
            EcoResDistinctProduct::find(RetailKitComponent::find(_KitComponent,retailKit).Component).DisplayProductNumber,
            EcoResProduct::find(kitComponentSubstitue.SubstituteProduct).DisplayProductNumber);

        ttsbegin;

        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.ProductRefRecId == retailKit.ProductMaster
                && context.KitRefRecId == _KitMaster
                && context.KitComponentRefRecId == _KitComponent
                && context.KitComponentSubstituteRefRecId == _kitComponentSubstitute
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;

                // This is the Kit product, as we are showing kit related issues as a package so, ProductRefRecId should be kit item.
                context.ProductRefRecId = retailKit.ProductMaster;
                context.KitRefRecId = _KitMaster;
                context.KitComponentRefRecId = _KitComponent;
                context.KitComponentSubstituteRefRecId = _kitComponentSubstitute;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextKitComponentSubstitute'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextKitComponentSubstitute'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextKitComponentSubstituteAssortment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Channel Kit Component's Substitute Assortment Context.
    /// </summary>
    /// <param name = "_validationId">The Validation id</param>
    /// <param name = "_KitMaster">The <c>RetailKit</c> record id.</param>
    /// <param name = "_KitComponent">The <c>RetailKitComponent</c> record id.</param>
    /// <param name = "_kitComponentSubstitute">The <c>RetailKitComponentSubstitute</c> record id.</param>
    /// <param name = "_assortmentRecId">The <c>RetailAssortmentTable</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextKitComponentSubstituteAssortment(RetailCommerceValidatorId _validationId, RefRecId _KitMaster, RefRecId _KitComponent, RefRecId _kitComponentSubstitute, RefRecId _assortmentRecId)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RetailCommerceValidatorEntityContextText contextText;
        RetailKit retailKit = RetailKit::find(_KitMaster);
        EcoResProductMaster productMaster = EcoResProductMaster::find(retailKit.ProductMaster);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();
        RetailKitComponentSubstitute kitComponentSubstitue;

        select firstonly SubstituteProduct from kitComponentSubstitue
            where kitComponentSubstitue.RecId == _kitComponentSubstitute;

        contextText = strFmt("@Retail:RetailCommerceValidatorContextKitComponentSubstituteAssortmentText",
            RetailAssortmentTable::findRecId(_assortmentRecId).AssortmentID,
            productMaster.DisplayProductNumber,
            EcoResDistinctProduct::find(RetailKitComponent::find(_KitComponent,retailKit).Component).DisplayProductNumber,
            EcoResProduct::find(kitComponentSubstitue.SubstituteProduct).DisplayProductNumber);

        ttsbegin;

        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.ProductRefRecId == retailKit.ProductMaster
                && context.KitRefRecId == _KitMaster
                && context.KitComponentRefRecId == _KitComponent
                && context.KitComponentSubstituteRefRecId == _kitComponentSubstitute
                && context.AssortmentRefRecId == _assortmentRecId
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;

                // This is the Kit product, as we are showing kit related issues as a package so, ProductRefRecId should be kit item.
                context.ProductRefRecId = retailKit.ProductMaster;
                context.KitRefRecId = _KitMaster;
                context.KitComponentRefRecId = _KitComponent;
                context.KitComponentSubstituteRefRecId = _kitComponentSubstitute;
                context.AssortmentRefRecId = _assortmentRecId;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextKitComponentSubstituteAssortment'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextKitComponentSubstituteAssortment'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextKitMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Kit Master Context.
    /// </summary>
    /// <param name = "_validationId">The Validation id</param>
    /// <param name = "_KitMaster">The <c>RetailKit</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextKitMaster(RetailCommerceValidatorId _validationId, RefRecId _KitMaster)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;

        RetailKit retailKit = RetailKit::find(_KitMaster);
        EcoResProductMaster productMaster = EcoResProductMaster::find(retailKit.ProductMaster);
        RetailCommerceValidatorEntityContextText contextText = strFmt("@Retail:RetailCommerceValidatorContextKitText", productMaster.DisplayProductNumber);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        ttsbegin;

        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.ProductRefRecId == retailKit.ProductMaster
                && context.KitRefRecId == _KitMaster
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;

                // This is the Kit product, as we are showing kit related issues as a package so, ProductRefRecId should be kit item.
                context.ProductRefRecId = retailKit.ProductMaster;
                context.KitRefRecId = _KitMaster;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextKitMaster'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextKitMaster'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Channel Context.
    /// </summary>
    /// <param name = "_validationId">The Validation id</param>
    /// <param name = "_omOperatingUnitId">The channel record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextChannel(RetailCommerceValidatorId _validationId, RefRecId _omOperatingUnitId)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RetailCommerceValidatorEntityContextText contextText;
        RetailChannelTable retailChannelTable;
        OMOperatingUnit omOperatingUnit;
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        select firstonly Name from omOperatingUnit
            exists join retailChannelTable
            where retailChannelTable.OMOperatingUnitID == omOperatingUnit.RecId
                && retailChannelTable.OMOperatingUnitID == _omOperatingUnitId;

        contextText = strFmt("@Retail:RetailCommerceValidatorContextChannelText", omOperatingUnit.Name);

        ttsbegin;
        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.OMOperatingUnitId == _omOperatingUnitId
                && context.ProductRefRecId == 0
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.OMOperatingUnitId = _omOperatingUnitId;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextChannel'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextChannel'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextChannelAttributeProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Channel-Attribute-Product Context.
    /// </summary>
    /// <param name = "_validationId">The Validation Id</param>
    /// <param name = "_omOperatingUnitRecId">The <c>Channel RecId</c> record id.</param>
    /// <param name = "_product">The <c>EcoResProduct</c> record id.</param>
    /// <param name = "_attribute">The <c>EcoResAttribute</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextChannelAttributeProduct(RetailCommerceValidatorId _validationId, RefRecId _omOperatingUnitRecId, RefRecId _product, RefRecId _attribute)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RetailCommerceValidatorEntityContextText contextText = strFmt('@Retail:RetailCommerceValidatorContextAttributeText', EcoResAttribute::find(_attribute).Name);
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        ttsbegin;
        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.AttributeRefRecId == _attribute
                && context.AttributeGroupRefRecId == 0
                && context.ProductRefRecId == _product
                && context.OMOperatingUnitId == _omOperatingUnitRecId
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.AssortmentRefRecId == 0
                && context.AttributeEnumerationValueRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.AttributeRefRecId = _attribute;
                context.OMOperatingUnitId = _omOperatingUnitRecId;
                context.ProductRefRecId = _product;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextChannelAttributeProduct'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextChannelAttributeProduct'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextChannelProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Channel Product Context.
    /// </summary>
    /// <param name = "_validationId">The Validation id</param>
    /// <param name = "_omOperatingUnitId">The channel record id.</param>
    /// <param name = "_product">The <c>EcoResProduct</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextChannelProduct(RetailCommerceValidatorId _validationId, RefRecId _omOperatingUnitId, RefRecId _product)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RetailCommerceValidatorEntityContextText contextText;
        RetailChannelTable retailChannelTable;
        OMOperatingUnit omOperatingUnit;
        RefRecId masterProductRecId;
        RefRecId variantRecId;
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        ttsbegin;
        select firstonly Name from omOperatingUnit
            exists join retailChannelTable
            where retailChannelTable.OMOperatingUnitID == omOperatingUnit.RecId
                && retailChannelTable.OMOperatingUnitID == _omOperatingUnitId;

        contextText = strFmt("@Retail:RetailCommerceValidatorContextChannelProductText", omOperatingUnit.Name, EcoResProduct::find(_product).DisplayProductNumber);

        // Get variant and it's master recid if it is variant product.
        [masterProductRecId,variantRecId] = RetailCommerceValidatorLogContext::getProduct(_product);

        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.OMOperatingUnitId == _omOperatingUnitId
                && context.ProductRefRecId == _product
                && context.MasterProductRefRecId == masterProductRecId
                && context.VariantRefRecId == variantRecId
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.OMOperatingUnitId = _omOperatingUnitId;
                context.ProductRefRecId = _product;
                context.MasterProductRefRecId = masterProductRecId;
                context.VariantRefRecId = variantRecId;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextChannelProduct'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextChannelProduct'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextAttributeAttributeGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Attribute-Attribute group Context.
    /// </summary>
    /// <param name = "_validationId">The Validation id</param>
    /// <param name = "_attribute">The <c>EcoResAttribute</c> record id.</param>
    /// <param name = "_attributeGroup">The <c>EcoResAttributeGroup</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextAttributeAttributeGroup(RetailCommerceValidatorId _validationId, RefRecId _attribute, RefRecId _attributeGroup)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RetailCommerceValidatorEntityContextText contextText;
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        contextText = strFmt("@Retail:RetailCommerceValidatorContextAttributeAttributeGroupText",
                                EcoResAttribute::find(_attribute).Name,
                                EcoResAttributeGroup::find(_attributeGroup).Name);

        ttsbegin;
        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.AttributeRefRecId == _attribute
                && context.AttributeGroupRefRecId == _attributeGroup
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.ProductRefRecId == 0
                && context.VariantRefRecId == 0
                && context.MasterProductRefRecId == 0
                && context.AssortmentRefRecId == 0
                && context.AttributeEnumerationValueRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.AttributeGroupRefRecId = _attributeGroup;
                context.AttributeRefRecId = _attribute;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextAttributeAttributeGroup'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextAttributeAttributeGroup'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextCategoryAttributeGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Category - Attribute group Context.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    /// <param name = "_attributeGroup">The <c>EcoResAttributeGroup</c> record id.</param>
    /// <param name = "_category">The <c>EcoResCategory</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextCategoryAttributeGroup(RetailCommerceValidatorId _validationId, RefRecId _attributeGroup, RefRecId _category)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RetailCommerceValidatorEntityContextText contextText;
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        contextText = strFmt("@Retail:RetailCommerceValidatorContextAttributeGroupCategoryText",
            EcoResAttributeGroup::find(_attributeGroup).Name,
            EcoResCategory::find(_category).Name);

        ttsbegin;
        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.AttributeGroupRefRecId == _attributeGroup
                && context.CategoryRefRecId == _category
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.ProductRefRecId == 0
                && context.VariantRefRecId == 0
                && context.MasterProductRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.AttributeGroupRefRecId = _attributeGroup;
                context.CategoryRefRecId = _category;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextCategoryAttributeGroup'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextCategoryAttributeGroup'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextCatalogProductAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Catalog product attribute context.
    /// </summary>
    /// <param name = "_validationId">The validation Id.</param>
    /// <param name = "_catalog">The <c>Catalog</c> record id.</param>
    /// <param name = "_product">The <c>EcoResProduct</c> record id.</param>
    /// <param name = "_attribute">The <c>EcoResAttribute</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextCatalogProductAttribute(RetailCommerceValidatorId _validationId, RefRecId _catalog, RefRecId _product, RefRecId _attribute)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RefRecId masterProductRecId;
        RefRecId variantRecId;
        RetailCommerceValidatorEntityContextText contextText;
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        contextText = strFmt("@Retail:RetailCommerceValidatorContextCatalogProductAttributeText",
            Catalog::find(_catalog).CatalogId,
            EcoResProduct::find(_product).DisplayProductNumber,
            EcoResAttribute::find(_attribute).Name);

        ttsbegin;
        // Get variant and it's master recid if it is variant product.
        [masterProductRecId,variantRecId] = RetailCommerceValidatorLogContext::getProduct(_product);

        select firstonly context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.ProductRefRecId == _product
                && context.MasterProductRefRecId == masterProductRecId
                && context.VariantRefRecId == variantRecId
                && context.CatalogRefRecId == _catalog
                && context.AttributeRefRecId == _attribute
                && context.AttributeGroupRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.ProductRefRecId = _product;
                context.MasterProductRefRecId = masterProductRecId;
                context.VariantRefRecId = variantRecId;
                context.CatalogRefRecId = _catalog;
                context.AttributeRefRecId = _attribute;
                context.EntityContextText = contextText;
                context.insert();
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextCatalogProduct'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextCatalogProduct'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }
        ttscommit;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextProductAssortment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Product assortment Context.
    /// </summary>
    /// <param name = "_validationId">The <c>RetailCommerceValidatorId</c> log.</param>
    /// <param name = "_product">The <c>EcoresProduct</c> record id.</param>
    /// <param name = "_assortment">The <c>RetailAssortmentTable</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table record.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextProductAssortment(RetailCommerceValidatorId _validationId, RefRecId _product, RefRecId _assortment)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RefRecId masterProductRecId;
        RefRecId variantRecId;
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);

        RetailCommerceValidatorEntityContextText contextText = strFmt("@Retail:RetailCommerceValidatorContextProductAssortmentText",
            EcoResProduct::find(_product).DisplayProductNumber,
            RetailAssortmentTable::findRecId(_assortment).AssortmentID);

        // Get variant and it's master recid if it is variant product.
        [masterProductRecId,variantRecId] = RetailCommerceValidatorLogContext::getProduct(_product);

        select context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.ProductRefRecId == _product
                && context.MasterProductRefRecId == masterProductRecId
                && context.VariantRefRecId == variantRecId
                && context.AssortmentRefRecId == _assortment
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryHierarchyRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0;

        if (!context)
        {
            try
            {
                ttsbegin;
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.ProductRefRecId = _product;
                context.MasterProductRefRecId = masterProductRecId;
                context.VariantRefRecId = variantRecId;
                context.EntityContextText = contextText;
                context.AssortmentRefRecId = _assortment;
                context.insert();
                context.selectForUpdate(true);
                ttscommit;
            }
            catch (exception)
            {
                // Context may have been added by another thread. Trying to select it instead.
                int counter = 0;
                boolean found = false;
                for (counter = 0; counter <= parameters.MaxRetryCount; counter++)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorProductContextLogRetryRecovered", context.RecId), xSession::currentRetryCount(), false, exception);

                    select context
                        where context.ValidationId == _validationId
                            && context.BatchJobId == validator.CurrentBatchJobId
                            && context.ProductRefRecId == _product
                            && context.MasterProductRefRecId == masterProductRecId
                            && context.VariantRefRecId == variantRecId
                            && context.AssortmentRefRecId == _assortment
                            && context.AttributeGroupRefRecId == 0
                            && context.AttributeRefRecId == 0
                            && context.CatalogProductRefRecId == 0
                            && context.CatalogRefRecId == 0
                            && context.CategoryHierarchyRefRecId == 0
                            && context.CategoryRefRecId == 0
                            && context.KitComponentRefRecId == 0
                            && context.KitComponentSubstituteRefRecId == 0
                            && context.KitRefRecId == 0
                            && context.OMOperatingUnitId == 0
                            && context.ProductColorRefRecId == 0
                            && context.ProductConfigRefRecId == 0
                            && context.ProductSizeRefRecId == 0
                            && context.ProductStyleRefRecId == 0;

                    if (context)
                    {
                        found = true;
                        break;
                    }
                }
                if (!found)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorProductContextLogRetryUnrecovered", context.RecId), xSession::currentRetryCount(), false, exception);
                    error(strFmt("@Retail:RetailCommerceValidatorCreateProductContextUnrecoverable", context.RecId));
                }
            }
        }

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateContextProductCategoryHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Product Category hierarchy Context.
    /// </summary>
    /// <param name = "_validationId">The <c>RetailCommerceValidatorId</c> log.</param>
    /// <param name = "_productRecId">The <c>EcoresProduct</c> record id.</param>
    /// <param name = "_hierarchyRecId">The <c>EcoResCategoryHierarchy</c> record id.</param>
    /// <returns>The record on the <c>RetailCommerceValidatorLogContext</c> table record.</returns>
    public static RetailCommerceValidatorLogContext findOrCreateContextProductCategoryHierarchy(RetailCommerceValidatorId _validationId, RefRecId _productRecId, RefRecId _hierarchyRecId)
    {
        System.Exception exception;
        RetailCommerceValidatorLogContext context;
        RefRecId masterProductRecId;
        RefRecId variantRecId;
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);

        RetailCommerceValidatorEntityContextText contextText = strFmt("@Retail:RetailCommerceValidatorContextProductHierarchy",
            EcoResProduct::find(_productRecId).DisplayProductNumber,
            EcoResCategoryHierarchy::find(_hierarchyRecId).Name);

        // Get variant and it's master recid if it is variant product.
        [masterProductRecId,variantRecId] = RetailCommerceValidatorLogContext::getProduct(_productRecId);

        select context
            where context.ValidationId == _validationId
                && context.BatchJobId == validator.CurrentBatchJobId
                && context.ProductRefRecId == _productRecId
                && context.MasterProductRefRecId == masterProductRecId
                && context.CategoryHierarchyRefRecId == _hierarchyRecId
                && context.VariantRefRecId == variantRecId
                && context.AttributeGroupRefRecId == 0
                && context.AttributeRefRecId == 0
                && context.CatalogProductRefRecId == 0
                && context.CatalogRefRecId == 0
                && context.CategoryRefRecId == 0
                && context.KitComponentRefRecId == 0
                && context.KitComponentSubstituteRefRecId == 0
                && context.KitRefRecId == 0
                && context.OMOperatingUnitId == 0
                && context.ProductColorRefRecId == 0
                && context.ProductConfigRefRecId == 0
                && context.ProductSizeRefRecId == 0
                && context.ProductStyleRefRecId == 0
                && context.AssortmentRefRecId == 0;

        if (!context)
        {
            try
            {
                ttsbegin;
                context.initValue();
                context.ValidationId = _validationId;
                context.BatchJobId = validator.CurrentBatchJobId;
                context.ProductRefRecId = _productRecId;
                context.MasterProductRefRecId = masterProductRecId;
                context.VariantRefRecId = variantRecId;
                context.CategoryHierarchyRefRecId = _hierarchyRecId;
                context.EntityContextText = contextText;
                context.insert();
                context.selectForUpdate(true);
                ttscommit;
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextProductCategoryHierarchy'), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogContext), 'findOrCreateContextProductCategoryHierarchy'), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }

        return context;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@Retail:RetailCommerceValidatorLogContextDevDocs</DeveloperDocumentation>
	<Label>@Retail:RetailCommerceValidatorLogContextLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>ValidationId</TitleField1>
	<TitleField2>ProductRefRecId</TitleField2>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ValidationId</Name>
			<ExtendedDataType>RetailCommerceValidatorId</ExtendedDataType>
			<Label>@Retail:RetailCommerceValidatorIdLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>KitRefRecId</Name>
			<ExtendedDataType>RetailKitRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>KitComponentRefRecId</Name>
			<ExtendedDataType>RetailKitComponentRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeRefRecId</Name>
			<ExtendedDataType>EcoResAttributeRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CategoryHierarchyRefRecId</Name>
			<ExtendedDataType>EcoResCategoryHierarchyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CategoryRefRecId</Name>
			<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OMOperatingUnitId</Name>
			<ExtendedDataType>OMOperatingUnitRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CatalogRefRecId</Name>
			<ExtendedDataType>CatalogRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CatalogProductRefRecId</Name>
			<ExtendedDataType>CatalogProductId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductColorRefRecId</Name>
			<ExtendedDataType>EcoResColorRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductStyleRefRecId</Name>
			<ExtendedDataType>EcoResStyleRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductSizeRefRecId</Name>
			<ExtendedDataType>EcoResSizeRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductConfigRefRecId</Name>
			<ExtendedDataType>EcoResConfigurationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductRefRecId</Name>
			<ExtendedDataType>EcoResProductRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MasterProductRefRecId</Name>
			<ExtendedDataType>EcoResProductRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VariantRefRecId</Name>
			<ExtendedDataType>EcoResProductRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>KitComponentSubstituteRefRecId</Name>
			<ExtendedDataType>RetailKitComponentSubstituteRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeGroupRefRecId</Name>
			<ExtendedDataType>EcoResAttributeGroupRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EntityContextText</Name>
			<ExtendedDataType>RetailCommerceValidatorEntityContextText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BatchJobId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@Retail:RetailCommerceValidatorBatchJobId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeTypeRefRecId</Name>
			<ExtendedDataType>EcoResAttributeTypeRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssortmentRefRecId</Name>
			<ExtendedDataType>RetailKitRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeEnumerationValueRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RetailCommerceValidatorIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ValidationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BatchJobId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Productidx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ValidationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProductRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MasterProductRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VariantRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResultsByEntityIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ValidationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>KitRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VariantRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BatchJobId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProductRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailCommerceValidator</Name>
			<RelatedTable>RetailCommerceValidator</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ValidationId</Name>
					<Field>ValidationId</Field>
					<RelatedField>ValidationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ValidationIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResColor</Name>
			<RelatedTable>EcoResColor</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductColorRefRecId</Name>
					<Field>ProductColorRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResStyle</Name>
			<RelatedTable>EcoResStyle</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductStyleRefRecId</Name>
					<Field>ProductStyleRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResSize</Name>
			<RelatedTable>EcoResSize</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductSizeRefRecId</Name>
					<Field>ProductSizeRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResConfiguration</Name>
			<RelatedTable>EcoResConfiguration</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductConfigRefRecId</Name>
					<Field>ProductConfigRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProduct</Name>
			<RelatedTable>EcoResProduct</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductRefRecId</Name>
					<Field>ProductRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProduct1</Name>
			<RelatedTable>EcoResProduct</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VariantRefRecId</Name>
					<Field>VariantRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>