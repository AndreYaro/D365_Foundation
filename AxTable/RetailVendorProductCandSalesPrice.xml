<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailVendorProductCandSalesPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailVendorProductCandSalesPrice extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNewPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the price from table <c>RetailVendorProductCandSalesPrice</c>
    /// </summary>
    /// <returns>
    /// Price for the selected record from the table <c>RetailVendorProductCandSalesPrice</c>
    /// </returns>
    display CatProductPricestr getNewPrice()
    {
        CatVendorProductCandidate catVendorProductCandidate;
        RetailVendorProductCandSalesPrice  retailVendorProductCandSalesPrice;
        CatProductPricestr newValue;

        select firstonly ActionType, Status from catVendorProductCandidate
                where catVendorProductCandidate.RecId == this.VendorProductCandidate
            join retailVendorProductCandSalesPrice
                where retailVendorProductCandSalesPrice.VendorProductCandidate == catVendorProductCandidate.RecId
                    && retailVendorProductCandSalesPrice.UnitOfMeasure == this.UnitOfMeasure
                    && retailVendorProductCandSalesPrice.CurrencyCode == this.CurrencyCode;

        if (catVendorProductCandidate)
        {
            if (catVendorProductCandidate.ActionType == CatProductActionType::Delete)
            {
                if (catVendorProductCandidate.Status == CatVendorProductStatus::Approved)
                {
                    newValue = "@SYS311898";
                }
                else if (catVendorProductCandidate.Status == CatVendorProductStatus::Rejected)
                {
                    newValue = "@SYS311899";
                }
                else
                {
                    newValue = "@SYS311897";
                }
            }
            else
            {
                newValue = strfmt('%1', retailVendorProductCandSalesPrice.(fieldnum(RetailVendorProductCandSalesPrice,Price)));
            }
        }

        return newValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductCandidatePriceCurrentValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current values for product sales price.
    /// </summary>
    /// <param name="_catVendorCatalogMaintenanceRequestId">
    /// The ID of the <c>CatVendorCatalogMaintenanceRequest</c> record.
    /// </param>
    /// <returns>
    /// A <c>RetailVendorProductCandSalesPrice</c> table buffer.
    /// </returns>
    public static RetailVendorProductCandSalesPrice getProductCandidatePriceCurrentValues(RefRecId _catVendorCatalogMaintenanceRequestId)
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        RetailVendorProductCandSalesPrice   retailVendorProductCandSalesPriceTmp;
        RetailVendorProductCandSalesPrice   retailVendorProductCandSalesPrice;
        CatVendorProductCandidate           catVendorProductCandidate;
        CatVendorApprovedProduct            catVendorApprovedProduct;
        CatVendorCatalog                    catVendorCatalog;
        PriceDiscTable                      priceDiscTable;
        UnitOfMeasure                       unitOfMeasure;
        InventTable                         inventTable;
        TransDate                           now = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) ;
        TransDate                           nullDate;

        retailVendorProductCandSalesPriceTmp.recordLevelSecurity(true);
        retailVendorProductCandSalesPriceTmp.setTmp();

        // Find existing sales prices for the product
        while select VendorCatalog from catVendorCatalogMaintenanceRequest
            where catVendorCatalogMaintenanceRequest.RecId == _catVendorCatalogMaintenanceRequestId

            join VendorParty from catVendorCatalog
                    where catVendorCatalog.RecId == catVendorCatalogMaintenanceRequest.VendorCatalog

            join VendorProductCode from catVendorProductCandidate
                    where catVendorProductCandidate.CatalogMaintenanceRequest == _catVendorCatalogMaintenanceRequestId

            join VendorProductCode, DirPartyTable, EcoResProduct from catVendorApprovedProduct
                    where catVendorApprovedProduct.VendorProductCode == catVendorProductCandidate.VendorProductCode
                            && catVendorApprovedProduct.DirPartyTable == catVendorCatalog.VendorParty

            join Product, ItemId from inventTable
                    where inventTable.Product == catVendorApprovedProduct.EcoResProduct

            // Get trade agreements
            join Amount, Currency from priceDiscTable
                order by priceDiscTable.RecId Desc
                where priceDiscTable.ItemRelation == inventTable.ItemId
                        && priceDiscTable.ItemCode == PriceDiscProductCodeType::Table
                        && (priceDiscTable.FromDate  <= now || priceDiscTable.FromDate == nullDate)
                        && (priceDiscTable.ToDate    >  now || priceDiscTable.ToDate   == nullDate)
                        && priceDiscTable.relation == PriceType::PriceSales
            join Symbol, RecId from unitOfMeasure
                where priceDiscTable.UnitId == unitOfMeasure.Symbol
        {
            // Catalog import functionality allows on set of trade agreement on the combination of
            // item, currency & unit of measure. Inserting last updated trade agreement value.

            select retailVendorProductCandSalesPriceTmp
                where retailVendorProductCandSalesPriceTmp.VendorProductCandidate  == catVendorProductCandidate.RecId
                      && retailVendorProductCandSalesPriceTmp.UnitOfMeasure        == unitOfMeasure.RecId
                      && retailVendorProductCandSalesPriceTmp.CurrencyCode         == priceDiscTable.Currency;

            if (!retailVendorProductCandSalesPriceTmp)
            {
                retailVendorProductCandSalesPriceTmp.VendorProductCandidate = catVendorProductCandidate.RecId;
                retailVendorProductCandSalesPriceTmp.UnitOfMeasure          = unitOfMeasure.RecId;
                retailVendorProductCandSalesPriceTmp.CurrencyCode           = priceDiscTable.Currency;
                retailVendorProductCandSalesPriceTmp.Price                  = priceDiscTable.Amount;

                retailVendorProductCandSalesPriceTmp.insert();
            }
        }

        // Find new sales prices from the product candidate
        while select VendorProductCandidate, UnitOfMeasure, CurrencyCode, SuggestedPrice
                from retailVendorProductCandSalesPrice
            join recId from catVendorProductCandidate
                        where catVendorProductCandidate.CatalogMaintenanceRequest == _catVendorCatalogMaintenanceRequestId
                                && retailVendorProductCandSalesPrice.VendorProductCandidate == catVendorProductCandidate.RecId

        {
            // Insert new prices into in-memory table for display
            select retailVendorProductCandSalesPriceTmp
                            where   retailVendorProductCandSalesPriceTmp.VendorProductCandidate == retailVendorProductCandSalesPrice.VendorProductCandidate
                                    && retailVendorProductCandSalesPriceTmp.UnitOfMeasure       == retailVendorProductCandSalesPrice.UnitOfMeasure
                                    && retailVendorProductCandSalesPriceTmp.CurrencyCode        == retailVendorProductCandSalesPrice.CurrencyCode;

            if (!retailVendorProductCandSalesPriceTmp)
            {
                retailVendorProductCandSalesPriceTmp.VendorProductCandidate = retailVendorProductCandSalesPrice.VendorProductCandidate;
                retailVendorProductCandSalesPriceTmp.UnitOfMeasure          = retailVendorProductCandSalesPrice.UnitOfMeasure;
                retailVendorProductCandSalesPriceTmp.CurrencyCode           = retailVendorProductCandSalesPrice.CurrencyCode;
                retailVendorProductCandSalesPriceTmp.SuggestedPrice         = retailVendorProductCandSalesPrice.SuggestedPrice;
                retailVendorProductCandSalesPriceTmp.insert();
            }
            else
            {
                retailVendorProductCandSalesPriceTmp.SuggestedPrice         = retailVendorProductCandSalesPrice.SuggestedPrice;
                retailVendorProductCandSalesPriceTmp.update();
            }
        }

        return retailVendorProductCandSalesPriceTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET260056</DeveloperDocumentation>
	<Label>@RET260055</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>VendorProductCandidate</TitleField1>
	<TitleField2>Price</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>Merchandising</Modules>
	<ReplacementKey>VendorProductCandidateIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorProductCandidate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorProductCandidate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorProductCandidate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SuggestedPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Price</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SuggestedPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Price</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UnitOfMeasure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendorProductCandidate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CurrencyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendorProductCandidateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendorProductCandidate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UnitOfMeasureIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatVendorProductCandidate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CatVendorProductCandidate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorProductCandidate</Name>
					<Field>VendorProductCandidate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitOfMeasure</Name>
					<Field>UnitOfMeasure</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>