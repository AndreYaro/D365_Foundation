<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RouteVersion</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RouteVersion extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approverPersonnelNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the personnel number of the worker that approved the current record.
    /// </summary>
    /// <returns>
    /// The personnel number of the record that is approved.
    /// </returns>
    public display HcmPersonnelNumberId approverPersonnelNumber()
    {
        return HcmWorker::find(this.Approver).PersonnelNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the configuration ID that is related to the inventory dimension ID.
    /// </summary>
    /// <returns>
    /// A string that holds the configuration ID.
    /// </returns>
    public display EcoResItemConfigurationName configId()
    {
        return this.inventDim().ConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consistencyCheckFix</Name>
				<Source><![CDATA[
    public void consistencyCheckFix(RouteConsistencyCheck_Table  _routeConsistencyCheck_Table)
    {
        EcoResItemConfigurationName configId;
        List                        configurations;
        ListEnumerator              configurationsEnumerator;
        InventTable                 inventTable;

        void checkRoute(EcoResItemConfigurationName  _configId)
        {
            Route                       route;
            RouteOpr                    routeOpr;
            RouteSearch_Config          search;
            Query                       query;
            SysInfoAction_FormrunQuery  sysInfoAction_FormrunQuery;
            search = RouteSearch_Config::newRouteVersion(this, _configId);

            while (search.next())
            {
                route = search.route();
                if (! route.routeOpr(this.ItemId, _configId, this.inventSiteId(), routeOpr).RecId)
                {
                    query = new Query();
                    query.addDataSource(this.TableId).addRange(fieldnum(RouteVersion,RecId)).value(queryValue(this.RecId));

                    sysInfoAction_FormrunQuery = SysInfoAction_FormrunQuery::newFormnameQuery(formstr(routeInventProd),query);
                    sysInfoAction_FormrunQuery.parmCallerBuffer(inventTable);
                    warning(strfmt("@SYS25769", route.OprId, this.ItemId, _configId), '', sysInfoAction_FormrunQuery);
                }
            }
        }

        inventTable = this.inventTable();

        if (inventTable)
        {
            if (inventTable.configActive())
            {
                configurations              = EcoResProductVariantDimValue::newProductVariantDim_ConfigId().getDimValues(inventTable.Product);
                configurationsEnumerator    = configurations.getEnumerator();
                while (configurationsEnumerator.moveNext())
                {
                    configId = configurationsEnumerator.current();
                    checkRoute(configId);
                }
            }
            else
            {
                checkRoute('');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (!this.canEdit())
        {
            throw error("@SYS95160");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(InventTable _table)
    {
        this.ItemId = _table.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRouteTable</Name>
				<Source><![CDATA[
    public void initFromRouteTable(RouteTable _table)
    {
        this.RouteId = _table.RouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.RouteId && ! this.Name)
        {
            this.Name = this.routeTable().Name;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventColorId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the color ID that is related to the inventory dimension ID.
    /// </summary>
    /// <returns>
    /// A string that holds the color ID.
    /// </returns>
    public display EcoResItemColorName inventColorId()
    {
        return this.inventDim().InventColorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the related <c>inventDim</c> record.
    /// </summary>
    /// <returns>
    /// A record from the <c>inventDim</c> table.
    /// </returns>
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the site ID that is related to the inventory dimension ID.
    /// </summary>
    /// <returns>
    /// A string that holds the site ID.
    /// </returns>
    public display InventSiteId inventSiteId()
    {
        return this.inventDim().InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSizeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the size ID that is related to the inventory dimension ID.
    /// </summary>
    /// <returns>
    /// A string that holds the size ID.
    /// </returns>
    public display EcoResItemSizeName inventSizeId()
    {
        return this.inventDim().InventSizeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _forUpdate = false)
    {
        return InventTable::find(this.ItemId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApproved</Name>
				<Source><![CDATA[
    public boolean isApproved()
    {
        return (this.Approved && this.Approver) || !isConfigurationkeyEnabled(configurationkeynum(RouteApprove));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the record can be edited.
    /// </summary>
    /// <returns>
    /// true if edit is allowed; otherwise, false.
    /// </returns>
    public boolean canEdit()
    {
        return !(this.orig().isApproved() && RouteParameters::find().BlockEditing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeTable</Name>
				<Source><![CDATA[
    public RouteTable routeTable()
    {
        return RouteTable::find(this.RouteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (!this.canEdit())
        {
            throw error("@SYS95158");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && FormDataUtil::getFormDataSource(this) && this.isApproved() && RouteParameters::find().BlockEditing)
        {
            ret = checkFailed("@SYS95160");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(
        fieldName _fieldName,
        int       _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(RouteVersion, ItemId):
                if (!this.inventTable().isStocked())
                {
                    ret = checkFailed("@SYS301853");
                }
                break;

            case fieldstr(RouteVersion, Active):
                if (this.Active && ! this.isApproved())
                {
                    ret = checkFailed("@SYS26246") && ret;
                }
                if (ret && this.Active && this.RouteId && !RouteTable::find(this.RouteId).isApproved())
                {
                    ret = checkFailed(strfmt("@SYS29134",this.RouteId));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(boolean _checkBlockEditing = true)
    {
        boolean         ret;
        InventTable     inventTable;
        RouteVersion    routeVersionActive;

        ret = super();

        setprefix(strfmt("@SYS26291",this.ItemId, date2StrUsr(this.FromDate, DateFlags::FormatAll), date2StrUsr(this.ToDate, DateFlags::FormatAll)));

        inventTable = InventTable::find(this.ItemId);
        if (! inventTable.inventItemType().canHaveRoutes())
        {
            ret = checkFailed(strfmt("@SYS19326",this.ItemId)) && ret;
        }

        if (ret && this.Active && !this.isApproved())
        {
            ret = checkFailed("@SYS26246");
        }

        if (ret && _checkBlockEditing && FormDataUtil::getFormDataSource(this) && this.isApproved() && RouteParameters::find().BlockEditing)
        {
            ret = checkFailed("@SYS95158");
        }

        if (ret && ((!this.FromDate || !this.ToDate) && RouteParameters::find().MandatoryDate))
        {
            ret = checkFailed("@SYS95151");
        }

        if (ret && this.ToDate  && (this.ToDate  < this.FromDate))
        {
            ret = checkFailed("@SYS22806") && ret;
        }

        if (ret && this.Active)
        {
            while select routeVersionActive
                index hint ItemIdx
                where    routeVersionActive.ItemId         == this.ItemId
                      && routeVersionActive.InventDimId    == this.InventDimId
                      && routeVersionActive.Active         == NoYes::Yes
                      && routeVersionActive.RecId          != this.RecId
            {
                ret = RouteVersion::checkDateOverlap(this,routeVersionActive);
                if (!ret)
                {
                    break;
                }
            }
        }

        if (ret
            && isConfigurationkeyEnabled(configurationkeynum(RouteApprove))
            && !this.routeTable().Approved
            && ((this.Approved && !this.orig().Approved) || (this.Active && !this.orig().Active))
            )
        {
            ret = checkFailed(strfmt("@SYS29134",this.RouteId));
        }

        if (ret && !this.inventSiteId())
        {
            ret = checkFailed(strfmt("@SYS84378",fieldpname(InventDim,InventSiteId)));
        }

        if ( ret && this.Approved && !this.Approver )//if it's approved, it needs an approver
        {
            ret = checkFailed(strfmt("@SYS32810", fieldpname(RouteTable, Approver)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDateOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a route version record overlaps another route version record.
    /// </summary>
    /// <param name="_curVersion">
    /// A new route version record to check.
    /// </param>
    /// <param name="_checkAgainstVersion">
    /// An existing route version record.
    /// </param>
    /// <returns>
    /// true if overlap exists; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Only one active route version must exist for a certain date, quantity, and inventory dimension set.
    /// </remarks>
    public static boolean checkDateOverlap(
        RouteVersion _curVersion,
        RouteVersion _checkAgainstVersion)
    {
        if (   _curVersion.FromQty     == _checkAgainstVersion.FromQty
            && _curVersion.InventDimId == _checkAgainstVersion.InventDimId)
        {
            if ((_curVersion.ToDate   >= _checkAgainstVersion.FromDate || !_curVersion.ToDate) &&
                (_curVersion.FromDate <= _checkAgainstVersion.ToDate   || !_checkAgainstVersion.ToDate))
            {
                return checkFailed(strfmt("@SYS67144",_checkAgainstVersion.Name));
            }

            if (   _checkAgainstVersion.ToDate   >= _curVersion.FromDate
                && _checkAgainstVersion.FromDate <= _curVersion.ToDate)
            {
                return checkFailed(strfmt("@SYS67144",_checkAgainstVersion.Name));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(
        ItemId      _itemId,
        RouteId     _routeId,
        boolean     _active,
        StartDate   _fromDate,
        EndDate     _toDate,
        FromQty     _fromQty
        )
    {
        if (   _itemId
            && !RouteVersion::exist(_itemId,_routeId,_active,_fromDate,_toDate, _fromQty))
        {
            return checkFailed(strfmt(RouteVersion::txtNotExist(),_itemId, date2StrUsr(_fromDate, DateFlags::FormatAll), date2StrUsr(_toDate, DateFlags::FormatAll), _fromQty));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistInventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a route version record exists for a specific item ID, route ID, and site ID.
    /// </summary>
    /// <param name="_itemId">
    /// A string that holds an item ID.
    /// </param>
    /// <param name="_routeId">
    /// A string that holds a route ID.
    /// </param>
    /// <param name="_siteId">
    /// A string that holds a site ID.
    /// </param>
    /// <returns>
    /// true if a route version record exists for the specified site; otherwise, false.
    /// </returns>
    public static boolean checkExistInventSiteId(
        ItemId          _itemId,
        RouteId         _routeId,
        InventSiteId    _siteId)
    {
        if (!RouteVersion::existInventSiteId(_itemId, _routeId, _siteId))
        {
            return checkFailed(strfmt("@SYS121441", _siteId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a route version record exists for a specific item ID, route ID, and site ID.
    /// </summary>
    /// <param name="_itemId">
    /// A string that holds an item ID.
    /// </param>
    /// <param name="_routeId">
    /// A string that holds a route ID.
    /// </param>
    /// <param name="_siteId">
    /// A string that holds a site ID.
    /// </param>
    /// <returns>
    /// true if a route version record exists for the specified site; otherwise, false.
    /// </returns>
    protected static boolean existInventSiteId(
        ItemId          _itemId,
        RouteId         _routeId,
        InventSiteId    _siteId)
    {
        RouteVersion    routeVersion;
        InventDim       inventDim;

        select firstonly RecId from routeVersion
            where  routeVersion.ItemId  == _itemId
                && routeVersion.RouteId == _routeId
            exists join inventDim
                where inventDim.InventDimId   == routeVersion.InventDimId
                    && inventDim.InventSiteId == _siteId;

        return routeVersion.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistRecId</Name>
				<Source><![CDATA[
    public static boolean checkExistRecId(recId _recId)
    {
        if (   _recId
            && !RouteVersion::existRecId(_recId))
        {
            return checkFailed(strfmt("@SYS27915",_recId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemRelation</Name>
				<Source><![CDATA[
    public static boolean checkItemRelation(
        RouteId     _routeId,
        ItemId      _itemId
        )
    {
        RouteVersion routeVersion;

        select firstonly RecId from routeVersion
            where routeVersion.RouteId      == _routeId &&
                  routeVersion.ItemId       == _itemId;

        if (! routeVersion.RecId)
        {
            return checkFailed(strfmt("@SYS69981",_itemId,_routeId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteVersions</Name>
				<Source><![CDATA[
    public static void deleteVersions(ItemId _itemId)
    {
        RouteVersion version;

        delete_from version
            where version.ItemId == _itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dictTable</Name>
				<Source><![CDATA[
    public static DictTable dictTable()
    {
        return new DictTable(tablenum(RouteVersion));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
         ItemId      _itemId,
         RouteId     _routeId,
         boolean     _active,
         StartDate   _fromDate,
         EndDate     _toDate,
         FromQty     _fromQty
        )
    {
        RouteVersion   routeVersion;

        routeVersion = RouteVersion::find(_itemId,_routeId,_active,_fromDate,_toDate, _fromQty);
        return routeVersion.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRecId</Name>
				<Source><![CDATA[
    public static boolean existRecId(recId _recId)
    {
        return _recId &&
               (select routeVersion
                    where routeVersion.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static RouteVersion find(
        ItemId      _itemId,
        RouteId     _routeId,
        boolean     _active,
        StartDate   _fromDate,
        EndDate     _toDate,
        FromQty     _fromQty,
        boolean     _forUpdate  = false
        )
    {
        RouteVersion      version;

        if (! _itemId || ! _routeId)
        {
            return version;
        }

        _fromQty =  abs(_fromQty);

        version.selectForUpdate(_forUpdate);

        select version
            order by ItemId, Active, FromQty desc
            where version.ItemId         == _itemId      &&
                  version.RouteId        == _routeId     &&
                  version.Active         <= _active      &&
                  version.FromQty        <= _fromQty     &&
                  version.FromDate       <= _fromDate    &&
                  (version.ToDate        >= _toDate      ||
                   ! version.ToDate
                  );

        return version;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an active route version record.
    /// </summary>
    /// <param name="_itemId">
    /// A string that contains an item ID.
    /// </param>
    /// <param name="_date">
    /// A date that is used to find a valid route version.
    /// </param>
    /// <param name="_fromQty">
    /// A quantity that is used to select the correct route version record.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// An <c>inventDim</c> record that contains the inventory dimensions to use to select the correct
    /// route version record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A route version record.
    /// </returns>
    public static RouteVersion findActive(
        ItemId       _itemId,
        StartDate    _date, //       = dateNull(), MUST BE SPECIFIEd
        FromQty      _fromQty,
        InventDim    _inventDimCriteria,
        boolean      _forUpdate  = false)
    {
        return RouteVersion::selectRouteVersion(_itemId,_date,_fromQty,_inventDimCriteria,true,false,true,false,true,'',_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static RouteVersion findRecId(
        recId       _recId,
        boolean     _forUpdate = false)
    {
        RouteVersion        version;

        if (_recId)
        {
            version.selectForUpdate(_forUpdate);

            select version
                index hint RecId
                where version.RecId      == _recId;
        }

        return version;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRouteVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a route version record.
    /// </summary>
    /// <param name="_routeId">
    /// A string that holds a route ID.
    /// </param>
    /// <param name="_itemId">
    /// A string that holds an item ID.
    /// </param>
    /// <param name="_inventDimId">
    /// A string that holds a inventory dimension ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A route version record.
    /// </returns>
    public static RouteVersion findRouteVersion(
        RouteId     _routeId,
        ItemId      _itemId,
        InventDimId _inventDimId,
        boolean     _forUpdate = false)
    {
        RouteVersion routeVersion;

        if (! _routeId)
        {
            return routeVersion;
        }

        routeVersion.selectForUpdate(_forUpdate);

        select firstonly routeVersion
        where routeVersion.RouteId      == _routeId
           && routeVersion.ItemId       == _itemId
           && routeVersion.InventDimId  == _inventDimId;

        return routeVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefRouteVersionRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a form for displaying the <c>RouteVersion</c> record in the context of the item associated.
    /// </summary>
    /// <param name="_routeVersionRecId">
    /// The Id of the version to open the form for.
    /// </param>
    /// <param name="_caller">
    /// The calling form.
    /// </param>
    public static void jumpRefRouteVersionRecId(RefRecId _routeVersionRecId, FormRun _caller)
    {
        RouteVersion                    routeVersion = RouteVersion::findRecId(_routeVersionRecId);
        InventTable                     inventTable = routeVersion.inventTable();
        Args                            args = new Args();

        args.record(inventTable);
        args.lookupRecord(routeVersion);
        args.caller(_caller);

        new MenuFunction(menuitemDisplayStr(RouteInventProdAction), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectRouteVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds route version record that matches the provided parameters.
    /// </summary>
    /// <param name="_itemId">
    /// A string that contains an item ID.
    /// </param>
    /// <param name="_date">
    /// A date used to find a valid route version.
    /// </param>
    /// <param name="_fromQty">
    /// A real that holds a quantity used to select the correct route version record.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// An <c>InventDim</c> record that contains inventory dimensions used to select the correct route
    /// version record.
    /// </param>
    /// <param name="_includeActive">
    /// A Boolean value that indicates whether active versions should be included in the search; optional.
    /// </param>
    /// <param name="_includeInactive">
    /// A Boolean value that indicates whether inactive versions should be included in the search; optional.
    /// </param>
    /// <param name="_includeApproved">
    /// A Boolean value that indicates whether approved versions should be included in the search; optional.
    /// </param>
    /// <param name="_includeUnapproved">
    /// A Boolean value that indicates whether unapproved versions should be included in the search;
    /// optional.
    /// </param>
    /// <param name="_checkDate">
    /// A Boolean value that indicates whether the date range must be checked.
    /// </param>
    /// <param name="_routeId">
    /// The route ID to find; optional.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the selected record or records should be selected for update.
    /// </param>
    /// <param name="_onlyIncludeSelected">
    /// A Boolean value indicating that only selected versions should be included in the search; optional.
    /// </param>
    /// <returns>
    /// A route version record.
    /// </returns>
    public static RouteVersion selectRouteVersion(
        ItemId       _itemId,
        StartDate    _date,
        FromQty      _fromQty,
        InventDim    _inventDimCriteria,
        boolean      _includeActive     = true,
        boolean      _includeInactive   = false,
        boolean      _includeApproved   = true,
        boolean      _includeUnapproved = false,
        boolean      _checkDate         = true,
        RouteId      _routeId           = '',
        boolean      _forUpdate         = false,
        boolean      _onlyIncludeSelected = false)
    {
        RouteVersion    routeVersion;
        InventDim       inventDim;
        InventDim       inventDimCriteria;
        boolean         includeUnapproved = _includeUnapproved || !RouteTable::isRouteApproveEnabled();

        inventDimCriteria = _inventDimCriteria.data();
        inventDimCriteria.clearNotActiveDim(InventDimGroupSetup::newItemId(_itemId));

        if (! _itemId)
        {
            return routeVersion;
        }

        _fromQty =  abs(_fromQty);

        routeVersion.selectForUpdate(_forUpdate);

        select firstonly routeVersion
            order by inventDim.ConfigId desc,
                     inventDim.InventSizeId desc,
                     inventDim.InventColorId desc,
                     inventDim.InventStyleId desc,
                     inventDim.InventVersionId desc,
                     inventDim.InventSiteId desc,
                     inventDim.InventDimension1 desc,
                     inventDim.InventDimension2 desc,
                     inventDim.InventDimension3 desc,
                     inventDim.InventDimension4 desc,
                     inventDim.InventDimension5 desc,
                     inventDim.InventDimension6 desc,
                     inventDim.InventDimension7 desc,
                     inventDim.InventDimension8 desc,
                     inventDim.InventDimension9 desc,
                     inventDim.InventDimension10 desc,
                     inventDim.InventDimension11 desc,
                     inventDim.InventDimension12 desc,
                     routeVersion.FromQty desc
            where routeVersion.ItemId     == _itemId
               && (routeVersion.RouteId   == _routeId   || !_routeId)
               && ((routeVersion.Construction == NoYes::Yes && _onlyIncludeSelected) ||
                   (!_onlyIncludeSelected
                    && (  ((routeVersion.Active   == NoYes::Yes && _includeActive)   ||
                            (routeVersion.Active   == NoYes::No  && _includeInactive))
                        && ((routeVersion.Approved == NoYes::Yes && _includeApproved) ||
                            (routeVersion.Approved == NoYes::No  && includeUnapproved))
                        )
                    )
                  )
               && routeVersion.FromQty    <= _fromQty
               && (routeVersion.FromDate  <= _date      || !_checkDate)
               && (routeVersion.ToDate    >= _date      || !_checkDate || !routeVersion.ToDate)
            join TableId from inventDim
                where inventDim.InventDimId     == routeVersion.InventDimId
                   && (inventDim.InventSiteId   == inventDimCriteria.InventSiteId   || inventDim.InventSiteId   == '' || inventDimCriteria.InventSiteId == '')
                   && (inventDim.ConfigId       == inventDimCriteria.ConfigId       || inventDim.ConfigId       == '' || inventDimCriteria.ConfigId == '')
                   && (inventDim.InventSizeId   == inventDimCriteria.InventSizeId   || inventDim.InventSizeId   == '' || inventDimCriteria.InventSizeId == '')
                   && (inventDim.InventColorId  == inventDimCriteria.InventColorId  || inventDim.InventColorId  == '' || inventDimCriteria.InventColorId == '')
                   && (inventDim.InventStyleId  == inventDimCriteria.InventStyleId  || inventDim.InventStyleId  == '' || inventDimCriteria.InventStyleId == '')
                   && (inventDim.InventVersionId  == inventDimCriteria.InventVersionId  || inventDim.InventVersionId  == '' || inventDimCriteria.InventVersionId == '')
                   && (inventDim.InventDimension1  == inventDimCriteria.InventDimension1  || inventDim.InventDimension1  == '' || inventDimCriteria.InventDimension1  == '')
                   && (inventDim.InventDimension2  == inventDimCriteria.InventDimension2  || inventDim.InventDimension2  == '' || inventDimCriteria.InventDimension2  == '')
                   && (inventDim.InventDimension3  == inventDimCriteria.InventDimension3  || inventDim.InventDimension3  == '' || inventDimCriteria.InventDimension3  == '')
                   && (inventDim.InventDimension4  == inventDimCriteria.InventDimension4  || inventDim.InventDimension4  == '' || inventDimCriteria.InventDimension4  == '')
                   && (inventDim.InventDimension5  == inventDimCriteria.InventDimension5  || inventDim.InventDimension5  == '' || inventDimCriteria.InventDimension5  == '')
                   && (inventDim.InventDimension6  == inventDimCriteria.InventDimension6  || inventDim.InventDimension6  == '' || inventDimCriteria.InventDimension6  == '')
                   && (inventDim.InventDimension7  == inventDimCriteria.InventDimension7  || inventDim.InventDimension7  == '' || inventDimCriteria.InventDimension7  == '')
                   && (inventDim.InventDimension8  == inventDimCriteria.InventDimension8  || inventDim.InventDimension8  == '' || inventDimCriteria.InventDimension8  == '')
                   && (inventDim.InventDimension9  == inventDimCriteria.InventDimension9  || inventDim.InventDimension9  == utcDateTimeNull() || inventDimCriteria.InventDimension9  == utcDateTimeNull())
                   && (inventDim.InventDimension10 == inventDimCriteria.InventDimension10 || inventDim.InventDimension10 == 0  || inventDimCriteria.InventDimension10 == 0)
                   && (inventDim.InventDimension11 == inventDimCriteria.InventDimension11 || inventDim.InventDimension11 == ''  || inventDimCriteria.InventDimension11 == '')
                   && (inventDim.InventDimension12 == inventDimCriteria.InventDimension12 || inventDim.InventDimension12 == ''  || inventDimCriteria.InventDimension12 == '');

        return routeVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS26280";
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectActiveRouteVersions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the active route versions for the specified in the <paramref
    /// name="_inventDimCriteria" /> value.
    /// </summary>
    /// <param name="_itemId">
    /// The finished good item ID for which to get the versions.
    /// </param>
    /// <param name="_date">
    /// The date as of which to get the versions.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The active inventory dimensions for the item.
    /// </param>
    /// <returns>
    /// A <c>RouteVersion</c> buffer setup to read through all the route version records that match the
    /// planning item and dimension criteria.
    /// </returns>
    public static RouteVersion selectActiveRouteVersions(ItemId     _itemId,
                                                      StartDate  _date,
                                                      InventDim  _inventDimCriteria)
    {
        RouteVersion    routeVersion;
        InventDim       inventDim;
        InventDim       inventDimCriteria;
        
        if (! _itemId)
        {
            return routeVersion;
        }

        inventDimCriteria = _inventDimCriteria.data();
        inventDimCriteria.clearNotActiveDim(InventDimGroupSetup::newItemId(_itemId));

        select routeVersion
            where routeVersion.ItemId == _itemId
                && routeVersion.Active == NoYes::Yes
                && routeVersion.Approved == NoYes::Yes
                && routeVersion.FromDate <= _date
                && (routeVersion.ToDate >= _date || !routeVersion.ToDate)
        join TableId from inventDim
            where inventDim.InventDimId        == routeVersion.InventDimId
                && (inventDim.InventSiteId      == inventDimCriteria.InventSiteId      || inventDim.InventSiteId      == '' || inventDimCriteria.InventSiteId      == '')
                && (inventDim.ConfigId          == inventDimCriteria.ConfigId          || inventDim.ConfigId          == '' || inventDimCriteria.ConfigId          == '')
                && (inventDim.InventSizeId      == inventDimCriteria.InventSizeId      || inventDim.InventSizeId      == '' || inventDimCriteria.InventSizeId      == '')
                && (inventDim.InventColorId     == inventDimCriteria.InventColorId     || inventDim.InventColorId     == '' || inventDimCriteria.InventColorId     == '')
                && (inventDim.InventStyleId     == inventDimCriteria.InventStyleId     || inventDim.InventStyleId     == '' || inventDimCriteria.InventStyleId     == '')
                && (inventDim.InventVersionId   == inventDimCriteria.InventVersionId   || inventDim.InventVersionId   == '' || inventDimCriteria.InventVersionId   == '')
                && (inventDim.InventDimension1  == inventDimCriteria.InventDimension1  || inventDim.InventDimension1  == '' || inventDimCriteria.InventDimension1  == '')
                && (inventDim.InventDimension2  == inventDimCriteria.InventDimension2  || inventDim.InventDimension2  == '' || inventDimCriteria.InventDimension2  == '')
                && (inventDim.InventDimension3  == inventDimCriteria.InventDimension3  || inventDim.InventDimension3  == '' || inventDimCriteria.InventDimension3  == '')
                && (inventDim.InventDimension4  == inventDimCriteria.InventDimension4  || inventDim.InventDimension4  == '' || inventDimCriteria.InventDimension4  == '')
                && (inventDim.InventDimension5  == inventDimCriteria.InventDimension5  || inventDim.InventDimension5  == '' || inventDimCriteria.InventDimension5  == '')
                && (inventDim.InventDimension6  == inventDimCriteria.InventDimension6  || inventDim.InventDimension6  == '' || inventDimCriteria.InventDimension6  == '')
                && (inventDim.InventDimension7  == inventDimCriteria.InventDimension7  || inventDim.InventDimension7  == '' || inventDimCriteria.InventDimension7  == '')
                && (inventDim.InventDimension8  == inventDimCriteria.InventDimension8  || inventDim.InventDimension8  == '' || inventDimCriteria.InventDimension8  == '')
                && (inventDim.InventDimension9  == inventDimCriteria.InventDimension9  || inventDim.InventDimension9  == utcDateTimeNull() || inventDimCriteria.InventDimension9  == utcDateTimeNull())
                && (inventDim.InventDimension10 == inventDimCriteria.InventDimension10 || inventDim.InventDimension10 == 0  || inventDimCriteria.InventDimension10 == 0)
                && (inventDim.InventDimension11 == inventDimCriteria.InventDimension11 || inventDim.InventDimension11 == '' || inventDimCriteria.InventDimension11 == '')
                && (inventDim.InventDimension12 == inventDimCriteria.InventDimension12 || inventDim.InventDimension12 == '' || inventDimCriteria.InventDimension12 == '');

        return routeVersion;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProdRouting</ConfigurationKey>
	<DeveloperDocumentation>@SYS124210</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>RouteTable</FormRef>
	<Label>@SYS22809</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ItemIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Approval</Name>
			<Label>@SYS2453</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Construction</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteVersionActive</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Approved</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>RouteApprove</ConfigurationKey>
			<ExtendedDataType>RouteVersionApproved</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Approver</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>RouteApprove</ConfigurationKey>
			<ExtendedDataType>BOMRouteApprover</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Construction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMRouteVersionConstruction</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FromQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProductFromQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdProduction</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RouteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RouteId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemFromToIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkerApprover</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RouteVersion</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Approver</Name>
					<Field>Approver</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteId</Name>
					<Field>RouteId</Field>
					<RelatedField>RouteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>