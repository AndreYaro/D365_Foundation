<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCTableConstraintDefinition</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class PCTableConstraintDefinition extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        // overwritten in sub types
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the type of a table constraint.
    /// </summary>
    /// <returns>
    /// A table constraint type.
    /// </returns>
    display PCTableConstraintType displayType()
    {
        if (this is PCDatabaseRelationConstraintDefinition)
        {
            return PCTableConstraintType::System;
        }
        else
        {
            return PCTableConstraintType::UserDefined;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasColumns</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether columns have been defined for the table constraint.
    /// </summary>
    /// <returns>
    ///    <c>NoYes::Yes</c> if columns have been defined; otherwise, <c>NoYes::No</c>.
    /// </returns>
    public NoYes hasColumns()
    {
        PCTableConstraintColumnDefinition   column;
        NoYes                               hasColumns = NoYes::No;

        select firstonly RecId from column
            where column.TableConstraintDefinition == this.RecId;

        if (column.RecId != 0)
        {
            hasColumns = NoYes::Yes;
        }

        return hasColumns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a record in the <c>PCTableConstraintDefinition</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if a record with the provided ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCTableConstraintDefinition::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCTableConstraintDefinition</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCTableConstraintDefinition</c> table; otherwise, an empty buffer.
    /// </returns>
    public static PCTableConstraintDefinition find(RefRecId _recId, boolean _forupdate = false)
    {
        PCTableConstraintDefinition record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>PCTableConstraintDefinition</c> record with the specified name.
    /// </summary>
    /// <param name="_name">
    ///    The name of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCTableConstraintDefinition</c> table; otherwise, an empty buffer.
    /// </returns>
    public static PCTableConstraintDefinition findByName(PCTableConstraintName _name, boolean _forupdate = false)
    {
        PCTableConstraintDefinition record;

        if (_name == '')
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.Name == _name;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTableConstraintName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a lookup that retrieves all the table constraint definition names.
    /// </summary>
    /// <param name="_lookupCtrl">
    ///    An instance of the <c>FormStringControl</c> class.
    /// </param>
    /// <param name="_doLookup">
    ///    A Boolean value that indicates whether to perform the lookup.
    /// </param>
    /// <returns>
    ///    An instance of the <c>SysTableLookup</c> class.
    /// </returns>
    static SysTableLookup lookupTableConstraintName(
        FormStringControl       _lookupCtrl,
        boolean                 _doLookup = true
        )
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(PCTableConstraintDefinition), _lookupCtrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(PCTableConstraintDefinition));

        sysTableLookup.addLookupfield(fieldNum(PCTableConstraintDefinition, Name));

        sysTableLookup.parmQuery(query);

        if (_doLookup)
        {
            sysTableLookup.performFormLookup();
        }

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nameExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a record in the <c>PCTableConstraintDefinition</c> table with the specified name
    ///    exists.
    /// </summary>
    /// <param name="_name">
    ///    The name of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if a record with the specified name exists; otherwise, false.
    /// </returns>
    public static boolean nameExist(PCTableConstraintName _name)
    {
        return (PCTableConstraintDefinition::findByName(_name).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS325888</DeveloperDocumentation>
	<Label>@SYS153082</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<Abstract>Yes</Abstract>
	<CacheLookup>Found</CacheLookup>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PCTableConstraint</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>PCTableConstraint</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PCTableConstraintColumnDefinition</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PCTableConstraintColumnDefinition</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TableConstraintType</Name>
			<Label>@SYS81228</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCTableConstraintName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ConfigurationKey>PC</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>