<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgOvertimeSlize</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgOvertimeSlize extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>jobDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the job description that is associated with this <c>JmgOvertimeSlize</c> record.
    /// </summary>
    /// <returns>
    /// The job description that is associated with this <c>JmgOvertimeSlize</c> record.
    /// </returns>
    public display JmgDescription jobDescription()
    {
        JmgTermJob  termjob = JmgTermJob::construct(this.JobId);

        return termjob.jobDescription();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the job reference that is associated with this <c>JmgOvertimeSlize</c> record.
    /// </summary>
    /// <returns>
    /// The job reference that is associated with this <c>JmgOvertimeSlize</c> record.
    /// </returns>
    public display JmgJobRef jobRef()
    {
        JmgJobRef jmgJobRef;
        jmgJobRef = ProdRouteJob::findJobId(this.JobId).ProdId;

        if (! jmgJobRef)
            jmgJobRef = JmgIpcActivity::findJobId(this.JobId).Category;

        return jmgJobRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>time</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the time that is associated with this <c>JmgOvertimeSlize</c> record.
    /// </summary>
    /// <returns>
    /// The time that is associated with this <c>JmgOvertimeSlize</c> record formatted as a string.
    /// </returns>
    public display JmgLabelSeconds time()
    {
        return JmgProfileSeconds::formattedSeconds(this.Seconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dropZeroJmgStampJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>JmgOvertimeSlize</c> records from the database, if no
    /// overtime slizing has been made for the worker on the profile date, specified in the
    /// <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <param name="_jmgStampJournalTable">
    /// The <c>JmgStampJournalRecord</c> to which searched <c>JmgOvertimeSlize</c> records must
    /// be associated.
    /// </param>
    static void dropZeroJmgStampJournalTable(JmgStampJournalTable _jmgStampJournalTable)
    {
        JmgOvertimeSlize        jmgOvertimeSlize;

        ttsbegin;

        if (!(select firstonly RecId from jmgOvertimeSlize
                    where jmgOvertimeSlize.Worker           == _jmgStampJournalTable.Worker &&
                          jmgOvertimeSlize.ProfileDate      == _jmgStampJournalTable.ProfileDate &&
                          jmgOvertimeSlize.Percent          != 0).RecId)
        {
            delete_from jmgOvertimeSlize
                    where jmgOvertimeSlize.Worker           == _jmgStampJournalTable.Worker &&
                          jmgOvertimeSlize.ProfileDate      == _jmgStampJournalTable.ProfileDate;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromJmgStampJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>JmgOvertimeSlize</c> record by using values from a <c>JmgStampJournalTable</c>
    /// record.
    /// </summary>
    /// <param name="jmgStampJournalTable">
    /// The <c>JmgStampJournalTable</c> record that is used to initialize a <c>JmgOvertimeSlize</c> record.
    /// </param>
    static void initFromJmgStampJournalTable(JmgStampJournalTable jmgStampJournalTable)
    {
        JmgOvertimeSlize        jmgOvertimeSlize;
        JmgStampJournalTrans    jmgStampJournalTrans;

        ttsbegin;

        while select forupdate jmgOvertimeSlize
            where jmgOvertimeSlize.Worker                       == jmgStampJournalTable.Worker  &&
                  jmgOvertimeSlize.ProfileDate                  == jmgStampJournalTable.ProfileDate
        {
            select sum(Seconds) from jmgStampJournalTrans
                    where jmgStampJournalTrans.Worker           == jmgOvertimeSlize.Worker      &&
                          jmgStampJournalTrans.ProfileDate      == jmgOvertimeSlize.ProfileDate &&
                          jmgStampJournalTrans.JobId            == jmgOvertimeSlize.JobId       &&
                          jmgStampJournalTrans.StampType        == JmgStampTypeEnum::Work       &&
                          jmgStampJournalTrans.JourRegType      >= JmgJourRegTypeEnum::IndActivity  &&
                          jmgStampJournalTrans.JourRegType      <= JmgJourRegTypeEnum::PrjProject;

            if (! jmgStampJournalTrans)
            {
                jmgOvertimeSlize.delete();
            }
            else
            {
                jmgOvertimeSlize.Seconds = jmgStampJournalTrans.Seconds;
                jmgOvertimeSlize.update();
            }
        }

        while select sum(Seconds), JobId from jmgStampJournalTrans
            group by JobId
            where jmgStampJournalTrans.Worker           == jmgStampJournalTable.Worker      &&
                  jmgStampJournalTrans.ProfileDate      == jmgStampJournalTable.ProfileDate &&
                  jmgStampJournalTrans.StampType        == JmgStampTypeEnum::Work           &&
                  jmgStampJournalTrans.JourRegType      >= JmgJourRegTypeEnum::IndActivity  &&
                  jmgStampJournalTrans.JourRegType      <= JmgJourRegTypeEnum::PrjProject

        {
            if (! (select RecId from jmgOvertimeSlize
                       where jmgOvertimeSlize.Worker           == jmgStampJournalTable.Worker      &&
                             jmgOvertimeSlize.ProfileDate      == jmgStampJournalTable.ProfileDate &&
                             jmgOvertimeSlize.JobId            == jmgStampJournalTrans.JobId).RecId)
            {
                jmgOvertimeSlize.Worker         = jmgStampJournalTable.Worker;
                jmgOvertimeSlize.ProfileDate    = jmgStampJournalTable.ProfileDate;
                jmgOvertimeSlize.JobId          = jmgStampJournalTrans.JobId;
                jmgOvertimeSlize.Percent        = 0;
                jmgOvertimeSlize.Seconds        = jmgStampJournalTrans.Seconds;
                jmgOvertimeSlize.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>JmgPayroll</ConfigurationKey>
	<DeveloperDocumentation>@SYS317260</DeveloperDocumentation>
	<Label>@SYS38579</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Worker</TitleField1>
	<TitleField2>ProfileDate</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>EmplDateJobIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>EmplDateJobIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Properties</Name>
			<Label>@SYS10344</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JobId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JobId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgJobId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProfileDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Seconds</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EmplDateJobIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProfileDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JobId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_JmgOvertimeSlize</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>StampJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgStampJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DaysTotal</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>OvertimeAllocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProfileDate</Name>
					<Field>ProfileDate</Field>
					<RelatedField>ProfileDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>Worker</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>