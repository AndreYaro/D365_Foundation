<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanDataSource</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqDemPlanDataSource extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a data source record by type and description.
    /// </summary>
    /// <param name="_type">
    ///     The type of data source.
    /// </param>
    /// <param name="_description">
    ///     The description of the data source.
    /// </param>
    /// <returns>
    ///     The record corresponding to the specified search criteria,
    ///     or an empty table buffer, if nothing was found.
    /// </returns>
    public static ReqDemPlanDataSource find(ReqDemPlanDataSourceType _type, ReqDemPlanDataSourceDescription _description)
    {
        ReqDemPlanDataSource dataSource;

        select firstonly dataSource
            where dataSource.SourceType == _type
               && dataSource.SourceDescription == _description;

        return dataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a data source record by RecId.
    /// </summary>
    /// <param name="_recId">
    ///     The RecId of the data source.
    /// </param>
    /// <returns>
    ///     The record corresponding to the specified search criteria,
    ///     or an empty table buffer, if nothing was found.
    /// </returns>
    public static ReqDemPlanDataSource findByRecId(ReqDemPlanDataSourceRecId _recId)
    {
        ReqDemPlanDataSource dataSource;

        select firstonly dataSource
            where dataSource.RecId == _recId;

        return dataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Registers a data source.
    /// </summary>
    /// <param name="_type">
    ///     The type of the data source.
    /// </param>
    /// <param name="_description">
    ///     The description of the data source.
    /// </param>
    /// <param name="_origin">
    ///     The origin of the data source.
    /// </param>
    /// <param name="_throwOnFailure">
    ///     A boolan value indicating whether to throw an exception in case the data source cannot be registered;
    ///     optional, default value is <c>false</c>.
    /// </param>
    /// <returns>
    ///     The RecId of the registered data source, or 0 if the data source could not be registered.
    /// </returns>
    private static ReqDemPlanDataSourceRecId registerDataSource(
        ReqDemPlanDataSourceType        _type,
        ReqDemPlanDataSourceDescription _description,
        ReqDemPlanDataSourceOrigin      _origin,
        boolean                         _throwOnFailure = false)
    {
        ReqDemPlanDataSource            dataSource;
        ReqDemPlanDataSourceRecId       dataSourceRecId;
        str                             failure = '';

        dataSource = ReqDemPlanDataSource::find(_type, _description);
        if (dataSource.RecId != 0)
        {
            if (dataSource.SourceOrigin != _origin)
            {
                failure = strFmt("@DMP1464", _type, _description);
            }
        }
        else
        {
            dataSource.SourceType = _type;
            dataSource.SourceDescription = _description;
            dataSource.SourceOrigin = _origin;
            dataSource.insert();
        }

        if (failure != '')
        {
            dataSourceRecId = 0;

            if (_throwOnFailure)
            {
                throw error(failure);
            }
            else
            {
                error(failure);
            }
        }
        else
        {
            dataSourceRecId = dataSource.RecId;
        }

        return dataSourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerDataSourceForInstance</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Registers a data source.
    /// </summary>
    /// <param name="_instance">
    ///     The instance of the data source class.
    /// </param>
    /// <returns>
    ///     The RecId of the registered data source, or 0 if the data source could not be registered.
    /// </returns>
    public static ReqDemPlanDataSourceRecId registerDataSourceForInstance(ReqDemPlanDescribableInterface _instance)
    {
        ReqDemPlanExtensibilityHelper       extensibilityHelper = ReqDemPlanExtensibilityHelper::construct();
        ClassId                             classId;
        ReqDemPlanDataSourceType            dataSourceType;

        classId = classIdGet(_instance);
        // ReqDemPlanDataSourceType is not automaticaly detected after Ax6.3, so it is always set to External
        return ReqDemPlanDataSource::registerDataSource(ReqDemPlanDataSourceType::External, _instance.description(), classId2Name(classId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerExternalDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Registers an external data source.
    /// </summary>
    /// <param name="_description">
    ///     The description of the data source.
    /// </param>
    /// <returns>
    ///     The RecId of the registered data source.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     Thrown if the data source could not be registered.
    /// </exception>
    public static ReqDemPlanDataSourceRecId registerExternalDataSource(ReqDemPlanDataSourceDescription _description)
    {
        return ReqDemPlanDataSource::registerDataSource(ReqDemPlanDataSourceType::External, _description, '', true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ReqDemandPlanning</ConfigurationKey>
	<DeveloperDocumentation>@DMP1452</DeveloperDocumentation>
	<Label>@DMP1097</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>SourceType</TitleField1>
	<TitleField2>SourceDescription</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>SourceTypeDescrIdx</ClusteredIndex>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>SourceTypeDescrIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceOrigin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceDescription</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDemPlanDataSourceDescription</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDemPlanDataSourceOrigin</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SourceType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>ReqDemPlanDataSourceType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SourceTypeDescrIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceDescription</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>