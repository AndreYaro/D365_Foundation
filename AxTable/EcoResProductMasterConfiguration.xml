<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductMasterConfiguration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductMasterConfiguration extends EcoResProductMasterDimensionValue
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasDimensionValueForProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any dimension value record was created for a specified product master and
    /// dimension attribute.
    /// </summary>
    /// <param name="_productMaster">
    /// The <c>EcoResProductRecId</c> reference to the product master.
    /// </param>
    /// <returns>
    /// true if a product dimension table value exists for the specified product; otherwise, false.
    /// </returns>
    public boolean hasDimensionValueForProductMaster(EcoResProductRecId _productMaster)
    {
        EcoResProductMasterConfiguration    ecoResProductMasterConfiguration;

        select firstonly RecId from ecoResProductMasterConfiguration
            where ecoResProductMasterConfiguration.ConfigProductMaster == _productMaster;

        if (ecoResProductMasterConfiguration.RecId)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsBegin;

        super();

        this.createVariantsFromDimensionValue(this.ConfigProductMaster, this.ConfigProductDimensionAttribute, this.Configuration);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProductMasterDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the dimension value record that was created for a specified product master and
    /// dimension attribute value.
    /// </summary>
    /// <param name="_productMaster">
    /// The <c>EcoResProductRecId</c> reference to the product master.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    An ID of the <c>EcoResProductDimensionAttribute</c> table buffer.
    /// </param>
    /// <param name="_configurationRecId">
    /// The reference to the product dimension value.
    /// </param>
    /// <returns>
    /// The product dimension table value for the specified product and dimension value.
    /// </returns>
    public EcoResProductMasterDimensionValueId lookupProductMasterDimensionValue(
        EcoResProductRecId  _productMaster,
        RefRecId            _productDimensionAttribute,
        RefRecId            _configurationRecId )
    {
        RefRecId ret;

        if (_productMaster && _productDimensionAttribute && _configurationRecId)
        {
            ret = (select firstonly ecoResProductMasterConfiguration
                    where ecoResProductMasterConfiguration.ConfigProductMaster               == _productMaster
                       && ecoResProductMasterConfiguration.ConfigProductDimensionAttribute   == _productDimensionAttribute
                       && ecoResProductMasterConfiguration.Configuration                     == _configurationRecId
                    ).RecId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionValueAndRelations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the product dimension value and relation fields on the buffer.
    /// </summary>
    /// <param name="_productMaster">
    ///    A reference to the product master.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    An ID of a <c>EcoResProductDimensionAttribute</c> table buffer.
    /// </param>
    /// <param name="_productDimensionValue">
    ///    The reference to the product dimension value table buffer.
    /// </param>
    public void setDimensionValueAndRelations(
        EcoResProductRecId  _productMaster,
        RefRecId            _productDimensionAttribute,
        RefRecId            _productDimensionValue)
    {
        this.Configuration                      = _productDimensionValue;
        this.ConfigProductMaster                = _productMaster;
        this.ConfigProductDimensionAttribute    = _productDimensionAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        EcoResDistinctProductVariant        ecoResDistinctProductVariant;
        EcoResProductVariantConfiguration   ecoResProductVariantConfiguration;
        boolean                             ret;

        ret = super();

        select firstonly ecoResProductVariantConfiguration
            where   ecoResProductVariantConfiguration.Configuration                 == this.Configuration
                &&  ecoResProductVariantConfiguration.ProductDimensionAttribute     == this.ConfigProductDimensionAttribute
            exists join ecoResDistinctProductVariant
                where   ecoResDistinctProductVariant.RecId                          == ecoResProductVariantConfiguration.DistinctProductVariant
                    &&  ecoResDistinctProductVariant.ProductMaster                  == this.ConfigProductMaster;

        if (ecoResProductVariantConfiguration.RecId != 0)
        {
            ret = checkFailed(strFmt("@SYS128564", tablePName(EcoResProductMasterConfiguration),
                                                   tablePName(EcoResProductVariantConfiguration)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimensionValueAndRelations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the product dimension value and relation fields on the buffer.
    /// </summary>
    /// <param name="_productMaster">
    /// A reference to the product master.
    /// </param>
    /// <param name="_productDimensionAttribute">
    /// An ID of a <c>EcoResProductDimensionAttribute</c> table buffer.
    /// </param>
    /// <param name="_productDimensionValue">
    /// The reference to the table buffer of the product dimension value.
    /// </param>
    /// <param name="_throwError">
    /// A Boolean value that indicates whether to throw an exception if the dimension has been assigned to
    /// the product master.
    /// </param>
    /// <returns>
    /// true if the product dimension table value exists for the specified product; otherwise, false.
    /// </returns>
    public boolean validateDimensionValueAndRelations(
        EcoResProductRecId  _productMaster,
        RefRecId            _productDimensionAttribute,
        RefRecId            _productDimensionValue,
        boolean             _throwError = false)
    {
        if (EcoResProductMasterConfiguration::existByProductConfiguration(
            _productMaster,
            _productDimensionAttribute,
            _productDimensionValue))
        {
            if (_throwError)
            {
                throw error(EcoResProductMasterDimensionValue::txtNotExist(
                    EcoResConfiguration::label(),
                    EcoResConfiguration::find(_productDimensionValue).Name,
                    EcoResProductIdentifier::findByProduct(_productMaster).ProductNumber));
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the product dimension value exists.
    /// </summary>
    /// <param name="_productMaster">
    ///    The <c>EcoResProductRecId</c> reference to the product master.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    An ID of the <c>EcoResProductDimensionAttribute</c> table buffer.
    /// </param>
    /// <param name="_productDimensionValue">
    ///    The reference to the product dimension value table buffer.
    /// </param>
    /// <param name="_throwError">
    ///    A Boolean value that indicates whether an exception is thrown, in case the dimension does not exists.
    /// </param>
    /// <returns>
    ///    true if the product dimension value exists for a specified product; otherwise false.
    /// </returns>
    public boolean checkExistDimensionValue(
        EcoResProductRecId  _productMaster,
        RefRecId            _productDimensionAttribute,
        RefRecId            _productDimensionValue,
        boolean             _throwError = false)
    {
        return EcoResProductMasterConfiguration::checkExistByProductConfiguration(
                        _productMaster,
                        _productDimensionAttribute,
                        _productDimensionValue,
                        _throwError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the new field value before writing to the database.
    /// </summary>
    /// <param name="_fieldName">
    /// A string that specifies the name of the field to be validated.
    /// </param>
    /// <param name="_arrayIndex">
    /// An integer that specifies the index of the field to be validated; optional
    /// </param>
    /// <returns>
    /// true if the new value of the field is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// When the validated field is a container unit, the validation fails when an open inventory
    /// transaction exists or similar container combination has already been defined in the system.
    /// </remarks>
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (_fieldName == fieldstr(EcoResProductMasterConfiguration, PmfConfigUnitId))
        {
            if (EcoResProductMasterConfiguration::checkOpenInventTransForConfigUnit(
                this.ConfigProductMaster,
                this.orig().PmfConfigUnitId))
            {
                ret = checkFailed("@PDS2016");
            }
            else if (EcoResProductMasterConfiguration::existWithSameConfigUnit(
                this.ConfigProductMaster,
                this.PmfConfigUnitId,
                this.Configuration) && (this.orig().PmfConfigUnitId != this.PmfConfigUnitId))
            {
                ret = checkFailed("@PDS2017");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean     ret;

        ret = super();

        ret = ret && this.validateActiveProductDimension(this.ConfigProductMaster, fieldNum(InventDim, ConfigId));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistByProductConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the <c>EcoResProductMasterConfiguration</c> table.
    /// </summary>
    /// <param name="_productMaster">
    ///    The ID of the <c>EcoResProductMaster</c> record to use as a filter.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    The ID of the <c>EcoResProductDimensionAttribute</c> record to use as a filter.
    /// </param>
    /// <param name="_configurationRecId">
    ///    The ID of the <c>EcoResConfiguration</c> record to use as a filter.
    /// </param>
    /// <param name="_throwException">
    ///    A Boolean value that indicates whether a message is displayed or an exception is thrown.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the <paramref name="_throwException" /> parameter is true, an exception is thrown; if it is
    ///    false, a message is displayed.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The <paramref name="_throwException" /> parameter is true and the record does not exist.
    /// </exception>
    static boolean checkExistByProductConfiguration(
        RefRecId                    _productMaster,
        RefRecId                    _productDimensionAttribute,
        EcoResConfigurationRecId    _configurationRecId,
        boolean                     _throwException = false)
    {
        EcoResProduct           ecoResProduct;
        EcoResConfiguration     ecoResConfiguration;
        str                     message;

        if (_productMaster
            && _productDimensionAttribute
            && _configurationRecId
            && !EcoResProductMasterConfiguration::existByProductConfiguration(_productMaster, _productDimensionAttribute, _configurationRecId))
        {
            ecoResProduct = EcoResProduct::find(_productMaster);
            ecoResConfiguration = EcoResConfiguration::find(_configurationRecId);
            message = EcoResProductMasterConfiguration::txtNotExist(ecoResConfiguration.Name, ecoResProduct.productNumber());
            if (_throwException)
            {
                throw error(message);
            }
            return checkFailed(message);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOpenInventTransForConfigUnit</Name>
				<Source><![CDATA[
    private static boolean checkOpenInventTransForConfigUnit(
        EcoResProductMasterRecId    _productMasterRecId,
        PmfConfigUnitId             _configUnitId
        )
    {
        InventTrans      inventTrans;
        InventDim        inventDim;
        InventTable      inventTable;
        WHSInventReserve inventReserve;

        select firstonly crosscompany RecId from inventTrans
            where   inventTrans.StatusReceipt   != StatusReceipt::Purchased
                &&  inventTrans.StatusIssue     != StatusIssue::Sold
            exists join inventDim
                where   inventDim.InventDimId   == inventTrans.InventDimId
                    &&  inventDim.configId      == _configUnitId
            exists join inventTable
                where   inventTable.ItemId      == inventTrans.ItemId
                    &&  inventTable.Product     == _productMasterRecId;

        if (!inventTrans.RecId && WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled())
        {
            select firstonly crosscompany RecId from inventReserve
                where inventReserve.ReservPhysical != 0
                exists join inventDim
                    where   inventDim.InventDimId   == inventReserve.InventDimId
                        &&  inventDim.configId      == _configUnitId
                exists join inventTable
                    where   inventTable.ItemId      == inventReserve.ItemId
                        &&  inventTable.Product     == _productMasterRecId;
        }

        return inventTrans.RecId || inventReserve.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByProductConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>EcoResProductMasterConfiguration</c> table exists.
    /// </summary>
    /// <param name="_productMaster">
    ///    The ID of the <c>EcoResProductMaster</c> record to use as a filter.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    The ID of the <c>EcoResProductDimensionAttribute</c> record to use as a filter.
    /// </param>
    /// <param name="_configurationRecId">
    ///    The ID of the <c>EcoResConfiguration</c> record to use as a filter.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    static boolean existByProductConfiguration(
        RefRecId                    _productMaster,
        RefRecId                    _productDimensionAttribute,
        EcoResConfigurationRecId    _configurationRecId)
    {
        if (_productMaster && _productDimensionAttribute && _configurationRecId)
        {
            return (select firstonly ecoResProductMasterConfiguration
                    where ecoResProductMasterConfiguration.ConfigProductMaster              == _productMaster
                       && ecoResProductMasterConfiguration.ConfigProductDimensionAttribute  == _productDimensionAttribute
                       && ecoResProductMasterConfiguration.Configuration                    == _configurationRecId
                    ).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existWithSameConfigUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the same configuration unit exists for a given product master.
    /// </summary>
    /// <param name = "_productMasterRecId">The product master to check for.</param>
    /// <param name = "_configUnitId">The configuration unit id to check for.</param>
    /// <param name = "_configuration">The configuration to check for.</param>
    /// <returns>true if the same configuration unit exists; otherwise, false.</returns>
    protected static boolean existWithSameConfigUnit(
        EcoResProductMasterRecId    _productMasterRecId,
        PmfConfigUnitId             _configUnitId,
        EcoResProductMasterRecId    _configuration = 0
        )
    {
        if (_productMasterRecId && _configUnitId)
        {
            return (select firstonly ecoResProductMasterConfiguration
                    where ecoResProductMasterConfiguration.ConfigProductMaster              == _productMasterRecId
                       && ecoResProductMasterConfiguration.ConfigProductDimensionAttribute
                            == EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, ConfigId))
                       && ecoResProductMasterConfiguration.PmfConfigUnitId                  == _configUnitId
                       && ecoResProductMasterConfiguration.Configuration                    == _configuration
                    ).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>EcoResProductMasterConfiguration</c> record.
    /// </summary>
    /// <param name="_productMaster">
    /// An integer value that represents the product record ID.
    /// </param>
    /// <param name="_configurationRecId">
    /// An integer value that represents the configuration record ID.
    /// </param>
    /// <param name="_inventDimFieldId">
    /// An integer value that represents the ID of the number of the product dimension field in the
    /// <c>InventDim</c> table.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether the record must be selected for update; optional.
    /// </param>
    /// <returns>
    /// A <c>EcoResProductMasterConfiguration</c> record.
    /// </returns>
    public static EcoResProductMasterConfiguration find(
        RefRecId                    _productMaster,
        EcoResConfigurationRecId    _configurationRecId,
        fieldId                     _inventDimFieldId   = fieldnum(InventDim, ConfigId),
        boolean                     _forupdate          = false)
    {
        EcoResProductMasterConfiguration    ecoResProductMasterConfiguration;
        RefRecId                            ecoResProductDimensionAttributeRecId;

        ecoResProductMasterConfiguration.selectForUpdate(_forupdate);

        if (   _productMaster
            && _configurationRecId)
        {
            ecoResProductDimensionAttributeRecId = ecoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(_inventDimFieldId);

            select firstonly ecoResProductMasterConfiguration
                where ecoResProductMasterConfiguration.ConfigProductMaster              == _productMaster
                   && ecoResProductMasterConfiguration.ConfigProductDimensionAttribute  == ecoResProductDimensionAttributeRecId
                   && ecoResProductMasterConfiguration.Configuration                    == _configurationRecId;
        }

        return ecoResProductMasterConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a warning message in case the product dimension table value does not exist for the
    ///    specified product
    /// </summary>
    /// <param name="_value">
    ///    The <c>Name</c> value that corresponds to the possible product dimension table value.
    /// </param>
    /// <param name="_productNumber">
    ///    The <c>EcoResProductNumber</c> value that corresponds to the product ID value.
    /// </param>
    /// <returns>
    ///    A warning message in case the product dimension table value does not exist for specified product.
    /// </returns>
    public static TxtNotExist txtNotExist(Name _value, EcoResProductNumber _productNumber)
    {
        return EcoResProductMasterDimensionValue::txtNotExist(EcoResConfiguration::label(), _value, _productNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTranslationByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the configuration translation, if one exists, for a given product master.
    /// </summary>
    /// <param name="_productMasterRecId">
    /// An integer value that represents the product master record id.
    /// </param>
    /// <param name="_configName">
    /// The configuration name. Note that the Name field is the ID of the EcoResConfiguration table.
    /// </param>
    /// <param name="_languageId">
    /// The SystemLanguageId to find the translation for.
    /// </param>
    /// <returns>
    /// The configuration translation for the product master.
    /// </returns>
    public static EcoResProductMasterDimValueTranslation findTranslationByProduct(EcoResProductRecId _productMasterRecId, EcoResItemConfigurationName _configName, SystemLanguageId _languageId)
    {
        EcoResProductMasterDimValueTranslation valueTranslation;
        EcoResProductMasterConfiguration masterConfig;
        EcoResConfiguration config;
        select firstonly valueTranslation
                exists join masterConfig
                    where masterConfig.ConfigProductMaster == _productMasterRecId
                    && masterConfig.RecId == valueTranslation.ProductMasterDimensionValue
                    && valueTranslation.LanguageId == _languageId
                exists join config
                    where config.RecId == masterConfig.Configuration
                    && config.Name == _configName;

        return valueTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        EcoResProductMasterConfiguration ecoResProductMasterConfiguration_orig = this.orig();

        super();

        if (ecoResProductMasterConfiguration_orig.RetailDisplayOrder != this.RetailDisplayOrder)
        {
            ttsbegin;
            EcoResProductVariantConfiguration ecoResProductVariantConfiguration;
            EcoResDistinctProductVariant ecoResDistinctProductVariant;

            update_recordset ecoResProductVariantConfiguration
                        setting RetailDisplayOrder = this.RetailDisplayOrder
                    join ecoResDistinctProductVariant
                        where ecoResDistinctProductVariant.RecId == ecoResProductVariantConfiguration.DistinctProductVariant
                            && ecoResDistinctProductVariant.ProductMaster == this.ConfigProductMaster
                            && ecoResProductVariantConfiguration.Configuration == this.Configuration;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Config</ConfigurationKey>
	<DeveloperDocumentation>@SYS133894</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>EcoResProductMasterDimensionAction</FormRef>
	<Label>@SYS133893</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ConfigProductMaster</TitleField1>
	<TitleField2>Configuration</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Extends>EcoResProductMasterDimensionValue</Extends>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>ProductConfigurationIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfigProductMaster</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfigProductDimensionAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Configuration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfigProductMaster</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfigProductDimensionAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Configuration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Configuration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfConfigUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ConfigProductDimensionAttribute</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ConfigProductMaster</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Configuration</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResConfigurationRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PmfConfigUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfConfigUnitId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FK_EcoResConfiguration</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Configuration</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_EcoResProductDimensionAttribute</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ConfigProductDimensionAttribute</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProductConfigurationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ConfigProductMaster</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ConfigProductDimensionAttribute</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Configuration</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ConfigEcoResProductDimensionAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResProductDimensionAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ConfigEcoResProductDimensionAttribute</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ConfigEcoResProductDimensionAttribute_EcoResProductMasterConfiguration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConfigProductDimensionAttribute</Name>
					<Field>ConfigProductDimensionAttribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ConfigEcoResProductMaster</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResProductMaster</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ConfigEcoResProductMaster</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ConfigEcoResProductMaster_EcoResProductMasterConfiguration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConfigProductMaster</Name>
					<Field>ConfigProductMaster</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ConfigEcoResProductMasterDimensionValue</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResProductMasterDimensionValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResConfiguration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResConfiguration</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SourceConfiguration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResConfiguration_EcoResProductMasterConfiguration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Configuration</Name>
					<Field>Configuration</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PmfConfigUnitId</Name>
					<Field>PmfConfigUnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SymbolIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>