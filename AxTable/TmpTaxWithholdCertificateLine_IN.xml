<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpTaxWithholdCertificateLine_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpTaxWithholdCertificateLine_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearFromTmpTaxWithholdCertificateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records in the <c> TaxWithholdCertificateTrans_IN </c> table.
    /// </summary>
    /// <param name="_tmpTaxWithholdCertificateLine">
    /// The buffer of the <c> TmpTaxWithholdCertificateLine_IN </c> table.
    /// </param>
    /// <param name="_account">
    /// The account number to find the records.
    /// </param>
    /// <param name="_includeAll">
    /// A Boolean value that indicates whether to delete all the records.
    /// </param>
    void clearFromTmpTaxWithholdCertificateLine(
        TmpTaxWithholdCertificateLine_IN        _tmpTaxWithholdCertificateLine,
        AccountNum                              _account,
        boolean                                 _includeAll)

    {
        TaxWithholdCertificateTrans_IN   taxWithholdCertificateTrans;

        ttsbegin;
        if (!_includeAll)
        {
            _tmpTaxWithholdCertificateLine.doDelete();
            if (_tmpTaxWithholdCertificateLine.CertificateNumber)
            {
                select forupdate taxWithholdCertificateTrans
                    where taxWithholdCertificateTrans.CertificateNumber    == _tmpTaxWithholdCertificateLine.CertificateNumber
                       && taxWithholdCertificateTrans.Voucher              == _tmpTaxWithholdCertificateLine.Voucher
                       && taxWithholdCertificateTrans.TaxType              == _tmpTaxWithholdCertificateLine.TaxType
                       && taxWithholdCertificateTrans.Account              == _account;
                taxWithholdCertificateTrans.doDelete();
            }
        }
        else
        {
            delete_from _tmpTaxWithholdCertificateLine;
            delete_from taxWithholdCertificateTrans;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCertificateHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c> TmpTaxWithholdCertificateLine_IN </c> record from the <c>
    /// TmpTaxWithholdCertificateHeader_IN </c> buffer.
    /// </summary>
    /// <param name="_taxType">
    /// The withhold tax type.
    /// </param>
    /// <param name="_certificateNum">
    /// The withhold tax certificate number.
    /// </param>
    /// <param name="_tmpTaxWithholdCertificateHeader">
    /// The buffer of the <c> TmpTaxWithholdCertificateHeader_IN </c> table.
    /// </param>
    /// <param name="_tmpTaxWithholdCertificateLine">
    /// The buffer of the <c> TmpTaxWithholdCertificateLine_IN </c> table.
    /// </param>
    /// <param name="_includeAll">
    /// A Boolean value that indicates whether to insert all of the records.
    /// </param>

    public void initFromCertificateHeader(
        TaxWithholdType_IN                  _taxType,
        TaxWithholdCertificateNumber_IN     _certificateNum,
        TmpTaxWithholdCertificateHeader_IN  _tmpTaxWithholdCertificateHeader,
        TmpTaxWithholdCertificateLine_IN    _tmpTaxWithholdCertificateLine,
        boolean                             _includeAll)

    {
        TaxWithholdCodeType_IN             taxWithholdType;

        taxWithholdType = _taxType == TaxWithholdType_IN::TDS ? TaxWithholdCodeType_IN::TDS : TaxWithholdCodeType_IN::TCS;
        ttsbegin;
        if (!_includeAll)
        {
            select firstonly Voucher from _tmpTaxWithholdCertificateLine
                where _tmpTaxWithholdCertificateLine.Voucher    == _tmpTaxWithholdCertificateHeader.Voucher
                   && _tmpTaxWithholdCertificateLine.TransDate  == _tmpTaxWithholdCertificateHeader.TransDate
                   && _tmpTaxWithholdCertificateLine.Source     == _tmpTaxWithholdCertificateHeader.Source;
            if (!_tmpTaxWithholdCertificateLine.Voucher)
            {
                this.Voucher   = _tmpTaxWithholdCertificateHeader.Voucher;
                this.Source    = _tmpTaxWithholdCertificateHeader.Source;
                this.TransDate = _tmpTaxWithholdCertificateHeader.TransDate;
                this.Amount    = _tmpTaxWithholdCertificateHeader.Amount;
                this.TaxAmount = _tmpTaxWithholdCertificateHeader.TaxAmount;
                this.TaxType   = taxWithholdType;
                this.doInsert();
            }
        }
        else
        {
            while select _tmpTaxWithholdCertificateHeader
            {
                select firstonly Voucher from _tmpTaxWithholdCertificateLine
                    where _tmpTaxWithholdCertificateLine.Voucher    == _tmpTaxWithholdCertificateHeader.Voucher
                       && _tmpTaxWithholdCertificateLine.TransDate  == _tmpTaxWithholdCertificateHeader.TransDate
                       && _tmpTaxWithholdCertificateLine.Source     == _tmpTaxWithholdCertificateHeader.Source;
                if (!_tmpTaxWithholdCertificateLine.Voucher)
                {
                    this.Voucher   = _tmpTaxWithholdCertificateHeader.Voucher;
                    this.Source    = _tmpTaxWithholdCertificateHeader.Source;
                    this.TransDate = _tmpTaxWithholdCertificateHeader.TransDate;
                    this.Amount    = _tmpTaxWithholdCertificateHeader.Amount;
                    this.TaxAmount = _tmpTaxWithholdCertificateHeader.TaxAmount;
                    this.TaxType   = taxWithholdType;
                    this.doInsert();
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates certificate number.
    /// </summary>
    /// <param name="_tmpTaxWithholdCertificateLine">
    /// The buffer of the <c> TmpTaxWithholdCertificateLine_IN </c> table.
    /// </param>
    /// <param name="_certificateNum">
    /// The withhold tax certificate number to find the record.
    /// </param>
    /// <param name="_certificateDate">
    /// The witholding certificate date.
    /// </param>
    public void  updateCertificate(
        TmpTaxWithholdCertificateLine_IN _tmpTaxWithholdCertificateLine,
        TaxWithholdCertificateNumber_IN  _certificateNum,
        TransDate                        _certificateDate)

    {
        ttsbegin;
        while select forupdate _tmpTaxWithholdCertificateLine
        {
            _tmpTaxWithholdCertificateLine.CertificateNumber    = _certificateNum;
            _tmpTaxWithholdCertificateLine.CertificateDate      = _certificateDate;
            _tmpTaxWithholdCertificateLine.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TmpTaxWithholdCertificateLine_IN</c> table for the specified record ID.
    /// </summary>
    /// <param name="_recId">
    /// The unique record ID to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A value that is used when the table is not automatically concurrent; optional.
    /// </param>
    /// <returns>
    /// A buffer that contains the <c>TmpTaxWithholdCertificateLine_IN</c> table.
    /// </returns>
    public static TmpTaxWithholdCertificateLine_IN find(
        RefRecId            _recId,
        boolean             _forupdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TmpTaxWithholdCertificateLine_IN tmpTaxWithholdCertificateLine;

        tmpTaxWithholdCertificateLine.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            tmpTaxWithholdCertificateLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly tmpTaxWithholdCertificateLine
            where tmpTaxWithholdCertificateLine.RecId == _recId;

        return tmpTaxWithholdCertificateLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<Label>@GLS6141</Label>
	<TableGroup>Transaction</TableGroup>
	<ClusteredIndex></ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex></PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS6928</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CertificateInformation</Name>
			<Label>@GLS5472</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS6928</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CertificateDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS6082</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateNumber</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdCertificateNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Source</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxModuleTypeId</ExtendedDataType>
			<EnumType>TaxModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS76123</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxWithholdCodeType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>