<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBookShiftDepreciation_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetBookShiftDepreciation_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetBookTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method is used to find AssetBookTable based on particular BookId.
    /// </summary>
    /// <returns>
    ///     Returns AssetBookTable based on the BookId.
    /// </returns>
    public AssetBookTable assetBookTable()
    {
        return AssetBookTable::find(this.BookId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetBook</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method is used to find <c>AssetBook</c> based on particular AssetId and BookId.
    /// </summary>
    /// <returns>
    ///     Returns <c>AssetBook</c> record based on the BookId.
    /// </returns>
    public AssetBook assetBook()
    {
        return AssetBook::find(this.AssetId, this.BookId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for a valid interval.
    /// </summary>
    /// <returns>
    /// Returns true if an interval exists.
    /// </returns>
    public boolean checkInterval()
    {
        if ((this.FromDate  && !this.ToDate) ||
            (!this.FromDate && this.ToDate))
        {
            return checkFailed("@SYS22087");
        }

        if (this.FromDate > this.ToDate)
        {
            return checkFailed("@SYS16982");
        }

        if (this.FromDate && AssetBookShiftDepreciation_IN::existDataWithoutDate(this.AssetId, this.BookId, this.RecId))
        {
            return checkFailed("@SYS22088");
        }

        if (AssetBookShiftDepreciation_IN::existSamePeriod(this.AssetId,
                                                           this.BookId,
                                                           this.FromDate,
                                                           this.ToDate,
                                                           this.RecId))
        {
            return checkFailed("@SYS22089");
        }
        else
        {
            if (AssetBookShiftDepreciation_IN::existPeriodOverlap(this.AssetId,
                                                                  this.BookId,
                                                                  this.FromDate,
                                                                  this.ToDate,
                                                                  this.RecId))
            {
                return checkFailed("@SYS94867");
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        AssetBookShiftDepreciation_IN   lastRecord;

        super();

        lastRecord = AssetBookShiftDepreciation_IN::findLastRecord(this.AssetId,this.BookId);

        if (lastRecord.RecId != 0)
        {
            this.FromDate = lastRecord.ToDate + 1 ;
            this.setShiftPercentage();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        AssetDepreciationPercentage shiftPercentageLoc;

        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(AssetBookShiftDepreciation_IN, TypeOfShift) :
                this.setShiftPercentage();
                break;

            case fieldStr(AssetBookShiftDepreciation_IN, BookId) :
                this.setShiftPercentage();
                break;

            case fieldStr(AssetBookShiftDepreciation_IN, ShiftPercentage) :
                shiftPercentageLoc = this.ShiftPercentage;
                this.setShiftPercentage();
                this.ShiftPercentage = max(shiftPercentageLoc, this.ShiftPercentage);
                break;

            case fieldStr(AssetBookTableShiftDepreciation_IN, FromDate) :
                this.setShiftPercentage();
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShiftPercentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used to default the ShiftPercentage field from AssetShiftDepreciationProfile_IN table
    /// </summary>
    private void setShiftPercentage()
    {
        AssetShiftDepreciationProfile_IN    assetShiftDepreciationProfile;

        assetShiftDepreciationProfile = AssetShiftDepreciationProfile_IN::findByDepProfileTransDate(this.assetBook().DepreciationProfile,
                                                                                                    this.FromDate);

        this.ShiftPercentage = assetShiftDepreciationProfile.getShiftPercentage(this.TypeOfShift);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();
        if (ret)
        {
            ret = this.checkInterval();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromAssetBookShiftDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>AssetBookTableShiftDepreciation</c> buffer.
    /// </summary>
    /// <param name="_assetId">
    /// The id of the asset.
    /// </param>
    /// <param name="_assetBookTableShiftDepreciation">
    /// The <c>AssetBookTableShiftDepreciation</c> buffer to initialize from.
    /// </param>
    public static void createFromAssetBookShiftDepreciation(AssetId                             _assetId,
                                                            AssetBookTableShiftDepreciation_IN  _assetBookTableShiftDepreciation)
    {
        AssetBookShiftDepreciation_IN       assetBookShiftDepreciation;

        assetBookShiftDepreciation.clear();
        assetBookShiftDepreciation.initValue();
        assetBookShiftDepreciation.FromDate         = _assetBookTableShiftDepreciation.FromDate;
        assetBookShiftDepreciation.ToDate           = _assetBookTableShiftDepreciation.ToDate;
        assetBookShiftDepreciation.TypeOfShift      = _assetBookTableShiftDepreciation.TypeOfShift;
        assetBookShiftDepreciation.TypeOfIndustry   = _assetBookTableShiftDepreciation.TypeOfIndustry;
        assetBookShiftDepreciation.BookId           = _assetBookTableShiftDepreciation.BookId;
        assetBookShiftDepreciation.AssetId          = _assetId;

        assetBookShiftDepreciation.setShiftPercentage();
        assetBookShiftDepreciation.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the asset book shift depreciation exists.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_bookId">
    /// The book id.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <returns>
    /// Returns 'True' if the asset book shift depreciation exist.
    /// </returns>
    public static boolean exist(AssetId         _assetId,
                                AssetBookId     _bookId,
                                FromDate        _fromDate,
                                ToDate          _toDate)
    {
        return  (select firstonly RecId
                    from assetBookShiftDepreciation_IN
                        where assetBookShiftDepreciation_IN.AssetId  == _assetId
                           && assetBookShiftDepreciation_IN.BookId   == _bookId
                           && assetBookShiftDepreciation_IN.FromDate == _fromDate
                           && assetBookShiftDepreciation_IN.ToDate   == _toDate).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByAssetIdBookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the asset book shift depreciation exists.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_bookId">
    /// The book id.
    /// </param>
    /// <returns>
    /// Returns 'True' if the asset book shift depreciation exist.
    /// </returns>
    public static boolean existByAssetIdBookId(AssetId      _assetId,
                                               AssetBookId  _bookId)
    {
        return  _assetId
                && _bookId
                && (select firstonly RecId from assetBookShiftDepreciation_IN
                       where assetBookShiftDepreciation_IN.AssetId  == _assetId
                          && assetBookShiftDepreciation_IN.BookId   == _bookId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDataWithoutDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a assetBookShiftDepreciation_IN record exists without a date range.
    /// </summary>
    /// <param name="_assetId">
    /// Asset id to find.
    /// </param>
    /// <param name="_bookId">
    /// Book id to find.
    /// </param>
    /// <param name="_recId">
    /// Record id of an already existing record which we dont need to find.
    /// </param>
    /// <returns>
    /// Returns true if record exists.
    /// </returns>
    private static boolean existDataWithoutDate(AssetId      _assetId,
                                                AssetBookId  _bookId,
                                                recId        _recId)
    {
        if (_assetId && _bookId)
        {
            return (select RecId
                        from assetBookShiftDepreciation_IN
                            where assetBookShiftDepreciation_IN.AssetId         == _assetId
                               && assetBookShiftDepreciation_IN.BookId          == _bookId
                               && assetBookShiftDepreciation_IN.RecId           != _recId
                               && ! assetBookShiftDepreciation_IN.FromDate
                               && ! assetBookShiftDepreciation_IN.ToDate).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPeriodOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether overlapping periods exists.
    /// </summary>
    /// <param name="_assetId">
    /// AssetId to search for.
    /// </param>
    /// <param name="_bookId">
    /// BookId to search for.
    /// </param>
    /// <param name="_fromDate">
    /// From date of interval.
    /// </param>
    /// <param name="_toDate">
    /// To date of interval.
    /// </param>
    /// <param name="_recId">
    /// Record id of an already existing record which we dont need to find.
    /// </param>
    /// <returns>
    /// Returns true if overlapping period exists.
    /// </returns>
    private static boolean existPeriodOverlap(AssetId       _assetId,
                                             AssetBookId    _bookId,
                                             FromDate       _fromDate,
                                             ToDate         _toDate,
                                             recId          _recId)
    {
        AssetBookShiftDepreciation_IN   assetBookShiftDepreciation;
        boolean                         ret = false;

        if (_assetId && _bookId)
        {
            while select FromDate, ToDate
                  from assetBookShiftDepreciation
                      where assetBookShiftDepreciation.AssetId == _assetId
                         && assetBookShiftDepreciation.BookId  == _bookId
                         && assetBookShiftDepreciation.RecId   != _recId
            {
                if (!_fromDate || !_toDate)
                {
                    ret = true;
                }
                if (_fromDate   >= assetBookShiftDepreciation.FromDate  &&
                    _fromDate   <= assetBookShiftDepreciation.ToDate    ||
                    _toDate     >= assetBookShiftDepreciation.FromDate  &&
                    _toDate     <= assetBookShiftDepreciation.ToDate)
                {
                    ret = true;
                }
                if (assetBookShiftDepreciation.FromDate >= _fromDate    &&
                    assetBookShiftDepreciation.FromDate <= _toDate      ||
                    assetBookShiftDepreciation.ToDate   >= _fromDate    &&
                    assetBookShiftDepreciation.ToDate   <= _toDate)
                {
                    ret = true;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the asset book shift depreciation exists.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_bookId">
    /// The book id.
    /// </param>
    /// <param name="_date">
    /// End of period
    /// </param>
    /// <returns>
    /// Returns 'True' if the asset book shift depreciation exist.
    /// </returns>
    public static boolean exists(AssetId      _assetId,
                                 AssetBookId  _bookId,
                                 TransDate    _date)
    {
        return  _assetId
                && _bookId
                && (select firstonly RecId from assetBookShiftDepreciation_IN
                       where assetBookShiftDepreciation_IN.AssetId  == _assetId
                          && assetBookShiftDepreciation_IN.BookId   == _bookId
                          && assetBookShiftDepreciation_IN.FromDate <= _date
                          && assetBookShiftDepreciation_IN.ToDate   >= _date).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSamePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if another record with the same period interval exists.
    /// </summary>
    /// <param name="_assetId">
    /// AssetId to search for.
    /// </param>
    /// <param name="_assetBookId">
    /// BookId to search for.
    /// </param>
    /// <param name="_fromDate">
    /// From date of interval.
    /// </param>
    /// <param name="_toDate">
    /// To date of interval.
    /// </param>
    /// <param name="_recId">
    /// Record id of an already existing record which we dont need to find.
    /// </param>
    /// <returns>
    /// Returns true if overlapping period exists.
    /// </returns>
    private static boolean existSamePeriod(AssetId       _assetId,
                                           AssetBookId   _assetBookId,
                                           FromDate      _fromDate,
                                           ToDate        _toDate,
                                           recId         _recId)
    {
        if (_assetId && _assetBookId)
        {
            return (select RecId
                        from assetBookShiftDepreciation_IN
                            where assetBookShiftDepreciation_IN.AssetId  == _assetId
                               && assetBookShiftDepreciation_IN.BookId   == _assetBookId
                               && assetBookShiftDepreciation_IN.FromDate == _fromDate
                               && assetBookShiftDepreciation_IN.ToDate   == _toDate
                               && assetBookShiftDepreciation_IN.RecId    != _recId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds asset book shift depreciation by RecId.
    /// </summary>
    /// <param name="_recId">
    /// The RecId.
    /// </param>
    /// <param name="_forupdate">
    /// The forupdate flag.
    /// </param>
    /// <returns>
    /// The instance of the <c>AssetBookShiftDepreciation_IN</c> class.
    /// </returns>
    public static AssetBookShiftDepreciation_IN find(recId      _recId,
                                                     boolean    _forupdate = false)
    {
        AssetBookShiftDepreciation_IN   assetBookShiftDepreciation;

        if (_recId)
        {
            if (_forupdate)
            {
                assetBookShiftDepreciation.selectForUpdate(_forupdate);
            }

            select firstonly assetBookShiftDepreciation
                where assetBookShiftDepreciation.RecId == _recId;
        }

        return assetBookShiftDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAssetId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds asset book shift depreciation by asset id.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_bookId">
    /// The book id.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <param name="_forupdate">
    /// The forupdate flag.
    /// </param>
    /// <returns>
    /// The instance of the <c>AssetBookShiftDepreciation_IN</c> class.
    /// </returns>
    public static AssetBookShiftDepreciation_IN findByAssetId(AssetId        _assetId,
                                                              AssetBookId    _bookId,
                                                              FromDate       _fromDate,
                                                              ToDate         _toDate,
                                                              boolean        _forupdate = false)
    {
        AssetBookShiftDepreciation_IN   assetBookShiftDepreciation;

        assetBookShiftDepreciation.selectForUpdate(_forupdate);

        select firstonly assetBookShiftDepreciation
            index hint AssetBookDepreciationIdx
                where assetBookShiftDepreciation.AssetId  == _assetId
                   && assetBookShiftDepreciation.BookId   == _bookId
                   && assetBookShiftDepreciation.FromDate == _fromDate
                   && assetBookShiftDepreciation.ToDate   == _toDate;

        return assetBookShiftDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to find the last record with AssetID and BookID .
    /// </summary>
    /// <param name="_assetId">
    /// The AssetID
    /// </param>
    /// <param name="_assetBookId">
    /// The BookId
    /// </param>
    /// <returns>
    /// Returns last record with AssetID and BookID.
    /// </returns>

    public static AssetBookShiftDepreciation_IN findLastRecord(AssetId _assetId, AssetBookId _assetBookId)
    {
        AssetBookShiftDepreciation_IN assetBookShiftDepreciation_IN;

        select firstOnly assetBookShiftDepreciation_IN
            order by ToDate DESC
                 where assetBookShiftDepreciation_IN.BookId  == _assetBookId
                    && assetBookShiftDepreciation_IN.AssetId == _assetId;

        return  assetBookShiftDepreciation_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalShiftDaysInCalendarPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calculates number of days based on the shift percentage defined in the ShiftDepreciation form and attached DayBasedCalendar.
    /// </summary>
    /// <param name="_assetBook">
    /// The assetBook table buffer.
    /// </param>
    /// <param name="_startDate">
    /// Period Start date.
    /// </param>
    /// <param name="_endDate">
    /// Period end date.
    /// </param>
    /// <param name="_singleShift">
    /// Is SingleShift applicable.
    /// </param>
    /// <param name="_doubleShift">
    /// Is doubleShift applicable.
    /// </param>
    /// <param name="_tripleshift">
    /// Is Triple shift applicable.
    /// </param>
    /// <returns>
    /// This method returns number of days based on the shift percentage defined in the ShiftDepreciation form and attached DayBasedCalendar.
    /// </returns>
    public static AssetDepreciationTime getTotalShiftDaysInCalendarPeriods(AssetBook    _assetBook,
                                                                           TransDate    _startDate,
                                                                           TransDate    _endDate,
                                                                           boolean      _singleShift = true,
                                                                           boolean      _doubleShift = true,
                                                                           boolean      _tripleshift = true,
                                                                           boolean      _noneShift   = true)
    {
        FiscalCalendarPeriod            fiscalCalendarPeriod;
        FiscalCalendarPeriod_IN         fiscalCalendarPeriodIN;
        AssetBookShiftDepreciation_IN   assetBookShiftDepreciationIN;
        AssetBookTable                  assetBookTable;
        AssetDepreciationProfile        depProfile;
        RefRecId                        fiscalCalendarRecId;
        AssetDepreciationTime           depreciationDaysInterim;
        AssetDepreciationTime           depreciationDays;
        AssetDepreciationTime           remainingDays;
        AssetDepreciationTime           periodDays;
        Days_IN                         fiscalCalendarPeriodDays;
        TransDate                       startPeriod;
        TransDate                       endPeriod;
        boolean                         isDepreciationYearFiscal;
        boolean                         isShiftMarked;

        assetBookTable      = _assetBook.assetBookTable();
        fiscalCalendarRecId = assetBookTable.getFiscalCalendar();
        depProfile          = assetBookTable.depreciationProfile();
        isDepreciationYearFiscal = (depProfile.DepreciationYear == AssetDepreciationYear::Fiscal);
        isShiftMarked            = depProfile.ShiftDepreciation_IN;

        if (isDepreciationYearFiscal)
        {
            fiscalCalendarPeriodDays = FiscalCalendarPeriod_IN::getTotalDaysInCalendarPeriods(fiscalCalendarRecId, _startDate, _endDate);

            remainingDays = ((_endDate - _startDate + 1) <= fiscalCalendarPeriodDays ? (_endDate - _startDate + 1)
                                        : fiscalCalendarPeriodDays);
        }
        else
        {
            remainingDays = (_endDate - _startDate + 1);
        }

        if (isShiftMarked)
        {
            while select TypeOfShift, FromDate, ToDate, ShiftPercentage
                from assetBookShiftDepreciationIN
                where assetBookShiftDepreciationIN.AssetId == _assetBook.AssetId
                    && assetBookShiftDepreciationIN.BookId  == _assetBook.BookId
                    && assetBookShiftDepreciationIN.FromDate <= _endDate
                    && assetBookShiftDepreciationIN.ToDate   >= _startDate
            {
                if ((assetBookShiftDepreciationIN.TypeOfShift     == TypeOfShift_IN::SingleShift && _singleShift)
                    || (assetBookShiftDepreciationIN.TypeOfShift  == TypeOfShift_IN::None        && _noneShift)
                    || (assetBookShiftDepreciationIN.TypeOfShift  == TypeOfShift_IN::DoubleShift && _doubleShift)
                    || (assetBookShiftDepreciationIN.TypeOfShift  == TypeOfShift_IN::TripleShift && _tripleshift))
                {
                    startPeriod = max(_startDate, assetBookShiftDepreciationIN.FromDate);
                    endPeriod   = min(_endDate, assetBookShiftDepreciationIN.ToDate);

                    depreciationDaysInterim = 0;

                    if (isDepreciationYearFiscal
                        && FiscalCalendar_IN::findByFiscalCalendar(fiscalCalendarRecId).CalendarType == CalendarType_IN::DayBased)
                    {
                        while select Days from fiscalCalendarPeriodIN
                            join StartDate, EndDate from fiscalCalendarPeriod
                                where fiscalCalendarPeriod.FiscalCalendar   == fiscalCalendarRecId
                                    && fiscalCalendarPeriod.StartDate       <= endPeriod
                                    && fiscalCalendarPeriod.EndDate         >= startPeriod
                                    && fiscalCalendarPeriodIN.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId
                                    && fiscalCalendarPeriod.Type                   == FiscalPeriodType::Operating
                        {
                            periodDays = min(fiscalCalendarPeriodIN.Days,
                                                    (min(endPeriod, fiscalCalendarPeriod.EndDate) - max(fiscalCalendarPeriod.StartDate, startPeriod) + 1));

                            if (remainingDays > periodDays)
                            {
                                depreciationDaysInterim += periodDays;
                                remainingDays -= periodDays;
                            }
                            else
                            {
                                depreciationDaysInterim += remainingDays;
                                remainingDays -= remainingDays;
                                break;
                            }
                        }
                    }
                    else
                    {
                        depreciationDaysInterim = (endPeriod - startPeriod + 1);
                    }

                    depreciationDays += depreciationDaysInterim * assetBookShiftDepreciationIN.ShiftPercentage / 100;
                    if (!remainingDays)
                    {
                        break;
                    }
                }
            }
        }
        else
        {
            if (isDepreciationYearFiscal
                && FiscalCalendar_IN::findByFiscalCalendar(fiscalCalendarRecId).CalendarType == CalendarType_IN::DayBased)
            {
                while select Days from fiscalCalendarPeriodIN
                    join StartDate, EndDate from fiscalCalendarPeriod
                        where fiscalCalendarPeriod.FiscalCalendar   == fiscalCalendarRecId
                            && fiscalCalendarPeriod.StartDate       <= _endDate
                            && fiscalCalendarPeriod.EndDate         >= _startDate
                            && fiscalCalendarPeriodIN.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId
                            && fiscalCalendarPeriod.Type                   == FiscalPeriodType::Operating
                {
                    periodDays = min(fiscalCalendarPeriodIN.Days,
                                            (min(_endDate, fiscalCalendarPeriod.EndDate) - max(fiscalCalendarPeriod.StartDate, _startDate) + 1));
                    if (remainingDays > periodDays)
                    {
                        depreciationDaysInterim += periodDays;
                        remainingDays -= periodDays;
                    }
                    else
                    {
                        depreciationDaysInterim += remainingDays;
                        remainingDays -= remainingDays;
                        break;
                    }
                }
            }
            else
            {
                depreciationDaysInterim = (_endDate - _startDate + 1);
            }

            depreciationDays = depreciationDaysInterim;
        }

        return depreciationDays;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63877</DeveloperDocumentation>
	<FormRef>AssetBookShiftDepreciation_IN</FormRef>
	<Label>@FixedAssets:FA_EntityTitle_FixedAssetBookShiftDepreciation</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>BookId</TitleField1>
	<TitleField2>FromDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>AssetBookDepreciationIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TypeOfShift</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TypeOfIndustry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ShiftDepreciation</Name>
			<Label>@GLS5965</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TypeOfShift</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShiftPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TypeOfIndustry</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ShiftPercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationPercentage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TypeOfIndustry</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TypeOfIndustry_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TypeOfShift</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TypeOfShift_IN</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AssetBookDepreciationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AssetBookIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBook_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetBook</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetBook</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBook_AssetBookShiftDepreciation_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AssetBookIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<SourceEDT>AssetBookId</SourceEDT>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BookIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>