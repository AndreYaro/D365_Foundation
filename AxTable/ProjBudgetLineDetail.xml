<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetLineDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjBudgetLineDetail extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total cost price.
    /// </summary>
    /// <returns>
    /// The total cost price.
    /// </returns>
    display ProjCostAmount costAmount()
    {
        return this.Quantity * this.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the cost price and the record in the <c>InventTable</c> and <c>InventDim</c> tables.
    /// </summary>
    void initFromInventTable()
    {
        InventTable         inventTable         = InventTable::find(this.ItemId);
        InventTableModule   inventTableModule   = this.inventTableModule();
        InventDim           inventDim;

        if (!inventTable)
        {
            return;
        }

        this.SalesUnitId        = inventTableModule.UnitId;

        if (this.InventDimId)
        {
            inventDim = InventDim::find(this.InventDimId);
        }

        inventDim.initFromInventTable(inventTable, InventItemOrderSetupType::Sales, inventDim);

        inventDim = InventDim::findOrCreate(inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);

        this.CostPrice = inventTable.costPcsPrice(this.InventDimId, inventDim, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.Quantity = 1.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventDimId</c> from the <c>InventDim</c> Table .
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether to update the record.
    /// </param>
    /// <returns>
    /// An inventory dimension record that contains the inventory dimension ID.
    /// </returns>
    InventDim inventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.InventDimId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record for corresponding item ID and module type from the <c>InventTableModule</c> table.
    /// </summary>
    /// <returns>
    /// The <c>InventTableModule</c> record.
    /// </returns>
    InventTableModule inventTableModule()
    {
        return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Sales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Links the current inventory dimension ID to the relevent records in the inventory dimension table.
    /// </summary>
    /// <param name="_newInventDim">
    /// The current inventory dimension.
    /// </param>
    /// <param name="_oldInventDim">
    /// The previous inventory dimension.
    /// </param>
    public void linkInventDim2Dimension(InventDim _newInventDim, InventDim _oldInventDim)
    {
        _newInventDim.setInventSiteFromParentIfModified(this, _oldInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the total cost price after the field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The modified field ID.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProjBudgetLineDetail, Resource):
                this.setResourceCategory();
                this.setPrice();
                break;

            case fieldNum(ProjBudgetLineDetail, ResourceCategory):
                this.setPrice();
                break;

            case fieldNum(ProjBudgetLineDetail, ItemId):
                this.initFromInventTable();
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedProductDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the product dimensions changed.
    /// </summary>
    /// <param name="_inventDim">
    /// The inventory dimension record to check.
    /// </param>
    /// <param name="_dimFieldId">
    /// The modified field ID value of the record to check.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    /// An instance of the <c>InventDimGroupSetup</c> class that finds a dimension.
    /// </param>
    /// <returns>
    /// true if the product dimensions changed; otherwise, false.
    /// </returns>
    public boolean modifiedProductDim(
    InventDim                           _inventDim,
    FieldId                             _dimFieldId,
    InventDimGroupSetup                 _inventDimGroupSetup)
    {
        if (InventDim::mustUseFieldSalesPriceDisc(_dimFieldId, _inventDimGroupSetup))
        {
            //this.SalesPurchLine::setPriceAgreement(_inventDim);
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total sales price.
    /// </summary>
    /// <returns>
    /// The total sales price.
    /// </returns>
    display ProjSalesAmount salesAmount()
    {
        return this.Quantity * this.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the inventory dimension ID for the relevent records in the inventory dimension table.
    /// </summary>
    /// <param name="_inventDimId">
    /// The current inventory dimension ID.
    /// </param>
    /// <param name="_inventDim">
    /// An inventory dimension record that links to dimesion of record; optional.
    /// </param>
    public void setInventDimId(InventDimId _inventDimId, InventDim _inventDim = InventDim::find(_inventDimId))
    {
        InventDim   currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();

        this.InventDimId = _inventDimId;
        this.linkInventDim2Dimension(_inventDim, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the item sales price to relevent records from the <c>InventTable</c>, <c>ProjBudgetLine</c>, and <c>ProjTable</c> tables.
    /// </summary>
    public void setItemSalesPrice()
    {
        PriceMarkup     markUpDummy;
        PriceUnit       salesUnitDummy;
        InventTable     inventTable;
        ProjBudgetLine  projBudgetLine;
        ProjTable       projTable;
        CurrencyCode    currencyCode;

        if (this.ProjBudgetLine && this.ItemId)
        {
            projBudgetLine = ProjBudgetLine::find(this.ProjBudgetLine);
            projTable = ProjTable::find(projBudgetLine.ProjId);
            inventTable = InventTable::find(this.ItemId);

            currencyCode = projTable.currencyId();

            [this.SalesPrice,
         salesUnitDummy,
         markUpDummy] = inventTable.salesPriceAgreement(
                                        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                        this.inventDim(),
                                        this.Quantity,
                                        this.SalesUnitId,
                                        projTable.CustAccount,
                                        currencyCode,
                                        ProjTable::findPriceGroup(projTable.ProjId));
            if (currencyCode != Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId))
            {
                this.SalesPrice = BudgetTransactionManager::calculateTransAmountToAccountingAmount(this.SalesPrice, currencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the cost price to relevant records from the <c>ProjBudgetLine</c> table.
    /// </summary>
    public void setPrice()
    {
        ProjBudgetLine  projBudgetLine;

        if (this.ProjBudgetLine)
        {
            projBudgetLine = ProjBudgetLine::find(this.ProjBudgetLine);

            if (projBudgetLine)
            {
                ProjPriceParameters priceParams;

                switch (projBudgetLine.ProjTransType)
                {
                    case ProjTransType::Hour:
                    if (!ResourceFacade::isResourceInCurrentCompany(this.Resource))
                        {
                            this.CostPrice = ProjTransferPrice::getResBorrowingCostPriceEstimate(this.Resource,
                                                                                                  ResourceFacade::getLegalEntityId(this.Resource),
                                                                                                  projBudgetLine.ProjId,
                                                                                                  projBudgetLine.CategoryId,
                                                                                                  DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                                                  this.ResourceCategory);
                        }
                        else
                        {
                            priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(
								projBudgetLine.ProjId,
                                this.Resource,
                                projBudgetLine.CategoryId,
                                '', //LinePropertyId
                                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                '',
                                '',
                                '',
                                this.ResourceCategory);
                            this.CostPrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams, false);
                        }
                        break;

                    case ProjTransType::Cost:
                        priceParams = ProjCostPriceExpense::constructPriceParametersForFindCostPrice(projBudgetLine.ProjId, this.Resource, projBudgetLine.CategoryId);
                        this.CostPrice = ProjCostPriceExpense::findCostPriceByPriceParameters(priceParams);
                        break;

                    case ProjTransType::Item:
                        this.initFromInventTable();
                        break;
                }

                if (projBudgetLine.ProjBudgetLineType == ProjBudgetLineType::Revenue)
                {
                    switch (projBudgetLine.ProjTransType)
                    {
                    case ProjTransType::Cost:
                        priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
							projBudgetLine.ProjId,
                            this.Resource,
                            projBudgetLine.CategoryId,
                            this.CostPrice,
                            CompanyInfoHelper::standardCurrency());
                        [this.SalesPrice] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams);
                        break;

                    case ProjTransType::Hour:
                        priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
								projBudgetLine.ProjId,
                                this.Resource,
                                projBudgetLine.CategoryId,
                                '', // LinePropertyId,
                                this.CostPrice,
                                CompanyInfoHelper::standardCurrency(),
                                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                '',
                                '',
                                '',
                                this.ResourceCategory);
                        [this.SalesPrice] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams, false);
                        break;

			        case ProjTransType::Item:
                        this.setSalesPrice();
                        break;

                    case ProjTransType::Revenue:
                        [this.SalesPrice] = ProjRevenueSalesPrice::findProjRevenueSalesPrice(projBudgetLine.ProjId,
                                                                                this.Resource,
                                                                                projBudgetLine.CategoryId,
                                                                                CompanyInfoHelper::standardCurrency(),
                                                                                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                                '',
                                                                                false,
                                                                                this.ResourceCategory);
                        break;
                    }
                    this.CostPrice = 0;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResourceCategory</Name>
				<Source><![CDATA[
    public void setResourceCategory()
    {
        this.ResourceCategory = ResourceFacade::getResourceCategory(this.Resource, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the sales price to relevant records from the <c>ProjBudgetLine</c> table.
    /// </summary>
    public void setSalesPrice()
    {
        ProjBudgetLine  projBudgetLine;

        if (this.ProjBudgetLine)
        {
            projBudgetLine = ProjBudgetLine::find(this.ProjBudgetLine);

            //[this.salesPrice] = ProjHourSalesPrice::findHourSalesPrice(this.projId,
            //this.Worker,
            //this.categoryId,
            //this.LinePropertyId,
            //this.costPrice,
            //this.currencyId)
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProjBudgetLineOrigAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the budget amount from the <c>ProjBudgetLine</c> and <c>ProjBudgetLineDetail</c> tables.
    /// </summary>
    /// <param name="_projBudgetLineRecid">
    /// The <c>RefRecId</c> of the record from the <c>ProjBudgetLine</c> table.
    /// </param>
    /// <param name="_budgetRevisionLineRecId">
    /// The <c>RefRecId</c> of the record from the <c>ProjBudgetLineDetail</c> table.
    /// </param>
    /// <returns>
    /// The original budget amount.
    /// </returns>
    static AmountCur calcProjBudgetLineOrigAmount(RefRecId _projBudgetLineRecid, RefRecId  _budgetRevisionLineRecId)
    {
        ProjBudgetLine          projBudgetLine;
        ProjBudgetLineDetail    projBudgetLineDetail;
        AmountCur               origAmount = 0;

        if (_projBudgetLineRecid)
        {
            projBudgetLine = ProjBudgetLine::find(_projBudgetLineRecid);
            while select CostPrice, SalesPrice, Quantity from projBudgetLineDetail
            where projBudgetLineDetail.ProjBudgetLine == _projBudgetLineRecid &&
                projBudgetLineDetail.ProjBudgetRevisionLine == _budgetRevisionLineRecId
            {
                if (projBudgetLine.ProjBudgetLineType == ProjBudgetLineType::Cost)
                {
                    origAmount += (projBudgetLineDetail.CostPrice  * projBudgetLineDetail.Quantity);
                }
                else
                {
                    origAmount += (projBudgetLineDetail.SalesPrice * projBudgetLineDetail.Quantity);
                }
            }
        }

        return origAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjBudgetLineOrigAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the original budget amount.
    /// </summary>
    /// <param name="_projBudgetLineRecid">
    /// The <c>ProjBudgetLine</c> record Id that updates corresponding original budget amount .
    /// </param>
    static void updateProjBudgetLineOrigAmount(RefRecId _projBudgetLineRecid)
    {
        ProjBudgetLine          projBudgetLine;
        ProjBudget              projBudget;
        ProjBudgetLineDetail    projBudgetLineDetail;
        AmountCur               origAmount = 0;

        if (_projBudgetLineRecid)
        {
            projBudgetLine = ProjBudgetLine::find(_projBudgetLineRecid);
            projBudget = ProjBudget::find(projBudgetLine.ProjBudget);
            if ((projBudget) &&
            (projBudget.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Created
            || projBudget.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Rejected))
            {
                ttsbegin;
                while select CostPrice, Quantity from projBudgetLineDetail where projBudgetLineDetail.ProjBudgetLine == _projBudgetLineRecid
                {
                    origAmount += (projBudgetLineDetail.CostPrice  * projBudgetLineDetail.Quantity);
                }
                if (origAmount > 0)
                {
                    select forupdate projBudgetLine where projBudgetLine.RecId == _projBudgetLineRecid;
                    projBudgetLine.OriginalBudget = origAmount;
                    projBudgetLine.update();
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@GLS480003</DeveloperDocumentation>
	<Label>@GLS480002</Label>
	<TitleField1>ProjBudgetLine</TitleField1>
	<TitleField2>Resource</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProjectManagementAndAccounting</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetRevisionLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCostPriceEmpl</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdSmall</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjBudgetLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjBudgetRevisionLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceCategory</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceCategoryRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesCategory</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceEmpl</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HcmWorker</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventDimIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EcoResCategoryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesCategory</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjBudgetRevisionLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjBudgetRevisionLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjBudgetLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjBudgetLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ItemId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjBudgetLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjBudgetLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjBudgetLine</Name>
					<Field>ProjBudgetLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjBudgetRevisionLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjBudgetRevisionLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjBudgetRevisionLine</Name>
					<Field>ProjBudgetRevisionLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceCategoryView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesCategory</Name>
					<Field>SalesCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ResResourceIdentifier</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>