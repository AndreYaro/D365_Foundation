<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqSafetyLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqSafetyLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateDays</Name>
				<Source><![CDATA[
    public Integer allocateDays(TransDate breakEvenDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return this.AllocateTransMap::allocateDays(breakEvenDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFromDate</Name>
				<Source><![CDATA[
    public display FromDate displayFromDate()
    {
        return this.displayFromDatePrim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFromDatePrim</Name>
				<Source><![CDATA[
    public FromDate displayFromDatePrim(
        ReqSafetyKey    _tmpReqSafetyKey  = null,
        ReqSafetyLine   _tmpReqSafetyLine = null
        )
    {
        ReqSafetyKey    reqSafetyKey;
        ReqSafetyLine   prevSafetyLine;
        TransDate       breakEvenDate;

        if (_tmpReqSafetyKey)
        {
            reqSafetyKey = _tmpReqSafetyKey;

            if (_tmpReqSafetyLine.isTmp())
            {
                prevSafetyLine.setTmp();
                prevSafetyLine.setTmpData(_tmpReqSafetyLine);
            }
        }
        else
        {
            reqSafetyKey = ReqSafetyKey::find(this.SafetyKeyId);
        }

        breakEvenDate = reqSafetyKey.breakEvenDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        if (! this.Freq)
            return breakEvenDate;

        select reverse firstonly prevSafetyLine
            order by Sort1980
            where prevSafetyLine.SafetyKeyId == this.SafetyKeyId &&
                  prevSafetyLine.Sort1980    <  this.Sort1980;

        if (prevSafetyLine.RecId)
        {
            return prevSafetyLine.toDate(breakEvenDate) + 1;
        }

        return breakEvenDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMonthName</Name>
				<Source><![CDATA[
    public display MonthName displayMonthName()
    {
        return this.displayMonthNamePrim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMonthNamePrim</Name>
				<Source><![CDATA[
    public MonthName displayMonthNamePrim(ReqSafetyKey reqSafetyKey = ReqSafetyKey::find(this.SafetyKeyId))
    {
        return mthname(mthofyr(this.displayToDatePrim(reqSafetyKey)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayToDate</Name>
				<Source><![CDATA[
    public display ToDate displayToDate()
    {
        return this.displayToDatePrim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayToDatePrim</Name>
				<Source><![CDATA[
    public display ToDate displayToDatePrim(ReqSafetyKey reqSafetyKey = ReqSafetyKey::find(this.SafetyKeyId))
    {
        TransDate       breakEvenDate = reqSafetyKey.breakEvenDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        if (! this.Freq)
            return breakEvenDate;

        return this.toDate(breakEvenDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    public FromDate fromDate(TransDate breakEvenDate,ReqSafetyLine prevSafetyLine)
    {
        if (prevSafetyLine.RecId)
            return prevSafetyLine.toDate(breakEvenDate) + 1;

        return breakEvenDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.AllocateTransMap::setSort1980();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    public ToDate toDate(TransDate breakEvenDate)
    {
        return breakEvenDate + this.allocateDays(breakEvenDate) - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.AllocateTransMap::setSort1980();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record exists in the <c>ReqSafetyLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        return _recId &&
               (select firstonly RecId from reqSafetyLine
                    where reqSafetyLine.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ReqSafetyLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The specified record if found; otherwise, an empty buffer.
    /// </returns>
    public static ReqSafetyLine find(
        recId   _recId,
        boolean _forUpdate = false)
    {
        ReqSafetyLine reqSafetyLine;

        if (_recId)
        {
            reqSafetyLine.selectForUpdate(_forUpdate);

            select firstonly reqSafetyLine
                where reqSafetyLine.RecId == _recId;
        }

        return reqSafetyLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SYS124233</DeveloperDocumentation>
	<FormRef>ReqSafetyKey</FormRef>
	<Label>@SYS60203</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>SafetyKeyId</TitleField1>
	<TitleField2>FreqCode</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>KeyIdx</ClusteredIndex>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SafetyKeyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Sort1980</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Freq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreqCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SafetyFactor</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SafetyFactor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SafetyKeyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreqCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Freq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Sort1980</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Freq</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Periods</ExtendedDataType>
			<Label>@SYS5901</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FreqCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PeriodUnit</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SafetyFactor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqSafetyFactor</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SafetyKeyId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqSafetyKeyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Sort1980</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Date1980</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>KeyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SafetyKeyId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Sort1980</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>AllocateTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Sort1980</MapField>
					<MapFieldTo>Sort1980</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Freq</MapField>
					<MapFieldTo>Freq</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FreqCode</MapField>
					<MapFieldTo>FreqCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Id</MapField>
					<MapFieldTo>SafetyKeyId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqSafetyKey</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReqSafetyKey</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SafetyKeyId</Name>
					<Field>SafetyKeyId</Field>
					<RelatedField>SafetyKeyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>KeyIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>