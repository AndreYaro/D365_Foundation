<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSRouteSegmentLoad</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSRouteSegmentLoad extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignLoadLinesToRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns load lines to route segment.
    /// </summary>
    void assignLoadLinesToRoute()
    {
        WHSLoadLine             loadLine;
        TMSRouteSegmentLoadLine segmentLoadLine;

        ttsbegin;

        while select InventTransId, LoadId from loadLine
            where loadLine.LoadId == this.Id
        {
            segmentLoadLine.initFromSegment(this.tmsRouteSegment());
            segmentLoadLine.Id               = loadLine.LoadId;
            segmentLoadLine.LoadLineRecId    = loadLine.RecId;
            segmentLoadLine.InventTransId       = loadLine.InventTransId;
            if (!segmentLoadLine.validateWrite())
            {
                    throw error(strFmt("@TRX:TMSCannotInsertRecordInTable", tablePName(TMSRouteSegmentLoadLine)));
            }
            else
            {
                segmentLoadLine.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        WHSLoadId           loadId;
        WHSLoadTable        loadTable;

        loadId      = this.Id;

        super();

        if ((select count(RecId) from tmsRouteSegmentLoad where tmsRouteSegmentLoad.Id == loadId).RecId == 0)
        {
            loadTable = WHSLoadTable::find(loadId, true);

            if (loadTable.RecId != 0)
            {
                ttsbegin;
                loadTable.RouteCode = '';
                loadTable.CarbonEmission = 0.0;
                loadTable.CarbonEmissionUnit = '';
                loadTable.write();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNumberOfLoadLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays total number of load lines in the load assigned to the route segment.
    /// </summary>
    /// <returns>
    /// The total number of load lines assigned to the route segment.
    /// </returns>
    display TMSCurrentId displayNumberOfLoadLines()
    {
        return (select count(RecId) from tmsRouteSegmentLoadLine
                    where tmsRouteSegmentLoadLine.Id         == this.Id           &&
                          tmsRouteSegmentLoadLine.RouteCode  == this.RouteCode    &&
                          tmsRouteSegmentLoadLine.Sequence   == this.Sequence).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNumberOfShipments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays number of shipments for the load in the route segment.
    /// </summary>
    /// <returns>
    /// The number of shipments for the load in the route segment.
    /// </returns>
    display WHSFromNumber displayNumberOfShipments()
    {
        return WHSLoadTable::find(this.Id).displayNumberOfShipments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSegment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets route segment load record information based on segment
    /// </summary>
    /// <param name="_segment">
    /// Segment record
    /// </param>
    public void initFromSegment(TMSRouteSegment _segment)
    {
        this.RouteCode               = _segment.RouteCode;
        this.Sequence                = _segment.Sequence;
        this.OriginPostalCode        = _segment.originPostalAddress().ZipCode;
        this.DestinationPostalCode   = _segment.destinationPostalAddress().ZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (!this.RouteCode)
        {
            throw error(strFmt("@TRX:FieldIsMandatoryOnRecord", fieldPName(TMSRouteSegmentLoad, RouteCode), tablePName(TMSRouteSegmentLoad)));
        }

        ttsbegin;
        
        WHSLoadTable loadTable = WHSLoadTable::find(this.Id, true);

        this.AccountNum  = loadTable.AccountNum;
        this.OrderNum    = loadTable.OrderNum;

        super();

        if (loadTable.RecId != 0 && loadTable.RouteCode == '')
        {
            loadTable.RouteCode      = this.RouteCode;
            loadTable.CarrierCode    = this.tmsRoute().routeCarrier();

            if (loadTable.CarrierCode != '')
            {
                loadTable.CarrierServiceCode = this.tmsRoute().routeCarrierService();
            }

            loadTable.ModeCode = TMSCarrier::find(loadTable.CarrierCode).ModeCode;
            loadTable.LoadSchedShipUTCDateTime = this.tmsRouteSegment().ScheduledShipUTCDateTime;
            loadTable.write();

            this.AccountNum  = loadTable.AccountNum;
            this.OrderNum    = loadTable.OrderNum;
        }
        
        if ((select firstonly RecId from TMSRouteSegmentLoadLine
                where TMSRouteSegmentLoadLine.Id == this.Id).RecId == 0)
        {
            this.assignLoadLinesToRoute();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupUnassignedLoads</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup on loads that are unassigned or assigned to the current route.
    /// </summary>
    /// <param name="_ctrl">
    /// Form control.
    /// </param>
    void lookupUnassignedLoads(FormStringControl _ctrl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    qbdsSegmentLoad;
        QueryBuildRange         qbrLoadId;
        str                     filter;

        sysTableLookup          = SysTableLookup::newParameters(tableNum(WHSLoadTable), _ctrl);
        query                   = new Query();
        qbdsSegmentLoad         = query.addDataSource(tableNum(WHSLoadTable));

        sysTableLookup.addLookupfield(fieldNum(WHSLoadTable, LoadId));

        qbrLoadId = qbdsSegmentLoad.addRange(fieldNum(WHSLoadTable, RecId));
        filter = strFmt('((RouteCode == "%1") || (RouteCode == %2))', this.RouteCode, SysQuery::valueEmptyString());
        qbrLoadId.value(filter);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>TMSRoute</c> record using route code.
    /// </summary>
    /// <returns>
    /// The <c>TMSRoute</c> record.
    /// </returns>
    TMSRoute tmsRoute()
    {
        return TMSRoute::find(this.RouteCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsRouteSegment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>TMSRouteSegment</c> record using route code and segment sequence number.
    /// </summary>
    /// <param name="_forUpdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The <c>TMSRouteSegment</c> record.
    /// </returns>
    TMSRouteSegment tmsRouteSegment(boolean _forUpdate = false)
    {
        return TMSRouteSegment::find(this.RouteCode, this.Sequence, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if ((select count(RecId) from tmsRouteSegmentLoad
                where tmsRouteSegmentLoad.Id         == this.Id &&
                      tmsRouteSegmentLoad.RouteCode  != this.RouteCode).RecId > 0)
        {
            ret = checkFailed("@TRX674");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLoadTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the associated <c>WHSLoadTable</c> record using load id.
    /// </summary>
    /// <returns>
    /// The associated <c>WHSLoadTable</c> record.
    /// </returns>
    WHSLoadTable whsLoadTable()
    {
        return WHSLoadTable::find(this.Id);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>TMSRouteSegmentLoad</c> record exists.
    /// </summary>
    /// <param name="_tmsRouteCode">
    /// Route code of the record.
    /// </param>
    /// <param name="_tmsSequence">
    /// Sequence number of the record.
    /// </param>
    /// <param name="_tmsId">
    /// Associated load id of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(TMSRouteCode _tmsRouteCode,
                                TMSSequence  _tmsSequence,
                                TMSId        _tmsId)
    {
        return (_tmsRouteCode && _tmsSequence && _tmsId) &&
               (select firstonly tmsRouteSegmentLoad
                    where tmsRouteSegmentLoad.RouteCode == _tmsRouteCode &&
                      tmsRouteSegmentLoad.Sequence ==  _tmsSequence  &&
                      tmsRouteSegmentLoad.Id ==    _tmsId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>TMSRouteSegmentLoad</c> record using given parameters.
    /// </summary>
    /// <param name="_tmsRouteCode">
    /// Route code of the record.
    /// </param>
    /// <param name="_tmsSequence">
    /// Sequence number of the record.
    /// </param>
    /// <param name="_tmsId">
    /// Associated load id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static TMSRouteSegmentLoad find(TMSRouteCode _tmsRouteCode,
                                           TMSSequence  _tmsSequence,
                                           TMSId        _tmsId,
                                           boolean      _forupdate = false)
    {
        TMSRouteSegmentLoad    tmsRouteSegmentLoad;

        if (_tmsRouteCode &&
            _tmsSequence  &&
            _tmsId)
        {
            tmsRouteSegmentLoad.selectForUpdate(_forupdate);

            select firstonly tmsRouteSegmentLoad
                where tmsRouteSegmentLoad.RouteCode == _tmsRouteCode &&
                      tmsRouteSegmentLoad.Sequence ==  _tmsSequence  &&
                      tmsRouteSegmentLoad.Id ==    _tmsId;
        }

        return tmsRouteSegmentLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@TRX1965</DeveloperDocumentation>
	<Label>@TRX606</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>RouteCode</TitleField1>
	<TitleField2>Id</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RouteSegmentLoadIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Transportation</Modules>
	<PrimaryIndex>RouteSegmentLoadIdx</PrimaryIndex>
	<ReplacementKey>RouteSegmentLoadIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TMSRouteSegmentShipment</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TMSRouteSegmentShipment</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Id</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginPostalCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DestinationPostalCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Sequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillOfLadingId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookingNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoyageNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VesselName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InspectionSeal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HouseBill</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ETA</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportationOrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RailUTCDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Sequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Id</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Id</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginPostalCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DestinationPostalCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Sequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillOfLadingId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookingNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoyageNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VesselName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InspectionSeal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HouseBill</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ETA</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportationOrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RailUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SailUTCDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAccountNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BillOfLadingId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSBillOfLadingId</ExtendedDataType>
			<Label>@SYS50740</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookingNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSBookingNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DestinationPostalCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSPostalCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ETA</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSETA</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HouseBill</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSHouseBill</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Id</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InspectionSeal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSInspectionSeal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOrderNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OriginPostalCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSPostalCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>RailUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRailUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RouteCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRouteCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>SailUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSSailUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Sequence</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSSequence</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransportationOrderNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSTransportationOrderNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VesselName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSVesselName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VoyageNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSVoyageNum</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RouteSegmentLoadIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RouteCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Sequence</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Id</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>TMSRoute</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TMSRoute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteCode</Name>
					<SourceEDT>TMSRouteCode</SourceEDT>
					<Field>RouteCode</Field>
					<RelatedField>RouteCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSRouteSegment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TMSRouteSegment</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteCode</Name>
					<SourceEDT>TMSRouteCode</SourceEDT>
					<Field>RouteCode</Field>
					<RelatedField>RouteCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Sequence</Name>
					<SourceEDT>TMSSequence</SourceEDT>
					<Field>Sequence</Field>
					<RelatedField>Sequence</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSLoadTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSLoadTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Id</Name>
					<Field>Id</Field>
					<RelatedField>LoadId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>LoadIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>