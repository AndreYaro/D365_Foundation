<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanProductionFlowCosting</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LeanProductionFlowCosting extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayProductionFlowName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the production flow name for the current record in the <c>LeanProductionFlowCosting</c> table.
    /// </summary>
    /// <returns>
    /// The production flow name; otherwise, an empty string.
    /// </returns>
    public display PlanName displayProductionFlowName()
    {
        // check if the user has access to the field
        if (!hasFieldAccess(tableNum(PlanReference), fieldNum(PlanReference, PlanName)))
        {
            return '';
        }

        return PlanReference::find(LeanProductionFlowReference::find(this.LeanProductionFlowReference).PlanReference).PlanName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the trans ref id for the <c>LeanProductionFlowCosting</c> record.
    /// </summary>
    /// <returns>
    /// The trans ref id.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// This function cannot be used when the recId has not been set yet.
    /// </exception>
    public CostTransRefId getTransRefId()
    {
        LeanProductionFlowCosting       costing;

        if (!this.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!this.TransRefId)
        {
            costing.data(this);

            ttsbegin;
            select firstonly forupdate * from this where this.RecId == this.RecId;
            this.TransRefId = int642str(this.RecId);
            // In case where some of the fields has been changed but not written yet, set them again.
            this.Status = costing.Status;
            this.Voucher = costing.Voucher;
            this.doUpdate();
            ttscommit;
        }

        return this.TransRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInfolog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether an infolog is associated to this production flow costing.
    /// </summary>
    /// <returns>true if an infolog is associated to the production flow costing; otherwise, false.</returns>
    display LeanProductionFlowCostingHasInfolog hasInfolog()
    {
        return this.Infolog != conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInfolog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the infolog messages for the current production flow costing.
    /// </summary>
    public void showInfolog()
    {
        BOMCalcInfoAction   bomCalcInfoAction;
        int                 oldInfologLen;
        int                 infoLogEntryIndex, start, end, infoLogContainerLength;
        container           infoLogContainer, currentEntry;
        int                 entryLen, entryType;
        str                 entryText;

        infoLogContainer = this.Infolog;
        infoLogContainerLength = conLen(infoLogContainer);

        // Must have at least one element
        if (infoLogContainerLength == 0)
        {
            return;
        }

        // first element is a container with one integer element (version)
        if (   typeOf(conPeek(infoLogContainer, 1)) != Types::Container
            || conLen(conPeek(infoLogContainer, 1)) != 1
            || typeOf(conPeek(conPeek(infoLogContainer, 1), 1)) != Types::Integer)
        {
            return;
        }

        // Save the current number of entries
        oldInfologLen = infolog.num();

        // append to the info log
        for (infoLogEntryIndex = 2; infoLogEntryIndex <= infoLogContainerLength; infoLogEntryIndex++)
        {
            // each entry is a container
            if (typeOf(conPeek(infoLogContainer, infoLogEntryIndex)) != Types::Container)
            {
                break;
            }

            // Get the current entry
            currentEntry = conPeek(infoLogContainer, infoLogEntryIndex);

            // Get the current entry length
            entryLen = conLen(currentEntry);

            // entries can be formatted in 2 ways
            // 1. [exceptionType, Text]
            // 2. [exceptionType, Text, helpUrl, actionClassId, action]
            if (    entryLen != 2
                && entryLen != 5)
            {
                break;
            }

            // Validate types
            if (   typeOf(conPeek(currentEntry, 1)) != Types::Integer
                || typeOf(conPeek(currentEntry, 2)) != Types::String)
            {
                break;
            }

            // Extract the first 2 values in the entry
            entryType = conPeek(currentEntry, 1);
            entryText = conPeek(currentEntry, 2);

            // Add the entry to the current infolog
            infolog.add(entryType, entryText);
        }

        // Revert in the case of failure
        if (infoLogEntryIndex < infoLogContainerLength)
        {
            start = oldInfologLen + 1;
            end   = oldInfologLen + infoLogEntryIndex - 2;

            if (start >= infolog.num())
            {
                infolog.cut(start, end);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LeanProductionFlowCosting</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecID</c> value of the <c>LeanProductionFlowCosting</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>LeanProductionFlowCosting</c> record.
    /// </returns>
    static LeanProductionFlowCosting find(RecId _recId, boolean _forupdate = false)
    {
        LeanProductionFlowCosting leanProdFlowCosting;

        leanProdFlowCosting.selectForUpdate(_forupdate);

        select leanProdFlowCosting where leanProdFlowCosting.RecId == _recId;

        return leanProdFlowCosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndDateTimeForLastEnded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ending date of the last ended backflush costing calculation period.
    /// </summary>
    /// <param name="_leanProductionFlowReferenceRecId">
    /// The record ID of the production flow reference for which to return the last end date.
    /// </param>
    /// <param name="_currentDate">
    /// The date of reference.
    /// </param>
    /// <returns>
    /// The ending date of the last ended backflush costing calculation period.
    /// </returns>
    public static ToDateTime getEndDateTimeForLastEnded(
        RefRecId    _leanProductionFlowReferenceRecId,
        TransDate   _currentDate)
    {
        #TimeConstants
        TransDate   transDate = LeanProductionFlowCosting::lastEndedToDate(_leanProductionFlowReferenceRecId,_currentDate);

        return transDate ?
            DateTimeUtil::newDateTime(transDate, #secondsPerDay-1) :
            DateTimeUtil::minValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastEndedToDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ending date of the last ended backflush costing calculation period for a given production flow.
    /// </summary>
    /// <param name="_leanProductionFlowReferenceRecId">
    ///    The record ID value of the production flow reference for which to return the last end date.
    /// </param>
    /// <param name="_currentDate">
    ///    The date of reference.
    /// </param>
    /// <returns>
    ///    The ending date of the last ended backflush costing calculation period; otherwise an empty date.
    /// </returns>
    public static TransDate lastEndedToDate(
        RefRecId    _leanProductionFlowReferenceRecId,
        TransDate   _currentDate)
    {
        LeanCosting                 leanCosting;
        LeanProductionFlowCosting   leanProductionFlowCosting;

        select firstonly ToDate from leanCosting
            order by leanCosting.ToDate desc
                where leanCosting.ToDate <= _currentDate
            exists join leanProductionFlowCosting
                where leanProductionFlowCosting.LeanCosting                 == leanCosting.RecId
                   && leanProductionFlowCosting.LeanProductionFlowReference == _leanProductionFlowReferenceRecId
                   && leanProductionFlowCosting.Status                      == LeanProductionFlowCostingStatus::Ended;

        return leanCosting.ToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>LeanCosting</Name>
				<Source><![CDATA[
    public LeanCosting LeanCosting(LeanCosting _relatedTable = null)
        {
            if (prmIsDefault(_relatedTable))
            {
                return this.setLink('LeanCosting');
            }
            else
            {
                return this.setLink('LeanCosting', _relatedTable);
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>IsEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get empty status of table LeanProductionFlowCosting.
    /// </summary>
    /// <returns>
    ///    The empty status of table LeanProductionFlowCosting.
    /// </returns>
    public static boolean IsEmpty()
    {
        LeanProductionFlowCosting   leanProductionFlowCosting;

        select firstonly leanProductionFlowCosting;

        if (leanProductionFlowCosting.RecId)
        {
            return false;
        }
        
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS323991</DeveloperDocumentation>
	<Label>@SYS190009</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Voucher</TitleField1>
	<TitleField2>Status</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductionControl</Modules>
	<OccEnabled>No</OccEnabled>
	<ReplacementKey>ProductionFlowCostingIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LeanProductionFlowCostingUnusedQty</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LeanProductionFlowCostingUnusedQty</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LeanCosting</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeanProductionFlowReference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS35894</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayProductionFlowName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>hasInfolog</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LeanCosting</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanCostingRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LeanProductionFlowReference</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanProductionFlowReferenceRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LeanProductionFlowCostingStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostTransRefId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>Infolog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InfologData</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProductionFlowCostingIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LeanCosting</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LeanProductionFlowReference</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LeanProductionFlowReferenceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LeanProductionFlowReference</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LeanCosting</Name>
			<Cardinality>OneMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<RelatedTable>LeanCosting</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LeanCosting</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionFlowCosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LeanCosting</Name>
					<Field>LeanCosting</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LeanProductionFlowReference</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LeanProductionFlowReference</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionFlowReference</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionFlowCosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LeanProductionFlowReference</Name>
					<Field>LeanProductionFlowReference</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>