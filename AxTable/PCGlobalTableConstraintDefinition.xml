<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCGlobalTableConstraintDefinition</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCGlobalTableConstraintDefinition extends PCTableConstraintDefinition
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        PCTableConstraintGlobalColumnDef    column;
        PCTableConstraintRow                row;

        _visitor.visitStart(this);

        // ordering by rec id is also used when visiting the cells to ensure that the cell values will align with columns
        while select column
        order by column.RecId
        where column.TableConstraintDefinition == this.RecId
        {
            column.accept(_visitor);
        }

        while select row
        where row.TableConstraintDefinition == this.RecId
        {
            row.accept(_visitor);
        }

        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDataTypeByColumnName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data type of a column by its name.
    /// </summary>
    /// <param name="_columnName">
    ///    The name of a column to retrieve.
    /// </param>
    /// <returns>
    ///    A <c>AttributeDataType</c> value.
    /// </returns>
    public AttributeDataType findDataTypeByColumnName(PCTableConstraintColumnName _columnName)
    {
        EcoResAttributeType                 domain;
        PCTableConstraintGlobalColumnDef    column;

        select firstonly DataType from domain
            join RecId from column
            where domain.RecId == column.AttributeType &&
                    column.TableConstraintDefinition == this.RecId &&
                    column.Name == _columnName;
        return domain.DataType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a column to a table constraint that is user-defined.
    /// </summary>
    /// <param name="_tableConstraintColumn">
    /// A record ID of a table constraint column.
    /// </param>
    public static void addColumn(RefRecId _tableConstraintColumn)
    {
        PCGlobalTableConstraintDefinition       tableConstraint;
        PCTableConstraintRow                    row;
        PCTableConstraintCell                   cell;
        PCTableConstraintGlobalColumnDef        column;
        EcoResAttributeType                     domain;
        EcoResEnumerationAttributeTypeValue     enumRelation;
        EcoResIntValue                          cellValueInt;
        EcoResTextValue                         cellValueText;
        EcoResBooleanValue                      cellValueBool;
        EcoResBoundedAttributeTypeValue         limitRelation;

        void insertContent(EcoResValue _value)
        {
            ttsbegin;

            while select RecId from row
                where row.TableConstraintDefinition == tableConstraint.RecId
            {
                // insert new cell values for bool and integer
                if (!(_value is EcoResTextValue))
                {
                    _value.insert();
                }

                cell.clear();
                cell.TableConstraintRow                 = row.RecId;
                cell.TableConstraintColumnDefinition    = column.RecId;
                cell.Value                              = _value.RecId;
                cell.insert();
            }
            ttscommit;
        }

        select firstonly RecId from tableConstraint
            join RecId, AttributeType from column
                where   column.TableConstraintDefinition    == tableConstraint.RecId &&
                        column.RecId                        == _tableConstraintColumn;

        domain = EcoResAttributeType::find(column.AttributeType);

        switch (domain.DataType)
        {
            // enum
            case AttributeDataType::Text        :
                select firstonly cellValueText
                        join RecId from enumRelation
                        where   enumRelation.Value  == cellValueText.RecId  &&
                                enumRelation.AttributeType == column.AttributeType;

                insertContent(cellValueText);

                break;
            case AttributeDataType::Integer     :
                select firstonly cellValueInt
                    join RecId from limitRelation
                    where   limitRelation.LowerBound == cellValueInt.RecId &&
                            limitRelation.AttributeType     == column.AttributeType;

                insertContent(cellValueInt);

                break;
            case AttributeDataType::TrueFalse   :
                cellValueBool.BooleanValue = NoYes::No;
                cellValueBool.insert();

                insertContent(cellValueBool);

                break;
            default:
                if (!PCGlobalTableConstraintDefinition::addColumnDefault(_tableConstraintColumn))
                {
                    error(Error::wrongUseOfFunction(funcName()));
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addColumnDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a column to a table constraint that is user-defined.
    /// </summary>
    /// <param name="_tableConstraintColumn">
    ///     A record ID of a table constraint column.
    /// </param>
    [Replaceable]
    protected static boolean addColumnDefault(RefRecId _tableConstraintColumn)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record of the <c>PCGlobalTableConstraintDefinition</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if a record with the provided ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCGlobalTableConstraintDefinition::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record from the <c>PCGlobalTableConstraintDefinition</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCGlobalTableConstraintDefinition</c> table; otherwise, an empty buffer.
    /// </returns>
    public static PCGlobalTableConstraintDefinition find(RefRecId _recId, boolean _forupdate = false)
    {
        PCGlobalTableConstraintDefinition record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasContent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a table constraint that is user-defined has associated content.
    /// </summary>
    /// <param name="_tableConstraintDefinition">
    ///    The record ID of a table constraint.
    /// </param>
    /// <returns>
    ///    A <c>NoYes::Yes</c> enumeration value if the constraint has content; otherwise, a <c>NoYes::No</c>
    ///    enumeration value.
    /// </returns>
    public static NoYes hasContent(RefRecId _tableConstraintDefinition)
    {
        PCTableConstraintRow    row;
        NoYes                   ret = NoYes::No;

        select firstonly RecId from row
            where row.TableConstraintDefinition == _tableConstraintDefinition;

        if (row.RecId)
        {
            ret = NoYes::Yes;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS332815</DeveloperDocumentation>
	<Label>@SYS191272</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>RecId</TitleField1>
	<TitleField2>TableId</TitleField2>
	<Extends>PCTableConstraintDefinition</Extends>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PCTableConstraintRow</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PCTableConstraintRow</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields />
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TableConstraintDefinition_PCGlobal</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PCTableConstraintDefinition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TableConstraintDefinition</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Role>UserDefinedTableConstraintDefinition</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>