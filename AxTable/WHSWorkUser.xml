<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkUser</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkUser extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateOnlyOneDefaultUserPerWorker</Name>
				<Source><![CDATA[
    private void validateOnlyOneDefaultUserPerWorker()
    {
        if (WhsMobileAutoLoginFlight::instance().isEnabled() &&
            this.IsDefaultWorkUser &&
            this.isAnotherWorkUserDefaultWorkUser())
        {            
            throw error("@WAX:WhsWorkUserMultipleDefaultUsersMessage");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnotherWorkUserDefaultWorkUser</Name>
				<Source><![CDATA[
    private boolean isAnotherWorkUserDefaultWorkUser()
    {
        WHSWorkUser workUser;

        select firstonly RecId from workUser
            where workUser.Worker == this.Worker &&
                  workUser.RecId != this.RecId &&
                  workUser.IsDefaultWorkUser == NoYes::Yes;

        return workUser.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (!this.UserGuid)
        {
            this.UserGuid = newGuid();
        }
        
		super();

        if (this.UserDefaultWarehouse && (!WHSWorkUserWarehouse::exist(this.UserId, this.UserDefaultWarehouse)))
        {
            WHSWorkUserWarehouse userWarehouse;
            ttsbegin;
            userWarehouse.UserId            = this.UserId;
            userWarehouse.InventLocationId  = this.UserDefaultWarehouse;
            userWarehouse.insert();
            ttscommit;
        }

        this.validateOnlyOneDefaultUserPerWorker();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserIdAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the userId being written to the table is not
    ///     already in use by another worker.
    /// </summary>
    /// <returns>
    ///     True if the userId is not already in use; otherwise, false.
    /// </returns>
    public boolean isUserIdAvailable()
    {
        WHSWorkUser workUser;
        WHSWorker   worker;
        boolean     ret = true;

        workUser = WHSWorkUser::find(this.UserId);
        worker = WHSWorker::find(workUser.Worker);

        if (workUser)
        {
            // Check to see if userID belongs to another worker
            if (workUser.Worker != this.Worker)
            {
                ret = checkFailed(strFmt("@WAX5597", worker.name()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUserLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the user location already exists with non-user location profile.
    /// </summary>
    /// <returns>
    ///     True if the userId related location exists with non-user location profile; otherwise, false.
    /// </returns>
    public boolean validateUserLocation()
    {
        WHSParameters whsParameters = WHSParameters::find();
        WMSLocation   location = WMSLocation::find(this.UserId, this.UserDefaultWarehouse);
        boolean       ret = true;

        if (location && location.LocProfileId != whsParameters.UserLocType)
        {
            ret = checkFailed(strFmt("@WAX:WorkerLocationProfileDoesNotMatchError", this.UserDefaultWarehouse, this.UserId, location.LocProfileId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        WHSUserDefaultWarehouse prevInventLocationId = this.orig().UserDefaultWarehouse;
        WHSMenuName prevMenuName = this.orig().MenuName;

        ttsbegin;

        super();

        if (this.UserDefaultWarehouse && prevInventLocationId != this.UserDefaultWarehouse)
        {
            // Create the User Location in the new Warehouse.
            WMSLocation location = WMSLocation::find(this.UserId, this.UserDefaultWarehouse, true);
            if (!location)
            {
                if (WHSUsersCreationMissingLocationProfileSetupErrorFlight::instance().isEnabled() &&
                    !WHSParameters::find().UserLocType)
                {
                    throw error("@WAX:LocationProfileSetupMissing");
                }

                location.InventLocationId = this.UserDefaultWarehouse;
                location.wmsLocationId = this.UserId;
                location.LocProfileId = WHSParameters::find().UserLocType;
                location.AisleId = WMSLocation::whsDefaultAisle();
                location.write();
            }

            // Add the new Warehouse to the Users Allowed Warehouses list.
            if (!WHSWorkUserWarehouse::exist(this.UserId, this.UserDefaultWarehouse))
            {
                WHSWorkUserWarehouse userWarehouse;
                userWarehouse.UserId = this.UserId;
                userWarehouse.InventLocationId  = this.UserDefaultWarehouse;
                userWarehouse.insert();
            }
        }

        if (prevMenuName != this.MenuName)
        {
            // User access permissions has changed. His session must get updated.
            WHSWorkUserSession::resetNavigation(this.UserId);
        }

        this.validateOnlyOneDefaultUserPerWorker();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WHSWorkUser, UserDefaultWarehouse):
                InventLocation inventLocation = InventLocation::find(this.UserDefaultWarehouse);

                if (inventLocation)
                {
                    if (!inventLocation.whsEnabled)
                    {
                        ret = checkFailed("@WAX4825");
                    }
                }
                break;

            case fieldNum(WHSWorkUser, IsDefaultWorkUser):
            
                if (this.IsDefaultWorkUser && 
                    this.isAnotherWorkUserDefaultWorkUser())
                {
                    ret = checkFailed("@WAX:WhsWorkUserMultipleDefaultUsersMessage");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        ret = ret && this.isUserIdAvailable();

        if (WHSWorkUserCreationLocationValidationFlight::instance().isEnabled())
        {
            ret = ret && this.validateUserLocation();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to determine if a work user is allowed to override the location of a work step.
    /// </summary>
    /// <param name="_userId">
    /// The user id of work user.
    /// </param>
    /// <param name="_workType">
    /// The type of work step the user is attempting to override.
    /// </param>
    /// <returns>
    /// true if the user is allowed to override the work step; otherwise false.
    /// </returns>
    public static boolean allowOverride(WHSUserId _userId, WHSWorkType _workType)
    {
        WHSWorkUser whsWorkUser;

        whsWorkUser = WHSWorkUser::find(_userId);

        return whsWorkUser.RecId != 0
            && ((_workType == WHSWorkType::Pick && whsWorkUser.AllowLocOverridePick)
            ||  (_workType == WHSWorkType::Put  && whsWorkUser.AllowLocOverridePut));
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowOverpick</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean allowOverpick(WHSWorkTransType _workTransType)
    {
        return (this.AllowOverpickSales == NoYes::Yes && _workTransType == WHSWorkTransType::Sales)
            || (this.AllowOverpickTransfer == NoYes::Yes && _workTransType == WHSWorkTransType::TransferIssue)
            || (this.AllowOverpickProduction == NoYes::Yes && _workTransType == WHSWorkTransType::ProdPick && WHSProductionRawMaterialOverpickingFlight::instance().isEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>changePassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes a work user's password.
    /// </summary>
    /// <param name="_workUser">
    /// The work user whose password will be updated. It is expected that the parameter is selected for update.
    /// </param>
    /// <param name="_newPassword">
    /// The new password for the work user.
    /// </param>
    public static void changePassword(
        WHSWorkUser _workUser,
        str         _newPassword)
    {
        // Validate user permissions
        if (!WHSWorker::allowUserToChangePassword(WHSWorker::findByWorker().Worker, WHSWorker::find(_workUser.Worker).Worker))
        {
            throw error("@SYS4001509");
        }

        _workUser.validatePasswordStrength(_newPassword);

        ttsbegin;
        _workUser.initializePassword(_newPassword);
        _workUser.write();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePassword</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the new password.
    /// </summary>
    /// <param name = "_newPassword">The new password.</param>
    protected void initializePassword(str _newPassword)
    {
        #WHSRF
        this.UserPasswordIterations = #PswdKeyGenFuncIterations;
        this.UserPasswordSalt = CryptoServiceProvider::generateSalt();
        this.UserPasswordHash = CryptoServiceProvider::computeSaltedHash(_newPassword, this.UserPasswordSalt, this.UserPasswordIterations);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePasswordStrength</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a password's strength.
    /// </summary>
    /// <param name = "_newPassword">The password.</param>
    protected void validatePasswordStrength(str _newPassword)
    {
        // Validate password is not blank.
        if (!_newPassword)
        {
            throw error("@WAX820");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureUserGuidPopulated</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates a new guid and populates the <c>WhsWorkUser</c> guid if it was not done before
    /// </summary>
    /// <param name = "_userId">
    ///     Id of the WhsWorkUser whose guid will be checked
    /// </param>
    [SysObsolete('User guid is now assigned during insert', true, 31\10\2022)]
    public static void ensureUserGuidPopulated(WHSUserId _userId)
    {
        ttsbegin;
        WHSWorkUser user = WHSWorkUser::find(_userId, true);

        if (user && user.UserGuid == emptyGuid())
        {
            user.UserGuid = newGuid();
            user.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerSysUserRelationObjectId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     If there is a SysUser related to the worker associated with the <c>WhsWorkUser</c> then
    ///     return the <c>ObjectId</c> (Telemetry ID) from that SysUser
    /// </summary>
    public guid getWorkerSysUserRelationObjectId()
    {
        SysGlobalObjectCache cache = classFactory.globalObjectCache();
		container            cacheKey = [curext(), this.Worker];

		var result = cache.find(funcName(), cacheKey);
		if (result == conNull())
		{
			DirPersonUser dirPersonUser = DirPersonUser::findParty(this.getHcmWorker().Person);
			UserInfo userInfo = xUserInfo::find(false, dirPersonUser.User);
			result = [userInfo.ObjectId];
			cache.insert(funcName(), cacheKey, result);
		}
		return conPeek(result, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if a specific <c>whsWorkUser</c> record exists.
	/// </summary>
	/// <param name="_userId">
	/// User id of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(WHSUserId _userId)
    {
        return _userId &&
               (select firstonly RecId from whsWorkUser
                where whsWorkUser.UserId == _userId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSWorkUser</c> record with given parameters.
	/// </summary>
	/// <param name="_userId">
	/// User id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSWorkUser find(
        WHSUserId   _userId,
        boolean     _forupdate = false)
    {
        WHSWorkUser    workUser;

        if (_userId)
        {
            workUser.selectForUpdate(_forupdate);

            select firstonly workUser
                where workUser.UserId == _userId;
        }

        return workUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultMenu</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to get the default RF menu for a work user.
    /// </summary>
    /// <param name="_userId">
    /// The work user whose default menu we are getting.
    /// </param>
    /// <returns>
    /// The name of the default RF menu for the user.
    /// </returns>
    public static WHSMenuName getDefaultMenu(WHSUserId _userId)
    {
        WHSWorkUser         workUser;

        select firstonly MenuName from workUser
            where workUser.UserId == _userId;

        return workUser.MenuName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>WHSWorker</c> form for a given work user.
    /// </summary>
    /// <param name="_id">
    /// The user ID.
    /// </param>
    /// <param name="_object">
    /// The caller form.
    /// </param>
    static void jumpRef(str _id, Object _object)
    {
        Args                    args;
        WHSWorkUser             workUser;
        WHSWorker               worker;

        workUser   = WHSWorkUser::find(_id);
        worker     = WHSWorker::find(workUser.Worker);

        args    = new Args();
        args.record(worker);
        args.caller(_object);
        args.parm(_id);

        new MenuFunction(menuitemDisplayStr(WHSWorker), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        WMSLocation userLocation;

        super();

        delete_from userLocation
            where userLocation.wmsLocationId == this.UserId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWorkInProcess</Name>
				<Source><![CDATA[
    private boolean hasWorkInProcess()
    {
        WHSWorkTable    whsWorkTable;
        WHSWorkLine     whsWorkLine;

        select firstOnly whsWorkTable
            where whsWorkTable.LockedUser == this.UserId
            && whsWorkTable.WorkStatus != WHSWorkStatus::Cancelled
            && whsWorkTable.WorkStatus != WHSWorkStatus::Closed;

        select firstOnly whsWorkLine
            where whsWorkLine.UserId == this.UserId
            && whsWorkLine.WorkStatus != WHSWorkStatus::Cancelled
            && whsWorkLine.WorkStatus != WHSWorkStatus::Closed;

        return whsWorkTable || whsWorkLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (this.hasWorkInProcess()) // Check if work user has any work in process     
        {
            ret = checkFailed("@SYS4160095");
        }

        if (WHSWorkUserSession::exist(this.UserId)) // Check if there is an active session for work user
        {
            ret = checkFailed("@WAX:UserCannotBeDeletedOpenUserSession");
        }

        if (this.UserDefaultWarehouse) // If the user has a default warehouse, check on hand and open transactions for all warehouses they are allowed in.
        {
            Set warehouses = this.userAssignedWarehouses(); // Create and populate a set of all warehouses the user can work in

            SetEnumerator se = warehouses.getEnumerator();

            while (se.moveNext()) // Loop through all warehouses the user can work in
            {         
                ret = this.validateUserLocationDeletionForWarehouse(se.current()) && ret;
            }
       }        

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveWorkUserLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the language ID of a work user.
    /// </summary>
    /// <param name="_whsUserId">
    /// The ID of work user for whom to retrieve the language.
    /// </param>
    /// <returns>
    /// The language ID.
    /// </returns>
    public static LanguageId retrieveWorkUserLanguage(WHSUserId _whsUserId)
    {
        WHSWorkUser     whsWorkUser;
        WHSWorker       whsWorker;
        HcmWorker       hcmWorker;
        DirPerson       dirPerson;
        DirPersonUser   dirPersonUser;
        UserInfo        userInfo;

        select firstOnly language from userInfo
            exists join dirPersonUser
            where dirPersonUser.User == userInfo.id
                exists join dirPerson
                where dirPerson.RecId == dirPersonUser.PersonParty
                    exists join hcmWorker
                    where hcmWorker.Person == dirPerson.RecId
                        exists join whsWorker
                        where whsWorker.Worker == hcmWorker.RecId
                            exists join whsWorkUser
                            where whsWorkUser.Worker == whsWorker.RecId &&
                                whsWorkUser.UserId == _whsUserId;

        return userInfo.language != '' ? userInfo.language : infolog.language();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHcmWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>HcmWorker</c> record associated with the current work user.
    /// </summary>
    /// <returns>
    /// A <c>HcmWorker</c> record.
    /// </returns>
    public HcmWorker getHcmWorker()
    {
        var whsWorker = WHSWorker::find(this.Worker);

        return HcmWorker::find(whsWorker.Worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerPersonImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the picture of the person linked to the current work user.
    /// </summary>
    /// <returns>
    /// A container, which is a packed <c>ImageReference</c>, containing the person's image.
    /// </returns>
    /// <remarks>
    /// Returns a generic person image, if the worker is not found or does not have a picture.
    /// </remarks>
    public container workerPersonImage()
    {
        var hcmWorker = this.getHcmWorker();

        return hcmWorker.personImage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirPerson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>DirPerson</c> record associated with the current work user.
    /// </summary>
    /// <returns>
    /// A <c>DirPerson</c> record.
    /// </returns>
    public DirPerson getDirPerson()
    {
        var hcmWorker = this.getHcmWorker();

        return hcmWorker.DirPerson();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerEmployeeRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the RecId of a work user.
    /// </summary>
    /// <param name="_userId">
    /// The ID of work user.
    /// </param>
    /// <returns>
    /// Worker RecId.
    /// </returns>
    public static HcmWorkerRecId getWorkerEmployeeRecId(WHSUserId _userId)
    {
        return WHSWorker::find(WHSWorkUser::find(_userId).Worker).Worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTelemetryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string representation of the user telemetry Id.
    /// </summary>
    /// <param name = "_userId">
    /// Worker login name.
    /// </param>
    /// <returns>
    /// Telemetry Id for the specified worker.
    /// </returns>
    internal static str getTelemetryId(WHSUserId _userId)
    {
        return guid2Str(WHSWorkUser::find(_userId).UserGuid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>userAssignedWarehouses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add all warehouses the user is allowed to work in to the set.
    /// </summary>
    /// <returns>A set with all allowed warehouses added.</returns>
    private Set userAssignedWarehouses()
    {
        Set                  warehouses = new Set(Types::String);
        WHSWorkUserWarehouse workUserWarehouse;

        while select workUserWarehouse
            where workUserWarehouse.UserId == this.UserId
        {
            warehouses.add(workUserWarehouse.InventLocationId);
        }

        return warehouses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUserLocationDeletionForWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensure the user location has no open transactions or inventory that should prevent deletion of the user.
    /// </summary>
    /// <param name = "_inventLocationId">The warehouse being checked.</param>
    /// <returns>True if user deletion should be allowed, otherwise false.</returns>
    private boolean validateUserLocationDeletionForWarehouse(InventLocationId _inventLocationId)
    {
        boolean     ret = true;
        WMSLocation userLocation = WMSLocation::find(this.UserId, _inventLocationId);

        if (userLocation && userLocation.hasOpenInventSumQuantity()) // Check if there are no open transactions for the user location
        {
            ret = checkFailed(strFmt("@WAX:UserCannotBeDeletedOpenTransactionForUserLocation", userLocation.inventLocationId));
        }

        if (!userLocation.whsLocationIdEmptyIncludeDelta(false)) // Check if there is no physical inventory on the user location
        {
            ret = checkFailed(strFmt("@WAX:UserCannotBeDeletedOnHandExistsOnUserLocation", userLocation.inventLocationId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSharingWorker</Name>
				<Source><![CDATA[
    internal boolean isSharingWorker()
    {
        WHSWorkUser workUser;
        
        select count(RecId) from workUser
            where workUser.Worker == this.Worker;

        return workUser.RecId > 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4521</DeveloperDocumentation>
	<FormRef>WHSWorker</FormRef>
	<Label>@WAX443</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>UserName</TitleField1>
	<TitleField2>UserId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>UserIdIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>UserIdIdx</PrimaryIndex>
	<ReplacementKey>UserIdIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCountMaxQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCountMaxValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCountMaxPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserDefaultWarehouse</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MenuName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCountIsSupervisor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowLocOverridePick</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowLocOverridePut</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowInventoryMovementWithAssociatedWork</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Disabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCountMaxQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCountMaxValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCountMaxPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserDefaultWarehouse</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MenuName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCountIsSupervisor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowLocOverridePick</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowLocOverridePut</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Disabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserPasswordHash</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserPasswordSalt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserPasswordIterations</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowOverpickSales</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowOverpickTransfer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowInventoryMovementWithAssociatedWork</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExtendedWorkPolicies</Name>
			<Label>@WAX411</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowLocOverridePick</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowLocOverridePut</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowOverpickSales</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowOverpickTransfer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowOverpickProduction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowInventoryMovementWithAssociatedWork</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowManualItemReallocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkAdjustmentMaxQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowLocOverridePick</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowLocOverridePick</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowLocOverridePut</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowLocOverridePut</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Disabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDisabled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MenuName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMenuName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserDefaultWarehouse</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUserDefaultWarehouse</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WHSUserId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserName</Name>
			<AssetClassification>End User Identifiable Information (EUII)</AssetClassification>
			<ExtendedDataType>WHSUserName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserPasswordHash</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Access Control Data</AssetClassification>
			<ExtendedDataType>WHSUserPasswordHash</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>UserPasswordIterations</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUserPasswordIterations</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserPasswordSalt</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Access Control Data</AssetClassification>
			<ExtendedDataType>WHSUserPasswordSalt</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkCountIsSupervisor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkCountIsSupervisor</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WorkCountMaxPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkCountMaxPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WorkCountMaxQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkCountMaxQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WorkCountMaxValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkCountMaxValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WHSWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowOverpickSales</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowOverpickSales</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowOverpickTransfer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowOverpickTransfer</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowOverpickProduction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowOverpickProduction</ExtendedDataType>
			<FeatureClass>WHSProductionRawMaterialOverpickingFlight</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowInventoryMovementWithAssociatedWork</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowInventoryMovementWithAssociatedWork</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowManualItemReallocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowManualItemReallocation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AuthenticationFailures</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAuthenticationFailureCount</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>UserGuid</Name>
			<AssetClassification>End User Pseudonymous Information (EUPI)</AssetClassification>
			<ExtendedDataType>WhsUserGuid</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowAdjustmentsFromUserLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowAdjustFromUserLocation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WorkAdjustmentMaxQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAdjustmentMaxQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDefaultWorkUser</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WhsWorkUserIsDefaultUser</ExtendedDataType>
			<FeatureClass>WhsMobileAutoLoginFlight</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>UserIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>UserId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserDefaultWarehouse</Name>
					<SourceEDT>WHSUserDefaultWarehouse</SourceEDT>
					<Field>UserDefaultWarehouse</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSRFMenuTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSRFMenuTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MenuName</Name>
					<SourceEDT>WHSMenuName</SourceEDT>
					<Field>MenuName</Field>
					<RelatedField>MenuName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>