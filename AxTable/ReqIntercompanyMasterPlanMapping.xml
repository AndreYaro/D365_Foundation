<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqIntercompanyMasterPlanMapping</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqIntercompanyMasterPlanMapping extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearCustomerPlanIdIfNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the master plan reference if the customer company has been changed.
    /// </summary>
    private void clearCustomerPlanIdIfNeeded()
    {
        if (this.CustomerDataAreaId != this.orig().CustomerDataAreaId)
        {
            this.CustomerPlanId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustomerPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the current record from the customer master plan.
    /// </summary>
    /// <param name="_customerPlan">
    ///     The customer master plan record.
    /// </param>
    public void initFromCustomerPlan(ReqPlanSched _customerPlan)
    {
        this.CustomerPlanId = _customerPlan.ReqPlanIdSched;
        this.CustomerDataAreaId = _customerPlan.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPlans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the current record from the vendor and customer plans.
    /// </summary>
    /// <param name="_vendorPlan">
    ///     The vendor master plan.
    /// </param>
    /// <param name="_customerPlan">
    ///     The customer master plan.
    /// </param>
    public void initFromPlans(ReqPlanSched _vendorPlan, ReqPlanSched _customerPlan)
    {
        this.initFromVendorPlan(_vendorPlan);
        this.initFromCustomerPlan(_customerPlan);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendorPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the current record from the vendor master plan.
    /// </summary>
    /// <param name="_vendorPlan">
    ///     The vendor master plan.
    /// </param>
    public void initFromVendorPlan(ReqPlanSched _vendorPlan)
    {
        this.VendorPlanId = _vendorPlan.ReqPlanIdSched;
        this.VendorDataAreaId = _vendorPlan.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCustomerPlanId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup on the master plan in the customer company.
    /// </summary>
    /// <param name="_control">
    /// The reference to the control that performs the lookup.
    /// </param>
    public void lookupCustomerPlanId(FormControl _control)
    {
        Query query;
        QueryBuildDataSource reqPlanSchedDs;
        SysTableLookup sysTableLookup;

        if (this.CustomerDataAreaId)
        {
            query = new Query();
            sysTableLookup = SysTableLookup::newParameters(tableNum(ReqPlanSched), _control);

            // Add fields to be shown in the lookup form.
            sysTableLookup.addLookupfield(fieldNum(ReqPlanSched, DataAreaId));
            sysTableLookup.addLookupfield(fieldNum(ReqPlanSched, ReqPlanIdSched), true);
            sysTableLookup.addLookupfield(fieldNum(ReqPlanSched, Name));

            reqPlanSchedDs = query.addDataSource(tableNum(ReqPlanSched));
            query.allowCrossCompany(true);
            query.addCompanyRange(this.CustomerDataAreaId);

            // Perform the lookup.
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the look up on the customer companies.
    /// </summary>
    /// <param name="_control">
    /// The reference to the control that performs the look up.
    /// </param>
    public void lookupDataAreaId(FormStringControl _control)
    {
        Query query = new Query();
        QueryBuildDataSource dataAreaDs;
        SysTableLookup sysTableLookup;

        sysTableLookup = SysTableLookup::newParameters(tableNum(DataArea), _control);

        // Add fields to be shown in the lookup form.
        sysTableLookup.addLookupfield(fieldNum(DataArea, Id), true);
        sysTableLookup.addLookupfield(fieldNum(DataArea, Name));

        dataAreaDs = query.addDataSource(tableNum(DataArea));
        dataAreaDs.addRange(fieldNum(DataArea, Id)).value(SysQuery::valueNot(curext()));

        // Perform the lookup.
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
        public void modifiedFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        if (_fieldName == fieldStr(ReqIntercompanyMasterPlanMapping, CustomerDataAreaId))
        {
            this.clearCustomerPlanIdIfNeeded();
        }

        super(_fieldName, _arrayIndex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustomerDataAreaIdValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the value of the customer company reference.
    /// </summary>
    /// <returns>
    ///     true if the value is valid; otherwise, false.
    /// </returns>
    private boolean validateCustomerDataAreaIdValue()
    {
        boolean ret;

        if (this.CustomerDataAreaId == curext())
        {
            ret = checkFailed("@SYS335485");
        }
        else
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustomerPlanIdValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the value of the customer master plan reference.
    /// </summary>
    /// <returns>
    ///     true if the value is valid; otherwise, false.
    /// </returns>
    private boolean validateCustomerPlanIdValue()
    {
        boolean ret;

        changecompany(this.CustomerDataAreaId)
        {
            if (!ReqPlanSched::exist(this.CustomerPlanId))
            {
                ret = checkFailed(strFmt("@SYS335484", this.CustomerPlanId, this.CustomerDataAreaId));
            }
            else
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExistingMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the mapping for the same customer company does not exist.
    /// </summary>
    /// <returns>
    /// true if the mapping for the same customer company does not exist; otherwise, false.
    /// </returns>
    public boolean validateExistingMapping()
    {
        boolean ret = true;
        ReqIntercompanyMasterPlanMapping mapping;

        select firstonly mapping
        where   mapping.VendorDataAreaId    == this.VendorDataAreaId
            &&  mapping.VendorPlanId        == this.VendorPlanId
            &&  mapping.CustomerDataAreaId  == this.CustomerDataAreaId
            &&  mapping.RecId               != this.RecId;

        if (mapping)
        {
            ret = checkFailed(strFmt("@SYS335483", this.CustomerDataAreaId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
        public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        if (_fieldName == fieldStr(ReqIntercompanyMasterPlanMapping, CustomerPlanId) && this.CustomerDataAreaId)
        {
            ret = this.validateCustomerPlanIdValue();
        }
        else if (_fieldName == fieldStr(ReqIntercompanyMasterPlanMapping, CustomerDataAreaId))
        {
            ret = super(_fieldName, _arrayIndex) && this.validateCustomerDataAreaIdValue();
        }
        else
        {
            ret = super(_fieldName, _arrayIndex);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = this.validateExistingMapping();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SYS335480</DeveloperDocumentation>
	<Label>@SYS335478</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CustomerDataAreaId</TitleField1>
	<TitleField2>CustomerPlanId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomerDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustomerPlan</Name>
			<Label>@SYS335479</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomerDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerPlanId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendorPlan</Name>
			<Label>@SYS335477</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerPlanId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanIdSched</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendorDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendorPlanId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanIdSched</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustomerPlanIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>VendorDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendorPlanId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustomerDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomerDataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustomerDataArea</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustomerPlanMapping</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomerDataAreaId</Name>
					<Field>CustomerDataAreaId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomerPlan</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReqPlanSched</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustomerPlan</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustomerPlanMapping</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomerPlanId</Name>
					<SourceEDT>ReqPlanIdSched</SourceEDT>
					<Field>CustomerPlanId</Field>
					<RelatedField>ReqPlanIdSched</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomerDataAreaId</Name>
					<Field>CustomerDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PlanIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendorDataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendorDataArea</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendorPlanMapping</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorDataAreaId</Name>
					<Field>VendorDataAreaId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendorPlan</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ReqPlanSched</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendorPlan</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendorPlanMapping</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorPlanId</Name>
					<SourceEDT>ReqPlanIdSched</SourceEDT>
					<Field>VendorPlanId</Field>
					<RelatedField>ReqPlanIdSched</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorDataAreaId</Name>
					<Field>VendorDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PlanIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>