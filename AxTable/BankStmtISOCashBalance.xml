<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStmtISOCashBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankStmtISOCashBalance extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editEndingBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ending balance by using a specified amount.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the ending balance is set.
    /// </param>
    /// <param name="_amount">
    /// The specified amount.
    /// </param>
    /// <returns>
    /// The ending balance.
    /// </returns>
    /// <remarks>
    /// This method is only called for a record that has a <c>BankStatementBalanceType::Closing</c>
    /// enumeration value .
    /// </remarks>
    public edit BankStatementEndingBalance editEndingBalance(
        boolean             _set,
        BankStmtISODecimal  _amount)
    {
        return this.setAmount(_set, _amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editNetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the net amount by using a specified amount.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the net amount is set.
    /// </param>
    /// <param name="_amount">
    /// The specified amount.
    /// </param>
    /// <returns>
    /// The net amount.
    /// </returns>
    /// <remarks>
    /// This method is only called for a record that has a <c>BankStatementBalanceType::NetAmount</c>
    /// enumeration value .
    /// </remarks>
    public edit BankStatementNetAmount editNetAmount(
        boolean             _set,
        BankStmtISODecimal  _amount)
    {
        return this.setAmount(_set, _amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the opening balance by using a specified amount.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the opening balance is set.
    /// </param>
    /// <param name="_amount">
    /// The specified amount.
    /// </param>
    /// <returns>
    /// The opening balance.
    /// </returns>
    /// <remarks>
    /// This method is only called for a record that has a <c>BankStatementBalanceType::Opening</c>
    /// enumeration value .
    /// </remarks>
    public edit BankStatementOpeningBalance editOpeningBalance(
        boolean             _set,
        BankStmtISODecimal  _amount)
    {
        return this.setAmount(_set, _amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isImpactStatementStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the field changes will impact the statement status.
    /// </summary>
    /// <returns>
    /// true if the <c>CashBalanceAmount</c> or <c>AmountCreditDebitIndicator</c> values are changed;
    /// otherwise, false .
    /// </returns>
    public boolean isImpactStatementStatus()
    {
        return (this.CashBalanceAmount          != this.orig().CashBalanceAmount
            || this.AmountCreditDebitIndicator  != this.orig().AmountCreditDebitIndicator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the amount by using a specified amount.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the amount is set.
    /// </param>
    /// <param name="_amount">
    /// The specified amount.
    /// </param>
    /// <returns>
    /// The amount.
    /// </returns>
    private BankStmtISODecimal setAmount(
        boolean             _set,
        BankStmtISODecimal  _amount)
    {
        container           indicatorAndAmount;
        BankStmtISODecimal  amount;

        if (_set)
        {
            indicatorAndAmount = BankStmtISOAccountStatement::setIndicatorAndAmount(
                _amount,
                false);
            if (conLen(indicatorAndAmount) > 0)
            {
                this.AmountCreditDebitIndicator = conPeek(indicatorAndAmount, 1);
                this.CashBalanceAmount = conPeek(indicatorAndAmount, 2);
            }
        }

        amount = BankStmtISOAccountStatement::getShowingAmount(
            this.CashBalanceAmount,
            this.AmountCreditDebitIndicator,
            false);

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>BankStmtISOCashBalance</c> record for a specified <c>RecId</c> value.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record can be updated.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A currency model.
    /// </param>
    /// <returns>
    /// A <c>BankStmtISOCashBalance</c> record .
    /// </returns>
    public static BankStmtISOCashBalance find(
        RecId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankStmtISOCashBalance cashBalance;

        cashBalance.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            cashBalance.concurrencyModel(_concurrencyModel);
        }

        select firstonly cashBalance
            where cashBalance.RecId == _recId;

        return cashBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByStatementAndBalanceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>BankStmtISOCashBalance</c> record by using a specified bank statement record ID and
    /// balance type.
    /// </summary>
    /// <param name="_refRecId">
    /// The record ID of bank statement.
    /// </param>
    /// <param name="_balanceType">
    /// The balance type; optional.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record can be updated.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A currency model.
    /// </param>
    /// <returns>
    /// A <c>BankStmtISOCashBalance</c> record .
    /// </returns>
    public static BankStmtISOCashBalance findByStatementAndBalanceType(
        RefRecId                    _refRecId,
        BankStatementBalanceType    _balanceType = BankStatementBalanceType::None,
        boolean                     _forUpdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankStmtISOCashBalance cashBalance;

        cashBalance.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            cashBalance.concurrencyModel(_concurrencyModel);
        }

        select firstonly cashBalance
            where cashBalance.BankStmtISOAccountStatement == _refRecId
                && cashBalance.BankStatementBalanceType   == _balanceType;

        return cashBalance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BankElectronicBanking</ConfigurationKey>
	<DeveloperDocumentation>@SYS316330</DeveloperDocumentation>
	<Label>@SYS316321</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TypeCode</TitleField1>
	<TitleField2>ItemCount</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Bank</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemCount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankStmtISOAccountStatement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemCount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundsType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashBalanceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCreditDebitIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankStatementBalanceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AmountCreditDebitIndicator</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStatementAmountDrCrIndicator</ExtendedDataType>
			<EnumType>DebitCredit</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankStatementBalanceType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BankStatementBalanceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankStmtISOAccountStatement</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashBalanceAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStmtISODecimal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FundsType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStatementIdentificationText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ItemCount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStmtISONumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TypeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStatementIdentificationText</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BankStmtISOAccountStatementIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BankStmtISOAccountStatement</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Relation1</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BankStmtISOAccountStatement</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankStmtISOAccountStatement</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>BankStmtISOAccountStatement_BankStmtISOCashBalance</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankStmtISOAccountStatement</Name>
					<Field>BankStmtISOAccountStatement</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>