<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PDSCompensationPrinciple</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PDSCompensationPrinciple extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activeBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the BOM record for the active ingredient related to the current compensation principle.
    /// </summary>
    /// <param name="_forUpdate">
    /// Determines if the BOM record should be locked for update; optional.
    /// </param>
    /// <returns>
    /// The BOM record which has the active ingredient.
    /// </returns>
    public BOM activeBOM(boolean _forUpdate = false)
    {
        return BOM::findRecId(this.ActiveRefRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related BOM record.
    /// </summary>
    /// <param name="_forUpdate">
    /// Determines if the record should be locked for update; optional.
    /// </param>
    /// <returns>
    /// The <c>BOM</c> record related to current principle.
    /// </returns>
    public BOM bom(boolean _forUpdate = false)
    {
        return BOM::findRecId(this.BOMRefRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editActiveBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the active ingredient item for a <c>BOM</c> record.
    /// </summary>
    /// <param name="_set">
    /// Determines if the active ingredient should be set.
    /// </param>
    /// <param name="_record">
    /// The current <c>BOM</c> record.
    /// </param>
    /// <param name="_value">
    /// The <c>ItemId</c> to set as the active ingredient. This is ignored if <paramref name="_set"/> is false.
    /// </param>
    /// <returns>
    /// The active ingredient item ID for <paramref name="_record"/>.
    /// </returns>
    public edit ItemId editActiveBOM(
        boolean _set,
        BOM     _record,
        ItemId  _value)
    {
        BOM active;

        if (_set)
        {
            active.recordLevelSecurity(true);

            select firstonly RecId
                from active
                where active.BOMId   == _record.BOMId
                    && active.ItemId == _value;

            this.ActiveRefRecId = active.RecId;
        }

        return this.activeBOM().ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBatchAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the base value from the provided item and attribute combination.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID.
    /// </param>
    /// <param name="_attribId">
    /// The batch attribute Id to be used as criteria for the attribute by item search.
    /// </param>
    public void initFromBatchAttributes(ItemId _itemId, PdsBatchAttribId _attribId)
    {
        PdsBatchAttribByItem    attribByItem;

        if (!_itemId
            || !_attribId)
        {
            return;
        }

        attribByItem = PdsBatchAttribByItem::findItemId(_itemId, _attribId, TableGroupAll::Table);

        if (attribByItem)
        {
            this.BaseValue       = str2num(attribByItem.pdsBatchAttrib().locale2Storage(attribByItem.PDSBaseValue));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the base value with base value from the given item.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    public void initFromInventTable(ItemId _itemId)
    {
        InventTable inventTable;

        if (!_itemId)
        {
            return;
        }

        inventTable = InventTable::find(_itemId);

        if (inventTable
            && inventTable.PDSBaseAttributeId)
        {
            this.BaseAttributeId = inventTable.PDSBaseAttributeId;
            this.BaseValue       = str2num(InventTable::PDSFindBaseAttribute(inventTable.ItemId).PDSBaseValue);
            this.Factor          = 1.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPDSCompensationPrinciple</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record from another <c>PDSCompensationPrinciple</c> record.
    /// </summary>
    /// <param name = "_sourcePrinciple"></param>
    public void initFromPDSCompensationPrinciple(PDSCompensationPrinciple _sourcePrinciple)
    {
        this.ActiveItemId               = _sourcePrinciple.ActiveItemId;
        this.BaseAttributeId            = _sourcePrinciple.BaseAttributeId;
        this.BaseValue                  = _sourcePrinciple.BaseValue;
        this.CompItemId                 = _sourcePrinciple.CompItemId;
        this.Factor                     = _sourcePrinciple.Factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProperlyDefined</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if the adjustment principle is properly defined.
    /// </summary>
    /// <returns>
    /// true if the adjustment principle is correctly defined; otherwise, false.
    /// </returns>
    public boolean isProperlyDefined()
    {
        boolean             active;
        boolean             type;
        boolean             baseValue;
        PdsBatchAttribType  attribType;

        active          = (this.activeBOM().PDSIngredientType == PDSIngredientTypeEnum::Active);
        attribType      =  PdsBatchAttrib::findAttribType(this.BaseAttributeId);
        type            = (attribType       == PdsBatchAttribType::Integer
                            || attribType   == PdsBatchAttribType::Realnumber);
        baseValue       = (this.baseValue != 0)
                            && this.validateField(fieldnum(PDSCompensationPrinciple, BaseValue));

        return active && type && baseValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs additional logic for a given field that was modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>fieldId</c> of the field modified.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(PDSCompensationPrinciple,ActiveItemId):
                this.initFromInventTable(this.ActiveItemId);
                this.setActiveRecId();
                break;
            case fieldnum(PDSCompensationPrinciple,BaseAttributeId):
                this.initFromBatchAttributes(this.ActiveItemId,this.BaseAttributeId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActiveRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>RecId</c> of the formula item that is the active ingredient.
    /// </summary>
    private void setActiveRecId()
    {
        Bom     bom;

        select firstonly Recid
            from bom
            where  bom.ItemId == this.ActiveItemId
                && bom.BOMId  == this.BomId;

        this.ActiveRefrecId = bom.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean                 ret;
        PdsBatchAttrib          attrib;
        PdsBatchAttribByItem    attribByItem;
        InventTable             inventTable = this.bom().inventTable();
        PdsBatchAttribMin       minValue;
        PdsBatchAttribMin       maxValue;
        int                     value;

        attribByItem = PdsBatchAttribByItem::findItemId(inventTable.ItemId, this.BaseAttributeId, TableGroupAll::Table);

        attrib = PdsBatchAttrib::find(this.BaseAttributeId);

        if (attribByItem)
        {
            minValue = attribByItem.PdsBatchAttribMin;
            maxValue = attribByItem.PdsBatchAttribMax;
        }
        else
        {
            minValue = attrib.PdsBatchAttribMin;
            maxValue = attrib.PdsBatchAttribMax;
        }

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(PDSCompensationPrinciple, BaseValue):
                if (attrib.PdsBatchAttribType == PdsBatchAttribType::Integer)
                {
                    value = real2int(this.(_fieldIdToCheck));
                }
                else
                {
                    value = this.(_fieldIdToCheck);
                }

                if (value < minValue
                    || value > maxValue)
                {
                    ret = checkFailed(strfmt("@SYS87701", minValue, maxValue));
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if the compensating principle record exists.
    /// </summary>
    /// <param name="_bomRefRecId">
    /// The referenced record ID for the <c>BOM</c> record.
    /// </param>
    /// <returns>
    /// true if the <c>PDSCompensatingPrinciple</c> record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _bomRefRecId)
    {
        return (select PDSCompensationPrinciple
                    where PDSCompensationPrinciple.BOMRefRecId == _bomRefRecId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the compensating princinple record for the given unique key values.
    /// </summary>
    /// <param name="_bomRefRecId">
    /// The referenced record ID for the <c>BOM</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines if the record should be locked for update; optional.
    /// </param>
    /// <returns>
    /// The <c>PDSCompensatingPrinciple</c> record found or an empty buffer if no such record exists.
    /// </returns>
    public static PDSCompensationPrinciple find(
        RefRecId    _bomRefRecId,
        boolean     _forUpdate = false)
    {
        PDSCompensationPrinciple compensationPrinciple;

        if (_forUpdate)
        {
            compensationPrinciple.selectForUpdate(true);
        }

        select firstonly compensationPrinciple
            where compensationPrinciple.BOMRefRecId == _bomRefRecId;

        return compensationPrinciple;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBomItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the compensating princinple record for the given BOM and item.
    /// </summary>
    /// <param name="_bomId">
    /// The ID of the BOM (Formula).
    /// </param>
    /// <param name="_compItemId">
    /// The compensating item ID.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines if the record should be locked for update; optional.
    /// </param>
    /// <returns>
    /// The <c>PDSCompensatingPrinciple</c> record found or an empty buffer if no such record exists.
    /// </returns>
    public static PDSCompensationPrinciple findByBomItem(
        BomId       _bomId,
        ItemId      _compItemId,
        boolean     _forUpdate = false)
    {
        PDSCompensationPrinciple compensationPrinciple;

        compensationPrinciple.selectForUpdate(_forUpdate);

        select firstonly compensationPrinciple
            where  compensationPrinciple.BomId      == _bomId
                && compensationPrinciple.CompItemId == _compItemId;

        return compensationPrinciple;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PDSPotency</ConfigurationKey>
	<DeveloperDocumentation>@PSC560</DeveloperDocumentation>
	<FormRef>PDSCompensationPrinciple</FormRef>
	<Label>@PSC14</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>BaseAttributeId</TitleField1>
	<TitleField2>BaseValue</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>BOMRefRecIdIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>BOMRefRecIdIdx</PrimaryIndex>
	<ReplacementKey>BOMRefRecIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BaseAttributeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Factor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BaseValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActiveRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BaseAttributeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Factor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BaseValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ActiveItem</Name>
			<Label>@PSC27</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActiveItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOMRef</Name>
			<Label>@PSC373</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Compensation</Name>
			<Label>@PSC14</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BaseAttributeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BaseValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Factor</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActiveItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSActiveItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ActiveRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PDSActiveRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<RelationContext>BOM</RelationContext>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BaseAttributeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSBaseAttributeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BaseValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSBaseValueNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BOMRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BOMRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<RelationContext>BOM</RelationContext>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSCompItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Factor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Factor</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BOMRefRecIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BOMRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTableIdx2</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ActiveItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BOMTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BOMId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTableIdx1</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CompItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ActiveRefRecId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOM</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ActiveIngredient</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActiveRefRecId</Name>
					<Field>ActiveRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BOM</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOM</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BOMId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMId</Name>
					<Field>BOMId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>PDSIngredientType_Extern</Name>
					<RelatedField>PDSIngredientType</RelatedField>
					<ValueStr>PDSIngredientTypeEnum::Compensating</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompItemId</Name>
					<Field>CompItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BOMRefRecId</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BOM</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BOMRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMRefRecId</Name>
					<Field>BOMRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMId</Name>
					<SourceEDT>BOMId</SourceEDT>
					<Field>BOMId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTableActive</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActiveItemId</Name>
					<SourceEDT>PDSActiveItemId</SourceEDT>
					<Field>ActiveItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTableComp</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompItemId</Name>
					<SourceEDT>PDSCompItemId</SourceEDT>
					<Field>CompItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsBatchAttrib</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PdsBatchAttrib</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BaseAttributeId</Name>
					<SourceEDT>PDSBaseAttributeId</SourceEDT>
					<Field>BaseAttributeId</Field>
					<RelatedField>PdsBatchAttribId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>