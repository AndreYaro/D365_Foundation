<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailUserStoreTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailUserStoreTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record from <c>RetailUserStoreTable</c> table.
    /// </summary>
    /// <remarks>
    /// Sets the first record of the table as primary store and also updates this information in <c>RetailUsers</c> table before deleting the record.
    /// </remarks>
    public void delete()
    {
        RetailUsers          rboUsers;
        RetailUserStoreTable rboUserStoreTable_loc;
        ;

        if (this.PrimaryStore == NoYes::Yes)
        {
            ttsbegin;
            select firstonly forupdate rboUserStoreTable_loc
                where rboUserStoreTable_loc.User == this.User
                   && rboUserStoreTable_loc.PrimaryStore == NoYes::No;

            if (rboUserStoreTable_loc)
            {
                rboUserStoreTable_loc.PrimaryStore = NoYes::Yes;
                rboUserStoreTable_loc.doUpdate();
            }

            select firstOnly rboUsers;

            if (rboUsers)
            {
                rboUsers.selectForUpdate(true);
                rboUsers.User           = rboUserStoreTable_loc.User;
                rboUsers.PrimaryStore   = rboUserStoreTable_loc.StoreNumber;
                rboUsers.epDefaultStore = rboUserStoreTable_loc.StoreNumber;
                rboUsers.doUpdate();
            }
            ttscommit;
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in <c>RetailUserStoreTable</c> table.
    /// </summary>
    /// <remarks>
    /// If this is the first record getting inserted in the table, then set this store as primary store.
    /// Updates the primary store in table <c>RetailUsers</c>.
    /// </remarks>
    public void insert()
    {
        RetailUserStoreTable rboUserStoreTable;
        RetailUsers          rboUsers;
        ;
        select firstonly rboUserStoreTable where rboUserStoreTable.User == this.User;

        if (rboUserStoreTable)
            this.PrimaryStore = NoYes::No;
        else
        {
            this.PrimaryStore = NoYes::Yes;

            select firstonly rboUsers;

            if (rboUsers)
            {
                select forupdate rboUsers;
                ttsbegin;
                rboUsers.User = this.User;
                rboUsers.PrimaryStore   = this.StoreNumber;
                rboUsers.epDefaultStore = this.StoreNumber;
                rboUsers.doUpdate();
                ttscommit;
            }
            else
            {
                rboUsers.User = this.User;
                rboUsers.PrimaryStore   = this.StoreNumber;
                rboUsers.epDefaultStore = this.StoreNumber;
                rboUsers.doInsert();
            }
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the method when a field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The field Id which is modified.
    /// </param>
    /// <remarks>
    /// Calls the method <c>setPrimaryStore</c> when the field <c>PrimaryStore</c> is modified.
    /// Also sets the primary store in table <c>RetailUsers</c> when the field <c>StoreNumber</c> is modified.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        RetailStoreTable rboStoreTable;
        RetailUsers      rboUsers;
        ;

        switch (_fieldId)
        {
            case fieldNum(RetailUserStoreTable, PrimaryStore):

                this.setPrimaryStore(true, NoYes::Yes);
                break;

            case fieldNum(RetailUserStoreTable, StoreNumber):

                rboStoreTable = RetailStoreTable::find(this.StoreNumber);
                this.StoreName = rboStoreTable.name();

                if (this.PrimaryStore == NoYes::Yes)
                {
                    ttsbegin;
                    select forupdate rboUsers;
                    rboUsers.User           = this.User;
                    rboUsers.PrimaryStore   = this.StoreNumber;
                    rboUsers.epDefaultStore = this.StoreNumber;
                    rboUsers.doUpdate();
                    ttscommit;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrimaryStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the primary store for the first record of the <c>RetailUserStoreTable</c> table.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to set the primary store.
    /// </param>
    /// <param name="_primaryStore">
    /// The current value of the <c>PrimaryStore</c> field.
    /// </param>
    /// <returns>
    /// The value of the <c>PrimaryStore</c> field.
    /// </returns>
    /// <remarks>
    /// Also updates the primary store information in the <c>RetailUsers</c> table.
    /// </remarks>
    edit NoYes setPrimaryStore(boolean _set,
                               NoYes   _primaryStore)
    {
        RetailUserStoreTable rboUserStoreTable_local;
        RetailUsers          rboUsers;

        ttsbegin;
        if (_set)
        {
            if (_primaryStore)
            {
                select firstonly forupdate rboUserStoreTable_local
                    where rboUserStoreTable_local.PrimaryStore == NoYes::Yes
                       && rboUserStoreTable_local.User         == this.User;

                if (rboUserStoreTable_local)
                {
                    rboUserStoreTable_local.PrimaryStore = NoYes::No;
                    rboUserStoreTable_local.update();
                }

                select forupdate rboUsers;
                rboUsers.epDefaultStore = this.StoreNumber;
                rboUsers.PrimaryStore   = this.StoreNumber;
                rboUsers.update();
            }
        }

        this.PrimaryStore = NoYes::Yes;
        this.update();

        ttscommit;

        return _primaryStore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the field is valid for the current record.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// The field ID to be validated.
    /// </param>
    /// <returns>
    /// true if the field is valid; otherwise false.
    /// </returns>
    /// <remarks>
    /// Calls the method <c>validatePrimary</c> to validate field <c>PrimaryStore</c>.
    /// </remarks>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (fieldExt2Id(_fieldIdToCheck) == fieldNum(RetailUserStoreTable, PrimaryStore))
        {
            ret = this.validatePrimary();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrimary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>PrimaryStore</c> field is valid.
    /// </summary>
    /// <returns>
    /// true if the field is valid; otherwise, false.
    /// </returns>
    boolean validatePrimary()
    {
        boolean ret;
        ;

        ret = this.PrimaryStore == NoYes::No ? checkFailed("@RET5114") : true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record occurs in the <c>RetailUserStoreTable</c> table.
    /// </summary>
    /// <param name="_storeId">
    /// The ID number of the store.
    /// </param>
    /// <param name="_userId">
    /// The user ID of the <c>RetailUserStoreTable</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RetailStoreId    _storeId,
                                RetailUserId     _userId)
    {
        ;

        return _storeId &&
               _userId  &&
               (select firstonly RecId from retailUserStoreTable
                    where retailUserStoreTable.StoreNumber == _storeId &&
                          retailUserStoreTable.User        == _userId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailUserStoreTable</c> table.
    /// </summary>
    /// <param name="_user">
    /// The user ID of the <c>RetailUserStoreTable</c> record.
    /// </param>
    /// <param name="_storeNumber">
    /// The store number of the <c>RetailUserStoreTable</c> record.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailWorksheetMaskTable</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailUserStoreTable find(UserId     _user,
                                         RetailStoreId _storeNumber,
                                         boolean    _update = false)
    {
        RetailUserStoreTable rboUserStoreTable;
        ;

        if (_user && _storeNumber)
        {
            rboUserStoreTable.selectForUpdate(_update);

            select firstonly rboUserStoreTable
                where rboUserStoreTable.User        == _user
                   && rboUserStoreTable.StoreNumber == _storeNumber;
        }
        return rboUserStoreTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET260347</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@RET5107</Label>
	<TitleField1>StoreNumber</TitleField1>
	<TitleField2>StoreName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>UserStoreIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>CommerceEmployees</Modules>
	<PrimaryIndex>UserStoreIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StoreNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>User</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrimaryStore</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@RET3039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StoreName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrimaryStore</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@RET3040</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StoreNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>User</Name>
			<Label>@RET3635</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>User</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrimaryStore</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@RET5106</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StoreName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreName</ExtendedDataType>
			<Label>@RET3013</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StoreNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreId</ExtendedDataType>
			<Label>@RET3012</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>User</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@RET3635</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>UserStoreIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>StoreNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>User</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStoreTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StoreNumber</Name>
					<SourceEDT>RetailStoreId</SourceEDT>
					<Field>StoreNumber</Field>
					<RelatedField>StoreNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StoreNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UserInfoRelation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SysUserInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>User</Name>
					<Field>User</Field>
					<RelatedField>Id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>