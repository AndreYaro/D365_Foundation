<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PDSCalculationTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PDSCalculationTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actualAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a set of batch attribute IDs for all equation elements referencing actual batch attribute values.
    /// </summary>
    /// <returns>
    ///     A set of batch attribute IDs (type <c>PdsBatchAttribId</c>) that must have actual values assigned.
    /// </returns>
    public Set actualAttributes()
    {
        Set                     attributes  = new Set(Types::String);
        PDSCalculationLine      line;

        while select PdsBatchAttribId from line
            group by PdsBatchAttribId
            where line.CalculationId == this.CalculationId
                && line.ElementType  == PDSCalcElementTypeBase::BatchAttribActual
        {
            attributes.add(line.PdsBatchAttribId);
        }

        return attributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUsedInTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the record can be modified given the related transactions.
    /// </summary>
    /// <returns>
    ///     true if it can be modified because it is not used; otherwise, false.
    /// </returns>
    public boolean checkUsedInTransactions()
    {
        PurchLine           purchLine;
        VendInvoiceInfoLine vendInvoiceInfoLine;

        select firstOnly RecId from vendInvoiceInfoLine
            where vendInvoiceInfoLine.PDSCalculationId == this.CalculationId;

        if (vendInvoiceInfoLine.RecId)
        {
            return checkfailed(strFmt("@PSA3141", tablePName(vendInvoiceInfoLine)));
        }

        select firstOnly RecId from purchLine
            where purchLine.PDSCalculationId == this.CalculationId;

        if (purchLine.RecId)
        {
            return checkfailed(strFmt("@PSA3141", tablePName(purchLine)));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the current <c>PDSCalculationTable</c> record in the database.
    /// </summary>
    /// <param name="validated">
    ///     Determines whether the <c>Valid</c> field should be set; optional.
    /// </param>
    /// <remarks>
    ///     Database transactions involving <c>PDSCalculationLine</c> records such as insert, update, or delete will invoke this method invalidating the parent <c>PDSCalculationTable</c> record.
    /// </remarks>
    public void update(boolean validated = false)
    {
        this.Valid = validated;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEquation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a value indicdating if the equation defined on the current record is valid.
    /// </summary>
    /// <returns>
    ///     true if the equation is valid; otherwise, false.
    /// </returns>
    public boolean validateEquation()
    {
        return PDSAdvancedPricing::newRecord(this).validateEquation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();
        ret = ret && this.checkUsedInTransactions();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a value indicating if the calcuation table record exists.
    /// </summary>
    /// <param name ="_id">
    ///     The calculation formula ID.</param>
    /// <returns>
    ///     true if the record exists; otherwise, false.
    /// </returns>
    static public boolean exist(PDSCalculationId _id)
    {
        return (select PDSCalculationTable
                    where PDSCalculationTable.CalculationId == _id).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a <c>PDSCalculationTable</c> record.
    /// </summary>
    /// <param name ="_id">
    ///     The calculation formula ID.
    /// </param>
    /// <param name ="_forUpdate">
    ///     Determines whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     The found <c>PDSCalculationTable</c> record or an empty buffer if no such record exists.
    /// </returns>
    static public PDSCalculationTable find(
        PDSCalculationId    _id,
        boolean             _forUpdate = false)
    {
        PDSCalculationTable table;

        if (_forUpdate)
        {
            table.selectForUpdate(true);
        }

        select firstonly table
            where table.CalculationId == _id;

        return table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a <c>PDSCalculationTable</c> record.
    /// </summary>
    /// <param name ="_calculationTableRecId">
    ///     The record ID of the <c>PDSCalculationTable</c> to find.
    /// </param>
    /// <param name ="_forUpdate">
    ///     Determines whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     The found <c>PDSCalculationTable</c> record or an empty buffer if no such record exists.
    /// </returns>
    public static PDSCalculationTable findRecId(PDSCalculationTableRecId _calculationTableRecId, boolean _forUpdate = false)
    {
        PDSCalculationTable calculationTable;

        calculationTable.selectForUpdate(_forUpdate);

        select firstOnly calculationTable
            where calculationTable.RecId == _calculationTableRecId;

        return calculationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Invalidates the advanced pricing calculation given it's ID.
    /// </summary>
    /// <param name="_calculationId">
    ///     The ID of the advanced pricing calculation to invalidate.
    /// </param>
    public static void invalidate(PDSCalculationId _calculationId)
    {
        PDSCalculationTable         calcTable;

        if (_calculationId)
        {
            ttsbegin;
            calcTable = PDSCalculationTable::find(_calculationId, true);
            if (calcTable && calcTable.Valid)
            {
                calcTable.update(false);
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PDSPotency</ConfigurationKey>
	<DeveloperDocumentation>@PSC559</DeveloperDocumentation>
	<FormRef>PDSCalculationTable</FormRef>
	<Label>@PSC613</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CalculationId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>CalculationIdIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>CalculationIdIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PDSCalculationLine</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>PDSCalculationLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalculationText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalculationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalculationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@PSC573</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalculationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Potency</Name>
			<Label>@PSC61</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalculationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSCalculationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalculationText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSCalculationText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Valid</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CalculationIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CalculationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>