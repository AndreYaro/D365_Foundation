<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNACHAIATInfoTable_US</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendNACHAIATInfoTable_US extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret
            && this.ForeignExchIndicator != CustVendForeignExchIndicator_US::None
            && this.ForeignExchRefID == '')
        {
            ret = checkFailed(strfmt("@SYS84753", fieldid2pname(tablenum(CustVendNACHAIATInfoTable_US),
                                                  fieldnum(CustVendNACHAIATInfoTable_US, ForeignExchRefID))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValuesIATpaymRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified journal, which has vouchers with a NACHA IAT payment method,
    ///    contains NACHA IAT-specific information.
    /// </summary>
    /// <param name="journalId">
    ///    The journal ID of the journal to check.
    /// </param>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    public static boolean checkValuesIATpaymRecords(LedgerJournalId journalId)
    {
        boolean custCheckResult = CustVendNACHAIATInfoTable_US::checkValuesIATpaymRecordsByAccountType(
            journalId,
            LedgerJournalACType::Cust);

        boolean vendCheckResult = CustVendNACHAIATInfoTable_US::checkValuesIATpaymRecordsByAccountType(
            journalId,
            LedgerJournalACType::Vend);

        return custCheckResult && vendCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValuesIATpaymRecordsByAccountType</Name>
				<Source><![CDATA[
    private static boolean checkValuesIATpaymRecordsByAccountType(
        LedgerJournalId _journalId,
        LedgerJournalACType _accountType) 
    {
        boolean ret = true;

        CustVendPaymModeTable custVendPaymModeTable;

        if (_accountType == LedgerJournalACType::Cust)
        {
            custVendPaymModeTable = new DictTable(tableNum(CustPaymModeTable)).makeRecord();
        }
        else
        {
            custVendPaymModeTable = new DictTable(tableNum(VendPaymModeTable)).makeRecord();
        }

        LedgerJournalTrans ledgerJournalTrans;
        CustVendNACHAIATInfoTable_US custVendNACHAIATInfoTable;
        
        while select PaymMode from custVendPaymModeTable
        exists join ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == _journalId
                && ledgerJournalTrans.AccountType == _accountType
                && ledgerJournalTrans.PaymMode == custVendPaymModeTable.PaymMode
        notexists join custVendNACHAIATInfoTable
            where custVendNACHAIATInfoTable.LedgerJournalTransRecId == ledgerJournalTrans.RecId
        {
            boolean isNACHAIATFormat;

            switch (_accountType)
            {
                case LedgerJournalACType::Cust:
                    isNACHAIATFormat = CustOutPaym_NACHA_IAT::isIATNACHAFormat(custVendPaymModeTable.PaymMode);
                    break;

                case LedgerJournalACType::Vend:
                    isNACHAIATFormat = VendOutPaym_NACHA_IAT::isIATNACHAFormat(custVendPaymModeTable.PaymMode);
                    break;
            }

            if (isNACHAIATFormat)
            {
                LedgerJournalTrans showledgerJournalTrans;
                CustVendNACHAIATInfoTable_US showCustVendNACHAIATInfoTable;

                while select Voucher from showledgerJournalTrans
                    where showledgerJournalTrans.JournalNum == _journalId
                        && showledgerJournalTrans.AccountType == _accountType
                        && showledgerJournalTrans.PaymMode == custVendPaymModeTable.PaymMode
                notexists join showCustVendNACHAIATInfoTable
                    where showCustVendNACHAIATInfoTable.LedgerJournalTransRecId == showledgerJournalTrans.RecId
                {
                    checkFailed(
                        strfmt("@CashManagement:NACHAIATForeignExchangeIndicatorRequired",
                            fieldid2pname(tablenum(CustVendNACHAIATInfoTable_US), fieldnum(CustVendNACHAIATInfoTable_US, ForeignExchIndicator)),
                            showledgerJournalTrans.Voucher,
                            "@SYS313184"));

                    checkFailed(
                        strfmt("@CashManagement:NACHAIATForeignExchangeIndicatorRequired",
                            fieldid2pname(tablenum(CustVendNACHAIATInfoTable_US), fieldnum(CustVendNACHAIATInfoTable_US, ForeignExchRefID)),
                            showledgerJournalTrans.Voucher,
                            "@SYS313184"));
                }

                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByVoucher</Name>
				<Source><![CDATA[
    public static void deleteByVoucher(RefRecId _refRec)
    {
        CustVendNACHAIATInfoTable_US nachaiatInfoTable;

        nachaiatInfoTable = CustVendNACHAIATInfoTable_US::findByLedgerJournalTrans(_refRec, true);
        if (nachaiatInfoTable.RecId)
        {
            ttsbegin;
            nachaiatInfoTable.delete();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustVendNACHAIATInfoTable_US</c> table by using the specified
    ///    record ID.
    /// </summary>
    /// <param name="_refRecId">
    ///    The unique record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether to read the record for update.
    /// </param>
    /// <returns>
    ///    An elimination rule buffer.
    /// </returns>
    public static CustVendNACHAIATInfoTable_US findByLedgerJournalTrans(LedgerJournalTransRefRecId      _refRecId ,
                                                    boolean                        _forUpdate = false)
    {
        CustVendNACHAIATInfoTable_US      custVendNACHAIATInfoTable;

        if (_refRecId)
        {
            custVendNACHAIATInfoTable.selectForUpdate(_forUpdate);

            select firstonly custVendNACHAIATInfoTable
                where custVendNACHAIATInfoTable.LedgerJournalTransRecId == _refRecId ;
        }

        return custVendNACHAIATInfoTable ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidCustVendNACHAIATInfoTable_US</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether valid conditions are met to have a <c>CustVendNACHAIATInfoTable_US</c> record
    /// that is based on the voucher information.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The voucher record that is used to determine the state of the button.
    /// </param>
    /// <returns>
    /// true if conditions are met; otherwise, false.
    /// </returns>
    public static boolean isValidCustVendNACHAIATInfoTable_US(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean isValidRecord = false;

        if (_ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::Sent
            && (_ledgerJournalTrans.AmountCurDebit > 0
                || _ledgerJournalTrans.AmountCurCredit < 0))
        {
                switch (_ledgerJournalTrans.AccountType)
                {
                    case LedgerJournalACType::Cust :
                        isValidRecord = CustOutPaym_NACHA_IAT::isIATNACHAFormat(_ledgerJournalTrans.PaymMode);
                        break;

                    case LedgerJournalACType::Vend :
                        isValidRecord = VendOutPaym_NACHA_IAT::isIATNACHAFormat(_ledgerJournalTrans.PaymMode);
                        break;
                }

            if (isValidRecord)
            {
                isValidRecord = !_ledgerJournalTrans.ledgerJournalTable().Posted;
            }
        }

        return isValidRecord;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS313185</DeveloperDocumentation>
	<FormRef>CustVendNACHAIATInfoTable_US</FormRef>
	<Label>@SYS313184</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ForeignExchIndicator</TitleField1>
	<TitleField2>ForeignExchRefID</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Bank</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SecondaryOFACIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GatewayOperatorOFACIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignExchIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignExchRefID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignExchRefIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceivingDFIQualifier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginatingDFIQualifier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SecondaryOFACIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GatewayOperatorOFACIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignExchIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignExchRefID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignExchRefIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceivingDFIQualifier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginatingDFIQualifier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IATinfo</Name>
			<Label>@SYS313184</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ForeignExchIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignExchRefIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignExchRefID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GatewayOperatorOFACIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SecondaryOFACIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginatingDFIQualifier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceivingDFIQualifier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTransRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ForeignExchIndicator</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>CustVendForeignExchIndicator_US</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ForeignExchRefID</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustVendForeignExchRefID_US</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ForeignExchRefIndicator</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustVendForeignExchRefIndicator_US</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GatewayOperatorOFACIndicator</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustVendGatewayOperatorOFACIndicator_US</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTransRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerJournalTransRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OriginatingDFIQualifier</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustVendOriginatingDFIQualifier_US</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReceivingDFIQualifier</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustVendReceivingDFIQualifier_US</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SecondaryOFACIndicator</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustVendSecondaryOFACIndicator_US</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerJournalTransRecIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerJournalTransRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTransRecId</Name>
					<Field>LedgerJournalTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>