<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStaffDefaultCommissionSalesGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailStaffDefaultCommissionSalesGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the field with the specified identifier in <c>RetailStaffTable</c> table.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// The identifier of the field to be validated.
    /// </param>
    /// <returns>
    /// true if field in <c>CommissionSalesGroup</c> is associated with Retail staff, otherwise false.
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret=true;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case (fieldNum(RetailStaffDefaultCommissionSalesGroup, DefaultCommissionSalesGroup)):

                if (this.DefaultCommissionSalesGroup != '')
                {
                    ret = RetailStaffDefaultCommissionSalesGroup::validateCommissionSalesGroup(this.StaffId, this.DefaultCommissionSalesGroup);
                }
                break;

            default:

                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the record in the <c>RetailStaffDefaultCommissionSalesGroup</c>. If doesn't exist, create one.
    /// </summary>
    /// <param name = "_staffId">
    /// staffId from <c>RetailStaffTable</c>
    /// </param>
    /// <param name = "_defaultSalesGroup">
    /// groupId from <c>CommissionSalesGroup</c> table.
    /// </param>
    /// <param name = "_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailStaffDefaultCommissionSalesGroup</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailStaffDefaultCommissionSalesGroup findOrCreate(RetailStaffId _staffId,  CommissSalesGroup _defaultSalesGroup, boolean _forUpdate = false)
    {
        RetailStaffDefaultCommissionSalesGroup   staffDefaultSalesGroup;

        if (_staffId)
        {
            staffDefaultSalesGroup.selectForUpdate(_forUpdate);

            select firstonly StaffId, DefaultCommissionSalesGroup from staffDefaultSalesGroup
                index hint StaffIdx
                where staffDefaultSalesGroup.StaffId == _staffId;

            if (!staffDefaultSalesGroup)
            {
                staffDefaultSalesGroup.StaffId = _staffId;
                staffDefaultSalesGroup.DefaultCommissionSalesGroup = _defaultSalesGroup;
                staffDefaultSalesGroup.insert();
            }
            else if (_forUpdate == true)
            {
                ttsbegin;
                staffDefaultSalesGroup.DefaultCommissionSalesGroup = _defaultSalesGroup;
                staffDefaultSalesGroup.update();
                ttscommit;
            }
        }

        return staffDefaultSalesGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCommissionSalesGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find Commission Sales group that has Sales Rep and Sales rep has associated <c>DirPerson</c>, <c>HCMWorker</c> for current worker.
    /// E.g. We have Commission Sales Group "TV1", "REGR1"
    /// Retail Staff worker "Worker1" is associated with <c>HCMWorker</c> and <c>DirPerson</c>
    /// If Sales Rep has TV1 associated with Worker1 and REGR1 is also associated with Worker1
    /// Result: Worker1 to get 2 Commission Sales Groups in Lookup: TV1, REGR1 with groupId, Name as columns.
    /// </summary>
    /// <param name = "_staffId">
    /// staffId from <c>RetailStaffTable</c>
    /// </param>
    /// <param name = "_defaultSalesGroup">
    /// groupId from <c>CommissionSalesGroup</c> table.
    /// </param>
    /// <returns>
    /// true if field in <c>CommissionSalesGroup</c> is associated with Retail staff, otherwise false.
    /// </returns>
    public static boolean validateCommissionSalesGroup(RetailStaffId _staffId,  CommissSalesGroup _defaultSalesGroup)
    {
        boolean ret=true;

        CommissionSalesGroup commissionSalesGroup ;
        CommissionSalesRep commissionSalesRep ;
        DirPerson dirPerson ;
        HcmWorker hcmWorker ;
        RetailStaffTable staffTable;

        select firstonly RecId from commissionSalesGroup
            where commissionSalesGroup.GroupId == _defaultSalesGroup
        exists join commissionSalesRep
            where commissionSalesGroup.GroupId == commissionSalesRep.GroupId
        exists join dirPerson
            where commissionSalesRep.Person == dirPerson.RecId
        exists join hcmWorker
            where hcmWorker.Person == dirPerson.RecId
        exists join staffTable
            where staffTable.staffId == hcmWorker.PersonnelNumber && staffTable.staffId == _staffId;

        if (commissionSalesGroup.RecId == 0)
        {
            ret = checkFailed("@REX:IncorrectCommissionSalesGroup");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the record in the RetailStaffDefaultCommissionSalesGroup.
    /// </summary>
    /// <param name = "_staffId">
    /// staffId from RetailStaffTable
    /// </param>
    /// <param name = "_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the RetailStaffDefaultCommissionSalesGroup table; otherwise, an empty record.
    /// </returns>
    public static RetailStaffDefaultCommissionSalesGroup find(RetailStaffId _staffId, boolean _forUpdate = false)
    {
        RetailStaffDefaultCommissionSalesGroup   staffDefaultSalesGroup;

        if (_staffId)
        {
            staffDefaultSalesGroup.selectForUpdate(_forUpdate);

            select firstonly StaffId, DefaultCommissionSalesGroup from staffDefaultSalesGroup
                index hint StaffIdx
                where staffDefaultSalesGroup.StaffId == _staffId;
        }

        return staffDefaultSalesGroup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@Retail:DeveloperDocumentationRetailStaffDefaultCommissionSalesGroup</DeveloperDocumentation>
	<Label>@Retail:StaffDefaultCommissionSalesGroup</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>StaffId</TitleField1>
	<TitleField2>DefaultCommissionSalesGroup</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>CommerceEmployees</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StaffDefaultCommissionSalesGroup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultCommissionSalesGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StaffId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailStaffId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultCommissionSalesGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CommissSalesGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>StaffSalesGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>StaffId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DefaultCommissionSalesGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StaffIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>StaffId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CommissionSalesGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CommissionSalesGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultCommissionSalesGroup</Name>
					<Field>DefaultCommissionSalesGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStaffTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RetailStaffTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StaffId</Name>
					<Field>StaffId</Field>
					<RelatedField>staffId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>