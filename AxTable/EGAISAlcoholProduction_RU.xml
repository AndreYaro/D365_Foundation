<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EGAISAlcoholProduction_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EGAISAlcoholProduction_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDuplicateSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the AX item combination which is used for settlement with the current EGAIS alcohol production
    ///    has already been used for settlement with another EGAIS alcohol production.
    /// </summary>
    /// <returns>
    ///    true, if the AX item combination which is used for settlement with the current EGAIS alcohol production
    ///    has not been used for settlement with another EGAIS alcohol production; otherwise, false.
    /// </returns>
    public boolean checkDuplicateSettlement()
    {
        EGAISAlcoholProduction_RU   alcoholProduction;
        boolean                     ret = true;

        if (this.ItemId)
        {
            select firstonly AlcCode, RecId from alcoholProduction
            index hint ItemDimIdx
            where alcoholProduction.ItemId              == this.ItemId
                && alcoholProduction.ConfigId           == this.ConfigId
                && alcoholProduction.InventSizeId       == this.InventSizeId
                && alcoholProduction.InventColorId      == this.InventColorId
                && alcoholProduction.InventStyleId      == this.InventStyleId
                && alcoholProduction.InventVersionId    == this.InventVersionId
                && alcoholProduction.RecId              != this.RecId;

            if (alcoholProduction.RecId)
            {
                ret = checkFailed(strFmt(
                "@EGAIS:itemV2",
                this.ItemId,
                this.ConfigId,
                this.InventSizeId,
                this.InventColorId,
                this.InventStyleId,
                this.InventVersionId,
                alcoholProduction.AlcCode));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventDimCombination</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the current inventory dimensions combination is valid for the AX item
    ///    used for settlement with EGAIS alcohol production.
    /// </summary>
    /// <returns>
    ///    true if the current inventory dimensions combination is valid for the AX item
    ///    used for settlement with EGAIS alcohol production; otherwise, false.
    /// </returns>
    public boolean checkInventDimCombination()
    {
        InventDim inventDim;

        inventDim.InventDimFieldsMap::initProductDimensionsFrom(this);

        return inventDim.validateWriteInventDimCombination(this.ItemId,false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if the alcohol product characteristics entered for the current EGAIS alcohol product are equal to the
    ///    characteristics of the AX item which is used for settlement.
    /// </summary>
    /// <returns>
    ///    true, if the alcohol product characteristics entered for the current EGAIS alcohol product are equal to the
    ///    characteristics of the AX item which is used for settlement; otherwise, false.
    /// </returns>
    public boolean checkInventTable()
    {
        InventTable             inventTable;
        EGAISClient_RU          eGAISClient;
        VendTable               vendTable;
        boolean                 ret = true;

        if (this.ItemId)
        {
            inventTable = InventTable::find(this.ItemId);

            if (this.AlcVolume != inventTable.AlcoholStrength_RU)
            {
                ret = checkFailed(strFmt("@EGAIS:AlcoholStrengthOfTheEgaisAlcoholProductIsNotEqual", this.AlcVolume, inventTable.AlcoholStrength_RU), '',
                              SysInfoAction_TableField::newBufferField(inventTable, fieldNum(InventTable, AlcoholStrength_RU)));
            }

            if (this.ProductVCode != inventTable.AlcoholProductionTypeId_RU)
            {
                ret = checkFailed(strFmt("@EGAIS:AlcoholProductTypeOfTheEgaisAlcoholProductIsNotEqual", this.ProductVCode, inventTable.AlcoholProductionTypeId_RU), '',
                              SysInfoAction_TableField::newBufferField(inventTable, fieldNum(InventTable, AlcoholProductionTypeId_RU)));
            }

            eGAISClient     = EGAISClient_RU::findRecId(this.Producer);
            vendTable       = VendTable::findByPartyRecId(eGAISClient.Party);

            if (!vendTable)
            {
                ret = checkFailed(strFmt("@EGAIS:EgaisCounteragentIsNotSettledWithTheVendor", eGAISClient.RegId), '',
                              SysInfoAction_TableField::newBuffer(eGAISClient));
            }
            else
            {
                if (vendTable.AccountNum != inventTable.AlcoholManufacturerId_RU)
                {
                    ret = checkFailed(strFmt("@EGAIS:ManufacturerOfTheEgaisAlcoholProductIsNotEqualToItem", vendTable.AccountNum, inventTable.AlcoholManufacturerId_RU), '',
                                 SysInfoAction_TableField::newBufferField(inventTable, fieldNum(InventTable, AlcoholManufacturerId_RU)));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAlcoholProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies EGAIS-related fields from the <paramref name="_alcoholProduction"/> to the current record.
    /// </summary>
    /// <param name="_alcoholProduction">
    /// <c>EGAISAlcoholProduction_RU</c> table variable used to initialize the current record.
    /// </param>
    /// <returns>
    /// true if any change was made to the current record; otherwise, false.
    /// </returns>
    public boolean initFromAlcoholProduction(EGAISAlcoholProduction_RU _alcoholProduction)
    {
        boolean isAnythingChanged = false;
        void setField(FieldId _fieldId, anytype _value)
        {
            if (this.(_fieldId) != _value)
            {
                this.(_fieldId)     = _value;
                isAnythingChanged   = true;
            }
        }

        setField(fieldNum(EGAISAlcoholProduction_RU, FullName),     _alcoholProduction.FullName);
        setField(fieldNum(EGAISAlcoholProduction_RU, ShortName),    _alcoholProduction.ShortName);
        setField(fieldNum(EGAISAlcoholProduction_RU, Capacity),     _alcoholProduction.Capacity);
        setField(fieldNum(EGAISAlcoholProduction_RU, AlcVolume),    _alcoholProduction.AlcVolume);
        setField(fieldNum(EGAISAlcoholProduction_RU, ProductVCode), _alcoholProduction.ProductVCode);
        setField(fieldNum(EGAISAlcoholProduction_RU, AlcProdType),  _alcoholProduction.AlcProdType);
        setField(fieldNum(EGAISAlcoholProduction_RU, Producer),     _alcoholProduction.Producer);
        setField(fieldNum(EGAISAlcoholProduction_RU, Importer),     _alcoholProduction.Importer);

        return isAnythingChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>InventTable</c> record corresponding to the AX item which is settled with the EGAIS alcohol production stored in the current record.
    /// </summary>
    /// <returns>
    ///    The <c>InventTable</c> record corresponding to the AX item which is settled with the EGAIS alcohol production stored in the current record.
    /// </returns>
    public InventTable inventTable()
    {
        return InventTable::find(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPacked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the alcohol item is packed or unpacked.
    /// </summary>
    /// <returns>
    /// true if the alcohol item is packed; otherwise, false.
    /// </returns>
    public boolean isPacked()
    {
        return this.Capacity ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch(_fieldId)
        {
            case fieldNum(EGAISAlcoholProduction_RU, ItemId):
                this.Unit = InventTable::find(this.ItemId).purchUnitId();
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        ret = this.checkInventTable() && ret;

        ret = this.checkInventDimCombination() && ret;

        ret = this.checkDuplicateSettlement() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist( EGAISAlcCode_RU _alcCode,
                               boolean         _throwError = false)
    {
        boolean ret = true;
        str     errorMsg;

        if (!EGAISAlcoholProduction_RU::exist(_alcCode))
        {
            errorMsg = strFmt(EGAISAlcoholProduction_RU::txtNotExist(), _alcCode);

            if (_throwError)
            {
                throw error(errorMsg, '', SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(EGAISAlcoholProduction_RU), MenuItemType::Display));
            }

            ret = checkFailed(errorMsg);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the alcohol product exists for the given code.
    /// </summary>
    /// <param name="_alcCode">
    /// The alcohol product code.
    /// </param>
    /// <returns>
    /// true, if the alcohol product exists for the given code; otherwise, false
    /// </returns>
    public static boolean exist(EGAISAlcCode_RU    _alcCode)
    {
        return _alcCode && (select firstonly RecId from EGAISAlcoholProduction_RU
                            index hint AlcCodeIdx
                            where EGAISAlcoholProduction_RU.AlcCode == _alcCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>EGAISAlcoholProduction_RU</c> table.
    /// </summary>
    /// <param name="_alcCode">
    /// Code of EGAIS alcohol production.
    /// </param>
    /// <param name="_forUpdate">
    /// Indicates whether to select the record for update or not.
    /// </param>
    /// <returns>
    /// A record in the <c>EGAISAlcoholProduction_RU</c> table.
    /// </returns>
    public static EGAISAlcoholProduction_RU find(
    EGAISAlcCode_RU _alcCode,
    boolean         _forUpdate  = false)
    {
        EGAISAlcoholProduction_RU   alcoholProduction;

        if (_alcCode)
        {
            if (_forUpdate)
            {
                alcoholProduction.selectForUpdate(_forUpdate);
            }

            select firstonly alcoholProduction
            index hint AlcCodeIdx
            where alcoholProduction.AlcCode == _alcCode;
        }

        return alcoholProduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItemDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>EGAISAlcoholProduction_RU</c> table based on the
    ///    item and its inventory dimensions with which EGAIS alcohol production is settled.
    /// </summary>
    /// <param name="_itemId">
    ///    Item identifier.
    /// </param>
    /// <param name="_configId">
    ///    Configuration of the item.
    /// </param>
    /// <param name="_inventSizeId">
    ///    Size of the item.
    /// </param>
    /// <param name="_inventColorId">
    ///    Color of the item.
    /// </param>
    /// <param name="_inventStyleId">
    ///    Style of the item.
    /// </param>
    /// <param name="_inventVersionId">
    ///    Version of the item.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EGAISAlcoholProduction_RU</c> table.
    /// </returns>
    [Hookable(false)]
    public static EGAISAlcoholProduction_RU findByItemDimensions(
        ItemId                        _itemId,
        EcoResItemConfigurationName   _configId,
        EcoResItemSizeName            _inventSizeId,
        EcoResItemColorName           _inventColorId,
        EcoResItemStyleName           _inventStyleId,
        EcoResItemVersionName         _inventVersionId,
        boolean                       _forUpdate = false)
    {
        return EGAISAlcoholProduction_RU::findByItemDimensionsInternal(
            _itemId,
            _configId,
            _inventSizeId,
            _inventColorId,
            _inventStyleId,
            _inventVersionId,
            _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItemDimensionsInternal</Name>
				<Source><![CDATA[
    private static EGAISAlcoholProduction_RU findByItemDimensionsInternal(
        ItemId                        _itemId,
        EcoResItemConfigurationName   _configId,
        EcoResItemSizeName            _inventSizeId,
        EcoResItemColorName           _inventColorId,
        EcoResItemStyleName           _inventStyleId,
        EcoResItemVersionName         _inventVersionId,
        boolean                       _forUpdate = false)
    {
        EGAISAlcoholProduction_RU  alcoholProduction;

        if (_itemId)
        {
            if (_forUpdate)
            {
                alcoholProduction.selectForUpdate(_forUpdate);
            }

            select firstonly alcoholProduction
            index hint ItemDimIdx
            where alcoholProduction.ItemId              == _itemId
                && alcoholProduction.ConfigId           == _configId
                && alcoholProduction.InventSizeId       == _inventSizeId
                && alcoholProduction.InventColorId      == _inventColorId
                && alcoholProduction.InventStyleId      == _inventStyleId
                && alcoholProduction.InventVersionId    == _inventVersionId;
        }

        return alcoholProduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItemInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>EGAISAlcoholProduction_RU</c> table based on the initialized <c>InventDim</c> record.
    /// </summary>
    /// <param name="_itemId">
    ///    Item identifier.
    /// </param>
    /// <param name="_inventDim">
    ///    <c>InventDim</c> record which is used for searching.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EGAISAlcoholProduction_RU</c> table.
    /// </returns>
    public static EGAISAlcoholProduction_RU findByItemInventDim(
        ItemId      _itemId,
        inventDim   _inventDim,
        boolean     _forUpdate = false)
    {
        return EGAISAlcoholProduction_RU::findByItemDimensions(
        _itemId,
        _inventDim.configId,
        _inventDim.InventSizeId,
        _inventDim.InventColorId,
        _inventDim.InventStyleId,
        _inventDim.InventVersionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>EGAISAlcoholProduction_RU</c> table based on the record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EGAISAlcoholProduction_RU</c> table.
    /// </returns>
    static EGAISAlcoholProduction_RU findRecId(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        EGAISAlcoholProduction_RU   alcoholProduction;

        if (_recId)
        {
            alcoholProduction.selectForUpdate(_forUpdate);

            select firstonly alcoholProduction
            where alcoholProduction.RecId == _recId;
        }

        return alcoholProduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustInvoiceWithAlcProd</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a query which contains a list of customer invoices including at least one line with EGAIS alcohol production.
    /// </summary>
    /// <param name="_custInvoiceJour">
    ///    The particular invoice based on which to build the query.
    /// </param>
    /// <returns>
    ///    A query which contains a list of customer invoices including at least one line with EGAIS alcohol production.
    /// </returns>
    public static Query queryCustInvoiceWithAlcProd(CustInvoiceJour  _custInvoiceJour = null)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbdsInvoiceJour, qbdsInvoiceTrans, qbdsInvoiceTrans_W, qbdsInventTrans, qbdsAlcoholProduction;

        qbdsInvoiceJour = query.addDataSource(tableNum(CustInvoiceJour));

        if (_custInvoiceJour)
        {
            qbdsInvoiceJour.addRange(fieldNum(CustInvoiceJour, RecId)).value(queryValue(_custInvoiceJour.RecId));
        }

        qbdsInvoiceTrans = qbdsInvoiceJour.addDataSource(tableNum(CustInvoiceTrans));
        qbdsInvoiceTrans.relations(true);
        qbdsInvoiceTrans.joinMode(_custInvoiceJour ? JoinMode::InnerJoin : JoinMode::ExistsJoin);

        qbdsInvoiceTrans_W = qbdsInvoiceTrans.addDataSource(tableNum(CustInvoiceTrans_W));
        qbdsInvoiceTrans_W.addLink(fieldNum(CustInvoiceTrans, RecId),  fieldNum(CustInvoiceTrans_W, CustInvoiceTrans));
        qbdsInvoiceTrans_W.joinMode(JoinMode::NoExistsJoin);    // not credit-notes
        qbdsInvoiceTrans_W.addRange(fieldNum(CustInvoiceTrans_W, RefReturnInvoiceTrans_W)).value(SysQuery::valueNotEmptyString());
        qbdsInvoiceTrans_W.fetchMode(QueryFetchMode::One2One);

        qbdsInventTrans = qbdsInvoiceTrans.addDataSource(tableNum(EGAISInventTransView_RU));
        qbdsInventTrans.addLink(fieldNum(CustInvoiceTrans, InventTransId),  fieldNum(EGAISInventTransView_RU, InventTransId));
        qbdsInventTrans.addLink(fieldNum(CustInvoiceTrans, InvoiceId),      fieldNum(EGAISInventTransView_RU, InvoiceId));
        qbdsInventTrans.addLink(fieldNum(CustInvoiceTrans, InvoiceDate),    fieldNum(EGAISInventTransView_RU, DateFinancial));
        qbdsInventTrans.joinMode(_custInvoiceJour ? JoinMode::InnerJoin : JoinMode::ExistsJoin);
        qbdsInventTrans.fetchMode(QueryFetchMode::One2One);

        qbdsAlcoholProduction = qbdsInventTrans.addDataSource(tableNum(EGAISAlcoholProduction_RU));
        qbdsAlcoholProduction.addLink(fieldNum(EGAISInventTransView_RU, ItemId),           fieldNum(EGAISAlcoholProduction_RU, ItemId));
        qbdsAlcoholProduction.addLink(fieldNum(EGAISInventTransView_RU, ConfigId),         fieldNum(EGAISAlcoholProduction_RU, ConfigId));
        qbdsAlcoholProduction.addLink(fieldNum(EGAISInventTransView_RU, InventSizeId),     fieldNum(EGAISAlcoholProduction_RU, InventSizeId));
        qbdsAlcoholProduction.addLink(fieldNum(EGAISInventTransView_RU, InventColorId),    fieldNum(EGAISAlcoholProduction_RU, InventColorId));
        qbdsAlcoholProduction.addLink(fieldNum(EGAISInventTransView_RU, InventStyleId),    fieldNum(EGAISAlcoholProduction_RU, InventStyleId));
        qbdsAlcoholProduction.addLink(fieldNum(EGAISInventTransView_RU, InventVersionId),  fieldNum(EGAISAlcoholProduction_RU, InventVersionId));
        qbdsAlcoholProduction.joinMode(_custInvoiceJour ? JoinMode::InnerJoin : JoinMode::ExistsJoin);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@EGAIS:EgaisAlcoholProductDoesNotExist";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@EGAIS:TheEgaisalcoholproduction_ruContainsAListOfEgaisAlcohol</DeveloperDocumentation>
	<FormRef>EGAISAlcoholProduction_RU</FormRef>
	<Label>@EGAIS:EgaisAlcoholProducts</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<TitleField1>AlcCode</TitleField1>
	<TitleField2>FullName</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>EGAIS</Modules>
	<ReplacementKey>AlcCodeIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AlcCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FullName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AlcCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShortName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS318405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AlcCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FullName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShortName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS318405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AlcProdType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AlcVolume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Capacity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductVCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Producer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Importer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfigId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventVersionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS34991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AlcCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FullName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AlcCode</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>EGAISAlcCode_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AlcProdType</Name>
			<EnumType>EGAISAlcProdType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AlcVolume</Name>
			<ExtendedDataType>EGAISAlcVolume_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Capacity</Name>
			<ExtendedDataType>EGAISAlcProdCapacity_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConfigId</Name>
			<ExtendedDataType>EcoResItemConfigurationName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FullName</Name>
			<ExtendedDataType>EGAISFullName_RU</ExtendedDataType>
			<HelpText>@EGAIS:AlcoholProductFullName</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Importer</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@EGAIS:ImporterOfTheAlcoholProduct</HelpText>
			<Label>@EGAIS:Importer</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventColorId</Name>
			<ExtendedDataType>EcoResItemColorName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSizeId</Name>
			<ExtendedDataType>EcoResItemSizeName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventStyleId</Name>
			<ExtendedDataType>EcoResItemStyleName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventVersionId</Name>
			<ExtendedDataType>EcoResItemVersionName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Producer</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@EGAIS:ProducerOfTheAlcoholProduct</HelpText>
			<Label>@EGAIS:Producer</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProductVCode</Name>
			<ExtendedDataType>EGAISProductVCode_RU</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShortName</Name>
			<ExtendedDataType>EGAISShortName_RU</ExtendedDataType>
			<HelpText>@EGAIS:AlcoholProductShortName</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Unit</Name>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<HelpText>@EGAIS:UnitInWhichTheAlcoholProductIsCountedInEgais</HelpText>
			<Label>@EGAIS:EgaisUnit</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UnitType</Name>
			<EnumType>EGAISAlcProdUnitType_RU</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AlcCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AlcCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemDimIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ConfigId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventSizeId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventColorId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventStyleId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventVersionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventDimFieldsMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>configId</MapField>
					<MapFieldTo>configId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>inventBatchId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventColorId</MapField>
					<MapFieldTo>InventColorId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension1</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension10</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension11</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension12</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension2</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension3</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension4</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension5</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension6</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension7</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension8</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimension9</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventGTDId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventOwnerId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventProfileId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>inventSerialId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSizeId</MapField>
					<MapFieldTo>InventSizeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventStatusId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventStyleId</MapField>
					<MapFieldTo>InventStyleId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventVersionId</MapField>
					<MapFieldTo>InventVersionId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LicensePlateId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>wMSLocationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>wMSPalletId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AlcoholProductionType_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>AlcoholProductionType_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductVCode</Name>
					<Field>ProductVCode</Field>
					<RelatedField>TypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResColor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResColor</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventColorId</Name>
					<Field>InventColorId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResConfiguration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResConfiguration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConfigId</Name>
					<Field>ConfigId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResSize</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResSize</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSizeId</Name>
					<Field>InventSizeId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResStyle</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@FPK270013</EntityRelationshipRole>
			<RelatedTable>EcoResStyle</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventStyleId</Name>
					<Field>InventStyleId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SCM:InventoryVersion</EntityRelationshipRole>
			<RelatedTable>EcoResVersion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventVersionId</Name>
					<Field>InventVersionId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Importer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EGAISClient_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Importer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Importer</Name>
					<Field>Importer</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Producer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EGAISClient_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Producer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Producer</Name>
					<Field>Producer</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>