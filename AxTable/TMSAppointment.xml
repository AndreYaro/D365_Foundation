<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSAppointment</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSAppointment extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appointmentName</Name>
				<Source><![CDATA[
    TMSName appointmentName()
    {
        TMSName         ret;

        if (this.AccountNum
           || this.OrderNum
           || this.CarrierCode
           || this.ApptRefNum
           || this.ApptStatus == TMSApptStatus::Blind)
        {
            ret = this.AccountNum + '-' + this.OrderNum + '-' + this.CarrierCode + '-' + this.ApptRefNum;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelAppointment</Name>
				<Source><![CDATA[
    void cancelAppointment()
    {
        ttsbegin;

        this.selectForUpdate(true);
        this.ApptStatus = TMSApptStatus::Cancelled;
        this.write();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callRefRecordForm</Name>
				<Source><![CDATA[
    void callRefRecordForm()
    {
        Args args = new Args();
        args.record(this.returnRefRecord());

        MenuFunction menuFunction = this.retrieveMenuFunctionByAppointmentReferenceType();
        if (args.record() && menuFunction)
        {
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveMenuFunctionByAppointmentReferenceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the menu function based on the appointment reference type.
    /// </summary>
    /// <returns>The menu function.</returns>
    protected MenuFunction retrieveMenuFunctionByAppointmentReferenceType()
    {
        MenuFunction menuFunction;
        switch (this.ApptRefType)
        {
            case TMSApptRefType::Sales:
                menuFunction = new MenuFunction(menuItemDisplayStr(SalesTable), MenuItemType::Display);
                break;

            case TMSApptRefType::Purch:
                menuFunction = new MenuFunction(menuItemDisplayStr(PurchTable), MenuItemType::Display);
                break;

            // TMD with WHS
            case TMSApptRefType::Load:
                menuFunction = new MenuFunction(menuItemDisplayStr(WHSLoadTable), MenuItemType::Display);
                break;
        }
        return menuFunction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCalendarSlotsFilled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if number of active appointments exceeds number of available slots.
    /// </summary>
    /// <returns>
    /// true if number of available slots is exceeded; otherwise, false.
    /// </returns>
    boolean checkCalendarSlotsFilled()
    {
        Query query = this.buildActiveAppointmentInCalendarSlotQuery();
        QueryRun queryRun = new QueryRun(query);
        int recordCount = SysQuery::countTotal(queryRun);

        return (this.RecId ? recordCount> TMSCalendarType::find(this.CalendarTypeId).CalendarSlots
                           : recordCount + 1 > TMSCalendarType::find(this.CalendarTypeId).CalendarSlots);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildActiveAppointmentInCalendarSlotQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used to find the active appointments in a calendar slot.
    /// </summary>
    /// <returns>The query used to find the active appointments in a calendar slot.</returns>
    protected Query buildActiveAppointmentInCalendarSlotQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbdsTMSAppointment = query.addDataSource(tableNum(TMSAppointment));
        
        qbdsTMSAppointment.fields().clearFieldList();
        qbdsTMSAppointment.fields().addField(fieldNum(TMSAppointment, RecId));
        qbdsTMSAppointment.addRange(fieldNum(TMSAppointment, CalendarTypeId)).value(queryValue(this.CalendarTypeId));

        this.addActiveAppointmentRange(qbdsTMSAppointment);
        
        qbdsTMSAppointment.addRange(fieldNum(TMSAppointment, RecId)).value(strfmt('(%1.%2 < %3) && (%1.%4 > %5)',
                    qbdsTMSAppointment.name(),
                    fieldStr(TMSAppointment, ApptFromUTCDateTime),
                    DateTimeUtil::toStr(this.ApptToUTCDateTime),
                    fieldStr(TMSAppointment, ApptToUTCDateTime),
                    DateTimeUtil::toStr(this.ApptFromUTCDateTime)));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addActiveAppointmentRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range to the appointment <c>QueryBuildDataSource</c> to get only the active appointments.
    /// </summary>
    /// <param name = "_qbdsTMSAppointment">The appointment <c>QueryBuildDataSource</c></param>
    [Replaceable]
    protected void addActiveAppointmentRange(QueryBuildDataSource _qbdsTMSAppointment)
    {
        _qbdsTMSAppointment.addRange(fieldNum(TMSAppointment, ApptStatus)).value(strfmt('(%1.%2 != %3) && (%1.%2 != %4)',
                    _qbdsTMSAppointment.name(),
                    fieldStr(TMSAppointment, ApptStatus),
                    int2str(enum2int(TMSApptStatus::Completed)),
                    int2str(enum2int(TMSApptStatus::Cancelled))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHistory</Name>
				<Source><![CDATA[
    void createHistory(ReasonCode _reasonCode = '', TMSNote _note = '')
    {
        TMSApptHistory      apptHistory;

        ttsbegin;

        apptHistory.ApptId               = this.ApptId;
        apptHistory.CalendarTypeId       = this.CalendarTypeId;
        apptHistory.ApptStatus           = this.ApptStatus;
        apptHistory.ApptFromUTCDateTime  = this.ApptFromUTCDateTime;
        apptHistory.ApptToUTCDateTime    = this.ApptToUTCDateTime;
        apptHistory.CarrierCode          = this.CarrierCode;
        apptHistory.BrokerCode           = this.BrokerCode;
        apptHistory.ApptCustomerPickup   = this.ApptCustomerPickup;
        apptHistory.ApptDirection        = this.ApptDirection;
        apptHistory.ApptRefType          = this.ApptRefType;
        apptHistory.ApptRefNum           = this.ApptRefNum;
        apptHistory.TractorNumber        = this.TractorNumber;
        apptHistory.TrailerNumber        = this.TrailerNumber;
        apptHistory.ReasonCode           = _reasonCode;
        apptHistory.Note                 = _note;
        apptHistory.WHSShippingContainerId = this.WHSShippingContainerId;

        if (!apptHistory.validateWrite())
        {
            throw error(strFmt("@TRX:TMSCannotInsertRecordInTable", tablePName(TMSApptHistory)));
        }
        else
        {
            apptHistory.insert();
        }
      
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.ApptFromUTCDateTime = DateTimeUtil::getSystemDateTime();

        this.ApptToUTCDateTime = TMSAppointment::adjustToDateTime(this.ApptFromUTCDateTime, TMSCalendarType::find(this.CalendarTypeId).DefaultDuration);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        if (this.ApptRefType == TMSApptRefType::Load && this.isOpen())
        {
            ttsBegin;
            WHSLoadTable whsLoadTable = WHSLoadTable::find(this.ApptRefNum, true);
            if (whsLoadTable.RecId)
            {
                whsLoadTable.CarrierCode   = this.CarrierCode;
                whsLoadTable.TractorNumber = this.TractorNumber;
                whsLoadTable.TrailerNumber = this.TrailerNumber;
                whsLoadTable.ModeCode      = TMSCarrier::find(this.CarrierCode).ModeCode;
                whsLoadTable.ShippingContainerId = this.WHSShippingContainerId;
                whsLoadTable.update();
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWMSLocationId</Name>
				<Source><![CDATA[
    public void lookupWMSLocationId(FormStringControl _ctrl, WHSLocProfileId _profileId)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        sysTableLookup          = SysTableLookup::newParameters(tableNum(WMSLocation), _ctrl);
        query                   = new Query();
        queryBuildDataSource    = query.addDataSource(tableNum(WMSLocation));

        sysTableLookup.addLookupfield(fieldNum(WMSLocation, wmsLocationId));
        sysTableLookup.addLookupfield(fieldNum(WMSLocation, LocProfileId));
        sysTableLookup.addLookupfield(fieldNum(WMSLocation, LocationType));
        sysTableLookup.addLookupfield(fieldNum(WMSLocation, InventLocationId));

        if (_profileId)
        {
            queryBuildDataSource.addRange(fieldNum(WMSLocation, LocProfileId)).value(queryValue(_profileId));
        }

        if (this.InventLocationId)
        {
            queryBuildDataSource.addRange(fieldNum(WMSLocation, InventLocationId)).value(queryValue(this.InventLocationId));
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        TMSCalendarType             tmsCalendarType;

        switch (_fieldId)
        {
            // Modify the referring record's date
            case fieldNum(TMSAppointment, ApptStatus), fieldNum(TMSAppointment, ApptToUTCDateTime):
                if (this.ApptStatus == TMSApptStatus::Firmed)
                {
                    this.modifyRecordDate();
                    TMSDriverLog::createDriverLog(this.ApptId);
                }
                break;

            case fieldNum(TMSAppointment, ApptRefType):
                this.ApptRefNum = '';
                this.cleanApptRef(false);

                this.ApptDirection = this.calcApptDirection();
                break;

            case fieldNum(TMSAppointment, ApptRefNum):
                this.updateFromOrigin();
                break;

            case fieldNum(TMSAppointment, ApptFromUTCDateTime):
                if (this.ApptRefNum != '')
                {
                    this.updateOriginDates();
                }
                this.ApptToUTCDateTime = TMSAppointment::adjustToDateTime(
                                                        this.ApptFromUTCDateTime,
                                                        TMSCalendarType::find(this.CalendarTypeId).DefaultDuration);
                break;

            case fieldNum(TMSAppointment, TrailerNumber), fieldNum(TMSAppointment, TractorNumber), fieldNum(TMSAppointment, WHSShippingContainerId):
                if (this.ApptRefNum != '')
                {
                    this.updateOriginInfo();
                }
                break;

            case fieldNum(TMSAppointment, CalendarTypeId):
                if (this.Name == '')
                {
                    this.Name = this.appointmentName();
                }

                tmsCalendarType =  TMSCalendarType::find(this.CalendarTypeId);

                this.ApptToUTCDateTime = TMSAppointment::adjustToDateTime(
                                                            this.ApptFromUTCDateTime,
                                                            tmsCalendarType.DefaultDuration);
                this.ApptDirection = tmsCalendarType.ApptDirection;

                if (tmsCalendarType.InventSiteId || tmsCalendarType.InventLocationId)
                {
                    this.InventSiteId = tmsCalendarType.InventSiteId;
                    this.InventLocationId = tmsCalendarType.InventLocationId;
                }
                break;
        }

        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(TMSAppointment, InventLocationId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventLocationId));
                break;
            case fieldStr(TMSAppointment, InventSiteId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventSiteId));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyRecordDate</Name>
				<Source><![CDATA[
    void modifyRecordDate()
    {
        WHSLoadTable    loadTable;

        ttsbegin;

        switch (this.ApptRefType)
        {
            // TMS with WHS
            case TMSApptRefType::Load:
                loadTable                               = WHSLoadTable::find(this.ApptRefNum, true);
                loadTable.LoadSchedShipUTCDateTime      = this.ApptFromUTCDateTime;
                loadTable.write();
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnRefRecord</Name>
				<Source><![CDATA[
    Common returnRefRecord(TMSId _orderNum = this.ApptRefNum)
    {
        Common      ret;

        switch (this.ApptRefType)
        {
            case TMSApptRefType::Sales:
                ret = SalesTable::find(_orderNum);
                break;

            case TMSApptRefType::Purch:
                ret = PurchTable::find(_orderNum);
                break;

            // TMS with WHS
            case TMSApptRefType::Load:
                ret = WHSLoadTable::find(_orderNum);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setApptId</Name>
				<Source><![CDATA[
    void setApptId()
    {
        this.ApptId = NumberSeq::newGetNum(TMSParameters::numRefTMSApptId()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Update fields on the appointment from the origin record.
    /// </summary>
    void updateFromOrigin()
    {
        WHSLoadTable        loadTable;
        TMSSalesTable       tmsSalesTable;
        SalesTable          salesTable;
        TMSPurchTable       tmsPurchTable;
        PurchTable          purchTable;

        this.cleanApptRef(true);
        if (this.ApptRefNum)
        {
            this.cleanApptRef(true);
            this.updateOriginDates();

            switch (this.ApptRefType)
            {
                case TMSApptRefType::Load:
                    loadTable               = WHSLoadTable::find(this.ApptRefNum);
                    this.updateFromLoadTable(loadTable, true);
                    break;

                case TMSApptRefType::Sales:
                    salesTable              = SalesTable::find(this.ApptRefNum);
                    tmsSalesTable           = TMSSalesTable::find(this.ApptRefNum);
                    this.CarrierCode        = tmsSalesTable.CarrierCode;
                    this.BrokerCode         = tmsSalesTable.BrokerCode;
                    this.OrderNum           = salesTable.SalesId;
                    this.AccountNum         = salesTable.CustAccount;
                    this.InventSiteId       = salesTable.InventSiteId;
                    this.InventLocationId   = salesTable.InventLocationId;
                    break;

                case TMSApptRefType::Purch:
                    purchTable              = PurchTable::find(this.ApptRefNum);
                    tmsPurchTable           = TMSPurchTable::find(this.ApptRefNum);
                    this.CarrierCode        = tmsPurchTable.CarrierCode;
                    this.OrderNum           = purchTable.PurchId;
                    this.AccountNum         = purchTable.OrderAccount;
                    this.InventSiteId       = purchTable.InventSiteId;
                    this.InventLocationId   = purchTable.InventLocationId;
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOriginDates</Name>
				<Source><![CDATA[
    void updateOriginDates()
    {
        WHSLoadTable        loadTable;

        ttsbegin;

        switch (this.ApptRefType)
        {
            case TMSApptRefType::Load:
                loadTable = WHSLoadTable::find(this.ApptRefNum, true);

                if (loadTable.LoadDirection == WHSLoadDirection::Inbound)
                {
                    loadTable.eta = this.ApptFromUTCDateTime;
                }
                else
                {
                    loadTable.LoadSchedShipUTCDateTime = this.ApptFromUTCDateTime;
                }

                loadTable.write();
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOriginInfo</Name>
				<Source><![CDATA[
    void updateOriginInfo()
    {
        WHSLoadTable        loadTable;

        ttsbegin;

        switch (this.ApptRefType)
        {
            case TMSApptRefType::Load:
                loadTable = WHSLoadTable::find(this.ApptRefNum, true);
                loadTable.TrailerNumber = this.TrailerNumber;
                loadTable.TractorNumber = this.TractorNumber;
                loadTable.ShippingContainerId = this.WHSShippingContainerId;
                loadTable.write();
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (!this.canBeDeleted())
        {
            ret = checkFailed("@TRX580");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the appointment can be deleted.
    /// </summary>
    /// <returns>true if the appointment can be deleted; otherwise, false.</returns>
    protected boolean canBeDeleted()
    {
        return this.ApptStatus != TMSApptStatus::Firmed &&
               this.ApptStatus != TMSApptStatus::Completed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(TMSAppointment, InventLocationId):
                ret = this.InventStorageDimMap::validateField(fieldNum(InventStorageDimMap, InventLocationId));
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        TMSApptStatus           apptStatus;
        TMSApptFromUTCDateTime  compareDateTime = DateTimeUtil::getSystemDateTime();
        boolean                 ret;

        // Check if CalendarType Slots have exceeded capacity.
        if (this.CalendarTypeId != '' && this.checkCalendarSlotsFilled())
        {
            info(strFmt("@TRX74",
                 this.CalendarTypeId,
                 TMSCalendarType::find(this.CalendarTypeId).CalendarSlots));
        }

        apptStatus = this.orig().ApptStatus;

        ret = super();

        if (this.ApptFromUTCDateTime    < compareDateTime                   &&
            this.ApptFromUTCDateTime    != this.orig().ApptFromUTCDateTime  &&
            this.ApptToUTCDateTime      < compareDateTime                   &&
            this.isOpen())
        {
            ret = checkFailed("@TRX581");
        }

        if (this.ApptFromUTCDateTime > this.ApptToUTCDateTime)
        {
            ret = checkFailed("@TRX207");
        }

        // Check if we have a reference for an appointment where the Reference type is not None
        if (this.ApptRefType != TMSApptRefType::None)
        {
            if (!this.ApptRefNum)
            {
                ret = checkFailed("@SYP4881095");
            }
        }

        // Check if referring record is already attached to an open record.
        if (this.ApptRefType == TMSApptRefType::Load && this.isOpen())
        {
            if (this.existOpenAppointmentForSameLoad())
            {
                ret = checkFailed(strFmt("@TRX1116", this.ApptRefNum));
            }
        }

        if (apptStatus == TMSApptStatus::Firmed  &&
            this.ApptStatus == TMSApptStatus::Tentative)
        {
            ret = checkFailed("@TRX209");
        }

        if (apptStatus == TMSApptStatus::Blind  &&
            (this.ApptStatus == TMSApptStatus::Firmed ||
            this.ApptStatus == TMSApptStatus::Tentative))
        {
            ret = checkFailed("@TRX508");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOpenAppointmentForSameLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if an open appointment related to the same load exists.
    /// </summary>
    /// <returns>true if an appointment exists; otherwise, false.</returns>
    protected boolean existOpenAppointmentForSameLoad()
    {
        Query query = this.buildOpenAppointmentForSameLoadQuery();
        QueryRun queryRun = new QueryRun(query);

        return queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOpenAppointmentForSameLoadQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used to find the open appointment for the same load.
    /// </summary>
    /// <returns>The query used to find the open appointment for the same load.</returns>
    protected Query buildOpenAppointmentForSameLoadQuery()
    {
        Query query = this.buildOpenAppointmentForLoadQuery(this.ApptRefNum);

        QueryBuildDataSource qbdsTMSAppointment = query.datasourceTable(tableNum(TMSAppointment));
        
        qbdsTMSAppointment.fields().clearFieldList();
        qbdsTMSAppointment.fields().addField(fieldNum(TMSAppointment, RecId));

        qbdsTMSAppointment.addRange(fieldNum(TMSAppointment, ApptId)).value(SysQuery::valueNot(queryValue(this.ApptId)));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustToDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the appointment end time based on duration.
    /// </summary>
    /// <param name="_fromDateTime">
    ///     The appointment start time.
    /// </param>
    /// <param name="_calendarTypeDuration">
    ///     The Calendar type duration.
    /// </param>
    /// <param name="_equipmentDuration">
    ///     The equipment type duration.
    /// </param>
    /// <returns>
    ///     The appointment end time.
    /// </returns>
    public static TMSApptToUTCDateTime adjustToDateTime(
        TMSApptFromUTCDateTime  _fromDateTime,
        TMSDefaultDuration      _calendarTypeDuration   = 0,
        TMSDefaultDuration      _equipmentDuration      = 0)
    {
        TMSDefaultDuration      duration;

        duration += TMSParameters::find().DefaultDuration + _calendarTypeDuration + _equipmentDuration;

        return DateTimeUtil::addMinutes(_fromDateTime, duration);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstantAppointment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instant Appointment record.
    /// </summary>
    /// <param name="_calendarTypeId">
    /// The Calendar Type of the new appointment.
    /// </param>
    /// <param name="_originId">
    /// The Appointment Reference Number for the new appointment.
    /// </param>
    /// <returns>
    /// The new Appointment Id.
    /// </returns>
    public static TMSApptId createInstantAppointment(TMSCalendarTypeId _calendarTypeId, TMSApptRefNum _originId)
    {
        TMSAppointment appointment;
        WHSLoadTable   loadTable;
        TMSDriverLog   driverLog;

        ttsbegin;

        appointment.setApptId();
        appointment.CalendarTypeId   = _calendarTypeId;
        appointment.initValue();
        appointment.ApptStatus       = TMSApptStatus::Blind;
        appointment.modifiedField(fieldNum(TMSAppointment, CalendarTypeId));

        if (WHSLoadTable::exist(_originId))
        {
            loadTable                    = WHSLoadTable::find(_originId);
            appointment.updateFromLoadTable(loadTable, true);
        }

        appointment.insert();

        driverLog.ApptId = appointment.ApptId;
        driverLog.insert();

        ttscommit;

        return appointment.ApptId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(TMSApptId _tmsApptId)
    {
        return (_tmsApptId) &&
               (select firstonly tmsAppointment
                    where tmsAppointment.ApptId == _tmsApptId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TMSAppointment find(TMSApptId _tmsApptId,
                                      boolean   _forupdate = false)
    {
        TMSAppointment    tmsAppointment;

        if (_tmsApptId)
        {
            tmsAppointment.selectForUpdate(_forupdate);

            select firstonly tmsAppointment
                where tmsAppointment.ApptId == _tmsApptId;
        }

        return tmsAppointment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAppointmentComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the load does not have any non-completed appointments.
    /// </summary>
    /// <param name="_loadId">
    /// The load Id of the load being validated.
    /// </param>
    /// <returns>
    /// true if no appointment exists that is not complete; othwerwise, false.
    /// </returns>
    public static boolean isAppointmentComplete(WHSLoadId _loadId)
    {
        TMSAppointment  appointment;

        Query query = appointment.buildActiveAppointmentWithRequiredCheckInQuery(_loadID);
        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            appointment = queryRun.get(tableNum(TMSAppointment));

            return checkFailed(strFmt("@TRX2716", appointment.CalendarTypeId, appointment.ApptId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildActiveAppointmentWithRequiredCheckInQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used to find the active appointment with required check in and out for the specified load.
    /// </summary>
    /// <param name = "_loadID">The load ID of the <c>WHSLoadTable</c> record.</param>
    /// <returns>The query used to find the active appointment with required check in and out for the specified load.</returns>
    protected Query buildActiveAppointmentWithRequiredCheckInQuery(TMSApptRefNum _loadID)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsTMSAppointment = query.addDataSource(tableNum(TMSAppointment));
        
        qbdsTMSAppointment.fields().clearFieldList();
        qbdsTMSAppointment.fields().addField(fieldNum(TMSAppointment, ApptStatus));
        qbdsTMSAppointment.fields().addField(fieldNum(TMSAppointment, ApptId));
        qbdsTMSAppointment.fields().addField(fieldNum(TMSAppointment, ApptRefNum));
        qbdsTMSAppointment.fields().addField(fieldNum(TMSAppointment, CalendarTypeId));
        qbdsTMSAppointment.firstOnly(true);
        
        this.addAppointmentLoadRange(qbdsTMSAppointment, _loadID);

        this.addActiveAppointmentRange(qbdsTMSAppointment);
        
        QueryBuildDataSource qbdsTMSCalendarType = qbdsTMSAppointment.addDataSource(tableNum(TMSCalendarType));
        qbdsTMSCalendarType.joinMode(JoinMode::ExistsJoin);
        qbdsTMSCalendarType.addLink(fieldNum(TMSAppointment, CalendarTypeId), fieldNum(TMSCalendarType, CalendarTypeId));

        qbdsTMSCalendarType.addRange(fieldNum(TMSCalendarType, CheckInRequired)).value(int2str(enum2int(NoYes::Yes)));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcApptDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default direction of the appointment.
    /// </summary>
    /// <returns>
    /// The Default Appointment direction.
    /// </returns>
    public TMSApptDirection calcApptDirection()
    {
        TMSApptDirection ret = TMSCalendarType::find(this.CalendarTypeId).ApptDirection;

        switch (this.ApptRefType)
        {
            case TMSApptRefType::Purch:
                ret = TMSApptDirection::Inbound;
                break;
            case TMSApptRefType::Sales:
                ret = TMSApptDirection::Outbound;
                break;
            case TMSApptRefType::Load:
                WHSLoadTable loadTable = WHSLoadTable::find(this.ApptRefNum);
                if (loadTable.LoadDirection == WHSLoadDirection::Inbound)
                {
                    ret = TMSApptDirection::Inbound;
                }
                else if (loadTable.LoadDirection == WHSLoadDirection::Outbound)
                {
                    ret = TMSApptDirection::Outbound;
                }

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanApptRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the appointment reference information.
    /// </summary>
    /// <param name="_updateUserSettings">
    ///  true if the settings set by the user should be cleared, otherwise false
    /// </param>
    public void cleanApptRef(boolean _updateUserSettings)
    {
        this.OrderNum         = '';
        this.AccountNum       = '';

        if (_updateUserSettings)
        {
            this.InventSiteId           = '';
            this.InventLocationId       = '';
            this.CarrierCode            = '';
            this.BrokerCode             = '';
            this.TrailerNumber          = '';
            this.TractorNumber          = '';
            this.WHSShippingContainerId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the active status of the appointment.
    /// </summary>
    /// <returns>
    /// True if the appointment is active; otherwise false.
    /// </returns>
    public boolean isActive()
    {
        return this.ApptStatus != TMSApptStatus::Completed
            && this.ApptStatus != TMSApptStatus::Cancelled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the open status of the appointment.
    /// </summary>
    /// <returns>
    /// True if the appointment is open; otherwise, false.
    /// </returns>
    public boolean isOpen()
    {
        return this.ApptStatus != TMSApptStatus::Cancelled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromLoadTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the appointment with the data from a <c>WHSLoadTable</c>.
    /// </summary>
    /// <param name="_loadTable">
    /// The <c>WHSLoadTable</c> to update the data from.
    /// </param>
    /// <param name="_updateFromToDates">
    /// If true, the to and from dates are updated as well, otherwise false.
    /// </param>
    public void updateFromLoadTable(WHSLoadTable _loadTable, boolean _updateFromToDates)
    {
        this.ApptRefType         = TMSApptRefType::Load;
        this.ApptRefNum          = _loadTable.LoadId;
        this.CarrierCode         = _loadTable.CarrierCode;
        this.BrokerCode          = _loadTable.BrokerCode;
        this.TrailerNumber       = _loadTable.TrailerNumber;
        this.TractorNumber       = _loadTable.TractorNumber;
        this.OrderNum            = _loadTable.OrderNum;
        this.AccountNum          = _loadTable.AccountNum;
        this.InventSiteId        = _loadTable.InventSiteId;
        this.InventLocationId    = _loadTable.InventLocationId;
        this.ApptDirection       = this.calcApptDirection();
        this.WHSShippingContainerId = _loadTable.ShippingContainerId;

        if (_updateFromToDates)
        {
            if (_loadTable.LoadDirection == WHSLoadDirection::Outbound && _loadTable.LoadSchedShipUTCDateTime >= DateTimeUtil::utcNow())
            {
                this.ApptFromUTCDateTime = _loadTable.LoadSchedShipUTCDateTime;
            }

            if (_loadTable.LoadDirection == WHSLoadDirection::Inbound && _loadTable.eta >= DateTimeUtil::utcNow())
            {
                this.ApptFromUTCDateTime = _loadTable.eta;
            }

            this.ApptToUTCDateTime = TMSAppointment::adjustToDateTime(this.ApptFromUTCDateTime,
                TMSCalendarType::find(this.CalendarTypeId).DefaultDuration,
                TMSEquipment::find(WHSLoadTemplate::find(_loadTable.LoadTemplateId).EquipmentCode).Duration);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayByLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>TMSAppointment</c> table to display for a given load ID.
    /// </summary>
    /// <param name="_loadID">
    /// The load ID of the <c>WHSLoadTable</c> record.
    /// </param>
    /// <returns>
    /// A record in the <c>TMSAppointment</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// A load could have only one or zero not cancelled appointments; this is ensured in validatewrite method of <c>TMSAppointment</c> table.
    /// </remarks>
    public static TMSAppointment displayByLoadId(TMSApptRefNum _loadID)
    {
        TMSAppointment tmsAppointment;

        if (_loadID)
        {
            Query query = tmsAppointment.buildOpenAppointmentForLoadQuery(_loadID);
            QueryRun queryRun = new QueryRun(query);
            queryRun.next();

            tmsAppointment = queryRun.get(tableNum(TMSAppointment));
        }

        return tmsAppointment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOpenAppointmentForLoadQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used to find the open appointment for the specified load.
    /// </summary>
    /// <param name = "_loadID">The load ID of the <c>WHSLoadTable</c> record.</param>
    /// <returns>The query used to find the open appointment for the specified load.</returns>
    protected Query buildOpenAppointmentForLoadQuery(TMSApptRefNum _loadID)
    {
        Query query = this.buildAppointmentForLoadQuery(_loadID);

        QueryBuildDataSource qbdsTMSAppointment = query.dataSourceTable(tableNum(TMSAppointment));

        this.addOpenAppointmentRange(qbdsTMSAppointment);
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAppointmentForLoadQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used to find an appointment for the specified load.
    /// </summary>
    /// <param name = "_loadID">The load ID of the <c>WHSLoadTable</c> record.</param>
    /// <returns>The query used to find an appointment for the specified load.</returns>
    protected Query buildAppointmentForLoadQuery(TMSApptRefNum _loadID)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsTMSAppointment = query.addDataSource(tableNum(TMSAppointment));
        
        qbdsTMSAppointment.firstOnly(true);

        this.addAppointmentLoadRange(qbdsTMSAppointment, _loadID);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAppointmentLoadRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range to the appointment <c>QueryBuildDataSource</c> to get only the appointments related to the specified load.
    /// </summary>
    /// <param name = "_qbdsTMSAppointment">The appointment <c>QueryBuildDataSource</c></param>
    /// <param name = "_loadID">The load ID of the <c>WHSLoadTable</c> record.</param>
    protected void addAppointmentLoadRange(QueryBuildDataSource _qbdsTMSAppointment, TMSApptRefNum _loadID)
    {
        _qbdsTMSAppointment.addRange(fieldNum(TMSAppointment, ApptRefType)).value(int2str(enum2int(TMSApptRefType::Load)));
        
        _qbdsTMSAppointment.addRange(fieldNum(TMSAppointment, ApptRefNum)).value(queryValue(_loadID));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOpenAppointmentRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a range to the appointment <c>QueryBuildDataSource</c> to get only the open appointments.
    /// </summary>
    /// <param name = "_qbdsTMSAppointment">The appointment <c>QueryBuildDataSource</c></param>
    [Replaceable]
    protected void addOpenAppointmentRange(QueryBuildDataSource _qbdsTMSAppointment)
    {
        _qbdsTMSAppointment.addRange(fieldNum(TMSAppointment, ApptStatus)).value(SysQuery::valueNot(int2str(enum2int(TMSApptStatus::Cancelled))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveByLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the active record in the <c>TMSAppointment</c> table for a given load ID.
    /// </summary>
    /// <param name="_loadID">
    /// The load ID of the <c>WHSLoadTable</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TMSAppointment</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// A load could have only one or zero active appointments; this is ensured in validatewrite method of <c>TMSAppointment</c> table.
    /// </remarks>
    public static TMSAppointment findActiveByLoadId(TMSApptRefNum _loadID,
                                                    boolean       _forupdate = false)
    {
        TMSAppointment    tmsAppointment;

        if (_loadID)
        {
            Query query = tmsAppointment.buildActiveAppointmentForLoadQuery(_loadID, _forupdate);
            QueryRun queryRun = new QueryRun(query);
            queryRun.next();

            tmsAppointment = queryRun.get(tableNum(TMSAppointment));
        }

        return tmsAppointment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildActiveAppointmentForLoadQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used to find the active appointment for the specified load.
    /// </summary>
    /// <param name = "_loadID">The load ID of the <c>WHSLoadTable</c> record.</param>
    /// <param name="_forupdate">A Boolean value that indicates whether to read the record for update.</param>
    /// <returns>The query used to find the active appointment for the specified load.</returns>
    protected Query buildActiveAppointmentForLoadQuery(TMSApptRefNum _loadID, boolean _forupdate)
    {
        Query query = this.buildAppointmentForLoadQuery(_loadID);

        QueryBuildDataSource qbdsTMSAppointment = query.dataSourceTable(tableNum(TMSAppointment));
        
        qbdsTMSAppointment.update(_forupdate);
        
        this.addActiveAppointmentRange(qbdsTMSAppointment);
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTMSApptFromUTCDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and gets the value of the <c>ApptFromUTCDateTime</c> field of the current record and
    /// applies conversions which are needed to have the time displayed and stored according to the site time zone.
    /// </summary>
    /// <param name = "_set">True if it is a setter; otherwise false</param>
    /// <param name = "_dateTime">The passed date time</param>
    /// <returns>The converted date time</returns>
    public edit TMSApptFromUTCDateTime editTMSApptFromUTCDateTime(boolean _set, TMSApptFromUTCDateTime _dateTime)
    {
        TMSDateTimeConverter converter = TMSDateTimeConverterFactory::newConverterFromBuffer(this);

        return converter.editDateTime(this, fieldNum(TMSAppointment, ApptFromUTCDateTime), _set, _dateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTMSApptFromUTCDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>ApptFromUTCDateTime</c> field of the current record and
    /// applies conversions which are needed to have the time displayed according to the site time zone.
    /// </summary>
    /// <returns>The converted date time</returns>
    public display TMSApptFromUTCDateTime displayTMSApptFromUTCDateTime()
    {
        TMSDateTimeConverter converter = TMSDateTimeConverterFactory::newConverterFromBuffer(this);

        return converter.displayDateTime(this, fieldNum(TMSAppointment, ApptFromUTCDateTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTMSApptToUTCDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and gets the value of the <c>ApptToUTCDateTime</c> field of the current record and
    /// applies conversions which are needed to have the time displayed and stored according to the site time zone.
    /// </summary>
    /// <param name = "_set">True if it is a setter; otherwise false</param>
    /// <param name = "_dateTime">The passed date time</param>
    /// <returns>The converted date time</returns>
    public edit TMSApptToUTCDateTime editTMSApptToUTCDateTime(boolean _set, TMSApptToUTCDateTime _dateTime)
    {
        TMSDateTimeConverter converter = TMSDateTimeConverterFactory::newConverterFromBuffer(this);

        return converter.editDateTime(this, fieldNum(TMSAppointment, ApptToUTCDateTime), _set, _dateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTMSApptToUTCDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>ApptToUTCDateTime</c> field of the current record and
    /// applies conversions which are needed to have the time displayed according to the site time zone.
    /// </summary>
    /// <returns>The converted date time</returns>
    public display TMSApptToUTCDateTime displayTMSApptToUTCDateTime()
    {
        TMSDateTimeConverter converter = TMSDateTimeConverterFactory::newConverterFromBuffer(this);

        return converter.displayDateTime(this, fieldNum(TMSAppointment, ApptToUTCDateTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@TRX1872</DeveloperDocumentation>
	<FormRef>TMSAppointment</FormRef>
	<Label>@SYS80090</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ApptId</TitleField1>
	<TitleField2>CalendarTypeId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ApptIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Transportation</Modules>
	<PrimaryIndex>ApptIdx</PrimaryIndex>
	<ReplacementKey>ApptIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApptId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptCustomerPickup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptDirection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptRefNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptNote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TractorNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TrailerNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptFromUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptToUTCDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApptId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApptId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptCustomerPickup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptDirection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptRefNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptNote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TractorNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TrailerNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BrokerCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptFromUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptToUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WHSShippingContainerId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSCarrierCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAccountNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApptCustomerPickup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSApptCustomerPickup</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApptDirection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TMSApptDirection</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ApptFromUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSApptFromUTCDateTime</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ApptId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSApptId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ApptNote</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSApptNote</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ApptRefNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSApptRefNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApptRefType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TMSApptRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApptStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TMSApptStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ApptToUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSApptToUTCDateTime</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BrokerCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSBrokerCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalendarTypeId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSCalendarTypeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOrderNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TractorNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSTractorNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TrailerNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSTrailerNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WHSShippingContainerId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShippingContainerId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ApptIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ApptId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ApptRefNumRefType</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ApptRefNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ApptRefType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventStorageDimMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<SourceEDT>InventSiteId</SourceEDT>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ApptRefType</Name>
					<Field>ApptRefType</Field>
					<ValueStr>TMSApptRefType::Purch</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ApptRefNum</Name>
					<Field>ApptRefNum</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ApptRefType</Name>
					<Field>ApptRefType</Field>
					<ValueStr>TMSApptRefType::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ApptRefNum</Name>
					<Field>ApptRefNum</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSBroker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TMSCarrier</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Broker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BrokerCode</Name>
					<SourceEDT>TMSBrokerCode</SourceEDT>
					<Field>BrokerCode</Field>
					<RelatedField>CarrierCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSCalendarType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TMSCalendarType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalendarTypeId</Name>
					<SourceEDT>TMSCalendarTypeId</SourceEDT>
					<Field>CalendarTypeId</Field>
					<RelatedField>CalendarTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSCarrier</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TMSCarrier</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierCode</Name>
					<SourceEDT>TMSCarrierCode</SourceEDT>
					<Field>CarrierCode</Field>
					<RelatedField>CarrierCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSLoadTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ApptRefNum</Name>
					<SourceEDT>WHSLoadId</SourceEDT>
					<Field>ApptRefNum</Field>
					<RelatedField>LoadId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ApptRefType</Name>
					<Field>ApptRefType</Field>
					<ValueStr>TMSApptRefType::Load</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSShipment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSShipmentTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ApptRefNum</Name>
					<SourceEDT>WHSLoadId</SourceEDT>
					<Field>ApptRefNum</Field>
					<RelatedField>LoadId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ApptRefType</Name>
					<Field>ApptRefType</Field>
					<ValueStr>TMSApptRefType::Load</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationId</Name>
					<Field>WMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>