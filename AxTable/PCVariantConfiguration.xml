<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCVariantConfiguration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCVariantConfiguration extends PCProductConfiguration
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PCVariantConfiguration</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCVariantConfiguration::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCVariantConfiguration</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCVariantConfiguration</c> table; otherwise, an empty record.
    /// </returns>
    public static PCVariantConfiguration find(RefRecId _recId, boolean _forupdate = false)
    {
        PCVariantConfiguration record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProductMasterAndDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCVariantConfiguration</c> table.
    /// </summary>
    /// <param name="_productMaster">
    ///    The generic product model associated with the record.
    /// </param>
    /// <param name="_configurationName">
    ///    The configuration name associated with the distinct product variant.
    /// </param>
    /// <param name="_sizeName">
    ///    The size name associated with the distinct product variant.
    /// </param>
    /// <param name="_colorName">
    ///    The color name associated with the distinct product variant.
    /// </param>
    /// <param name="_styleName">
    ///    The style name associated with the distinct product variant.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCVariantConfiguration</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// The style dimension has been added as an argument to this method.
    /// </remarks>
    [SysObsolete('Method is obsoleted to support version dimension. Callers should redirect their calls to the findByProductMasterAndProductDimensions method. Please file an extensibility request if other access is required.',
                 false, 20\4\2020)]
    public static PCVariantConfiguration findByProductMasterAndDimensions(EcoResProductMaster         _productMaster,
                                                                          EcoResConfigurationName     _configurationName,
                                                                          EcoResSizeName              _sizeName,
                                                                          EcoResColorName             _colorName,
                                                                          EcoResStyleName             _styleName,
                                                                          boolean                     _forupdate = false)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(EcoResProductVersion)))
        {
            throw error(strFmt("@SCM:EcoResProductVersionCheckIsEnabled", funcName()));
        }
        
        return PCVariantConfiguration::findByProductMasterAndDimensionsInternal(
            _productMaster,
            _configurationName,
            _sizeName,
            _colorName,
            _styleName,
            /*version*/ '',
            _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProductMasterAndProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCVariantConfiguration</c> table.
    /// </summary>
    /// <param name="_productMaster">
    ///    The generic product model associated with the record.
    /// </param>
    /// <param name="_configurationName">
    ///    The configuration name associated with the distinct product variant.
    /// </param>
    /// <param name="_sizeName">
    ///    The size name associated with the distinct product variant.
    /// </param>
    /// <param name="_colorName">
    ///    The color name associated with the distinct product variant.
    /// </param>
    /// <param name="_styleName">
    ///    The style name associated with the distinct product variant.
    /// </param>
    /// <param name="_versionName">
    ///    The version name associated with the distinct product variant.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCVariantConfiguration</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// The style dimension has been added as an argument to this method.
    /// </remarks>
    [Hookable(false)]
    public static PCVariantConfiguration findByProductMasterAndProductDimensions(EcoResProductMaster        _productMaster,
                                                                                 EcoResConfigurationName    _configurationName,
                                                                                 EcoResSizeName             _sizeName,
                                                                                 EcoResColorName            _colorName,
                                                                                 EcoResStyleName            _styleName,
                                                                                 EcoResVersionName          _versionName,
                                                                                 boolean                    _forupdate = false)
    {
        boolean isProductVersionFeatureEnabled = isConfigurationkeyEnabled(configurationKeyNum(EcoResProductVersion));

        if (isProductVersionFeatureEnabled)
        {
            return PCVariantConfiguration::findByProductMasterAndDimensionsInternal(
                _productMaster,
                _configurationName,
                _sizeName,
                _colorName,
                _styleName,
                _versionName,
                _forupdate);
        }
        else
        {
            return PCVariantConfiguration::findByProductMasterAndDimensions(
                _productMaster,
                _configurationName,
                _sizeName,
                _colorName,
                _styleName,
                _forupdate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProductMasterAndDimensionsInternal</Name>
				<Source><![CDATA[
    private static PCVariantConfiguration findByProductMasterAndDimensionsInternal(EcoResProductMaster         _productMaster,
                                                                                     EcoResConfigurationName     _configurationName,
                                                                                     EcoResSizeName              _sizeName,
                                                                                     EcoResColorName             _colorName,
                                                                                     EcoResStyleName             _styleName,
                                                                                     EcoResVersionName           _versionName,
                                                                                     boolean                     _forupdate = false)
    {
        #InventDimDevelop

        PCVariantConfiguration          variantConfiguration;
        EcoResDistinctProductVariant    distinctProductVariant;
        container                       dimensions;

        if (!_configurationName)
        {
            return variantConfiguration;
        }

        InventDim inventDim;
        inventDim.configId = _configurationName;
        inventDim.InventSizeId = _sizeName;
        inventDim.InventColorId = _colorName;
        inventDim.InventStyleId = _styleName;
        inventDim.InventVersionId = _versionName;

        dimensions              = EcoResProductVariantDimValue::getDimensionValuesContainerByInventDim(inventDim);
        distinctProductVariant  = EcoResProductVariantManager::findDistinctProductVariant(_productMaster.RecId, dimensions);

        if (!distinctProductVariant)
        {
            return variantConfiguration;
        }
        variantConfiguration.selectForUpdate(_forupdate);
        select  firstonly   variantConfiguration
        where   variantConfiguration.DistinctProductVariant == distinctProductVariant.RecId;

        return variantConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS153068</DeveloperDocumentation>
	<Label>@SYS153067</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>DistinctProductVariant</TitleField1>
	<Extends>PCProductConfiguration</Extends>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DistinctProductVariant</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DistinctProductVariant</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DistinctProductVariant</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS153071</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DistinctProductVariantIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DistinctProductVariant</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DistingProductVariant</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResDistinctProductVariant</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductVariantCreated</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VariantConfiguration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DistinctProductVariant</Name>
					<Field>DistinctProductVariant</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PCProductConfiguration_Variant</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PCProductConfiguration</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductConfiguration</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Role>VariantConfiguration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>