<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdGroupHeading</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdGroupHeading extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            switch (this.TaxType_IN)
            {
                case TaxWithholdCodeType_IN::TDS:
                    ret = TaxWithholdParameters_IN::checkParameter(TaxWithholdType_IN::TDS);
                    break;

                case TaxWithholdCodeType_IN::TCS:
                    ret = TaxWithholdParameters_IN::checkParameter(TaxWithholdType_IN::TCS);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(TaxWithholdGroup _TaxWithholdGroup )
    {
        boolean ret = true;
        ;

        if (!TaxWithholdGroupHeading::exist(_TaxWithholdGroup))
        {
            ret = checkFailed(strfmt(TaxWithholdGroupHeading::txtNotExist(), _TaxWithholdGroup));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxTypeMatchingTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified withholding tax group belongs to a specified withholding tax type.
    /// </summary>
    /// <param name="_withholdTaxGroup">
    /// The withholding tax group to check.
    /// </param>
    /// <param name="_withholdTaxType">
    /// The withholding tax type to check.
    /// </param>
    /// <returns>
    /// true if the specified withholding tax group belongs to the specified withholding tax type;
    /// otherwise, false.
    /// </returns>
    public static boolean checkTaxTypeMatchingTaxGroup(
        TaxWithholdGroup    _withholdTaxGroup,
        TaxWithholdCodeType_IN  _withholdTaxType)
    {
        boolean ret = true;
        if (_withholdTaxGroup)
        {
            if (TaxWithholdGroupHeading::find(_withholdTaxGroup).TaxType_IN != _withholdTaxType)
            {
                ret = checkFailed(strFmt("@GLS5461", _withholdTaxGroup, _withholdTaxType));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(TaxWithholdGroup _TaxWithholdGroup )
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                from
                     TaxWithholdGroupHeading
                 where
                     TaxWithholdGroupHeading.TaxWithholdGroup == _TaxWithholdGroup).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>TaxWithholdGroupHeading</c> table.
    /// </summary>
    /// <param name="_company">
    ///    The company of the withholding tax group to check for existence.
    /// </param>
    /// <param name="_taxWithholdGroupId">
    ///    The ID of the withholding tax group to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByCompany(DataAreaId _company, TaxWithholdGroup _taxWithholdGroupId)
    {
        ;

        changecompany(_company)
        {
            return TaxWithholdGroupHeading::exist(_taxWithholdGroupId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TaxWithholdGroupHeading find(
        TaxWithholdGroup _TaxWithholdGroup ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdGroupHeading TaxWithholdGroupHeading;
        ;

        TaxWithholdGroupHeading.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            TaxWithholdGroupHeading.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            TaxWithholdGroupHeading
            where
            TaxWithholdGroupHeading.TaxWithholdGroup == _TaxWithholdGroup;

        return TaxWithholdGroupHeading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>TaxWithholdGroupHeading</c> table.
    /// </summary>
    /// <param name="_company">
    ///    The company of the withholding tax group.
    /// </param>
    /// <param name="_taxWithholdGroupId">
    ///    The ID of the withholding tax group.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>TaxWithholdGroupHeading</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxWithholdGroupHeading findByCompany(
        DataAreaId _company,
        TaxWithholdGroup _taxWithholdGroupId,
        boolean _forUpdate = false)
    {
        TaxWithholdGroupHeading taxWithholdGroup;
        ;

        changecompany(_company)
        {
            taxWithholdGroup = TaxWithholdGroupHeading::find(_taxWithholdGroupId, _forUpdate);
        }

        return taxWithholdGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    public static void jumpRef(TaxWithholdGroup         _taxWithholdGroup,
                               TaxWithholdCodeType_IN   _taxType,
                               Common                   _record)
    {
        Args        args = new Args();

        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            args.record(_record);
            args.parm(_taxWithholdGroup);
            args.parmEnum(_taxType);
            args.parmEnumType(enumnum(TaxWithholdCodeType_IN));
            new MenuFunction(menuitemdisplaystr(TaxWithholdGroup), MenuItemType::Display).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTaxComponentGroup_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens lookup form for withholding tax group based on Tax type.
    /// </summary>
    /// <param name="_ctrl">
    ///  The calling form control.
    /// </param>
    /// <param name="_taxType">
    /// To filter the withholding tax group based on specified tax type.
    /// </param>
    /// <param name="_companyId">
    /// To filter the withholding tax group based on specified company Id.
    /// </param>
    public static void lookupTaxComponentGroup_IN(FormStringControl         _ctrl,
                                                         TaxWithholdCodeType_IN    _taxType,
                                                         CompanyId                 _companyId = curext())
    {
        SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tablenum(TaxWithholdGroupHeading), _ctrl);
        Query                query          = new Query();
        QueryBuildDataSource queryBuildDataSource;

        if (TaxWithholdParameters_IN::find().CrossCompanyPayment)
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(_companyId);
        }

        sysTableLookup.addLookupfield(fieldnum(TaxWithholdGroupHeading, TaxWithholdGroup));
        sysTableLookup.addLookupfield(fieldnum(TaxWithholdGroupHeading, TaxWithholdGroupName));
        queryBuildDataSource = query.addDataSource(tablenum(TaxWithholdGroupHeading));
        queryBuildDataSource.addRange(fieldnum(TaxWithholdGroupHeading, TaxType_IN)).value(queryValue(_taxType));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTaxGroupWithPurchLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens lookup form for withholding tax group based on Tax type and purchase line as context.
    /// </summary>
    /// <param name="_ctrl">The calling form control.</param>
    /// <param name="_taxType">To filter the tax group based on specified tax type.</param>
    /// <param name="_purchLine">To filter the tax group based on the context of purchase line.</param>
    public static void lookupTaxGroupWithPurchLine_IN(
        FormStringControl _ctrl,
        TaxWithholdCodeType_IN _taxType,
        PurchLine _purchLine)
    {
        if (_purchLine.isCreditNoteLineWithRefId()
            && TaxWithholdParameters_IN::isTaxWithholdingCreditNoteTaxGroupDefaultBlank())
        {
            PurchLine_IN originPurchLine_IN = PurchLine::findInventTransId(_purchLine.InventRefTransId).purchLine_IN();
            TaxWithholdGroupHeading::lookupTaxGroupWithLimitedSet_IN(
                _ctrl,
                _taxType,
                (_taxType == TaxWithholdCodeType_IN::TCS) ?
                    originPurchLine_IN.TCSGroup : originPurchLine_IN.TDSGroup);
        }
        else
        {
            TaxWithholdGroupHeading::lookupTaxComponentGroup_IN(_ctrl, _taxType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTaxGroupWithSalesLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens lookup form for withholding tax group based on Tax type and sales line as context.
    /// </summary>
    /// <param name="_ctrl">The calling form control.</param>
    /// <param name="_taxType">To filter the tax group based on specified tax type.</param>
    /// <param name="_salesLine">To filter the tax group based on the context of sales line.</param>
    public static void lookupTaxGroupWithSalesLine_IN(
        FormStringControl _ctrl,
        TaxWithholdCodeType_IN _taxType,
        SalesLine _salesLine)
    {
        if (_salesLine.isCreditNoteLine()
            && TaxWithholdParameters_IN::isTaxWithholdingCreditNoteTaxGroupDefaultBlank())
        {
            SalesLine_IN originSalesLine_IN = SalesLine::findInventTransId(_salesLine.InventTransIdReturn).salesLine_IN();
            TaxWithholdGroupHeading::lookupTaxGroupWithLimitedSet_IN(
                _ctrl,
                _taxType,
                (_taxType == TaxWithholdCodeType_IN::TCS) ?
                    originSalesLine_IN.TCSGroup : originSalesLine_IN.TDSGroup);
        }
        else
        {
            TaxWithholdGroupHeading::lookupTaxComponentGroup_IN(_ctrl, _taxType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTaxGroupWithLimitedSet_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens lookup form for WHT tax group based on Tax type and the given allowed list to limit the options.
    /// </summary>
    /// <param name="_ctrl">The calling form control.</param>
    /// <param name="_taxType">To filter the tax group based on specified tax type.</param>
    /// <param name="_allowedValue">To filter the tax group based on allowed value.</param>
    public static void lookupTaxGroupWithLimitedSet_IN(
        FormStringControl _ctrl,
        TaxWithholdCodeType_IN _taxType,
        TaxWithholdGroup _allowedValue)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(TaxWithholdGroupHeading), _ctrl);
        sysTableLookup.addLookupfield(fieldnum(TaxWithholdGroupHeading, TaxWithholdGroup));
        sysTableLookup.addLookupfield(fieldnum(TaxWithholdGroupHeading, TaxWithholdGroupName));

        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tablenum(TaxWithholdGroupHeading));
        queryBuildDataSource.addRange(fieldnum(TaxWithholdGroupHeading, TaxType_IN)).value(queryValue(_taxType));
        queryBuildDataSource.addRange(fieldNum(TaxWithholdGroupHeading, TaxWithholdGroup)).value(_allowedValue);
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTaxWithholdGroup</Name>
				<Source><![CDATA[
    public static void lookupTaxWithholdGroup(
        FormStringControl _stringControl,
        str _filterStr,
        CompanyId _company)
    {
        Args e;
        CompanyId company;
        FormRun formRun;
        ;

        company = _company;

        if (company == '')
        {
            company = curExt();
        }

        changeCompany(company)
        {
            e = new Args();
            e.name(formstr(TaxWithholdGroupHeadingLookup));
            e.lookupField(fieldNum(TaxWithholdGroupHeading, TaxWithholdGroup));
            e.lookupValue(_filterStr);
            e.caller(_stringControl);

            formRun = classfactory.formRunClass(e);
            formRun.init();

            _stringControl.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102258";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicWithholdingTax</ConfigurationKey>
	<DeveloperDocumentation>@SYS126141</DeveloperDocumentation>
	<FormRef>TaxWithholdGroup</FormRef>
	<Label>@SYS81697</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxWithholdGroup</TitleField1>
	<TitleField2>TaxWithholdGroupName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>TaxWithholdGroupIdx</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>Tax</Modules>
	<PrimaryIndex>TaxWithholdGroupIdx</PrimaryIndex>
	<ReplacementKey>TaxWithholdGroupIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TaxWithholdExcludeIndirectTax_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxWithholdExcludeIndirectTax_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxWithholdDesignerTable_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxWithholdDesignerTable_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxWithholdGroupData</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxWithholdGroupData</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroupName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroupName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Charges_IN</Name>
			<Label>@GLS109489</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExcludeCharges_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroupName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxType_IN</Name>
			<Label>@SYS33553</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxApplicability_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transporter_IN</Name>
			<Label>@SYS4082443</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsTransporter_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxLiability_IN</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxLiabilityOnPayment_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExcludeCharges_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<HelpText>@TaxWithholdParameters:GroupHeadingExcludeChargesINHelpText</HelpText>
			<Label>@SYS4002994</Label>
			<SysSharingType>Optional</SysSharingType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsTransporter_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:GroupHeadingIsTransporterINHelpText</HelpText>
			<Label>@SYS4082443</Label>
			<SysSharingType>Optional</SysSharingType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxApplicability_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxWithholdParameters:GroupHeadingTaxApplicabilityINHelpText</HelpText>
			<SysSharingType>Optional</SysSharingType>
			<EnumType>TaxWithholdTaxApplicability_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxWithholdParameters:GroupHeadingTaxTypeINHelpText</HelpText>
			<SysSharingType>Optional</SysSharingType>
			<EnumType>TaxWithholdCodeType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:GroupHeadingTaxWithholdGroupHelpText</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdGroupName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:GroupHeadingTaxWithholdGroupNameHelpText</HelpText>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxLiabilityOnPayment_IN</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:GroupHeadingTaxLiabilityOnPaymentINHelpText</HelpText>
			<Label>@TaxWithholdLiabilityOnPayment:TaxLiabilityOnPayment</Label>
			<SysSharingType>Optional</SysSharingType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxWithholdGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>