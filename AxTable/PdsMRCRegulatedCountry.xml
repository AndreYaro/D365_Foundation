<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsMRCRegulatedCountry</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsMRCRegulatedCountry extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        // Flush any cached information
        classFactory.globalObjectCache().clear(tableStr(PdsMRCRegulatedCountry));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountryName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(false)]
    public display LogisticsAddressCountryRegionShortName getCountryName()
    {
        return LogisticsAddressCountryRegionTranslation::find(
                        this.CountryId,
                        CompanyInfo::find().LanguageId).ShortName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(false)]
    public display EcoResProductName getItemName()
    {
        return InventTable::find(this.ItemId).defaultProductName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListDescription</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(false)]
    public display PdsMRCDescription getListDescription()
    {
        return PdsMRCReportingList::find(this.ListId, this.CountryId, this.StateId, this.Reported).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStateName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(false)]
    public display LogisticsAddressStatename getStateName()
    {
        return LogisticsAddressState::find(this.CountryId, this.StateId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        PdsMRCReportingList     pdsMRCReportingList;
        PdsMRCRegulatedCountry  pdsMRCRegulatedCountry;
        ItemId                  thisItemId;

        ttsbegin;

        super();

        // Flush any cached information
        classFactory.globalObjectCache().clear(tableStr(PdsMRCRegulatedCountry));

        // reported by country/region+state implies regulated in the same country/region+state
        if (this.Reported)
        {
            select firstonly pdsMRCReportingList
                where   pdsMRCReportingList.CountryId   == this.CountryId
                    &&  pdsMRCReportingList.StateId     == this.StateId
                    &&  pdsMRCReportingList.Reported    == NoYes::No;

            if (pdsMRCReportingList && !PdsMRCRegulatedCountry::existItemId(this.ItemId, this.CountryId, this.StateId, NoYes::No))
            {
                pdsMRCRegulatedCountry.CountryId    = this.CountryId;
                pdsMRCRegulatedCountry.StateId      = this.StateId;
                pdsMRCRegulatedCountry.ItemId       = this.ItemId;
                pdsMRCRegulatedCountry.Reported     = NoYes::No;
                pdsMRCRegulatedCountry.insert();
            }
        }

        // regulated in a country/region implies regulated in all its states/regions
        if (!this.Reported && !this.StateId)
        {
            thisItemId = this.ItemId;

            insert_recordset pdsMRCRegulatedCountry (CountryId, StateId, ItemId)
                select CountryId, StateId, thisItemId from pdsMRCReportingList
                where pdsMRCReportingList.CountryId == this.CountryId
                    && pdsMRCReportingList.StateId  != ''
                    && pdsMRCReportingList.Reported == NoYes::No;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldNum(PdsMRCRegulatedCountry, StateId),
                [fieldNum(PdsMRCRegulatedCountry, CountryId)]],
            [fieldNum(PdsMRCRegulatedCountry, ListId),
                [fieldNum(PdsMRCRegulatedCountry, Reported)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PdsMRCRegulatedCountry, StateId):
                this.defaultStateId();
                break;

            case fieldNum(PdsMRCRegulatedCountry, ListId):
                this.defaultListId();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultStateId</Name>
				<Source><![CDATA[
    private void defaultStateId()
    {
        if (this.StateId && !LogisticsAddressState::exist(this.CountryId, this.StateId))
        {
            this.StateId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultListId</Name>
				<Source><![CDATA[
    private void defaultListId()
    {
        if (!this.Reported)
        {
            this.ListId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        // Flush any cached information
        classFactory.globalObjectCache().clear(tableStr(PdsMRCRegulatedCountry));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        PdsMRCRegulatedCountry pdsMRCRegulatedCountry;

        boolean ret;

        ret = super();

        // reported implies regulated
        if (ret
            && !this.Reported
            && PdsMRCRegulatedCountry::isReporting(this.ItemId, this.CountryId, this.StateId))
        {
            ret = checkFailed("@PDS2001");
        }

        if (ret && !this.Reported && this.StateId)
        {
            // regulated by country/region implies reported in all the country/region's states/regions
            select firstonly RecId from pdsMRCRegulatedCountry
                where   pdsMRCRegulatedCountry.ItemId       == this.ItemId
                    &&  pdsMRCRegulatedCountry.CountryId    == this.CountryId
                    &&  pdsMRCRegulatedCountry.StateId      == ''
                    &&  pdsMRCRegulatedCountry.Reported     == NoYes::No;
            if (pdsMRCRegulatedCountry.RecId)
            {
                ret = checkFailed("@PDS2002");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch ( _fieldName  )
        {
            case fieldStr(PdsMRCRestrictedListByItem, ItemId):
                if ( this.Reported && InventTable::find(this.ItemId).ItemType == ItemType::Service )
                {
                    ret = checkFailed("@PDS1383");
                }
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && !this.CountryId)
        {
            ret = checkFailed("@PDS903");
        }

        if (ret && !PdsMRCReportingList::exist(this.ListId, this.CountryId, this.StateId, this.Reported))
        {
            ret = checkFailed("@PDS881");
        }

        if (ret && this.Reported && !this.ListId)
        {
            ret = checkFailed("@SCM:PdsMRCReportingListReportedNoListIdError");
        }

        if (ret && !this.Reported && this.ListId)
        {
            ret = checkFailed("@SCM:PdsMRCReportingListIdSetReportedNotSet");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if a record for the item and country/region exists in table <c>PdsMRCRegulatedCountry</c>.
    /// </summary>
    /// <param name="_itemId">
    ///     The ID of the item to check for existence.
    /// </param>
    /// <param name="_countryId">
    ///     The ID of the country/region to check.
    /// </param>
    /// <param name="_stateId">
    ///     The ID of the state to check.
    /// </param>
    /// <returns>
    ///     true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(
        ItemId                  _itemId,
        AddressCountryRegionId  _countryId,
        LogisticsAddressStateId _stateId)
    {
        boolean ret = true;

        if (!PdsMRCRegulatedCountry::existItemId(_itemId, _countryId, _stateId))
        {
            ret = checkFailed(strFmt(PdsMRCRegulatedCountry::txtNotExist(),
                                     _itemId,
                                     _countryId,
                                     _stateId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _recId)
    {
        return _recId
            && (select pdsMRCRegulatedCountry
                where  pdsMRCRegulatedCountry.RecId == _recId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether a record for an item and country/region and state exists in table <c>PdsMRCRegulatedCountry</c>.
    /// </summary>
    /// <param name="_itemId">
    ///     The ID of the item to check for existence.
    /// </param>
    /// <param name="_countryId">
    ///     The ID of the country/region to check.
    /// </param>
    /// <param name="_stateId">
    ///     The ID of the state to check.
    /// </param>
    /// <param name="_reported">
    ///     Yes if checking for reported regulated; No if checking for simply regulated.
    /// </param>
    /// <returns>
    ///     True if the record exists; otherwise, false.
    /// </returns>
    public static boolean existItemId(
        ItemId _itemId,
        AddressCountryRegionId _countryId,
        LogisticsAddressStateId _stateId,
        NoYes _reported = NoYes::No)
    {
        return _itemId
            && (select RecId from pdsMRCRegulatedCountry
                where  pdsMRCRegulatedCountry.ItemId    == _itemId
                    && pdsMRCRegulatedCountry.CountryId == _countryId
                    && pdsMRCRegulatedCountry.StateId   == _stateId
                    && pdsMRCRegulatedCountry.Reported  == _reported
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PdsMRCRegulatedCountry find(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        PdsMRCRegulatedCountry  regulatedCountry;

        if (_recId)
        {
            regulatedCountry.selectForUpdate(_forUpdate);
            select firstonly regulatedCountry
                where regulatedCountry.RecId == _recId;
        }

        return regulatedCountry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRegulated</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether an item is regulated for a given country/region and state.
    /// </summary>
    /// <param name="_itemId">
    ///     The ID of the item to check.
    /// </param>
    /// <param name="_countryId">
    ///     The ID of the country/region to check; optional.
    /// </param>
    /// <param name="_stateId">
    ///     The ID of the state to check; optional.
    /// </param>
    /// <returns>
    ///     true if the item is regulated for the given country/region and state,
    ///     or for any country/region and state if these parameters are omitted; otherwise, false.
    /// </returns>
    public static NoYesId isRegulated(
        ItemId _itemId,
        AddressCountryRegionId _countryId = '',
        LogisticsAddressStateId _stateId = '')
    {
        return PdsMRCRegulatedCountry::isReportedOrRegulated(_itemId, _countryId, _stateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReportedOrRegulated</Name>
				<Source><![CDATA[
    private static NoYesId isReportedOrRegulated(
        ItemId _itemId,
        AddressCountryRegionId _countryId = '',
        LogisticsAddressStateId _stateId = '',
        boolean _exclusivelyReported = false)
    {
        PdsMRCRegulatedCountry regulatedCountry;
        SysGlobalObjectCache   sgoc;
        container              result;
        container              cacheKey;
        boolean                isReportedOrRegulated;

        if (_itemId)
        {
            // The query below will not hit kernel record cache due to the or conditions, but
            // for one set of inputs the same output will always be returned as long as data
            // in the table does not change. To cut down on RPC and SQL query load, the
            // memoization pattern is used here to avoid queries.
            sgoc = classFactory.globalObjectCache();
            cacheKey = [curext(), [_itemId, _countryId, _stateId, _exclusivelyReported]];
            result = sgoc.find(tableStr(PdsMRCRegulatedCountry), cacheKey);

            if (result == conNull())
            {
                select firstonly RecId
                    from    regulatedCountry
                    where   regulatedCountry.ItemId == _itemId
                        &&  (!_exclusivelyReported || regulatedCountry.Reported == NoYes::Yes)
                        &&  (!_countryId || regulatedCountry.CountryId  == _countryId)
                        &&  (!_stateId   || regulatedCountry.StateId    == _stateId || regulatedCountry.StateId == '');

                isReportedOrRegulated = regulatedCountry.RecId != 0;

                sgoc.insert(tableStr(PdsMRCRegulatedCountry), cacheKey, [isReportedOrRegulated]);
            }
            else
            {
                [isReportedOrRegulated] = result;
            }
        }

        return isReportedOrRegulated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a country/region is reporting.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the itemId to check.
    /// </param>
    /// <param name="_countryId">
    /// The ID of the country/region to check.
    /// </param>
    /// <param name="_stateId">
    /// The ID of the state to check.
    /// </param>
    /// <returns>
    /// Yes if the combination of country/region and Item is reporting.
    /// </returns>
    public static NoYesId isReporting(
        ItemId                  _itemId,
        AddressCountryRegionId  _countryId = '',
        LogisticsAddressStateId _stateId = '')
    {
        return PdsMRCRegulatedCountry::isReportedOrRegulated(_itemId, _countryId, _stateId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the default warning used in the checkExist method if record doesn't exist.
    /// </summary>
    /// <returns>
    ///     The static text used to display that a record doesn't exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@PDS907";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsMRC</ConfigurationKey>
	<DeveloperDocumentation>@PDS1085</DeveloperDocumentation>
	<FormRef>PdsMRCRegulatedListItem</FormRef>
	<Label>@PDS900</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>CountryId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RegulatedCountriesIdx</ClusteredIndex>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryIndex>RegulatedCountriesIdx</PrimaryIndex>
	<ReplacementKey>RegulatedCountriesIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reported</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reported</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reported</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AllFields</Name>
			<Label>@SYS6047</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reported</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressCountryRegionId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ListId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsMRCListId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reported</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsMRCReported</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RegulatedCountriesIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CountryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Reported</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ListId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CountryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Reported</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryId</Name>
					<SourceEDT>AddressCountryRegionId</SourceEDT>
					<Field>CountryId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressState</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryId</Name>
					<Field>CountryId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StateId</Name>
					<Field>StateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsMRCReportingList</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsMRCReportingList</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryId</Name>
					<Field>CountryId</Field>
					<RelatedField>CountryId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StateId</Name>
					<Field>StateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Reported</Name>
					<Field>Reported</Field>
					<RelatedField>Reported</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ListId</Name>
					<Field>ListId</Field>
					<RelatedField>ListId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReportedToRegulated</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsMRCRegulatedCountry</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Regulated</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Reported</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Reported_Extern</Name>
					<RelatedField>Reported</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Reported</Name>
					<Field>Reported</Field>
					<ValueStr>NoYes::Yes</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryId</Name>
					<Field>CountryId</Field>
					<RelatedField>CountryId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StateId</Name>
					<Field>StateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>