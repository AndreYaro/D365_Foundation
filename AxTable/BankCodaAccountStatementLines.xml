<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCodaAccountStatementLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankCodaAccountStatementLines extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>excludeFromCoda</Name>
				<Source><![CDATA[
    public void excludeFromCoda(
        RefRecId    _refRecId,
        SysModule   _sysModule)
    {
        SpecTrans   specTrans;
        CustVendTransOpen   custVendTransOpen;

        switch (_sysModule)
        {
            case SysModule::Cust :
                custVendTransOpen = CustTransOpen::findRefId(_refRecId);
                break;

            case SysModule::Vend :
                custVendTransOpen = VendTransOpen::findRefId(_refRecId);
                break;
        }

        if (custVendTransOpen)
        {
            changecompany(custVendTransOpen.company())
            {
                delete_from specTrans
                    where specTrans.SpecTableId   == tableNum(BankCodaAccountStatementLines)
                        && specTrans.SpecRecId    == this.RecId
                        && specTrans.SpecCompany  == this.company()
                        && specTrans.RefTableId   == custVendTransOpen.TableId
                        && specTrans.RefRecId     == custVendTransOpen.RecId
                        && specTrans.RefCompany   == custVendTransOpen.company();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillInvoiceIdString</Name>
				<Source><![CDATA[
    public boolean fillInvoiceIdString(ModuleCustVend   _moduleCustVend)
    {
        SpecTrans           specTrans;
        SpecTrans           localSpecTrans;
        boolean             modified = false;
        int                 counter = 0;
        CustCashDiscAmount  cashDiscAmount;
        CustVendTransOpen   custVendTransOpen = CustVendTransStatic::newModuleCustVend(_moduleCustVend).custVendTransOpen();
        CustVendAC account;
        container includedInvoiceIds;
        AmountMST includedInvoiceAmountMST = 0.0;

        while select crossCompany specTrans
            where specTrans.SpecTableId == this.TableId
               && specTrans.SpecRecId   == this.RecId
               && specTrans.SpecCompany == this.company()
               && specTrans.RefTableId  == custVendTransOpen.TableId
               && specTrans.RefCompany  == custVendTransOpen.company()
        {
            if (_moduleCustVend == ModuleCustVend::Cust)
            {
                CustTrans custTrans = specTrans.custTrans();

                includedInvoiceIds += custTrans.Invoice;
                includedInvoiceAmountMST += custTrans.remainAmountMST();

                if (!account)
                {
                    account = custTrans.AccountNum;
                }
            }
            else if (_moduleCustVend == ModuleCustVend::Vend)
            {
                VendTrans vendTrans = specTrans.vendTrans();

                includedInvoiceIds += vendTrans.Invoice;
                includedInvoiceAmountMST += vendTrans.remainAmountMST();

                if (!account)
                {
                    account = vendTrans.AccountNum;
                }
            }

            modified = true;
            counter ++;
            localSpecTrans.data(specTrans);
        }

        if (modified)
        {
            this.InvoiceId          = con2Str(includedInvoiceIds, ',');
            this.Log                = '';
            this.Processed          = NoYes::Yes;
            this.HasProcessErrors   = NoYes::No;
            this.CodaSettlementType = includedInvoiceAmountMST >= this.AmountMST
                ? BankCodaSettlementType::Settled
                : BankCodaSettlementType::PartialySettled;

            if (includedInvoiceAmountMST != this.AmountMST)
            {
                warning(strFmt(
                    "@ApplicationSuite_Localization:BankCodaInvoiceAmountMismatch",
                    con2Str(includedInvoiceIds, ', '),
                    this.SequenceNumber,
                    this.DetailNumber));
            }

            if (_moduleCustVend == ModuleCustVend::Cust)
            {
                cashDiscAmount = localSpecTrans.custTrans().possibleCashDisc(this.TransDate);
                this.parmAccount(account, BankCodaLedgerJournalACType::Cust);
            }
            else if (_moduleCustVend == ModuleCustVend::Vend)
            {
                cashDiscAmount = localSpecTrans.vendTrans().possibleCashDisc(this.TransDate);
                this.parmAccount(account, BankCodaLedgerJournalACType::Vend);
            }

            if (counter  == 1 && cashDiscAmount)
            {
                this.CashDiscLinked = NoYes::Yes;
            }

            this.update();
        }

        return modified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeInCoda</Name>
				<Source><![CDATA[
    public void includeInCoda(
        recId     _refId,
        SysModule _sysModule)
    {
        CustVendTransOpen custVendTransOpen;

        switch (_sysModule)
        {
            case SysModule::Cust :
                custVendTransOpen = CustTransOpen::findRefId(_refId);
                break;

            case SysModule::Vend :
                custVendTransOpen = VendTransOpen::findRefId(_refId);
                break;
        }

        if (custVendTransOpen)
        {
            if (this.validateCustVendTransOpen(custVendTransOpen, _sysModule))
            {
                SpecTransManager specTransManager;
                specTransManager = SpecTransManager::newFromSpec(this, false);

                if (specTransManager.findUnmarkedAmountForRef(
                            custVendTransOpen.AmountCur,
                            custVendTransOpen.company(),
                            custVendTransOpen.TableId,
                            custVendTransOpen.RecId) != 0.0)
                {
                    specTransManager.insert(custVendTransOpen.company(), custVendTransOpen.TableId, custVendTransOpen.RecId, this.AmountCur, '');
                }
                else
                {
                    throw Error("@SYS115525");
                }
            }
            else
            {
                throw Error("@ApplicationSuite_Localization:BankCodaFailedToSettle");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustVendTransOpen</Name>
				<Source><![CDATA[
    private boolean validateCustVendTransOpen(CustVendTransOpen _custVendTransOpen, SysModule _sysModule)
    {
        boolean ret = true;

        SpecTrans specTrans = SpecTrans::findBySpec(
            this.company(),
            tableNum(BankCodaAccountStatementLines),
            this.RecId);

        CustVendTransOpen custVendTransSettled;

        if (specTrans)
        {
            switch (_sysModule)
            {
                case SysModule::Cust :
                    custVendTransSettled = specTrans.custTransOpen();
                    break;

                case SysModule::Vend :
                    custVendTransSettled = specTrans.vendTransOpen();
                    break;
            }

            if (custVendTransSettled && _custVendTransOpen.AccountNum != custVendTransSettled.AccountNum)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    public void initFromCustTable(CustTable    _custTable)
    {
        LogisticsPostalAddress address = _custTable.postalAddress();

        this.parmAccount(_custTable.AccountNum, BankCodaLedgerJournalACType::Cust);
        this.OtherPartyAddress          = address.Address;
        this.OtherPartyCity             = LogisticsAddressZipCode::find(address.ZipCode).City;
        this.OtherPartyName             = _custTable.name();

        unchecked (Uncheck::TableSecurityPermission)
        {
            if (! this.OtherPartyBankAccountID)
            {
                this.OtherPartyBankAccountID    = CustBankAccount::find(_custTable.AccountNum,
                                                                _custTable.BankAccount).AccountNum;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    public void initFromVendTable(VendTable    _vendTable)
    {
        LogisticsPostalAddress address = _vendTable.postalAddress();
        this.parmAccount(_vendTable.AccountNum, BankCodaLedgerJournalACType::Vend);
        this.OtherPartyAddress          = address.Address;
        this.OtherPartyCity             = LogisticsAddressZipCode::find(address.ZipCode).City;
        this.OtherPartyName             = _vendTable.name();
        if (! this.OtherPartyBankAccountID)
        {
            this.OtherPartyBankAccountID    = VendBankAccount::find(_vendTable.AccountNum,
                                                                _vendTable.BankAccount).AccountNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIncluded</Name>
				<Source><![CDATA[
    public boolean isIncluded(
        recId     _recId,
        SysModule _sysModule)
    {
        CustVendTransOpen   custVendTransOpen;
        boolean             ret;

        switch (_sysModule)
        {
            case SysModule::Cust :
                custVendTransOpen = CustTransOpen::findRefId(_recId);
                break;

            case SysModule::Vend :
                custVendTransOpen = VendTransOpen::findRefId(_recId);
                break;
        }

        if (custVendTransOpen)
        {
            if (SpecTrans::exist(
                this.company(),
                tableNum(BankCodaAccountStatementLines),
                this.RecId, custVendTransOpen.company(),
                custVendTransOpen.TableId,
                custVendTransOpen.RecId))
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIncludedElsewhere</Name>
				<Source><![CDATA[
    public boolean isIncludedElsewhere(
        recId        _recId,
        SysModule    _sysModule)
    {
        SpecTrans           specTrans;
        CustVendTransOpen   custVendTransOpen;
        boolean             ret;

        switch (_sysModule)
        {
            case SysModule::Cust :
                custVendTransOpen = CustTransOpen::findRefId(_recId);
                break;

            case SysModule::Vend :
                custVendTransOpen = VendTransOpen::findRefId(_recId);
                break;
        }

        if (custVendTransOpen)
        {
            select firstonly crossCompany RecId from specTrans
                where  specTrans.SpecTableId    == tableNum(BankCodaAccountStatementLines)
                   &&  (specTrans.SpecRecId      != this.RecId
                        || specTrans.SpecCompany    != this.company())
                   &&  specTrans.RefTableId     == custVendTransOpen.TableId
                   &&  specTrans.RefRecId       == custVendTransOpen.RecId
                   &&  specTrans.RefCompany     == custVendTransOpen.company();

            if (specTrans.RecId)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccount</Name>
				<Source><![CDATA[
    public CustVendAC parmAccount(CustVendAC _account = '', BankCodaLedgerJournalACType _accountType = this.AccountType)
    {
        DimensionAttributeValueCombination  ledgerDimension;
        CustVendAC                          account;

        if (!prmisDefault(_accountType))
        {
            this.AccountType = _accountType;
        }

        // If account has been changed, update the backing ledger dimension value
        if (!prmisDefault(_account))
        {
            if (_account)
            {
                this.LedgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumberEnumModule(
                    _account,
                    _accountType,
                    enumnum(BankCodaLedgerJournalACType),
                    ModuleInventCustVend::Cust);
                account = _account;
            }
            else
            {
                account = '';
                this.LedgerDimension = 0;
            }
        }
        else if (this.LedgerDimension)
        {
            // If the account has not been changed, then pull the value from ledger dimension as the master
            select DisplayValue from ledgerDimension where ledgerDimension.RecId == this.LedgerDimension;
            account = ledgerDimension.DisplayValue;
        }

        return account;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearErrors</Name>
				<Source><![CDATA[
    public static void clearErrors(BankCodaAccountStatement _bankCodaAccountStatement)
    {
        BankCodaAccountStatementLines   bankCodaAccountStatementLines;
        BankCodaParameters              bankCodaParameters = BankCodaParameters::find();
        boolean                         stillErrors;

        ttsbegin;

        while select forupdate bankCodaAccountStatementLines
            where bankCodaAccountStatementLines.HasProcessErrors     == NoYes::Yes
                && bankCodaAccountStatementLines.AccountId           == _bankCodaAccountStatement.AccountId
                && bankCodaAccountStatementLines.AccountStatementNum == _bankCodaAccountStatement.AccountStatementNum
                && bankCodaAccountStatementLines.StatementDate       == _bankCodaAccountStatement.AccountStatementDate
        {
            stillErrors = false;
            if (! bankCodaAccountStatementLines.LedgerDimension)
            {
                stillErrors = true;
                bankCodaAccountStatementLines.Log += "@SYS83386" + '\n';

                if (bankCodaParameters.LedgerDimension)
                {
                    MainAccountLegalEntity mainAccountLegalEntity   = MainAccountLegalEntity::findByMainAccountLegalEntity(MainAccount::findByLedgerDimension(bankCodaParameters.LedgerDimension).RecId, CompanyInfo::current());
                    stillErrors                                     = false;
                    bankCodaAccountStatementLines.AccountType       = BankCodaLedgerJournalACType::Ledger;
                    bankCodaAccountStatementLines.LedgerDimension   = LedgerDimensionFacade::serviceCreateLedgerDimension(bankCodaParameters.LedgerDimension, mainAccountLegalEntity.DefaultDimension);
                    bankCodaAccountStatementLines.TaxGroup          = bankCodaParameters.TaxGroup;
                    bankCodaAccountStatementLines.TaxItemGroup      = bankCodaParameters.TaxItemGroup;

                    if (bankCodaAccountStatementLines.GlobalisationCode != GlobalisationCode::Details)
                    {
                        bankCodaAccountStatementLines.GlobalisationCode = GlobalisationCode::Global;
                    }
                }
            }
            if (! stillErrors)
            {
                bankCodaAccountStatementLines.Log              = "";
                bankCodaAccountStatementLines.HasProcessErrors = NoYes::No;
                bankCodaAccountStatementLines.Processed        = NoYes::Yes;
            }
            bankCodaAccountStatementLines.update();
        }
        ttscommit;

        Info("@ApplicationSuite_Localization:BankCodaOperationComplete");
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static BankCodaAccountStatementLines find(
        recId _recId ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankCodaAccountStatementLines bankCodaAccountStatementLines;

        bankCodaAccountStatementLines.selectForUpdate(_forupdate);
        if (_forupdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            bankCodaAccountStatementLines.concurrencyModel(_concurrencyModel);
        }

        select firstonly bankCodaAccountStatementLines
            where bankCodaAccountStatementLines.RecId == _recId;

        return bankCodaAccountStatementLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMovforFree</Name>
				<Source><![CDATA[
    public static recId findMovforFree(
        BankCODASequenceNumber      _sequenceNumber,
        BankCODASequenceNumber       _detailNumber,
        BankAccountStatementNum     _bankAccountStatementNum,
        BankAccount                 _accountId)
    {
        BankCodaAccountStatementLines   bankCodaAccountStatementLines;

        select firstonly RefRecId
            from bankCodaAccountStatementLines
                where  bankCodaAccountStatementLines.SequenceNumber      == _sequenceNumber
                    && bankCodaAccountStatementLines.DetailNumber        == _detailNumber
                    && bankCodaAccountStatementLines.AccountId           == _accountId
                    && bankCodaAccountStatementLines.AccountStatementNum == _bankAccountStatementNum
                    && bankCodaAccountStatementLines.TransactionType     == BankCodaTransactionType::Movement
                    && bankCodaAccountStatementLines.DetailNumber        != BankCodaImportBase::DetailNumberZero;

        return bankCodaAccountStatementLines.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static BankCodaAccountStatementLines findRecId(
        recId      _recId,
        boolean    _update = false)
    {
        BankCodaAccountStatementLines bankCodaAccountStatementLines;

        if (_recId)
        {
            bankCodaAccountStatementLines.selectForUpdate(_update);

            select firstonly bankCodaAccountStatementLines
                where bankCodaAccountStatementLines.RecId == _recId;
        }
        return bankCodaAccountStatementLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDetails</Name>
				<Source><![CDATA[
    public static recId hasDetails(BankCodaAccountStatementLines   _bankCodaAccountStatementLines)
    {
        BankCodaAccountStatementLines bankCodaAccountStatementLines;

        return (select firstonly RecId
                    from bankCodaAccountStatementLines
                        where bankCodaAccountStatementLines.SequenceNumber == _bankCodaAccountStatementLines.SequenceNumber
                        && bankCodaAccountStatementLines.RefRecId          == _bankCodaAccountStatementLines.RecId
                        && bankCodaAccountStatementLines.TransactionType   == BankCodaTransactionType::Movement
                        && bankCodaAccountStatementLines.DetailNumber      != BankCodaImportBase::DetailNumberZero
                        && bankCodaAccountStatementLines.GlobalisationCode == GlobalisationCode::Global).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notAllProcessedForStatement</Name>
				<Source><![CDATA[
    public static recId notAllProcessedForStatement(BankAccountStatementNum  _accountStatementNum, TransDate _accountStatementDate)
    {
        return BankCodaAccountStatementLines::notAllProcessedForStatementWithBankAccount(_accountStatementNum, _accountStatementDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>notAllProcessedForStatementWithBankAccount</Name>
				<Source><![CDATA[
    public static recId notAllProcessedForStatementWithBankAccount(BankAccountStatementNum  _accountStatementNum, TransDate _accountStatementDate, CompanyBankAccountId _accountId = '')
    {
        BankCodaAccountStatementLines   bankCodaAccountStatementLines;

        return (select firstonly RecId
                    from bankCodaAccountStatementLines
                       where bankCodaAccountStatementLines.AccountStatementNum  == _accountStatementNum
                            && bankCodaAccountStatementLines.StatementDate       == _accountStatementDate
                            && (!_accountId || bankCodaAccountStatementLines.AccountId == _accountId)
                            && bankCodaAccountStatementLines.TransactionType     == BankCodaTransactionType::Movement
                            && bankCodaAccountStatementLines.GlobalisationCode   == GlobalisationCode::Global
                            && (bankCodaAccountStatementLines.Processed          == NoYes::No
                            || bankCodaAccountStatementLines.HasProcessErrors    == NoYes::Yes)).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.LineId = newGuid();

        this.initRefRecId();

        super();

        this.updateMovementLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMovementLines</Name>
				<Source><![CDATA[
    private void updateMovementLines()
    {
        BankCodaAccountStatementLines bankCodaAccountStatementLines;
        BankCodaAccountStatement bankCodaAccountStatement = BankCodaAccountStatement::findByAccountIdNumDate(
            this.AccountId, this.AccountStatementNum, this.StatementDate);

        if (!bankCodaAccountStatement.RecId || bankCodaAccountStatement.IsMovementLinesUpdateDelayed == NoYes::Yes)
        {
            return;
        }

        select sum(AmountCurRead)
            from bankCodaAccountStatementLines
            where bankCodaAccountStatementLines.AccountId == this.AccountId
                && bankCodaAccountStatementLines.AccountStatementNum == this.AccountStatementNum
                && bankCodaAccountStatementLines.StatementDate == this.StatementDate
                && bankCodaAccountStatementLines.DetailNumber == BankCodaImportBase::DetailNumberZero;

        //Processing lines update after last movement line was inserted.
        if (bankCodaAccountStatementLines.AmountCurRead == bankCodaAccountStatement.TotalAmount)
        {
            BankCodaImportBase::updateMovementLines(bankCodaAccountStatement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRefRecId</Name>
				<Source><![CDATA[
    private void initRefRecId()
    {
        BankCodaAccountStatementLines lines;

        if (this.GlobalisationId != 0 && this.DetailNumber != BankCodaImportBase::DetailNumberZero)
        {
            switch (this.GlobalisationId)
            {
                case 5, 6, 7, 8:

                    select firstonly RecId from lines
                        order by lines.RecId desc
                        where lines.AccountId == this.AccountId
                            && lines.StatementDate == this.StatementDate
                            && lines.AccountStatementNum == this.AccountStatementNum
                            && lines.SequenceNumber == this.SequenceNumber
                            && lines.DetailNumber == BankCodaImportBase::DetailNumberZero;

                    this.RefRecId = lines.RecId;
                    break;

                case 9:

                    select firstonly RecId, DetailNumber from lines
                        order by lines.RecId desc
                        where lines.AccountId == this.AccountId
                            && lines.StatementDate == this.StatementDate
                            && lines.AccountStatementNum == this.AccountStatementNum
                            && lines.SequenceNumber == this.SequenceNumber
                            && (lines.GlobalisationId == 5
                                || lines.GlobalisationId == 6
                                || lines.GlobalisationId == 7
                                || lines.GlobalisationId == 8
                                || lines.DetailNumber == BankCodaImportBase::DetailNumberZero);

                    if (lines.DetailNumber != BankCodaImportBase::DetailNumberZero)
                    {
                        this.RefRecId = lines.RecId;
                    }
                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>BE</CountryRegionCodes>
	<DeveloperDocumentation>@SYS123548</DeveloperDocumentation>
	<FormRef>BankCodaAccountStatementLines</FormRef>
	<Label>@SYS79591</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>BankRefNumber</TitleField1>
	<TitleField2>AccountId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Bank</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SpecTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SpecTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankRefNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalBankRefNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DetailNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankRefNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalBankRefNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DetailNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS53072</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountCurRead</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountStatementNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankRefNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalBankRefNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Log</Name>
			<Label>@SYS2515</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HasProcessErrors</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Log</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Message</Name>
			<Label>@SYS60279</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MessageType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StructuredMessageType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Message</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS21694</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DatePosted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatementDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OtherParty</Name>
			<Label>@SYS24145</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OtherPartyBankAccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OtherPartyInternalCodes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OtherPartyExternalAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OtherPartyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OtherPartyAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OtherPartyCity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DetailNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS55132</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscLinked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25532</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Processed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CodaSettlementType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax</Name>
			<Label>@SYS28668</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GlobalisationCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionFamily</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transaction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountStatementNum</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankAccountStatementNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>BankCodaLedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS79596</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCurRead</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS79597</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankRefNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>BankRefNumberCODA</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CashDiscLinked</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS79595</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CodaSettlementType</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>BankCodaSettlementType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustRef</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CodaCustRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DatePosted</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DatePosted</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DetailNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>BankCODASequenceNumber</ExtendedDataType>
			<Label>@SYS53422</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalBankRefNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ExternalBankRefNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GlobalisationCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>GlobalisationCode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HasProcessErrors</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS79594</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>BankCodaInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS24500</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Log</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Message</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
			<Label>@SYS14327</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MessageType</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>MessageType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigCurrency</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OtherPartyAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>OtherPartyAddress</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OtherPartyBankAccountID</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>BankAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OtherPartyCity</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>OtherPartyCity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OtherPartyExternalAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ExternalAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OtherPartyInternalCodes</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>OtherPartyInternalCodes</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OtherPartyName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>OtherPartyName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Processed</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS17748</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SequenceNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>BankCODASequenceNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StatementDate</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS26785</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StructuredMessageType</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>PaymentStub</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transaction</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>BankTransCoda</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCategory</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>BankTransCategoryCoda</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionFamily</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>BankTransFamilyCoda</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransactionType</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>BankCodaTransactionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>LineId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysGuid</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>GlobalisationId</Name>
			<AssetClassification>Customer Content </AssetClassification>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransactionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransactionFamily</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Transaction</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransactionCategory</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LineId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DetailsIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SequenceNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransactionType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DetailNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GlobalisationCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountStatementNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StatementDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DetailNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SequenceNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SequenceNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SequenceNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankAccountTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountId</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>AccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankCodaAccountStatementLines</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankCodaAccountStatementLines</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankCodaAccountTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<EntityRelationshipRole>@SYS123550</EntityRelationshipRole>
			<RelatedTable>BankCodaAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankCodaAccountTableAccountId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankCodaAccountStatementLinesDetail</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountId</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>AccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankCodaTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123551</EntityRelationshipRole>
			<RelatedTable>BankCodaTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankCodaTransactions</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankCodaAccountStatementLinesDetails</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Transaction</Name>
					<Field>Transaction</Field>
					<RelatedField>Transaction</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionFamily</Name>
					<Field>TransactionFamily</Field>
					<RelatedField>TransactionFamily</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankCodaTransCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123552</EntityRelationshipRole>
			<RelatedTable>BankCodaTransCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TransactionCategoryOfBankCoda</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankCodaAccountStatementOfLines</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCategory</Name>
					<Field>TransactionCategory</Field>
					<RelatedField>TransactionCategory</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Transaction</Name>
					<Field>Transaction</Field>
					<RelatedField>Transaction</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionFamily</Name>
					<Field>TransactionFamily</Field>
					<RelatedField>TransactionFamily</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankCodaTransFamily</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123553</EntityRelationshipRole>
			<RelatedTable>BankCodaTransFamily</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankCodaFamilyTrasactions</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankCodaAccountStatementOfLines</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionFamily</Name>
					<Field>TransactionFamily</Field>
					<RelatedField>TransactionFamily</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankCodaAccountStatementLines</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCurrency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>OrigCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankCodaAccountStatementLines</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SpecTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123555</EntityRelationshipRole>
			<RelatedTable>SpecTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SpecTransactions</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankCodaAccountStatementOfLines</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>SpecTableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>SpecRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>dataAreaId</Name>
					<Field>dataAreaId</Field>
					<RelatedField>SpecCompany</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<EntityRelationshipRole>@SYS123556</EntityRelationshipRole>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeadingDetails</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankCodaAccountStatementOfLines</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<EntityRelationshipRole>@SYS123557</EntityRelationshipRole>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeadingDetails</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankCodaAccountStatementOfLines</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankCodaAccountStatement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123549</EntityRelationshipRole>
			<RelatedTable>BankCodaAccountStatement</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankCodaAccountStatementOfHeader</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>BankCodaAccountStatementOfLines</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatementDate</Name>
					<Field>StatementDate</Field>
					<RelatedField>AccountStatementDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountStatementNum</Name>
					<Field>AccountStatementNum</Field>
					<RelatedField>AccountStatementNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountId</Name>
					<Field>AccountId</Field>
					<RelatedField>AccountId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>