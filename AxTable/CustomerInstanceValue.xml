<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomerInstanceValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This table contains methods to support creation and find records for attribute instance related to Customer entity.
/// </summary>
public class CustomerInstanceValue extends Common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the instance given the customer identifier and data area identifier.
    /// </summary>
    /// <param name = "_customerId">The customer account number.</param>
    /// <param name = "_dataAreaId">THe data area identifier.</param>
    /// <returns>Table instance of CustomerInstanceValue.</returns>
    public static CustomerInstanceValue find(str _customerId, str _dataAreaId)
    {
        CustomerInstanceValue instanceValue;
        CustomerInstanceValue::validateParameters(_customerId, _dataAreaId, 'find');

        select firstonly crosscompany instanceValue
            where instanceValue.AccountNum == _customerId
            && instanceValue.CustomerDataAreaId == _dataAreaId;

        return instanceValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the CustomerInstanceValue table instance given customer account number and data area identifier.
    /// If both parameters are valid but not found, a new row will be created.
    /// </summary>
    /// <param name = "_customerId">The customer account number.</param>
    /// <param name = "_dataAreaId">The data area identifier.</param>
    /// <returns>Table instance of CustomerInstanceValue.</returns>
    public static CustomerInstanceValue findOrCreate(str _customerId, str _dataAreaId)
    {
        CustomerInstanceValue instanceValue;
        CustomerInstanceValue::validateParameters(_customerId, _dataAreaId, 'findOrCreate');

        instanceValue = CustomerInstanceValue::find(_customerId, _dataAreaId);

        if (!instanceValue.RecId)
        {
            // Create a new record if new data.
            ttsbegin;
            instanceValue.AccountNum = _customerId;
            instanceValue.CustomerDataAreaId = _dataAreaId;
            instanceValue.insert();
            ttscommit;
        }

        return instanceValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate parameters.
    /// </summary>
    /// <param name = "_customerId">The customer account number.</param>
    /// <param name = "_dataAreaId">The data area identifier.</param>
    /// <param name = "_methodName">The method name.</param>
    private static void validateParameters(str _customerId, str _dataAreaId, str _methodName)
    {
        str nullParameterMessageTemplate = 'Parameter %1 cannot be empty string on method CustomerInstanceValue::%2';

        if (_customerId == '')
        {
            // throw error if _customerId is empty string.
            throw error(strFmt(nullParameterMessageTemplate, '_customerId', _methodName));
        }
        else if (_dataAreaId == '')
        {
            // throw error if _dataAreaId is empty string.
            throw error(strFmt(nullParameterMessageTemplate, '_dataAreaId', _methodName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the specified record in the <c>CustomerInstanceValue</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record id of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CustomerInstanceValue</c> table; otherwise, an empty.
    /// </returns>
    internal static CustomerInstanceValue findRecId(RefRecId _recId, boolean _forupdate = false)
    {
        CustomerInstanceValue record;

        if (_recId)
        {
            record.selectForUpdate(_forupdate);

            select firstonly record
                where record.RecId == _recId;
        }

        return record;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<Label>@Retail:CustInstanceValueLabel</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>AccountNum</TitleField1>
	<TitleField2>RecId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Extends>EcoResInstanceValue</Extends>
	<Modules>AccountsReceivable</Modules>
	<ReplacementKey>CustomerIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerDataAreaId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustomerIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustomerDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResInstanceValue</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EcoResInstanceValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomerDataAreaId</Name>
					<Field>CustomerDataAreaId</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>