<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmCampaignTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class smmCampaignTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFormatField</Name>
				<Source><![CDATA[
    public boolean checkFormatField()
    {
        DictField           dictField;
        smmCampaignTable    smmCampaignTable;

        dictField = new DictField(tableNum(smmCampaignTable), fieldNum(smmCampaignTable, CampaignId));

        if ((strLen(this.CampaignId) + strLen(this.Mask)) > dictField.stringLen())
        {
            // No format can be added, as the field campaign ID and format exceed the max. string length of a campaign ID.
            return checkFailed("@SYS82347");
        }

        select reverse CampaignId from smmCampaignTable order by CampaignId where smmCampaignTable.CampaignParentId == this.CampaignId;

        if (smmCampaignTable.CampaignId)
        {
            if (this.orig().Mask != this.Mask)
            {
                // Format cannot be changed for campaigns with sub-projects.
                return checkFailed("@SYS82348");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>childExist</Name>
				<Source><![CDATA[
    display smmCampaignChild childExist()
    {
        return smmCampaignTable::child(this.CampaignId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeTargetActivities</Name>
				<Source><![CDATA[
    public void closeTargetActivities()
    {
        smmActivities            smmActivities;
        smmCampaignSelection     smmCampaignSelection;

        smmActivities.selectForUpdate(true);

        ttsbegin;

        while select RecId from smmCampaignSelection
            where smmCampaignSelection.CampaignId == this.CampaignId && smmCampaignSelection.ActivityNumber
            join forupdate smmActivities
                where smmActivities.ActivityNumber == smmCampaignSelection.ActivityNumber && !smmActivities.Closed
        {
            smmActivities.Closed                = NoYes::Yes;
            smmActivities.ActualEndDateTime     = DateTimeUtil::getSystemDateTime();
            smmActivities.DoneByWorker          = smmUtility::getCurrentContactWorker();
            smmActivities.ActivityTaskTimeType  = smmActivityTaskTimeType::Completed;
            smmActivities.PercentageCompleted   = 100;

            if (smmActivities.validateWrite(true))
            {
                smmActivities.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAsIs</Name>
				<Source><![CDATA[
    public smmCampaignId copyAsIs(smmCampaignId _campaignId = '')
    {
        smmCampaignTable   smmCampaignTable;
        NumberSeq          smmCampaignNumberSeq;

        // Is no campaign ID passed
        if (!_campaignId)
        {
            // Find new number from number sequence
            smmCampaignNumberSeq        = NumberSeq::newGetNum(smmParameters::numRefCampaignId());
            smmCampaignTable.CampaignId = smmCampaignNumberSeq.num();
        }
        else
        {
            smmCampaignTable.CampaignId = _campaignId;
        }

        smmCampaignTable.initValue();

        // Add (Copy) to the campaign name
        smmCampaignTable.CampaignName               = this.CampaignName +'(' + "@SYS80350" + ')';
        smmCampaignTable.CampaignRespWorker         = smmUtility::getCurrentContactWorker();
        smmCampaignTable.CampaignGroupId            = this.CampaignGroupId;
        smmCampaignTable.CampaignTypeId             = this.CampaignTypeId;
        smmCampaignTable.EmailBroadcastName         = this.EmailBroadcastName;
        smmCampaignTable.EmailBroadcastSubject      = this.EmailBroadcastSubject;
        smmCampaignTable.EmailBroadcastText         = this.EmailBroadcastText;
        smmCampaignTable.CampaignComment            = this.CampaignComment;
        smmCampaignTable.CampaignTarget             = this.CampaignTarget;
        smmCampaignTable.CampaignTargetGroup        = this.CampaignTargetGroup;
        smmCampaignTable.CampaignTargetId           = this.CampaignTargetId;
        smmCampaignTable.CampaignRespWorker         = this.CampaignRespWorker;
        smmCampaignTable.kmCollectionId             = this.kmCollectionId;
        smmCampaignTable.Mask                       = this.Mask;
        smmCampaignTable.ProjId                     = this.ProjId;
        smmCampaignTable.ProjFatherId               = this.ProjFatherId;

        if (this.ProcessName &&
        Hierarchy::findByNameType(this.ProcessName,HierarchyType::Campaign,true).IsActive)
        {
            smmCampaignTable.ProcessName                = this.ProcessName;
        }

        smmCampaignTable.insert();

        // Copy process if there is one
        if (smmCampaignTable.ProcessName)
        {
            smmProcessInstance::write(smmCampaignTable,'',smmCampaignTable.ProcessName);
        }

        return smmCampaignTable.CampaignId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCampaign</Name>
				<Source><![CDATA[
    public smmCampaignId copyCampaign(smmCampaignId _campaignId = '')
    {
        smmCampaignId                   newsmmCampaignId            = '';
        smmCampaignSelection            smmCampaignSelection        = null;
        smmCampaignSelectionResult      smmCampaignSelectionResult  = null;

        ttsbegin;

        // Copy the campaign
        newsmmCampaignId = this.copyAsIs(_campaignId);

        // Copy targets for the campaign
        smmCampaignSelection.copyAsIs(this.CampaignId, newsmmCampaignId);

        // Copy targets that were selected in the campaigns query selection
        smmCampaignSelectionResult.copyAsIs(this.CampaignId, newsmmCampaignId);

        ttscommit;

        return newsmmCampaignId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countNumOfResponses</Name>
				<Source><![CDATA[
    display Counter countNumOfResponses()
    {
        smmCampaignSelection campaignSelection;

        select count(RecId) from campaignSelection
            where   campaignSelection.CampaignId == this.CampaignId  &&
                    campaignSelection.Responded  == NoYes::Yes;

        return any2int(campaignSelection.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // Check to see if the associated dimension attribute value has been used
        // in a way that would prevent deletion.
        if (!DimensionValidation::canDeleteEntityValue(this))
        {
            throw error(strFmt("@SYS134392", this.CampaignId));
        }

        ttsbegin;

        // Update the associated dimension attribute value.
        DimensionAttributeValue::updateForEntityValueDelete(this);

        // Delete the primary activities attached
        smmActivityParentLink::deletePrimaryActivities(this,smmActivityParentType::Campaign);

        super();

        ttscommit;

        // Create or update entry in the CRM transactions log
        smmTransLog::initTrans(this, smmLogAction::delete);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextSon</Name>
				<Source><![CDATA[
    public int findNextSon()
    {
        smmCampaignId  smmCampaignMask;
        smmCampaignId  smmCampaignIdLastSon;

        smmCampaignIdLastSon = smmCampaignTable::smmCampaignIdLastSon(this.CampaignParentId);

        if (smmCampaignIdLastSon)
        {
            smmCampaignMask = subStr(smmCampaignIdLastSon,
                                     strLen(this.CampaignParentId) + 1,
                                     (strLen(smmCampaignIdLastSon) - strLen(this.CampaignParentId) + 1));

            return smmCampaignTable::numRemTemplate(smmCampaignMask, smmCampaignTable::find(this.CampaignParentId).Mask);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRootParent</Name>
				<Source><![CDATA[
    // Find the root parent for the campaign
    smmCampaignId findRootParent()
    {
        if (!this.CampaignParentId)
        {
            return this.CampaignId;
        }
        return smmCampaignTable::find(this.CampaignParentId).findRootParent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>frequencyOfResponses</Name>
				<Source><![CDATA[
    display Counter frequencyOfResponses()
    {
        int noOfResp;
        int totalTargets;

        noOfResp = this.countNumOfResponses();
        totalTargets =  this.totalTargets();

        if (totalTargets == 0)
        {
            return 0;
        }
        else
        {
            return any2int((noOfResp / totalTargets) * 100);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExpiryDateFromCampaignDate</Name>
				<Source><![CDATA[
    public void initExpiryDateFromCampaignDate()
    {
        this.CampaignEndDate = this.CampaignDate + smmParameters::getCampaignNumOfDaysExpiryDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFollowUpDateFromExpiryDate</Name>
				<Source><![CDATA[
    public void initFollowUpDateFromExpiryDate()
    {
        #define.saturday(6)
        #define.sunday(7)
        #define.twoDaysBack(2)
        #define.oneDayBack(1)

        // The follow up date is set to a number of days (defined in the parameters) before the campaign end date
        this.CampaignFollowUpDate = this.CampaignEndDate - smmParameters::getCampaignNumOfDaysFollowUpDate();

        // Make sure that the campaign follow up activity is not on a Saturday or Sunday
        if (dayOfWk(this.CampaignFollowUpDate) == #sunday)
        {
            // Set follow up date to Friday
            this.CampaignFollowUpDate = this.CampaignFollowUpDate - #twoDaysBack;
        }
        else
        if (dayOfWk(this.CampaignFollowUpDate) == #saturday)
        {
            // Set follow up date to Friday
            this.CampaignFollowUpDate = this.CampaignFollowUpDate - #oneDayBack;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.CampaignDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        this.initExpiryDateFromCampaignDate();
        this.initFollowUpDateFromExpiryDate();

        [this.CampaignRespWorker, this.CampaignTypeId, this.CampaignGroupId, this.CampaignTargetId, this.CampaignStatus] = smmParameters::getInititalCampaignValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // Calculate the follow up date
        this.initFollowUpDateFromExpiryDate();

        // Create follow up activity for the campaign if the campaign has a responsible employee
        if (this.CampaignRespWorker && !this.CampaignFollowUpActivity)
        {
            this.CampaignFollowUpActivity = smmActivityCreate::createActivity(this).ActivityNumber;
        }

        super();

        // Insert parent link for activity
        if (this.CampaignFollowUpActivity)
        {
            smmActivityParentLink::insertLink(this.CampaignFollowUpActivity,smmActivityParentType::Campaign, this.RecId, true);
        }

        // Create or update entry in the CRM transactions log
        smmTransLog::initTrans(this, smmLogAction::insert);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCampaignClosedOrCancelled</Name>
				<Source><![CDATA[
    public boolean isCampaignClosedOrCancelled()
    {
        return ((this.CampaignStatus == smmCampaignStatus::Closed) ||
                (this.CampaignStatus == smmCampaignStatus::Cancelled));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTargetActivitiesExists</Name>
				<Source><![CDATA[
    public boolean isTargetActivitiesExists()
    {
        smmCampaignSelection smmCampaignSelection;

        select firstonly CampaignId, ActivityNumber, RecId from smmCampaignSelection where smmCampaignSelection.CampaignId == this.CampaignId && smmCampaignSelection.ActivityNumber;
        return (smmCampaignSelection.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCampaignCosts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the costs associated to the campaign and the children campaigns.
    /// </summary>
    /// <param name="_actual">
    /// Whether or not to calculate the actual or budged sales revenue.
    /// </param>
    /// <returns>
    /// Costs associated to the campaign and the children campaigns
    /// </returns>
    /// <remarks>
    /// Can only calculate costs if the campaigns have source codes.
    /// </remarks>
    public AmountMST mcrCampaignCosts(boolean _actual = true)
    {
        AmountMST           mcrCampaignCosts;
        smmCampaignTable    smmCampaignTable;
        smmCampaignId       searchCampaignId;
        MCRSourceCodeSetup  mcrSourceCodeSetup;

        searchCampaignId = this.CampaignId + '*';

        while select mcrSourceID from smmCampaignTable
            where smmCampaignTable.CampaignId like searchCampaignId
        {
            if (smmCampaignTable.mcrSourceID)
            {
                mcrSourceCodeSetup = MCRSourceCodeSetup::find(smmCampaignTable.mcrSourceID);
                mcrCampaignCosts += mcrSourceCodeSetup.sourceCosts(_actual);
            }
        }

        return mcrCampaignCosts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCampaignFirstOrderDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the date for the 1st order associated to the campaign.
    /// </summary>
    /// <returns>
    /// 1st order date associated with the campaign.
    /// </returns>
    public FromDate mcrCampaignFirstOrderDate()
    {
        FromDate            firstOrderDate;
        SalesTable          salesTable;
        SalesTable          salesTableChildren;
        smmCampaignId       searchCampaignId;
        smmCampaignTable    smmCampaignTable;

        searchCampaignId = this.CampaignId + '*';

        select firstonly CreatedDateTime from salesTable
            order by CreatedDateTime asc
            where salesTable.SmmCampaignId == this.CampaignId;

        firstOrderDate = DateTimeUtil::date(salesTable.CreatedDateTime);

        // fetch children if they exist
        select firstonly CreatedDateTime, RecId from salesTableChildren
            order by CreatedDateTime asc
            where salesTableChildren.CreatedDateTime < salesTable.CreatedDateTime
            exists join smmCampaignTable
            where smmCampaignTable.CampaignId == salesTableChildren.SmmCampaignId
                && smmCampaignTable.CampaignId like searchCampaignId
                && smmCampaignTable.CampaignId != this.CampaignId;

        if (salesTableChildren)
        {
            firstOrderDate = DateTimeUtil::date(salesTableChildren.CreatedDateTime);
        }

        return firstOrderDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCampaignNumOfOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the # of orders associated to the campaign and the children campaigns.
    /// </summary>
    /// <returns>
    /// # of orders associated to the campaign and the children campaigns
    /// </returns>
    public Counter mcrCampaignNumOfOrders()
    {
        Counter             numOfOrders;
        SalesTable          salesTable;
        smmCampaignId       searchCampaignId;
        smmCampaignTable    smmCampaignTable;

        searchCampaignId = this.CampaignId + '*';

        select count(RecId) from salesTable
            join CampaignId from smmCampaignTable
            where salesTable.SmmCampaignId == smmCampaignTable.CampaignId
                && smmCampaignTable.CampaignId like searchCampaignId;

        numOfOrders = any2int(salesTable.RecId);

        return numOfOrders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCampaignReturns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the invoiced amount of returns associated to the campaign and the children campaigns.
    /// </summary>
    /// <param name="_actual">
    /// Whether or not to calculate the actual or budged sales revenue.
    /// </param>
    /// <returns>
    /// Invoiced amount of returns associated to the campaign and the children campaigns.
    /// </returns>
    public AmountMST mcrCampaignReturns(boolean _actual = true)
    {
        AmountMST           amountReturned;
        smmCampaignId       searchCampaignId;
        smmCampaignTable    smmCampaignTable;
        SalesTable          salesTable;
        CustInvoiceJour     custInvoiceJour;
        MCRSourceCodeSetup  mcrSourceCodeSetup;

        searchCampaignId = this.CampaignId + '*';

        while select CampaignId, mcrSourceID from smmCampaignTable
            where smmCampaignTable.CampaignId like searchCampaignId
        {
            if (_actual)
            {
                select sum(InvoiceAmountMST) from custInvoiceJour
                    where custInvoiceJour.InvoiceAmountMST < 0
                    join RecId from salesTable
                    where salesTable.SalesId == custInvoiceJour.SalesId
                        &&  salesTable.SmmCampaignId == smmCampaignTable.CampaignId;

                amountReturned += custInvoiceJour.InvoiceAmountMST;
            }
            else if (smmCampaignTable.mcrSourceID)// get budgeted/projected for source code
            {
                mcrSourceCodeSetup = MCRSourceCodeSetup::find(smmCampaignTable.mcrSourceID);
                amountReturned += mcrSourceCodeSetup.sourceReturns(false);
            }
        }

        return amountReturned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCampaignRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the invoiced amount of SO's associated to the campaign and the children campaigns.
    /// </summary>
    /// <param name="_actual">
    /// Whether or not to calculate the actual or budged sales revenue.
    /// </param>
    /// <returns>
    /// Invoiced amount of SO's associated to the campaign and the children campaigns.
    /// </returns>
    public AmountMST mcrCampaignRevenue(boolean _actual = true)
    {
        AmountMST           campaignRevenue;
        smmCampaignId       searchCampaignId;
        smmCampaignTable    smmCampaignTable;
        SalesTable          salesTable;
        CustInvoiceJour     custInvoiceJour;
        MCRSourceCodeSetup  mcrSourceCodeSetup;

        searchCampaignId = this.CampaignId + '*';

        while select CampaignId, mcrSourceID from smmCampaignTable
            where smmCampaignTable.CampaignId like searchCampaignId
        {
            if (_actual)
            {
                select sum(InvoiceAmountMST) from custInvoiceJour
                    where custInvoiceJour.InvoiceAmountMST > 0
                    join RecId from salesTable
                    where salesTable.SalesId == custInvoiceJour.SalesId
                        &&  salesTable.SmmCampaignId == smmCampaignTable.CampaignId;

                campaignRevenue += custInvoiceJour.InvoiceAmountMST;
            }
            else if (smmCampaignTable.mcrSourceID)// get budgeted/projected for source code
            {
                mcrSourceCodeSetup = MCRSourceCodeSetup::find(smmCampaignTable.mcrSourceID);
                campaignRevenue += mcrSourceCodeSetup.sourceRevenue(false);
            }
        }

        return campaignRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrValidateSourceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the source code on the current <c>smmCampaignTable</c> record is valid.
    /// </summary>
    /// <returns>
    /// true if the source code is valid; otherwise, false.
    /// </returns>
    private boolean mcrValidateSourceCode()
    {
        boolean             ret = true;
        smmCampaignTable    campaignTable;

        if (this.mcrSourceID)
        {
            // only allow a source code to be assigned at the planning phase.
            if (this.CampaignStatus != smmCampaignStatus::Planning)
            {
               ret = checkFailed("@MCR25717");
            }

            // don't allow expired source codes to be associated to a campaign.
            ret = ret && MCRSourceCodeSetup::validateSourceEffective(this.mcrSourceID);

            // don't allow campaign to be associated to a campaign & a promotion
            if (this.tamPromotionID)
            {
                ret = checkFailed("@MCR25733");
            }

            select firstonly RecId, CampaignId from campaignTable
                where  campaignTable.mcrSourceID == this.mcrSourceID
                    && campaignTable.CampaignId != this.CampaignId;

            if (campaignTable.RecId != 0)
            {
                // the campaign is already associated w/ a source
                ret = checkFailed(strFmt("@MCR26400", campaignTable.CampaignId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(smmCampaignTable, ProcessName):
                if (!HierarchyTreeTable::checkNumberSeq() || !Hierarchy::checkNumberSeq() || !smmActivities::checkNumberSeq())
                {
                    this.ProcessName = this.orig().ProcessName;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gives the title on top of the preview pane.
    /// </summary>
    /// <returns>
    /// Title field of the preview pane.
    /// </returns>
    display Caption previewPaneTitle()
    {
        return strFmt("@SYS327590", this.CampaignId, this.CampaignName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Renames foreign keys in other tables according to the change of the corresponding primary key value in this table.
    /// </summary>
    public void renamePrimaryKey()
    {
        DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(this, this.orig());
        rename.syncRenamedValuePreSuper();

        super();

        rename.syncRenamedValuePostSuper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showActivityIcon</Name>
				<Source><![CDATA[
    display smmActivityIconNum showActivityIcon()
    {
        #macrolib.resource

        if (this.CampaignFollowUpActivity)
        {
            return #RES_AM_OK;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDocHanIcon</Name>
				<Source><![CDATA[
    display smmDocIconNum showDocHanIcon()
    {
        #macrolib.resource

        if ((select docuRef where docuRef.RefCompanyId == this.DataAreaId && docuRef.RefTableId == this.TableId && docuRef.RefRecId == this.RecId).RecId)
        {
            return #RES_NODE_DOC;
        }

        return #RES_AM_NEW;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showEmpl</Name>
				<Source><![CDATA[
    display DirPartyName showEmpl()
    {
        DirPerson       person;
        HcmWorker       hcmWorker;

        select RecId from hcmWorker
                where hcmWorker.RecId == this.Worker
            join Name from person
                where person.RecId == hcmWorker.Person;

        return person.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showParentProjId</Name>
				<Source><![CDATA[
    display ProjParentId showParentProjId()
    {
        return ProjTable::find(this.ProjId).ParentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showResponsible</Name>
				<Source><![CDATA[
    display EmplName showResponsible()
    {
        DirPerson       person;
        HcmWorker       hcmWorker;

        select RecId from hcmWorker
                where hcmWorker.RecId == this.CampaignRespWorker
            join Name from person
                where person.RecId == hcmWorker.Person;

        return person.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTargets</Name>
				<Source><![CDATA[
    display Counter totalTargets()
    {
        smmCampaignSelection selection;

        select count(RecId) from selection where selection.CampaignId == this.CampaignId;

        return any2int(selection.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _activityHandling = true)
    {
        smmActivities   smmActivities;
        boolean         createActivity = false;
        boolean         advancePrompt;
        smmActivityId   oldActivityId;
        //Load source's corresponding target list.
        smmCampaignTable smmCampaignTable;

        if (_activityHandling)
        {
            advancePrompt  = (smmParametersTable::find().CampaignCreateActivity == smmCreateActivity::AdvancedPrompt);
            // Is an activity already attached to the quotation
            if (this.CampaignFollowUpActivity)
            {
                ttsbegin;

                // Special case - if advance prompt
                oldActivityId = (advancePrompt) ? this.orig().CampaignFollowUpActivity : this.CampaignFollowUpActivity;

                smmActivities = smmActivities::find(oldActivityId, true);

                // Is the required fields on the campaign (and if advance prompt and activity already attached)
                if (this.CampaignRespWorker && (!advancePrompt || oldActivityId == this.CampaignFollowUpActivity))

                {
                    if (smmActivities)
                    {
                        // Is the worker still the same
                        if (smmActivities.ResponsibleWorker == this.CampaignRespWorker)
                        {
                            // Update fields on the CRM activity
                            smmActivities.updateFromCampaign(this);
                        }
                        else  if (!advancePrompt)
                        // The responsible employee on the campaign is changed
                        {
                            // Delete the attached activity for the old employee
                            smmActivities.delete(false);

                            // Create a new activity for the new responsible
                            createActivity = true;
                        }
                    }
                }
                else
                {
                    if (smmActivities)
                    {
                        // Clear the link to old activity
                        if (!advancePrompt || !this.CampaignRespWorker)
                        {
                            this.CampaignFollowUpActivity = '';
                        }

                        // Delete the attached activity
                        smmActivities.delete(false);
                    }
                }

                ttscommit;
            }
            else
            // Create follow up activity for the campaign if the campaign has a responsible worker
            if (this.CampaignRespWorker && !(this.CampaignStatus == smmCampaignStatus::Cancelled
                || this.CampaignStatus == smmCampaignStatus::Closed))
            {
                createActivity = true;
            }

            if (createActivity && !advancePrompt)
            {
                this.CampaignFollowUpActivity = smmActivityCreate::createActivity(this).ActivityNumber;
            }
        }
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            smmCampaignTable = this.orig();
        }

        super();
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // If source id has changed to a non blank value then prompt the user to
            // add the source's corresponding target list to the campaign.
            if (smmCampaignTable.mcrSourceID != this.mcrSourceID
                && this.mcrSourceID)
            {
                smmCampaignSelection::mcrCreateFromSourceTarget(this.CampaignId, this.mcrSourceID);
            }
        }

        // Update CRM transaction log
        smmTransLog::initTrans(this, smmLogAction::update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromAdvPromptActivity</Name>
				<Source><![CDATA[
    /* Call this before update for handling advanced prompt case.
       It should not be inside ttsbegin and ttscommit. */
    void updateFromAdvPromptActivity(smmCampaignTable _orig = this.orig())
    {
        smmActivities       smmActivities;

        // If advanced prompt
        if (smmParametersTable::find().CampaignCreateActivity == smmCreateActivity::AdvancedPrompt)
        {
            // If responsible was changed or there was no activity attached earlier
            if ( this.CampaignRespWorker && ((this.CampaignRespWorker != _orig.CampaignRespWorker)
                 || (!_orig.CampaignFollowUpActivity)))
            {
                smmActivities                 = smmActivityCreate::createActivity(this);
                this.CampaignFollowUpActivity = smmActivities.ActivityNumber;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    public void updateStatus(smmCampaignId _campaignId, smmCampaignStatus _status, NoYesId _noYes)
    {
        smmCampaignTable    smmCampaignTable;

        ttsbegin;
        smmCampaignTable = smmCampaignTable::find(_campaignId, true);

        smmCampaignTable.CampaignStatus     = _status;
        smmCampaignTable.CampaignClosed     = _noYes;
        smmCampaignTable.CampaignReasonId   = '';
        smmCampaignTable.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSubCampaigns</Name>
				<Source><![CDATA[
    public void updateSubCampaigns(smmCampaignId _campaignId, NumberSequenceFormat _mask,  smmCampaignStatus _status, smmCampaignReasonId _reason, NoYes _closed)
    {
        if (_mask)
        {
            if (_status != smmCampaignStatus::Cancelled && _status != smmCampaignStatus::Closed)
            {
                // Should subcampaigns also be updated?
                if (Box::yesNo("@SYS82785", DialogButton::Yes) == DialogButton::No)
                {
                    return;
                }
            }
            // Update status on the sub campaigns
            smmCampaignTable::traverseCampaigns(_campaignId, _status, _reason, _closed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret;

        ret = super(_fieldId);

        if (ret)
        {
            switch (_fieldId)
            {
                case fieldNum(smmCampaignTable, Mask):
                    this.checkFormatField();
                    break;

                case fieldNum(smmCampaignTable, Worker) :
                    if (this.Worker)
                    {
                        ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.Worker);
                    }
                    break;

                case fieldNum(smmCampaignTable, CampaignRespWorker) :
                    if (this.CampaignRespWorker)
                    {
                    ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.CampaignRespWorker);
                    }
                    break;
            }
        }

        // User will not be allowed to edit if the campaign is closed or cancelled.
        if (ret && this.CampaignStatus == smmCampaignStatus::Closed || this.CampaignStatus == smmCampaignStatus::Cancelled)
        {
            // Cannot modify campaigns that are closed or cancelled!
            return checkFailed("@SYS80358");
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // If source code associated to the campaign validate it's valid
            if ( _fieldId == fieldNum(smmCampaignTable, mcrSourceID) )
            {
                ret = this.mcrValidateSourceCode();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(boolean validateWorkerOnly = false)
    {
        boolean ret = true;

        if (!validateWorkerOnly)
        {
            // If the campaign has a format, the format is checked
            if (this.Mask && ! NumberSeq::formatCountSymbols(this.Mask))
            {
                // Incorrect format, the character # must be included in the format
                return checkFailed("@SYS67825");
            }
            else
            {
                ret = super();
            }
        }

        if (this.Worker)
        {
            ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.Worker);
        }

        if (this.CampaignRespWorker)
        {
            ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.CampaignRespWorker);
        }
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            if (this.mcrSourceID)
            {
                if (this.tamPromotionID)
                {
                    ret = checkFailed("@MCR25733");
                }

                ret = ret && this.mcrValidateSourceCode();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeStatusOnCampaign</Name>
				<Source><![CDATA[
    public static void changeStatusOnCampaign(smmCampaignId _campaignId)
    {
        smmCampaignTable smmCampaignTable;

        ttsbegin;

        select firstonly forupdate CampaignId, CampaignStatus from smmCampaignTable where smmCampaignTable.CampaignId == _campaignId;

        if (smmCampaignTable)
        {
            smmCampaignTable.CampaignStatus = smmCampaignStatus::Planning;

            smmCampaignTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(smmCampaignId _smmCampaignId)
    {
        if (_smmCampaignId && !smmCampaignTable::exist(_smmCampaignId))
        {
            return checkFailed(strFmt(smmCampaignTable::txtNotExist(), _smmCampaignId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>child</Name>
				<Source><![CDATA[
    public static boolean child(smmCampaignId _smmCampaignId)
    {
        return (select smmCampaignTable where smmCampaignTable.CampaignParentId == _smmCampaignId).RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearDistribution</Name>
				<Source><![CDATA[
    public static void clearDistribution(smmCampaignId _campaignId)
    {
        smmCampaignSelection    smmCampaignSelection;

        ttsbegin;

        while select forupdate smmCampaignSelection where smmCampaignSelection.CampaignId == _campaignId
        {
            smmCampaignSelection.FollowUpRespWorker = 0;
            smmCampaignSelection.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeByMainContact</Name>
				<Source><![CDATA[
    public static Counter distributeByMainContact(TableId _tableId,smmCampaignId _campaignId, boolean _overwrite)
    {
        Common                  common;
        DictTable               dictTable;
        FieldId                 partyFieldId;
        FieldId                 mainContactFieldId;
        smmCampaignSelection    smmCampaignSelection;
        smmActivities           smmActivities;
        RecId                   campaignSelRecId;
        Counter                 numberOfUpdatedTargets  = 0;
        smmActivities           templateActivity        = null;
        boolean                 activityHandling        = false;

        switch (_tableId)
        {
            case tableNum(CustTable) :
            partyFieldId = fieldNum(CustTable,Party);
            mainContactFieldId = fieldNum(CustTable,MainContactWorker);
            break;

            case tableNum(VendTable) :
            partyFieldId = fieldNum(VendTable,Party);
            mainContactFieldId = fieldNum(VendTable,MainContactWorker);
            break;

            case tableNum(smmBusRelTable) :
            partyFieldId = fieldNum(smmBusRelTable,Party);
            mainContactFieldId = fieldNum(smmBusRelTable,MainContactWorker);
            break;

            default :
            return -1;
        }

        dictTable = new DictTable(_tableId);
        common = dictTable.makeRecord();

        select firstonly smmCampaignSelection join common
            where smmCampaignSelection.Party == common.(partyFieldId) &&
                  smmCampaignSelection.CampaignId    == _campaignId &&
                  smmCampaignSelection.PlannedDate &&
                  ((!smmCampaignSelection.FollowUpRespWorker && common.(mainContactFieldId)) || _overwrite);

        if (smmCampaignSelection)
        {
            // Store the old activity if any
            smmActivities = smmActivities::find(smmCampaignSelection.ActivityNumber);

            // Set responsible to main contact on the common
            smmCampaignSelection.FollowUpRespWorker = common.(mainContactFieldId);

            // Use the first created activity as a template activity for the remainder of the campaign targets
            templateActivity = smmCampaignSelection.createNewActivity();
            campaignSelRecId = smmCampaignSelection.RecId;

            // Is activity handling active (the user responded Yes to the first activity) and a template activity hasn't been assigned yet
            if (templateActivity)
            {
                activityHandling = true;
            }
            else
            {
               activityHandling = false;
            }
        }

        try
        {
            ttsbegin;

            while select forupdate smmCampaignSelection join common
                where smmCampaignSelection.Party == common.(partyFieldId) &&
                      smmCampaignSelection.CampaignId    == _campaignId
            {
                if ((!smmCampaignSelection.FollowUpRespWorker && common.(mainContactFieldId)) || _overwrite)
                {
                    // Set responsible to main contact on the common
                    smmCampaignSelection.FollowUpRespWorker = common.(mainContactFieldId);

                    if (smmCampaignSelection.RecId == campaignSelRecId)
                    {
                        if (smmActivities)
                        {
                            smmActivities.delete(false);
                        }

                        smmCampaignSelection.ActivityNumber = templateActivity.ActivityNumber;
                        smmCampaignSelection.update(false);
                    }
                    else
                    {
                        // Update the campaign target
                        smmCampaignSelection.update(activityHandling, templateActivity);
                    }

                    numberOfUpdatedTargets++;
                }
            }

            ttscommit;
        }
        catch
        {
            if (templateActivity)
            {
                ttsbegin;
                templateActivity = smmActivities::find(templateActivity.ActivityNumber,true);
                if (templateActivity)
                {
                    templateActivity.delete(false);
                }
                ttscommit;
            }
        }

        return numberOfUpdatedTargets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeByMainContactOnContactPerson</Name>
				<Source><![CDATA[
    public static Counter distributeByMainContactOnContactPerson(smmCampaignId _campaignId, boolean _overwrite)
    {
        ContactPerson           contactPerson;
        smmCampaignSelection    smmCampaignSelection;
        Counter                 numberOfUpdatedTargets  = 0;
        smmActivities           templateActivity        = null;
        boolean                 activityHandling;
        smmActivities           smmActivities;
        RecId                   campaignSelRecId;

        select firstonly smmCampaignSelection join contactPerson
                where smmCampaignSelection.ContactPersonId  == contactPerson.ContactPersonId &&
                      smmCampaignSelection.CampaignId       == _campaignId &&
                      smmCampaignSelection.PlannedDate &&
                      ((!smmCampaignSelection.FollowUpRespWorker && contactPerson.MainResponsibleWorker) || _overwrite);

        if (smmCampaignSelection)
        {
            // Store the old activity if any
            smmActivities = smmActivities::find(smmCampaignSelection.ActivityNumber);

            // Set responsible to main contact on the business relation
            smmCampaignSelection.FollowUpRespWorker = contactPerson.MainResponsibleWorker;

            // Use the first created activity as a template activity for the remainder of the campaign targets
            templateActivity = smmCampaignSelection.createNewActivity();
            campaignSelRecId = smmCampaignSelection.RecId;

            // Is activity handling active (the user responded Yes to the first activity) and a template activity hasn't been assigned yet
            if (templateActivity)
            {
               activityHandling = true;
            }
            else
            {
               activityHandling = false;
            }
        }

        try
        {
            ttsbegin;

            while select forupdate smmCampaignSelection join contactPerson
                where smmCampaignSelection.ContactPersonId  == contactPerson.ContactPersonId &&
                      smmCampaignSelection.CampaignId       == _campaignId
            {
                if ((!smmCampaignSelection.FollowUpRespWorker && contactPerson.MainResponsibleWorker) || _overwrite)
                {
                    // Set responsible to main contact on the business relation
                    smmCampaignSelection.FollowUpRespWorker = contactPerson.MainResponsibleWorker;

                    if (smmCampaignSelection.RecId == campaignSelRecId)
                    {
                        if (smmActivities)
                        {
                            smmActivities = smmActivities::find(smmActivities.ActivityNumber, true);
                            smmActivities.delete(false);
                        }

                        smmCampaignSelection.ActivityNumber = templateActivity.ActivityNumber;
                        smmCampaignSelection.update(false);
                    }
                    else
                    {
                        // Update the campaign target
                        smmCampaignSelection.update(activityHandling, templateActivity);
                    }

                    numberOfUpdatedTargets++;
                }
            }

            ttscommit;
        }
        catch
        {
            if (templateActivity)
            {
                ttsbegin;
                templateActivity = smmActivities::find(templateActivity.ActivityNumber,true);
                if (templateActivity)
                {
                    templateActivity.delete(false);
                }
                ttscommit;
            }
        }

        return numberOfUpdatedTargets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeByResponsibilityOnRelation</Name>
				<Source><![CDATA[
    public static Counter distributeByResponsibilityOnRelation(TableId _tableId,smmCampaignId _campaignId, smmResponsibilityId _responsibility, boolean _overwrite)
    {
        smmCampaignSelection                smmCampaignSelection;
        smmResponsibilitiesEmplTable        smmResponsibilitiesEmplTable;
        Common                              common;
        DictTable                           dictTable;
        FieldId                             partyFieldId;
        smmActivities                       smmActivities;
        RecId                               campaignSelRecId;
        Counter                             numberOfUpdatedTargets  = 0;
        smmActivities                       templateActivity        = null;
        boolean                             activityHandling        = false;

        switch (_tableId)
        {
            case tableNum(CustTable) :
            partyFieldId = fieldNum(CustTable,Party);
            break;

            case tableNum(VendTable) :
            partyFieldId = fieldNum(VendTable,Party);
            break;

            case tableNum(smmBusRelTable) :
            partyFieldId = fieldNum(smmBusRelTable,Party);
            break;

            default :
            return -1;
        }
        dictTable = new DictTable(_tableId);
        common = dictTable.makeRecord();
        select firstonly smmCampaignSelection
            join common where common.(partyFieldId) == smmCampaignSelection.Party
            join smmResponsibilitiesEmplTable
            where smmResponsibilitiesEmplTable.RefTableId == _tableId &&
                  smmResponsibilitiesEmplTable.RefRecId   == common.RecId &&
                  smmCampaignSelection.CampaignId       == _campaignId &&
                  smmCampaignSelection.PlannedDate &&
                  smmResponsibilitiesEmplTable.ResponsibilityId    == _responsibility &&
                  ((!smmCampaignSelection.FollowUpRespWorker && smmResponsibilitiesEmplTable.Worker) || _overwrite);

        if (smmCampaignSelection)
        {
            // Store the old activity if any
            smmActivities = smmActivities::find(smmCampaignSelection.ActivityNumber);

            // Set responsible to main contact on the business relation
            smmCampaignSelection.FollowUpRespWorker = smmResponsibilitiesEmplTable.Worker;

            // Use the first created activity as a template activity for the remainder of the campaign targets
            templateActivity = smmCampaignSelection.createNewActivity();
            campaignSelRecId = smmCampaignSelection.RecId;

            // Is activity handling active (the user responded Yes to the first activity) and a template activity hasn't been assigned yet
            if (templateActivity)
            {
               activityHandling = true;
            }
            else
            {
               activityHandling = false;
            }
        }

        try
        {
            ttsbegin;

            while select forupdate smmCampaignSelection
                join common where common.(partyFieldId) == smmCampaignSelection.Party
                join smmResponsibilitiesEmplTable
                where smmResponsibilitiesEmplTable.RefTableId == common.TableId &&
                      smmResponsibilitiesEmplTable.RefRecId   == common.RecId &&
                      smmCampaignSelection.CampaignId         == _campaignId &&
                      smmResponsibilitiesEmplTable.ResponsibilityId  == _responsibility
            {
                if ((!smmCampaignSelection.FollowUpRespWorker && smmResponsibilitiesEmplTable.Worker) || _overwrite)
                {
                    // Set responsible to main contact on the business relation
                    smmCampaignSelection.FollowUpRespWorker = smmResponsibilitiesEmplTable.Worker;

                    if (smmCampaignSelection.RecId == campaignSelRecId)
                    {
                        if (smmActivities)
                        {
                            smmActivities.selectForUpdate(true);
							smmActivities.delete(false);
                        }

                        smmCampaignSelection.ActivityNumber = templateActivity.ActivityNumber;
                        smmCampaignSelection.update(false);
                    }
                    else
                    {
                        // Update the campaign target
                        smmCampaignSelection.update(activityHandling, templateActivity);
                    }
                    numberOfUpdatedTargets++;
                }
            }

            ttscommit;
        }
        catch
        {
            if (templateActivity)
            {
                ttsbegin;
                templateActivity = smmActivities::find(templateActivity.ActivityNumber,true);
                if (templateActivity)
                {
                    templateActivity.delete(false);
                }
                ttscommit;
            }
        }
        return numberOfUpdatedTargets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(smmCampaignId _smmCampaignId)
    {
        if (_smmCampaignId)
        {
            return (select smmCampaignTable where smmCampaignTable.CampaignId == _smmCampaignId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static smmCampaignTable find(smmCampaignId _smmCampaignId, boolean _forupdate = false)
    {
        smmCampaignTable   smmCampaignTable = null;
        smmCampaignTable.selectForUpdate(_forupdate);

        if (_smmCampaignId)
        {
            select firstonly smmCampaignTable where smmCampaignTable.CampaignId == _smmCampaignId;
        }

        return smmCampaignTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRec</Name>
				<Source><![CDATA[
    public static smmCampaignTable findRec(RecId _recId, boolean _forupdate = false)
    {
        smmCampaignTable smmCampaignTable = null;

        if (_recId)
        {
            smmCampaignTable.selectForUpdate(_forupdate);

            select firstonly smmCampaignTable
                index hint RecId
                where smmCampaignTable.RecId == _recId;
        }

        return smmCampaignTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTMCallListId</Name>
				<Source><![CDATA[
    public static smmCampaignTable findTMCallListId(smmTMCallListID _tmCallListId, boolean _forupdate = false)
    {
        smmCampaignTable  smmCampaignTable = null;

        if (_tmCallListId)
        {
            smmCampaignTable.selectForUpdate(_forupdate);

            select firstonly smmCampaignTable
                index hint CallListIdx
                where smmCampaignTable.tmCallListID == _tmCallListId;
        }

        return smmCampaignTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveAllTargetsResponded</Name>
				<Source><![CDATA[
    public static boolean haveAllTargetsResponded(smmCampaignId _campaignId)
    {
        smmCampaignSelection targets = null;

        // Find a target that hasn't responded to the campaign
        select firstonly CampaignId, Responded from targets where targets.CampaignId == _campaignId && targets.Responded == NoYes::No;

        return targets.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the campaign for the specified source ID.
    /// </summary>
    /// <param name="_mcrSourceID">
    /// The source ID used to find the campaign.
    /// </param>
    /// <param name="_forupdate">
    /// Indicates whether the record should be selected for update.
    /// </param>
    /// <returns>
    /// The <c>smmCampaignTable</c> record with the specified source ID.
    /// </returns>
    public static smmCampaignTable mcrFindSourceId(MCRSourceID _mcrSourceID, boolean _forupdate = false)
    {
        smmCampaignTable  smmCampaignTable = null;

        if (_mcrSourceID)
        {
            smmCampaignTable.selectForUpdate(_forupdate);

            select firstonly smmCampaignTable
                where smmCampaignTable.mcrSourceID == _mcrSourceID;
        }

        return smmCampaignTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRemTemplate</Name>
				<Source><![CDATA[
    public static Integer numRemTemplate(Num _num, Num _mask)
    {
        #define.SymbolNumerals('#')

        Integer         x           = 1;
        Num             newTxt      = '';
        Num             tmpTxt      = _mask;
        Num             tmpNum      = _num;

        if (!tmpTxt)
        {
            return str2int(tmpNum);
        }

        if (strLen(tmpNum) != strLen(tmpTxt))
        {
            throw error(strFmt("@SYS25062", tmpNum, tmpTxt));
        }

        while (x)
        {
            x = strFind(tmpTxt, #SymbolNumerals, 999, -999);

            if (!x)
            {
                return str2int(newTxt);
            }

            newTxt = subStr(tmpNum, x, 1) + newTxt;
            tmpTxt = strDel(tmpTxt, x, 1);
        }

        return str2int(newTxt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmCampaignIdLastSon</Name>
				<Source><![CDATA[
    public static smmCampaignId smmCampaignIdLastSon(smmCampaignId _smmCampaignId)
    {
        return (select reverse CampaignId from smmCampaignTable order by CampaignId where smmCampaignTable.CampaignParentId == _smmCampaignId).CampaignId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferCampaignTargetsToCallList</Name>
				<Source><![CDATA[
    public static boolean transferCampaignTargetsToCallList(smmCampaignTable _smmCampaignTable)
    {
        smmCampaignTable        smmCampaignTable;
        smmTMCallListGroup      newCallListGroup;
        smmTMCallListTable      smmTMCallListTable;
        smmCampaignSelection    smmCampaignSelection;
        NumberSequenceTable     numberSequenceTableNum;
        Dialog                  dialog;
        DialogField             dialogCallListId;
        boolean                 done = false;
        smmTMCallListID         callListId;

        // Find the number sequence for call lists
        numberSequenceTableNum = NumberSequenceTable::find(smmParameters::numRefCallListId().NumberSequenceId);

        // Is the number sequence set to manual?
        if (numberSequenceTableNum.Manual)
        {
            dialog = new Dialog();

            dialogCallListId = dialog.addField(identifierStr(String), "@SYS79892", '', true);

            // Keep showing dialog box until user presses cancel or a valid call list id is found
            while (!done && dialog.run())
            {
                if (dialogCallListId.value() != '' && !smmTMCallListGroup::find(dialogCallListId.value()))
                {
                    done = true;

                    callListId = dialogCallListId.value();
                }
                else
                {
                    // The call list id is already used
                    info("@SYS89033");

                    dialog = new Dialog();
                    dialogCallListId = dialog.addField(identifierStr(str), "@SYS79892");
                }
            }

            if (!callListId)
            {
                // Call list not created
                return checkFailed("@SYS89032");
            }
        }
        else
        {
            // Get new id number for call list
             callListId = smmParameters::getNumber(smmNumbSeqUsed::CallListId);
        }

        ttsbegin;

        // Initialize new call list
        newCallListGroup.initValue();

        // Set call list id
        newCallListGroup.CallListID = callListId;

        // Use campaign name as the call list description
        newCallListGroup.Description      = _smmCampaignTable.CampaignName;

        // Use the same questionnaire on the call list as on the campaign
        newCallListGroup.kmCollectionId   = _smmCampaignTable.kmCollectionId;

        // Set call list creation date to todays date
        newCallListGroup.CreateDate       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        // Call list will default run in the same period as the campaign
        newCallListGroup.FromDateTime     = DateTimeUtil::newDateTime(_smmCampaignTable.CampaignDate, 0, DateTimeUtil::getUserPreferredTimeZone());
        newCallListGroup.ToDateTime       = DateTimeUtil::newDateTime(_smmCampaignTable.CampaignEndDate, 0, DateTimeUtil::getUserPreferredTimeZone());

        // Call list will default have the same responsible as the campaign
        newCallListGroup.RespWorker      = _smmCampaignTable.CampaignRespWorker;

        // Create the new call list
        if (newCallListGroup.validateWrite(true))
        {
            newCallListGroup.insert();
        }

        while select forupdate smmCampaignSelection where smmCampaignSelection.CampaignId == _smmCampaignTable.CampaignId
        {
            // Initialize the new call record
            smmTMCallListTable.clear();

            // Set call list id
            smmTMCallListTable.CallListId               = newCallListGroup.CallListID;

            // Use the same target on the call list as on the campaign
            smmTMCallListTable.Party                  = smmCampaignSelection.Party;
            smmTMCallListTable.ContactPersonId        = smmCampaignSelection.ContactPersonId;

            // Use campaign start date as default planned date on the call list targets
            smmTMCallListTable.CallPlannedDateTime    = DateTimeUtil::newDateTime(_smmCampaignTable.CampaignDate, 0, DateTimeUtil::getUserPreferredTimeZone());

            // Employee responsible for the call is set to the responsible employee from the campaign
            smmTMCallListTable.CallRespWorker         = smmCampaignSelection.FollowUpRespWorker;

            // Call status is set to open
            smmTMCallListTable.CallStatus               = smmTMCallStatus::Open;

            // Create the new call in the call list
            if (smmTMCallListTable.validateWrite(true))
            {
                smmTMCallListTable.insert();
            }

            // Mark and update the campaign target for broadcast as call list
            smmCampaignSelection.BroadcastType = smmCampaignBroadcastType::CallList;
            if (smmCampaignSelection.validateWrite(true))
            {
                smmCampaignSelection.update();
            }
        }

        // Select the campaign for update
        smmCampaignTable = smmCampaignTable::find(_smmCampaignTable.CampaignId, true);

        // Set call list id on the campaign
        smmCampaignTable.tmCallListID   = newCallListGroup.CallListID;

        // Update the campaign to status response
        smmCampaignTable.CampaignStatus = smmCampaignStatus::Response;
        smmCampaignTable.update();

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>traverseCampaigns</Name>
				<Source><![CDATA[
    public static void traverseCampaigns(smmCampaignId _node, smmCampaignStatus _status, smmCampaignReasonId _reason, NoYes _closed)
    {
        smmCampaignTable    smmCampaignTable;

        ttsbegin;

        while select forupdate smmCampaignTable
            where smmCampaignTable.CampaignParentId == _node &&
                  smmCampaignTable.CampaignStatus   != smmCampaignStatus::Cancelled &&
                  smmCampaignTable.CampaignStatus   != smmCampaignStatus::Closed
        {
            smmCampaignTable::traverseCampaigns(smmCampaignTable.CampaignId, _status, _reason, _closed);

            smmCampaignTable.CampaignStatus     = _status;
            smmCampaignTable.CampaignReasonId   = _reason;
            smmCampaignTable.CampaignClosed     = _closed;

            smmCampaignTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static Description txtNotExist()
    {
        // Campaign '%1' does not exist
        return "@SYS80531";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCampaignStatusField</Name>
				<Source><![CDATA[
    public static void updateCampaignStatusField(smmCampaignId _smmCampaignId, smmCampaignStatus _smmCampaignStatus)
    {
        smmCampaignTable    localSmmCampaignTable;

        ttsbegin;

        localSmmCampaignTable                   = smmCampaignTable::find(_smmCampaignId, true);
        localSmmCampaignTable.CampaignStatus    = _smmCampaignStatus;

        if (_smmCampaignStatus == smmCampaignStatus::Cancelled || _smmCampaignStatus == smmCampaignStatus::Closed)
        {
            localSmmCampaignTable.CampaignClosed = NoYes::Yes;
        }
        else
        {
            localSmmCampaignTable.CampaignClosed = NoYes::No;
        }

        localSmmCampaignTable.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCampaignTable</Name>
				<Source><![CDATA[
    public static void updateCampaignTable(smmCampaignId _campaignId, smmCampaignReasonId _reasonId)
    {
        smmCampaignTable    smmCampaignTableUpdate;

        ttsbegin;

        smmCampaignTableUpdate = smmCampaignTable::find(_campaignId, true);

        smmCampaignTableUpdate.CampaignReasonId         = _reasonId;
        smmCampaignTableUpdate.CampaignStatus           = smmCampaignStatus::Cancelled;
        smmCampaignTableUpdate.CampaignEndDate          = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        smmCampaignTableUpdate.CampaignClosed           = NoYes::Yes;

        if (smmCampaignTableUpdate.validateWrite())
        {
            smmCampaignTableUpdate.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SmmMA</ConfigurationKey>
	<DeveloperDocumentation>@SYS124809</DeveloperDocumentation>
	<FormRef>smmcampaigntable</FormRef>
	<Label>@SYS79879</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CampaignId</TitleField1>
	<TitleField2>CampaignName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>CampaignIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>CampaignIdx</PrimaryIndex>
	<ReplacementKey>CampaignIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RetailCampaignDiscount</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCampaignDiscount</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>smmCampaignQuery</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmCampaignQuery</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>smmCampaignQueryExpression</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmCampaignQueryExpression</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>smmCampaignSelection</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>smmCampaignSelection</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>smmLeadRelTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmLeadRelTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>smmOpportunityRelTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmOpportunityRelTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>smmResponsibilitiesEmplTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmResponsibilitiesEmplTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>smmTMCallListTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>smmTMCallListTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignEndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignRespWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Attention</Name>
			<Label>@SYS1593</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignAttention</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Campaign</Name>
			<Label>@SYS80187</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignRespWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignParentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Mask</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignTargetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KMCollectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRSourceID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TAMPromotionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CampaignDates</Name>
			<Label>@SYS80504</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignFollowUpDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CampaignInformation</Name>
			<Label>@SYS80368</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignParentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjFatherId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CampaignListMoreInfo</Name>
			<Label>@SYS110470</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignParentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignRespWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignFollowUpDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignComment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CampaignTarget</Name>
			<Label>@SYS79902</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignTarget</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignTargetGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EmailBroadcastingTemplate</Name>
			<Label>@SYS37940</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmailBroadcastName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmailBroadcastSubject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmailBroadcastText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPMiniPage</Name>
			<Label>@SYS108232</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignRespWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPMiniSinglePage</Name>
			<Label>@SYS108232</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignTarget</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KMCollectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignFollowUpDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignRespWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS80392</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignParentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignTargetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KMCollectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TMCallListID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRAll</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TAMPromotionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRSourceID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignClosed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjJournalNameId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignFollowUpActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Answered</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS316631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TMCallListID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KMCollectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Mask</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignReasonId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverviewGeneral</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignParentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignTargetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverviewGeneralAdministration</Name>
			<Label>@SYS40777</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignReasonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignRespWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverviewGeneralDates</Name>
			<Label>@SYS80293</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignFollowUpDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverviewGeneralOthers</Name>
			<Label>@ApplicationPlatform:SingleSpace</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TMCallListID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KMCollectionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS80304</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjFatherId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignProjectJournalType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Questionnaire</Name>
			<Label>@SYS80302</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>KMCollectionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReasonGroup</Name>
			<Label>@SYS80340</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignReasonId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS80127</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SubCampaign</Name>
			<Label>@SYS80502</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignParentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Mask</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Summary</Name>
			<Label>@SYS81105</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignComment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Target</Name>
			<Label>@SYS79855</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignOverruleDM</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignBusRelWithoutContacts</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Label>@SYS80304</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Answered</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignResponded</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CampaignAttention</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignAttention</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CampaignBusRelWithoutContacts</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignBusRelWithoutContacts</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CampaignClosed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignClosed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CampaignComment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CampaignDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CampaignEndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignEndDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CampaignFollowUpActivity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignActivityFollowUp</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CampaignFollowUpDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignFollowUpDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CampaignGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CampaignId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CampaignName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CampaignOverruleDM</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignOverruleDM</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CampaignParentId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignParentId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CampaignProjectJournalType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>smmCampaignProjectJournalType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CampaignReasonId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignReasonId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CampaignRespWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CrmWorkerRecId</ExtendedDataType>
			<Label>@SYS80923</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CampaignStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>smmCampaignStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CampaignTarget</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignTarget</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CampaignTargetGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignTargetGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CampaignTargetId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignTargetId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CampaignTypeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignTypeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>RetailMemo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmailBroadcastName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignBroadcastName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmailBroadcastSubject</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignBroadcastSubject</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmailBroadcastText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignBroadcastText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KMCollectionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KMCollectionId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Mask</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceFormat</ExtendedDataType>
			<Label>@SYS81642</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRSourceID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRSourceID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProcessName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignProcess</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjFatherId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjParentId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjJournalNameId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjJournalNameId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TAMPromotionID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMPromotionID</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TMCallListID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmTMCallListID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CrmWorkerRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CampaignName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CampaignEndDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmWorkerIdx1</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CampaignRespWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CampaignIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CampaignId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Enabled>No</Enabled>
			<Fields>
				<AxTableIndexField>
					<DataField>CampaignParentId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CampaignId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjectIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CallListIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TMCallListID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MCRSourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MCRSourceID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CamaignRespWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_1_smmCampaignTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CampaignRespWorker</Name>
					<Field>CampaignRespWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Hierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Hierarchy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcessName</Name>
					<Field>ProcessName</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsActive_Extern</Name>
					<RelatedField>IsActive</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsTemplate_Extern</Name>
					<RelatedField>IsTemplate</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>HierarchyType_Extern</Name>
					<RelatedField>HierarchyType</RelatedField>
					<ValueStr>HierarchyType::Campaign</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KMCollection</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>KMCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>KMCollection</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmCampaignTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KMCollectionId</Name>
					<SourceEDT>KMCollectionId</SourceEDT>
					<Field>KMCollectionId</Field>
					<RelatedField>kmCollectionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>IdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRSourceCodeSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRSourceCodeSetup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRSourceID</Name>
					<SourceEDT>MCRSourceID</SourceEDT>
					<Field>MCRSourceID</Field>
					<RelatedField>SourceID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ParentProject</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ParentProject</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmCampaignTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjFatherId</Name>
					<SourceEDT>ProjParentId</SourceEDT>
					<Field>ProjFatherId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Project</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Project</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmCampaignTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjJournalName</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjJournalName</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjJournalName</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmCampaignTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjJournalNameId</Name>
					<SourceEDT>ProjJournalNameId</SourceEDT>
					<Field>ProjJournalNameId</Field>
					<RelatedField>JournalNameId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmActivities</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmCampaignTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CampaignFollowUpActivity</Name>
					<SourceEDT>smmCampaignActivityFollowUp</SourceEDT>
					<Field>CampaignFollowUpActivity</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmCampaignEmailTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmCampaignEmailTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmCampaignEmailTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmCampaignTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EmailBroadcastName</Name>
					<SourceEDT>smmCampaignBroadcastName</SourceEDT>
					<Field>EmailBroadcastName</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmCampaignGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmCampaignGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmCampaignGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmCampaignTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CampaignGroupId</Name>
					<SourceEDT>smmCampaignGroupId</SourceEDT>
					<Field>CampaignGroupId</Field>
					<RelatedField>CampaignGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CampaignGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmCampaignReasonGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmCampaignReasonGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmCampaignReasonGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmCampaignTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CampaignReasonId</Name>
					<SourceEDT>smmCampaignReasonId</SourceEDT>
					<Field>CampaignReasonId</Field>
					<RelatedField>ReasonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ReasonIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmCampaignTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmCampaignTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmCampaignTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmCampaignTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CampaignParentId</Name>
					<SourceEDT>smmCampaignParentId</SourceEDT>
					<Field>CampaignParentId</Field>
					<RelatedField>CampaignId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CampaignIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmCampaignTargetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmCampaignTargetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmCampaignTargetTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmCampaignTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CampaignTargetId</Name>
					<SourceEDT>smmCampaignTargetId</SourceEDT>
					<Field>CampaignTargetId</Field>
					<RelatedField>TargetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TargetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmCampaignTypeGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmCampaignTypeGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmCampaignTypeGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmCampaignTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CampaignTypeId</Name>
					<SourceEDT>smmCampaignTypeId</SourceEDT>
					<Field>CampaignTypeId</Field>
					<RelatedField>CampaignTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CampaignTypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmTMCallListGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmTMCallListGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmTMCallListGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmCampaignTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TMCallListID</Name>
					<SourceEDT>smmTMCallListID</SourceEDT>
					<Field>TMCallListID</Field>
					<RelatedField>CallListID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CallListdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Worker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_smmCampaignTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>