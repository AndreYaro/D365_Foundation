<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099CF_SFParticipatingStateCodes</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Tax1099CF_SFParticipatingStateCodes extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByStateRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a Tax1099CF_SF entry with a given StateRecId
    /// </summary>
    /// <param name = "_stateRecId">The StateRecId of the desired record</param>
    /// <param name = "_forUpdate">Whether to open the resulting record for update</param>
    /// <returns>A Tax1099CF_SFParticipatingStateCodes record</returns>
    public static Tax1099CF_SFParticipatingStateCodes findByStateRecId(RecId _stateRecId, boolean _forUpdate = false)
    {
        LogisticsAddressState state;
        Tax1099CF_SFParticipatingStateCodes resultingRecord;

        resultingRecord.selectForUpdate(_forUpdate);

        select firstonly resultingRecord
            where resultingRecord.StateRecId == _stateRecId;

        return resultingRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByStateAbbreviation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a Tax1099CF_SF entry with a given state abbreviation
    /// </summary>
    /// <param name = "_stateRecId">The state abbreviation of the desired record</param>
    /// <param name = "_forUpdate">Whether to open the resulting record for update</param>
    /// <returns>A Tax1099CF_SFParticipatingStateCodes record</returns>
    public static Tax1099CF_SFParticipatingStateCodes findByStateAbbreviation(LogisticsAddressStateId _stateAbbreviation, boolean _forUpdate = false)
    {
        LogisticsAddressState state;
        Tax1099CF_SFParticipatingStateCodes resultingRecord;

        resultingRecord.selectForUpdate(_forUpdate);

        select firstonly resultingRecord
            join state
            where resultingRecord.StateRecId == state.RecId
                && state.StateId == _stateAbbreviation;

        return resultingRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfStateIsCombinedFiler</Name>
				<Source><![CDATA[
    public static boolean checkIfStateIsCombinedFiler(LogisticsAddressStateId _stateAbbreviation)
    {
        Tax1099CF_SFParticipatingStateCodes localCombinedFilingEntry = Tax1099CF_SFParticipatingStateCodes::findByStateAbbreviation(_stateAbbreviation);
        return localCombinedFilingEntry && localCombinedFilingEntry.IsCombinedFiling == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByStateTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a Tax1099CF_SF entry with a given IRS State Tax Code
    /// </summary>
    /// <param name = "_stateRecId">The IRS State Tax Code of the desired record</param>
    /// <param name = "_forUpdate">Whether to open the resulting record for update</param>
    /// <returns>A Tax1099CF_SFParticipatingStateCodes record</returns>
    public static Tax1099CF_SFParticipatingStateCodes findByStateTaxCode(Tax1099CFCode _stateTaxCode, boolean _forUpdate = false)
    {
        Tax1099CF_SFParticipatingStateCodes resultingRecord;

        resultingRecord.selectForUpdate(_forUpdate);

        select firstonly resultingRecord
            where resultingRecord.StateTaxCode == _stateTaxCode;

        return resultingRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for these cases:
    ///     If one or more entries in the table have an IRS State Tax Code of '0'
    ///     If two entries have the same StateRecId
    /// </summary>
    /// <returns>boolean determining whether write is valid</returns>
    public boolean validateWrite()
    {
        boolean isValid = super();

        if (!this.StateRecId)
        {
            isValid = checkFailed("@AccountsPayable:Tax1099CFNoName");
        }

        //Check for any entries with an IRS State Tax Code of '0'
        //Due to individual field validation, this can only occur if a new record is added and the IRS State Tax Code is not modified
        Tax1099CF_SFParticipatingStateCodes entry = Tax1099CF_SFParticipatingStateCodes::findByStateTaxCode(0);

        if (entry || this.StateTaxCode == 0)
        {
            isValid = checkFailed("@AccountsPayable:Tax1099CFEntriesWithZero");
        }

        //Check if active record has been modified to have the same StateRecId as another entry but with a different IRS State Tax Code
        entry = Tax1099CF_SFParticipatingStateCodes::findByStateRecId(this.StateRecId);

        if (entry && entry.StateTaxCode != this.StateTaxCode)
        {
            LogisticsAddressState duplicateState = LogisticsAddressState::findRecId(entry.StateRecId);

            isValid = checkFailed(strFmt("@AccountsPayable:Tax1099CFSameNameAbbreviationExists", duplicateState.Name, duplicateState.StateId));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for these cases:
    ///     If user has entered '0' for the IRS State Tax Code
    ///     If a record already exists with the same IRS State Tax code
    /// </summary>
    /// <returns>boolean determining whether field modification is allowed</returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            if (_fieldIdToCheck == fieldNum(Tax1099CF_SFParticipatingStateCodes, StateTaxCode))
            {
                if (this.StateTaxCode == 0)
                {
                    isValid = checkFailed("@AccountsPayable:Tax1099CFZeroIRSCode");
                }
                else
                {
                    Tax1099CF_SFParticipatingStateCodes entry = Tax1099CF_SFParticipatingStateCodes::findByStateTaxCode(this.StateTaxCode);

                    //If a record exists in the table with the same TaxCode but isn't the same record
                    if (entry != null && entry.StateRecId != this.StateRecId)
                    {
                        LogisticsAddressStatename nameOfState = LogisticsAddressState::findRecId(entry.StateRecId).Name;
                        isValid = checkFailed(strFmt("@AccountsPayable:Tax1099CFExistingIRSStateCode", this.StateTaxCode, nameOfState));
                    }
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.IsCombinedFiling = NoYes::Yes; //records are set for combined filing by default
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>US</CountryRegionCodes>
	<Modules>AccountsPayable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StateTaxCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>StateTaxCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<ExtendedDataType>Tax1099CFCode</ExtendedDataType>
			<FieldUpdate>Relative</FieldUpdate>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>StateRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<ExtendedDataType>Tax1099StateRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCombinedFiling</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<CountryRegionCodes>US</CountryRegionCodes>
			<ExtendedDataType>Tax1099CombinedFilingStatus</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>StateTaxCode</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>StateTaxCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StateRecId</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>StateRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressState</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>StateRecId</RelatedTableRole>
			<Role>Tax1099CF_SFParticipatingStateCodes</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StateRecId</Name>
					<Field>StateRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>