<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNettingRuleAgreement</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendNettingRuleAgreement extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>removeAllForRule</Name>
				<Source><![CDATA[
    internal static void removeAllForRule(Name _ruleName)
    {
        CustVendNettingRuleAgreement ruleAgreement;
        delete_from ruleAgreement
            where ruleAgreement.RuleName == _ruleName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForRule</Name>
				<Source><![CDATA[
    internal static boolean existForRule(Name _ruleName)
    {
        CustVendNettingRuleAgreement ruleAgreement;
        select firstonly RecId from ruleAgreement
            where ruleAgreement.RuleName == _ruleName;
        return ruleAgreement.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countForRule</Name>
				<Source><![CDATA[
    internal static int countForRule(Name _ruleName)
    {
        CustVendNettingRuleAgreement ruleAgreement;
        select count(RecId) from ruleAgreement
            where ruleAgreement.RuleName == _ruleName;
        return int642int(ruleAgreement.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanPriorityFragments</Name>
				<Source><![CDATA[
    internal static void cleanPriorityFragments(Name _ruleName)
    {
        int priority = 0;
        CustVendNettingRuleAgreement ruleAgreement;
        ttsbegin;
        while select forupdate ruleAgreement
            order by ruleAgreement.AgreementPriority asc
            where ruleAgreement.RuleName == _ruleName
        {
            priority += 1;
            if (ruleAgreement.AgreementPriority != priority)
            {
                ruleAgreement.AgreementPriority = priority;
                ruleAgreement.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAgreementName</Name>
				<Source><![CDATA[
    internal static void updateAgreementName(CustVendNettingAgreementName _originName, CustVendNettingAgreementName _newName)
    {
        ttsbegin;
        CustVendNettingRuleAgreement ruleAgreement;
        update_recordset ruleAgreement
            setting AgreementName = _newName
            where ruleAgreement.AgreementName == _originName;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePriority</Name>
				<Source><![CDATA[
    private void initializePriority()
    {
        CustVendNettingRuleAgreement ruleAgreement;
        select maxof(AgreementPriority) from ruleAgreement
            where ruleAgreement.RuleName == this.RuleName;

        this.AgreementPriority = ruleAgreement.AgreementPriority + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromRule</Name>
				<Source><![CDATA[
    internal void initializeFromRule(Name _ruleName)
    {
        this.RuleName = _ruleName;
        this.initializePriority();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementStatus</Name>
				<Source><![CDATA[
    internal display str getAgreementStatus()
    {
        CustVendNettingAgreement agreement;
        select firstonly AgreementStatus, RecId from agreement
             where agreement.Name == this.AgreementName;
        return agreement.RecId ? enum2Str(agreement.AgreementStatus) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousAgreement</Name>
				<Source><![CDATA[
    internal CustVendNettingRuleAgreement previousAgreement()
    {
        CustVendNettingRuleAgreement other;
        select forupdate firstonly other
            order by AgreementPriority desc
            where other.RuleName == this.RuleName
                && other.AgreementPriority < this.AgreementPriority;
        return other;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextAgreement</Name>
				<Source><![CDATA[
    internal CustVendNettingRuleAgreement nextAgreement()
    {
        CustVendNettingRuleAgreement other;
        select forupdate firstonly other
            order by AgreementPriority asc
            where other.RuleName == this.RuleName
                && other.AgreementPriority > this.AgreementPriority;
        return other;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUp</Name>
				<Source><![CDATA[
    internal void moveUp()
    {
        this.swapPriority(this.previousAgreement());
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDown</Name>
				<Source><![CDATA[
    internal void moveDown()
    {
        this.swapPriority(this.nextAgreement());
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapPriority</Name>
				<Source><![CDATA[
    private void swapPriority(CustVendNettingRuleAgreement _other)
    {
        if (!_other.RecId)
        {
            return;
        }
        ttsbegin;
        int otherPriority = _other.AgreementPriority;

        _other.AgreementPriority = this.AgreementPriority;
        _other.update();

        this.AgreementPriority = otherPriority;
        if (this.RecId)
        {
            this.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgreementName</Name>
			<ExtendedDataType>CustVendNettingAgreementName</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@CashManagement:Agreement</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AgreementPriority</Name>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RuleName</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RuleNameAgreementNameIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>RuleName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AgreementName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustVendNettingRule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustVendNettingRule</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RuleName</Name>
					<Field>RuleName</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustVendNettingAgreement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustVendNettingAgreement</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementName</Name>
					<Field>AgreementName</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>