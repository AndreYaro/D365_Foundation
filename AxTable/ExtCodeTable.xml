<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ExtCodeTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ExtCodeTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.ExtCodeCodeAlias = this.ExtCodeCode;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.ExtCodeCodeAlias = this.ExtCodeCode;

        super();

        EcoResProductEntityIdentifierCode::updateExternalReferenceCode(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>barCode2PrimaryKeyNotExists</Name>
				<Source><![CDATA[
    static str barCode2PrimaryKeyNotExists(TableId _tableId, anytype _primaryKey, anytype _foreignKey)
    {
        switch (_tableId)
        {
            case tableNum(InventTable):
                return strFmt("@SYS72727", _primaryKey, _foreignKey);

            default:
                throw error(strFmt("@SYS59540",tableId2name(_tableId),tableId2name(tableNum(InventItemBarcode))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(TableId    _extCodeTableId,
                         ExtCodeId  _extCodeId)
    {
        return _extCodeId && (select firstonly RecId from extCodeTable
                                   where extCodeTable.ExtCodeTableId    == _extCodeTableId  &&
                                         extCodeTable.ExtCodeId         == _extCodeId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalItemId2PrimaryKeyNotExists</Name>
				<Source><![CDATA[
    static str externalItemId2PrimaryKeyNotExists(TableId _tableId, anytype _primaryKey, anytype _foreignKey)
    {
        switch (_tableId)
        {
            case tableNum(CustTable):
                return strFmt("@SYS72728", _primaryKey, _foreignKey);

            case tableNum(VendTable):
                return strFmt("@SYS72729", _primaryKey, _foreignKey);

            default:
                throw error(strFmt("@SYS59540",tableId2name(_tableId),tableId2name(tableNum(ExtCodeTable))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static ExtCodeTable find(TableId    _extCodeTableId,
                             ExtCodeId  _extCodeId,
                             boolean    _forUpdate = false)
    {
        ExtCodeTable extCodeTable;

        if (_extCodeId)
        {
            extCodeTable.selectForUpdate(_forUpdate);

            select firstonly extCodeTable
                where extCodeTable.ExtCodeTableId   == _extCodeTableId  &&
                      extCodeTable.ExtCodeId        == _extCodeId;
        }
        return extCodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationBarCode</Name>
				<Source><![CDATA[
    static Common findRelationBarCode(TableId _tableId, anytype _primaryKey, anytype _foreignKey)
    {
        switch (_tableId)
        {
            case tableNum(InventTable):
                InventItemBarcode inventItemBarcode = InventItemBarcode::findBarcode(_primaryKey, false, false, _foreignKey);
                if (inventItemBarcode.inventDim().InventDimId != InventDim::inventDimIdBlank())
                {
                    return InventDimCombination::findByInventDim(inventItemBarcode.ItemId, inventItemBarcode.inventDim());
                }
                return InventTable::find(inventItemBarcode.ItemId);

            default:
                throw error(strFmt("@SYS59540",tableId2name(_tableId),tableId2name(tableNum(ExtCodeTable))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationBarCode2PrimaryKey</Name>
				<Source><![CDATA[
    static anytype findRelationBarCode2PrimaryKey(TableId _tableId, anytype _primaryKey, anytype _foreignKey)
    {
        return ExtCodeTable::relationPrimaryKey(ExtCodeTable::findRelationBarCode(_tableId, _primaryKey, _foreignKey));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationExternalItemId</Name>
				<Source><![CDATA[
    static Common findRelationExternalItemId(TableId _tableId, anytype _primaryKey, anytype _foreignKey)
    {
        ModuleInventCustVend    moduleInventCustVend;

        switch (_tableId)
        {
            case tableNum(CustTable):
                moduleInventCustVend = ModuleInventCustVend::Cust;
                break;

            case tableNum(VendTable):
                moduleInventCustVend = ModuleInventCustVend::Vend;
                break;

            default:
                throw error(strFmt("@SYS59540",tableId2name(_tableId),tableId2name(tableNum(ExtCodeTable))));
        }

        return ExtCodeTable::findRelationPrimaryKey(tableNum(InventTable), InventTable::findExternalItemId(moduleInventCustVend, _foreignKey, _primaryKey));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationExternalItemId2PrimaryKey</Name>
				<Source><![CDATA[
    static anytype findRelationExternalItemId2PrimaryKey(TableId _tableId, anytype _primaryKey, anytype _foreignKey)
    {
        return ExtCodeTable::relationPrimaryKey(ExtCodeTable::findRelationExternalItemId(_tableId, _primaryKey, _foreignKey));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationISOCode</Name>
				<Source><![CDATA[
    static Common findRelationISOCode(TableId _tableId, anytype _ISOCode)
    {
        switch (_tableId)
        {
            case tableNum(Currency):
                return Currency::findCurrencyCodeISO(_ISOCode);

            default:
                throw error(strFmt("@SYS59540",tableId2name(_tableId),tableId2name(tableNum(ExtCodeTable))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationISOCode2PrimaryKey</Name>
				<Source><![CDATA[
    static anytype findRelationISOCode2PrimaryKey(TableId _tableId, anytype _ISOCode)
    {
        return ExtCodeTable::relationPrimaryKey(ExtCodeTable::findRelationISOCode(_tableId, _ISOCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationPrimaryKeyDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for finding the relation between the <c>ExtCodeTable</c> and the specified table using the primary key. 
    /// </summary>
    /// <param name = "_tableId">The id of the table to find its relation to <c>ExtCodeTable</c></param>
    /// <param name = "_primaryKey">The value used to determine the record of the related table</param>
    /// <param name = "_result">A <c>EventHandlerResult</c> object where the record of the related table can be returned.</param>
    static delegate void findRelationPrimaryKeyDelegate(
        TableId             _tableId, 
        anytype             _primaryKey, 
        EventHandlerResult  _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationPrimaryKey</Name>
				<Source><![CDATA[
    public static Common findRelationPrimaryKey(TableId _tableId, anytype _primaryKey)
    {
        switch (_tableId)
        {
            case tableNum(Currency):
                return Currency::find(_primaryKey);

            case tableNum(CustTable):
                return CustTable::find(_primaryKey);

            case tableNum(DimensionAttributeValue):
                return DimensionAttributeValue::find(_primaryKey);

            case tableNum(DlvMode):
                return DlvMode::find(_primaryKey);

            case tableNum(DlvTerm):
                return DlvTerm::find(_primaryKey);

            case tableNum(VendTable):
                return VendTable::find(_primaryKey);

            case tableNum(UnitOfMeasure):
                return UnitOfMeasure::findBySymbol(_primaryKey);

            case tableNum(LogisticsAddressZipCode):
                return LogisticsAddressZipCode::find(_primaryKey);

            case tableNum(LogisticsAddressCounty):
                return LogisticsAddressCounty::find(conPeek(_primaryKey, 1), conPeek(_primaryKey, 2), conPeek(_primaryKey, 3));

            case tableNum(LogisticsAddressState):
                return LogisticsAddressState::find(conPeek(_primaryKey, 1), conPeek(_primaryKey, 2));

            case tableNum(LogisticsAddressCountryRegion):
                return LogisticsAddressCountryRegion::find(_primaryKey);

            case tableNum(InventTable):
                if (typeOf(_primaryKey) == Types::Container)
                {
                    InventDim inventDim = conPeek(_primaryKey, 2);
                    if (inventDim.InventDimId != InventDim::inventDimIdBlank())
                    {
                        return InventDimCombination::findByInventDim(conPeek(_primaryKey, 1), inventDim);
                    }
                    return InventTable::find(conPeek(_primaryKey, 1));
                }
                else
                {
                    return InventTable::find(_primaryKey);
                }

            case tableNum(MarkupTable):
                return MarkupTable::find(conPeek(_primaryKey, 1), conPeek(_primaryKey, 2));

            case tableNum(InventLocation):
                return InventLocation::find(_primaryKey);

            case tableNum(ReturnDispositionCode):
                return ReturnDispositionCode::find(_primaryKey);

            case tableNum(ReturnReasonCode):
                return ReturnReasonCode::find(_primaryKey);

            case tableNum(TaxTable):
                return TaxTable::find(_primaryKey);

            case tableNum(AgreementClassification):
                if (typeOf(_primaryKey) == Types::Container)
                {
                    RelationType relationType = conPeek(_primaryKey,2);
                    if (relationType == tableNum(SalesAgreementHeader))
                    {
                        return AgreementClassification::findSalesClassification(conPeek(_primaryKey,1));
                    }
                    else
                    {
                        return AgreementClassification::findPurchClassification(conPeek(_primaryKey,1));
                    }
                }
                else
                {
                    return AgreementClassification::findPurchClassification(_primaryKey);
                }

            case tableNum(InventProfile_RU):
                return InventProfile_RU::find(_primaryKey);

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                ExtCodeTable::findRelationPrimaryKeyDelegate(_tableId, _primaryKey, result);
                
                if (result.hasResult())
                {
                    return result.result();
                }

                throw error(strFmt("@SYS59540",tableId2name(_tableId),tableId2name(tableNum(ExtCodeTable))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationPrimaryKey2BarCode</Name>
				<Source><![CDATA[
    static anytype findRelationPrimaryKey2BarCode(TableId _tableId, anytype _primaryKey, anytype _foreignKey)
    {
        return ExtCodeTable::relationBarCode(ExtCodeTable::findRelationPrimaryKey(_tableId, _primaryKey), _foreignKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationPrimaryKey2ExternalItemId</Name>
				<Source><![CDATA[
    static anytype findRelationPrimaryKey2ExternalItemId(TableId _tableId, anytype _primaryKey, anytype _foreignKey)
    {
        return ExtCodeTable::relationExternalItemId(ExtCodeTable::findRelationPrimaryKey(_tableId, _foreignKey), _primaryKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationPrimaryKey2ISOCode</Name>
				<Source><![CDATA[
    static anytype findRelationPrimaryKey2ISOCode(TableId _tableId, anytype _primaryKey)
    {
        return ExtCodeTable::relationISOCode(ExtCodeTable::findRelationPrimaryKey(_tableId, _primaryKey));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationPrimaryKey2PrimaryKey</Name>
				<Source><![CDATA[
    static anytype findRelationPrimaryKey2PrimaryKey(TableId _tableId, anytype _primaryKey)
    {
        return ExtCodeTable::relationPrimaryKey(ExtCodeTable::findRelationPrimaryKey(_tableId, _primaryKey));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationPrimaryKey2Value</Name>
				<Source><![CDATA[
    static ExtCodeValueAlias findRelationPrimaryKey2Value(TableId _tableId, anytype _primaryKey, ExtCodeId _extCodeId)
    {
        Common common = ExtCodeTable::findRelationPrimaryKey(_tableId, _primaryKey);

        return ExtCodeValueTable::find(common.TableId, common.RecId, _extCodeId).ExtCodeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationPrimaryKey2YourKey</Name>
				<Source><![CDATA[
    static anytype findRelationPrimaryKey2YourKey(TableId _tableId, anytype _foreignKey)
    {
        return ExtCodeTable::relationYourKey(ExtCodeTable::findRelationPrimaryKey(_tableId, _foreignKey));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationRecIdDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for finding the relation between the <c>ExtCodeTable</c> and the specified table using the RecId.
    /// </summary>
    /// <param name = "_tableId">The id of the table to find its relation to <c>ExtCodeTable</c></param>
    /// <param name = "_recId">The RecId used to determine the record of the related table</param>
    /// <param name = "_result">A <c>EventHandlerResult</c> object where the record of the related table can be returned.</param>
    static delegate void findRelationRecIdDelegate(
        TableId             _tableId, 
        RecId               _recId, 
        EventHandlerResult  _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationRecId</Name>
				<Source><![CDATA[
    public static Common findRelationRecId(TableId _tableId, RecId _recId)
    {
        switch (_tableId)
        {
            case tableNum(Currency):
                Currency currency;

                select firstonly currency
                    where currency.RecId == _recId;

                return currency;

            case tableNum(CustTable):
                return CustTable::findRecId(_recId);

            case tableNum(DimensionAttributeValue):
                return DimensionAttributeValue::find(_recId);

            case tableNum(DlvMode):
                return DlvMode::findRecId(_recId);

            case tableNum(DlvTerm):
                return DlvTerm::findRecId(_recId);

            case tableNum(VendTable):
                return VendTable::findRecId(_recId);

            case tableNum(UnitOfMeasure):
                return UnitOfMeasure::find(_recId);

            case tableNum(LogisticsAddressZipCode):
                return LogisticsAddressZipCode::findRecId(_recId);

            case tableNum(LogisticsAddressCounty):
                return LogisticsAddressCounty::findRecId(_recId);

            case tableNum(LogisticsAddressState):
                return LogisticsAddressState::findRecId(_recId);

            case tableNum(LogisticsAddressCountryRegion):
                return LogisticsAddressCountryRegion::findRecId(_recId);

            case tableNum(InventTable):
                return InventTable::findRecId(_recId);

            case tableNum(InventDimCombination):
                return InventDimCombination::findRecId(_recId);

            case tableNum(MarkupTable):
                return MarkupTable::findRecId(_recId);

            case tableNum(InventLocation):
                return InventLocation::findRecId(_recId);

            case tableNum(ReturnDispositionCode):
                return ReturnDispositionCode::findRecId(_recId);

            case tableNum(ReturnReasonCode):
                return ReturnReasonCode::findRecId(_recId);

            case tableNum(TaxTable):
                return TaxTable::findRecId(_recId);

            case tableNum(AgreementClassification):
                return AgreementClassification::find(_recId);

            case tableNum(InventProfile_RU):
                return InventProfile_RU::findRecId(_recId);

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                ExtCodeTable::findRelationRecIdDelegate(_tableId, _recId, result);
                
                if (result.hasResult())
                {
                    return result.result();
                }

                throw error(strFmt("@SYS59540",tableId2name(_tableId),tableId2name(tableNum(ExtCodeTable))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationRecId2PrimaryKey</Name>
				<Source><![CDATA[
    static anytype findRelationRecId2PrimaryKey(TableId _tableId, RecId _recId)
    {
        return ExtCodeTable::relationPrimaryKey(ExtCodeTable::findRelationRecId(_tableId, _recId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationYourKey</Name>
				<Source><![CDATA[
    static Common findRelationYourKey(TableId _tableId, anytype _primaryKey, anytype _yourKey)
    {
        switch (_tableId)
        {
            case tableNum(CustTable):
                CustTable custTable;
                if (_yourKey && _primaryKey)
                {
                    custTable = CustTable::find(_primaryKey);

                    if (custTable.OurAccountNum != _yourKey)
                    {
                        custTable = null;
                    }
                }
                return custTable;

            case tableNum(VendTable):
                VendTable vendTable;
                if (_yourKey && _primaryKey)
                {
                    vendTable = VendTable::find(_primaryKey);

                    if (vendTable.YourAccountNum != _yourKey)
                    {
                        vendTable = null;
                    }
                }
                return vendTable;

            default:
                throw error(strFmt("@SYS59540",tableId2name(_tableId),tableId2name(tableNum(ExtCodeTable))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelationYourKey2PrimaryKey</Name>
				<Source><![CDATA[
    static anytype findRelationYourKey2PrimaryKey(TableId _tableId, anytype _primaryKey, anytype _yourKey)
    {
        return ExtCodeTable::relationPrimaryKey(ExtCodeTable::findRelationYourKey(_tableId, _primaryKey, _yourKey));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findValueAlias2RelationPrimaryKey</Name>
				<Source><![CDATA[
    static anytype findValueAlias2RelationPrimaryKey(TableId            _tableId,
                                                     ExtCodeSubModule   _extCodeSubModule,
                                                     ExtCodeValueAlias  _extCodeValueAlias,
                                                     ExtCodeId          _extCodeId)
    {
        ExtCodeValueTable extCodeValueTable = ExtCodeValueTable::findValue(_tableId, _extCodeSubModule, _extCodeId, _extCodeValueAlias);

        return ExtCodeTable::findRelationRecId2PrimaryKey(extCodeValueTable.ExtCodeRelationTableId ? extCodeValueTable.ExtCodeRelationTableId : _tableId, extCodeValueTable.ExtCodeRelationRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isoCode2PrimaryKeyNotExists</Name>
				<Source><![CDATA[
    static str isoCode2PrimaryKeyNotExists(TableId _tableId, anytype _ISOCode)
    {
        switch (_tableId)
        {
            case tableNum(Currency):
                return strFmt("@SYS72730", _ISOCode);

            default:
                throw error(strFmt("@SYS59540",tableId2name(_tableId),tableId2name(tableNum(ExtCodeTable))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryKey2BarCodeNotExists</Name>
				<Source><![CDATA[
    static str primaryKey2BarCodeNotExists(TableId _tableId, anytype _primaryKey, anytype _foreignKey)
    {
        switch (_tableId)
        {
            case tableNum(InventTable):
                return strFmt("@SYS72731", conPeek(_primaryKey, 1), _foreignKey);

            default:
                throw error(strFmt("@SYS59540",tableId2name(_tableId),tableId2name(tableNum(InventItemBarcode))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryKey2ExternalItemIdNotExists</Name>
				<Source><![CDATA[
    static str primaryKey2ExternalItemIdNotExists(TableId _tableId, anytype _primaryKey, anytype _foreignKey)
    {
        switch (_tableId)
        {
            case tableNum(CustTable):
                return strFmt("@SYS72733", conPeek(_primaryKey, 1), _foreignKey);

            case tableNum(VendTable):
                return strFmt("@SYS72732", conPeek(_primaryKey, 1), _foreignKey);

            default:
                throw error(strFmt("@SYS59540",tableId2name(_tableId),tableId2name(tableNum(ExtCodeTable))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryKey2ISOCodeNotExists</Name>
				<Source><![CDATA[
    static str primaryKey2ISOCodeNotExists(TableId _tableId, anytype _primaryKey)
    {
        switch (_tableId)
        {
            case tableNum(Currency):
                return strFmt("@SYS72734", _primaryKey);

            default:
                throw error(strFmt("@SYS59540",tableId2name(_tableId),tableId2name(tableNum(ExtCodeTable))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryKey2PrimaryKeyNotExistsDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for determining the error message when the primary key to primary key relation doesn't exist
    /// </summary>
    /// <param name = "_tableId">The id of the table to find its relation to <c>ExtCodeTable</c></param>
    /// <param name = "_primaryKey">The primary key used to determine the record of the related table</param>
    /// <param name = "_result">A <c>EventHandlerResult</c> object where the error message can be returned.</param>
    static delegate void primaryKey2PrimaryKeyNotExistsDelegate(
        TableId             _tableId, 
        anytype             _primaryKey, 
        EventHandlerResult  _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryKey2PrimaryKeyNotExists</Name>
				<Source><![CDATA[
    public static str primaryKey2PrimaryKeyNotExists(TableId _tableId, anytype _primaryKey)
    {
        switch (_tableId)
        {
            case tableNum(Currency):
                return strFmt(Currency::txtNotExist(), _primaryKey);

            case tableNum(CustTable):
                return strFmt(CustTable::txtNotExist(), _primaryKey);

            case tableNum(DimensionAttributeValue):
                return strFmt(DimensionAttributeValue::txtNotExist(), _primaryKey);

            case tableNum(DlvMode):
                return strFmt(DlvMode::txtNotExist(), _primaryKey);

            case tableNum(DlvTerm):
                return strFmt(DlvTerm::txtNotExist(), _primaryKey);

            case tableNum(VendTable):
                return strFmt(VendTable::txtNotExist(), _primaryKey);

            case tableNum(UnitOfMeasure):
                return strFmt("@SYS4108", _primaryKey);

            case tableNum(LogisticsAddressZipCode):
                return strFmt(LogisticsAddressZipCode::txtNotExist(),_primaryKey);

            case tableNum(LogisticsAddressCounty):
                return strFmt(LogisticsAddressCounty::txtNotExist(), conPeek(_primaryKey, 3));

            case tableNum(LogisticsAddressState):
                return strFmt(LogisticsAddressState::txtNotExist(), conPeek(_primaryKey, 2));

            case tableNum(LogisticsAddressCountryRegion):
                return strFmt(LogisticsAddressCountryRegion::txtNotExist(), _primaryKey);

            case tableNum(InventTable):
                if (typeOf(_primaryKey) == Types::Container)
                {
                    ItemId     itemId = conPeek(_primaryKey, 1);
                    InventDim  inventDim = conPeek(_primaryKey, 2);
                    if (inventDim.InventDimId != InventDim::inventDimIdBlank())
                    {
                        return strFmt(InventDimCombination::txtNotExist(), inventDim.preFixProductDim(EcoResProductDimGroupSetup::newItemId(itemId)), itemId);
                    }
                    return strFmt(InventTable::txtNotExist(), conPeek(_primaryKey, 1));
                }
                else {
                    return strFmt(InventTable::txtNotExist(), _primaryKey);
                }

            case tableNum(MarkupTable):
                return strFmt(MarkupTable::txtNotExist(), conPeek(_primaryKey, 2));

            case tableNum(InventLocation):
                return strFmt(InventLocation::txtNotExist(), _primaryKey);

            case tableNum(ReturnDispositionCode):
                return strFmt(ReturnDispositionCode::txtNotExist(), _primaryKey);

            case tableNum(ReturnReasonCode):
                return strFmt(ReturnReasonCode::txtNotExist(), _primaryKey);

            case tableNum(TaxTable):
                return strFmt(TaxTable::txtNotExist(), _primaryKey);

            case tableNum(AgreementClassification):
                return strFmt(AgreementClassification::txtNotExist(), _primaryKey);

            case tableNum(InventProfile_RU):
                return strFmt(InventProfile_RU::txtNotExist(), _primaryKey);

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                ExtCodeTable::primaryKey2PrimaryKeyNotExistsDelegate(_tableId, _primaryKey, result);
                
                if (result.hasResult())
                {
                    return result.result();
                }

                throw error(strFmt("@SYS59540",tableId2name(_tableId),tableId2name(tableNum(ExtCodeTable))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryKey2ValueAliasNotExistsDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for determining the error message when the primary key to value alias for a specific code relation doesn't exist
    /// </summary>
    /// <param name = "_tableId">The id of the table to find its relation to <c>ExtCodeTable</c></param>
    /// <param name = "_primaryKey">The primary key used to determine the record of the related table</param>
    /// <param name = "_extCodeId">ExtCodeIdAn <c>ExtCodeId</c> object</param>
    /// <param name = "_result">A <c>EventHandlerResult</c> object where the error message can be returned.</param>
    static delegate void primaryKey2ValueAliasNotExistsDelegate(
        TableId             _tableId, 
        anytype             _primaryKey, 
        ExtCodeId           _extCodeId, 
        EventHandlerResult  _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryKey2ValueAliasNotExists</Name>
				<Source><![CDATA[
    public static str primaryKey2ValueAliasNotExists(TableId _tableId, anytype _primaryKey, ExtCodeId _extCodeId)
    {
        switch (_tableId)
        {
            case tableNum(Currency):
                return strFmt("@SYS72736", _primaryKey, _extCodeId);

            case tableNum(CustTable):
                return strFmt("@SYS72737", _primaryKey, _extCodeId);

            case tableNum(DimensionAttributeValue):
                return strFmt("@SYS333408", _primaryKey, _extCodeId);

            case tableNum(DlvMode):
                return strFmt("@SYS72738", _primaryKey, _extCodeId);

            case tableNum(DlvTerm):
                return strFmt("@SYS72739", _primaryKey, _extCodeId);

            case tableNum(VendTable):
                return strFmt("@SYS72740", _primaryKey, _extCodeId);

            case tableNum(UnitOfMeasure):
                return strFmt("@SYS72741", _primaryKey, _extCodeId);

            case tableNum(LogisticsAddressZipCode):
                return strFmt("@SYS72743", _primaryKey, _extCodeId);

            case tableNum(LogisticsAddressCounty):
                return strFmt("@SYS72744", conPeek(_primaryKey, 3), _extCodeId);

            case tableNum(LogisticsAddressState):
                return strFmt("@SYS72745", conPeek(_primaryKey, 2), _extCodeId);

            case tableNum(LogisticsAddressCountryRegion):
                return strFmt("@SYS72746", _primaryKey, _extCodeId);

            case tableNum(InventProfile_RU):
                return strFmt("@GLS221824", _primaryKey, _extCodeId);

            case tableNum(InventTable):
                if (typeOf(_primaryKey) == Types::Container)
                {
                    ItemId     itemId    = conPeek(_primaryKey, 1);
                    InventDim  inventDim = conPeek(_primaryKey, 2);
                    if (inventDim.InventDimId != InventDim::inventDimIdBlank())
                    {
                        return strFmt("@SYS72747", inventDim.preFixProductDim(EcoResProductDimGroupSetup::newItemId(itemId)), conPeek(_primaryKey, 1), _extCodeId);
                    }
                    return strFmt("@SYS72748", itemId, _extCodeId);
                }
                else
                {
                    return strFmt("@SYS72748", _primaryKey, _extCodeId);
                }

            case tableNum(MarkupTable):
                return strFmt("@SYS72749", conPeek(_primaryKey, 2), _extCodeId);

            case tableNum(InventLocation):
                return strFmt("@SYS93750", _primaryKey, _extCodeId);

            case tableNum(ReturnDispositionCode):
                return strFmt("@SYS120336", _primaryKey, _extCodeId);

            case tableNum(ReturnReasonCode):
                return strFmt("@SYS120337", _primaryKey, _extCodeId);

            case tableNum(TaxTable):
                return strFmt("@SYS313636", _primaryKey, _extCodeId);

            case tableNum(AgreementClassification):
                if (typeOf(_primaryKey) == Types::Container)
                {
                    return strFmt("@SYS332511", conPeek(_primaryKey, 1), _extCodeId);
                }
                else
                {
                    return strFmt("@SYS332511", _primaryKey, _extCodeId);
                }

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                ExtCodeTable::primaryKey2ValueAliasNotExistsDelegate(_tableId, _primaryKey, _extCodeId, result);
                
                if (result.hasResult())
                {
                    return result.result();
                }

                throw error(strFmt("@SYS59540",tableId2name(_tableId),tableId2name(tableNum(ExtCodeTable))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryKey2YourKeyNotExists</Name>
				<Source><![CDATA[
    static str primaryKey2YourKeyNotExists(TableId _tableId, anytype _foreignKey)
    {
        switch (_tableId)
        {
            case tableNum(CustTable):
                return strFmt("@SYS72750", _foreignKey);

            case tableNum(VendTable):
                return strFmt("@SYS72751", _foreignKey);

            default:
                throw error(strFmt("@SYS59540",tableId2name(_tableId),tableId2name(tableNum(ExtCodeTable))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relationBarCode</Name>
				<Source><![CDATA[
    static anytype relationBarCode(Common _common, anytype _foreignKey)
    {
        InventItemBarcode inventItemBarcode;

        switch (_common.TableId)
        {
            case tableNum(InventTable):
                InventTable inventTable = _common as InventTable;
                inventItemBarcode = InventItemBarcode::findItem(inventTable.ItemId, InventDim::inventDimIdBlank(), false, false, _foreignKey);
                return inventItemBarcode.ItemBarCode;

            case tableNum(InventDimCombination):
                InventDimCombination inventDimCombination = _common as InventDimCombination;
                InventDim            inventDim            = inventDimCombination.inventDim();
                inventItemBarcode = InventItemBarcode::findByProductDimensions(inventDimCombination.ItemId, inventDim, false, false, _foreignKey);
                return inventItemBarcode.ItemBarCode;

            default:
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relationExternalItemId</Name>
				<Source><![CDATA[
    static anytype relationExternalItemId(Common _common, anytype _primaryKey)
    {
        CustVendAC              custVendAccount;
        ModuleInventCustVend    moduleInventCustVend;

        switch (_common.TableId)
        {
            case tableNum(CustTable):
                CustTable custTable  = _common as CustTable;
                custVendAccount      = custTable.AccountNum;
                moduleInventCustVend = ModuleInventCustVend::Cust;
                break;

            case tableNum(VendTable):
                VendTable vendTable  = _common as VendTable;
                custVendAccount      = vendTable.AccountNum;
                moduleInventCustVend = ModuleInventCustVend::Vend;
                break;
        }

        Common common = ExtCodeTable::findRelationPrimaryKey(tableNum(InventTable), _primaryKey);

        switch (common.TableId)
        {
            case tableNum(InventTable):
                InventTable inventTable = common as InventTable;
                return inventTable.externalItemId(moduleInventCustVend, custVendAccount);

            case tableNum(InventDimCombination):
                InventDimCombination inventDimCombination = common as InventDimCombination;
                return inventDimCombination.externalItemId(moduleInventCustVend, custVendAccount);

            default:
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relationISOCode</Name>
				<Source><![CDATA[
    static anytype relationISOCode(Common _common)
    {
        switch (_common.TableId)
        {
            case tableNum(Currency):
                Currency currency = _common as Currency;
                return Currency::currencyCodeISO(currency.CurrencyCode);

            default:
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relationPrimaryKey</Name>
				<Source><![CDATA[
    static anytype relationPrimaryKey(Common _common)
    {
        switch (_common.TableId)
        {
            case tableNum(Currency):
                Currency currency = _common as Currency;
                return currency.CurrencyCode;

            case tableNum(CustTable):
                CustTable custTable = _common as CustTable;
                return custTable.AccountNum;

            case tableNum(DimensionAttributeValue):
                DimensionAttributeValue dimAttrValue = _common as DimensionAttributeValue;
                return dimAttrValue.RecId;

            case tableNum(DlvMode):
                DlvMode dlvMode = _common as DlvMode;
                return dlvMode.Code;

            case tableNum(DlvTerm):
                DlvTerm dlvTerm = _common as DlvTerm;
                return dlvTerm.Code;

            case tableNum(VendTable):
                VendTable vendTable = _common as VendTable;
                return vendTable.AccountNum;

            case tableNum(UnitOfMeasure):
                UnitOfMeasure unitOfMeasure = _common as UnitOfMeasure;
                return unitOfMeasure.Symbol;

            case tableNum(LogisticsAddressZipCode):
                LogisticsAddressZipCode zipCodeLogistics = _common as LogisticsAddressZipCode;
                return zipCodeLogistics.ZipCode;

            case tableNum(LogisticsAddressCounty):
                LogisticsAddressCounty countyLogistics = _common as LogisticsAddressCounty;
                return countyLogistics.CountyId;

            case tableNum(LogisticsAddressState):
                LogisticsAddressState stateLogistics = _common as LogisticsAddressState;
                return stateLogistics.StateId;

            case tableNum(LogisticsAddressCountryRegion):
                LogisticsAddressCountryRegion countryRegionLogistics = _common as LogisticsAddressCountryRegion;
                return countryRegionLogistics.CountryRegionId;

            case tableNum(InventTable):
                InventTable inventTable = _common as InventTable;
                return inventTable.ItemId;

            case tableNum(InventDimCombination):
                InventDimCombination inventDimCombination = _common as InventDimCombination;
                InventDim inventDim   = inventDimCombination.inventDim();
                return [inventDimCombination.ItemId, inventDim];

            case tableNum(MarkupTable):
                MarkupTable markupTable = _common as MarkupTable;
                return [markupTable.ModuleType, markupTable.MarkupCode];

            case tableNum(InventLocation):
                InventLocation inventLocation = _common as InventLocation;
                return inventLocation.InventLocationId;

            case tableNum(ReturnDispositionCode):
                ReturnDispositionCode returnDispositionCode = _common as ReturnDispositionCode;
                return returnDispositionCode.DispositionCodeId;

            case tableNum(ReturnReasonCode):
                ReturnReasonCode returnReasonCode = _common as ReturnReasonCode;
                return returnReasonCode.ReasonCodeId;

            case tableNum(TaxTable):
                TaxTable taxTable = _common as TaxTable;
                return taxTable.TaxCode;
            // <GEERU>
            case tableNum(InventProfile_RU):
                InventProfile_RU inventProfile = _common;
                return inventProfile.InventProfileId;
            // </GEERU>
            case tableNum(AgreementClassification):
                AgreementClassification agreementClassification = _common as AgreementClassification;
                return [agreementClassification.Name, agreementClassification.RelationType];

            default:
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relationYourKey</Name>
				<Source><![CDATA[
    static anytype relationYourKey(Common _common)
    {
        CustTable   custTable;
        VendTable   vendTable;

        switch (_common.TableId)
        {
            case tableNum(CustTable):
                custTable = _common as CustTable;
                return custTable.OurAccountNum;

            case tableNum(VendTable):
                vendTable = _common as VendTable;
                return vendTable.YourAccountNum;

            default:
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueAlias2PrimaryKeyNotExistsDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for determining the error message when the value alias to primary key for a specific code relation doesn't exist
    /// </summary>
    /// <param name = "_tableId">The id of the table to find its relation to <c>ExtCodeTable</c></param>
    /// <param name = "_extCodeValueAlias">An <c>ExtCodeValueAlias</c> object</param>
    /// <param name = "_extCodeId">ExtCodeIdAn <c>ExtCodeId</c> object</param>
    /// <param name = "_result">A <c>EventHandlerResult</c> object where the error message can be returned.</param>
    static delegate void valueAlias2PrimaryKeyNotExistsDelegate(
        TableId             _tableId, 
        ExtCodeValueAlias   _extCodeValueAlias, 
        ExtCodeId           _extCodeId, 
        EventHandlerResult  _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueAlias2PrimaryKeyNotExists</Name>
				<Source><![CDATA[
    public static str valueAlias2PrimaryKeyNotExists(TableId _tableId, ExtCodeValueAlias _extCodeValueAlias, ExtCodeId _extCodeId)
    {
        switch (_tableId)
        {
            case tableNum(Currency):
                return strFmt("@SYS72752", _extCodeValueAlias, _extCodeId);

            case tableNum(CustTable):
                return strFmt("@SYS72753", _extCodeValueAlias, _extCodeId);

            case tableNum(DimensionAttributeValue):
                return strFmt("@SYS333409", _extCodeValueAlias, _extCodeId);

            case tableNum(DlvMode):
                return strFmt("@SYS72754", _extCodeValueAlias, _extCodeId);

            case tableNum(DlvTerm):
                return strFmt("@SYS72755", _extCodeValueAlias, _extCodeId);

            case tableNum(VendTable):
                return strFmt("@SYS72756", _extCodeValueAlias, _extCodeId);

            case tableNum(UnitOfMeasure):
                return strFmt("@SYS72757", _extCodeValueAlias, _extCodeId);

            case tableNum(LogisticsAddressZipCode):
                return strFmt("@SYS72759", _extCodeValueAlias, _extCodeId);

            case tableNum(LogisticsAddressCounty):
                return strFmt("@SYS72760", _extCodeValueAlias, _extCodeId);

            case tableNum(LogisticsAddressState):
                return strFmt("@SYS72761", _extCodeValueAlias, _extCodeId);

            case tableNum(LogisticsAddressCountryRegion):
                return strFmt("@SYS72762", _extCodeValueAlias, _extCodeId);

            case tableNum(InventTable):
                return strFmt("@SYS72763", _extCodeValueAlias, _extCodeId);

            case tableNum(MarkupTable):
                return strFmt("@SYS72764", _extCodeValueAlias, _extCodeId);

            case tableNum(InventLocation):
                return strFmt("@SYS93752", _extCodeValueAlias, _extCodeId);

            case tableNum(ReturnDispositionCode):
                return strFmt("@SYS120339", _extCodeValueAlias, _extCodeId);

            case tableNum(ReturnReasonCode):
                return strFmt("@SYS120340", _extCodeValueAlias, _extCodeId);

            case tableNum(TaxTable):
                return strFmt("@SYS313637", _extCodeValueAlias, _extCodeId);

            case tableNum(AgreementClassification        ):
                return strFmt("@SYS332510", _extCodeValueAlias, _extCodeId);

            case tableNum(InventProfile_RU):
                return strFmt("@GLS221826", _extCodeValueAlias, _extCodeId);

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                ExtCodeTable::valueAlias2PrimaryKeyNotExistsDelegate(_tableId, _extCodeValueAlias, _extCodeId, result);
                
                if (result.hasResult())
                {
                    return result.result();
                }

                throw error(strFmt("@SYS59540",tableId2name(_tableId),tableId2name(tableNum(ExtCodeTable))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>yourKey2PrimaryKeyNotExists</Name>
				<Source><![CDATA[
    static str yourKey2PrimaryKeyNotExists(TableId _tableId, anytype _primaryKey, anytype _yourKey)
    {
        switch (_tableId)
        {
            case tableNum(CustTable):
                return strFmt("@SYS72765", _yourKey, _primaryKey);

            case tableNum(VendTable):
                return strFmt("@SYS72766", _yourKey, _primaryKey);

            default:
                throw error(strFmt("@SYS59540",tableId2name(_tableId),tableId2name(tableNum(ExtCodeTable))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductEntityIdentifierCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>EcoResProductEntityIdentifierCode</c> record which is related to the current record.
    /// </summary>
    /// <returns>The created <c>EcoResProductEntityIdentifierCode</c> record.</returns>
    public EcoResProductEntityIdentifierCode createProductEntityIdentifierCode()
    {
        return EcoResProductEntityIdentifierCode::create(
                                            this.ExtCodeId,
                                            EcoResProductEntityIdentifierCodeType::ExternalReference,
                                            this.ExtCodeCode,
                                            this.ExtCodeDescription,
                                            this.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS124537</DeveloperDocumentation>
	<FormRef>ExtCodeTable</FormRef>
	<Label>@SYS72039</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ExtCodeId</TitleField1>
	<TitleField2>ExtCodeCode</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ExtCodeIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>ExtCodeIdx</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ExtCodeValueTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ExtCodeValueTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResProductEntityIdentifierCode</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExtCodeTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExtCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExtCodeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExtCodeDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Alias</Name>
			<Label>@SYS26936</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExtCodeCodeAlias</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExternalCode</Name>
			<Label>@SYS72039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExtCodeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExtCodeDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExtCodeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExtCodeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExtCodeCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExtCodeCodeAlias</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExtCodeCodeAlias</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExtCodeDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExtCodeDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExtCodeId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExtCodeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ExtCodeTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StandardCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS72723</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ExtCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ExtCodeTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ExtCodeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>AgreementClassification</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AgreementClassification</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Currency</Name>
			<RelatedTable>Currency</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<RelatedTable>CustTable</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DimensionAttributeValue</Name>
			<RelatedTable>DimensionAttributeValue</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DlvMode</Name>
			<RelatedTable>DlvMode</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DlvTerm</Name>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDimCombination</Name>
			<RelatedTable>InventDimCombination</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventLocation</Name>
			<RelatedTable>InventLocation</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventProfile</Name>
			<RelatedTable>InventProfile_RU</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<RelatedTable>InventTable</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsCountryRegion</Name>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsCounty</Name>
			<RelatedTable>LogisticsAddressCounty</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsState</Name>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsZipCode</Name>
			<RelatedTable>LogisticsAddressZipCode</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MarkupTable</Name>
			<RelatedTable>MarkupTable</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReturnDispositionCode</Name>
			<RelatedTable>ReturnDispositionCode</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReturnReasonCode</Name>
			<RelatedTable>ReturnReasonCode</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxTable</Name>
			<RelatedTable>TaxTable</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<RelatedTable>VendTable</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTableId</Name>
					<Field>ExtCodeTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>