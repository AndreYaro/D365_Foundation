<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAutomationStrategyLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustAutomationStrategyLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    [Hookable(False)]
    public boolean validateWrite()
    {
        if (!this.ParentRecId)
        {
            return checkFailed("@SYS342695");
        }

        boolean ret = super();
   
        ret = ret && this.validateStateOfLine();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActionTypeActivity</Name>
				<Source><![CDATA[
    private boolean validateActionTypeActivity()
    {
        boolean ret = true;
        CustAutomationActivityTemplate custAutomationActivityTemplate;

        if (this.ActionType == CustAutomationActionType::Activity)
        {
            select count(RecId) from custAutomationActivityTemplate;

            //Adding this check to ignore the validation to enable customer to create first activity template 
            if (custAutomationActivityTemplate.RecId)
            {
                if (this.Recipient != CustAutomationRecipient::None || this.BusinessPurposeContact != '' || this.BusinessDocument == '')
                {
                    return checkFailed("@CustAutomation:BusinessDocumentValidation");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActionTypeEmail</Name>
				<Source><![CDATA[
    private boolean validateActionTypeEmail()
    {
        boolean ret = true;
        SysEmailSystemTable sysEmailSystemTable;

        if (this.ActionType == CustAutomationActionType::Email)
        {
            select count(RecId) from sysEmailSystemTable;

            //Adding this check to ignore the validation to enable customer to create first email template
            if (sysEmailSystemTable.RecId)
            {
                if (this.BusinessDocument == '')
                {
                    return checkFailed("@CustAutomation:BusinessDocumentValidationForEmail");
                }

                if (this.Recipient == CustAutomationRecipient::None)
                {
                    return checkFailed("@CustAutomation:RecipientValidation");
                }

                if (this.BusinessPurposeContact == '')
                {
                    return checkFailed("@CustAutomation:BusinessPurposeContactValidation");
                }           
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActionTypeLetter</Name>
				<Source><![CDATA[
    private boolean validateActionTypeLetter()
    {
        boolean ret = true;

        if (this.ActionType == CustAutomationActionType::CollectionLetter)
        {
            if (this.Recipient != CustAutomationRecipient::None || this.BusinessPurposeContact != '' )
            {
                return false;           
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStateOfLine</Name>
				<Source><![CDATA[
    private boolean validateStateOfLine()
    {
        boolean ret;

        ret = this.validateActionTypeActivity();

        ret = ret && this.validateActionTypeLetter();

        ret = ret && this.validateActionTypeEmail();

        ret = ret && this.validatePredunning();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePredunning</Name>
				<Source><![CDATA[
    private boolean validatePredunning()
    {
        if (this.Predunning == NoYes::No)
        {
            return true;
        }

        CustAutomationStrategyLine strategyLine;

        select firstonly strategyLine
            where strategyLine.ParentRecId == this.ParentRecId
                && strategyLine.Predunning == NoYes::Yes
                && strategyLine.RecId != this.RecId;

        if (strategyLine.RecId)
        {
            return checkFailed("@CustAutomation:PredunningPerProcessValidation");
        }

        if (!this.isActionTypeValidForPredunning())
        {
            return checkFailed(strFmt("@CustAutomation:PredunningActionTypeValidation", this.ActionType));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActionTypeValidForPredunning</Name>
				<Source><![CDATA[
    private boolean isActionTypeValidForPredunning()
    {
        boolean ret = false;

        if (this.ActionType == CustAutomationActionType::Activity
            || this.ActionType == CustAutomationActionType::Email)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapStepUp</Name>
				<Source><![CDATA[
    internal void swapStepUp()
    {
        CustAutomationStrategyLine strategyLine;

        select firstonly forupdate * from strategyLine
            order by Days desc
            where strategyLine.Days < this.Days
                && strategyLine.ParentRecId == this.ParentRecId;

        if (strategyLine.RecId)
        {
            this.swapSteps(strategyLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapStepDown</Name>
				<Source><![CDATA[
    internal void swapStepDown()
    {
        CustAutomationStrategyLine strategyLine;

        select firstonly forupdate * from strategyLine
            order by Days asc
            where strategyLine.Days > this.Days
                && strategyLine.ParentRecId == this.ParentRecId;

        if (strategyLine.RecId)
        {
            this.swapSteps(strategyLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapSteps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given a <c>CustAutomationStrategyLine</c> swap the days values with the current <c>CustAutomationStrategyLine</c>.
    /// </summary>
    /// <param name = "_strategyLine">The <c>CustAutomationStrategyLine</c> to swap days with.</param>
    private void swapSteps(CustAutomationStrategyLine _strategyLine)
    {
        if (_strategyLine.When != this.When)
        {
            CustAutomationWhenRelationDueDate line1When = _strategyLine.When;
            _strategyLine.When = this.When;
            this.When = line1When;
        }

        CustAutomationDays line1Days = _strategyLine.Days;
        _strategyLine.Days = this.Days;
        this.Days = line1Days;

        ttsbegin;

        _strategyLine.update();
        this.selectForUpdate(NoYes::Yes);
        this.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    [Hookable(False)]
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case (fieldNum(CustAutomationStrategyLine, ActionType)) :
                this.modifyActionType();
                break;
            case (fieldNum(CustAutomationStrategyLine, Days)) :
                this.changeWhenToBeforeDueDate();
                this.setDaysForBeforeAndAfterDueDate();
                break;
            case (fieldNum(CustAutomationStrategyLine, When)) :
                this.setDaysForBeforeAndAfterDueDate();
                break;
            case (fieldNum(CustAutomationStrategyLine, Recipient)) :
                this.resetBusinessPurposeContactOnRecipientChange();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMaxDayByStrategy</Name>
				<Source><![CDATA[
    internal static CustAutomationDays findMaxDayByStrategy(RefRecId _parentRecId)
    {
        CustAutomationStrategyLine strategyLine;

        select maxOf(Days) from strategyLine 
            where strategyLine.ParentRecId == _parentRecId;
 
        return strategyLine.Days;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDaysForBeforeAndAfterDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifying the when field on the table requires a sign change. Zero day values do not require calculations for sign changes.
    /// </summary>
    private void setDaysForBeforeAndAfterDueDate()
    {
        if ((this.When == CustAutomationWhenRelationDueDate::BeforeDueDate && this.Days > 0)
            || (this.When == CustAutomationWhenRelationDueDate::AfterDueDate && this.Days < 0))
        {
            this.Days = this.Days * -1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeWhenToBeforeDueDate</Name>
				<Source><![CDATA[
    private void changeWhenToBeforeDueDate()
    {
        if (this.Days < 0)
        {
            this.When = CustAutomationWhenRelationDueDate::BeforeDueDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyActionType</Name>
				<Source><![CDATA[
    private void modifyActionType()
    {
        this.setBusinessDocumentFromActionType();
        this.setRecipientFromActionType();
        this.setBusinessPurposeContact();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusinessDocumentFromActionType</Name>
				<Source><![CDATA[
    private void setBusinessDocumentFromActionType()
    {
        if (this.ActionType == CustAutomationActionType::CollectionLetter)
        {
            this.BusinessDocument = strFmt('%1', CustCollectionLetterCode::CollectionPerCust);
        }
        else if(this.ActionType == CustAutomationActionType::Activity)
        {
            CustAutomationActivityTemplate custAutomationActivityTemplate;

            select count(RecId) from custAutomationActivityTemplate;

            //Assigning a default activity template to BusinessDocument to skip adding one for creating new template 
            if (custAutomationActivityTemplate.RecId)
            {
                select firstonly TemplateName from custAutomationActivityTemplate;

                this.BusinessDocument = custAutomationActivityTemplate.TemplateName;
            }    
            else
            {
                this.BusinessDocument = '';  
            }
        }
        else if (this.ActionType == CustAutomationActionType::Email)
        {
            SysEmailSystemTable sysEmailSystemTable;

            select count(RecId) from sysEmailSystemTable;

            //Assigning a default email template to BusinessDocument to skip adding one for creating new email template
            if (sysEmailSystemTable.RecId)
            {
                select firstonly EmailId from sysEmailSystemTable;

                this.BusinessDocument = sysEmailSystemTable.EmailId;
            }
            else
            {
                this.BusinessDocument = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetBusinessPurposeContactOnRecipientChange</Name>
				<Source><![CDATA[
    private void resetBusinessPurposeContactOnRecipientChange()
    {
        if (this.ActionType == CustAutomationActionType::Email)
        {
            this.BusinessPurposeContact = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecipientFromActionType</Name>
				<Source><![CDATA[
    private void setRecipientFromActionType()
    {
        if (this.ActionType == CustAutomationActionType::Activity
            || this.ActionType == CustAutomationActionType::CollectionLetter)
        {
            this.Recipient = CustAutomationRecipient::None;
        }
        else if (this.ActionType == CustAutomationActionType::Email)
        {
            this.Recipient = CustAutomationRecipient::Customer;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusinessPurposeContact</Name>
				<Source><![CDATA[
    private void setBusinessPurposeContact()
    {
        if (this.ActionType == CustAutomationActionType::Activity
            || this.ActionType == CustAutomationActionType::CollectionLetter)
        {
            this.BusinessPurposeContact = '';
        }
        else if (this.ActionType == CustAutomationActionType::Email)
        {
            LogisticsLocationRole logisticsLocationRole;

            select count(RecId) from LogisticsLocationRole
                where LogisticsLocationRole.iscontactinfo == NoYes::Yes;

            //Assigning a default role to businesspurposecontact to skip adding one for creating new template
            if (logisticsLocationRole.RecId)
            {
                select firstonly Name from logisticsLocationRole
                    where LogisticsLocationRole.iscontactinfo == NoYes::Yes;

                this.BusinessPurposeContact = LogisticsLocationRole.Name;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPredunningForStrategy</Name>
				<Source><![CDATA[
    internal static CustAutomationStrategyLine findPredunningForStrategy(
        RefRecId _parentRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustAutomationStrategyLine strategyLine;
    
        strategyLine.selectForUpdate(_forupdate);
    
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            strategyLine.concurrencyModel(_concurrencyModel);
        }
    
        select firstonly * from strategyLine
            where strategyLine.ParentRecId == _parentRecId
                && strategyLine.Predunning == NoYes::Yes;

        return strategyLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@CustAutomation:CustAutomationStrategyLineDocumentation</DeveloperDocumentation>
	<Label>@CustAutomation:StrategyLine</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ActionType</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>DaysBusinessDocBusinessContactParentRecId</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>DaysBusinessDocBusinessContactParentRecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Predunning</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BusinessDocumentDetails</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusinessDocument</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BusinessPurposeContact</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ActionType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>CustAutomationActionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Days</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAutomationDays</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>When</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustAutomationWhenRelationDueDate</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Recipient</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustAutomationRecipient</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BusinessPurposeContact</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAutomationBusinessPurposeContact</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BusinessDocument</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAutomationStrategyBusinessDocument</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransactionTextLarge</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Predunning</Name>
			<AssetClassification>Customer content</AssetClassification>
			<Label>@CustAutomation:Predunning</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DaysBusinessDocBusinessContactParentRecId</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Days</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BusinessDocument</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BusinessPurposeContact</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParentRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustAutomationStrategy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustAutomationStrategy</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentRecId</Name>
					<Field>ParentRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustAutomationActivityTemplate</Name>
			<RelatedTable>CustAutomationActivityTemplate</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BusinessDocument</Name>
					<Field>BusinessDocument</Field>
					<RelatedField>TemplateName</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ActionType</Name>
					<SourceEDT>CustAutomationActionType</SourceEDT>
					<Field>ActionType</Field>
					<ValueStr>CustAutomationActionType::Activity</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SysEmailSystemTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SysEmailSystemTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BusinessDocument1</Name>
					<Field>BusinessDocument</Field>
					<RelatedField>EmailId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustAutomationActionType</Name>
					<SourceEDT>CustAutomationActionType</SourceEDT>
					<Field>ActionType</Field>
					<ValueStr>CustAutomationActionType::Email</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>