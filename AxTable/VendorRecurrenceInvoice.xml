<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendorRecurrenceInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendorRecurrenceInvoice extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayVendRecurrenceInvoiceAmount</Name>
				<Source><![CDATA[
    public display AmountCur displayVendRecurrenceInvoiceAmount (VendorRecurrenceInvoice _recurrenceInvoice)
    {
        AmountCur invoiceAmount;
        VendInvoiceJour vendInvoiceJour;
        VendTrans vendTrans;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        PurchTotals purchTotals;

        //if related pending vendor invoice is posted
        select firstonly Num from vendInvoiceInfoTable
            where vendInvoiceInfoTable.RecId == _recurrenceInvoice.VendInvoiceInfoTable
                join vendInvoiceJour
                    where vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Executed &&
                            vendInvoiceInfoTable.Num == vendInvoiceJour.InvoiceId &&
                            vendInvoiceInfoTable.SourceDocumentHeader == vendInvoiceJour.SourceDocumentHeader
                join AmountCur from vendTrans
                    where vendInvoiceJour.InvoiceAccount == vendTrans.AccountNum &&
                            vendInvoiceJour.InvoiceDate == vendTrans.TransDate &&
                            vendInvoiceJour.LedgerVoucher == vendTrans.Voucher;

        if (vendInvoiceInfoTable.Num)
        {
            invoiceAmount = abs(vendTrans.AmountCur);
        }
        else
        {
            purchTotals = VendorRecurrenceInvoice::calcVendRecurrenceInvoiceAmount(_recurrenceInvoice);

            if (purchTotals != null)
            {
                invoiceAmount = purchTotals.purchTotalAmount();
            }
        }
        return invoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendRecurrenceInvoiceTax</Name>
				<Source><![CDATA[
    public display AmountCur displayVendRecurrenceInvoiceTax (VendorRecurrenceInvoice _recurrenceInvoice)
    {
        PurchTotals purchTotals;
        AmountCur invoiceTaxAmount;

        purchTotals = VendorRecurrenceInvoice::calcVendRecurrenceInvoiceAmount(_recurrenceInvoice);

        if (purchTotals != null)
        {
            invoiceTaxAmount = purchTotals.purchTaxTotal();
        }

        return invoiceTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendRecurrenceMiscChargesAmount</Name>
				<Source><![CDATA[
    public display AmountCur displayVendRecurrenceMiscChargesAmount (VendorRecurrenceInvoice _recurrenceInvoice)
    {
        AmountCur markupAmount;
        PurchTotals purchTotals;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceJour vendInvoiceJour;

        //if related pending vendor Invoice is posted
        select firstonly Num from vendInvoiceInfoTable
             where vendInvoiceInfoTable.RecId == _recurrenceInvoice.VendInvoiceInfoTable
                    join SumMarkup from vendInvoiceJour
                        where vendInvoiceInfoTable.Num == vendInvoiceJour.InvoiceId &&
                               vendInvoiceInfoTable.SourceDocumentHeader == vendInvoiceJour.SourceDocumentHeader &&
                               vendInvoiceInfoTable.SourceDocumentLine == vendInvoiceJour.SourceDocumentLine &&
                               vendInvoiceInfoTable.OrderAccount == vendInvoiceJour.OrderAccount;

        if (VendInvoiceInfoTable.Num)
        {
            markupAmount = vendInvoiceJour.SumMarkup;
        }
        else
        {
            purchTotals = VendorRecurrenceInvoice::calcVendRecurrenceInvoiceAmount(_recurrenceInvoice);
            
            if (purchTotals != null)
            {
                markupAmount = purchTotals.purchMarkup();
            }
        }
        return markupAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVendRecurrenceInvoiceAmount</Name>
				<Source><![CDATA[
    public static PurchTotals calcVendRecurrenceInvoiceAmount (VendorRecurrenceInvoice _recurrenceInvoice)
    {
        PurchTotals purchTotals;
        VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(_recurrenceInvoice.VendInvoiceInfoTable);

        if (vendInvoiceInfoTable.RecId)
        {
            purchTotals = PurchTotals::newParmTable(vendInvoiceInfoTable, PurchUpdate::All, vendInvoiceInfoTable.ParmId, '', vendInvoiceInfoTable.Ordering);
            purchTotals.calc();
        }

        return purchTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record occurs in the <c>RecurrenceInvoice</c> table.
    /// </summary>
    /// <param name="_recurrenceInvoiceRecId">
    /// The unique ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recurrenceInvoiceRecId)
    {
        boolean ret = true;

        if (!VendorRecurrenceInvoice::exist(_recurrenceInvoiceRecId))
        {
            ret = checkFailed(strFmt (VendorRecurrenceInvoice::txtNotExist(), _recurrenceInvoiceRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>RecurrenceInvoice</c> table exists.
    /// </summary>
    /// <param name="_recurrenceInvoiceRecId">
    /// The <c>RecId</c> value of the <c>CustInvoiceTemplate</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recurrenceInvoiceRecId)
    {
        boolean found;

        found = (select firstonly RecId from vendorRecurrenceInvoice
                    where vendorRecurrenceInvoice.RecId == _recurrenceInvoiceRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RecurrenceInvoice</c> table.
    /// </summary>
    /// <param name="_recurrenceInvoiceRecId">
    /// The unique ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>RecurrenceInvoice</c> table buffer.
    /// </returns>
    public static VendorRecurrenceInvoice find(
        RecId _recurrenceInvoiceRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendorRecurrenceInvoice vendorRecurrenceInvoice;

        vendorRecurrenceInvoice.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendorRecurrenceInvoice.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendorRecurrenceInvoice
            where vendorRecurrenceInvoice.RecId == _recurrenceInvoiceRecId;

        return vendorRecurrenceInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    public static VendorRecurrenceInvoice findByVendInvoiceInfoTable(
        RecId _vendInvoiceInfoTableRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendorRecurrenceInvoice vendorRecurrenceInvoice;

        vendorRecurrenceInvoice.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendorRecurrenceInvoice.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendorRecurrenceInvoice
            where vendorRecurrenceInvoice.VendInvoiceInfoTable == _vendInvoiceInfoTableRecId;

        return vendorRecurrenceInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTotalRecurrenceInvoiceAndTaxAmount</Name>
				<Source><![CDATA[
    static public container getVendTotalRecurrenceInvoiceAndTaxAmount(RefRecId _vendRecurrenceInvoiceRecId,
                                                                    CurrencyCode _currencyCode)
    {
        PurchTotals purchTotals;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceJour vendInvoiceJour;
        VendTrans vendTrans;
        VendorRecurrenceInvoice vendorRecurrenceInvoice;
        Amount totalRecurrenceInvoiceAmount;
        Amount totalRecurrenceInvoiceTaxAmount;
        
        while select VendRecurrenceInvoiceGroup, VendInvoiceInfoTable from vendorRecurrenceInvoice
            where vendorRecurrenceInvoice.VendRecurrenceInvoice == _vendRecurrenceInvoiceRecId
            join vendInvoiceInfoTable
                where vendInvoiceInfoTable.RecId == vendorRecurrenceInvoice.VendInvoiceInfoTable
                    outer join vendInvoiceJour
                        where vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Executed &&
                                vendInvoiceInfoTable.Num == vendInvoiceJour.InvoiceId &&
                                vendInvoiceInfoTable.SourceDocumentHeader == vendInvoiceJour.SourceDocumentHeader
                    join AmountCur from vendTrans
                        where vendInvoiceJour.InvoiceAccount == vendTrans.AccountNum &&
                                vendInvoiceJour.InvoiceDate == vendTrans.TransDate &&
                                vendInvoiceJour.LedgerVoucher == vendTrans.Voucher
        {
            purchTotals = PurchTotals::newParmTable(vendInvoiceInfoTable, PurchUpdate::All, vendInvoiceInfoTable.ParmId, '', vendInvoiceInfoTable.Ordering);
            purchTotals.calc();

            if (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Executed)
            {
                totalRecurrenceInvoiceAmount += CurrencyExchangeHelper::curAmount2CurAmount(vendTrans.AmountCur, vendInvoiceInfoTable.CurrencyCode, _currencyCode);
            }
            else
            {
                totalRecurrenceInvoiceAmount += CurrencyExchangeHelper::curAmount2CurAmount(purchTotals.purchTotalAmount(), vendInvoiceInfoTable.CurrencyCode, _currencyCode);
            }
            totalRecurrenceInvoiceTaxAmount += CurrencyExchangeHelper::curAmount2CurAmount(purchTotals.purchTaxTotal(), vendInvoiceInfoTable.CurrencyCode, _currencyCode);
        }

        return [totalRecurrenceInvoiceAmount, totalRecurrenceInvoiceTaxAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecurrenceInvoiceNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recurrence amount for a <c>VendRecurrenceInvoiceGroup</c> record.
    /// </summary>
    /// <param name="_vendRecurrenceInvoiceGroupRecId">
    /// The record ID of recurrence invoice.
    /// </param>
    /// <returns>
    /// The recurrence amount for a single <c>VendRecurrenceInvoiceGroup</c> record.
    /// </returns>
    static public Counter getRecurrenceInvoiceNumOfLines(RefRecId _vendRecurrenceInvoiceGroupRecId)
    {
        VendorRecurrenceInvoice vendorRecurrenceInvoice;
        Counter numOfLines;

        numOfLines = any2int((select count(RecId) from vendorRecurrenceInvoice
                                where vendorRecurrenceInvoice.VendRecurrenceInvoiceGroup == _vendRecurrenceInvoiceGroupRecId).RecId);

        return numOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendtRecurrenceInvoiceNumOfLines</Name>
				<Source><![CDATA[
    static public Counter getVendtRecurrenceInvoiceNumOfLines(RefRecId _vendRecurrenceInvoiceGroupRecId)
    {
        VendorRecurrenceInvoice vendorRecurrenceInvoice;
        Counter numOfLines;

        numOfLines = any2int((select count(RecId) from vendorRecurrenceInvoice
                                where vendorRecurrenceInvoice.VendRecurrenceInvoiceGroup == _vendRecurrenceInvoiceGroupRecId).RecId);

        return numOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxVendRecurrenceInvoiceDate</Name>
				<Source><![CDATA[
    public static TransDate maxVendRecurrenceInvoiceDate(VendRecurrenceInvoice _vendRecurrenceInvoice)
    {
        VendorRecurrenceInvoice vendorRecurrenceInvoice;
        TransDate maxRecurrenceInvoiceDate;

        maxRecurrenceInvoiceDate =
            (select maxof(RecurrenceInvoiceDate) from vendorRecurrenceInvoice
                where vendorRecurrenceInvoice.VendRecurrenceInvoice == _vendRecurrenceInvoice.RecId).RecurrenceInvoiceDate;

        return maxRecurrenceInvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@AccountsPayable:VendorRecurrenceInvoiceTableDevDoc</DeveloperDocumentation>
	<FormRef>recurrenceInvoice</FormRef>
	<Label>@AccountsPayable:VendorRecurrenceInvoice</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>VendRecurrenceInvoice</TitleField1>
	<TitleField2>VendInvoiceInfoTable</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>AccountsReceivable</Modules>
	<ReplacementKey>RecurrenceInvoiceIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustInvoiceTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInvoiceTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayVendRecurrenceInvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayVendRecurrenceInvoiceTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayVendRecurrenceMiscChargesAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRecurrenceInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRecurrenceInvoiceGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RecurrenceInvoice</Name>
			<Label>@SYS318922</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecurrenceInvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecurrenceInvoicePeriodEndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Total</Name>
			<Label>@SYS8311</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayVendRecurrenceInvoiceTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayVendRecurrenceMiscChargesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayVendRecurrenceInvoiceAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendRecurranceInvoiceTotals</Name>
			<Label>@SYS8311</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayVendRecurrenceInvoiceTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayVendRecurrenceMiscChargesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayVendRecurrenceInvoiceAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendRecurrenceInvoice</Name>
			<Label>@SYS318922</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecurrenceInvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecurrenceInvoicePeriodEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRecurrenceInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRecurrenceInvoiceGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RecurrenceInvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS320952</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RecurrenceInvoicePeriodEndDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS50115</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceInfoTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<MinReadAccess>No</MinReadAccess>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendRecurrenceInvoice</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendRecurrenceInvoiceGroup</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RecurrenceInvoiceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendInvoiceInfoTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendRecurrenceInvoice</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendRecurrenceInvoiceGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceInfoTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceInfoTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceInfoTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoTable_RecurrenceInvoice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceInfoTable</Name>
					<Field>VendInvoiceInfoTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendRecurrenceInvoice</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendRecurrenceInvoice</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendRecurrenceInvoice</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendRecurrenceInvoice_RecurrenceInvoice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendRecurrenceInvoice</Name>
					<Field>VendRecurrenceInvoice</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendRecurrenceInvoiceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendRecurrenceInvoiceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendRecurrenceInvoiceGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendRecurrenceInvoiceGroup_RecurrenceInvoice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendRecurrenceInvoiceGroup</Name>
					<Field>VendRecurrenceInvoiceGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>