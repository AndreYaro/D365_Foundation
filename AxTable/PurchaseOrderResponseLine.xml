<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchaseOrderResponseLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchaseOrderResponseLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromPurchLineLastVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>PurchaseOrderResponseLine</c> record from the parameter record.
    /// </summary>
    /// <param name = "_purchLine">A <c>PurchLine</c> record.</param>
    public void initFromPurchLineLastVersion(PurchLine _purchLine)
    {
        PurchaseOrderResponseLineMap purchaseOrderResponseLineMap;

        purchaseOrderResponseLineMap.data(_purchLine.data());
        this.data(purchaseOrderResponseLineMap.data());
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public edit PurchLineShowItemName itemName(boolean _set, PurchLineShowItemName _itemName)
    {
        PurchLineShowItemName purchLineShowItemName;

        if (_set)
        {
            this.Name             = _itemName;
            purchLineShowItemName = _itemName;
        }
        else
        {
            if (this.ItemId)
            {
                InventTable inventTable = InventTable::find(this.ItemId);
                purchLineShowItemName   = inventTable.itemName(InventDim::find(this.InventDimId));
            }
            else
            {
                purchLineShowItemName = this.Name;
            }
        }

        return purchLineShowItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchaseOrderResponseHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>PurchaseOrderResponseHeader</c> record for the current line.
    /// </summary>
    /// <param name = "_update">If the select is for updating.</param>
    /// <returns>Selected <c>PurchaseOrderResponseHeader</c> record.</returns>
    public PurchaseOrderResponseHeader purchaseOrderResponseHeader(boolean _update = false)
    {
        PurchaseOrderResponseHeader purchaseOrderResponseHeader;

        purchaseOrderResponseHeader.selectForUpdate(_update);

        select firstonly purchaseOrderResponseHeader
                where purchaseOrderResponseHeader.RecId == this.PurchaseOrderResponseHeader;

        return purchaseOrderResponseHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromResponseLineHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>PurchaseOrderResponseLine</c> record from the parameter record.
    /// </summary>
    /// <param name = "_responseLineHistory">A <c>PurchaseOrderResponseLineHistory</c> record.</param>
    public void initFromResponseLineHistory(PurchaseOrderResponseLineHistory _responseLineHistory)
    {
        PurchaseOrderResponseLineMap responseLineMap;

        responseLineMap.data(_responseLineHistory.data());
        this.data(responseLineMap.data());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.ConfirmedDlv == dateNull())
        {
            this.ConfirmedDlv = this.DeliveryDate;
        }

        this.Delivering = this.willLineBeDelivered();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _manualUpdate = true)
    {
        PurchaseOrderResponseLine orig = this.orig();

        if ( _manualUpdate &&
            (this.purchaseOrderResponseHeader().findLatestResponseVersion().ResponseState == PurchaseOrderResponseState::Editing) &&
            (this.orig().LineState == PurchaseOrderResponseLineState::Accepted) &&
            !bufCmp(this.orig(),this))
        {
            this.LineState = PurchaseOrderResponseLineState::AcceptedWithChanges;
        }

        this.Delivering = this.willLineBeDelivered();

        super();

        if ((this.LineState == PurchaseOrderResponseLineState::SplitScheduleLine) &&
            (!this.isTmp()))
        {
            if (this.PurchQty != orig.PurchQty)
            {
                this.updateOriginalDeliveryScheduleLine();
            }

            if (this.Name != orig.Name)
            {
                this.updateNameInScheduleLines();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;

        if (this.isLineInEditNotAllowedState() && (!bufCmp(this.orig(),this)))
        {
            ret = checkFailed(strFmt("@SCM:PurchaseOrderResponseLineActionNotAllowed", "@SCM:EditAction", this.LineState));
        }

        if (ret)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        if (!this.isTmp())
        {
            return checkFailed("@SCM:PurchaseOrderResponseLineDeleteNotAllowed");
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverts the changes to the current line and sets the status to Rejected.
    /// </summary>
    public void reject()
    {
        if (this.isLineInRejectNotAllowedState())
        {
            throw error(strFmt("@SCM:PurchaseOrderResponseLineActionNotAllowed", "@SCM:RejectAction", this.LineState));
        }

        ttsbegin;
        if (!this.isLineInRevertNotAllowedState())
        {
            this.revert(false);
        }

        this.LineState = PurchaseOrderResponseLineState::Rejected;
        this.ConsumptionState = ConsumptionState::CannotBeConsumed;
        this.update(false);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverts the changes made to the current line.
    /// </summary>
    /// <param name = "_updateOnRevert">
    /// Specifies if the database udpate should be fired.
    /// </param>
    public void revert(boolean _updateOnRevert = true)
    {
        if (this.LineState == PurchaseOrderResponseLineState::Accepted)
        {
            throw error("@SCM:NoValidVersionToRevertTo");
        }

        if (this.isLineInRevertNotAllowedState())
        {
            throw error(strFmt("@SCM:PurchaseOrderResponseLineActionNotAllowed", "@SCM:RevertAction", this.LineState));
        }

        PurchaseOrderResponseLineHistory responseLineHistory = this.findRevertableHistory();

        if (!responseLineHistory)
        {
            throw error("@SCM:NoValidVersionToRevertTo");
        }

        ttsbegin;

        this.deleteExistingAttachedDocumentOnLine();

        this.deleteAdditionalCreatedLines();

        this.initFromResponseLineHistory(responseLineHistory);

        this.restoreLineAttachedDocuments(responseLineHistory);

        this.LineState = PurchaseOrderResponseLineState::Accepted;
        this.ConsumptionState = ConsumptionState::NotConsumed;

        if (_updateOnRevert)
        {
            this.update(false);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAdditionalCreatedLines</Name>
				<Source><![CDATA[
    private void deleteAdditionalCreatedLines()
    {
        PurchaseOrderResponseLine additionalLines;

        delete_from additionalLines
            where
                additionalLines.PurchaseOrderResponseHeader == this.PurchaseOrderResponseHeader &&
                additionalLines.LineNumber == this.LineNumber &&
                additionalLines.RecId != this.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExistingAttachedDocumentOnLine</Name>
				<Source><![CDATA[
    private void deleteExistingAttachedDocumentOnLine()
    {
        DocuRef docuRef;

        delete_from docuRef
            where docuRef.RefTableId == this.TableId
                && docuRef.RefRecId == this.RecId
                && docuRef.RefCompanyId == this.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreLineAttachedDocuments</Name>
				<Source><![CDATA[
    private void restoreLineAttachedDocuments(PurchaseOrderResponseLineHistory _responseLineHistory)
    {
        DocuRef docuRef, docuRefToInsert;
        RecordInsertList docuRefList = new RecordInsertList(tableNum(DocuRef));

        while select docuRef
            where docuRef.RefRecId == _responseLineHistory.RecId
                && docuRef.RefTableId == _responseLineHistory.TableId
                && docuRef.RefCompanyId == _responseLineHistory.DataAreaId
        {
            docuRefToInsert.clear();
            docuRefToInsert.data(docuRef.data());
            docuRefToInsert.RefTableId = this.TableId;
            docuRefToInsert.RefRecId = this.RecId;
            docuRefList.add(docuRefToInsert);
        }
        docuRefList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>substitute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to create a substitute item line.
    /// </summary>
    public void substitute()
    {
        if (this.isLineInSubstituteNotAllowedState())
        {
            throw error(strFmt("@SCM:PurchaseOrderResponseLineActionNotAllowed", "@SCM:SubstituteAction",
                this.LineState));
        }

        ttsbegin;
        PurchaseOrderResponseLine substitutedLine;

        substitutedLine.initValue();
        substitutedLine.LineNumber = this.LineNumber;
        substitutedLine.PurchQty = this.PurchQty;
        substitutedLine.DeliveryPostalAddress = this.DeliveryPostalAddress;
        substitutedLine.PurchaseOrderResponseHeader = this.PurchaseOrderResponseHeader;
        substitutedLine.PurchLine = this.PurchLine;
        substitutedLine.DeliveryDate = this.DeliveryDate;
        substitutedLine.ConfirmedDlv = this.ConfirmedDlv;
        substitutedLine.PurchPrice = this.PurchPrice;
        substitutedLine.PurchUnit = this.PurchUnit;
        substitutedLine.LineDisc = this.LineDisc;
        substitutedLine.PriceUnit = this.PriceUnit;
        substitutedLine.LinePercent = this.LinePercent;
        substitutedLine.LineAmount = this.LineAmount;
        substitutedLine.LineState = PurchaseOrderResponseLineState::Substitute;
        substitutedLine.ConsumptionState = ConsumptionState::CannotBeConsumed;
        substitutedLine.insert();

        this.LineState = PurchaseOrderResponseLineState::Substituted;
        this.ConsumptionState = ConsumptionState::CannotBeConsumed;
        this.update(false);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>split</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to split a line into a schedule
    /// </summary>
    public void split(List _deliveryLines)
    {
        if (this.isLineInSplitNotAllowedState())
        {
            throw error(strFmt("@SCM:PurchaseOrderResponseLineActionNotAllowed", "@SCM:SplitAction", this.LineState));
        }

        PurchaseOrderResponseDeliveryScheduleCreate deliveryScheduleCreate
            = PurchaseOrderResponseDeliveryScheduleCreate::newFromDeliveryLines(_deliveryLines, this);

        deliveryScheduleCreate.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>PurchaseOrderResponseLine</c> record based on the RecId passed.
    /// </summary>
    /// <param name = "_responseHeaderRecId">The RecId to find.</param>
    /// <param name = "_update">If the select is for updating.</param>
    /// <returns>A <c>PurchaseOrderResponseLine</c> record based on the RecId passed</returns>
    public static PurchaseOrderResponseLine find(PurchaseOrderResponseLineRecId _responseLineRecId, boolean _update = false)
    {
        PurchaseOrderResponseLine purchaseOrderResponseLine;

        if (_responseLineRecId)
        {
            purchaseOrderResponseLine.selectForUpdate(_update);

            select purchaseOrderResponseLine
                where purchaseOrderResponseLine.RecId == _responseLineRecId;
        }

        return purchaseOrderResponseLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRevertableHistory</Name>
				<Source><![CDATA[
    private PurchaseOrderResponseLineHistory findRevertableHistory()
    {
        PurchaseOrderResponseLineHistory responseLineHistory;
        PurchaseOrderResponseHeaderHistory responseHeaderHistory;
        PurchaseOrderResponseVersion responseVersion;
        var currPurchTableVersionRecId =
            this.purchaseOrderResponseHeader().findLatestResponseVersion().PurchTableVersion;

        select firstOnly responseLineHistory
            order by responseVersion.VersionDateTime desc
            where responseLineHistory.PurchaseOrderResponseLine == this.RecId
            exists join responseHeaderHistory
            where responseHeaderHistory.RecId == responseLineHistory.PurchaseOrderResponseHeaderHistory
            exists join responseVersion
            where responseVersion.PurchTableVersion == currPurchTableVersionRecId
               && responseVersion.VersionDateTime >= responseHeaderHistory.ValidFrom
               && responseVersion.VersionDateTime <= responseHeaderHistory.ValidTo
               && responseVersion.IsArchived == NoYes::Yes
               && responseVersion.PurchaseOrderResponseHeader == responseHeaderHistory.PurchaseOrderResponseHeader;

        return responseLineHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineInEditNotAllowedState</Name>
				<Source><![CDATA[
    private boolean isLineInEditNotAllowedState()
    {
        switch (this.LineState)
        {
            case PurchaseOrderResponseLineState::Rejected, PurchaseOrderResponseLineState::SplitOriginalLine,
                 PurchaseOrderResponseLineState::Substituted, PurchaseOrderResponseLineState::SubstituteSplit:
                {
                    return true;
                }
            default:
                {
                    return false;
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineInSubstituteNotAllowedState</Name>
				<Source><![CDATA[
    private boolean isLineInSubstituteNotAllowedState()
    {
        switch (this.LineState)
        {
            case PurchaseOrderResponseLineState::Substitute,
                PurchaseOrderResponseLineState::Substituted,
                PurchaseOrderResponseLineState::SplitScheduleLine,
                PurchaseOrderResponseLineState::SubstituteSplit:
                {
                    return true;
                }
            default:
                {
                    return false;
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineInSplitNotAllowedState</Name>
				<Source><![CDATA[
    private boolean isLineInSplitNotAllowedState()
    {
        switch (this.LineState)
        {
            case PurchaseOrderResponseLineState::Substituted,
                PurchaseOrderResponseLineState::SplitScheduleLine,
                PurchaseOrderResponseLineState::Rejected:
                {
                    return true;
                }
            default:
                {
                    return false;
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineInRevertNotAllowedState</Name>
				<Source><![CDATA[
    private boolean isLineInRevertNotAllowedState()
    {
        switch (this.LineState)
        {
            case PurchaseOrderResponseLineState::Substitute,
                PurchaseOrderResponseLineState::SplitScheduleLine,
                PurchaseOrderResponseLineState::Accepted,
                PurchaseOrderResponseLineState::SubstituteSplit:
                {
                    return true;
                }
            default:
                {
                    return false;
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineInRejectNotAllowedState</Name>
				<Source><![CDATA[
    private boolean isLineInRejectNotAllowedState()
    {
        switch (this.LineState)
        {
            case PurchaseOrderResponseLineState::Substitute,
                PurchaseOrderResponseLineState::SplitScheduleLine,
                PurchaseOrderResponseLineState::Rejected,
                PurchaseOrderResponseLineState::SubstituteSplit:
                {
                    return true;
                }
            default:
                {
                    return false;
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>substituteLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the substitute line for the current line if it has been substituted.
    /// If not substituted then it throws an error.
    /// </summary>
    /// <param name = "_update">If the select is for updating.</param>
    /// <returns>A <c>PurchaseOrderResponseLine</c> record.</returns>
    public PurchaseOrderResponseLine substituteLine(boolean _update = false)
    {
        if (this.LineState != PurchaseOrderResponseLineState::Substituted)
        {
            throw error("@SCM:CurrentLineNotSubstituted");
        }

        PurchaseOrderResponseLine responseLine;

        responseLine.selectForUpdate(_update);

        select firstonly responseLine
            where responseLine.LineNumber == this.LineNumber &&
            responseLine.LineState  == PurchaseOrderResponseLineState::Substitute;

        return responseLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleOriginalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the original schedule line for the current line.
    /// </summary>
    /// <param name = "_update">If the select is for updating.</param>
    /// <returns><c>PurchaseOrderResponseLine</c> record representing original delivery schedule line.</returns>
    public PurchaseOrderResponseLine scheduleOriginalLine(boolean _update = false)
    {
        PurchaseOrderResponseLine originalLine;

        originalLine.selectForUpdate(_update);

        select firstonly originalLine
            where originalLine.purchaseOrderResponseHeader == this.purchaseOrderResponseHeader
               && originalLine.LineNumber                  == this.LineNumber
               && ((originalLine.LineState                 == PurchaseOrderResponseLineState::SplitOriginalLine) ||
                   (originalLine.LineState                 == PurchaseOrderResponseLineState::SubstituteSplit));

        return originalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOriginalDeliveryScheduleLine</Name>
				<Source><![CDATA[
    private void updateOriginalDeliveryScheduleLine()
    {
        ttsbegin;

        PurchaseOrderResponseLine originalLine;

        originalLine = this.scheduleOriginalLine(true);
        originalLine.updateDeliveryScheduleQuantity();
        originalLine.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeliveryScheduleQuantity</Name>
				<Source><![CDATA[
    private void updateDeliveryScheduleQuantity()
    {
        if ((this.LineState != PurchaseOrderResponseLineState::SplitOriginalLine) &&
            (this.LineState != PurchaseOrderResponseLineState::SubstituteSplit))
        {
            return;
        }

        PurchaseOrderResponseLine allDeliveryLines;

        select sum(PurchQty) from allDeliveryLines
            where allDeliveryLines.PurchaseOrderResponseHeader == this.PurchaseOrderResponseHeader
               && allDeliveryLines.LineNumber                  == this.LineNumber
               && allDeliveryLines.LineState                   == PurchaseOrderResponseLineState::SplitScheduleLine;

        this.PurchQty = allDeliveryLines.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>willLineBeDelivered</Name>
				<Source><![CDATA[
    private PurchaseOrderResponseLineDelivering willLineBeDelivered()
    {
        switch (this.LineState)
        {
            case PurchaseOrderResponseLineState::Accepted,
                 PurchaseOrderResponseLineState::AcceptedWithChanges,
                 PurchaseOrderResponseLineState::SplitScheduleLine,
                 PurchaseOrderResponseLineState::Substitute:
            {
                return NoYesCombo::Yes;
            }

            default:
            {
                return NoYesCombo::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNameInScheduleLines</Name>
				<Source><![CDATA[
    private void updateNameInScheduleLines()
    {
        PurchaseOrderResponseLine allResponseLine;
        update_recordset allResponseLine
                    setting Name = this.Name
                    where allResponseLine.PurchaseOrderResponseHeader == this.PurchaseOrderResponseHeader
                       && allResponseLine.LineNumber                  == this.LineNumber
                       && allResponseLine.LineState                   != Purchaseorderresponselinestate::Substituted
                       && allResponseLine.RecId                       != this.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docuAllowEdit_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Documents attached to response line can be edited if the response is in Editing state
    /// otherwise attachments are read only
    /// </summary>
    /// <returns>True if attachments should be editable otherwise false.</returns>
    public boolean docuAllowEdit_W()
    {
        PurchaseOrderResponseVersion responseVersion = this.purchaseOrderResponseHeader().findLatestResponseVersion();
        if (responseVersion.ResponseState == PurchaseOrderResponseState::Editing)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// A Cached display method to return whether the record has attachments.
    /// </summary>
    /// <returns>True if the record has attachments; otherwise false.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display boolean hasAttachments()
    {
        return DocuRef::findTableIdRecId(this.DataAreaId, this.TableId, this.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPurchQtyBasedOnUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies purchase quantity based on the unit.
    /// </summary>
    public void modifyPurchQtyBasedOnUnit()
    {
        InventTable inventTable = InventTable::find(this.itemId);
        this.PurchQty = decRound(this.PurchQty, UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(inventTable.inventUnitId())));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:PurchaseOrderResponseLineDevDoc</DeveloperDocumentation>
	<Label>@SCM:PurchaseOrderResponseLineTableCaption</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>LineNumber</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LineDetails</Name>
			<Label>@SYS9664</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Delivering</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedDlv</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantity</Name>
			<Label>@SYS11187</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@SYS11829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Address</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LineNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchExternalItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdSmall</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProcurementCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchCategory</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemFreeTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DeliveryDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineRequestedReceiptDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ConfirmedDlv</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineConfirmedReceiptDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchOrderedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchPrice</ExtendedDataType>
			<Label>@SYS11770</Label>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineDisc</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LinePercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLinePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineAmount</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchaseOrderResponseHeader</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchaseOrderResponseHeaderRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineState</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchaseOrderResponseLineState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Delivering</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchaseOrderResponseLineDelivering</ExtendedDataType>
			<EnumType>NoYesCombo</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConsumptionState</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ConsumptionState</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchaseOrderResponseHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeliveryDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>PurchaseOrderResponseLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
					<MapFieldTo>ConfirmedDlv</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsumptionState</MapField>
					<MapFieldTo>ConsumptionState</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Delivering</MapField>
					<MapFieldTo>Delivering</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDate</MapField>
					<MapFieldTo>DeliveryDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
					<MapFieldTo>ExternalItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNumber</MapField>
					<MapFieldTo>LineNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineState</MapField>
					<MapFieldTo>LineState</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Name</MapField>
					<MapFieldTo>Name</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProcurementCategory</MapField>
					<MapFieldTo>ProcurementCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchaseOrderResponseHeader</MapField>
					<MapFieldTo>PurchaseOrderResponseHeader</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchLine</MapField>
					<MapFieldTo>PurchLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchPrice</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchQty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchUnit</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProcurementCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategory_PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcurementCategory</Name>
					<Field>ProcurementCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchUnit</Name>
					<Field>PurchUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchaseOrderResponseHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchaseOrderResponseHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchaseOrderResponseHeader</Name>
					<Field>PurchaseOrderResponseHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsPostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchLine</Name>
					<Field>PurchLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>