<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Kanban</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Kanban extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomValidDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the date to search for active BOMs that apply to the specified kanban.
    /// </summary>
    /// <returns>
    /// The date a BOM must be active to be assigned to the specified kanban.
    /// </returns>
    public TransDate bomValidDate()
    {
        return DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.DueDateTime, DateTimeUtil::getCompanyTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isKanbanAutoComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if kanban is auto complete.
    /// </summary>
    /// <param name = "_kanbanId">
    /// The <c>KanbanId</c> or the order to check.
    /// </param>
    /// <returns>
    /// true if kanban will auto complete; otherwise, false.
    /// </returns>
    public static boolean isKanbanAutoComplete(KanbanId _kanbanId)
    {
        return KanbanRule::find(Kanban::findKanbanId(_kanbanId).KanbanRule).kanbanFlow().firstPlanActivity().AutoCompleteKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>BOMVersion</c> record referenced by the kanban.
    /// </summary>
    /// <param name="_bomId">
    /// The BOM version to find; optional.
    /// </param>
    /// <returns>
    /// A <c>BOMVersion</c> table buffer.
    /// </returns>
    public BOMVersion bomVersion(
        BOMId _bomId = this.bomId
        )
    {
        BOMVersion  bomVersion;

        if (
            _bomId
            )
        {
            bomVersion = BOMVersion::selectBomVersion(this.ItemId,dateNull(),maxUInt(),this.inventDimBOM(),
                                                      true,true,true,false,false,
                                                      _bomId
                                                      );
        }

        return bomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the ID of the bill of material is valid.
    /// </summary>
    /// <param name="_bomId">
    /// The BOM version to check; optional.
    /// </param>
    /// <returns>
    /// true if the bill of materials ID is valid; otherwise false.
    /// </returns>
    public boolean checkBOMId(
        BOMId _bomId = this.bomId
        )
    {
        BOMTable    bomTable;
        BOMVersion  bomVersion;
        boolean     ok = true;

        if (
            _bomId
            )
        {
            ok = ok && BOMTable::checkExist(
                                            _bomId
                                            );

            bomTable = BOMTable::find(
                                      _bomId
                                      );
            if (!bomTable.isApproved())
            {
                ok = ok && checkFailed(strFmt("@SYS29115",
                                       _bomId
                                       ));
            }

            //must have an approved version.
            bomVersion = this.bomVersion(
                                         _bomId
                                        );
            if (!bomVersion)
            {
                ok = ok && checkFailed(strFmt("@SYS137190",
                                       _bomId
                                       ,
                                       this.ItemId));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDueDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>Kanban.DueDateTime</c> field.
    /// </summary>
    /// <returns>
    /// true if the field value is valid; otherwise, false.
    /// </returns>
    public boolean checkDueDateTime()
    {
        boolean result = true;

        if (   this.RecId
            && this.DueDateTime != this.orig().DueDateTime
            && this.Status      != LeanKanbanStatus::NotAssigned)
        {
            result =    result
                     && checkFailed(strFmt("@SYS319620",LeanKanbanStatus::NotAssigned,this.KanbanId));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>ItemId</c> table field.
    /// </summary>
    /// <returns>
    /// true if the field value is valid; otherwise, false.
    /// </returns>
    public boolean checkItemId()
    {
        boolean     result = true;

        if (!this.ItemId)
        {
            result = result && checkFailed("@SYS16661");
        }

        result = result && this.inventTable().checkValid(this.ItemId);

        if (   this.orig()
            && this.orig().ItemId != this.ItemId)
        {
            result = result && checkFailed(strFmt("@SYS135860",this.KanbanId));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the value in the <c>LegalEntity</c> field is valid.
    /// </summary>
    /// <returns>
    /// true if the field value is valid; otherwise, false.
    /// </returns>
    public boolean checkLegalEntity()
    {
        boolean     result     = true;
        KanbanRule  kanbanRule = this.kanbanRule();

        if (   !this.LegalEntity
            || this.LegalEntity != kanbanRule.LegalEntity)
        {
            result = checkFailed(strFmt("@SYS332720",
                                 this.KanbanId,
                                 kanbanRule.RuleId));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuantityOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>Kanban.QuantityOrdered</c> table field.
    /// </summary>
    /// <returns>
    /// true if the field value is valid; otherwise, false.
    /// </returns>
    public boolean checkQuantityOrdered()
    {
        KanbanJob       kanbanJob;
        KanbanRule      kanbanRule;
        LeanRuleData    leanRuleData;
        InventQty       minQty;
        InventQty       maxQty;
        boolean         result = true;

        if (this.QuantityOrdered <= 0)
        {
            result =    result
                     && checkFailed("@SYS133416");
        }

        //Check on insert only
        if (   result
            && !this.orig())
        {
            kanbanRule   = this.kanbanRule();
            leanRuleData = kanbanRule.ruleData();
            minQty       = leanRuleData.minQty();
            maxQty       = leanRuleData.maxQty();

            if (   this.QuantityOrdered  < minQty
                || (this.QuantityOrdered > maxQty
                &&  maxQty               != 0))
            {
                result =    result
                         && checkFailed(strFmt("@SYS133421",minQty,maxQty));
            }
        }

        //check on update only
        if (   this.RecId
            && this.QuantityOrdered != this.orig().QuantityOrdered)
        {
            kanbanJob = this.firstKanbanJob();
            if (   this.Status      != LeanKanbanStatus::NotAssigned
                || kanbanJob.Status != LeanKanbanJobStatus::NotPlanned
                || kanbanJob.existLaterJobGreaterStatus(LeanKanbanJobStatus::NotPlanned))
            {
                result =    result
                         && checkFailed(strFmt("@SYS319619",LeanKanbanJobStatus::NotPlanned));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuantityReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>Kanban.QuantityReceived</c> table field.
    /// </summary>
    /// <returns>
    /// true if the field value is valid; otherwise, false.
    /// </returns>
    public boolean checkQuantityReceived()
    {
        KanbanRule      kanbanRule;
        KanbanStatus    kanbanStatus = this.status();
        boolean         result = true;

        result = result && (kanbanStatus.canHaveReceivedQty() || this.QuantityReceived == 0);
        result = result && (this.QuantityReceived >= 0);

        if (result &&
            kanbanStatus.canHaveReceivedQty())
        {
            kanbanRule = this.kanbanRule();
            if (kanbanRule.AllowDeviatingQuantity)
            {
                //the deviating quantities are defined as deltas.
                result = result && this.QuantityReceived >= this.QuantityOrdered - kanbanRule.MinimumDeviatingQuantity;
                result = result && this.QuantityReceived <= this.QuantityOrdered + kanbanRule.MaximumDeviatingQuantity;
            }
            else
            {
                result = result && this.QuantityReceived == this.QuantityOrdered;
            }
        }

        return result ? true : checkFailed(strFmt("@SYS134360",this.KanbanId,this.LastPlanActivityName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the value of the current <c>Kanban</c> record is valid.
    /// </summary>
    /// <param name="_refRecId">
    /// The record ID that is used to check if the record is valid.
    /// </param>
    /// <param name="_silent">
    /// A Boolean value that indicates whether errors are added to the infolog; optional.
    /// </param>
    /// <returns>
    /// true if the record is valid; otherwise, false.
    /// </returns>
    public boolean checkValid(
        KanbanRefRecId _refRecId,
        boolean        _silent = false)
    {
        boolean result = true;

        if (!_refRecId)
        {
            result = _silent ? false : checkFailed("@SYS134892");
        }

        if (   result
            && !this.RecId
            && _refRecId)
        {
            result = _silent ? false : checkFailed(strFmt(Kanban::txtNotExist(),this.KanbanId));
        }

        if (   result
            && this.LegalEntity != CompanyInfo::current())
        {
            result = _silent ? false : checkFailed(strFmt("@SYS332723",this.KanbanId));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was initialized from the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,this.LegalEntity))
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>KanbanJob</c> record referenced in the <c>CurrentJob</c> table field.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>KanbanJob</c> table buffer.
    /// </returns>
    public KanbanJob currentJob(boolean _forUpdate = false)
    {
        return KanbanJob::find(this.CurrentJob, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the current table buffer.
    /// </summary>
    public void delete()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        boolean isTopLevelScope;

        using (KanbanJobDeferredSchedulingScope deferredSchedulingScope = new KanbanJobDeferredSchedulingScope())
        {
            isTopLevelScope = deferredSchedulingScope.isTopLevelScope();

            this.status().deleting();

            if (!this.status().canDelete())
            {
                throw error(strFmt("@SYS136166", this.Status, LeanKanbanStatus::NotAssigned));
            }
        
            // delete the pegging assignment (if any) for which this kanban acts as supply
            // (note that this operation must be done before deleting the jobs)
            ReqEventProcessKanban::deleteSupplyPegging(this);

            this.deleteKanbanJobs();

            super();

            LeanRulesEngine::onKanbanDeleted(this);

            this.status().deleted();
        }

        if(isTopLevelScope)
        {
            ReqEventProcessBatchScheduleTask::newStandard(false, true, 0).runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteKanbanJobs</Name>
				<Source><![CDATA[
    private void deleteKanbanJobs()
    {
        // kanbanJob delete is overwritten, will fall back to row by row processing
        KanbanJob   kanbanJob;
        
        delete_from kanbanJob
            where kanbanJob.Kanban == this.RecId;

        select firstonly RecId from kanbanJob
            where kanbanJob.Kanban == this.RecId;

        if (kanbanJob.RecId)
        {
            throw error("@SYS319608");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first <c>KanbanJob</c> record related to the current <c>Kanban</c> table buffer.
    /// </summary>
    /// <returns>
    /// The first <c>KanbanJob</c> record.
    /// </returns>
    /// <remarks>
    /// The first record is the kanban job with the lowest sequence number.
    /// </remarks>
    public KanbanJob firstKanbanJob()
    {
        KanbanJob   kanbanJob;

        select firstonly kanbanJob
            order by Sequence
            where kanbanJob.Kanban == this.RecId;

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstKanbanJobOfType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first <c>KanbanJob</c> record of a specified type that is related to the current
    /// <c>Kanban</c> table buffer.
    /// </summary>
    /// <param name="_leanKanbanJobType">
    /// The lean kanban fob type to find.
    /// </param>
    /// <returns>
    /// The first <c>KanbanJob</c> record.
    /// </returns>
    public KanbanJob firstKanbanJobOfType(LeanKanbanJobType _leanKanbanJobType)
    {
        KanbanJob   kanbanJob;

        select firstonly kanbanJob
            order by Sequence
            where kanbanJob.Kanban == this.RecId &&
                  kanbanJob.Type   == _leanKanbanJobType;

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>grossWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total gross weight of the kanban by using the items it contains.
    /// </summary>
    /// <returns>
    /// The total gross weight of the kanban.
    /// </returns>
    /// <remarks>
    /// The total weight is calculated by multiplying the item gross weight by the number of items in the
    /// kanban.
    /// </remarks>
    public ItemGrossWeight grossWeight()
    {
        return this.inventTable().grossWeight() * this.QuantityReceived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields in the current table buffer from an <c>InventDim</c> record.
    /// </summary>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> table buffer from which to initialize fields.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    /// An instance of the <c>InventDimGroupSetup</c> class that provides information about the dimension
    /// setup.
    /// </param>
    /// <remarks>
    /// Initializes the <c>InventDimId</c> field after clearing all of the dimensions that are not active
    /// according to the dimension group.
    /// </remarks>
    public void initFromInventDim(
        InventDim                       _inventDim           = this.inventDim(),
        InventDimGroupSetup             _inventDimGroupSetup = InventDimGroupSetup::newItemId(this.ItemId))
    {
        InventDim inventDim = _inventDim.data();        

        // <GEERU>
        InventProfileId_RU      inventProfile;
        #ISOCountryRegionCodes
        boolean                 countryRegion_RU    = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        if (countryRegion_RU)
        {
            inventProfile       = inventDim.InventProfileId_RU;
        }
        // </GEERU>

        WHSInventStatusId inventStatusId;

        if (KanbanInitFromInventDimInventoryStatusFlight::instance().isEnabled() && inventDim.InventStatusId)
        {
            inventStatusId = inventDim.InventStatusId;
        }

        inventDim.clearNotProductDim(_inventDimGroupSetup);

        if (inventStatusId)
        {
            inventDim.InventStatusId = inventStatusId;
        }
        // <GEERU>
        if (countryRegion_RU)
        {
            inventDim.InventProfileId_RU = inventProfile;
        }
        // </GEERU>
        inventDim                = InventDim::findOrCreate(inventDim);
        this.InventDimId         = inventDim.InventDimId;
        this.InventDimDataAreaId = this.InventDimId ? appl.company().dataArea(tableNum(InventDim)) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields in the current table buffer from an <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record that is used to initialize the fields; optional.
    /// </param>
    public void initFromInventTable(InventTable _inventTable = this.inventTable())
    {
        this.ItemId           = _inventTable.ItemId;
        this.ItemDataAreaId   = this.ItemId ? appl.company().dataArea(tableNum(InventTable)) : '';
        this.DefaultDimension = this.mergeDimension(this.DefaultDimension, _inventTable.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields in the current table buffer from another <c>Kanban</c> record.
    /// </summary>
    /// <param name="_kanban">
    /// The <c>Kanban</c> table buffer used to initialize fields from.
    /// </param>
    public void initFromKanban(Kanban _kanban)
    {
        this.KanbanRule            = _kanban.KanbanRule;
        this.ItemId                = _kanban.ItemId;
        this.ItemDataAreaId        = _kanban.ItemDataAreaId;
        this.InventDimId           = _kanban.InventDimId;
        this.InventDimDataAreaId   = _kanban.InventDimDataAreaId;
        this.Type                  = _kanban.Type;
        this.QuantityOrdered       = _kanban.QuantityOrdered;
        this.Express               = _kanban.Express;
        this.Manual                = _kanban.Manual;
        this.DueDateTime           = _kanban.DueDateTime;
        this.LegalEntity           = _kanban.LegalEntity;
        this.DefaultDimension      = this.copyDimension(_kanban.DefaultDimension);
        this.bomId                 = _kanban.bomId;
        this.bomDataAreaId         = _kanban.bomDataAreaId;
        this.FirstPlanActivityName = _kanban.FirstPlanActivityName;
        this.LastPlanActivityName  = _kanban.LastPlanActivityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields in the current table buffer from a <c>KanbanRule</c> record.
    /// </summary>
    /// <param name="_kanbanRule">
    /// The <c>KanbanRule</c> record that is used to initialize the fields; optional.
    /// </param>
    public void initFromKanbanRule(KanbanRule _kanbanRule = this.kanbanRule())
    {
        LeanRuleData            leanRuleData;
        KanbanFlow              kanbanFlow;

        if (_kanbanRule)
        {
            leanRuleData = _kanbanRule.ruleData();
            kanbanFlow   = leanRuleData.kanbanFlow();

            //initialize rule
            this.KanbanRule            = _kanbanRule.RecId;
            this.Type                  = leanRuleData.leanKanbanType();
            this.QuantityOrdered       = _kanbanRule.Quantity;
            this.FirstPlanActivityName = kanbanFlow.firstPlanActivityName();
            this.LastPlanActivityName  = kanbanFlow.lastPlanActivityName();
            this.LegalEntity           = _kanbanRule.LegalEntity;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPlanReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields in the current table buffer from an <c>PlanReference</c> record.
    /// </summary>
    /// <param name="_planReference">
    /// The <c>PlanReference</c> record that is used to initialize fields; optional.
    /// </param>
    public void initFromPlanReference(PlanReference _planReference = this.planReference())
    {
        this.DefaultDimension = this.copyDimension(_planReference.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the table record buffer.
    /// </summary>
    public void initValue()
    {
        super();
        this.Status      = LeanKanbanStatus::NotAssigned;
        this.DueDateTime = DateTimeUtil::getSystemDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the current table buffer.
    /// </summary>
    public void insert()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        this.status().inserting();

        if (!this.KanbanId)
        {
            this.KanbanId = Kanban::numberSeqKanbanId(false).num();
        }

        if (!this.validateWrite())
        {
            throw error("@SYS18447");
        }

        if (!this.InventTransId && this.type().mustBeInventoryControlled())
        {
            this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
            this.InventTransDataAreaId = this.InventTransId ? appl.company().dataArea(tableNum(InventTransOrigin)) : '';
        }

        super();

        this.status().inserted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventDim</c> record referenced in the <c>InventDimId</c> table field.
    /// </summary>
    /// <returns>
    /// An <c>InventDim</c> table buffer.
    /// </returns>
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventDim</c> record referenced in the <c>InventDimId</c> field that is merged with
    /// the site of the first activity.
    /// </summary>
    /// <returns>
    /// A <c>InventDim</c> table buffer.
    /// </returns>
    public InventDim inventDimBOM()
    {
        KanbanFlow  kanbanFlow;
        InventDim   inventDim;
        KanbanJob   kanbanJob = this.firstKanbanJob();

        // product dimensions only
        inventDim  = this.inventDim();

        if (kanbanJob)
        {
            // set site from first kanban job
            inventDim.InventSiteId = kanbanJob.inventDim().InventSiteId;
        }
        else
        {
            kanbanFlow = this.kanbanFlow();
            if (kanbanFlow)
            {
                // set site from first activity
                inventDim.InventSiteId = kanbanFlow.firstPlanActivity().receiptLocation().inventDim().InventSiteId;
            }
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and returns an inventory movement from the current <c>KanbanJob</c> table buffer.
    /// </summary>
    /// <returns>
    /// An <c>InventMovement</c> object.
    /// </returns>
    public InventMovement inventMovement()
    {
        return InventMovement::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventTable</c> record referenced in the <c>ItemId</c> table field.
    /// </summary>
    /// <returns>
    /// An <c>InventTable</c> table buffer.
    /// </returns>
    public InventTable inventTable()
    {
        return InventTable::find(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory transaction originator of the kanban empty issue.
    /// </summary>
    /// <returns>
    /// A record ID of the <c>InventTransOrigin</c> table; otherwise, <c>0</c>.
    /// </returns>
    public InventTransOriginId inventTransOriginId()
    {
        InventTransOriginId     inventTransOriginId = 0;

        if (   this.RecId
            && this.type().mustBeInventoryControlled())
        {
            inventTransOriginId = this.inventMovement().inventTransOriginId();
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>KanbanCard</c> record that is assigned to the current <c>Kanban</c> record.
    /// </summary>
    /// <returns>
    /// A <c>KanbanCard</c> table buffer.
    /// </returns>
    public KanbanCard kanbanCard()
    {
        return KanbanCard::findCardId(this.KanbanCardId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>KanbanFlow</c> record that is related to the kanban.
    /// </summary>
    /// <returns>
    /// A <c>KanbanFlow</c> record.
    /// </returns>
    public KanbanFlow kanbanFlow()
    {
        KanbanRule  kanbanRule;
        KanbanFlow  kanbanFlow;

        if (this.KanbanRule)
        {
            select firstonly kanbanFlow
                exists join kanbanRule
                    where kanbanRule.KanbanFlow == kanbanFlow.RecId
                       && kanbanRule.RecId      == this.KanbanRule;
        }

        return kanbanFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanJobForPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the kanban job that relates to a given plan activity.
    /// </summary>
    /// <param name="_planActivity">
    ///    The <c>PlanActivity</c> record.
    /// </param>
    /// <returns>
    ///    A <c>KanbanJob</c> record; otherwise, an empty buffer.
    /// </returns>
    public KanbanJob kanbanJobForPlanActivity(PlanActivity _planActivity)
    {
        KanbanJob                   kanbanJob;
        LeanProductionFlowActivity  leanProductionFlowActivity;

        if (_planActivity)
        {
            select firstonly kanbanJob
                where kanbanJob.Kanban == this.RecId
                exists join leanProductionFlowActivity
                    where leanProductionFlowActivity.RecId        == kanbanJob.LeanProductionFlowActivity
                       && leanProductionFlowActivity.PlanActivity == _planActivity.RecId;
        }

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>KanbanRule</c> record referenced in the <c>KanbanRule</c> table field.
    /// </summary>
    /// <returns>
    /// A <c>KanbanRule</c> table buffer.
    /// </returns>
    public KanbanRule kanbanRule()
    {
        return KanbanRule::find(this.KanbanRule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last <c>KanbanJob</c> record related to the current <c>Kanban</c> table buffer.
    /// </summary>
    /// <returns>
    /// The last <c>KanbanJob</c> record.
    /// </returns>
    /// <remarks>
    /// The last record is the kanban job with the highest sequence number.
    /// </remarks>
    public KanbanJob lastKanbanJob()
    {
        KanbanJob   kanbanJob;

        select firstonly kanbanJob
            order by Sequence desc
            where kanbanJob.Kanban == this.RecId;

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastKanbanJobOfType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last <c>KanbanJob</c> record of a specified type related to the current <c>Kanban</c>
    /// table buffer.
    /// </summary>
    /// <param name="_leanKanbanJobType">
    /// The lean kanban job type to find.
    /// </param>
    /// <returns>
    /// The last <c>KanbanJob</c> record.
    /// </returns>
    public KanbanJob lastKanbanJobOfType(LeanKanbanJobType _leanKanbanJobType)
    {
        KanbanJob   kanbanJob;

        select firstonly kanbanJob
            order by Sequence desc
            where kanbanJob.Kanban == this.RecId &&
                  kanbanJob.Type   == _leanKanbanJobType;

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanProductionFlowReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>LeanProductionFlowReference</c> record that is related to the kanban.
    /// </summary>
    /// <returns>
    /// A <c>LeanProductionFlowReference</c> table buffer.
    /// </returns>
    public LeanProductionFlowReference leanProductionFlowReference()
    {
        return LeanProductionFlowReference::findPlanReference(this.planReference().RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxInventTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the highest physical or financial date of any inventory transaction related to the current kanban.
    /// </summary>
    /// <returns>
    ///    The highest inventory transaction date.
    /// </returns>
    public TransDate maxInventTransDate()
    {
        TransDate   transDate;
        InventTrans inventTrans;

        if (this.type().mustBeInventoryControlled())
        {
            select maxof(DatePhysical), maxof(DateFinancial) from inventTrans
                where inventTrans.InventTransOrigin == this.inventTransOriginId();

            transDate = max(transDate,inventTrans.DatePhysical);
            transDate = max(transDate,inventTrans.DateFinancial);
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that contains the merged combination of the current
    /// <c>defaultDimension</c> field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that contains the merged combination of the current <c>defaultDimension</c> field
    /// on this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge            = DimensionMerge::newFromTable(this,this.LegalEntity))
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfKanbanJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the number of kanban jobs for the current <c>Kanban</c> table record.
    /// </summary>
    /// <returns>
    /// The number of <c>KanbanJob</c> records that are related to the current <c>Kanban</c> record.
    /// </returns>
    public NumberOf numberOfKanbanJobs()
    {
        return int642int((select count(RecId) from kanbanJob
                            where kanbanJob.Kanban == this.RecId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>planReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>PlanReference</c> record that is related to the kanban.
    /// </summary>
    /// <returns>
    /// A <c>PlanReference</c> table buffer.
    /// </returns>
    /// <remarks>
    /// The last activity in a kanban flow is always related to the owner plan reference.
    /// </remarks>
    public PlanReference planReference()
    {
        KanbanRule          kanbanRule;
        KanbanFlow          kanbanFlow;
        PlanPlanActivity    planPlanActivity;
        Plan                plan;
        PlanReference       planReference;

        if (this.KanbanRule)
        {
            select planReference
                exists join plan
                    where plan.PlanReference              == planReference.RecId
                exists join planPlanActivity
                    where planPlanActivity.Plan           == plan.RecId
                exists join kanbanFlow
                    where kanbanFlow.LastPlanPlanActivity == planPlanActivity.RecId
                exists join kanbanRule
                    where kanbanRule.KanbanFlow           == kanbanFlow.RecId
                       && kanbanRule.RecId                == this.KanbanRule;
        }

        return planReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ProdGroup</c> record that is associated with the current <c>Kanban</c> record.
    /// </summary>
    /// <returns>
    /// A <c>ProdGroup</c> table buffer.
    /// </returns>
    public ProdGroup prodGroup()
    {
        return this.leanProductionFlowReference().prodGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>productionInstructions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the production instructions of a kanban.
    /// </summary>
    /// <returns>
    /// A <c>DocuRef</c> record with a reference to the document or file; otherwise, null.
    /// </returns>
    /// <remarks>
    /// The documentation will be retrieved from the kanban. If the kanban has no documentation, it will be
    /// retrieved from the kanban rule. If there is no documentation in the kanban rule, it will retrieve
    /// it from the BOM version. If no documentation was found, it will retrieve it from the item.
    /// </remarks>
    public DocuRef productionInstructions()
    {
        KanbanRule                      kanbanRule;
        ProdParameters                  prodParameters;
        BOMVersion                      bomVersion;
        DocuRef                         docuRef;

        DocuRef findDocuRef(Common _record, DocuTypeId _docuTypeId)
        {
            DocuRefSearch           docuRefSearch;
            DocuRef                 docuRefLocal;

            docuRefSearch = DocuRefSearch::newDocuTypeId(_record, _docuTypeId, true);
            if (docuRefSearch.next())
            {
                docuRefLocal = docuRefSearch.docuRef();
            }

            return docuRefLocal;
        }

        // Document Type is defined in the Prod Parameters form
        prodParameters = ProdParameters::find(false);

        // Try to find a document attached to the kanban
        docuRef = findDocuRef(this, prodParameters.ProductionInstructionDocumentType);

        // Try to find a document attached to the rule
        if (!docuRef)
        {
            kanbanRule = this.kanbanRule();
            docuRef    = findDocuRef(kanbanRule, prodParameters.ProductionInstructionDocumentType);
        }

        // try to find on customer specific item description
        if (!docuRef)
        {
            if (kanbanRule.ReplenishmentStrategy == LeanReplenishmentStrategy::Event)
            {
                Common common = ReqPeggingTreeNode::newStandard(this).parent();
                if (common && common is SalesLine)
                {
                    SalesLine salesLine = common as SalesLine;
                    if (salesLine.ExternalItemId)
                    {
                        CustExternalItemDescription custExternalItemDescription = salesLine.salesTable().instantiateCustExternalItemDescription(this.ItemId, this.inventDim());

                        if (   custExternalItemDescription.findExternalDescription()
                            && custExternalItemDescription.externalItemId() == salesLine.ExternalItemId)
                        {
                            CustVendExternalItem custVendExternalItem = custExternalItemDescription.parmCustVendExternalItem();
                            docuRef = findDocuRef(custVendExternalItem, prodParameters.ProductionInstructionDocumentType);
                        }
                    }
                }
            }
        }

        // Try to find a document attached to the bom version
        if (!docuRef)
        {
            bomVersion = this.bomVersion();
            if (bomVersion)
            {
                docuRef = findDocuRef(bomVersion, prodParameters.ProductionInstructionDocumentType);
            }
        }

        // Try to find a document attached to the item
        if (!docuRef)
        {
            docuRef = findDocuRef(this.inventTable(), prodParameters.ProductionInstructionDocumentType);
        }

        return docuRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the kanban quantity that can be reserved.
    /// </summary>
    /// <returns>
    /// A <c>InventQty</c> value that defines the quantity that can be reserved.
    /// </returns>
    /// <remarks>
    /// The method is used by the inventory movement.
    /// </remarks>
    public InventQty reservQty()
    {
        InventQty   reservQty = 0;

        if (this.Status == LeanKanbanStatus::Emptied
            && this.type().mustBeInventoryControlled())
        {
            reservQty = -this.QuantityReceived;
        }

        return reservQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>CurrentJob</c> field and updates the current table record.
    /// </summary>
    /// <param name="_currentJob">
    /// The reference to the current job.
    /// </param>
    public void setCurrentJob(RefRecId _currentJob)
    {
        Kanban  kanban;

        if (!this.selectForUpdate())
        {
            ttsbegin;
            kanban            = Kanban::find(this.RecId,true);
            kanban.CurrentJob = _currentJob;
            kanban.linkInventDim2Dimension(KanbanJob::find(_currentJob).inventDim());
            kanban.update();
            ttscommit;
            this.reread();
        }
        else
        {
            this.CurrentJob = _currentJob;
            this.linkInventDim2Dimension(KanbanJob::find(_currentJob).inventDim());
            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default <c>Kanban.DefaultDimension</c> values, depending on the <see cref="InventDim Table" /> record buffer values.
    /// </summary>
    /// <param name="_newInventDim">
    /// The <see cref="InventDim Table" /> record buffer that is linked to the <see cref="KanbanJob Table" /> record buffer.
    /// </param>
    /// <param name="_oldInventDim">
    /// The <see cref="InventDim Table" /> record buffer that was previously linked to the current <see cref="Kanban Table" /> record buffer.
    /// </param>
    protected void linkInventDim2Dimension(
		InventDim _newInventDim,
		InventDim _oldInventDim = this.inventDim())
    {
        _newInventDim.setInventSiteFromParentIfModified(this, _oldInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setKanbanBOMId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value of the <c>BOMId</c> field in the <c>Kanban</c> record.
    /// </summary>
    /// <param name="_bomId">
    ///    A new <c>BOMId</c> value for the kanban.
    /// </param>
    /// <param name="_updateKanbanJobPickingList">
    ///    A Boolean value that defines if the current picking list for the kanban must be updated; optional.
    /// </param>
    /// <param name="_replaceEvenIfSameBOMId">
    ///    A Boolean value that defines if the current picking list should be replaced, even if the BOM Id remains the same; optional.
    /// </param>
    public void setKanbanBOMId(
        BOMId   _bomId,
        boolean _updateKanbanJobPickingList = true
        ,
        boolean _replaceEvenIfSameBOMId     = false
        )
    {
        Kanban  kanban;

        if (this.bomId != _bomId)
        {
            ttsbegin;
            kanban               = Kanban::find(this.RecId,true);
            kanban.bomId         = _bomId;
            kanban.bomDataAreaId = kanban.bomId ? appl.company().dataArea(tableNum(BOMTable)) : '';
            kanban.update(_updateKanbanJobPickingList);
            ttscommit;
            this.reread();
        }
        else
        {
            if (_replaceEvenIfSameBOMId)
            {
                this.type().updateKanbanJobPickingList();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the kanban priority to the specified value.
    /// </summary>
    /// <param name="_priority">
    /// A <c>NoYes</c> enumeration value that indicates the new kanban priority setting.
    /// </param>
    /// <param name="_kanbanRefRecId">
    /// A record ID that identifies a <c>Kanban</c> record; optional.
    /// </param>
    /// <param name="_kanbanId">
    /// A <c>KanbanId</c> value that identifies a kanban; optional.
    /// </param>
    public void setPriority(
        NoYes          _priority       = NoYes::Yes,
        KanbanRefRecId _kanbanRefRecId = this.RecId,
        KanbanId       _kanbanId       = this.KanbanId)
    {
        Kanban  kanban;

        ttsbegin;
        //update current record, identified by recId or kanbanId
        if (   this.selectForUpdate()
            && ((_kanbanRefRecId
            &&   _kanbanRefRecId == this.RecId)
            ||  (_kanbanId
            &&   _kanbanId == this.KanbanId))
            && _priority != this.Express)
        {
            this.Express = _priority;
            this.update();
        }
        else
        {
            if (_kanbanRefRecId)
            {
                kanban = Kanban::find(_kanbanRefRecId,true);
            }
            else
            {
                if (_kanbanId)
                {
                    kanban = Kanban::findKanbanId(_kanbanId,true);
                }
            }
            if (   kanban
                && kanban.Express != _priority)
            {
                kanban.Express = _priority;
                kanban.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>KanbanStatus</c> instance from the current table buffer.
    /// </summary>
    /// <param name="_updateJobs">
    /// A Boolean value that specifies a parameter for the <c>KanbanStatus</c> object instantiation; optional.
    /// </param>
    /// <returns>
    /// A <c>KanbanStatus</c> object.
    /// </returns>
    public KanbanStatus status(boolean _updateJobs = true)
    {
        return KanbanStatus::newKanban(this,_updateJobs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>KanbanType</c> instance from the current table buffer.
    /// </summary>
    /// <returns>
    /// A <c>KanbanType</c> object.
    /// </returns>
    public KanbanType type()
    {
        return KanbanType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateKanbanJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the kanban jobs with changes in the kanban.
    /// </summary>
    /// <param name="_kanbanOrig">Original state of the <c>Kanban</c> record.</param>
    protected void updateKanbanJobs(Kanban _kanbanOrig)
    {
        if (this.QuantityOrdered != _kanbanOrig.QuantityOrdered
            || (this.Status != _kanbanOrig.Status
                &&  (this.Status == LeanKanbanStatus::Emptied
                    || _kanbanOrig.Status == LeanKanbanStatus::Emptied)))
        {
            KanbanJob   kanbanJob;
            
            ttsbegin;
            
            while select forupdate kanbanJob
                where kanbanJob.Kanban == this.RecId
            {
                // Ordered quantity
                if (this.QuantityOrdered != _kanbanOrig.QuantityOrdered)
                {
                    kanbanJob.QuantityOrdered = this.QuantityOrdered;
                }

                // Executable flag
                if (this.Status != _kanbanOrig.Status
                    && this.Status == LeanKanbanStatus::Emptied)
                {
                    kanbanJob.Executable = NoYes::No;
                }
                if (this.Status != _kanbanOrig.Status
                    && _kanbanOrig.Status == LeanKanbanStatus::Emptied)
                {
                    kanbanJob.Executable = kanbanJob.type().isExecutable(this);
                }

                kanbanJob.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the current table buffer.
    /// </summary>
    /// <param name="_allowUpdateKanbanJobPickingList">
    ///    A Boolean value that defines if the update call is allowed to update the picking list; optional.
    /// </param>
    public void update(boolean _allowUpdateKanbanJobPickingList = true)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        Kanban this_Orig = this.orig();

        this.status().updating();

        if (!this.validateWrite())
        {
            throw error("@SYS18447");
        }
         
        this.updateKanbanJobs(this_Orig);

        boolean mustUpdateDueDateTime = this.DueDateTime != this_Orig.DueDateTime;
        boolean mustUpdatePickingList = _allowUpdateKanbanJobPickingList && this.type().mustUpdateKanbanJobPickingList();

        super();
        
        if (mustUpdateDueDateTime)
        {
            KanbanDateCalculation::newStandard(this).setDueDateTime();
        }

        if (mustUpdatePickingList)
        {
            this.type().updateKanbanJobPickingList();
        }

        this.status().updated(this_Orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean result;

        result =    super()
                 && this.checkItemId()
                 && this.checkQuantityOrdered()
                 && this.checkQuantityReceived()
                 && this.checkDueDateTime()
                 && this.checkBOMId()
                 && this.checkLegalEntity();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes any kanban for the specified <c>KanbanRule</c> record.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>KanbanRule</c> table to delete kanban for.
    /// </param>
    public static void deleteForRule(KanbanRuleRefRecId _recId)
    {
        Kanban  kanban;

        if (_recId != 0)
        {
            select firstonly RecId from kanban
                    where kanban.KanbanRule == _recId;

            if (kanban.RecId != 0)
            {
                // as deletion is overriden, this is not a bulk deletion but
                // still handled kanban by kanban
                delete_from kanban
                    where kanban.KanbanRule == _recId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>Kanban</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>Kanban</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return _recId &&
               (select firstonly RecId from kanban
                    where kanban.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existKanbanId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>Kanban</c> table exists.
    /// </summary>
    /// <param name="_kanbanId">
    ///    The ID of the kanban record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existKanbanId(KanbanId _kanbanId)
    {
        return _kanbanId &&
               (select firstonly RecId from kanban
                    where kanban.KanbanId == _kanbanId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>Kanban</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>Kanban</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>Kanban</c> table; otherwise, an empty record.
    /// </returns>
    public static Kanban find(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        Kanban kanban;

        if (_recId)
        {
            kanban.selectForUpdate(_forUpdate);

            select firstonly kanban
                where kanban.RecId == _recId;
        }

        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findKanbanCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>Kanban</c> record for the specified card identifier.
    /// </summary>
    /// <param name="_recId">
    /// A record ID of the <c>KanbanCard</c> record that is related to the kanban to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>Kanban</c> table; otherwise, an empty record.
    /// </returns>
    public static Kanban findKanbanCard(
        RefRecId     _recId,
        boolean      _forUpdate = false)
    {
        Kanban      kanban;
        KanbanCard  kanbanCard;

        if (_recId)
        {
            kanban.selectForUpdate(_forUpdate);

            select firstonly kanban
                exists join kanbanCard
                    where kanbanCard.Kanban == kanban.RecId
                       && kanbanCard.RecId  == _recId;
        }

        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findKanbanCardId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>Kanban</c> record for the specified card identifier.
    /// </summary>
    /// <param name="_cardId">
    /// The card ID of the <c>Kanban</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>Kanban</c> table; otherwise, an empty record.
    /// </returns>
    public static Kanban findKanbanCardId(
        KanbanCardId _cardId,
        boolean      _forUpdate = false)
    {
        KanbanCard          kanbanCard;
        Kanban              kanban;

        if (_cardId)
        {
            kanban.selectForUpdate(_forUpdate);

            select firstonly kanban
                exists join kanbanCard
                    where kanbanCard.Kanban == kanban.RecId
                       && kanbanCard.CardId == _cardId;
        }

        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findKanbanId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>Kanban</c> table.
    /// </summary>
    /// <param name="_kanbanId">
    /// The kanban ID of the <c>Kanban</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>Kanban</c> table; otherwise, an empty record.
    /// </returns>
    public static Kanban findKanbanId(
        KanbanId _kanbanId,
        boolean  _forUpdate = false)
    {
        Kanban kanban;

        kanban.selectForUpdate(_forUpdate);

        if (_kanbanId)
        {
            select firstonly kanban
                where kanban.KanbanId == _kanbanId;
        }

        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findKanbanJobRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>Kanban</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the Kanban job that is related to the kanban to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>Kanban</c> table; otherwise, an empty record.
    /// </returns>
    public static Kanban findKanbanJobRecId(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        Kanban      kanban;
        KanbanJob   kanbanJob;

        if (_recId)
        {
            kanban.selectForUpdate(_forUpdate);

            select firstonly kanban
                exists join kanbanJob
                    where kanban.RecId    == kanbanJob.Kanban
                       && kanbanJob.RecId == _recId;
        }

        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParentKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds parrent kanbanb by it child in the pegging tree
    /// </summary>
    /// <param name="_sourceLine">
    /// Source document buffer.
    /// </param>
    /// <returns>
    /// Parent kanban if found.
    /// </returns>
    public static Kanban findParentKanban(Common _sourceLine)
    {
        Common common = _sourceLine;
        Kanban parentKanban;
        if (common)
        {
            do
            {
                common = ReqPeggingTreeNode::newStandard(common).parent();
            }
            while (common && !(common is Kanban));

            if (common)
            {
                parentKanban = common;
            }
        }

        return parentKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLeanKanbanType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the type of the provided Kanban Id.
    /// </summary>
    /// <param name="_kanbanId">
    /// The Id for the Kanban.
    /// </param>
    /// <returns>
    /// The lean kanban type of the found Kanban.
    /// </returns>
    public static LeanKanbanType getLeanKanbanType(KanbanId _kanbanId)
    {
        return Kanban::findKanbanId(_kanbanId).Type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOverdue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays whether a kanban is overdue.
    /// </summary>
    /// <param name="_dueDateTime">
    /// The due date and time of a kanban.
    /// </param>
    /// <param name="_expectedDateTime">
    /// The expected date and time for finishing the kanban.
    /// </param>
    /// <param name="_replenishmentStrategy">
    /// The rule replenishment strategy.
    /// </param>
    /// <param name="_replenishmentLeadTime">
    /// The lean replenishment lead time.
    /// </param>
    /// <returns>
    /// true if the kanban is late; otherwise, false.
    /// </returns>
    public static boolean isOverdue(
        KanbanDueDateTime           _dueDateTime,
        KanbanExpectedDateTime      _expectedDateTime,
        LeanReplenishmentStrategy   _replenishmentStrategy,
        LeanAverageTakt             _replenishmentLeadTime = 0.0)
    {
        boolean isOverdue = false;

        if (_replenishmentLeadTime ||
            _replenishmentStrategy != LeanReplenishmentStrategy::Fixed)
        {
            isOverdue = _dueDateTime < DateTimeUtil::getSystemDateTime();

            if (!isOverdue && _expectedDateTime)
            {
                isOverdue = _dueDateTime < _expectedDateTime;
            }
        }

        return isOverdue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs the go to main table action for a given kanban and caller.
    /// </summary>
    /// <param name="_kanban">
    ///     A <c>Kanban</c> record.
    /// </param>
    /// <param name="_caller">
    ///     The calling object.
    /// </param>
    public static void jumpRefKanban(
        Kanban _kanban,
        Object _caller)
    {
        Args args = new Args();
        args.caller(_caller);
        args.record(_kanban);

        new MenuFunction(menuitemDisplayStr(Kanban), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqKanbanId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the number sequence used for the <c>KanbanId</c> field.
    /// </summary>
    /// <param name="_makeDecisionLater">
    /// A Boolean value that is used when issuing numbers from the sequence.
    /// </param>
    /// <returns>
    /// A <c>NumberSeq</c> instance that can be used to retrieve IDs.
    /// </returns>
    public static NumberSeq numberSeqKanbanId(boolean _makeDecisionLater = true)
    {
        return NumberSeq::newGetNum(ProdParameters::numRefKanbanId(), _makeDecisionLater);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumOrderedQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total expected quantity for kanbans that are related to a given kanban rule.
    /// </summary>
    /// <param name="_kanbanRuleRefRecId">
    /// A record ID for the <c>KanbanRule</c> table.
    /// </param>
    /// <param name="_itemId">
    /// The item for which to calculate quantities.
    /// </param>
    /// <param name="_onlyInventoryControlled">
    /// A Boolean value that indicates whether only inventory controlled kanbans must be considered.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///  InventDim criteria to use for search.
    /// </param>
    /// <param name="_inventDimParm">
    /// InventDimParm to use for search.
    /// </param>
    /// <returns>
    /// The total ordered quantity of kanbans that are related to the given rule.
    /// </returns>
    public static KanbanQuantity sumOrderedQuantities(
        KanbanRuleRefRecId _kanbanRuleRefRecId,
        ItemId             _itemId,
        boolean            _onlyInventoryControlled = false,
        InventDim          _inventDimCriteria = null,
        InventDimParm      _inventDimParm = null)
    {
        KanbanJob           lastKanbanJob;
        KanbanJob           kanbanJob;
        Kanban              kanban;
        InventQty           quantityOrdered;
        InventDimGroupSetup inventDimGroupSetup;
        Inventdim           inventDim;

        while select sum(QuantityOrdered),IssueInventTransId,InventTransId,IssueInventDimId,InventDimId from lastKanbanJob
            where lastKanbanJob.QuantityReceived == 0
               && (lastKanbanJob.InventTransId      //do not check issue side
               ||  !_onlyInventoryControlled)
            join Type from kanban
                group by kanban.Type,lastKanbanJob.IssueInventTransId,lastKanbanJob.InventTransId,lastKanbanJob.IssueInventDimId,lastKanbanJob.InventDimId
                where kanban.RecId      == lastKanbanJob.Kanban
                   && kanban.KanbanRule == _kanbanRuleRefRecId
                   && kanban.ItemId     == _itemId
                   && (kanban.Status    == LeanKanbanStatus::NotAssigned
                   ||  kanban.Status    == LeanKanbanStatus::Assigned)
                #InventDimExistsJoin(kanban.inventDimId, inventDim, _inventDimCriteria, _inventDimParm)
                notexists join kanbanJob
                    where kanbanJob.Kanban   == kanban.RecId
                       && kanbanJob.Sequence >  lastKanbanJob.Sequence

        {
            switch (kanban.Type)
            {
                case LeanKanbanType::Manufacturing:
                    quantityOrdered += lastKanbanJob.QuantityOrdered;
                    break;
                case LeanKanbanType::Withdrawal:
                    //withdrawal kanban has just one job
                    if (!inventDimGroupSetup)
                    {
                        inventDimGroupSetup = InventDimGroupSetup::newItemId(_itemId);
                    }
                    //if transfer issue and receipt are on the same coverage dimension, do not count the receipt.
                    //exception: only inventory controlled jobs are cobnsidered and the the issue side is not inventory controlled (WIP receipt).
                    if (InventDim::isInventDimEqualCovDim(inventDimGroupSetup,lastKanbanJob.issueInventDim(),lastKanbanJob.inventDim()))
                    {
                        if (   _onlyInventoryControlled
                            && !lastKanbanJob.IssueInventTransId)
                        {
                            quantityOrdered += lastKanbanJob.QuantityOrdered;
                        }
                    }
                    else
                    {
                        quantityOrdered += lastKanbanJob.QuantityOrdered;
                    }
            }
        }

        return quantityOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS134894";
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the corresponding <c>ReqTrans</c> record for the current <c>Kanban</c> record.
    /// </summary>
    /// <param name="_reqPlanVersionRefRecId">
    /// The ID of the <c>ReqPlanVersion</c> record; optional.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>ReqTrans</c> record; otherwise, an empty record.
    /// </returns>
    public ReqTrans reqTrans(
                        RefRecId  _reqPlanVersionRefRecId = ReqPlanVersion::findActiveReqPlanIdDynamic().RecId,
                        boolean   _forupdate              = false)
    {
        ReqTrans  reqTrans;

        reqTrans.selectForUpdate(_forupdate);

        select firstonly reqTrans
                where reqTrans.PlanVersion  == _reqPlanVersionRefRecId
                   && reqTrans.RefType      == ReqRefType::Kanban
                   && reqTrans.RefId        == this.KanbanId
                   && reqTrans.DataAreaId   == this.ItemDataAreaId;

        return reqTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS131577</DeveloperDocumentation>
	<Label>@SYS131574</Label>
	<SingularLabel>@SYS131576</SingularLabel>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>KanbanId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>ProductionControl</Modules>
	<ReplacementKey>KanbanIdIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>KanbanJob</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>KanbanJob</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>KanbanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuantityOrdered</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>KanbanId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Activities</Name>
			<Label>@SYS343806</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FirstPlanActivityName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastPlanActivityName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOM</Name>
			<Label>@SYS3076</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dates</Name>
			<Label>@SYS30081</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DueDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmptiedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS5951</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>KanbanId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Kanban</Name>
			<Label>@SYS131576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Manual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>KanbanCard</Name>
			<Label>@SYS132011</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>KanbanCardId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LegalEntity</Name>
			<Label>@SYS331864</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Origin</Name>
			<Label>@SYS131582</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>KanbanRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Priority</Name>
			<Label>@SYS15156</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Express</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantities</Name>
			<Label>@SYS131583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuantityOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuantityReceived</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS36398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentJob</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CurrentJob</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanJobRefRecId</ExtendedDataType>
			<Label>@SYS131580</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DueDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanDueDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EmptiedDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanEmptiedDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ExpectedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanExpectedDateTime</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Express</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanExpress</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FirstPlanActivityName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanActivityName</ExtendedDataType>
			<Label>@SYS152896</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KanbanCardId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanCardId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KanbanId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>KanbanRule</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanRuleRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LastPlanActivityName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanActivityName</ExtendedDataType>
			<Label>@SYS152898</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LegalEntity</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Manual</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanManual</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QuantityOrdered</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanProductQuantity</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QuantityReceived</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanQuantityReceived</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LeanKanbanStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LeanKanbanType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>KanbanIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>KanbanId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>KanbanRuleIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>KanbanRule</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Type</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>KanbanCardId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>KanbanRuleLookupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>KanbanRule</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BOMTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Kanban</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMDataAreaId</Name>
					<Field>BOMDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMId</Name>
					<Field>BOMId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefaultDimension_Kanban</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Item</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Kanban</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemDataAreaId</Name>
					<Field>ItemDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Kanban</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransDataAreaId</Name>
					<Field>InventTransDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ItemInventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ItemInventoryDimensions</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Kanban</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimDataAreaId</Name>
					<Field>InventDimDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KanbanJob</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>KanbanJob</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CurrentKanbanJob</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Kanban</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrentJob</Name>
					<Field>CurrentJob</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KanbanRule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>KanbanRule</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Rule</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Kanban</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KanbanRule</Name>
					<Field>KanbanRule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LegalEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LegalEntity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Kanban</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>