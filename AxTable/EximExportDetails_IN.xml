<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximExportDetails_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EximExportDetails_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayAssessableValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets EximExportTrans_IN AssessableValue for specified RecId.
    /// </summary>
    /// <returns>Assessable Value</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display AmountMST displayAssessableValue()
    {
        EximExportTrans_IN exportTrans;

        select sum(AssessableValue)
            from exportTrans
            where exportTrans.ExportDetailsRecId == this.RecId;

        return exportTrans.AssessableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayShippingBillQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ShippingBillQty for CustomsShippingBillTrans_IN for specified ExportDetailsRecId.
    /// </summary>
    /// <returns>ShippingBillQty</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display Qty displayShippingBillQty()
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        EximExportTrans_IN          exportTrans;

        select sum(ShippingBillQty)
            from customsShippingBillTrans
        join CustomsShippingBillTransRecId,ExportDetailsRecId from exportTrans
            where exportTrans.CustomsShippingBillTransRecId == customsShippingBillTrans.RecId
               && exportTrans.ExportDetailsRecId            == this.RecId;

        return customsShippingBillTrans.ShippingBillQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ItemName from InventTable for specified ItemId.
    /// </summary>
    /// <returns>ItemName</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display ItemName itemName()
    {
        return InventTable::find(this.ItemId).itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if EximExportDetails_IN table record exists for specified EximAuthorizationSchemesTableRecId_IN and ItemId.
    /// </summary>
    /// <param name="_authorizationSchemesTableRecId">EximAuthorizationSchemesTableRecId_IN</param>
    /// <param name="_itemId">ItemId</param>
    /// <returns>true if EximExportDetails_IN record is found otherwise, false</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(
        EximAuthorizationSchemesTableRecId_IN _authorizationSchemesTableRecId,
        ItemId                                _itemId)
    {
        return _authorizationSchemesTableRecId
            && _itemId
            && (select firstonly RecId from  eximExportDetails_IN
                    where eximExportDetails_IN.AuthorizationSchemesTableRecId == _authorizationSchemesTableRecId
                       && eximExportDetails_IN.ItemId                         == _itemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximExportDetails_IN table for the specified RecId.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing EximExportDetails_IN table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximExportDetails_IN find(
        RefRecId            _recId,
        boolean             _forUpdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        EximExportDetails_IN eximExportDetails;

        eximExportDetails.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            eximExportDetails.concurrencyModel(_concurrencyModel);
        }

        select firstonly eximExportDetails
            where eximExportDetails.RecId == _recId;

        return eximExportDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySchemeRecIdItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximExportDetails_IN table for the specified EximAuthorizationSchemesTableRecId_IN and ItemId.
    /// </summary>
    /// <param name="_authorizationSchemesTableRecId">EximAuthorizationSchemesTableRecId_IN</param>
    /// <param name="_itemId">ItemId</param>
    /// <param name="_forUpdate">SelectForUpdate</param>
    /// <returns>EximExportDetails_IN table record</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximExportDetails_IN findBySchemeRecIdItemId(
        EximAuthorizationSchemesTableRecId_IN _authorizationSchemesTableRecId,
        ItemId                                _itemId,
        boolean                               _forUpdate = false)
    {
        EximExportDetails_IN exportDetails;

        if (_authorizationSchemesTableRecId && _itemId)
        {
            exportDetails.selectForUpdate(_forUpdate);

            select firstonly exportDetails
                where exportDetails.AuthorizationSchemesTableRecId == _authorizationSchemesTableRecId
                   && exportDetails.ItemId                         == _itemId;
        }

        return exportDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExportDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// inserts EximExportDetails_IN record for EximAuthorizationSchemesTableRecId and ItemId.
    /// </summary>
    /// <param name="_authorizationSchemesTableRecId">EximAuthorizationSchemesTableRecId</param>
    /// <param name="_itemId">ItemId</param>
    /// <returns>EximExportDetails_IN</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximExportDetails_IN insertExportDetails(
        RefRecId _authorizationSchemesTableRecId,
        ItemId   _itemId)
    {
        EximExportDetails_IN exportDetails;
        int                  lines = Global::infologLine();

        exportDetails = EximExportDetails_IN::findBySchemeRecIdItemId(_authorizationSchemesTableRecId, _itemId);

        try
        {
            if (!exportDetails)
            {
                exportDetails.ItemId                         = _itemId;
                exportDetails.AuthorizationSchemesTableRecId = _authorizationSchemesTableRecId;
                exportDetails.insert();
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            infolog.clear(lines);
        }

        return exportDetails;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS62456</DeveloperDocumentation>
	<Label>@GLS61553</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ExportImportIndia</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>AuthorizationItemIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuthorizationSchemesTableRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AuthorizationSchemesTableRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AuthorizationSchemesTableRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AuthorizationSchemesTableRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>EximAuthorizationSchemesTableRecId_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AuthorizationItemIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AuthorizationSchemesTableRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EximAuthorizationSchemesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximAuthorizationSchemesTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EximAuthorizationSchemesTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximAuthorizationSchemesTable_IN_EximExportDetails_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AuthorizationSchemesTableRecId</Name>
					<Field>AuthorizationSchemesTableRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>