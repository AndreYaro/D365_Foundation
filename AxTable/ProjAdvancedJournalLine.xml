<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjAdvancedJournalLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerDimensionAccountForCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the ledger dimension for a cost type project advanced journal line.
    /// </summary>
    /// <param name="_projAdvancedJournalLine">
    ///    A project advanced journal line record.
    /// </param>
    /// <returns>
    ///    The ledger dimension account for the provided cost project advanced journal line.
    /// </returns>
    public static LedgerDimensionAccount getLedgerDimensionAccountForCost(ProjAdvancedJournalLine _projAdvancedJournalLine)
    {
        LedgerDimensionAccount ledgerDimensionAccount;

        if (_projAdvancedJournalLine.TransType != ProjTransType::Cost)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        switch (_projAdvancedJournalLine.OffsetAccountType)
        {
            case LedgerJournalACType::Bank:
                ledgerDimensionAccount = BankAccountTable::findByLedgerDimension(_projAdvancedJournalLine.OffsetLedgerDimension).LedgerDimension;
                break;

            case LedgerJournalACType::Cust:
                ledgerDimensionAccount = CustLedgerAccounts::summaryLedgerDimension(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_projAdvancedJournalLine.OffsetLedgerDimension), '', false);
                break;

            case LedgerJournalACType::Vend:
                ledgerDimensionAccount = VendLedgerAccounts::summaryLedgerDimension(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_projAdvancedJournalLine.OffsetLedgerDimension), '', false);
                break;

            case LedgerJournalACType::Ledger:
                ledgerDimensionAccount = _projAdvancedJournalLine.OffsetLedgerDimension;
                break;

            case LedgerJournalACType::Project:
            case LedgerJournalACType::FixedAssets:
            default:
                throw error(strFmt("@Proj:AccountTypeIsNotSupported", _projAdvancedJournalLine.OffsetAccountType));
        }

        ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionAccount);

        return ledgerDimensionAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionAccountForHour</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the ledger dimension for an hour type project advanced journal line.
    /// </summary>
    /// <param name="_projAdvancedJournalLine">
    ///    A project advanced journal line record.
    /// </param>
    /// <param name="_accountingDistributionRecId">
    ///    Accounting distribution record.
    /// </param>
    /// <returns>
    ///    The ledger dimension account for the provided hour project advanced journal line.
    /// </returns>
    public static LedgerDimensionAccount getLedgerDimensionAccountForHour(ProjAdvancedJournalLine _projAdvancedJournalLine, AccountingDistributionRecId _accountingDistributionRecId = 0)
    {
        if (_projAdvancedJournalLine.TransType != ProjTransType::Hour)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;
        ProjFundingSource               projFundingSource;
        boolean                         projOpsEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();
        ProjCDSActualsImport            projCDSActualsImport = ProjCDSActualsImport::findByAdvancedJournalLine(_projAdvancedJournalLine.RecId);
        boolean                         projOpsProcurementCategoriesEnabled = FeatureStateProvider::isFeatureEnabled(ProjOpsEnableProcurementCategoriesFeature::instance());

        if (!projOpsEnabled || !projCDSActualsImport.intercompanyActual())
        {
            if (projOpsEnabled
                && projOpsProcurementCategoriesEnabled
                && _projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Ledger
                && _projAdvancedJournalLine.OffsetLedgerDimension
                && _projAdvancedJournalLine.DocumentType == ProjAdvancedJournalLineDocType::Purchase)
            {
                ledgerDimensionDefaultAccount = _projAdvancedJournalLine.OffsetLedgerDimension;
            }
            else if (_projAdvancedJournalLine.ProjDataAreaId == curext())
            {
                ProjectAccountingDistribution   projectAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(_accountingDistributionRecId);
                ProjTable                       projTable = ProjTable::findRecId(projectAccountingDistribution.ProjTable);
                ProjCategory                    projCategory = ProjCategory::findRecId(projectAccountingDistribution.ProjCategory);


                projFundingSource = ProjFundingSource::find(projectAccountingDistribution.ProjFundingSource);

                ledgerDimensionDefaultAccount = ProjPosting::getLedgerDimension(
                                                                ProjAccountType::PayrollAllocation,
                                                                projTable.ProjId,
                                                                projCategory.CategoryId,
                                                                projectAccountingDistribution.ProjFundingSource);
            }
            else // Default intercompany scenario
            {
                ledgerDimensionDefaultAccount = ProjPosting::getLedgerDimension(ProjAccountType::PayrollAllocation,
                                                                            '',
                                                                            '',
                                                                            0);
            }
        }
        else if(projOpsEnabled && _projAdvancedJournalLine.ProjDataAreaId != curext())
        {
            //This is intercompany scenario for intergrated advanced journal, we should pass borrowing company project id along with lending
            //company categoryId to get valid ledger dimension account.

            if (projOpsProcurementCategoriesEnabled
                && _projAdvancedJournalLine.OffsetAccountType == LedgerJournalACType::Ledger
                && _projAdvancedJournalLine.OffsetLedgerDimension
                && _projAdvancedJournalLine.DocumentType == ProjAdvancedJournalLineDocType::Purchase
                && ProjVendInvIntegrationAdvJournalPostingTypeFlight::instance().isEnabled())
            {
                ledgerDimensionDefaultAccount = _projAdvancedJournalLine.OffsetLedgerDimension;
            }
            else
            {
                ledgerDimensionDefaultAccount = ProjPosting::getLedgerDimension(
                                                            ProjAccountType::PayrollAllocation,
                                                            _projAdvancedJournalLine.ProjId,
                                                            _projAdvancedJournalLine.ProjCategoryId,
                                                            0,
                                                            false,
                                                            true,
                                                            "",
                                                            curExt(),
                                                            _projAdvancedJournalLine.ProjDataAreaId);
            }
        }

        LedgerDimensionAccount ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(
                                                                        ledgerDimensionDefaultAccount,
                                                                        _projAdvancedJournalLine.getResourceEmployment().DefaultDimension,
                                                                        projFundingSource.DefaultDimension);

        return ledgerDimensionAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionAccountForItem</Name>
				<Source><![CDATA[
    public static LedgerDimensionAccount getLedgerDimensionAccountForItem(ProjAdvancedJournalLine _projAdvancedJournalLine, AccountingDistributionRecId _accountingDistributionRecId = 0)
    {
        LedgerDimensionAccount ledgerDimensionAccount;

        if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            if (_projAdvancedJournalLine.OffsetLedgerDimension)
            {
                // Item lines that originate from integrated vendor invoice line document
                // will have offset ledger dimension populated and pointing to vendor invoice integration acccount
                // we are going to use it for offset account
                ledgerDimensionAccount = _projAdvancedJournalLine.OffsetLedgerDimension;
            }
            else
            {
                ProjFundingSource projFundingSource;
                LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount;

                if (_projAdvancedJournalLine.ProjDataAreaId == curext())
                {
                    ProjectAccountingDistribution projectAccountingDistribution = ProjectAccountingDistribution::findByAccountingDistribution(_accountingDistributionRecId);
                    projFundingSource = ProjFundingSource::find(projectAccountingDistribution.ProjFundingSource);

                    if (ProjOpsInventIssueLedgerDimensionFlight::instance().isEnabled() && _projAdvancedJournalLine.DocumentType == ProjAdvancedJournalLineDocType::Usage)
                    {
                        ledgerDimensionDefaultAccount = _projAdvancedJournalLine.getItemLedgerDimension(InventAccountType::InventIssue, _projAdvancedJournalLine.ItemId);
                    }
                    else
                    {
                        ProjTable projTable = ProjTable::findRecId(projectAccountingDistribution.ProjTable);
                        ProjCategory projCategory = ProjCategory::findRecId(projectAccountingDistribution.ProjCategory);
                        
                        ledgerDimensionDefaultAccount = ProjPosting::getLedgerDimension(
                                                                        ProjAccountType::OffsetAccountItem,
                                                                        projTable.ProjId,
                                                                        projCategory.CategoryId,
                                                                        projectAccountingDistribution.ProjFundingSource);
                    }
                }
                else
                {
                    //This is intercompany scenario for intergrated advanced journal, we should pass borrowing company project id along with lending
                    //company categoryId to get valid ledger dimension account.
                    ledgerDimensionDefaultAccount = ProjPosting::getLedgerDimension(
                                                                        ProjAccountType::OffsetAccountItem,
                                                                        _projAdvancedJournalLine.ProjId,
                                                                        _projAdvancedJournalLine.ProjCategoryId,
                                                                        0,
                                                                        false,
                                                                        true,
                                                                        "",
                                                                        curExt(),
                                                                        _projAdvancedJournalLine.ProjDataAreaId);
                }

                if (_projAdvancedJournalLine.ItemId
                    && _projAdvancedJournalLine.DocumentType == ProjAdvancedJournalLineDocType::Usage
                    // Enable to ensure product financial dimensions are defaulted for item journals for posting type inventory issue.
                    && FeatureStateProvider::isFeatureEnabled(ProjInventIssueAllowsOnlyProductDimensionsFeature::instance()))
                {
                    ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(
                                                                        ledgerDimensionDefaultAccount,
                                                                        InventTable::find(_projAdvancedJournalLine.ItemId).DefaultDimension,
                                                                        projFundingSource.DefaultDimension);
                }
                else
                {
                    ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(
                                                                        ledgerDimensionDefaultAccount,
                                                                        _projAdvancedJournalLine.getResourceEmployment().DefaultDimension,
                                                                        projFundingSource.DefaultDimension);
                }
            }
        }

        return ledgerDimensionAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceEmployment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the resource employment record for the project advanced journal line.
    /// </summary>
    /// <returns>
    ///     Employment record of the resource that is associated with the project advanced journal line.
    /// </returns>
    /// <remarks>
    ///     If the resource is not employed anymore, then this method will get the employment record related to the project advanced journal line date.
    ///     If the resource is still employed, then, this method will return the latest employment record for that resource in the current company.
    /// </remarks>
    public HcmEmployment getResourceEmployment()
    {
        HcmWorkerRecId hcmWorkerRecId = ResourceFacade::getWorker(this.ResourceId);

        HcmEmployment hcmEmployment = HcmEmployment::findByWorkerLegalEntity(hcmWorkerRecId, CompanyInfo::current());

        if (!hcmEmployment)
        {
            utcdatetime transDate = DateTimeUtil::newDateTime(this.ProjTransDate, 0, DateTimeUtil::getCompanyTimeZone());

            hcmEmployment = HcmEmployment::findByWorkerLegalEntity(hcmWorkerRecId, CompanyInfo::current(), transDate);
        }

        return hcmEmployment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (!this.Voucher)
        {
            this.Voucher = this.getNewProjAdvancedJournalVoucher();
        }

        if (!this.ProjTransId)
        {
            this.ProjTransId = ProjParameters::newTransId();
        }

        if (!this.ProjDataAreaId)
        {
            this.ProjDataAreaId = curExt();
        }

        this.defaultExchangeRates();

        if (!this.DefaultDimension)
        {
            this.setDefaultDimension();
        }

        if (this.TransType == ProjTransType::Cost)
        {
            this.defaultOffsetAccount();
        }

        this.defaultOverrideSalesTax();
        this.defaultTaxInformationFromProject();

        this.setLineNumber();

        if (this.TransType == ProjTransType::Hour)
        {
            this.setPSAIndirectComponentGroup();
        }

        this.SourceDocumentLine = 0;
        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);

        super();

        if (FeatureStateProvider::isFeatureEnabled(TaxProjOpsIntegrationJournal_INFeature::instance()))
        {
            if (TaxParameters::checkTaxParameters_IN())
            {
                this.SysExtensionSerializerMap::postInsert();
            }

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                this.markCurrentTaxDocumentTaxStatusDirty();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        boolean isTaxIntegrationEnabled = Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Project);
        boolean isTaxProjOpsIntegrtaionJournalEnabled = FeatureStateProvider::isFeatureEnabled(TaxProjOpsIntegrationJournal_INFeature::instance());
        ProjAdvancedJournalLine orig = this.orig();

        if (!isTaxProjOpsIntegrtaionJournalEnabled && !isTaxIntegrationEnabled)
        {
            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
        }

        super();

        if (isTaxProjOpsIntegrtaionJournalEnabled || isTaxIntegrationEnabled)
        {
            if (TaxParameters::checkTaxParameters_IN())
            {
                this.updateAssessableValue_IN(orig);
            }

            if (TaxParameters::checkTaxParameters_IN())
            {
                this.SysExtensionSerializerMap::postUpdate();
            }

            boolean isTaxDocumentTaxStatusDirty;

            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
                && this.SalesPurchJournalLine::taxRecalculationNeeded(orig))
            {
                this.markCurrentTaxDocumentTaxStatusDirty();
                isTaxDocumentTaxStatusDirty = true;
            }

            if (isTaxDocumentTaxStatusDirty || (TaxWithholdParameters_IN::checkTaxParameters() && this.taxWithholdRecalculationNeeded()))
            {
                this.getProjAdvancedJournal().deleteTaxWithholdForDocumentHeader_IN();
            }

            if (this.isDistributionUpdateNeeded(orig))
            {
                TaxProjOperationUtils::recalculateTax(this);
            }

            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssessableValue_IN</Name>
				<Source><![CDATA[
    private void updateAssessableValue_IN(ProjAdvancedJournalLine _origProjAdvancedJournalLine)
    {
        ProjAdvancedJournalLineTaxExtensionIN projAdvancedJournalLineTaxExtIN = this.projAdvancedJournalLineTaxExtensionIN();
        if (this.TransType == ProjTransType::Cost
            && this.ExtendedCost != _origProjAdvancedJournalLine.ExtendedCost)
        {
            projAdvancedJournalLineTaxExtIN.AssessableValueTransactionCurrency = this.ExtendedCost;
        }
        if (this.ExtendedPrice != _origProjAdvancedJournalLine.ExtendedPrice)
        {
            projAdvancedJournalLineTaxExtIN.ProjectSalesAssessableValueTransactionCurrency = this.ExtendedPrice;
        }
        this.packProjAdvancedJournalLineTaxExtensionIN(projAdvancedJournalLineTaxExtIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>ProjAdvancedJournalLine</c> table will update the withholding tax.
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The <c>ProjAdvancedJournalLine</c> record.
    /// </param>
    /// <returns>true if current line withholding tax should be recalculated, otherwise false.</returns>
    private boolean taxWithholdRecalculationNeeded(Common _origTransactionTable = this.orig())
    {
        ProjAdvancedJournalLine projAdvJournalLineOrig = _origTransactionTable;

        boolean updateNeeded =
            projAdvJournalLineOrig.checkTaxWithholdExpense_IN()
            && (this.OffsetAccountType != projAdvJournalLineOrig.OffsetAccountType
                || !LedgerDimensionFacade::areEqual(this.OffsetLedgerDimension, projAdvJournalLineOrig.OffsetLedgerDimension));

        return updateNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>ProjAdvancedJournalLine</c> table will update the tax.
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The <c>ProjAdvancedJournalLine</c> record.
    /// </param>
    /// <returns>True if current line tax should be recalculated, otherwise false.</returns>
    private boolean taxRecalculationNeeded(Common _origTransactionTable = this.orig())
    {
        ProjAdvancedJournalLine projAdvJournalLine_Orig = _origTransactionTable;
        boolean updateNeeded = (this.OffsetAccountType != projAdvJournalLine_Orig.OffsetAccountType
            || !LedgerDimensionFacade::areEqual(this.OffsetLedgerDimension, projAdvJournalLine_Orig.OffsetLedgerDimension));

        return updateNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjAdvancedJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the <c>ProjAdvancedJournal</c> record associated with the current project advanced journal line.
    /// </summary>
    /// <param name="_forupdate">
    ///     A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>ProjAdvancedJournal</c> table.
    /// </returns>
    public ProjAdvancedJournal getProjAdvancedJournal(boolean _forupdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        return ProjAdvancedJournal::find(this.ProjAdvancedJournal, _forupdate, _concurrencyModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the project advanced journal line is posted.
    /// </summary>
    /// <returns>
    ///     true if the project advanced journal line is posted; otherwise, false.
    /// </returns>
    public boolean isPosted()
    {
        ProjAdvancedJournal projAdvancedJournal;

        select firstonly Status from projAdvancedJournal
            where projAdvancedJournal.RecId == this.ProjAdvancedJournal;

        return projAdvancedJournal.isPosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNeverNoLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines whether the project advanced journal line should be posted to the general ledger.
    /// </summary>
    /// <returns>
    ///  true if the project advanced journal line should not be posted to the general ledger; otherwise, false.
    /// </returns>
    public boolean isNeverNoLedger()
    {
        boolean ret = false;
        if (this.TransType == ProjTransType::Hour && !ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            ProjTable projTable;
            ProjGroup projGroup;

            select firstonly crossCompany RecId from projTable
                    where projTable.ProjId == this.ProjId
                            && projTable.DataAreaId == this.ProjDataAreaId
                    exists join projGroup
                         where projTable.ProjGroupId == projGroup.ProjGroupId
                            && (projGroup.EmplTransCost == ProjLedgerStatus::None
                            || projGroup.EmplTransCost == ProjLedgerStatus::Never);

            ret = projTable.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldProcessSubcontractLineAsNeverLedger</Name>
				<Source><![CDATA[
    public boolean shouldProcessSubcontractLineAsNeverLedger()
    {
        return this.SubcontractLine
            && VendParameters::find().PostPackingSlip == NoYes::Yes
            && FeatureStateProvider::isFeatureEnabled(ProjEnableSubcontractActualsPostingFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Display method for the tax amount whether provided or computed.
    /// </summary>
    /// <param name = "_projAdvancedJournalLine">
    ///     Table record being displayed.
    /// </param>
    /// <returns>
    ///     The calculated or provided tax amount.
    /// </returns>
    display TaxAmountCur taxAmount()
    {
        if (this.ProvidedTaxAmount)
        {
            return this.ProvidedTaxAmount;
        }

        return this.CalculatedTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCalculatedTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the calculated tax amount on the provided project advanced journal line.
    /// </summary>
    /// <param name = "_projAdvancedJournalLine">
    ///     A project advanced journal line record.
    /// </param>
    /// <param name = "_taxAmountCur">
    ///     Tax amount to set the calculated tax amount field value to.
    /// </param>
    public static void updateCalculatedTaxAmount(ProjAdvancedJournalLineRecId _projAdvancedJournalLineRecId, TaxAmountCur _taxAmountCur = 0)
    {
        ProjAdvancedJournalLine projAdvancedJournalLine;

        ttsbegin;

        select forupdate firstonly CalculatedTaxAmount from projAdvancedJournalLine
            where projAdvancedJournalLine.RecId == _projAdvancedJournalLineRecId;

        projAdvancedJournalLine.CalculatedTaxAmount = _taxAmountCur;
        projAdvancedJournalLine.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultExchangeRates</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Default exchange rate fields if they have not been populated
    /// </summary>
    public void defaultExchangeRates()
    {
        if (this.CostExchangeRate == 0)
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                                            this.CostCurrency,
                                                                                            this.AccountingDate);

            this.CostExchangeRate = exchangeRateHelper.getCrossRate();
        }

        if (this.PriceExchangeRate == 0)
        {
            ProjInvoiceProjId projInvoiceProjId = ProjTable::find(this.ProjId).ProjInvoiceProjId;

            if (projInvoiceProjId)
            {
                ExchRate exchRate = ProjInvoiceCurrency::find(projInvoiceProjId, this.PriceCurrency).ExchRate;

                if (exchRate)
                {
                    // Attempt to default fixed exchange rate from contract
                    this.PriceExchangeRate = exchRate;
                }
            }

            if (this.PriceExchangeRate == 0)
            {
                // Default exchange rate from ledger
                ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                                                this.PriceCurrency,
                                                                                                this.AccountingDate);

                this.PriceExchangeRate = exchangeRateHelper.getCrossRate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNextLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the next available line number for a projected advanced journal line for this project advanced journal.
    /// </summary>
    /// <returns>
    ///     The next <c>LineNumber</c> for a project advanced journal line for this project advanced journal.
    /// </returns>
    public LineNumber calculateNextLineNumber()
    {
        LineNumber number;
        ProjAdvancedJournalLine projAdvancedJournalLine;

        select firstonly maxof(LineNumber) from projAdvancedJournalLine
            where projAdvancedJournalLine.ProjAdvancedJournal == this.ProjAdvancedJournal;

        number = projAdvancedJournalLine.LineNumber + 1.0;

        return number;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the default dimension from project and resource information.
    /// </summary>
    public void setDefaultDimension()
    {
        DimensionDefault defaultDimension = ResourceFacade::getDefaultDimension(this.ResourceId);

        if (this.ProjDataAreaId != curext())
        {
            // If this is an intercompany line, it should have only employee's dimension.
            this.DefaultDimension = defaultDimension;
        }
        else
        {
            DimensionDefault defaultDimensionBasedOnPriority;
            
            if (ProjFeatureStateHelper::isProjDefaultDimensionRuleFeatureEnabled())
            {
                defaultDimensionBasedOnPriority = ProjDefaultDimensionRule::getDefaultDimension(this.ProjId, this.ContractLineId);
            }
            else
            {
                defaultDimensionBasedOnPriority = ProjTable::find(this.ProjId).DefaultDimension;
            }

            //
            // If this is not an intercompany transaction, the financial dimensions should
            // be a merge of the dimensions from both resource, project and item (in case of item trans) from this line.
            // Also considering the legal entity while getting the default
            // dimension of resource as the resource could be employed by multiple entities.
            //
            if (this.TransType == ProjTransType::Item && ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
            {
                this.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(
                                                                                    defaultDimensionBasedOnPriority,
                                                                                    InventTable::find(this.ItemId).DefaultDimension,
                                                                                    defaultDimension);
            }
            else if (this.TransType == ProjTransType::Hour 
                && FeatureStateProvider::isFeatureEnabled(ProjAdvancedJournalEmployeeDimensionFeature::instance())
                && ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
            {
                // If this is an hour type transaction and the Employee Dimension Feature for Advanced Journals is turned on
                this.DefaultDimension = defaultDimensionBasedOnPriority;

                DimensionMerge dimensionMerge = DimensionMerge::newFromTable(this, CompanyInfo::findDataArea(this.ProjDataAreaId).RecId);
                DimensionDefault resourceDims = ResourceFacade::getDefaultDimensionByDate(this.ResourceId, DateTimeUtil::newDateTime(this.ProjTransDate, 0));
                this.DefaultDimension = dimensionMerge.merge(resourceDims, 0);
            }
            else
            {
                // Default logic without feature or if transaction type is Cost and the Employee Dimension Feature for Advanced Journals is turned on
                this.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(
                                                                            defaultDimensionBasedOnPriority,
                                                                            defaultDimension);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the line number for the project advanced journal to the next available line number.
    /// </summary>
    public void setLineNumber()
    {
        if (this.LineNumber == 0)
        {
            this.LineNumber = this.calculateNextLineNumber();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performTaxGroupLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs a lookup for a tax group for a project advanced journal line.
    /// </summary>
    /// <param name="_projAdvancedJournalLine">
    ///     A <c>ProjAdvancedJournalLine</c> record.
    /// </param>
    /// <param name="_formControl">
    ///     A field control for a Tax group field.
    /// </param>
    public static void performTaxGroupLookup(ProjAdvancedJournalLine _projAdvancedJournalLine, FormControl _formControl)
    {
        Query query = new Query();
        query.addDataSource(tableNum(TaxGroupHeading));

        if (_projAdvancedJournalLine.ProjDataAreaId != curext())
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(SysQuery::value(_projAdvancedJournalLine.ProjDataAreaId));
        }

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(TaxGroupHeading), _formControl);

        sysTableLookup.addLookupfield(fieldNum(TaxGroupHeading, TaxGroup));
        sysTableLookup.addLookupfield(fieldNum(TaxGroupHeading, TaxGroupName));

        sysTableLookup.addSelectionField(fieldNum(TaxGroupHeading, TaxGroup));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performTaxItemGroupLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs a lookup for a tax item group for a project advanced journal line.
    /// </summary>
    /// <param name="_projAdvancedJournalLine">
    ///     A <c>ProjAdvancedJournalLine</c> record.
    /// </param>
    /// <param name="_formControl">
    ///     A field control for a Tax item group field.
    /// </param>
    public static void performTaxItemGroupLookup(ProjAdvancedJournalLine _projAdvancedJournalLine, FormControl _formControl)
    {
        Query query = new Query();
        query.addDataSource(tableNum(TaxItemGroupHeading));

        if (_projAdvancedJournalLine.ProjDataAreaId != curext())
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(SysQuery::value(_projAdvancedJournalLine.ProjDataAreaId));
        }

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(TaxItemGroupHeading), _formControl);

        sysTableLookup.addLookupfield(fieldNum(TaxItemGroupHeading, TaxItemGroup));
        sysTableLookup.addLookupfield(fieldNum(TaxItemGroupHeading, Name));

        sysTableLookup.addSelectionField(fieldNum(TaxItemGroupHeading, TaxItemGroup));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxInformationFromProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Default tax groups and tax item groups for the project advanced journal line from project information.
    /// </summary>
    public void defaultTaxInformationFromProject()
    {
        TaxGroup localProjTaxGroup;
        TaxItemGroup localProjTaxItemGroup;

        // If intercompany and line is in lending LE
        if (this.ProjDataAreaId != this.DataAreaId && this.DataAreaId == curExt() && ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            [localProjTaxGroup, localProjTaxItemGroup] = this.getTaxInfoForIntercompany();

            TaxGroup taxGroup = this.TaxGroup;
            if (this.TransType == ProjTransType::Cost)
            {
                taxGroup = this.getTaxGroupFromOffset();
            }

            this.assignTaxGroups(localProjTaxGroup, localProjTaxItemGroup, taxGroup, localProjTaxItemGroup);
        }
        else
        {
            [localProjTaxGroup, localProjTaxItemGroup] = this.getTaxInfoFromProject();

            // Sales tax group will be fetched from offset account defined for expense lines.
            if (this.TransType == ProjTransType::Cost)
            {
                this.assignTaxGroups(localProjTaxGroup, localProjTaxItemGroup, this.getTaxGroupFromOffset(), localProjTaxItemGroup);
            }
            else
            {
                this.assignTaxGroups(localProjTaxGroup, localProjTaxItemGroup, localProjTaxGroup, localProjTaxItemGroup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignTaxGroups</Name>
				<Source><![CDATA[
    private void assignTaxGroups(TaxGroup _projTaxGroup, TaxItemGroup _projTaxItemGroup, TaxGroup _taxGroup, TaxItemGroup _taxItemGroup)
    {
        #ISOCountryRegionCodes

        if (!this.ProjectSalesTaxGroup)
        {
            this.ProjectSalesTaxGroup = _projTaxGroup;
        }

        if (!this.ProjectSalesTaxItemGroup)
        {
            this.ProjectSalesTaxItemGroup = _projTaxItemGroup;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]) || this.TransType == ProjTransType::Cost)
        {
            if (!this.TaxGroup)
            {
                this.TaxGroup = _taxGroup;
            }

            if (!this.TaxItemGroup)
            {
                this.TaxItemGroup = _taxItemGroup;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInfoFromProject</Name>
				<Source><![CDATA[
    private container getTaxInfoFromProject()
    {
        TaxGroup localTaxGroup;
        TaxItemGroup localTaxItemGroup;

        changecompany(this.ProjDataAreaId)
        {
            if (!this.ProjectSalesTaxGroup || !this.TaxGroup)
            {
                if (this.ProjId)
                {
                    localTaxGroup = ProjParameters::taxGroupInvoice(this.ProjId);
                }
            }

            if (!this.ProjectSalesTaxItemGroup || !this.TaxItemGroup)
            {
                if (this.TransType == ProjTransType::Item && ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
                {
                    localTaxItemGroup = ProjParameters::taxItemGroupItem(this.ProjCategoryId, this.ItemId);
                }
                else if (this.ProjCategoryId)
                {
                    localTaxItemGroup = ProjCategory::find(this.ProjCategoryId).TaxItemGroupId;
                }
                else
                {
                    localTaxItemGroup = TaxParameters::find().TaxItemGroup;
                }
            }
        }

        return [localTaxGroup, localTaxItemGroup];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInfoForIntercompany</Name>
				<Source><![CDATA[
    private container getTaxInfoForIntercompany()
    {
        TaxGroup localTaxGroup;
        TaxItemGroup localTaxItemGroup;

        if (this.DataAreaId != this.ProjDataAreaId && this.DataAreaId == curExt())
        {
            InterCompanyTradingPartner tradingPartner = InterCompanyTradingPartner::findTradingCustomer(this.DataAreaId, this.ProjDataAreaId);
            CustTable custTable = CustTable::findByPartyRecId(tradingPartner.CustomerParty);

            if (!tradingPartner || !custTable)
            {
                throw error(strFmt("@SYS4005055", this.ProjDataAreaId));
            }

            localTaxGroup = custTable.TaxGroup;

            if (this.ProjCategoryId)
            {
                localTaxItemGroup = ProjCategory::find(this.ProjCategoryId).TaxItemGroupId;
            }
            else
            {
                localTaxItemGroup = TaxParameters::find().TaxItemGroup;
            }
        }

        return [localTaxGroup, localTaxItemGroup];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxGroupFromOffset</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Default cost tax group from expense offset information.
    /// </summary>
    public void initTaxGroupFromOffset()
    {
        if (this.TransType == ProjTransType::Cost)
        {
            this.TaxGroup = this.getTaxGroupFromOffset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxGroupFromOffset</Name>
				<Source><![CDATA[
    private TaxGroup getTaxGroupFromOffset()
    {
        TaxGroup localTaxGroup;
        if (this.OffsetLedgerDimension)
        {
            if (this.OffsetAccountType == LedgerJournalACType::Cust)
            {
                localTaxGroup = CustTable::findByLedgerDimension(this.OffsetLedgerDimension).TaxGroup;
            }
            else if (this.OffsetAccountType == LedgerJournalACType::Vend)
            {
                localTaxGroup = VendTable::findByLedgerDimension(this.OffsetLedgerDimension).TaxGroup;
            }
            else if (this.OffsetAccountType == LedgerJournalACType::Ledger)
            {
                localTaxGroup =
                MainAccountLegalEntity::findByMainAccountLegalEntity(
                        LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.OffsetLedgerDimension).RecId,
                    CompanyInfo::current()).TaxGroup;
            }
        }

        return localTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxItemGroupFromOffset</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Default cost tax item group from offset information.
    /// </summary>
    public void initTaxItemGroupFromOffset()
    {
        if (this.TransType == ProjTransType::Cost)
        {
            if (this.OffsetAccountType == LedgerJournalACType::Ledger)
            {
                if (!MainAccountLegalEntity::findByMainAccountLegalEntity(
                LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.OffsetLedgerDimension).RecId,
                CompanyInfo::current()).TaxFree)
                {
                    this.TaxItemGroup = MainAccountLegalEntity::findByMainAccountLegalEntity(
                    LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.OffsetLedgerDimension).RecId,
                    CompanyInfo::current()).TaxItemGroup;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOffsetAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Default offset account type and account for expense transactions.
    /// </summary>
    public void defaultOffsetAccount()
    {
        if (this.TransType == ProjTransType::Cost)
        {
            boolean isProjectOperationsEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();

            boolean doDefaulting = !isProjectOperationsEnabled || this.OffsetLedgerDimension == 0;

            if (doDefaulting)
            {
                ProjDefaultOffsetSetup projDefaultOffsetSetup = ProjDefaultOffsetSetup::findDefaultOffsetAccount(this.ProjId, this.ProjCategoryId, this.ResourceId);

                if (projDefaultOffsetSetup)
                {
                    this.OffsetAccountType = projDefaultOffsetSetup.getLedgerOffsetType();

                    if (this.OffsetAccountType == LedgerJournalACType::Ledger)
                    {
                        DimensionDefault defaultDimensionBasedOnPriority;

                        if (ProjFeatureStateHelper::isProjDefaultDimensionRuleFeatureEnabled())
                        {
                            defaultDimensionBasedOnPriority = ProjDefaultDimensionRule::getDefaultDimension(this.ProjId, this.ContractLineId);
                        }
                        else
                        {
                            defaultDimensionBasedOnPriority = ProjTable::find(this.ProjId).DefaultDimension;
                        }

                        this.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(projDefaultOffsetSetup.LedgerDimension, defaultDimensionBasedOnPriority);
                    }
                    else
                    {
                        this.OffsetLedgerDimension = projDefaultOffsetSetup.parmLedgerDimension();

                        if (FeatureStateProvider::isFeatureEnabled(TaxProjOpsIntegrationJournal_INFeature::instance())
                            && TaxWithholdParameters_IN::checkTaxParameters()
                            && ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled()
                            && (this.OffsetAccountType == LedgerJournalACType::Cust
                                || this.OffsetAccountType == LedgerJournalACType::Vend))
                        {
                            this.initTDSAndTCSByCustVendAccount_IN(this.OffsetLedgerDimension, this.OffsetAccountType);
                        }
                    }
                }

                if (!this.TaxGroup)
                {
                    this.initTaxGroupFromOffset();
                }

                if (!this.TaxItemGroup)
                {
                    this.initTaxItemGroupFromOffset();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOverrideSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default override sales tax before <c>ProjAdvancedJournalLine</c> is created.
    /// </summary>
    internal void defaultOverrideSalesTax()
    {
        FieldId overrideSalesTaxFieldId = fieldNum(ProjAdvancedJournalLine, OverrideSalesTax);
        if (this.RecId == 0 && !this.isFieldSet(overrideSalesTaxFieldId))
        {
            // For hour/fee/item, it should avoid sales tax group and item sales tax group determination from tax calculation service.
            // There is no need to add tax calculation service control to avoid changes due to control switching.
            if (this.TransType == ProjTransType::Hour
                || this.TransType == ProjTransType::Item
                || this.TransType == ProjTransType::Revenue)
            {
                this.OverrideSalesTax = NoYes::Yes;
                this.fieldState(overrideSalesTaxFieldId, FieldState::Defaulted);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPSAIndirectComponentGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the indirect cost component group in a <c>ProjAdvancedJournalLine</c> record.
    /// </summary>
    public void setPSAIndirectComponentGroup()
    {
        PSAComponentGroupAssignment psaComponentGroupAssignment;

        if (this.ProjDataAreaId != curext())
        {
            changecompany(this.ProjDataAreaId)
            {
                psaComponentGroupAssignment = PSAComponentGroupAssignment::findAssignment(
                                                                                        this.ProjId,
                                                                                        this.ResourceId,
                                                                                        this.ProjCategoryId,
                                                                                        this.ProjTransDate,
                                                                                        '',
                                                                                        '');
            }
        }
        else
        {
            psaComponentGroupAssignment = PSAComponentGroupAssignment::findAssignment(
                                                                                    this.ProjId,
                                                                                    this.ResourceId,
                                                                                    this.ProjCategoryId,
                                                                                    this.ProjTransDate,
                                                                                    '',
                                                                                    '');
        }

        if (psaComponentGroupAssignment.RecId != 0)
        {
            this.psaIndirectComponentGroup = psaComponentGroupAssignment.IndirectComponentGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFinalSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the final sales price in the borrowing legal entity.
    /// </summary>
    /// <returns>
    ///     The final sales price.
    /// </returns>
    /// <remarks>
    ///     The unit price provided during integration is used as the intercompany transfer price.
    /// </remarks>
    public AmountCur calculateFinalSalesPrice()
    {
        boolean     priceFound;
        AmountCur   finalSalesPrice;

        if (this.TransType == ProjTransType::Hour)
        {
            changecompany (this.ProjDataAreaId)
            {
                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
                    this.ProjId,
                    this.ResourceId,
                    this.ProjCategoryId,
                    this.LinePropertyId,
                    this.UnitPrice,
                    this.PriceCurrency,
                    this.ProjTransDate,
                    '',
                    '',
                    '',
                    ResourceFacade::getResourceCategory(this.ResourceId, this.ProjTransDate));
                [finalSalesPrice, priceFound] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams, false);
            }
        }
        else if (this.TransType == ProjTransType::Cost)
        {
            changecompany (this.ProjDataAreaId)
            {
                ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
                    this.ProjId,
                    this.ResourceId,
                    this.ProjCategoryId,
                    this.UnitPrice,
                    this.CostCurrency,
                    this.PriceCurrency,
                    this.ProjTransDate,
                    '',
                    '',
                    '',
                    this.PriceExchangeRate);
                [finalSalesPrice, priceFound] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams, true, false);
            }
        }

        return finalSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewProjAdvancedJournalVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a new value for the <c>ProjAdvancedJournalVoucher</c> field from the number sequence framework
    /// </summary>
    private ProjAdvancedJournalVoucher getNewProjAdvancedJournalVoucher()
    {
        ProjAdvancedJournalVoucher projAdvancedJournalVoucher;

        NumberSequenceReference numberSequenceReference = ProjParameters::numRefProjAdvancedJournalVoucher();
        NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

        if (numberSequenceReference && numberSequenceTable)
        {
            if (!numberSequenceTable.Manual)
            {
                NumberSeq numberSeq = NumberSeq::newGetNumFromId(numberSequenceTable.RecId, true, true, null, false);

                if (numberSeq)
                {
                    projAdvancedJournalVoucher = numberSeq.num();
                }
            }
        }

        return projAdvancedJournalVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    public AccountingDate parmExchangeRateDate()
    {
        return this.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    public enumName parmSourceDocLineTypeEnumName()
    {
        return enumStr(SourceDocumentLine_ProjAdvancedJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return SourceDocumentLine_ProjAdvancedJournal::ProjAdvancedJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        return SourceDocumentHeader::find(this.getProjAdvancedJournal().SourceDocumentHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLineStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the accounting status of the source document line corresponding to this line.
    /// </summary>
    /// <returns>
    ///     A <c>SourceDocumentLineAccountingStatus</c> value.
    /// </returns>
    display SourceDocumentLineAccountingStatus sourceDocumentLineStatus()
    {
        SourceDocumentLine sourceDocumentLine;

        sourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine);

        return sourceDocumentLine.AccountingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>ProjAdvancedJournalLine</c> table.
    /// </summary>
    /// <param name="_projAdvancedJournalLine">
    ///     A <c>ProjAdvancedJournalLine</c> record ID.
    /// </param>
    /// <param name="_forupdate">
    ///     A boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>ProjAdvancedJournalLine</c> table.
    /// </returns>
    public static ProjAdvancedJournalLine find(
        ProjAdvancedJournalLineRecId    _projAdvancedJournalLine,
        boolean                         _forupdate = false,
        ConcurrencyModel                _concurrencyModel = ConcurrencyModel::Auto)
    {
        return ProjAdvancedJournalLine::findV2(_projAdvancedJournalLine, _forupdate, _concurrencyModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNoCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>ProjAdvancedJournalLine</c> table and ignores data from cache.
    /// </summary>
    /// <param name="_projAdvancedJournalLine">
    ///     A <c>ProjAdvancedJournalLine</c> record ID.
    /// </param>
    /// <param name="_forupdate">
    ///     A boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>ProjAdvancedJournalLine</c> table.
    /// </returns>
    public static ProjAdvancedJournalLine findNoCache(
        ProjAdvancedJournalLineRecId _projAdvancedJournalLine,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        const boolean CacheDisabled = true;
        return ProjAdvancedJournalLine::findV2(_projAdvancedJournalLine, _forupdate, _concurrencyModel, CacheDisabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findV2</Name>
				<Source><![CDATA[
    private static ProjAdvancedJournalLine findV2(
        ProjAdvancedJournalLineRecId _projAdvancedJournalLine,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto,
        boolean _cacheDisabled = false)
    {
        ProjAdvancedJournalLine projAdvancedJournalLine;
        projAdvancedJournalLine.disableCache(_cacheDisabled);

        projAdvancedJournalLine.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projAdvancedJournalLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly projAdvancedJournalLine
            where projAdvancedJournalLine.RecId == _projAdvancedJournalLine;

        return projAdvancedJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>ProjAdvancedJournalLine</c> table.
    /// </summary>
    /// <param name="_voucher">
    ///     A voucher.
    /// </param>
    /// <param name="_forupdate">
    ///     A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>ProjAdvancedJournalLine</c> table.
    /// </returns>
    public static ProjAdvancedJournalLine findByVoucher(
        ProjAdvancedJournalVoucher      _voucher,
        boolean                         _forupdate = false,
        ConcurrencyModel                _concurrencyModel = ConcurrencyModel::Auto)
    {
        ProjAdvancedJournalLine projAdvancedJournalLine;

        projAdvancedJournalLine.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projAdvancedJournalLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly projAdvancedJournalLine
            where projAdvancedJournalLine.Voucher == _voucher;

        return projAdvancedJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a <c>ProjAdvancedJournalLine</c> record with a specified source document line.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    ///     The record ID of the source document line.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///     A <c>ProjAdvancedJournalLine</c> record if found; otherwise, and empty record.
    /// </returns>
    public static ProjAdvancedJournalLine findBySourceDocumentLine(RefRecId _sourceDocumentLine, boolean _forUpdate = false)
    {
        ProjAdvancedJournalLine projAdvancedJournalLine;

        if (_sourceDocumentLine)
        {
            projAdvancedJournalLine.selectForUpdate(_forUpdate);
            select firstonly projAdvancedJournalLine where projAdvancedJournalLine.SourceDocumentLine == _sourceDocumentLine;
        }

        return projAdvancedJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOffsetInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the offset account type and offset account on an expense type project advanced journal line.
    /// </summary>
    /// <returns>
    ///     true if the offset information is valid; otherwise, false.
    /// </returns>
    public boolean validateOffsetInformation()
    {
        boolean ret = true;

        if (this.TransType == ProjTransType::Cost)
        {
            if (this.OffsetAccountType != LedgerJournalACType::Ledger
                && this.OffsetAccountType != LedgerJournalACType::Cust
                && this.OffsetAccountType != LedgerJournalACType::Vend
                && this.OffsetAccountType != LedgerJournalACType::Bank)
            {
                ret = checkFailed(strFmt("@Proj:OffsetAccountTypeInvalidForProjAdvancedJournalLineError", this.OffsetAccountType, this.Voucher));
            }

            if (!this.OffsetLedgerDimension)
            {
                ret = ret && checkFailed(strFmt("@Proj:ProjAdvancedJournalOffsetAccountMustBeProvidedError", this.Voucher));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the tax information on the project advanced journal line is valid.
    /// </summary>
    /// <returns>
    ///     true if the tax information is valid; otherwise, false.
    /// </returns>
    public boolean validateTaxInformation()
    {
        #ISOCountryRegionCodes

        boolean ret = true;
        boolean isTaxIntegrationEnabled = Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Project);

        if (this.ProvidedTaxAmount > 0
            && (!this.TaxGroup || !this.TaxItemGroup)
            && (!isTaxIntegrationEnabled
                || this.OverrideSalesTax == NoYes::Yes)
            && (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
                || !FeatureStateProvider::isFeatureEnabled(TaxProjOpsIntegrationJournal_INFeature::instance())))
        {
            ret = checkFailed(strFmt("@Proj:ProjAdvancedJournalLineTaxGroupNotProvidedForTaxAmountError", this.Voucher));
        }

        // Italian functionality of VAT books and VAT book sections
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]) && !isTaxIntegrationEnabled)
        {
            if (!TaxGroupData::checkTaxGroups(this.TaxGroup, this.TaxItemGroup))
            {
                ret = ret & checkFailed("@SYS21533");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {

            if (this.isPosted())
            {
                // Cannot delete a journal line that has been posted
                ret = ret && checkFailed(strFmt("@Proj:JournalLineCannotBeDeletedAlreadyPosted", this.Voucher));
            }

            if (ret 
                && this.Status != ProjAdvancedJournalLineStatus::Draft
                && FeatureStateProvider::isFeatureEnabled(ProjAdvancedJournalPostingEnhancementFeature::instance()))
            {
                ret = ret && checkFailed(strFmt("@Proj:DeleteIntegrationLineWarning", this.Voucher));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.isPosted())
            {
                // Cannot edit a line that has already been posted
                ret = ret && checkFailed(strFmt("@Proj:JournalLineCannotBeEditedAlreadyPosted", this.Voucher));
            }

            if (this.TransType == ProjTransType::Revenue
                && this.ProjDataAreaId != curExt())
            {
                // Intercompany not allowed for fee type lines.
                ret = ret && checkFailed(strFmt("@Proj:IntercompanyFeeTransactionsAreNotAllowed",
                    this.AccountingDate, this.ProjId, this.ProjCategoryId, this.ExtendedPrice));
            }

            boolean canHaveTaxGroupValues = (this.TransType == ProjTransType::Cost)
                || ((this.TransType == ProjTransType::Item || this.TransType == ProjTransType::Hour)
                    && ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled()
                    && FeatureStateProvider::isFeatureEnabled(ProjProjectOperationsProcurementIntegrationFeature::instance()));

            if (!canHaveTaxGroupValues)
            {
                if (this.TaxGroup)
                {
                    ret = ret && checkFailed(strFmt("@Proj:TaxGroupMustBeBlank",
                        fieldPName(ProjAdvancedJournalLine, TaxGroup),
                        fieldPName(ProjAdvancedJournalLine, TransType),
                        enum2Str(this.TransType)));
                }

                if (this.TaxItemGroup)
                {
                    ret = ret && checkFailed(strFmt("@Proj:TaxGroupMustBeBlank",
                        fieldPName(ProjAdvancedJournalLine, TaxItemGroup),
                        fieldPName(ProjAdvancedJournalLine, TransType),
                        enum2Str(this.TransType)));
                }
            }

            if (this.TransType == ProjTransType::Item && !this.ItemId && ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
            {
                ret = ret && checkFailed(strFmt("@SYS26332", "@SYS12836"));
            }

            if (!this.VatDueDate_W
                && TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::Project))
            {
                ret = ret && checkFailed(strFmt("@SYS26332", "@GLS109142"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        If (!this.isPosted())
        {
            ProjCDSActualsImport  projCDSActualsImport;

            ttsbegin;

            // Delete reference to project advanced journal on the actuals import records.
            update_recordset projCDSActualsImport
                setting ProjAdvancedJournalLine = 0,
                        IsProcessed = NoYes::No
                where projCDSActualsImport.ProjAdvancedJournalLine == this.RecId;

            if (FeatureStateProvider::isFeatureEnabled(TaxProjOpsIntegrationJournal_INFeature::instance()))
            {
                if (this.checkTaxWithholdExpense_IN())
                {
                    this.getProjAdvancedJournal().deleteTaxWithholdForDocumentHeader_IN();
                }

                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                {
                    this.markCurrentTaxDocumentTaxStatusDirty();
                    TaxEngineProjAdvancedJournalLineHeader::deleteByProjAdvancedJournalLine(this);
                }

                if (TaxIntegrationUtils::isTransitDocumentEnabled())
                {
                    this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProjectName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the project name with respect to the legal entity.
    /// </summary>
    /// <returns>
    /// The project name associated with the journal line.
    /// </returns>
    display Name displayProjectName()
    {
        ProjTable projTable = null;
        Name projectName;
        changecompany(this.ProjDataAreaId)
        {
            select firstonly Name from projTable
            where projTable.ProjId == this.ProjId;
            projectName = projTable.Name;
        }

        return projectName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDimSet</Name>
				<Source><![CDATA[
    public boolean modifyInventDimSet(InventDim _inventDim, Set _dimFieldIdSet)
    {
        InventDim inventDimLocal = InventDim::findOrCreate(_inventDim);
        InventDimId oldInventDimId = this.InventDimId;

        if (!this.ItemId || !InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, inventDimLocal))
        {
            return false;
        }

        var defaultingArguments = InventDistinctProductDimensionSpecificDefaultingArgs::construct(InventTable::find(this.ItemId), false, InventItemOrderSetupType::Invent);

        var inventDistinctProductOrderDefaultingController = InventDistinctProductOrderDefaultingController::constructFromFieldSet(_dimFieldIdSet);

        inventDimLocal = inventDistinctProductOrderDefaultingController.inventDimModified(ProjAdvJourLineItemDefaulting::construct(this), inventDimLocal, defaultingArguments);

        inventDistinctProductOrderDefaultingController.isProductDimensionModified();

        this.InventDimId = InventDim::findOrCreate(inventDimLocal).InventDimId;

        return this.InventDimId != oldInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventJourTransBuffer</Name>
				<Source><![CDATA[
    internal InventJournalTrans getInventJourTransBuffer()
    {
        InventJournalTrans inventJourTrans;
        inventJourTrans.ItemId = this.ItemId;
        inventJourTrans.InventDimId = this.InventDimId;
        inventJourTrans.ProjId = this.ProjId;
        inventJourTrans.JournalType = InventJournalType::project;

        return inventJourTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCostOnly</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isCostOnly(boolean _projOpsEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
    {
        boolean ret;
        if (_projOpsEnabled)
        {
            ProjCDSActualsImport cdsActual = ProjCDSActualsImport::findByAdvancedJournalLine(this.RecId);

            if (cdsActual)
            {
                ret = cdsActual.TransType == ProjCDSTransType::Cost;
            }
            else
            {
                // If cdsActual isnt found then fall back to guessing logic
                ret = this.ExtendedCost != 0;
            }
        }
        else
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesOnly</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isSalesOnly(boolean _projOpsEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
    {
        boolean ret;
        if (_projOpsEnabled)
        {
            ProjCDSActualsImport cdsActual = ProjCDSActualsImport::findByAdvancedJournalLine(this.RecId);

            if (cdsActual)
            {
                ret = cdsActual.TransType == ProjCDSTransType::Sales;
            }
            else
            {
                // If cdsActual isnt found then fall back to guessing logic
                ret = this.ExtendedPrice != 0;
            }
        }
        else
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>impliedDataAreaFieldNameDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DimensionObjectStorageTableReferenceProcessor), delegatestr(DimensionObjectStorageTableReferenceProcessor, impliedDataAreaFieldNameDelegate))]
    static void impliedDataAreaFieldNameDelegate(TableId _tableId, FieldId _fieldId, EventHandlerResult _result)
    {
        if (_tableId == tableNum(ProjAdvancedJournalLine))
        {
            switch(_fieldId)
            {
                case(fieldNum(ProjAdvancedJournalLine, OffsetLedgerDimension)):
                case(fieldNum(ProjAdvancedJournalLine, DefaultDimension)):
                    _result.result(fieldStr(ProjAdvancedJournalLine, ProjDataAreaId));
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemLedgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount getItemLedgerDimension(InventAccountType _inventAccountType, ItemId _itemId, boolean _throw = true)
    {
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount =
            InventPosting::itemLedgerDimensionFromParameter(InventPostingItemLedgerDimensionParameters::newFromParameters(_inventAccountType, _itemId));

        if (ledgerDimensionDefaultAccount == 0 && _throw)
        {
            error(strFmt("@Proj:NoAccountNumberExist", _inventAccountType, _itemId));
        }

        return ledgerDimensionDefaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projAdvancedJournalLineTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ProjAdvancedJournalLineTaxExtensionIN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>ProjAdvancedJournalLineTaxExtensionIN</c> associated with the current record.
    /// </returns>
    public ProjAdvancedJournalLineTaxExtensionIN projAdvancedJournalLineTaxExtensionIN()
    {
        #ISOCountryRegionCodes
        ProjAdvancedJournalLineTaxExtensionIN projAdvancedJournalLineTaxExtensionIN;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            projAdvancedJournalLineTaxExtensionIN = this.SysExtensionSerializerMap::getExtensionTable(tableNum(ProjAdvancedJournalLineTaxExtensionIN));
        }

        return projAdvancedJournalLineTaxExtensionIN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales purch journal table for tax model.
    /// </summary>
    /// <returns>
    /// The instance of the <c>SalesPurchJournalTable</c> class.
    /// </returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        return TaxEngineProjAdvancedJournalLineHeader::findOrCreateByJourIdVoucher(this.ProjAdvancedJournal, this.Voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packProjAdvancedJournalLineTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_projAdvancedJournalLineTaxExtensionIN">
    /// The extension table record.
    /// </param>
    public void packProjAdvancedJournalLineTaxExtensionIN(ProjAdvancedJournalLineTaxExtensionIN _projAdvancedJournalLineTaxExtensionIN)
    {
        _projAdvancedJournalLineTaxExtensionIN.ProjAdvancedJournalLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_projAdvancedJournalLineTaxExtensionIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks current tax status of <c>ProjAdvancedJournalLine</c> to dirty.
    /// </summary>
    public void markCurrentTaxDocumentTaxStatusDirty()
    {
        TaxEngineProjAdvancedJournalLineHeader transHeader = this.salesPurchJournalTable();
        TaxableDocumentDescriptor descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(transHeader);
        ITaxableDocument taxableDocument = TaxableDocumentObject::construct(descriptor);
        TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);

        if (this.ProvidedTaxAmount)
        {
            // For project advanced journal, provided tax amount is calculated when it has value and tax adjustment will be created.
            // So, here clean adjustment should be done together when tax document is marked dirty.
            TaxDocumentRowMeasureAdjustment::cleanAdjustmentForHeader(transHeader.TableId, transHeader.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionDefaultAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger dimension default account.
    /// </summary>
    /// <returns>The ledger dimension default account.</returns>
    public LedgerDimensionDefaultAccount getLedgerDimensionDefaultAccount()
    {
        switch (this.OffsetAccountType)
        {
            case LedgerJournalACType::Cust:
                CustTable custTable = CustTable::findByLedgerDimension(this.OffsetLedgerDimension);
                return CustLedgerAccounts::summaryLedgerDimension(custTable.AccountNum);

            case LedgerJournalACType::Vend:
                VendTable vendTable = VendTable::findByLedgerDimension(this.OffsetLedgerDimension);
                return VendLedgerAccounts::summaryLedgerDimension(vendTable.AccountNum);

            case LedgerJournalACType::Ledger:
                MainAccount mainAccount = MainAccount::findByLedgerDimension(this.OffsetLedgerDimension);
                return LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(this.OffsetLedgerDimension);

            default:
                return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        boolean isTaxProjOpsFeatureEnabled_IN = FeatureStateProvider::isFeatureEnabled(TaxProjOpsIntegrationJournal_INFeature::instance());

        switch (_fieldId)
        {
            case fieldNum(ProjAdvancedJournalLine, OffsetAccountType) :
                if (isTaxProjOpsFeatureEnabled_IN
                    && this.TransType == ProjTransType::Cost
                    && this.OffsetAccountType == LedgerJournalACType::Ledger
                    && TaxParameters::checkTaxParameters_IN()
                    && TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
                    && ProjAdvancedJournalPost::shouldProcessTaxes(this))
                {
                    // Clear Cust/Vend location in tax information when offset account changed to ledger.
                    TransTaxInformationHelper::resetCustVendLocationByTransTable(this);
                }
                break;

            case fieldNum(ProjAdvancedJournalLine, OffsetLedgerDimension) :

                if (isTaxProjOpsFeatureEnabled_IN
                    && this.TransType == ProjTransType::Cost
                    && ProjAdvancedJournalPost::shouldProcessTaxes(this))
                {
                    if (TaxWithholdParameters_IN::checkTaxParameters())
                    {
                        this.initTDSAndTCSByCustVendAccount_IN(this.OffsetLedgerDimension, this.OffsetAccountType);
                    }

                    if (TaxParameters::checkTaxParameters_IN()
                        && TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
                        && (this.OffsetAccountType == LedgerJournalACType::Vend
                            || this.OffsetAccountType == LedgerJournalACType::Cust))
                    {
                        TransTaxInformationHelper::resetCustVendLocationByTransTable(this);
                    }
                }
                break;

            case fieldNum(ProjAdvancedJournalLine, VatDueDate_W):
                if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::Project))
                {
                    TaxSpecificExchangeRate::updateOrDeleteByVATDueDate(this.TableId, this.RecId, this.VatDueDate_W);
                }
                break;

            default :
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTDSAndTCSByCustVendAccount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits TDS and TCS by CustVendAccount.
    /// </summary>
    /// <param name = "_OffsetLedgerDimension">ProjAdvancedJournalLine of offset ledger dimension.</param>
    /// <param name = "_ledgerJournalACType">ProjAdvancedJournalLine of project transaction type.</param>
    private void initTDSAndTCSByCustVendAccount_IN(
        DimensionDynamicAccount _OffsetLedgerDimension,
        LedgerJournalACType _ledgerJournalACType)
    {
        if (_OffsetLedgerDimension)
        {
            ProjAdvancedJournalLineTaxExtensionIN projAdvancedJournalLineTaxExtensionIN = this.projAdvancedJournalLineTaxExtensionIN();

            switch (_ledgerJournalACType)
            {
                case LedgerJournalACType::Vend :
                    VendTable vendTable = VendTable::findByLedgerDimension(_OffsetLedgerDimension);

                    projAdvancedJournalLineTaxExtensionIN.initTDSAndTCSFromVendor(vendTable.AccountNum);
                    this.packProjAdvancedJournalLineTaxExtensionIN(projAdvancedJournalLineTaxExtensionIN);
                    break;

                case LedgerJournalACType::Cust :
                    CustTable custTable = CustTable::findByLedgerDimension(_OffsetLedgerDimension);

                    projAdvancedJournalLineTaxExtensionIN.initTDSAndTCSFromCustomer(custTable.AccountNum);
                    this.packProjAdvancedJournalLineTaxExtensionIN(projAdvancedJournalLineTaxExtensionIN);
                    break;

                default :
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxWithholdExpense_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether project advanced journal line is expense and offset account is vendor to calculate Indian withholding tax.
    /// </summary>
    /// <returns>true if the project advanced journal line is expense and offset account is vendor; otherwise, false.</returns>
    public boolean checkTaxWithholdExpense_IN()
    {
        return TaxWithholdParameters_IN::checkTaxParameters()
            && this.TransType == ProjTransType::Cost
            && this.ExtendedCost
            && this.OffsetAccountType == LedgerJournalACType::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCalculateGST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether it can calculate GST for current record <c>ProjAdvancedJournalLine</c>.
    /// </summary>
    /// <returns>true if it can calculate GST; otherwise, false.</returns>
    public boolean canCalculateGST()
    {
        boolean ret =
            this.TransType == ProjTransType::Cost
            && this.ExtendedCost
            && (this.OffsetAccountType == LedgerJournalACType::Cust
                || this.OffsetAccountType == LedgerJournalACType::Vend
                || (this.OffsetAccountType == LedgerJournalACType::Ledger
                    && MainAccount::findByLedgerDimension(this.OffsetLedgerDimension).PostingType == LedgerPostingType::PurchCash))
            && ProjAdvancedJournalPost::shouldProcessTaxes(this);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingTypeForPartyTaxProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ledger posting type when the tax accounting provider is party.
    /// </summary>
    /// <returns>The ledger posting type for tax accounting provider - party.</returns>
    public LedgerPostingType getLedgerPostingTypeForPartyTaxProvider()
    {
        LedgerPostingType ledgerPostingType;
        switch (this.OffsetAccountType)
        {
            case LedgerJournalACType::Cust:
                ledgerPostingType = LedgerPostingType::CustBalance;
                break;
            case LedgerJournalACType::Vend:
                ledgerPostingType = LedgerPostingType::VendBalance;
                break;
            case LedgerJournalACType::Ledger:
                ledgerPostingType = LedgerPostingType::LedgerJournal;
                break;
            default:
                throw error(strFmt("@TaxProj:AccountTypeIsNotSupported", this.OffsetAccountType));
                break;
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDistributionUpdateNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>ProjAdvancedJournalLine</c> table buffer should update the associated <c>SourceDocumentDistribution</c> table.
    /// </summary>
    /// <param name = "_origJournalLine">The original journal line which is updated.</param>
    /// <returns>true, if the the associated <c>SourceDocumentDistribution</c> records should be updated; otherwise, false.</returns>
    protected boolean isDistributionUpdateNeeded(ProjAdvancedJournalLine _origJournalLine = this.orig())
    {
        return this.TaxGroup != _origJournalLine.TaxGroup
            || this.TaxItemGroup != _origJournalLine.TaxItemGroup
            || this.isDistributionUpdateNeededForTaxIntegration(_origJournalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDistributionUpdateNeededForTaxIntegration</Name>
				<Source><![CDATA[
    /// <summary>
    /// When tax integration is enabled, determines whether a change to the <c>ProjAdvancedJournalLine</c> table buffer should update the associated <c>SourceDocumentDistribution</c> table.
    /// </summary>
    /// <param name = "_origJournalLine">The original journal line which is updated.</param>
    /// <returns>true, if the the associated <c>SourceDocumentDistribution</c> records should be updated for tax integration; otherwise, false.</returns>
    protected boolean isDistributionUpdateNeededForTaxIntegration(ProjAdvancedJournalLine _origJournalLine = this.orig())
    {
        return Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Project)
            && (this.OverrideSalesTax != _origJournalLine.OverrideSalesTax
                || this.VatDueDate_W != _origJournalLine.VatDueDate_W
                || this.taxRecalculationNeeded(_origJournalLine)
                // Fields below can be changed via data entity or OData.
                || this.Quantity != _origJournalLine.Quantity
                || this.AccountingDate != _origJournalLine.AccountingDate
                || this.UnitCost != _origJournalLine.UnitCost
                || this.CostCurrency != _origJournalLine.CostCurrency
                || this.ExtendedCost != _origJournalLine.ExtendedCost
                || this.ProjId != _origJournalLine.ProjId
                || this.CostExchangeRate != _origJournalLine.CostExchangeRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalLineStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates Journal Line Status if the initial status condition match.
    /// </summary>
    /// <param name="_expectedStatusBeforeUpdate">The status <c>ProjAdvancedJournalLineStatus</c> before update.</param>
    /// <param name="_expectedStatusAfterUpdate">The status <c>ProjAdvancedJournalLineStatus</c> after update.</param>
    public void updateJournalLineStatus(ProjAdvancedJournalLineStatus _expectedStatusBeforeUpdate, ProjAdvancedJournalLineStatus _expectedStatusAfterUpdate)
    {
        ttsbegin;
        if (this.Status == _expectedStatusBeforeUpdate)
        {
            this.selectForUpdate(true);
            this.Status = _expectedStatusAfterUpdate;
            this.doUpdate();
        }
        else
        {
            throw error(strFmt("@Proj:JournalLineStatusUpdateFailed", this.RecId, this.Voucher, _expectedStatusBeforeUpdate, _expectedStatusAfterUpdate, this.Status));
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalLineStatusToDraft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the journal line Status field to Draft and log telemetry
    /// </summary>
    public void updateJournalLineStatusToDraft()
    {
        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(tableStr(ProjAdvancedJournalLine));
        using (var activityContext = logger.integrationJournalActivity().moveJournalInfoToDraft())
        {
            activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::AdvancedJournalLineId, int642Str(this.RecId));
            ttsbegin;
            this.selectForUpdate(true);
            this.Status = ProjAdvancedJournalLineStatus::Draft;
            this.PostError = NoYes::No;
            this.doUpdate();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously instantiated with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this, this.companyInfo().RecId))
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was previously instantiated with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when merging.
    /// Additionally, the entity specifier defaulting will be considered.
    /// </remarks>
    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this, this.companyInfo().RecId))
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    private CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:ProjectAdvancedJournalLine</DeveloperDocumentation>
	<FormRef>ProjAdvancedJournalLine</FormRef>
	<Label>@Proj:ProjectAdvancedJournalLine</Label>
	<SingularLabel>@Proj:ProjectAdvancedJournalLine</SingularLabel>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ProjAdvancedJournal</TitleField1>
	<TitleField2>Voucher</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>Voucher</PrimaryIndex>
	<ReplacementKey>Voucher</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SourceDocumentLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SourceDocumentLine</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjAdvancedJournalLine</Name>
			<Label>@SPS1213</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Text</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExtendedCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostPrice</Name>
			<Label>@SPS1244</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExtendedCost</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SPS1246</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategoryRoleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProvidedTaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalculatedTaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@SPS1245</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnitPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoicingSalesTax</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjectSalesTaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectSalesTaxGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjAdvancedJournal</Name>
			<ExtendedDataType>ProjAdvancedJournalRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransType</Name>
			<EnumType>ProjTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<ExtendedDataType>ProjAdvancedJournalVoucher</ExtendedDataType>
			<Label>@SYS12371</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AccountingDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<ExtendedDataType>ProjTransIdBase</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProjTransDate</Name>
			<ExtendedDataType>ProjTransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjDataAreaId</Name>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Label>@SYS305493</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNumber</Name>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Label>@SYS41087</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceId</Name>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceCategoryRoleId</Name>
			<ExtendedDataType>ResourceCategoryRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@SPS1204</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitCost</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS114275</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExtendedCost</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS13134</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostCurrency</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@Proj:CostCurrency</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostExchangeRate</Name>
			<ExtendedDataType>ExchRate</ExtendedDataType>
			<Label>@Proj:CostExchangeRate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitPrice</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SPS1245</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExtendedPrice</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS5755</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriceCurrency</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS56480</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceExchangeRate</Name>
			<ExtendedDataType>ExchRate</ExtendedDataType>
			<Label>@Proj:PriceExchangeRate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Text</Name>
			<ExtendedDataType>ProjAdvancedJournalText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<ExtendedDataType>SourceDocumentLineRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LinePropertyId</Name>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<ExtendedDataType>smmActivityId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
			<HelpText>@Proj:ItemSalesTaxGroupHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
			<HelpText>@Proj:SalesTaxGroupHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriceGroupId</Name>
			<ExtendedDataType>ProjPriceGroupID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<ConfigurationKey>SysDeletedObjects73</ConfigurationKey>
			<ExtendedDataType>LegalEntity</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAIndirectComponentGroup</Name>
			<ExtendedDataType>PSAIndirectComponentGroupId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OffsetAccountType</Name>
			<Label>@SYS23950</Label>
			<SysSharingType>Never</SysSharingType>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetLedgerDimension</Name>
			<ExtendedDataType>DimensionDynamicDefaultAccount</ExtendedDataType>
			<Label>@SYS11162</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProvidedTaxAmount</Name>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<Label>@Proj:ProvidedTaxAmount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CalculatedTaxAmount</Name>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<Label>@Proj:CalculatedTaxAmount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IntercompanyBilled</Name>
			<Visible>No</Visible>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjectSalesTaxItemGroup</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
			<HelpText>@Proj:BillingItemSalesTaxGroupHelpText</HelpText>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@Proj:BillingItemSalesTaxGroup</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjectSalesTaxGroup</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
			<HelpText>@Proj:BillingSalesTaxGroupHelpText</HelpText>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@Proj:BillingSalesTaxGroup</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemDescription</Name>
			<ExtendedDataType>Description255</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsIntegrationToggle</FeatureClass>
			<Label>@SYS58702</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsIntegrationToggle</FeatureClass>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdInventoried</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsIntegrationToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentType</Name>
			<FeatureClass>ProjProjectOperationsIntegrationToggle</FeatureClass>
			<EnumType>ProjAdvancedJournalLineDocType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsIntegrationToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractLineId</Name>
			<ExtendedDataType>PSAContractLineNum</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsIntegrationToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@Proj:ContractLineId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostError</Name>
			<ExtendedDataType>ProjOpsJournalLinePostError</ExtendedDataType>
			<FeatureClass>ProjEnableAdvancedJournalErrorTransferFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubcontractLine</Name>
			<ExtendedDataType>ProjSubcontractLine</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsSubcontractLineIntegrationToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MatchedVendorInvoice</Name>
			<ExtendedDataType>ProjMatchedVendorInvoice</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsSubcontractLineIntegrationToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<EnumType>ProjAdvancedJournalLineStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>VatDueDate_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VatDueDate_W</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Voucher</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>JournalEntryLineNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjAdvancedJournal</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>smmActivitiesIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueSetIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PSAIndirectComponentGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PSAIndirectComponentGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>IntercompanyBilledIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IntercompanyBilled</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjDataAreaIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjAdvancedJournalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjAdvancedJournal</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CostCurrency</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatCommodity</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverrideSalesTax</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
					<MapFieldTo>ProjTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjAdvancedJournal</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ProjAdvancedJournal</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjAdvancedJournal</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjAdvancedJournalLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjAdvancedJournal</Name>
					<Field>ProjAdvancedJournal</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjAdvancedJournalLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CostCurrency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CostCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjAdvancedJournalLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjAdvancedJournalLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjDataAreaId</Name>
					<Field>ProjDataAreaId</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjLineProperty</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjAdvancedJournalLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinePropertyId</Name>
					<SourceEDT>ProjLinePropertyId</SourceEDT>
					<Field>LinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjAdvancedJournalLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjDataAreaId</Name>
					<Field>ProjDataAreaId</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjAdvancedJournalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>ProjTaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjAdvancedJournalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>ProjTaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Resource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjAdvancedJournalLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceId</Name>
					<Field>ResourceId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceCategoryView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ResourceCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjAdvancedJournalLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceCategoryRoleId</Name>
					<Field>ResourceCategoryRoleId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmActivities</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjAdvancedJournalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>smmActivityId</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IsAccountingDistributionFor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsAccountingDistributedBy</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Worker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Worker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjAdvancedJournalLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<SourceEDT>HcmWorker</SourceEDT>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PSAIndirectComponentGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PSAIndirectComponentGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PSAIndirectComponentGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PSAIndirectComponentGroup_Timesheet</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAIndirectComponentGroup</Name>
					<Field>PSAIndirectComponentGroup</Field>
					<RelatedField>ComponentGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CompGrpIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OffsetfLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DescribesTheAccountingFor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AccountingDescribedBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetLedgerDimension</Name>
					<Field>OffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectSalesTaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjAdvancedJournalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjectSalesTaxGroup</Name>
					<SourceEDT>ProjTaxGroup</SourceEDT>
					<Field>ProjectSalesTaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectSalesTaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjAdvancedJournalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjectSalesTaxItemGroup</Name>
					<SourceEDT>ProjTaxItemGroup</SourceEDT>
					<Field>ProjectSalesTaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjEmplTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ProjEmplTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<Field>ProjTransId</Field>
					<RelatedField>TransIdRef</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransType</Name>
					<Field>TransType</Field>
					<ValueStr>ProjTransType::Hour</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Status</Name>
					<Field>Status</Field>
					<ValueStr>ProjAdvancedJournalLineStatus::Posted</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjCostTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ProjCostTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<Field>ProjTransId</Field>
					<RelatedField>TransIdRef</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransType</Name>
					<Field>TransType</Field>
					<ValueStr>ProjTransType::Cost</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Status</Name>
					<Field>Status</Field>
					<ValueStr>ProjAdvancedJournalLineStatus::Posted</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjRevenueTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ProjRevenueTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<Field>ProjTransId</Field>
					<RelatedField>TransIdRef</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransType</Name>
					<Field>TransType</Field>
					<ValueStr>ProjTransType::Revenue</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Status</Name>
					<Field>Status</Field>
					<ValueStr>ProjAdvancedJournalLineStatus::Posted</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjItemTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ProjItemTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<Field>ProjTransId</Field>
					<RelatedField>ProjTransIdRef</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransType</Name>
					<Field>TransType</Field>
					<ValueStr>ProjTransType::Item</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Status</Name>
					<Field>Status</Field>
					<ValueStr>ProjAdvancedJournalLineStatus::Posted</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>