<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetStatementInterval</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetStatementInterval extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAssets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the values specified for the intervals are overlapping.
    /// </summary>
    /// <returns>True if the ranges are valid; otherwise false.</returns>
    public boolean checkAssets()
    {
        boolean                ret = true;
        AssetStatementInterval tmpAssetStatementInterval;
     
        select firstonly RecId from  tmpAssetStatementInterval
            where tmpAssetStatementInterval.RecId                  != this.RecId                 
                && tmpAssetStatementInterval.AssetStatementLineNum == this.AssetStatementLineNum 
                && tmpAssetStatementInterval.AssetIntervalRelation == this.AssetIntervalRelation
                && tmpAssetStatementInterval.ToAsset               >= this.FromAsset             
                && tmpAssetStatementInterval.FromAsset             <= this.ToAsset;

        if (tmpAssetStatementInterval.RecId)
        {
            ret = checkFailed("@SYS77956");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// The insert method will only persist records if corresponding <c>AssetStatementRow</c> record type is Total,
    /// otherwise a warning message is displayed.
    /// </summary>
    public void insert()
    {
        if (AssetStatementRow::find(this.AssetStatementLineNum).RowType == RowType::Total)
        {
            this.modifyToAsset();
            super();
        }
        else
        {
            checkFailed(strfmt("@SYS77957", RowType::Total));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);
        switch (_fieldId)
        {
            case fieldNum(AssetStatementInterval, AssetIntervalRelation):
                if (this.orig().AssetIntervalRelation != this.AssetIntervalRelation)
                {
                    this.FromAsset = '';
                    this.ToAsset = '';
                }
                break;
            case fieldnum(AssetStatementInterval, FromAsset):
            case fieldnum(AssetStatementInterval, ToAsset):
                this.modifyToAsset();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyToAsset</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will overwrite <c>ToAsset</c> with <c>FromAsset</c> value if FromAsset value is greater than ToAsset.
    /// </summary>
    public void modifyToAsset()
    {
        if (this.FromAsset > this.ToAsset)
        {
            this.ToAsset = this.FromAsset;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.modifyToAsset();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(AssetStatementInterval, FromAsset),
                     fieldnum(AssetStatementInterval, ToAsset) :
                    ret = this.checkAssets();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(AssetStatementLineNum _lineNum)
    {
        boolean ret = true;

        if (!AssetStatementInterval::exist(_lineNum))
        {
            ret = checkFailed(strfmt(AssetStatementInterval::txtNotExist(), _lineNum));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(AssetStatementLineNum _lineNum)
    {
        boolean found;

        found = (select firstonly
                     RecId
                 from
                     assetStatementInterval
                 where
                     assetStatementInterval.AssetStatementLineNum == _lineNum).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static AssetStatementInterval find(
        AssetStatementLineNum _lineNum,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetStatementInterval      assetStatementInterval;

        assetStatementInterval.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetStatementInterval.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            assetStatementInterval
        where
            assetStatementInterval.AssetStatementLineNum == _lineNum;

        return assetStatementInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS100044";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<DeveloperDocumentation>@SYS127381</DeveloperDocumentation>
	<FormRef>AssetStatementInterval</FormRef>
	<Label>@SYS77892</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>FromAsset</TitleField1>
	<TitleField2>ToAsset</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RowIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>RowIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromAsset</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToAsset</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromAsset</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToAsset</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LineNuM</Name>
			<Label>@SYS27207</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetStatementLineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetIntervalRelation</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>AssetIntervalRelation</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssetStatementLineNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetStatementLineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FromAsset</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetIntervalRangeId</ExtendedDataType>
			<Label>@SYS4083</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToAsset</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetIntervalRangeId</ExtendedDataType>
			<Label>@SYS8828</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RowIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetStatementLineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromAsset</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToAsset</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FromIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FromAsset</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToAsset</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetStatementRow</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetStatementRow</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetStatementLineNum</Name>
					<SourceEDT>AssetStatementLineNum</SourceEDT>
					<Field>AssetStatementLineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>LineNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromAsset</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>FromAsset</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AssetIntervalRelation</Name>
					<Field>AssetIntervalRelation</Field>
					<ValueStr>AssetIntervalRelation::AssetId</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable_AssetTabkeInterval_ToAsset</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>AssetTable_AssetTabkeInterval_ToAsset</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetStatementInterval</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToAsset</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>ToAsset</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AssetIntervalRelation</Name>
					<Field>AssetIntervalRelation</Field>
					<ValueStr>AssetIntervalRelation::AssetId</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetGroup_AssetStatementInterval_FromGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>AssetGroup_AssetStatementInterval_FromGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromAsset</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>FromAsset</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AssetIntervalRelation</Name>
					<Field>AssetIntervalRelation</Field>
					<ValueStr>AssetIntervalRelation::AssetGroupId</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetGroup_AssetStatementInterval_ToGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>AssetGroup_AssetStatementInterval_ToGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetStatementInterval</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToAsset</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>ToAsset</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AssetIntervalRelation</Name>
					<Field>AssetIntervalRelation</Field>
					<ValueStr>AssetIntervalRelation::AssetGroupId</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>