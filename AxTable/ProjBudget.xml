<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudget</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjBudget extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditAllocationButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the Edit Allocation button on the <c>ProjBudget</c> form is enabled.
    /// </summary>
    /// <returns>
    ///    true if the current record is in the committed state; otherwise, false.
    /// </returns>
    public  boolean allowEditAllocationButton()
    {
        ProjBudgetAllocationLine        projBudgetAllocationLine;
        ProjBudgetLine                  projBudgetLine;
        boolean ret;

        if (this.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Created || this.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Submitted || this.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Rejected)
        {
            select firstonly RecId from projBudgetLine
            join OriginalAllocationAmount from projBudgetAllocationLine
            where projBudgetLine.RecId == projBudgetAllocationLine.ProjBudgetLine
            &&    projBudgetAllocationLine.OriginalAllocationAmount != 0
            &&    projBudgetLine.ProjBudget == this.RecId;

            if (projBudgetLine.RecId)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditBudgetForecastSelection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the forecast selection on the <c>ProjBudget</c> form is enabled.
    /// </summary>
    /// <returns>
    ///    true if the current record is in the created state; otherwise, false.
    /// </returns>
    public  boolean allowEditBudgetForecastSelection()
    {
        return ((this.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Created || this.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Rejected) ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditBudgetLineGrid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the budget line grid on the <c>ProjBudget</c> form is enabled.
    /// </summary>
    /// <returns>
    ///    true if the current record is in the created state; otherwise, false.
    /// </returns>
    public  boolean allowEditBudgetLineGrid()
    {
        return (this.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Created || this.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Rejected ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditFieldOriginalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the original amount field on the <c>ProjBudget</c> form is enabled.
    /// </summary>
    /// <returns>
    ///    true if the current record is in the created state; otherwise, false.
    /// </returns>
    public  boolean allowEditFieldOriginalAmount()
    {
        return (this.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Created || this.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Rejected ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditRevisionButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the Edit Revision button on the <c>ProjBudget</c> form is enabled.
    /// </summary>
    /// <returns>
    /// true if the current record is in amendment state; otherwise, false.
    /// </returns>
    public  boolean allowEditRevisionButton()
    {
        return (this.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Approved ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowNewRevisionCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the New Revision button on the <c>ProjBudget</c> form is enabled.
    /// </summary>
    /// <returns>
    /// true if the current record has approved workflow status and based on the project status; otherwise, false.
    /// </returns>
    public  boolean allowNewRevisionCreation()
    {
        return ((this.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Approved) && (ProjTable::find(this.RootProjId).Status != ProjStatus::Completed) ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowViewAllocationButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the View Allocation button on the <c>ProjBudget</c> form is enabled.
    /// </summary>
    /// <returns>
    ///    true if the current record is in the committed state; otherwise, false.
    /// </returns>
    public  boolean allowViewAllocationButton()
    {
        return (this.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Approved ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    public boolean canSubmitToWorkflow(str _workflowType = '')
    {
        ProjBudgetLine projBudgetLine;
        boolean ret;

        if (this.BudgetWorkflowStatus == ProjBudgetWorkflowStatus::Created)
        {
            select firstonly RecId from projBudgetLine
            where projBudgetLine.ProjBudget == this.RecId;

            ret = (projBudgetLine.RecId != 0);
        }
        else
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
       
        super();

        this.BudgetId = ProjParameters::newProjBudgetId();
        this.BudgetState = ProjBudgetState::Created;
        this.OriginalBudgetForecastModel  = ProjForecastModelHelper::getFirstForecastModelIdByProjBudgetType(ProjBudgetType::OriginalBudget);
        this.RemainingBudgetForecastModel = ProjForecastModelHelper::getFirstForecastModelIdByProjBudgetType(ProjBudgetType::RemainingBudget);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.validateWrite())
        {
            ttsbegin;
            super();
            this.syncBudgetLines();
            ttscommit;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjBudgetState</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the current project budget state by using the specified project state.
    /// </summary>
    /// <param name="_newProjBudgetState">
    ///    A <c>ProjBudgetState</c> value that indicates the state of project budget.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The current record is not selected for update.
    /// </exception>
    public void setProjBudgetState (ProjBudgetState _newProjBudgetState)
    {
        if (!this.selectForUpdate())
        {
            throw error(strFmt("@SYS68912",funcName()));
        }

        this.BudgetState = _newProjBudgetState;
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowStatus</Name>
				<Source><![CDATA[
    public void setWorkflowStatus(ProjBudgetWorkflowStatus _budgetWFStatus)
    {
        if (ProjBudget::validateStatusChange(this.BudgetWorkflowStatus, _budgetWFStatus))
        {
            ttsbegin;
            this.BudgetWorkflowStatus = _budgetWFStatus;
            this.update();
            ttscommit;
        }
        else
        {
            throw error(strFmt("@SYS108515", this.BudgetWorkflowStatus, _budgetWFStatus));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncBudgetLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Re-correct all related budget line entries
    /// to point to this budget
    /// </summary>
    /// <remarks>
    /// Association is determined by projId.
    /// </remarks>
    public void syncBudgetLines()
    {
        ProjBudgetLine projBudgetLine;
        update_recordset projBudgetLine
            setting ProjBudget = this.RecId
            where projBudgetLine.ProjId == this.RootProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>ProjBudget</c> table; if not, an error message
    ///    is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>ProjBudget</c> table record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist( RecId _recId)
    {
        boolean ret = true;

        if (!ProjBudget::exist(_recId))
        {
            ret = checkFailed(strFmt(ProjBudget::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>ProjBudget</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>ProjBudget</c> table record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                 from
                     projBudget
                 where
                     projBudget.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>ProjBudget</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record in the <c>ProjBudget</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record of the <c>ProjBudget</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static ProjBudget find(
        RecId   _recId,
        boolean _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        ProjBudget    projBudget;

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projBudget.concurrencyModel(_concurrencyModel);
        }

        if (_recId)
        {
            projBudget.selectForUpdate(_forUpdate);

            select firstonly projBudget
                where projBudget.RecId == _recId;
        }

        return projBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateProjectBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the specified record in the <c>ProjBudget</c> table.
    /// </summary>
    /// <param name="_rootProjId">
    /// The project ID whose project budget needs to find.
    /// </param>
    /// <returns>
    /// A record of the <c>ProjBudget</c> table.
    /// </returns>
    public static ProjBudget findOrCreateProjectBudget(ProjId _rootProjId)
    {
        ProjBudget      projBudget;

        if (_rootProjId)
        {
            select firstonly projBudget
            where projBudget.RootProjId == _rootProjId;

            if (!projBudget.RecId)
            {
                projBudget.initValue();
                projBudget.RootProjId = _rootProjId;
                projBudget.insert();
            }
        }
        return projBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastOriginalModelIdLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Filters the lookup for the <c>ForecastModelId</c> extended data type of the <c>ProjBudgetType</c>
    ///    field.
    /// </summary>
    /// <param name="_ctrl">
    ///    The form on which the lookup will be performed.
    /// </param>
    /// <param name="_projBudgetType">
    ///    A <c>ProjBudgetType</c> type value that defines which forecast model should be display.
    /// </param>
    public static void forecastOriginalModelIdLookup(FormStringControl _ctrl,ProjBudgetType _projBudgetType)
    {
        SysTableLookup          sysProjBudgetSourceLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        sysProjBudgetSourceLookup = SysTableLookup::newParameters(tableNum(ForecastModel), _ctrl, true);
        sysProjBudgetSourceLookup.addLookupfield(fieldNum(ForecastModel, ModelId));
        sysProjBudgetSourceLookup.addLookupfield(fieldNum(ForecastModel, Txt));

        if (_projBudgetType == ProjBudgetType::None)
        {
            sysProjBudgetSourceLookup.addLookupfield(fieldNum(ForecastModel, Type));
            sysProjBudgetSourceLookup.addLookupfield(fieldNum(ForecastModel, SubModelId));
        }

        // creating query
        queryBuildDataSource = query.addDataSource(tableNum(ForecastModel));

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(ForecastModel, ProjBudgetType));
        queryBuildRange.value(enum2str(_projBudgetType));

        sysProjBudgetSourceLookup.parmQuery(query);

        sysProjBudgetSourceLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjBudgetStatus</Name>
				<Source><![CDATA[
    public static void updateProjBudgetStatus(RecId _recId, ProjBudgetWorkflowStatus _budgetWFStatus)
    {
        ProjBudget projBudget = ProjBudget::find(_recId, true);

        if (projBudget.RecId && projBudget.BudgetWorkflowStatus != _budgetWFStatus)
        {
            projBudget.setWorkflowStatus(_budgetWFStatus);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatusChange</Name>
				<Source><![CDATA[
    public static boolean validateStatusChange(ProjBudgetWorkflowStatus _current,
                                               ProjBudgetWorkflowStatus _new)
    {
        boolean ret;

        if (_current == _new)
        {
            return true;
        }

        switch (_new)
        {
            case ProjBudgetWorkflowStatus::Created:
                ret = true;
                break;

            case ProjBudgetWorkflowStatus::Submitted:
                ret = _current == ProjBudgetWorkflowStatus::Created || _current == ProjBudgetWorkflowStatus::Rejected;
                break;

            case ProjBudgetWorkflowStatus::Approved:
                ret = _current == ProjBudgetWorkflowStatus::Submitted;
                break;

            case ProjBudgetWorkflowStatus::Rejected:
                ret = _current == ProjBudgetWorkflowStatus::Submitted;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current record is valid and ready to be written to the database.
    /// </summary>
    /// <returns>
    ///    true if the record is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method will be containing all the validation and these will be checked before adding
    ///    the record to table. Added the validation to check if Budget Forecast models are defined for
    ///    this Entity.
    /// </remarks>
    public boolean validateWrite()
    {
        boolean ret;
        ret = super();

        ret = ret && ProjForecastModelHelper::validateIfForecastModelsExist(this.OriginalBudgetForecastModel, this.RemainingBudgetForecastModel);
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS153506</DeveloperDocumentation>
	<Label>@SYS15292</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>BudgetId</TitleField1>
	<TitleField2>BudgetWorkflowStatus</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<ReplacementKey>BudgetIdIx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ProjBudgetSource</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjBudgetSource</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjBudgetLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjBudgetLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjBudgetRevision</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjBudgetRevision</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RootProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalBudgetForecastModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainingBudgetForecastModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetWorkflowStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RootProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetState</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetIdentification</Name>
			<Label>@SYS15292</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RootProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetWorkflowStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetState</Name>
			<Label>@SYS153322</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetState</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForecastSelection</Name>
			<Label>@SYS153345</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OriginalBudgetForecastModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainingBudgetForecastModel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BudgetId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjBudgetId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BudgetState</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjBudgetState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BudgetWorkflowStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjBudgetWorkflowStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OriginalBudgetForecastModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastModelId</ExtendedDataType>
			<Label>@SYS103933</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RemainingBudgetForecastModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastModelId</ExtendedDataType>
			<Label>@SYS107318</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RootProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjTableIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RootProjId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BudgetIdIx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjTable_ProjBudget</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RootProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>RootProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>