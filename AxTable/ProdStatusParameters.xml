<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdStatusParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdStatusParameters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>stepsAllowedByDefault</Name>
				<Source><![CDATA[
	/// <summary>
    /// Returns the steps allowed by default.
    /// </summary>
    /// <returns>A collection of allowed steps.</returns>
    protected static Set stepsAllowedByDefault()
    {
        // default allow one step forward and backward from current level
        // ended productions can not be reset.

        Set result = new Set(Types::Container);

        result.add([ProdStatusAll::Created, ProdStatusAll::CostEstimated]);
        result.add([ProdStatusAll::CostEstimated, ProdStatusAll::Created]);
        result.add([ProdStatusAll::CostEstimated, ProdStatusAll::OperationScheduled]);
        result.add([ProdStatusAll::CostEstimated, ProdStatusAll::JobScheduled]);
        result.add([ProdStatusAll::OperationScheduled, ProdStatusAll::CostEstimated]);
        result.add([ProdStatusAll::OperationScheduled, ProdStatusAll::JobScheduled]);
        result.add([ProdStatusAll::OperationScheduled, ProdStatusAll::Released]);
        result.add([ProdStatusAll::JobScheduled, ProdStatusAll::CostEstimated]);
        result.add([ProdStatusAll::JobScheduled, ProdStatusAll::OperationScheduled]);
        result.add([ProdStatusAll::JobScheduled, ProdStatusAll::Released]);
        result.add([ProdStatusAll::Released, ProdStatusAll::OperationScheduled]);
        result.add([ProdStatusAll::Released, ProdStatusAll::JobScheduled]);
        result.add([ProdStatusAll::Released, ProdStatusAll::Startup]);
        result.add([ProdStatusAll::Startup, ProdStatusAll::Released]);
        result.add([ProdStatusAll::Startup, ProdStatusAll::ReportedFinished]);
        result.add([ProdStatusAll::ReportedFinished, ProdStatusAll::Startup]);
        result.add([ProdStatusAll::ReportedFinished, ProdStatusAll::Completed]);

        return result;	
	}

]]></Source>
			</Method>
			<Method>
				<Name>checkExistCreate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if any records exist in the <c>ProdStatusParameters</c> table with the specified
    ///    <c>InventDimId</c> value, and creates a new record if one does not exist.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> value to search for; optional.
    /// </param>
    public static void checkExistCreate(InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        ProdStatusParameters  prodStatusInsert;

        if (!prodStatusInsert.isTmp() && !ProdStatusParameters::exist(_inventDimId))
        {
            var enum = ProdStatusParameters::stepsAllowedByDefault().getEnumerator();
			
            ttsbegin;

            while (enum.moveNext())
            {
                ProdStatusAll fromStatus, toStatus;                
                [fromStatus, toStatus] = enum.current();

                prodStatusInsert.FromProdStatus = fromStatus;
                prodStatusInsert.ToProdStatus   = toStatus;
				prodStatusInsert.InventDimId    = _inventDimId;
				prodStatusInsert.insert();                
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a copy of the company wide records and assigns to it the specified <c>InventDimId</c> value.
    /// </summary>
    /// <param name="_toInventDimId">
    ///    The <c>InventDimId</c> value to copy values to.
    /// </param>
    public static void copyFromDefault(InventDimId _toInventDimId)
    {
        ProdStatusParameters prodStatusParameters;
        ProdStatusParameters newProdStatusParameters;

        if (!ProdStatusParameters::exist(_toInventDimId))
        {
            while select prodStatusParameters
                    where prodStatusParameters.InventDimId == InventDim::inventDimIdBlank()
            {
                newProdStatusParameters.data(prodStatusParameters);
                newProdStatusParameters.InventDimId = _toInventDimId;
                newProdStatusParameters.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks to see if a record exists with the specified <c>InventDimId</c> value.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> value to search for.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(InventDimId _inventDimId)
    {
        return (select firstonly RecId
                from prodStatusParameters
                where prodStatusParameters.InventDimId == _inventDimId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existFromTo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if a record exists with the specified from and to status values.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> value to search for.
    /// </param>
    /// <param name="_fromStatus">
    ///    The <c>ProdStatusParameters.FromProdStatus</c> value to search for.
    /// </param>
    /// <param name="_toStatus">
    ///    The <c>ProdStatusParameters.ToProdStatus</c> value to search for.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existFromTo(InventDimId _inventDimId, ProdStatusAll _fromStatus, ProdStatusAll  _toStatus)
    {
        return (select firstonly RecId
                from prodStatusParameters
                where prodStatusParameters.FromProdStatus == _fromStatus    &&
                      prodStatusParameters.ToProdStatus   == _toStatus      &&
                      prodStatusParameters.InventDimId    == _inventDimId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds <c>ProdStatusParameters</c> records based on an <c>InventDimId</c> value.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> value to search for.
    /// </param>
    /// <param name="_fromStatus">
    ///    The <c>ProdStatusParameters.FromProdStatus</c> value to search for.
    /// </param>
    /// <param name="_toStatus">
    ///    The <c>ProdStatusParameters.ToProdStatus</c> value to search for.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <param name="_useInventDimDirectly">
    ///    A Boolean value that determines whether the lookup should be performed directly without regards to
    ///    settings from the <c>ProdParameters</c> table; optional.
    /// </param>
    /// <returns>
    ///    The <c>ProdStatusParameters</c> records that correspond to the specified <c>InventDimId</c> value.
    /// </returns>
    public static ProdStatusParameters find(
        InventDimId    _inventDimId,
        ProdStatusAll  _fromStatus,
        ProdStatusAll  _toStatus,
        boolean        _forUpdate = false,
        boolean        _useInventDimDirectly = false)
    {
        ProdStatusParameters prodStatusParameters;

        if ( _toStatus != _fromStatus)
        {
            if (!_useInventDimDirectly)
            {
                _inventDimId = ProdParameters::resolveInventDimId(_inventDimId);

                if (_inventDimId != InventDim::inventDimIdBlank() && !ProdStatusParameters::exist(_inventDimId))
                {
                    _inventDimId = InventDim::inventDimIdBlank();
                }
            }

            prodStatusParameters.selectForUpdate(_forUpdate);

            select firstonly prodStatusParameters
                index hint FromToStatusIdx
                where prodStatusParameters.FromProdStatus == _fromStatus    &&
                      prodStatusParameters.ToProdStatus   == _toStatus      &&
                      prodStatusParameters.InventDimId    == _inventDimId;
        }
        return prodStatusParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or deletes the status parameter record to match the desired state. 
    /// </summary>
    /// <param name = "_inventDimId">The inventory dimension id. The dimension must either be blank or only contain a site.</param>
    /// <param name = "_fromStatus">The from status.</param>
    /// <param name = "_toStatus">The to status.</param>
    /// <param name = "_enabled">true if the parameter should be enabled; otherwise, false.</param>
    public static void updateParameter(InventDimId _inventDimId, ProdStatusAll  _fromStatus, ProdStatusAll _toStatus, boolean _enabled)
    {
        boolean recordExist = ProdStatusParameters::existFromTo(_inventDimId, _fromStatus, _toStatus);
        
        if (_enabled != recordExist)
        {
            ProdStatusParameters statusParameter;
            if (!recordExist)
            {
                statusParameter.FromProdStatus = _fromStatus;
                statusParameter.ToProdStatus   = _toStatus;
                statusParameter.InventDimId    = _inventDimId;
                statusParameter.insert();
            }
            else
            {
                delete_from statusParameter
                    where statusParameter.FromProdStatus    == _fromStatus
                       && statusParameter.ToProdStatus      == _toStatus
                       && statusParameter.InventDimId       == _inventDimId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<DeveloperDocumentation>@SYS124194</DeveloperDocumentation>
	<Label>@SYS90893</Label>
	<SingularLabel>@SYS96130</SingularLabel>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>FromProdStatus</TitleField1>
	<TitleField2>ToProdStatus</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>FromToStatusIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>FromToStatusIdx</PrimaryIndex>
	<ReplacementKey>FromToStatusIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromProdStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToProdStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromProdStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToProdStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AllFields</Name>
			<Label>@SYS6047</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToProdStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromProdStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FromProdStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS90894</Label>
			<Mandatory>Yes</Mandatory>
			<EnumType>ProdStatusAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ToProdStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS90896</Label>
			<Mandatory>Yes</Mandatory>
			<EnumType>ProdStatusAll</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FromToStatusIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromProdStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToProdStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ProdParametersDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124195</EntityRelationshipRole>
			<RelatedTable>ProdParametersDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionParametersBySite</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProductionStatusSetup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>InventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>