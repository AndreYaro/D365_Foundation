<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBook</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetBook extends common
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acquisitionDocumentNum_W</Name>
				<Source><![CDATA[
    display DocumentNum acquisitionDocumentNum_W()
    {
        return AssetTrans::findLastType_W(this.AssetId, this.BookId, AssetTransType::Acquisition).DocumentNum_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetAcquisitionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the Czech acquisition value for an asset and asset book.
    /// </summary>
    /// <returns>
    /// The Czech acquisition value of the asset.
    /// </returns>
    /// <remarks>
    /// This is a display method that is used on the SSRS asset card report.
    /// </remarks>
    public display AssetAcquisitionValue assetAcquisitionValue()
    {
        AssetSumCalc_Trans assetSumCalc_Trans = AssetSumCalc_Trans::newAssetYear(this.AssetId, this.BookId);
        return assetSumCalc_Trans.acquisitionValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetAcquisitionValueReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the Czech acquisition value in reporting currency for an asset and asset book.
    /// </summary>
    /// <returns>
    /// The Czech acquisition value in reporting currency of the asset.
    /// </returns>
    /// <remarks>
    /// This is a display method that is used on the SSRS asset card report.
    /// </remarks>
    public display AssetAcquisitionValue assetAcquisitionValueReportingCurrency()
    {
        AssetSumCalc_Trans assetSumCalc_Trans = AssetSumCalc_Trans::newAssetYearByCurrency(this.AssetId, this.BookId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), AssetYear::All, AssetSumCalcType::Reporting);
        return assetSumCalc_Trans.acquisitionValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetBookTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method is used to find the AssetBookTable.
    /// </summary>
    /// <returns>
    ///     Returns AssetBookTable
    /// </returns>
    public AssetBookTable assetBookTable()
    {
        return AssetBookTable::find(this.BookId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetGroup</Name>
				<Source><![CDATA[
    public AssetGroup assetGroup()
    {
        return AssetGroup::find(this.assetTable().AssetGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetLocation</Name>
				<Source><![CDATA[
    display AssetLocationId assetLocation()
    {
        return this.assetTable().Location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetName</Name>
				<Source><![CDATA[
    display AssetName assetName()
    {
        return this.assetTable().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetNetBookValue</Name>
				<Source><![CDATA[
    display AssetNetBookValue assetNetBookValue()
    {
        return AssetSumCalc_Trans::newAssetYear(this.AssetId, this.BookId).netBookValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetNetBookValueReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the netbook value in reporting currency.
    /// </summary>
    /// <returns>returns reporting currency netbook value.</returns>
    display AssetNetBookValue assetNetBookValueReportingCurrency()
    {
        return AssetSumCalc_Trans::newAssetYearByCurrency(this.AssetId, this.BookId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), AssetYear::All, AssetSumCalcType::Reporting).netBookValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetTable</Name>
				<Source><![CDATA[
    public AssetTable assetTable()
    {
        return AssetTable::find(this.AssetId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAssetScrapValueByDate_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the asset scrap value of the asset book.
    /// </summary>
    /// <param name="_assetTransDate">
    /// the asset trans date to calculate the scrap value.
    /// </param>
    /// <returns>
    /// return the scrap value base on "_assetTransDate", else return current scrape value if scrap rate is zero.
    /// </returns>
    public AssetScrapValue calcAssetScrapValueByDate_CN(AssetTransDate _assetTransDate)
    {
        AssetScrapRate_CN   scrapRate = AssetBookTable::find(this.BookId).ExpectedScrapRate_CN;
        AssetScrapValue     scrapValueThisMonth;
        AssetAmount         acquisitionAmount;
        AssetAmount         prevAmountToDepreciate;
        TransDate           adjustTransDate;
        AssetTableInterval  deprInterval;

        acquisitionAmount = AssetTrans::acquisitionAmount(this.AssetId, _assetTransDate, this.BookId);

        if (scrapRate == 0 || acquisitionAmount == 0)
        {
            scrapValueThisMonth = this.ScrapValue;
        }
        else
        {
            deprInterval = AssetTableInterval::construct(this.depreciationProfile(), this.assetBookTable().FiscalCalendar);
            prevAmountToDepreciate = AssetTrans::amountToDepriciate(this.AssetId, _assetTransDate, this.BookId);

            if (this.DepreciationConvention == AssetDepreciationConvention::None)
            {
                adjustTransDate = deprInterval.startOfPeriod(_assetTransDate) - 1;
                adjustTransDate = deprInterval.endPeriod(adjustTransDate);
            }
            else
            {
                adjustTransDate = _assetTransDate;
            }

            // Revaluation will not be calculated
            prevAmountToDepreciate -= AssetTrans::amountMSTPerDateTranstype(this.AssetId, adjustTransDate, this.BookId, AssetTransType::Revaluation);

            scrapValueThisMonth = prevAmountToDepreciate * scrapRate / 100;
        }

        return scrapValueThisMonth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDepreciationEndDate_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns depreciation end date on the asset value model
    /// </summary>
    /// <returns>
    /// return depreciation end date
    /// </returns>
    public TransDate calcDepreciationEndDate_CN()
    {
        Integer         numberOfYear;
        TransDate       deprEndDate;
        utcdatetime     utcDeprEndDate;
        #define.RoundUp(1)
        #define.OneDay(1)
        #define.ZeroTime(0)

        utcDeprEndDate = DateTimeUtil::newDateTime(this.DepreciationStartDate, #ZeroTime);

        if (this.ServiceLife > 0
            && utcDeprEndDate)
        {
            numberOfYear = real2int(this.ServiceLife);
            if (this.ServiceLife > numberOfYear)
            {
                numberOfYear = numberOfYear + #RoundUp;
            }
            utcDeprEndDate = DateTimeUtil::addYears(utcDeprEndDate, numberOfYear);
            deprEndDate = DateTimeUtil::date(utcDeprEndDate) - #OneDay;
        }

        return deprEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDepreciationPreviousMonthEndDate_CN</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method returns the previous month of the depreciation end date on the asset value model.
    ///  If the depreciation end date is end, Have to set
    /// </summary>
    /// <returns>
    /// return depreciation end date for previous month
    /// </returns>
    public TransDate calcDepreciationPreviousMonthEndDate_CN()
    {
        TransDate       deprEndDate;
        TransDate       deprPreEndDate;

        deprEndDate = this.calcDepreciationEndDate_CN();
        if (deprEndDate)
        {
            if (deprEndDate == endmth(deprEndDate))
            {
                deprPreEndDate = prevMth(deprEndDate);
                deprPreEndDate = endmth(deprPreEndDate);
            }
            else
            {
                deprPreEndDate = prevMth(deprEndDate);
            }
        }
        return deprPreEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDepreciationStartDate</Name>
				<Source><![CDATA[
    public void calcDepreciationStartDate()
    {
        AssetDepreciationProfile assetDepreciationProfile = this.depreciationProfile();
        // <GJP>
        AssetTableInterval      assetTableInterval;
        AssetTrans              assetTrans;
        // </GJP>
        LedgerJournalTrans_Asset    ledgerJournalTrans_Asset;
        AssetTransTypeJournal       transactionType;

        //
        //  This code branch ensures the integrity of an asset not using a "Depreciation Convention".
        //
        if (this.DepreciationConvention == AssetDepreciationConvention::None)
        {
            // <GJP>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP])
                && AssetDepreciationProfile::isDepMethod_JP(assetDepreciationProfile.Method))
            {
                assetTableInterval          = this.AssetDepBookMap_JP::assetTableInterval(this.UsedFromDate);
                this.DepreciationStartDate  = assetTableInterval.endPeriod(this.UsedFromDate) + 1;
            }
            else
            // </GJP>
            // <GCN>
            if (AssetParameters::isDepreciationMethodsEnabled())
            {
                assetTableInterval = AssetTableInterval::construct(this.depreciationProfile(), this.assetBookTable().FiscalCalendar);

                if (this.UsedFromDate != dateNull())
                {
                    this.DepreciationStartDate = assetTableInterval.endPeriod(this.UsedFromDate) + 1;
                }
            }
            else
            // </GCN>
            // <GEEPL>
            if (!this.DepreciationStartDate
                || !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
            // </GEEPL>
                this.DepreciationStartDate = this.UsedFromDate;
            // <GEEPL>
            }
            // </GEEPL>
        }
        else
        {
            this.DepreciationStartDate = AssetTableDepConv::calcDepreciationStartDate(this, this.UsedFromDate);
        }

        if (assetDepreciationProfile.Method == AssetDepreciationMethod::RBSL)
        {
            this.DepreciationStartDate = dateStartMth(this.DepreciationStartDate);
        }

        if (this.ServiceLife && assetDepreciationProfile.Accrual == AssetAccrual::FiscalPeriod
            // <GTH>
            || assetDepreciationProfile.Accrual == AssetAccrual::Daily)
            // </GTH>
        {
            this.calcLifeTime();
            transactionType     = ledgerJournalTrans_Asset.findTransactionTypeByAssetIdBookId(this.AssetId, this.BookId, this.dataAreaId);
            if (transactionType != AssetTransTypeJournal::Acquisition
                || (assetDepreciationProfile.Accrual == AssetAccrual::Daily
                    && mthOfYr(this.DepreciationStartDate) == MonthsOfYear::February
                    && dayOfMth(this.DepreciationStartDate) == DaysOfMonth::Day29))
            
            {
                this.LifeTimeRest = this.LifeTime;
            }
        }

        if (AssetDocumentUtility_JP::isAssetDocumentEnabled()
            && AssetDepreciationProfile::isDepMethod_JP(assetDepreciationProfile.Method)
            && this.AllocationStartDate_JP)
        {
            var firstTransDateOfReductionEntryReserve = AssetTransTmp::getFirstTransactionDateByType(
                this.AssetId,
                this.BookId,
                AssetTransType::ReductionEntryReserve_JP);
            this.AssetDepBookMap_JP::setAllocationStartDate(max(this.UsedFromDate, firstTransDateOfReductionEntryReserve));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDepreciationStartDate_RU</Name>
				<Source><![CDATA[
    [SysObsolete('This method has been deprecated', false, 25\5\2020)]
    public AssetDepreciationStartDate calcDepreciationStartDate_RU(RAssetTransDate _transDate = dateNull())
    {
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLifeTime</Name>
				<Source><![CDATA[
    public void calcLifeTime()
    {
        AssetTableInterval          assetTableInterval;
        AssetDepreciationProfile    assetDepreciationProfile;

        //
        //  assetTableInterval requires the assetBookTable.calendarId.
        //
        AssetBookTable      assetBookTable = AssetBookTable::find(this.BookId);
        AssetTransDate      depreciationStartDate = this.DepreciationStartDate ? this.DepreciationStartDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        // <GJP>
        boolean                     isIsoJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);

        if (isIsoJP)
        {
            assetDepreciationProfile = this.AssetDepBookMap_JP::depreciationProfileOnDate(depreciationStartDate);
        }
        else
        {
        // </GJP>
            assetDepreciationProfile = this.depreciationProfile();
        // <GJP>
        }
        if (isIsoJP && AssetDepreciationProfile::isDepMethod_JP(assetDepreciationProfile.Method))
        {
            assetTableInterval = AssetTableIntervalExt_JP::constructFromCalendarSchedule(
                assetDepreciationProfile, assetBookTable.TableId, assetBookTable.RecId);
        }
        else
        {
        // </GJP>
            assetTableInterval = AssetTableInterval::construct(
                assetDepreciationProfile, this.getFiscalCalendar(assetBookTable));
        // <GJP>
        }
        // </GJP>

        //  for daily accruals: added a depreciation start date parameter
        //  to derive actual number of days in a particular year (to handle leap years)
        //  for fiscal year, we need to recalculate number of periods as a change
        // in dates can cause a different fiscal year to be referenced.  A new fiscal
        // year can have different number of fical period.
        if (assetDepreciationProfile.Accrual == AssetAccrual::Daily
            || assetDepreciationProfile.Accrual == AssetAccrual::FiscalPeriod)
        {
            this.LifeTime = assetTableInterval.yearToPeriod(this.ServiceLife, depreciationStartDate);
        }
        else
        {
            this.LifeTime = assetTableInterval.yearToPeriod(this.ServiceLife);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLifeTimeRest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the value of a <c>LifeTimeRest</c> field.
    /// </summary>
    /// <remarks>
    /// This method uses the <c>orig</c> method and the <c>LifeTimeRest</c>, <c>LifeTime</c>, and
    /// <c>ServiceLife</c> fields of a record to determine the correct value of the <c>LifeTimeRest</c>
    /// field.
    /// </remarks>
    public void calcLifeTimeRest()
    {
        AssetDepreciationProfile    depreciationProfile;
        AssetDepreciationProfile    depreciationAltProfile;
        boolean isUnitialized;

        //
        // Set Depreciation periods remaining as follows:
        // 1.  If the original LifeTimeRest and LifeTime are empty, and the user has not entered a value for
        //     LifeTimeRest, it needs to be initialized to LifeTime.
        // 2.  If the conditions in (1) aren't met and LifeTimeRest hasn't been changed by the user:
        //     Calculate the difference between the original value of Depreciation periods
        //     and original value of Depreciation periods remaining.  Then offset the new
        //     value of Depreciation periods by this difference to calculate the new value for
        //     Depreciation periods remaining.  If this results is a negative value
        //     for Depreciation periods remaining, set Depreciation periods remaining to zero
        //
        isUnitialized = this.orig().LifeTimeRest == 0 && this.orig().LifeTime == 0;
        if (isUnitialized && this.LifeTimeRest == 0)
        {
            this.LifeTimeRest = this.LifeTime;
        }
        else if (this.orig().LifeTimeRest == this.LifeTimeRest
            || this.orig().ServiceLife != this.ServiceLife)
        {
            // The user hasn't explicitly changed the value, so update it based on
            // the service life.
            depreciationProfile      = this.depreciationProfile();
            depreciationAltProfile   = this.depreciationAltProfile();

            if (depreciationProfile.checkLifeTime() || depreciationAltProfile.checkLifeTime())
            {
                this.LifeTimeRest = (this.orig().LifeTimeRest - this.orig().LifeTime) + this.LifeTime;
                if (this.LifeTimeRest < 0)
                {
                    this.LifeTimeRest = 0;
                }
            }
        }

        if (this.orig().ServiceLife == this.ServiceLife
            && this.orig().LifeTimeRest != this.LifeTimeRest)
        {
            // The user reversed the service life to the original value,
            // so the period remaining value needs to be set to the original value.
            this.LifeTimeRest = this.orig().LifeTimeRest;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRBSLLifeAndFactor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the number of years, months, and RBSL factor depending on the value specified for the
    ///    <c>ServiceLife</c> field.
    /// </summary>
    /// <remarks>
    ///    The RBSL information is only calculated when the depreciation method is of the RBSL type.
    /// </remarks>

    private void calcRBSLLifeAndFactor()
    {
        #COSNumbers

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]) &&
            this.depreciationProfile().Method == AssetDepreciationMethod::RBSL)
        {
            this.ServiceLifeYears_FR = real2int(this.ServiceLife);
            this.ServiceLifeMonths_FR = real2int((this.ServiceLife - this.ServiceLifeYears_FR) * #months) ;
            this.rbslFactor = AssetRBSLFactorTable::findFactor(this.DepreciationStartDate, this.LifeTime).AssetRBSLFactor;

            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFR00012, funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcServiceLife</Name>
				<Source><![CDATA[
    public void calcServiceLife()
    {
        AssetTableInterval          assetTableInterval;
        AssetDepreciationProfile    assetDepreciationProfile;
        //
        //  assetTableInterval requires the assetBookTable.calendarId.
        //
        AssetBookTable      assetBookTable = AssetBookTable::find(this.BookId);
        #COSNumbers

        // <GJP>
        boolean                     isIsoJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
        AssetTransDate              depreciationStartDate = this.DepreciationStartDate ? this.DepreciationStartDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (isIsoJP)
        {
            assetDepreciationProfile = this.AssetDepBookMap_JP::depreciationProfileOnDate(depreciationStartDate);
            assetTableInterval = AssetTableInterval::construct(
                assetDepreciationProfile, assetBookTable.getFiscalCalendar_JP(depreciationStartDate));
        }
        else
        {
        // </GJP>
            assetDepreciationProfile = this.depreciationProfile();
            assetTableInterval = AssetTableInterval::construct(
                assetDepreciationProfile, this.getFiscalCalendar(assetBookTable));
        // <GJP>
        }
        // </GJP>

        if (assetDepreciationProfile.Method == AssetDepreciationMethod::RBSL)
        {
            this.ServiceLife = assetTableInterval.periodToYear(this.ServiceLifeYears_FR * assetTableInterval.numOfPeriodsPerYear() + this.ServiceLifeMonths_FR);
        }
        else
        {
            this.ServiceLife = assetTableInterval.periodToYear(this.LifeTime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfConventionCanBeSet</Name>
				<Source><![CDATA[
    public boolean checkIfConventionCanBeSet()
    {
        if (!AssetDepreciationProfile::isConventionAllowedForProfile(this.DepreciationProfile))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumptionQtyPosted</Name>
				<Source><![CDATA[
    display AssetConsumptionQtyPosted consumptionQtyPosted()
    {
        AssetTrans  assetTrans;
        TransactionReversalTrans transactionReversalTrans;

        select sum(ConsumptionQty) from assetTrans
            where assetTrans.AssetId == this.AssetId
                && assetTrans.BookId  == this.BookId
        notexists join transactionReversalTrans
            where transactionReversalTrans.RefRecId == assetTrans.RecId
                && transactionReversalTrans.RefTableId == assetTrans.TableId;

        return assetTrans.ConsumptionQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAssetBookShiftDepreciation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create shift depreciation for the selected Asset
    /// </summary>
    void createAssetBookShiftDepreciation_IN()
    {
        AssetBookTableShiftDepreciation_IN      assetBookTableShiftDepreciation;

        while select assetBookTableShiftDepreciation
            where assetBookTableShiftDepreciation.BookId == this.BookId
        {
            AssetBookShiftDepreciation_IN::createFromAssetBookShiftDepreciation(this.AssetId,
                                                                                assetBookTableShiftDepreciation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentOperationsTax</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display CurrentOperationsTax currentOperationsTax()
    {
        AssetBookTable  assetBookTable;

        select firstonly CurrentOperationsTax
        from assetBookTable
            where assetBookTable.BookId == this.BookId;

        return assetBookTable.CurrentOperationsTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAddress_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method to display the address of the customer associated with the current record.
    /// </summary>
    /// <returns>
    /// The address of the customer if one is associated with the current record, otherwise empty string.
    /// </returns>
    display Addressing custAddress_PL()
    {
        if (this.CustAccount)
        {
            return CustTable::find(this.CustAccount).address();
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custName</Name>
				<Source><![CDATA[
    display CustName custName()
    {
        DirPartyTable   partyTable;
        CustTable       custTable;
        if (this.CustAccount)
        {
            select firstonly Name,RecId from partyTable
                   join AccountNum,Party from custTable
                        where custTable.AccountNum == this.CustAccount &&
                              custTable.Party == partyTable.RecId;

            return partyTable.Name;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        AssetBook      derogatoryAssetBook;
        AssetBookId    derogaotryBookId;

        // Verify if a derogatory tax model needs to be deleted together with the main value model.
        if (this.AssetDerogatoryModel_FR || this.IsDerogatoryBook_FR)
        {
            if (this.IsDerogatoryBook_FR)
            {
                derogaotryBookId = AssetBookTable::findDerogatoryAccountingModelBookId(this.BookId);
            }
            else
            {
                derogaotryBookId = this.AssetDerogatoryModel_FR;
            }
        }

        ttsbegin;
        super();

        // Delete derogatory value model specified for the current derogatory record.
        if (derogaotryBookId)
        {
            delete_from
                derogatoryAssetBook
            where
                derogatoryAssetBook.AssetId == this.AssetId &&
                derogatoryAssetBook.BookId == derogaotryBookId;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationAcceleratedProfile_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets japan accelerated depreciation profile.
    /// </summary>
    /// <returns>
    /// Asset acceleratded depreciation profile
    /// </returns>
    public AssetDepreciationProfile depreciationAcceleratedProfile_JP()
    {
        return AssetDepreciationProfile::find(this.DepreciationAcceleratedProfile_JP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationAltProfile</Name>
				<Source><![CDATA[
    public AssetDepreciationProfile depreciationAltProfile()
    {
        return AssetDepreciationProfile::find(this.DepreciationAltProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationAltInterval</Name>
				<Source><![CDATA[
    display AssetDepreciationInterval depreciationAltInterval()
    {
        return this.depreciationAltProfile().Interval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationAltMethod</Name>
				<Source><![CDATA[
    display AssetDepreciationMethod depreciationAltMethod()
    {
        return this.depreciationAltProfile().Method;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationAltPercentage</Name>
				<Source><![CDATA[
    display AssetDepreciationPercentage depreciationAltPercentage()
    {
        return this.depreciationAltProfile().Percentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationAltProfileId</Name>
				<Source><![CDATA[
    display AssetDepreciationProfileId depreciationAltProfileId()
    {
        return this.DepreciationAltProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationExtProfile</Name>
				<Source><![CDATA[
    /// <summary>
	/// The depreciationExtProfile
	/// </summary>
	/// <returns>
	/// AssetDepreciationProfile
	/// </returns>
    public AssetDepreciationProfile depreciationExtProfile()
    {
        return AssetDepreciationProfile::find(this.DepreciationExtProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationProfile</Name>
				<Source><![CDATA[
    public AssetDepreciationProfile depreciationProfile()
    {
        return AssetDepreciationProfile::find(this.DepreciationProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationInterval</Name>
				<Source><![CDATA[
    display AssetDepreciationInterval depreciationInterval()
    {
        return this.depreciationProfile().Interval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationMethod</Name>
				<Source><![CDATA[
    display AssetDepreciationMethod depreciationMethod()
    {
        return this.depreciationProfile().Method;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationPercentage</Name>
				<Source><![CDATA[
    display AssetDepreciationPercentage depreciationPercentage()
    {
        return this.depreciationProfile().Percentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationProfileId</Name>
				<Source><![CDATA[
    display AssetDepreciationProfileId depreciationProfileId()
    {
        return this.DepreciationProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationStarted</Name>
				<Source><![CDATA[
    public boolean depreciationStarted()
    {
        AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(this.AssetId, this.BookId);
        select firstonly RecId from assetTransTmp
            where assetTransTmp.AssetId == this.AssetId
                && assetTransTmp.BookId == this.BookId
                && (assetTransTmp.TransType == AssetTransType::Depreciation
                || assetTransTmp.TransType == AssetTransType::DepreciationAdj
                || assetTransTmp.TransType == AssetTransType::BonusDepreciation
                || assetTransTmp.TransType == AssetTransType::ExtraordinaryDepreciation
                || assetTransTmp.TransType == AssetTransType::DerogatoryDecrease
                || assetTransTmp.TransType == AssetTransType::DerogatoryIncrease);
        return assetTransTmp.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDepreciationAmount</Name>
				<Source><![CDATA[
    private AmountMST totalDepreciationAmount()
    {
        AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(this.AssetId, this.BookId);

        select sum(AmountMST) from assetTransTmp
            where assetTransTmp.AssetId == this.AssetId
                && assetTransTmp.BookId == this.BookId
                && (assetTransTmp.TransType == AssetTransType::Depreciation
                || assetTransTmp.TransType == AssetTransType::DepreciationAdj
                || assetTransTmp.TransType == AssetTransType::BonusDepreciation
                || assetTransTmp.TransType == AssetTransType::ExtraordinaryDepreciation
                || assetTransTmp.TransType == AssetTransType::DerogatoryDecrease
                || assetTransTmp.TransType == AssetTransType::DerogatoryIncrease);

        return assetTransTmp.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unreversedDepreciationExists</Name>
				<Source><![CDATA[
    internal boolean unreversedDepreciationExists()
    {
        return this.totalDepreciationAmount() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationYear</Name>
				<Source><![CDATA[
    display AssetDepreciationYear depreciationYear()
    {
        return this.depreciationProfile().DepreciationYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinSpecialDepType_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of special depreciation.
    /// </summary>
    /// <returns>
    /// The type of special depreciation.
    /// </returns>
    /// <remarks>
    /// If it does not have special deprecaition, then return <C>AssetDepType_JP::OrdinaryDepreciation</C>.
    /// </remarks>
    public AssetDepType_JP determinSpecialDepType_JP()
    {
        AssetDepType_JP     ret;

        // Note: if the ext profile does not exists, it will return AssetDepType_JP::OrdinaryDepreciation which is expected.
        ret = this.depreciationExtProfile().determinDepType_JP();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCurrentDepreciationProfile_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the current depreciation profile based on current session date.
    /// </summary>
    /// <param name="_assetBook">
    /// Current <c>AssetBook</c> record
    /// </param>
    /// <returns>
    /// The depreciation profile for the current session date
    /// </returns>
    display AssetDepreciationProfileId displayCurrentDepreciationProfile_JP(AssetBook _assetBook)
    {
        return _assetBook.AssetDepBookMap_JP::depreciationProfileIdOnDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCurrentLifeTime_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the selected life time value
    /// </summary>
    /// <param name="_set">
    /// True to set the selected life time value
    /// </param>
    /// <param name="_assetBook">
    /// <c>AssetBook</c> record
    /// </param>
    /// <param name="_lifeTime">
    /// New life time
    /// </param>
    /// <returns>
    /// The selected life time
    /// </returns>
    edit AssetLifeTime editCurrentLifeTime_JP(boolean _set, AssetBook _assetBook, AssetLifeTime _lifeTime)
    {
        AssetDepProfileChange_JP    depProfileChange;
        AssetTransDate              fromDate = dateNull();
        AssetTransDate              toDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        AssetLifeTime               ret;

        ttsbegin;
        depProfileChange = AssetDepProfileChange_JP::find(
                            _assetBook.TableId, _assetBook.RecId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), true);

        if (depProfileChange)
        {
            if (_set)
            {
                depProfileChange.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                depProfileChange.LifeTime = _lifeTime;
                depProfileChange.calcServiceLife();
                depProfileChange.updateLifeTimeRest(_assetBook);
                depProfileChange.update();
                AssetSpecialDepHelper_JP::updateDefaultAllocationPeriods(_assetBook);
            }
            ret = depProfileChange.LifeTime;
        }
        else
        {
            if (_set)
            {
                _assetBook.LifeTime = _lifeTime;
                _assetBook.calcServiceLife();
                _assetBook.calcLifeTimeRest();
                AssetSpecialDepHelper_JP::updateDefaultAllocationPeriods(_assetBook);
            }
            ret = _assetBook.LifeTime;
        }
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCurrentServiceLife_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the selected service life value
    /// </summary>
    /// <param name="_set">
    /// True to set the selected service life value
    /// </param>
    /// <param name="_assetBook">
    /// <c>AssetBook</c> record
    /// </param>
    /// <param name="_serviceLife">
    /// New service life
    /// </param>
    /// <returns>
    /// The selected service life
    /// </returns>
    edit AssetServiceLife editCurrentServiceLife_JP(boolean _set, AssetBook _assetBook, AssetServiceLife _serviceLife)
    {
        AssetDepProfileChange_JP    depProfileChange;
        AssetServiceLife            ret;

        ttsbegin;
        depProfileChange = AssetDepProfileChange_JP::find(
                            _assetBook.TableId, _assetBook.RecId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), true);

        if (depProfileChange)
        {
            if (_set)
            {
                depProfileChange.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                depProfileChange.ServiceLife = _serviceLife;
                depProfileChange.calcLifeTime();
                depProfileChange.updateLifeTimeRest(_assetBook);
                depProfileChange.update();

                AssetSpecialDepHelper_JP::updateDefaultAllocationPeriods(_assetBook);
            }
            ret = depProfileChange.ServiceLife;
        }
        else
        {
            if (_set)
            {
                _assetBook.ServiceLife = _serviceLife;
                _assetBook.calcLifeTime();
                _assetBook.calcLifeTimeRest();

                AssetSpecialDepHelper_JP::updateDefaultAllocationPeriods(_assetBook);
            }
            ret = _assetBook.ServiceLife;
        }
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchangeRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method returns the exchange rate date to be used by all fixed asset transactions.
    /// </summary>
    /// <returns>
    ///     The exchange rate date.
    /// </returns>
    /// <remarks>
    ///     Currently we are using the acquisition date of an asset as exchange rate date.
    /// </remarks>
    public TransDate exchangeRateDate()
    {
        TransDate exchangeRateDate;

        if (this.Status != AssetStatus::NoAcquisition)
        {
            exchangeRateDate = this.AcquisitionDate;
        }

        return exchangeRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalCalendar</Name>
				<Source><![CDATA[
    private RecId getFiscalCalendar(AssetBookTable _assetBookTable)
    {
        RecId fiscalCalendar;
        fiscalCalendar = _assetBookTable.getFiscalCalendar();

        return fiscalCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLifetime</Name>
				<Source><![CDATA[
    display AssetLifeTime getLifetime()
    {
        if (this.LifeTime)
        {
            return this.LifeTime;
        }

        return AssetGroupBookSetup::find(this.assetGroup().GroupId, this.BookId).LifeTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinDepDate_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Select the assetbook with the smallest depreciation start date
    /// </summary>
    /// <param name="_assetBook">
    /// The assetbook parameter
    /// </param>
    /// <returns>
    /// Returns an Assetbook buffer with the smallest depreciation start date
    /// </returns>
    public AssetBook getMinDepDate_IN(AssetBook  _assetBook)
    {
        AssetBook   assetBook,
                    minAssetBook,
                    tmpAssetBook;

        TransDate   minDate,
                    tmpDate;

        while select assetBook
            where assetBook.AssetGroup == _assetBook.AssetGroup
               && assetBook.BookId     == _assetBook.BookId
        {
            tmpDate = assetBook.DepreciationStartDate;
            tmpAssetBook = assetBook;
            if (minDate && tmpDate)
            {
                if (tmpDate < minDate)
                {
                    minDate = tmpDate;
                    minAssetBook = assetBook;
                }
            }
            else
            {
                minDate = tmpDate;
                minAssetBook.data(tmpAssetBook);
            }
        }
        return minAssetBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodEnd_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// get Period End of specified period
    /// </summary>
    /// <param name="_transDate">
    /// TransDate
    /// </param>
    /// <returns>
    /// period end date of TransDate
    /// </returns>
    public TransDate getPeriodEnd_CN(TransDate _transDate)
    {
        AssetTableInterval          deprInterval;
        TransDate                   endDate;
        AssetBookTable              assetBookTable = AssetBookTable::find(this.BookId);
        AssetDepreciationProfile    assetDepreciationProfile = this.depreciationExtProfile();

        deprInterval = assetDepreciationProfile
            ? AssetTableInterval::construct(assetDepreciationProfile, assetBookTable.FiscalCalendar)
            : AssetTableInterval::construct(this.depreciationProfile(), assetBookTable.FiscalCalendar);

        if (deprInterval)
        {
            endDate = deprInterval.endPeriod(_transDate);
        }
        else
        {
            endDate = _transDate;
        }

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>regulateDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensure Depreciation does not go over the "leave net book value" setting or more than allowed amount to depreciate.
    /// </summary>
    /// <param name = "_depreciationAmount">The Depreciation value.</param>
    /// <param name = "_tmpDateSum">The <c>TmpDateSum</c> buffer.</param>
    /// <param name = "_depreciationAcc">The Depreciation value in accounting currency.</param>
    /// <param name = "_assetBookTable">The <c>AssetBookTable</c> buffer.</param>
    /// <returns>Returns a container with calculated values of depreciation.</returns>
    [Wrappable(true), SysObsolete('This method has been deprecated. Depreciation profiles was moved to AssetInitDepreciationProfile class.', false, 29\5\2020)]
    protected final container regulateDepreciation(
        AssetAmount _depreciationAmount,
        TmpDateSum _tmpDateSum,
        AssetAmount _depreciationAcc,
        AssetBookTable _assetBookTable)
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDepreciationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates depreciation amounts forecast.
    /// </summary>
    /// <param name="_maxPlanDate">
    /// Maximum date for which the calculation will be done.
    /// </param>
    /// <param name = "_cancellationToken">
    /// The cancellation token for asynchronous run.
    /// </param>
    /// <returns>
    /// Temporary table buffer that contains the depreciation amounts.
    /// </returns>
    [SysObsolete('This method has been deprecated. Please use new class AssetInitDepreciationProfile instead.', false, 29\5\2020)]
    public TmpDateSum initDepreciationProfile(
        TransDate _maxPlanDate = maxDate(),
        System.Threading.CancellationToken _cancellationToken = System.Threading.CancellationToken::None)
    {
        return AssetInitDepreciationProfile::newFromBookDate(this, _maxPlanDate, _cancellationToken).calcDepreciationProfile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepreciationAmountInAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the transactions for accounting currency amount from the <c>AssetTrans</c> table for the specified transaction.
    /// </summary>
    /// <param name = "_assetId">The ID of the asset.</param>
    /// <param name = "_assetBookId">The ID of the value model.</param>
    /// <param name = "_transDate">The Transaction date value.</param>
    /// <returns>A sum of the transactions from the <c>AssetTrans</c> table in accounting currency.</returns>
    protected AssetAmount getDepreciationAmountInAccountingCurrency(AssetId _assetId, AssetBookId _assetBookId, TransDate _transDate = maxDate())
    {
        return (AssetTrans::amountMSTPerDateTransTypes(
                                        _assetid,
                                        _assetBookId,
                                        [AssetTransType::Depreciation, AssetTransType::DepreciationAdj],
                                        dateNull(),
                                        _transDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepreciationAmountInReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the transactions for reporting currency amount from the <c>AssetTrans</c> table for the specified transaction.
    /// </summary>
    /// <param name = "_assetId">The ID of the asset.</param>
    /// <param name = "_assetBookId">The ID of the value model.</param>
    /// <param name = "_transDate">The Transaction date value.</param>
    /// <returns>A sum of the transactions from the <c>AssetTrans</c> table in reporting currency.</returns>
    protected AssetAmount getDepreciationAmountInReportingCurrency(AssetId _assetId, AssetBookId _assetBookId, TransDate _transDate = maxDate())
    {
        return (AssetTrans::amountReportingCurrencyPerDateTransTypes(
                                    _assetid,
                                    _assetBookId,
                                    [AssetTransType::Depreciation, AssetTransType::DepreciationAdj],
                                    dateNull(),
                                    _transDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDepreciationProfile_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize and create a tmpDateSum for the selected shift type
    /// </summary>
    /// <param name="selection">
    /// The selected shift type, a value of the TypeOfShift_IN enum
    /// </param>
    /// <returns>
    /// tmpDateSum buffer for the selected shift
    /// </returns>
    [SysObsolete('This method has been deprecated. Please use new class AssetInitDepreciationProfile_IN instead.', false, 29\5\2020)]
    public TmpDateSum initDepreciationProfile_IN(TypeOfShift_IN  selection)
    {
        return AssetInitDepreciationProfile_IN::newFromShiftTypeAndBookDate(this, selection).calcDepreciationProfile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDepreciationProfile_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates Polish depreciation and stores it in a temporary table buffer.
    /// that would be used in the depreciation Profile window.
    /// </summary>
    /// <param name="_assetBookTable">
    /// <c>AssetBookTable</c> table buffer that used during the calculation.
    /// </param>
    /// <param name="_maxPlanDate">
    /// Maximum date for which the calculation will be done.
    /// </param>
    /// <param name = "_cancellationToken">
    /// The cancellation token for asynchronous run.
    /// </param>
    /// <returns>
    /// Temporary table buffer that contains the depreciation amounts.
    /// </returns>
    [SysObsolete('This method has been deprecated. Please use new class AssetInitDepreciationProfile_PL instead.', false, 29\5\2020)]
    public TmpDateSum initDepreciationProfile_PL(
        AssetBookTable _assetBookTable, 
        TransDate _maxPlanDate = maxDate(),
        System.Threading.CancellationToken _cancellationToken = System.Threading.CancellationToken::None)
    {
        return AssetInitDepreciationProfile::newFromBookDate(this, _maxPlanDate, _cancellationToken).calcDepreciationProfile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDepreciationStartDate_HU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the depreciation start date for hungary with the begining of acquistion date month.
    /// This would apply only to the assets which are marked as low cost.
    /// </summary>
    public void initDepreciationStartDate_HU()
    {
        if (AssetBookTable::find(this.BookId).LowCostAsset_HU)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00021, funcName());
            this.DepreciationStartDate = dateStartMth(this.AcquisitionDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAssetGroupBookSetup</Name>
				<Source><![CDATA[
    /// <summary>
	/// Init from asset group book setup
	/// </summary>
	/// <param name="assetGroup">
	/// The assetGroup
	/// </param>
    public void initFromAssetGroupBookSetup(AssetGroupId assetGroup = this.assetTable().AssetGroup)
    {
        // <GIN>
        boolean                  checkIncomeTaxParameter = AssetParameters::isDepreciationIncomeTaxActEnable_IN();
        // </GIN>

	    // <GJP>
	    boolean                 isIsoJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
	    // </GJP>

        AssetGroupBookSetup      assetGroupBookSetup      = AssetGroupBookSetup::find(assetGroup, this.BookId);
        AssetBookTable           assetBookTable           = this.assetBookTable();
        AssetDepreciationProfile assetDepreciationProfile = AssetDepreciationProfile::find(assetGroupBookSetup.DepreciationProfile);

        if (assetDepreciationProfile.Method == AssetDepreciationMethod::RBSL)
        {
           this.AcquisitionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        if (assetBookTable.postToGeneralLedger() == NoYes::Yes)
        {
            if (!this.PostingProfile)
            {
                this.PostingProfile = AssetParameters::find().PostingProfile;
            }
        }
        else
        {
            this.PostingProfile = '';
        }

        if (assetGroupBookSetup)
        {
            this.Depreciation  = assetGroupBookSetup.Depreciation;

            this.DepreciationProfile = assetGroupBookSetup.DepreciationProfile;
            this.DepreciationAltProfile = assetGroupBookSetup.DepreciationAltProfile;
            this.DepreciationExtProfile = assetGroupBookSetup.DepreciationExtProfile;
            this.DepreciationAcceleratedProfile_JP = assetGroupBookSetup.DepreciationAcceleratedProfile_JP;

            this.ServiceLife   = assetGroupBookSetup.ServiceLife;
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
            {
                this.ServiceLifeYears_FR = assetGroupBookSetup.ServiceLife;
            }

            if (assetGroupBookSetup.ServiceLife
                && assetDepreciationProfile.Accrual == AssetAccrual::FiscalPeriod)
            {
                this.calcLifeTime();
                this.LifeTimeRest = this.LifeTime;
            }
            else
            {
                this.LifeTime      = assetGroupBookSetup.LifeTime;
                this.LifeTimeRest  = assetGroupBookSetup.LifeTime;
            }

            if (assetDepreciationProfile.Method == AssetDepreciationMethod::RBSL)
            {
                this.ServiceLifeYears_FR  = assetGroupBookSetup.ServiceLifeYears_FR;
                this.ServiceLifeMonths_FR = assetGroupBookSetup.ServiceLifeMonths_FR;
                this.calcServiceLife();
                this.DepreciationStartDate = dateStartMth(this.AcquisitionDate);
            }

            this.DepreciationConvention =   assetGroupBookSetup.DepreciationConvention;
            // <GCN>
            if (AssetParameters::isDepreciationPolicyEnabled())
            {
                this.calcDepreciationStartDate();
            }
            // </GCN>

            // <GIN>
            if (checkIncomeTaxParameter)
            {
                this.AssetGroupDepreciation_IN  = assetGroupBookSetup.AssetGroupDepreciation_IN;
            }
            // </GIN>

            // <GJP>
        	if (isIsoJP)
            {
                this.AllowableLimitForAccumulatedDepType_JP = assetGroupBookSetup.AllowableLimitForAccumulatedDepType_JP;
                this.SpecialDepAllocationUnit_JP            = assetGroupBookSetup.SpecialDepAllocationUnit_JP;
                this.SpecialDepAllocationPeriods_JP         = assetGroupBookSetup.SpecialDepAllocationPeriods_JP;
                this.SpecialDepAllocationConvention_JP      = assetGroupBookSetup.SpecialDepAllocationConvention_JP;

                this.setSummarizedByMajorType_JP();
            }
            // </GJP>
        }
        else
        {
            this.Depreciation  = assetBookTable.Depreciation;

            this.DepreciationProfile = assetBookTable.DepreciationProfile;
            this.DepreciationAltProfile = assetBookTable.DepreciationAltProfile;
            this.DepreciationExtProfile = assetBookTable.DepreciationExtProfile;
            this.DepreciationAcceleratedProfile_JP = assetBookTable.DepreciationAcceleratedProfile_JP;

            // <GIN>
            if (checkIncomeTaxParameter)
            {
                this.AssetGroupDepreciation_IN = NoYes::No;
            }
            // </GIN>

            // <GJP>
        	if (isIsoJP)
            {
                if (this.depreciationMethod() == AssetDepreciationMethod::EquallyDivided_JP)
                {
                    this.AllowableLimitForAccumulatedDepType_JP = AssetLimitForAccumulatedDepType_JP::AcquisitionCost;
                }
	
	            AssetSpecialDepHelper_JP::updateDefaultAllocationPeriods(this, true);
                this.setSummarizedByMajorType_JP();
            }
            // </GJP>
        }
        if (assetDepreciationProfile.Method == AssetDepreciationMethod::RBSL)
        {
            this.rbslFactor = AssetRBSLFactorTable::findFactor(this.AcquisitionDate, (assetGroupBookSetup.LifeTime) + assetGroupBookSetup.ServiceLifeMonths_FR).AssetRBSLFactor;

            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFR00012, funcName());
        }

        this.NegativeNetBookValue  = assetBookTable.NegativeNetBookValue;
        this.ExceedingNetBookValue = assetBookTable.ExceedingNetBookValue;
        this.IsTrueUpDepreciation = assetBookTable.IsTrueUpDepreciation;
        this.IsAllowDepreciationAdjSameDate = assetBookTable.IsAllowDepreciationAdjSameDate;
        this.IsPositiveDepreciation = assetBookTable.IsPositiveDepreciation;

        // If French derogatory depreciation information is set up on the Asset Value Models, update the AssetBook
        if (assetBookTable.IsDerogatoryBook_FR)
        {
            this.IsDerogatoryBook_FR = assetBookTable.IsDerogatoryBook_FR;
        }

        if (assetBookTable.AssetDerogatoryModel_FR)
        {
            this.AssetDerogatoryModel_FR = assetBookTable.AssetDerogatoryModel_FR;
        }

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            this.initDepreciationStartDate_HU();
        }
        // </GEEHU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGroupDepreciationProfile_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize and create a tmpDateSum for the current asset
    /// </summary>
    /// <returns>
    /// tmpDateSum buffer for the current asset
    /// </returns>
    public TmpDateSum initGroupDepreciationProfile_IN()
    {
        // <GIN>
        AssetGroupTableMethod_IN    assetTableMethodPrimary;
        AssetGroupTableMethod_IN    assetTableMethodSecondary;
        AssetTableInterval          assetTableInterval;
        AssetAmount                 depreciationPrimary;
        AssetAmount                 depreciationSecondary;
        AssetAmount                 depreciation,salesValue;
        AssetAmount                 depreciationAcc,bonusDepAcc;
        AssetTransDate              transDate;
        TmpDateSum                  tmpDateSum;
        AssetGroupTrans_IN          assetGroupTransLoc;
        AssetGroupInformation_IN    assetGroupInformation_IN;
        AssetBook                   assetBook,
                                    assetBookLoc;
        AssetBook                   assetBookLocal;
        AssetBookTable              assetBookTable;
        boolean                     firstPostedValExecuted = false;
        //  assetTableInterval requires the assetBookTable.FiscalCalendar.

        assetBookLocal = AssetBook::find(this.AssetId, this.BookId);
        assetBookTable = AssetBookTable::find(assetBookLocal.BookId);

        tmpDateSum.ttsbegin();

        assetBookLoc = this.getMinDepDate_IN(assetBookLocal);
        if (assetBookLoc)
        {
            assetBookLocal = assetBookLoc;
        }
        if (assetBookLocal.Status == AssetStatus::NoAcquisition  ||
            assetBookLocal.Status == AssetStatus::Sold           ||
            assetBookLocal.Status == AssetStatus::Scrapped)
        {
            select firstonly assetBook
                where assetBook.AssetGroup  == assetBookLocal.AssetGroup  &&
                      assetBook.BookId      == assetBookLocal.BookId      &&
                      assetBook.Status      == AssetStatus::Open;
            if (assetBook)
            {
                assetBookLocal = assetBook;
            }
        }

        if (AssetBook::checkAllAssetsSold_IN(assetBookLocal.AssetGroup, assetBookLocal.BookId))
        {
            return tmpDateSum;
        }

        if (assetBookLocal.depreciationAltProfile())
        {
            assetTableMethodPrimary   = AssetGroupTableMethod_IN::construct(assetBookLocal, dateMax(), '', true);
            assetTableMethodSecondary = AssetGroupTableMethod_IN::construct(assetBookLocal, dateMax(), '', true, true);
        }
        else
        {
            assetTableMethodPrimary = AssetGroupTableMethod_IN::construct(assetBookLocal, dateMax());
        }

        assetTableInterval = AssetTableInterval::construct(assetBookLocal.depreciationProfile(), assetBookTable.FiscalCalendar);

        if (assetBookLocal.depreciationProfile().Method == AssetDepreciationMethod::RBSL)
        {
            tmpDateSum.TransDate = endmth(prevMth(max(assetBookLocal.DepreciationStartDate, assetBookLocal.LastDepreciationDate + 1))) + 1;
        }
        else
        {
            tmpDateSum.TransDate = assetTableInterval.endPeriod(max(assetBookLocal.DepreciationStartDate - 1, assetBookLocal.LastDepreciationDate) + 1) - 1;
        }
        tmpDateSum.TmpNumerals01 = 0;
        depreciationAcc = -(AssetGroupTrans_IN::amountMSTPerDateTranstype(assetBookLocal.AssetGroup, tmpDateSum.TransDate, assetBookLocal.BookId, AssetTransType::Depreciation, assetBookLocal.AssetId) +
                            AssetGroupTrans_IN::amountMSTPerDateTranstype(assetBookLocal.AssetGroup, tmpDateSum.TransDate, assetBookLocal.BookId, AssetTransType::DepreciationAdj, assetBookLocal.AssetId));

        if (assetBookLocal.AcquisitionDate <= tmpDateSum.TransDate && AssetStatusType::construct(assetBookLocal.Status).isAcquired())
        {
            tmpDateSum.TmpNumerals02 = AssetGroupTrans_IN::amountToDepreciate(assetBookLocal.AssetGroup, tmpDateSum.TransDate, assetBookLocal.BookId, assetBookLocal.AssetId) +
                                       AssetGroupTrans_IN::amountMSTPerDateTranstype(assetBookLocal.AssetGroup, tmpDateSum.TransDate, assetBookLocal.BookId, AssetTransType::ExtraordinaryDepreciation, assetBookLocal.AssetId);
        }
        else
        {
            tmpDateSum.TmpNumerals02 = assetBookLocal.AcquisitionPrice;
        }

        select sum(AmountMst) from assetGroupInformation_IN
            where assetGroupInformation_IN.TransDate     <= tmpDateSum.TransDate
               && assetGroupInformation_IN.AssetGroup    == assetBookLocal.AssetGroup
               && (assetGroupInformation_IN.TransType    == AssetTransType::DisposalSale
               || assetGroupInformation_IN.TransType     == AssetTransType::DisposalScrap)
        join AssetGroupInformation from assetGroupTransLoc
            where assetGroupTransLoc.BookId              == assetBookLocal.BookId
               && assetGroupTransLoc.AssetGroupInformation == assetGroupInformation_IN.RecId;

        salesValue = assetGroupInformation_IN.AmountMst;

        tmpDateSum.TmpNumerals02 += salesValue;
        if (depreciationAcc > tmpDateSum.TmpNumerals02)
        {
            return tmpDateSum;
        }
        if (tmpDateSum.TransDate)
        {
            tmpDateSum.insert();

            if ( (assetBookLocal.Status == AssetStatus::NoAcquisition || assetBookLocal.Status == AssetStatus::Open) && tmpDateSum.TmpNumerals02)
            {
                if (!assetBookLocal.depreciationAltProfile())
                {
                    while (assetTableMethodPrimary.next())
                    {
                        depreciation = assetTableMethodPrimary.calc();
                        transDate    = assetTableInterval.endPeriod(assetTableMethodPrimary.depDate());

                        if (tmpDateSum.TransDate != transDate)
                        {
                            select sum(AmountMst) from assetGroupInformation_IN
                                where assetGroupInformation_IN.TransDate        <= transDate
                                    && assetGroupInformation_IN.AssetGroup      == assetBookLocal.AssetGroup
                                    && (assetGroupInformation_IN.TransType      == AssetTransType::DisposalSale
                                    || assetGroupInformation_IN.TransType       == AssetTransType::DisposalScrap)
                            join AssetGroupInformation from assetGroupTransLoc
                                where assetGroupTransLoc.BookId                 == assetBookLocal.BookId
                                    && assetGroupTransLoc.AssetGroupInformation == assetGroupInformation_IN.RecId;

                            salesValue = assetGroupInformation_IN.AmountMst;

                            select sum(AmountMst) from assetGroupInformation_IN
                                where assetGroupInformation_IN.TransDate        <= transDate
                                    && assetGroupInformation_IN.AssetGroup      == assetBookLocal.AssetGroup
                                    && assetGroupInformation_IN.TransType       == AssetTransType::BonusDepreciation
                            join AssetGroupInformation from assetGroupTransLoc
                                where assetGroupTransLoc.BookId                 == assetBookLocal.BookId
                                    && assetGroupTransLoc.AssetGroupInformation == assetGroupInformation_IN.RecId;

                            bonusDepAcc = assetGroupInformation_IN.AmountMst;

                            if (tmpDateSum.TransDate)
                            {
                                tmpDateSum.Total          = depreciationAcc;
                                tmpDateSum.TmpNumerals02 -= depreciationAcc;
                                if (!firstPostedValExecuted)
                                {
                                    tmpDateSum.TmpNumerals02 += AssetGroupDepTransMap_IN::amountMSTBonusDepPerDateTranstype(assetBookLocal,
                                                                                                                            transDate,
                                                                                                                            AssetTransType::BonusDepreciation);
                                    firstPostedValExecuted = true;
                                }

                                tmpDateSum.write();
                            }

                            tmpDateSum.clear();
                            tmpDateSum.TransDate = transDate;
                            if (assetBookLocal.AcquisitionDate <= tmpDateSum.TransDate && AssetStatusType::construct(assetBookLocal.Status).isAcquired())
                            {
                                tmpDateSum.TmpNumerals02 = AssetGroupTrans_IN::amountToDepreciate(assetBookLocal.AssetGroup, tmpDateSum.TransDate, assetBookLocal.BookId, assetBookLocal.AssetId) +
                                                           AssetGroupTrans_IN::amountMSTPerDateTranstype(assetBookLocal.AssetGroup,
                                                                                                         tmpDateSum.TransDate,
                                                                                                         assetBookLocal.BookId,
                                                                                                         AssetTransType::ExtraordinaryDepreciation,
                                                                                                         assetBookLocal.AssetId);
                            }
                            else
                            {
                                tmpDateSum.TmpNumerals02 = assetBookLocal.AcquisitionPrice;
                            }
                            tmpDateSum.TmpNumerals02 += salesValue + bonusDepAcc;
                        }

                        depreciationAcc += depreciation;

                        tmpDateSum.TransDate      = transDate;
                        tmpDateSum.TmpNumerals01 += depreciation;
                    }
                }
                else
                {
                    while (assetTableMethodPrimary.next() && assetTableMethodSecondary.next())
                    {
                        depreciationPrimary   = assetTableMethodPrimary.calc();
                        depreciationSecondary = assetTableMethodSecondary.calc();

                        if (abs(depreciationPrimary) > abs(depreciationSecondary))
                        {
                            assetTableMethodSecondary.addPrevDepAmountExternal(depreciationPrimary - depreciationSecondary);
                            depreciation = depreciationPrimary;
                        }
                        else
                        {
                            assetTableMethodPrimary.addPrevDepAmountExternal(depreciationSecondary - depreciationPrimary);
                            depreciation = depreciationSecondary;
                        }

                        transDate = assetTableInterval.endPeriod(assetTableMethodPrimary.depDate());

                        if (tmpDateSum.TransDate != transDate)
                        {
                            if (tmpDateSum.TransDate)
                            {
                                tmpDateSum.Total          = depreciationAcc;
                                tmpDateSum.TmpNumerals02 -= depreciationAcc;
                                tmpDateSum.write();
                            }

                            tmpDateSum.clear();
                            tmpDateSum.TransDate = transDate;
                            if (assetBookLocal.AcquisitionDate <= tmpDateSum.TransDate && AssetStatusType::construct(assetBookLocal.Status).isAcquired())
                            {
                                tmpDateSum.TmpNumerals02 = AssetTrans::amountToDepriciate(assetBookLocal.AssetId, tmpDateSum.TransDate, assetBookLocal.BookId) +
                                                           AssetTrans::amountMSTPerDateTranstype(assetBookLocal.AssetId,
                                                                                                 tmpDateSum.TransDate,
                                                                                                 assetBookLocal.BookId,
                                                                                                 AssetTransType::ExtraordinaryDepreciation);
                            }
                            else
                            {
                                tmpDateSum.TmpNumerals02 = assetBookLocal.AcquisitionPrice;
                            }
                            tmpDateSum.TmpNumerals02 += salesValue;
                        }

                        depreciationAcc += depreciation;

                        tmpDateSum.TransDate       = transDate;
                        tmpDateSum.TmpNumerals01  += depreciation;
                        tmpDateSum.TmpNumerals03  += depreciationPrimary;
                        tmpDateSum.TmpNumerals04  += depreciationSecondary;
                    }
                }

                tmpDateSum.Total          = depreciationAcc;
                tmpDateSum.TmpNumerals02 -= depreciationAcc;
                tmpDateSum.write();
            }
        }
        tmpDateSum.ttscommit();

        return tmpDateSum;
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLifeTime_PL</Name>
				<Source><![CDATA[
    public void initLifeTime_PL()
    {
        AssetBookTable      assetBookTable = AssetBookTable::find(this.BookId);
        AssetTableInterval  assetTableInterval;
        Percent             percentageAmountToUse;

        int intNum(Amount _amount, Percent _per)
        {
            int         calcNum;
            AssetAmount base = _amount;

            while (base > 0)
            {
                calcNum++;
                base -= CurrencyExchangeHelper::amount(_amount * _per / 100);
            }
            return calcNum;
        }

        // The amount entered for the Straight line percentage method determines the number of years
        // of the asset.  Ex. 20% corresponds to 5 years, 50% -- 2 years.
        if (this.depreciationMethod() == AssetDepreciationMethod::StraightLinePercentage_PL)
        {
            if (AssetParameters::find().AssetPercentageLevel_PL != PlAssetPercentageLevel::Book)
            {
                percentageAmountToUse = this.depreciationPercentage();
            }
            else
            {
                percentageAmountToUse = this.Percentage_PL;
            }

            if (percentageAmountToUse)
            {
                if (AssetSumCalc_Trans::newAssetYear(this.AssetId, this.BookId).depreciationValue())
                {
                    this.LifeTimeRest = intNum(AssetSumCalc_Trans::newAssetYear(this.AssetId, this.BookId).netBookValue(),
                                               percentageAmountToUse);
                }
                else
                {
                    assetTableInterval  = AssetTableInterval::construct(
                        this.depreciationProfile(), this.getFiscalCalendar(assetBookTable));
                    this.LifeTime     = real2int(roundUpDec(100 / percentageAmountToUse * assetTableInterval.assetDepreciationTime(this.AcquisitionDate), 0));
                    this.LifeTimeRest = this.LifeTime;
                }
                this.calcServiceLife();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReductionEntryAllocationProfile_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates reduction entry reserve allocation profile.
    /// </summary>
    /// <param name="_tmpDateSum">
    /// The main depreciation temp table.
    /// </param>
    /// <param name="_maxPlanDate">
    /// The maxiumn plan data.
    /// </param>
    /// <returns>
    /// Temp table with reserve profile data.
    /// </returns>
    public TmpDateSum initReductionEntryAllocationProfile_JP(
        TmpDateSum   _tmpDateSum,
        TransDate    _maxPlanDate = maxDate())
    {
        AssetBookTable                  assetBookTable = AssetBookTable::find(this.BookId);
        TmpDateSum                      tmpDateSum;
        AssetTableMethod                assetTableMethod;
        AssetTableInterval              assetTableInterval;

        AssetTransDate      transDate;
        AssetAmount         allocationAmount;
        AssetAmount         allocationAcc;
        AssetAmount         allocationAccBeginYear;

        AssetDocumentDepHelperForProfile_JP profileHelper;
        Map                                 mapResult = new Map(Types::Int64, Types::Container);
        MapEnumerator                       mapEnumerator;
        Map                                 reductionEntryBeginBalanceMap = new Map(Types::Date, Types::Real);
        Counter                             counter;
        Counter                             conLength;
        container                           rawContainer;
        AssetDocumentEntry_JP                documentEntry;
        AssetDocumentReductionEntryTable_JP  reductionEntry;
        AssetTableIntervalFactory_JP         assetTableIntervalFactory;

        documentEntry  = AssetReductionEntryManager_JP::getAssetReductionEntryByAssetBook(this.AssetId, this.BookId, AssetDocumentType_JP::AssetReductionEntry_Reserve);
        reductionEntry = AssetDocumentReductionEntryTable_JP::findByDocumentEntry(documentEntry.RecId);

        assetTableMethod   = AssetTableMethod::construct(this, dateMax());
        profileHelper = AssetDocumentDepHelperForProfile_JP::construct(
            [AssetDocumentType_JP::AssetReductionEntry_Reserve],
            this);

        if (assetTableMethod is AssetDepTableMethodInterface_JP
            && profileHelper
            && reductionEntry)
        {
            tmpDateSum.ttsbegin();

            assetTableIntervalFactory = new AssetTableIntervalFactory_JP(this);
            assetTableInterval = assetTableIntervalFactory.getAssetTableInterval(this.LastReserveAllocationDate_JP+1);
            reductionEntryBeginBalanceMap = AssetReductionEntryManager_JP::convertTmpDateSumToYearBeginBalanceMap(_tmpDateSum, assetTableInterval);

            // reserve
            tmpDateSum.TransDate   = assetTableInterval.endPeriod(max(this.AllocationStartDate_JP-1, this.LastReserveAllocationDate_JP)+1)-1;
        	allocationAccBeginYear = (AssetTrans::amountMSTPerDateTransTypes(
                                    this.AssetId,
                                    this.BookId,
                                    [AssetTransType::ReductionEntryReserveAllocation_JP],
                                    dateNull(),
                                    assetTableInterval.findFirstDayOfYear(tmpDateSum.TransDate)-1));
        	allocationAcc = (AssetTrans::amountMSTPerDateTransTypes(
                                    this.AssetId,
                                    this.BookId,
                                    [AssetTransType::ReductionEntryReserveAllocation_JP],
                                    dateNull(),
                                    tmpDateSum.TransDate));
            // set allcaotion
            tmpDateSum.TmpNumerals01   = 0;
            // set Pre-adjustment reduction entry
            tmpDateSum.TmpNumerals03   = reductionEntry.PreAmountMST;
            // set Post-adjustment reduction entry
            tmpDateSum.TmpNumerals04   = reductionEntry.PostAmountMST;
            // set Year begin balance
            tmpDateSum.TmpNumerals02    = reductionEntry.PostAmountMST - allocationAccBeginYear;
            // set YTD balance
            tmpDateSum.Total            = reductionEntry.PostAmountMST - allocationAcc;
            tmpDateSum.insert();

            if (tmpDateSum.Total)
            {
                // allocation
                profileHelper.parmReductionEntryBeginBalanceMap(reductionEntryBeginBalanceMap);
                profileHelper.parmRunDate(dateMax());
                profileHelper.init();

                mapResult = profileHelper.calc(_maxPlanDate);
                mapEnumerator = mapResult.getEnumerator();
                if (mapEnumerator.moveNext())
                {
                    rawContainer = mapEnumerator.currentValue();
                    conLength = conLen(rawContainer);
                    for (counter=1; counter <= conLength; counter++)
                    {
                        [allocationAmount,transDate] = conPeek(rawContainer, counter);
                        if (AssetParameters::isManuallyChangeDepProfileEnable_JP())
                        {
                            assetTableInterval = this.AssetDepBookMap_JP::assetTableInterval(transDate);
                        }

                        if (assetTableInterval.indexofPeriod(transDate) == 1)
                        {
                            allocationAccBeginYear = allocationAcc;
                        }

                        allocationAcc += allocationAmount;

                        tmpDateSum.clear();
                        tmpDateSum.TransDate = transDate;
                        tmpDateSum.TmpNumerals01 = allocationAmount;
                        tmpDateSum.ytdAccumulatedDep_JP = allocationAcc - allocationAccBeginYear;
                        tmpDateSum.BeginningBalOfAccumulatedDep_JP = allocationAccBeginYear;
                        tmpDateSum.TmpNumerals02    = reductionEntry.PostAmountMST - allocationAccBeginYear;
                        tmpDateSum.Total            = reductionEntry.PostAmountMST - allocationAcc;
                        tmpDateSum.insert();
                    }
                }
            }
            tmpDateSum.ttscommit();
        }

        return tmpDateSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        AssetParameters assetParameters;

        assetParameters             = AssetParameters::find();
        this.AcquisitionDate        = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.DepreciationStartDate  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.Status                 = AssetStatus::NoAcquisition;  // not acquired yet
        this.PostingProfile         = assetParameters.PostingProfile;
        this.CheckMaxPercentRB      = assetParameters.CheckMaxPercentRB;

        if (FeatureStateProvider::isFeatureEnabled(FixedAssetDisposalSameYearParametersFeature::instance()))
        {
            this.IsDisposalSameYear     = assetParameters.IsDisposalSameYear;
        }

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            this.initDepreciationStartDate_HU();
        }
        // </GEEHU>

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        const int Monthly = 12;
        const int Quarterly = 4;
        const int HalfYearly = 2;
        const int Yearly = 1;

        AssetBook      assetBookDepreciationdate;

        this.AssetGroup = this.assetTable().AssetGroup;
        this.SortingId  = this.assetTable().SortingId;
        this.SortingId2 = this.assetTable().SortingId2;
        this.SortingId3 = this.assetTable().SortingId3;

        if (AssetDepreciationProfileSpec::find(this.DepreciationProfile))
        {
            this.LifeTime = AssetDepreciationProfileSpec::getNumberOfIntervals(this.DepreciationProfile);
            // <GEEHU>
            if (this.depreciationMethod() == AssetDepreciationMethod::MultiplicationFactor_HU)
            {
                switch (this.depreciationProfile().Accrual)
                {
                    case AssetAccrual::Yearly :
                        this.LifeTime = this.LifeTime * Yearly;
                        break;
                    case AssetAccrual::HalfYearly:
                        this.LifeTime = this.LifeTime * HalfYearly;
                        break;
                    case AssetAccrual::Quarterly:
                        this.LifeTime = this.LifeTime * Quarterly;
                        break;
                    case AssetAccrual::Monthly:
                        this.LifeTime = this.LifeTime * Monthly;
                        break;
                    case AssetAccrual::FiscalPeriod:
                        this.calcLifeTime();
                        break;
                    default :
                        break;
                }
            }
            // </GEEHU>
            this.LifeTimeRest   = this.LifeTime;
            this.calcServiceLife();
        }
        // <GIN>
        if (AssetParameters::isDepreciationIncomeTaxActEnable_IN()
            && this.AssetGroupDepreciation_IN)
        {
            select firstonly LastDepreciationDate from assetBookDepreciationdate
                order by LastDepreciationDate desc
                where assetBookDepreciationdate.AssetGroup == this.AssetGroup
                    && assetBookDepreciationdate.BookId    == this.BookId
                    && assetBookDepreciationdate.LastDepreciationDate;

            this.LastDepreciationDate = assetBookDepreciationdate.LastDepreciationDate;
        }
        // </GIN>
        ttsbegin;

        super();

        AssetTable assetTable = AssetTable::find(this.AssetId);
        DimensionDefaultFacade::copyDimensionValueToDefaultDimensionField(assetTable, fieldNum(AssetTable, AssetId), this, fieldNum(AssetBook, DefaultDimension));

        this.createAssetBookBonusFromAssetGroup();

        ttscommit;

        // <GIN>
        if (AssetParameters::isDepreciationCompaniesActEnable_IN())
        {
            this.createAssetBookShiftDepreciation_IN();
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidDerogatoryServiceLife</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a service life of the derogatory tax model is longer than the main value model.
    /// </summary>
    /// <returns>
    ///    true if the service life of the derogatory tax model is longer than the main one;
    ///    otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is only used for value models used for the French derogatory depreciation.
    /// </remarks>
    private boolean invalidDerogatoryServiceLife()
    {
    AssetBook   assetBookDerogatory;
    boolean     retValue = false;
    ;
        if (this.ServiceLife > 0)
        {
            // If this is a derogatory tax model, verify that the derogatory value model service life is not longer than the main value model.
            if (this.IsDerogatoryBook_FR)
            {
                select firstonly assetBookDerogatory
                    where assetBookDerogatory.AssetDerogatoryModel_FR == this.BookId
                       && assetBookDerogatory.AssetId == this.AssetId;
                if (assetBookDerogatory && assetBookDerogatory.ServiceLife > 0 &&
                   (this.ServiceLife > assetBookDerogatory.ServiceLife))
                {
                    // Derogatory tax model '%1' service life cannot be greater than of value model '%2'.
                    warning(strFmt("@FixedAssets:FA_MessageValidation_ServiceLifeOfDerogatoryTaxModelCannotBeGreaterThanBook", this.BookId, assetBookDerogatory.BookId ));
                    retValue = true;
                }
            }
            // If this is a main derogatory value model, verify that its derogoatry tax model service life is not longer than the main value model.
            else if (this.AssetDerogatoryModel_FR)
            {
                 select firstonly assetBookDerogatory
                    where assetBookDerogatory.BookId == this.AssetDerogatoryModel_FR
                       && assetBookDerogatory.AssetId == this.AssetId;
                if (assetBookDerogatory && assetBookDerogatory.ServiceLife > 0 &&
                   (assetBookDerogatory.ServiceLife > this.ServiceLife))
                {
                    // Derogatory tax model '%1' service life cannot be greater than of value model '%2'.
                    warning(strFmt("@FixedAssets:FA_MessageValidation_ServiceLifeOfDerogatoryTaxModelCannotBeGreaterThanBook", assetBookDerogatory.BookId, this.BookId ));
                   retValue = true;
                }
            }
        }

    return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDepreciationSuspendable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record can have depreciation suspended.
    /// </summary>
    /// <returns>
    /// true if a record can have depreciation suspended; otherwise, false.
    /// </returns>
    public boolean isDepreciationSuspendable()
    {
        AssetBookTable assetBookTable;
        AssetDepreciationProfile profile;

        if (this.Status == AssetStatus::Open && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            assetBookTable = AssetBookTable::find(this.BookId);
            if (assetBookTable != null && (assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Tax || assetBookTable.CurrentOperationsTax == CurrentOperationsTax::None))
            {
                profile = this.depreciationProfile();
                if (profile != null)
                {
                    // pre checked AssetBook.Status is Open
                    // pre checked AssetBookTable.CurrentOperationsTax is Tax or is None
                    return profile.Method == AssetDepreciationMethod::StraightLine
                        || profile.Method == AssetDepreciationMethod::Regular_CZ
                        || profile.Method == AssetDepreciationMethod::Accelerated_CZ;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrimaryProfilePolishDepreciationMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will determine if the depreciation method is used for Polish depreciation type.
    /// </summary>
    /// <returns>
    /// True is the depreciation is of Polish type, otherwise is false.
    /// </returns>
    public boolean isPrimaryProfilePolishDepreciationMethod()
    {
        boolean returnValue;

        if (AssetDepreciationProfile::isProfilePolishDepreciationMethod(this.depreciationMethod()))
        {
            returnValue = true;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrueUpDepreciationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if catch up depreciation is required for this <c>AssetBook</c> record.
    /// </summary>
    /// <returns>
    /// true if required; false otherwise.
    /// </returns>
    /// <remarks>
    /// When the parameter 'IsAllowDepreciationAdjSameDate' is set to yes
    /// then we are calculating TrueUp depreciation only if there are equal to or more than two Acquisitions
    /// When the parameter 'IsAllowDepreciationAdjSameDate' is set to no then we are calculating TrueUp depreciation
    /// even if there is only one Acquisition.
    /// </remarks>
    public boolean isTrueUpDepreciationRequired()
    {
        boolean isTrueUpDepreciationRequired;

        if (this.IsTrueUpDepreciation)
        {
            if (this.IsAllowDepreciationAdjSameDate)
            {
                isTrueUpDepreciationRequired = (AssetTrans::findNumberOfAcquisitionTransactions(this.AssetId, this.BookId) >= 2);
            }
            else
            {
                AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(this.AssetId, this.BookId);

                select minof(TransDate) from assetTransTmp
                  where assetTransTmp.BookId == this.BookId
                      && assetTransTmp.AssetId == this.AssetId
                      && assetTransTmp.Txt != "@SYS67430"
                      && (assetTransTmp.TransType == AssetTransType::Acquisition
                      || assetTransTmp.TransType == AssetTransType::AcquisitionAdj
                      || assetTransTmp.TransType == AssetTransType::CapitalReserveTransfer);

                TransDate firstAcqDate = assetTransTmp.TransDate;

                select firstonly RecId from assetTransTmp
                  where assetTransTmp.BookId == this.BookId
                      && assetTransTmp.AssetId == this.AssetId
                      && assetTransTmp.TransDate != firstAcqDate
                      && assetTransTmp.Txt != "@SYS67430"
                      && (assetTransTmp.TransType == AssetTransType::Acquisition
                      || assetTransTmp.TransType == AssetTransType::AcquisitionAdj
                      || assetTransTmp.TransType == AssetTransType::CapitalReserveTransfer);
                isTrueUpDepreciationRequired = assetTransTmp.RecId != 0;
            }
        }

        return isTrueUpDepreciationRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lifeTimeMonth</Name>
				<Source><![CDATA[
    public AssetLifeTime lifeTimeMonth(date dateNow = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        int month;

        AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(this.AssetId, this.BookId);
        select firstonly TransDate from assetTransTmp
            where assetTransTmp.AssetId   == this.AssetId &&
                  assetTransTmp.BookId    == this.BookId  &&
                  assetTransTmp.TransType == AssetTransType::Acquisition;

        while (assetTransTmp.TransDate <= dateNow)
        {
            assetTransTmp.TransDate = dateMthFwd(assetTransTmp.TransDate, 1);
            month++;
        }

        return month;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modified field
    /// </summary>
    /// <param name="_fieldId">
    /// The fieldId
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        AssetTrans  assetTrans;
        AssetDepreciationProfile assetDepreciationProfile = this.depreciationProfile();
	    // <GJP>
	    boolean     isISOJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
	    // </GJP>

        super(_fieldId);

        switch (_fieldId)
        {
	        //<GJP>
	        case fieldNum(AssetBook, AssetId):
	            if (isISOJP)
	            {
	                this.initFromAssetGroupBookSetup();
	            }
	            break;
	        case fieldNum(AssetBook, DepreciationExtProfile):
	            if (isISOJP)
	            {
	                AssetSpecialDepHelper_JP::updateDefaultAllocationPeriods(this, true);
                    this.setSummarizedByMajorType_JP();
	            }
	            break;
	        case fieldNum(AssetBook, SpecialDepAllocationUnit_JP):
	            if (isISOJP)
	            {
	                AssetSpecialDepHelper_JP::updateDefaultAllocationPeriods(this, false);
                    if (this.SpecialDepAllocationUnit_JP == AssetAccrualFiscal::Yearly)
                    {
                        this.SpecialDepAllocationConvention_JP = AssetSpecialDepAllocationConvention_JP::FollowingFiscalYear;
                    }
	            }
	            break;
	        //</GJP>
            case fieldNum(AssetBook, BookId):
                this.initFromAssetGroupBookSetup();
                break;

            case fieldNum(AssetBook, LifeTime):
                this.calcServiceLife();
                this.calcLifeTimeRest();
                // French Derogatory Depreciation does not allow the Deprecation Tax Model
                // to have service life longer then the main value model
                if (this.invalidDerogatoryServiceLife())
                {
                    this.ServiceLife = this.orig().ServiceLife;
                    this.LifeTime = this.orig().LifeTime;
                    this.LifeTimeRest = this.orig().LifeTimeRest;
                }
	            // <GJP>
	            if (isISOJP)
	            {
	                AssetSpecialDepHelper_JP::updateDefaultAllocationPeriods(this);
	            }
	            // </GJP>
                break;

            case fieldNum(AssetBook, ServiceLife):
                this.calcLifeTime();
                this.calcLifeTimeRest();

                // French Derogatory Depreciation does not allow the Deprecation Tax Model
                // to have service life longer then the main value model
                if (this.invalidDerogatoryServiceLife())
                {
                    this.ServiceLife = this.orig().ServiceLife;
                    this.LifeTime = this.orig().LifeTime;
                    this.LifeTimeRest = this.orig().LifeTimeRest;
                }
                else
                {
                    // If this is value model is an RBSL depreciation method, make sure
                    // that RBSL year, month and the factor is recalculated.
                    this.calcRBSLLifeAndFactor();
                }
                // <GJP>
                if (isISOJP)
                {
                    AssetSpecialDepHelper_JP::updateDefaultAllocationPeriods(this);

                    this.checkAssetRevisedDepreciationCost_JP();
                }
                // </GJP>
                break;

            case fieldNum(AssetBook, IsMigratedAsset):
                if (this.IsMigratedAsset)
                {
                    checkFailed(strFmt("@FixedAssets:MigratedAssetWarning"));
                }
                break;

            case fieldNum(AssetBook, AcquisitionDate):
                if (!this.UsedFromDate && !this.IsMigratedAsset)
                {
                    this.UsedFromDate = this.AcquisitionDate;
                    this.calcDepreciationStartDate();
                }
                select firstonly TransDate from assetTrans
                        where assetTrans.AssetId == this.AssetId &&
                              assetTrans.BookId  == this.BookId;
                if (this.UsedFromDate < assetTrans.TransDate && this.Status == AssetStatus::Open)
                {
                    checkFailed(strFmt("@SYS344046", assetTrans.TransDate));
                }
                break;

            //  added validation for recalculating lifetime with daily accrual option
            //  when depreciation start date has been modified
            case fieldNum(AssetBook, DepreciationStartDate):
                if (assetDepreciationProfile.Accrual == AssetAccrual::Daily
                    || (this.ServiceLife && assetDepreciationProfile.Accrual == AssetAccrual::FiscalPeriod))
                {
                    this.calcLifeTime();
                    this.LifeTimeRest = this.LifeTime;
                }
                break;

            case fieldNum(AssetBook, UsedFromDate):
                if (this.UsedFromDate)
                {
                    this.calcDepreciationStartDate();
                }
                select firstonly TransDate from assetTrans
                    where assetTrans.AssetId == this.AssetId &&
                      assetTrans.BookId  == this.BookId;
                if (this.UsedFromDate < assetTrans.TransDate && this.Status == AssetStatus::Open)
                {
                    checkFailed(strFmt("@SYS344046", assetTrans.TransDate));
                }
                break;

            case fieldNum(AssetBook, DepreciationConvention):
                this.calcDepreciationStartDate();
                break;

            case fieldNum(AssetBook, ServiceLifeYears_FR):
            case fieldNum(AssetBook, ServiceLifeMonths_FR):
                this.calcServiceLife();
                this.calcLifeTime();
                // French Derogatory Depreciation does not allow the Deprecation Tax Model
                // to have service life longer then the main value model
                if (this.invalidDerogatoryServiceLife())
                {
                    this.ServiceLife = this.orig().ServiceLife;
                    this.LifeTime = this.orig().LifeTime;
                    this.LifeTimeRest = this.orig().LifeTimeRest;
                    this.rbslFactor = this.orig().rbslFactor;
                }
                else
                {
                    this.LifeTimeRest = this.LifeTime;
                    this.rbslFactor = AssetRBSLFactorTable::findFactor(this.DepreciationStartDate, this.LifeTime).AssetRBSLFactor;
                }
                break;

            case fieldNum(AssetBook, Status):
                if ((this.orig().Status == AssetStatus::Closed ||
                     this.orig().Status == AssetStatus::Suspended ||
                     this.orig().Status == AssetStatus::Sold ||
                     this.orig().Status == AssetStatus::Scrapped ||
                     this.orig().Status == AssetStatus::TransferredToLowValuePool) &&
                    (this.Status == AssetStatus::Open))
                {
                    if (this.DepreciationConvention != AssetDepreciationConvention::None)
                    {
                        if (!this.checkIfConventionCanBeSet())
                        {
                            info("@SYS98770");
                            this.DepreciationConvention = AssetDepreciationConvention::None;
                        }
                    }
                }
                break;

            case fieldNum(AssetBook, DepreciationProfile):

                AssetDepreciationProfile depreciationProfile = this.depreciationProfile();

                if ((depreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal &&
                    !this.assetBookTable().getFiscalCalendar())  ||
                    //  prevents depreciation convention to be set if daily accrual is selected
                    (depreciationProfile.Accrual == AssetAccrual::Daily) ||
                     !this.checkIfConventionCanBeSet())
                {
                    this.DepreciationConvention = AssetDepreciationConvention::None;
                    this.calcDepreciationStartDate();
                    warning(strFmt("@FixedAssets:FA_WarningMessage_DepreciationConventionHasBeenUpdated", AssetDepreciationConvention::None));
                }

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    this.Percentage_PL = depreciationProfile.Percentage;
                }

                break;

            case fieldNum(AssetBook, DepreciationAltProfile):

                if (this.depreciationAltProfile().Accrual == AssetAccrual::Daily)
                {
                    this.DepreciationConvention = AssetDepreciationConvention::None;

                    warning(strFmt("@FixedAssets:FA_WarningMessage_DepreciationConventionHasBeenUpdated", AssetDepreciationConvention::None));
                }

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    this.PercentageAlt_PL = this.depreciationAltProfile().Percentage;
                }

                break;

            // <GEEPL>
            case fieldNum(AssetBook, DepreciationGroupId_W):
                this.updateNoCostFields_PL();
                break;
            // </GEEPL>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needToUpdateLifeTimeWithDepreciationTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the value of the <c>LifeTimeRest</c> field must be updated by using the value of the
    /// <c>DepreciationTime</c> field.
    /// </summary>
    /// <returns>
    /// true if the update is required; otherwise, false.
    /// </returns>
    public boolean needToUpdateLifeTimeWithDepreciationTime()
    {
        AssetDepreciationProfile    depreciationProfile;
        AssetDepreciationProfile    depreciationAltProfile;
        boolean                     returnValue;
        // <GIN>
        boolean                     isIndiaCountryRegion;
        // </GIN>

        // <GIN>
        isIndiaCountryRegion = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>

        depreciationProfile     = this.depreciationProfile();
        depreciationAltProfile  = this.depreciationAltProfile();

        if (
            (depreciationProfile
            && (depreciationProfile.Method == AssetDepreciationMethod::StraightLineLifeRemaining
            || depreciationProfile.Method == AssetDepreciationMethod::StraightLine
            || depreciationProfile.Method == AssetDepreciationMethod::ReducingBalance
            || depreciationProfile.Method == AssetDepreciationMethod::ReducingBalance125
            || depreciationProfile.Method == AssetDepreciationMethod::ReducingBalance150
            || depreciationProfile.Method == AssetDepreciationMethod::ReducingBalance175
            || depreciationProfile.Method == AssetDepreciationMethod::ReducingBalance200
            || depreciationProfile.Method == AssetDepreciationMethod::Factor
            || depreciationProfile.Method == AssetDepreciationMethod::RBSL
            || depreciationProfile.Method == AssetDepreciationMethod::Manual
            // <GEECZ>
            || depreciationProfile.Method == AssetDepreciationMethod::Regular_CZ
            || depreciationProfile.Method == AssetDepreciationMethod::Accelerated_CZ
            // </GEECZ>
            // <GEEHU>
            || depreciationProfile.Method == AssetDepreciationMethod::StraightLine_HU
            || depreciationProfile.Method == AssetDepreciationMethod::Factor_HU
            // </GEEHU>
            // <GEEPL>
            || depreciationProfile.Method == AssetDepreciationMethod::StraightLine_PL
            || depreciationProfile.Method == AssetDepreciationMethod::ReducingBalance_PL
            // </GEEPL>
            // <GJP>
            || depreciationProfile.Method == AssetDepreciationMethod::OldStraightLine_JP
            || depreciationProfile.Method == AssetDepreciationMethod::OldDecliningBalance_JP
            || depreciationProfile.Method == AssetDepreciationMethod::NewStraightLine_JP
            || depreciationProfile.Method == AssetDepreciationMethod::NewDecliningBalance200_JP
            || depreciationProfile.Method == AssetDepreciationMethod::NewDecliningBalance250_JP
            // </GJP>
            // <GCN>
            || (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN])
                && (depreciationProfile.Method == AssetDepreciationMethod::DoubleReduceBalance_CN
                    || depreciationProfile.Method == AssetDepreciationMethod::SumYearDigits_CN))
            // </GCN>
            // <GIN>
            || (isIndiaCountryRegion
                && depreciationProfile.Method == AssetDepreciationMethod::StraightLinePercentage_IN)
            // </GIN>
            ))
            ||
            (depreciationAltProfile
            && (depreciationAltProfile.Method == AssetDepreciationMethod::StraightLineLifeRemaining
            || depreciationAltProfile.Method == AssetDepreciationMethod::StraightLine
            || depreciationAltProfile.Method == AssetDepreciationMethod::Factor
            || depreciationAltProfile.Method == AssetDepreciationMethod::ReducingBalance
            || depreciationAltProfile.Method == AssetDepreciationMethod::ReducingBalance125
            || depreciationAltProfile.Method == AssetDepreciationMethod::ReducingBalance150
            || depreciationAltProfile.Method == AssetDepreciationMethod::ReducingBalance175
            || depreciationAltProfile.Method == AssetDepreciationMethod::ReducingBalance200
            || depreciationAltProfile.Method == AssetDepreciationMethod::RBSL
            || depreciationProfile.Method == AssetDepreciationMethod::Manual
            // <GEEHU>
            || depreciationAltProfile.Method == AssetDepreciationMethod::StraightLine_HU
            || depreciationAltProfile.Method == AssetDepreciationMethod::Factor_HU
            // </GEEHU>
            // <GEEPL>
            || depreciationAltProfile.Method == AssetDepreciationMethod::StraightLine_PL
            || depreciationAltProfile.Method == AssetDepreciationMethod::ReducingBalance_PL
            // </GEEPL>
            // <GCN>
            || (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN])
                && (depreciationAltProfile.Method == AssetDepreciationMethod::DoubleReduceBalance_CN
                    || depreciationAltProfile.Method == AssetDepreciationMethod::SumYearDigits_CN))
            // </GCN>
            // <GIN>
            || (isIndiaCountryRegion
                && depreciationProfile.Method == AssetDepreciationMethod::StraightLinePercentage_IN)
            // </GIN>
            )))
        {
            returnValue = true;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>percentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to calculate the percentage value that is based on the service life and
    /// reducing balance factor.
    /// </summary>
    /// <returns>
    /// The specific percentage value.
    /// </returns>
    public AssetDepreciationPercentage percentage()
    {
        percent RB125_Factor = 1.25;
        percent RB150_Factor = 1.50;
        percent RB175_Factor = 1.75;
        percent RB200_Factor = 2.00;

        AssetDepreciationPercentage percentage;
        AssetDepreciationProfile    assetDepreciationProfile = this.depreciationProfile();;

        if (assetDepreciationProfile.Method == AssetDepreciationMethod::StraightLineLifeRemaining ||
            assetDepreciationProfile.Method == AssetDepreciationMethod::StraightLine)
        {
            assetDepreciationProfile = this.depreciationAltProfile();
        }

        switch (assetDepreciationProfile.Method)
        {
            case AssetDepreciationMethod::ReducingBalance125:
                percentage = AssetTableMethod_RB::calculatePercentagByFactor(RB125_Factor, this.ServiceLife);
                break;

            case AssetDepreciationMethod::ReducingBalance150:
                percentage = AssetTableMethod_RB::calculatePercentagByFactor(RB150_Factor, this.ServiceLife);
                break;

            case AssetDepreciationMethod::ReducingBalance175:
                percentage = AssetTableMethod_RB::calculatePercentagByFactor(RB175_Factor, this.ServiceLife);
                break;

            case AssetDepreciationMethod::ReducingBalance200:
                percentage = AssetTableMethod_RB::calculatePercentagByFactor(RB200_Factor, this.ServiceLife);
                break;

            default:
                percentage = assetDepreciationProfile.Percentage;
                break;
        }

        return percentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rbslPercent</Name>
				<Source><![CDATA[
    display AssetRBSLPercent rbslPercent()
    {
        AssetRBSLPercent assetRBSLPercent;
        AssetTableInterval  assetTableInterval;
        //
        //  assetTableInterval requires the assetBookTable.calendarId.
        //
        AssetBookTable      assetBookTable = AssetBookTable::find(this.BookId);

        if (this.depreciationProfile())
        {
            assetTableInterval = AssetTableInterval::construct(this.depreciationProfile(), assetBookTable.FiscalCalendar);

            if (this.LifeTime && this.rbslFactor)
            {
                assetRBSLPercent = 100 / (this.LifeTime / assetTableInterval.numOfPeriodsPerYear()) * this.rbslFactor;
            }
        }

        return assetRBSLPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reductionEntryDocumentDate_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the asset reduction entry document date
    /// </summary>
    /// <param name="_set">
    /// Set or get the document date
    /// </param>
    /// <param name="_documentDate">
    /// Instance of <c>AssetReductionEntryDocumentDate_JP</c>
    /// </param>
    /// <returns>
    /// The document date for asset reduction entry
    /// </returns>
    public edit AssetReductionEntryDocumentDate_JP reductionEntryDocumentDate_JP(
        boolean                                  _set,
        AssetReductionEntryDocumentDate_JP       _documentDate)
    {
        AssetDocumentReductionEntry_JP      document;
        AssetReductionEntryDocumentDate_JP  documentDateLoc;

        document = AssetReductionEntryManager_JP::getAssetReductionEntryDocByAssetBook(
            this.AssetId,
            this.BookId);

        if (_set)
        {
            documentDateLoc = _documentDate;
            if (document != null)
            {
                document.parmReductionEntryDocumentDate(documentDateLoc);
                document.updateReductionEntryDocument();
            }
        }
        else
        {
            if (document != null)
            {
                documentDateLoc = document.parmReductionEntryTable().DocumentDate;
            }
        }

        return documentDateLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reductionEntryTemplateId_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the asset reduction entry document id
    /// </summary>
    /// <param name="_set">
    /// Set or get the document id
    /// </param>
    /// <param name="_templateId">
    /// Instance of <c>AssetReductionEntryProfileId_JP</c>
    /// </param>
    /// <returns>
    /// The document id for asset reduction entry
    /// </returns>
    public edit AssetReductionEntryProfileId_JP reductionEntryTemplateId_JP(
        boolean                                  _set,
        AssetReductionEntryProfileId_JP         _templateId)
    {
        AssetDocument_JP                         document;
        AssetDocumentReductionEntryTemplateId_JP templateId;
        AssetDepreciationProfile                 assetDepreciationProfile;

        document = AssetReductionEntryManager_JP::getAssetReductionEntryDocByAssetBook(
            this.AssetId,
            this.BookId);
        if (_set)
        {
            templateId = _templateId;

            if (templateId)
            {
                assetDepreciationProfile = this.depreciationProfile();

                if (!AssetDepreciationProfile::isDepMethod_JP(assetDepreciationProfile.Method))
                {
                    checkFailed("@FixedAssets:FA_MessageError_ReductionEntryDocumentCanOnlyBeUsedWithJapanDepreciationMethod");
                    return '';
                }
            }

            if (document != null)
            {
                if (templateId)
                {
                    document.updateAssetDocumentEntryByDocument(AssetDocumentMainType_JP::ReductionEntry, _templateId);
                }
                else
                {
                    document.deleteAssetDocumentEntry();
                }
            }
            else
            {
                document = AssetDocumentReductionEntry_JP::createAssetDocumentEntry(this.AssetId, this.BookId, templateId);
            }
        }

        if (document != null)
        {
            templateId = document.parmAssetDocumentTable().DocumentId;
        }

        return templateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reductionEntryDocumentStatus_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the asset reduction entry status
    /// </summary>
    /// <returns>
    /// The document status for asset reduction entry
    /// </returns>
    public display AssetDocumentReductionEntryStatus_JP reductionEntryDocumentStatus_JP()
    {
        AssetDocumentReductionEntry_JP       document;
        AssetDocumentReductionEntryStatus_JP documentStatus = AssetDocumentReductionEntryStatus_JP::None;

        document = AssetReductionEntryManager_JP::getAssetReductionEntryDocByAssetBook(
            this.AssetId,
            this.BookId);

        if (document != null)
        {
            documentStatus = document.parmReductionEntryTable().Status;
        }

        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservePostedAmount</Name>
				<Source><![CDATA[
    display AssetReservePostedAmount reservePostedAmount()
    {
        AssetTrans  assetTrans;

        select sum(AmountCur) from assetTrans
            where assetTrans.AssetId    == this.AssetId
               && assetTrans.BookId     == this.BookId
               && assetTrans.TransType  == AssetTransType::CapitalReserve;

        return assetTrans.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffDepreciation</Name>
				<Source><![CDATA[
    public AssetAmount roundOffDepreciation(AssetAmount _assetAmount)
    {
        return AssetBookTable::find(this.BookId).roundOffDepreciation( _assetAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffDepreciationReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds the depreciation amount based on the setting for rounding specified on the value model of the asset.
    /// </summary>
    /// <param name = "_assetAmount">
    /// The amount that is used for the rounding process.
    /// </param>
    /// <returns>
    /// The rounded amount in reporting currency.
    /// </returns>
    public AssetAmount roundOffDepreciationReportingCurrency(AssetAmountReportingCurrency _assetAmount)
    {
        return AssetBookTable::find(this.BookId).roundOffDepreciationReportingCurrency(_assetAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundDepreciationAmount</Name>
				<Source><![CDATA[
    internal AssetAmount roundDepreciationAmount(
        AssetAmount _amount, 
        boolean _isReportingCurrency = false,
        RoundOffType _roundOffType = RoundOffType::Ordinary)
    {
        AssetAmount roundedAmount = _amount;

        if (_roundOffType == RoundOffType::Ordinary)
        {
            if (_isReportingCurrency)
            {
                roundedAmount = this.roundOffDepreciationReportingCurrency(_amount);
            }
            else
            {
                roundedAmount = this.roundOffDepreciation(_amount);
            }
        }
        else
        {
            roundedAmount = AssetBookTable::find(this.BookId).roundDepreciationAmount(_amount, _isReportingCurrency, _roundOffType);
        }

        return roundedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParmValues_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the shift type for the selected asset depreciation method
    /// </summary>
    /// <param name="_assetTableMethod">
    /// The asset depreciation method (straight line, consumption etc)
    /// </param>
    /// <param name="_selection">
    /// The selected shift type, a value of the TypeOfShift_IN enum
    /// </param>
    public void setParmValues_IN(AssetTableMethod    _assetTableMethod,
                                 TypeOfShift_IN      _selection)
    {
        AssetDepreciationProfile    depreciationProfile = this.depreciationProfile();

        _assetTableMethod.parmShiftDepreciation_IN(this.currentOperationsTax()  == CurrentOperationsTax::Current
                                                    && depreciationProfile.isShiftDepreciationMethod_IN()
                                                    && depreciationProfile.ShiftDepreciation_IN);
        switch (_selection)
        {
            case TypeOfShift_IN::SingleShift :
                _assetTableMethod.parmSingleShift_IN(NoYes::Yes);
                _assetTableMethod.parmDoubleShift_IN(NoYes::No);
                _assetTableMethod.parmTripleShift_IN(NoYes::No);
                _assetTableMethod.parmNoneShift_IN(NoYes::No);
                break;
            case TypeOfShift_IN::DoubleShift :
                _assetTableMethod.parmSingleShift_IN(NoYes::No);
                _assetTableMethod.parmDoubleShift_IN(NoYes::Yes);
                _assetTableMethod.parmTripleShift_IN(NoYes::No);
                _assetTableMethod.parmNoneShift_IN(NoYes::No);
                break;
            case TypeOfShift_IN::TripleShift :
                _assetTableMethod.parmSingleShift_IN(NoYes::No);
                _assetTableMethod.parmDoubleShift_IN(NoYes::No);
                _assetTableMethod.parmTripleShift_IN(NoYes::Yes);
                _assetTableMethod.parmNoneShift_IN(NoYes::No);
                break;
            case TypeOfShift_IN::None :
                _assetTableMethod.parmSingleShift_IN(NoYes::No);
                _assetTableMethod.parmDoubleShift_IN(NoYes::No);
                _assetTableMethod.parmTripleShift_IN(NoYes::No);
                _assetTableMethod.parmNoneShift_IN(NoYes::Yes);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxLayerAssetBookForPreTaxDed_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax layer <C>AssetBook</C> record for current one. It may be itself or its linked tax layer <C>AssetBook</C>.
    /// </summary>
    /// <returns>
    /// The tax layer <C>AssetBook</C> record. Return empty record if pre-tax deduction feature is not enabled for current <C>AssetBook</C>.
    /// </returns>
    public AssetBook taxLayerAssetBookForPreTaxDed_JP()
    {
        AssetBook       asseBookTax;
        AssetBookTable  assetBookTable;

        assetBookTable = AssetBookTable::find(this.BookId);
        if (assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Tax)
        {
            asseBookTax = this;
        }
        else if (assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current)
        {
            asseBookTax = AssetBook::find(
                this.AssetId,
                AssetBookTable::findByLinkedCurrentLayerBook_JP(assetBookTable.BookId).BookId);
        }

        return asseBookTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        AssetDepreciationProfile    depreciationProfile;
        AssetDepreciationProfile    depreciationProfile_orig;
        AssetBook                   assetBookDerogatory;
        boolean isUpdate = true;
        boolean                     updateDerogatoryBook = false;

        depreciationProfile      = this.depreciationProfile();
        depreciationProfile_orig = this.orig().depreciationProfile();

        if ((depreciationProfile.Method      == AssetDepreciationMethod::StraightLine       &&
             depreciationProfile_orig.Method != AssetDepreciationMethod::StraightLine) ||
            // <GEEPL>
            (depreciationProfile.Method      == AssetDepreciationMethod::StraightLine_PL    &&
             depreciationProfile_orig.Method != AssetDepreciationMethod::StraightLine_PL)   ||
             // </GEEPL>
             // <GEEHU>
            (depreciationProfile.Method      == AssetDepreciationMethod::StraightLine_HU    &&
             depreciationProfile_orig.Method != AssetDepreciationMethod::StraightLine_HU)   ||
            (depreciationProfile.Method      == AssetDepreciationMethod::Factor_HU    &&
             depreciationProfile_orig.Method != AssetDepreciationMethod::Factor_HU)   ||
             // </GEEHU>
            (depreciationProfile.Method      == AssetDepreciationMethod::Factor             &&
             depreciationProfile_orig.Method != AssetDepreciationMethod::Factor))
        {
            this.LifeTimeRest = this.LifeTime;
        }

        if (depreciationProfile.Method == AssetDepreciationMethod::RBSL
            && this.LifeTimeRest < 0)
        {
            this.LifeTimeRest = 0;
        }

        this.AssetGroup = this.assetGroup().GroupId;

        // Update for low value pool -- if any change has occured so that the net book value is
        // no longer zero and the asset has currently has status of transferred to low value pool
        // then change status to open and clear low value pool fields.
        if (this.Status == AssetStatus::TransferredToLowValuePool)
        {
            if (this.assetNetBookValue())
            {
                this.lvpTransferDate_AU = dateNull();
                this.lvpTransferId_AU = '';
                this.Status = AssetStatus::Open;
            }
        }

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            this.updateAssetDataForDerived_PL();
        }
        // </GEEPL>

        ttsbegin;

        // <GIN>
        if (AssetParameters::isDepreciationIncomeTaxActEnable_IN()
            && this.OrigAcquisitionDate_IN == dateNull())
        {
            this.OrigAcquisitionDate_IN = this.AcquisitionDate;
        }
        // </GIN>
        // <GJP>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
        {
            if (this.LastDepreciationDate > this.orig().LastDepreciationDate)
            {
                AssetDepProfileChange_JP::updateNetBookValueForSource(buf2Con(this));
            }
        }
        // </GJP>

        if (this.CheckMaxPercentRB)
        {
            this.updateMaxPercentRB();
        }

        super();

        // For a derogatory value model validate that the tax and accounting value model share the same information.
        if (this.AssetDerogatoryModel_FR)
        {
            assetBookDerogatory = AssetBook::find(this.AssetId, this.AssetDerogatoryModel_FR, true);
            if (assetBookDerogatory)
            {
                // Verify the Place in Service date.
                if (assetBookDerogatory.UsedFromDate != this.UsedFromDate)
                {
                    assetBookDerogatory.UsedFromDate = this.UsedFromDate;
                    updateDerogatoryBook = true;
                }

                // Verify the depreciaton convention.
                if (assetBookDerogatory.DepreciationConvention != this.DepreciationConvention)
                {
                    assetBookDerogatory.DepreciationConvention = this.DepreciationConvention;
                    updateDerogatoryBook = true;
                }

                // Verify the Depreciation Start Date.
                if (assetBookDerogatory.DepreciationStartDate != this.DepreciationStartDate)
                {
                    assetBookDerogatory.DepreciationStartDate = this.DepreciationStartDate;
                    updateDerogatoryBook = true;
                }

                // Verify the Acquistions Price
                if (assetBookDerogatory.AcquisitionPrice != this.AcquisitionPrice)
                {
                    assetBookDerogatory.AcquisitionPrice = this.AcquisitionPrice;
                    updateDerogatoryBook = true;
                }

                // Verify the Acquistions Date
                if (assetBookDerogatory.AcquisitionDate != this.AcquisitionDate)
                {
                    assetBookDerogatory.AcquisitionDate = this.AcquisitionDate;
                    updateDerogatoryBook = true;
                }

                if (updateDerogatoryBook) assetBookDerogatory.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMaxPercentRB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the 'Percentage after validation' field.
    /// </summary>
    public void updateMaxPercentRB()
    {
        if (this.depreciationAltProfile())
        {
            AssetTableMethod_RB::updateMaxPercentRB(this, dateMax(), '', true);
            AssetTableMethod_RB::updateMaxPercentRB(this, dateMax(), '', true, true);
        }
        else
        {
            AssetTableMethod_RB::updateMaxPercentRB(this, dateMax());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetDataForDerived_PL</Name>
				<Source><![CDATA[
    private void updateAssetDataForDerived_PL()
    {
        AssetBookTableDerived assetBookTableDerived;
        AssetBook             assetBook;

        if (this.orig().DepreciationGroupId_W != this.DepreciationGroupId_W ||
            this.orig().DeprPrevPeriods_PL    != this.DeprPrevPeriods_PL)
        {
            select firstonly assetBookTableDerived
                where assetBookTableDerived.BookId == this.BookId
            exists join assetBook
                where assetBook.BookId  == assetBookTableDerived.BookIdDerived &&
                      assetBook.AssetId == this.AssetId;

            if (assetBookTableDerived)
            {
                DialogButton updateDerivedModels = DialogButton::Yes;

                // hasGUI() protects Box call in scenarios where validation is called when running in Batch or without UI
                if (hasGUI())
                {
                    updateDerivedModels = Box::yesNo("@GLS110657", DialogButton::Yes, "@FixedAssets:FA_EntityTab_DerivedBooks");
                }

                if (updateDerivedModels == DialogButton::Yes)
                {
                    ttsbegin;

                    while select assetBookTableDerived
                        group by BookIdDerived
                        where assetBookTableDerived.BookId == this.BookId
                    {
                        select firstonly forupdate assetBook
                            where assetBook.AssetId == this.AssetId &&
                                  assetBook.BookId  == assetBookTableDerived.BookIdDerived;

                        if (assetBook)
                        {
                            assetBook.DepreciationGroupId_W = this.DepreciationGroupId_W;
                            assetBook.DeprPrevPeriods_PL    = this.DeprPrevPeriods_PL;
                            assetBook.doUpdate();
                        }
                    }
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNoCostFields_PL</Name>
				<Source><![CDATA[
    private void updateNoCostFields_PL()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL])
            && !this.DepreciationGroupId_W)
        {
            this.DeprPrevPeriodsNonCost_PL = 0;
            this.DeprPrevPriorNonCost_PL = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>usedLifeTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of depreciation periods completed for an asset.
    /// </summary>
    /// <returns>
    /// The number of depreciation periods completed for the asset.
    /// </returns>
    public AssetLifeTime usedLifeTime()
    {
        return this.LifeTime - real2int(this.LifeTimeRest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId p1)
    {
        boolean         ret;
        AssetStatusType assetStatusType;
        #COSNumbers
	    // <GJP>
	    boolean         isISOJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
	    // <GJP>

        AssetDepreciationProfilesValidation depreciationProfilesValidation;

        ret = super(p1);

        if (ret)
        {
            switch (p1)
            {
                case fieldNum(AssetBook, Status):

                    assetStatusType = AssetStatusType::construct(this.orig().Status);
                    ret = assetStatusType.checkStatusChangeTo(this.Status);

                    if ((this.orig().Status != this.Status) && ret)
                    {
                        switch (this.orig().Status)
                        {
                            case AssetStatus::Sold,
                                AssetStatus::Scrapped:

                                // hasGUI() protects Box call in scenarios where validation is called when running in Batch or without UI
                                if (hasGUI())
                                {
                                    if (Box::yesNo("@SYS86174",DialogButton::No) == DialogButton::No)
                                    {
                                        ret = false;
                                    }
                                }
                                break;
                        }
                    }

                    break;

                case fieldNum(AssetBook, LifeTime):

                    if (this.LifeTime < 0)
                    {
                        ret = checkFailed("@SYS107864");
                    }

                    ret = this.checkForRBSLDepreciationMethod(ret);
                    break;

                case fieldNum(AssetBook, LifeTimeRest):

                    if (this.LifeTimeRest < 0)
                    {
                        ret = checkFailed("@SYS107865");
                    }
 
                    if ((this.DepreciationConvention == AssetDepreciationConvention::MidMonth15 ||
                        this.DepreciationConvention == AssetDepreciationConvention::MidQuarter) &&
                        (this.LifeTimeRest != 0 && (frac(this.LifeTimeRest) == 0)) &&
                        AssetTrans::existDepreciationTrans(this.AssetId, this.BookId))
                    {
                        ret = checkFailed("@FixedAssets:FA_ErrorMessage_NumberOfDepreciationPeriodsRemainingMustNotBeIntegerNumber");
                    }

                    ret = this.checkForRBSLDepreciationMethod(ret);
                    break;

                case fieldNum(AssetBook, DepreciationStartDate):

                    if (this.depreciationProfile().Method == AssetDepreciationMethod::RBSL)
                    {
                        if (dayOfMth(this.DepreciationStartDate) != 1)
                        {
                            ret = checkFailed("@SYS99101");
                        }
                    }

                    if (this.unreversedDepreciationExists())
                    {
                        ret = checkFailed(strFmt("@FixedAssets:FA_ErrorMessage_DepreciationExists", fieldPName(AssetBook, DepreciationStartDate)));
                    }

                    break;

                case fieldNum(AssetBook, UsedFromDate):

                    if (this.unreversedDepreciationExists())
                    {
                        ret = checkFailed(strFmt("@FixedAssets:FA_ErrorMessage_DepreciationExists", fieldPName(AssetBook, UsedFromDate)));
                    }

                    break;

                case fieldNum(AssetBook, ServiceLifeMonths_FR):

                    if (this.ServiceLifeMonths_FR > #11)
                    {
                        ret = checkFailed("@SYS99111");
                    }
                    break;

                case fieldNum(AssetBook, ServiceLife):

                    if (this.ServiceLife < 0)
                    {
                        ret = checkFailed("@SYS107866");
                    }
                    break;

                // Valdate that for derogatory depreciaton Negative Net Book Value are not allowed.
                case fieldNum(AssetBook, NegativeNetBookValue):
                    if (this.NegativeNetBookValue && (this.AssetDerogatoryModel_FR || this.IsDerogatoryBook_FR))
                        // Allow negative net book value cannot be selected for a derogatory depreciation value model.
                        ret = checkFailed("@FixedAssets:FA_MessageValidation_CannotSelectAllowNegativeNetBookValueForDerogatoryDepreciationBook");
                    break;

                case fieldNum(AssetBook, CheckMaxPercentRB):
                    if (!this.CheckMaxPercentRB && this.orig().CheckMaxPercentRB && hasGUI())
                    {
                        if (AssetTrans::existDepreciationTrans(this.AssetId, this.BookId)
                            && DialogButton::No == Box::yesNo("@SYS152382", DialogButton::No))
                        {
                            ret = false;
                        }
                    }
                    break;
                case fieldNum(AssetBook, IsTrueUpDepreciation):
                    if (!this.IsTrueUpDepreciation)
                    {
                        checkFailed("@SYS345151");
                    }
                break;

                // <GEEPL>
                case fieldNum(AssetBook, DeprPrevPeriods_PL):
                case fieldNum(AssetBook, DeprPrevPriorCost_PL):

                    if (this.DeprPrevPriorCost_PL > this.DeprPrevPeriods_PL)
                    {
                        ret = checkFailed("@GLS220736");
                    }
                break;

                case fieldNum(AssetBook, DeprPrevPeriodsNonCost_PL):
                case fieldNum(AssetBook, DeprPrevPriorNonCost_PL):

                    if (this.DeprPrevPriorNonCost_PL > this.DeprPrevPeriodsNonCost_PL)
                    {
                        ret = checkFailed("@GLS220737");
                    }
                break;
                // </GEEPL>

                // <GEEHU>
                case fieldNum(AssetBook,AcquisitionDate) :
                    this.initDepreciationStartDate_HU();
                    break;
                // </GEEHU>

                case fieldNum(AssetBook, DepreciationConvention):

                    depreciationProfilesValidation = AssetDepreciationProfilesValidation::construct(this);
                    ret = ret && depreciationProfilesValidation.validateDepreciationConvention();

                break;

                case fieldNum(AssetBook, DepreciationProfile):

                    depreciationProfilesValidation = AssetDepreciationProfilesValidation::construct(this);
                    ret = ret && depreciationProfilesValidation.validateDepreciationProfile();

                    break;

                case fieldNum(AssetBook, DepreciationAltProfile):

                    depreciationProfilesValidation = AssetDepreciationProfilesValidation::construct(this);
                    ret = ret && depreciationProfilesValidation.validateDepreciationAltProfile();

                    break;

                case fieldNum(AssetBook, DepreciationExtProfile):

                    depreciationProfilesValidation = AssetDepreciationProfilesValidation::construct(this);
                    ret = ret && depreciationProfilesValidation.validateDepreciationExtProfile();

                    break;

                case fieldNum(AssetBook, DepreciationAcceleratedProfile_JP):

                    depreciationProfilesValidation = AssetDepreciationProfilesValidation::construct(this);
                    ret = ret && depreciationProfilesValidation.validateDepreciationAcceleratedProfile_JP();

                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForRBSLDepreciationMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the user truly wants to update the depreciation profile method to RBSL.
    /// </summary>
    /// <param name = "_ret">The current state of the validation return value.</param>
    /// <returns>true if the user wants the depreciation method updated; false otherwise.</returns>
    private boolean checkForRBSLDepreciationMethod(boolean _ret)
    {
        // hasGUI() protects Box call in scenarios where validation is called when running in Batch or without UI
        if (_ret && this.depreciationProfile().Method == AssetDepreciationMethod::RBSL && hasGUI())
        {
            _ret = (Box::yesNo("@SYS99099"+'\n\n'+"@SYS94693",DialogButton::No)) == DialogButton::Yes;
        }

        return _ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the field value of the instance of the <c>AssetBook</c> table.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index.
    /// </param>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        // <GJP>
	    AssetTableInterval          assetTableInterval;
	    boolean                     isISOJP             = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
	    AssetDepreciationProfile    depreciationExtProfile;
        real                        periods;
        // </GJP>

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(AssetBook, BookId):
                    // <GJP>
                	if (isISOJP)
                    {
                        ret = this.AssetDepBookMap_JP::validateBookId();
                    }
                    // </GJP>
                    break;

                // <GJP>
                case fieldStr(AssetBook, SpecialDepAllocationPeriods_JP):
                    depreciationExtProfile = this.depreciationExtProfile();
                    if (depreciationExtProfile.Method == AssetDepreciationMethod::AdditionalDepreciation_JP
                        && depreciationExtProfile.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::Reserve)
                    {
                        if ((this.depreciationProfile().Accrual == AssetAccrual::FiscalPeriod
                                && this.SpecialDepAllocationUnit_JP == AssetAccrualFiscal::FiscalPeriod)
                            ||(this.depreciationProfile().Accrual == AssetAccrual::Yearly
                                && this.SpecialDepAllocationUnit_JP == AssetAccrualFiscal::Yearly)
                            || (this.depreciationProfile().Accrual == AssetAccrual::Quarterly
                                && this.SpecialDepAllocationUnit_JP == AssetAccrualFiscal::Quarterly))
                        {
                            if (this.SpecialDepAllocationPeriods_JP > this.LifeTimeRest)
                            {
                                ret = checkFailed("@FixedAssetsIncentiveDepreciation:SYP4880205");
                            }
                        }
                        else
                        {
                            if (this.depreciationProfile().Accrual == AssetAccrual::Yearly)
                            {
                                assetTableInterval = AssetSpecialDepHelper_JP::assetTableIntervalForAllocation(this);
                                if (this.SpecialDepAllocationPeriods_JP >assetTableInterval.yearToPeriod(this.LifeTimeRest))
                                {
                                    ret = checkFailed("@FixedAssetsIncentiveDepreciation:SYP4880205");
                                }
                            }
                            else if (this.SpecialDepAllocationUnit_JP == AssetAccrualFiscal::Yearly)
                            {
                                assetTableInterval = this.AssetDepbookMap_JP::assetTableInterval();
                                if (assetTableInterval.yearToPeriod(this.SpecialDepAllocationPeriods_JP) > this.LifeTimeRest)
                                {
                                    ret = checkFailed("@FixedAssetsIncentiveDepreciation:SYP4880205");
                                }
                            }
                            else
                            {
                                assetTableInterval = this.AssetDepbookMap_JP::assetTableInterval();
                                periods = assetTableInterval.periodToYear(real2int(this.LifeTimeRest));
                                assetTableInterval = AssetSpecialDepHelper_JP::assetTableIntervalForAllocation(this);
                                if (assetTableInterval.periodToYear(this.SpecialDepAllocationPeriods_JP) > periods)
                                {
                                    ret = checkFailed("@FixedAssetsIncentiveDepreciation:SYP4880205");
                                }
                            }
                        }
                    }
                    break;

                case fieldStr(AssetBook, EquallyDividedStartDate_JP):
                    if (this.EquallyDividedStartDate_JP)
                    {
                        assetTableInterval = this.AssetDepbookMap_JP::assetTableInterval(this.EquallyDividedStartDate_JP);
                        if (assetTableInterval == null
                            || assetTableInterval.findFirstDayOfYear(this.EquallyDividedStartDate_JP) != this.EquallyDividedStartDate_JP)
                        {
                            // The date of %1 must be the start date of a fiscal year. Select a valid date.
                            // Start date of the %1 year equally divided method
                            ret = checkFailed(strFmt("@SYP4860149", strFmt("@SYP4860150", this.DepreciationProfile().NumOfYearsEquallyDivided_JP)));
                        }
                    }
                    break;
                // </GJP>
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        AssetBookTable assetBookTable = this.assetBookTable();

        if (assetBookTable)
        {
            if (!this.PostingProfile
                && assetBookTable.postToGeneralLedger() == NoYes::Yes)
            {
                ret = checkFailed(strFmt(
                    "@FixedAssets:FA_MessageValidation_FieldMustBeFilledIn",
                    fieldId2PName(
                        tableNum(AssetBook),
                        fieldNum(AssetBook, PostingProfile))));
            }

            // Validate that the derogatory information is properlly assigned.
            if ( assetBookTable.AssetDerogatoryModel_FR != this.AssetDerogatoryModel_FR)
            {
                this.AssetDerogatoryModel_FR = assetBookTable.AssetDerogatoryModel_FR;
            }

            if ( assetBookTable.IsDerogatoryBook_FR != this.IsDerogatoryBook_FR)
            {
                this.IsDerogatoryBook_FR = assetBookTable.IsDerogatoryBook_FR;
            }
        }

        // Check the depreciation
        if (this.Depreciation == NoYes::Yes)
        {
            if (ret)
            {
                ret = AssetDepreciationProfile::check(this.DepreciationProfile, this.LifeTime);
            }
            if (ret)
            {
                ret = AssetDepreciationProfile::check(this.DepreciationAltProfile, this.LifeTime, 0, false);
            }
        }

        // check lifetime and lifetime rest
        // <GJP>
        if (AssetParameters::isManuallyChangeDepProfileEnable_JP())
        {
            ret = AssetDepProfileChange_JP::checkLifeTimeRest(this);
        }
        else
        {
        // </GJP>
            if (this.LifeTime && this.LifeTimeRest && this.LifeTimeRest > this.LifeTime)
            {
                DictField dictFieldLifeTimeRest   = new DictField(this.TableId, fieldNum(AssetBook, LifeTimeRest));
                DictField dictFieldLifeTime       = new DictField(this.TableId, fieldNum(AssetBook, LifeTime));
                ret = checkFailed(strFmt("@SYS71085", dictFieldLifeTimeRest.label(), dictFieldLifeTime.label()));
            }
        // <GJP>
        }
        // </GJP>

        if (this.DepreciationConvention != AssetDepreciationConvention::None && !this.ServiceLife)
            ret = checkFailed("@SYS95485");

        // <GEECZ>
        ret = ret && this.validateWrite_CZ();
        // </GEECZ>

        if (ret && FeatureStateProvider::isFeatureEnabled(AssetDepCalculation_AcceleratedFeature_JP::instance()))
        {
            ret = AssetDepreciationProfile::validateDepreciationProfilesHaveSameDepreciationYear_JP(
                this.DepreciationProfile,
                this.DepreciationAcceleratedProfile_JP);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_CZ</Name>
				<Source><![CDATA[
    ///  <summary>
    ///     Validates if depreciation group is entered
    /// </summary>
    /// <returns>
    ///     true or false
    /// </returns>
    /// <remarks>
    ///     Throws info message if not entered
    /// </remarks>
    private boolean validateWrite_CZ()
    {
        boolean ret = true;
        AssetDepreciationMethod method;

        if (! this.DepreciationGroupId_W && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            method = this.depreciationMethod();

            if (method == AssetDepreciationMethod::Regular_CZ ||
                method == AssetDepreciationMethod::Accelerated_CZ)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldPName(AssetBook, DepreciationGroupId_W)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the postal address for a vendor associated with a record.
    /// </summary>
    /// <returns>
    /// The postal address for the vendor associated with the record.
    /// </returns>
    display LogisticsAddressing vendAddress()
    {
        if (this.VendAccount)
        {
            return VendTable::find(this.VendAccount).postalAddress().Address;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendName</Name>
				<Source><![CDATA[
    display VendName vendName()
    {
        if (this.VendAccount)
        {
            return VendTable::find(this.VendAccount).name();
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCatchUpDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the true-up depreciation amount for the specified buffer.
    /// </summary>
    /// <param name="_assetBook">
    /// The specified <c>AssetBook</c> table buffer for which to calculate the values.
    /// </param>
    /// <param name="_depreciationDate">
    /// The date of true-up depreciation adjustment.
    /// </param>
    /// <returns>
    /// The calculated true-up depreciation value for the specified buffer.
    /// </returns>
    /// <remarks>
    /// When the placed in service date is before the acquisition date, the system must calculate the
    /// true-up depreciation amount the first time that depreciation is run for the asset. The true-up
    /// depreciation amount is the total amount that should have been taken between the placed in service
    /// date and the depreciation proposal date.
    /// </remarks>
    public static container calculateCatchUpDepreciation(AssetBook _assetBook, AssetTransDate _depreciationDate = dateNull())
    {
        return AssetBook::calculateCatchupDepreciationPerCurrency(_assetBook, _depreciationDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCatchupDepreciationPerCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the true-up depreciation amount for the specified buffer.
    /// </summary>
    /// <param name="_assetBook">
    /// The specified <c>AssetBook</c> table buffer for which to calculate the values.
    /// </param>
    /// <param name="_depreciationDate">
    /// The date of true-up depreciation adjustment.
    /// </param>
    /// <param name="_isReportingCurrency">
    /// Indicates is the reporting currency is used.
    /// </param>
    /// <returns>
    /// The calculated true-up depreciation value for the specified buffer.
    /// </returns>
    /// <remarks>
    /// When the placed in service date is before the acquisition date, the system must calculate the
    /// true-up depreciation amount the first time that depreciation is run for the asset. The true-up
    /// depreciation amount is the total amount that should have been taken between the placed in service
    /// date and the depreciation proposal date.
    /// This method contains logic for core fixed assets, FR, JP and CZ location
    /// </remarks>
    public static container calculateCatchupDepreciationPerCurrency(
        AssetBook _assetBook, 
        AssetTransDate _depreciationDate = dateNull(),
        boolean _isReportingCurrency = false)
    {
        AssetTableMethod         assetTableMethodPrimary;
        AssetTableMethod         assetTableMethodSecondary;
        AssetTableMethod_RB      assetTableMethodRB;
        AssetTableMethod_SL      assetTableMethodSL;
        AssetTableInterval       assetTableInterval;
        
        AssetAmount              periodDepreciationPrimary;
        AssetAmount              periodDepreciationSecondary;

        AssetAmount              depreciationPrimaryValue;
        AssetAmount              depreciationSecondaryValue;

        AssetAmount              totalDepreciation;
        AssetAmount              prevDepAmountPriorYears;
        AssetAmount              prevDepAmountThisYear;

        container                assetData;        
        boolean                  isCurrentPeriodAdjustment;
        AssetBookTable           assetBookTable = AssetBookTable::find(_assetBook.BookId);
        AssetDepreciationProfile depreciationProfile;
        AssetDepreciationProfile depreciationAltProfile = _assetBook.depreciationAltProfile();

        AssetTransDate           yearEndLastDepreciation;
        AssetTransDate           yearStartLastDepreciation;

        boolean                  isTableMethod_JP;
        boolean                  isAltTableMethod_JP;
        boolean                  isIsoJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);

        void initializeAssetTableMethod(AssetTableMethod _assetTableMethod, boolean _isCatchUpDepreciation, boolean _isOriginalDepreciation, TransDate _startDate, AssetDepreciationTime _serviceLife,
                                                     boolean _depreciationAltProfile = false, boolean _depreciationExtProfile = false)
        {
            _assetTableMethod.parmIsCatchUpDepreciation(_isCatchUpDepreciation);
            _assetTableMethod.parmIsOriginalDepreciation(_isOriginalDepreciation);
            _assetTableMethod.parmPeriodstart(_startDate);
            _assetTableMethod.parmPeriodEnd(assetTableInterval.endPeriod(_startDate));
            _assetTableMethod.parmPrevDepAmount(0);
        }

        boolean isDepreciationForPriorYear()
        {
            boolean returnValue;

            if (_depreciationDate > _assetBook.LastDepreciationDate)
            {
                // Verify if there are periods that have not depreciated in the last year of depreciation.
                if (yearEndLastDepreciation != _assetBook.LastDepreciationDate
                    && assetTableMethodPrimary.depDate() <= yearEndLastDepreciation
                    && assetTableMethodPrimary.depDate() >= yearStartLastDepreciation)
                {
                    returnValue = false;
                }
                else if (assetTableMethodPrimary.depDate() < _depreciationDate
                    && assetTableInterval.hasYearChanged(assetTableMethodPrimary.depDate(), _depreciationDate))
                {
                    returnValue = true;
                }
            }
            else
            {
                if (assetTableMethodPrimary.depDate() < _assetBook.LastDepreciationDate
                    && assetTableInterval.hasYearChanged(assetTableMethodPrimary.depDate(), _assetBook.LastDepreciationDate))
                {
                    returnValue = true;
                }
            }

            return returnValue;
        }

        AssetTableMethod_RB getReducingBalanceMethod(boolean _isCatchUpDepreciation, boolean _isOriginalDepreciation, TransDate _startDate, AssetDepreciationTime _serviceLife,
                                                     boolean _depreciationAltProfile = false, boolean _depreciationExtProfile = false)
        {
            AssetTableMethod_RB assetTableMethodRBLoc;
            if (_isReportingCurrency)
            {
                assetTableMethodRBLoc   = AssetTableMethod::constructForReportingCurrency(_assetBook, dateMax(),'',_depreciationAltProfile, _depreciationExtProfile);
            }
            else
            {
                assetTableMethodRBLoc   = AssetTableMethod::construct(_assetBook, dateMax(),'',_depreciationAltProfile, _depreciationExtProfile);
            }

            initializeAssetTableMethod(assetTableMethodRBLoc, _isCatchUpDepreciation, _isOriginalDepreciation, _startDate, _serviceLife,
                                        _depreciationAltProfile, _depreciationExtProfile);
            assetTableMethodRBLoc.parmPrevDepAmountPriorYears(0);
            assetTableMethodRBLoc.parmPrevDepAmountThisYear(0);
            assetTableMethodRBLoc.parmPeriod(_serviceLife);

            return assetTableMethodRBLoc;
        }

        AssetTableMethod_SL getStraightLineMethod(boolean _isCatchUpDepreciation, boolean _isOriginalDepreciation, TransDate _startDate, AssetDepreciationTime _serviceLife,
                                                 boolean _depreciationAltProfile = false, boolean _depreciationExtProfile = false)
        {
            AssetTableMethod_SL assetTableMethodSLLoc;
            
            if (_isReportingCurrency)
            {
                assetTableMethodSLLoc = AssetTableMethod::constructForReportingCurrency(_assetBook, dateMax(),'',_depreciationAltProfile, _depreciationExtProfile);
            }
            else
            {
                assetTableMethodSLLoc = AssetTableMethod::construct(_assetBook, dateMax(),'',_depreciationAltProfile, _depreciationExtProfile);
            }
            initializeAssetTableMethod(assetTableMethodSLLoc, _isCatchUpDepreciation, _isOriginalDepreciation, _startDate, _assetBook.LifeTime,
                                        _depreciationAltProfile, _depreciationExtProfile);
            assetTableMethodSLLoc.parmPrevDepAmountPriorYears(0);
            assetTableMethodSLLoc.parmPrevDepAmountThisYear(0);
            assetTableMethodSLLoc.parmPeriod(_assetBook.LifeTime);

            return assetTableMethodSLLoc;
        }

        AssetTableMethod_RBSL getRBSLMethod(
            boolean _isCatchUpDepreciation, 
            boolean _isOriginalDepreciation, 
            TransDate _startDate, 
            AssetDepreciationTime _serviceLife,
            boolean _depreciationAltProfile = false, 
            boolean _depreciationExtProfile = false)
        {
            AssetTableMethod_RBSL assetTableMethodRBSLLoc;

            if (_isReportingCurrency)
            {
                assetTableMethodRBSLLoc = AssetTableMethod::constructForReportingCurrency(
                    _assetBook,
                    dateMax(),
                    '',
                    _depreciationAltProfile,
                    _depreciationExtProfile);
            }
            else
            {
                assetTableMethodRBSLLoc = AssetTableMethod::construct(
                    _assetBook,
                    dateMax(),
                    '',
                    _depreciationAltProfile,
                    _depreciationExtProfile);
            }

            initializeAssetTableMethod(
                assetTableMethodRBSLLoc,
                _isCatchUpDepreciation,
                _isOriginalDepreciation,
                _startDate,
                _assetBook.LifeTime,
                _depreciationAltProfile,
                _depreciationExtProfile);

            return assetTableMethodRBSLLoc;
        }

        AssetTableMethod getMethod_JP(
            boolean                 _isCatchUpDepreciation,
            boolean                 _isOriginalDepreciation,
            TransDate               _startDate,
            AssetDepreciationTime   _serviceLife,
            boolean                 _depreciationAltProfile = false,
            boolean                 _depreciationExtProfile = false)
        {
            AssetTableMethod    assetTableMethodLoc;
            assetTableMethodLoc = AssetTableMethod::construct(_assetBook, dateMax(), '' ,_depreciationAltProfile, _depreciationExtProfile);
            initializeAssetTableMethod(assetTableMethodLoc, _isCatchUpDepreciation, _isOriginalDepreciation, _startDate, _serviceLife,
                                        _depreciationAltProfile, _depreciationExtProfile);
            return assetTableMethodLoc;
        }

        if (isIsoJP && AssetParameters::isManuallyChangeDepProfileEnable_JP())
        {
            depreciationProfile = _assetBook.AssetDepBookMap_JP::depreciationProfileOnDate(_depreciationDate);
        }
        else
        {
            depreciationProfile = _assetBook.depreciationProfile();
        }
        if (isIsoJP)
        {
            isTableMethod_JP    = AssetDepreciationProfile::isDepMethod_JP(depreciationProfile.Method);
            isAltTableMethod_JP = AssetDepreciationProfile::isDepMethod_JP(depreciationAltProfile.Method);
        }

        if (isTableMethod_JP)
        {
            assetTableInterval = AssetTableIntervalExt_JP::constructFromCalendarSchedule(
                depreciationProfile,
                assetBookTable.TableId,
                assetBookTable.RecId);
        }
        else
        {
            assetTableInterval = AssetTableInterval::construct(depreciationProfile, assetBookTable.FiscalCalendar);
        }

        isCurrentPeriodAdjustment = _assetBook.IsTrueUpDepreciation;

        AssetTransDate depreciationStartDate = _assetBook.DepreciationStartDate;

        if (_assetBook.DepreciationConvention == AssetDepreciationConvention::HalfYearNext
            && _assetBook.UsedFromDate < assetTableInterval.findMiddleOfYear(_assetBook.UsedFromDate))
        {
            depreciationStartDate = assetTableInterval.startOfPeriod(_assetBook.UsedFromDate);
        }
        else if (_assetBook.DepreciationConvention == AssetDepreciationConvention::HalfYearStart)
        {
            depreciationStartDate = assetTableInterval.startOfPeriod(_assetBook.UsedFromDate);
        }

        if (AssetDepreciationProfile::isReducingBalanceDepreciationMethod(depreciationProfile.Method))
        {
            assetTableMethodPrimary = getReducingBalanceMethod(true, false, depreciationStartDate, _assetBook.LifeTime);                    
        }
        else if (isTableMethod_JP)
        {
            assetTableMethodPrimary = getMethod_JP(true, false, depreciationStartDate, _assetBook.LifeTime);            
        }
        else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ])
            && AssetDepreciationProfile::isDepreciationMethodForCzech(depreciationProfile.Method))
        {
            assetTableMethodPrimary = AssetBook::getMethod_CZ(_assetBook, assetTableInterval, true, false, depreciationStartDate, _assetBook.LifeTime);
        }
        else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR])
            && _assetBook.IsDerogatoryBook_FR)
        {
            assetTableMethodPrimary = getRBSLMethod(true, false, depreciationStartDate, _assetBook.LifeTime);
        }
        else
        {
            assetTableMethodPrimary = getStraightLineMethod(true, false, depreciationStartDate, _assetBook.LifeTime);                      
        }

        if (depreciationAltProfile)
        {
            if (AssetDepreciationProfile::isReducingBalanceDepreciationMethod(depreciationAltProfile.Method))
            {
               assetTableMethodSecondary = getReducingBalanceMethod(true, false, depreciationStartDate, _assetBook.LifeTime, true, true);               
            }
            else if (isAltTableMethod_JP)
            {
                assetTableMethodSecondary = getMethod_JP(true, false, _assetBook.DepreciationStartDate, _assetBook.LifeTime, true, true);
            }
            else
            {
                assetTableMethodSecondary = getStraightLineMethod(true, false, depreciationStartDate, _assetBook.LifeTime, true, true);                
            }
        }

        yearEndLastDepreciation = assetTableInterval.findLastDayOfYear(_assetBook.LastDepreciationDate);
        yearStartLastDepreciation = assetTableInterval.findFirstDayOfYear(_assetBook.LastDepreciationDate);

        // Calculate depreciation based on acquisition/acquisition adj. including the one that is being posted.
        if ((_assetBook.Status == AssetStatus::NoAcquisition
            || _assetBook.Status == AssetStatus::Open)
            && assetTableMethodPrimary)
        {
            if (!depreciationAltProfile)
            {
                while (assetTableMethodPrimary.next())
                {
                    if (isIsoJP && AssetParameters::isManuallyChangeDepProfileEnable_JP())
                    {
                        depreciationProfile = _assetBook.AssetDepBookMap_JP::depreciationProfileOnDate(assetTableMethodPrimary.depDate());
                    }
                    periodDepreciationPrimary    = assetTableMethodPrimary.calc();

                    if (isCurrentPeriodAdjustment
                        && depreciationProfile.Accrual != AssetAccrual::Monthly
                        && depreciationProfile.Accrual != AssetAccrual::FiscalPeriod
                        && AssetTrans::existAdjustmentTransPerDate(_assetBook.AssetId, _assetBook.BookId, assetTableInterval.startOfPeriod(assetTableMethodPrimary.depDate()), assetTableMethodPrimary.depDate()))
                    {
                        assetData = AssetBook::calculateOtherAdjustmentPerCurrency(_assetBook, assetTableMethodPrimary.depDate(), assetTableMethodPrimary.parmRemaningPeriods(), assetTableMethodPrimary.parmIsEndPeriod(), _isReportingCurrency);                        
                        if (!isTableMethod_JP)
                        {
                            if (AssetDepreciationProfile::isReducingBalanceDepreciationMethod(depreciationProfile.Method))
                            {                                
                                assetTableMethodRB = assetTableMethodPrimary;
                                
                                assetTableMethodRB.parmPrevDepAmountThisYear(
                                    assetBookTable.roundDepreciationAmount(
                                        assetTableMethodRB.parmPrevDepAmountThisYear() + conPeek(assetData, 1),
                                        _isReportingCurrency
                                    )
                                );
                            }
                            else if (!AssetProfileDepreciationTypeCastErrorFlight::instance().isEnabled())
                            {
                                assetTableMethodSL = assetTableMethodPrimary;

                                assetTableMethodSL.parmPrevDepAmountThisYear(
                                    assetBookTable.roundDepreciationAmount(
                                        assetTableMethodSL.parmPrevDepAmountThisYear() + conPeek(assetData, 1),
                                        _isReportingCurrency
                                    )
                                ); 
                            }
                            else if (AssetBook::isStraightLine(depreciationProfile.Method) &&
                                AssetProfileDepreciationTypeCastErrorFlight::instance().isEnabled())
                            {
                                assetTableMethodSL = assetTableMethodPrimary;

                                assetTableMethodSL.parmPrevDepAmountThisYear(
                                    assetBookTable.roundDepreciationAmount(
                                        assetTableMethodSL.parmPrevDepAmountThisYear() + conPeek(assetData, 1),
                                        _isReportingCurrency
                                    )
                                );
                            }
                        }

                        periodDepreciationPrimary = assetBookTable.roundDepreciationAmount(
                            periodDepreciationPrimary + conPeek(assetData, 1),
                            _isReportingCurrency);
                    }

                    depreciationPrimaryValue += periodDepreciationPrimary;
                    totalDepreciation += periodDepreciationPrimary;

                    // Split the depreciation amounts between prior years and this year.
                    if (isDepreciationForPriorYear())
                    {
                        prevDepAmountPriorYears += periodDepreciationPrimary;
                    }
                    else
                    {
                        prevDepAmountThisYear += periodDepreciationPrimary;
                    }
                }
            }
            else
            {
                while (assetTableMethodPrimary.next() && assetTableMethodSecondary.next())
                {
                    if (isIsoJP && AssetParameters::isManuallyChangeDepProfileEnable_JP())
                    {
                        depreciationProfile = _assetBook.AssetDepBookMap_JP::depreciationProfileOnDate(assetTableMethodPrimary.depDate());
                    }
                    periodDepreciationPrimary     = assetTableMethodPrimary.calc();
                    periodDepreciationSecondary   = assetTableMethodSecondary.calc();

                    if (isCurrentPeriodAdjustment
                        && depreciationProfile.Accrual != AssetAccrual::Monthly
                        && depreciationProfile.Accrual != AssetAccrual::FiscalPeriod
                        && AssetTrans::existAdjustmentTransPerDate(_assetBook.AssetId, _assetBook.BookId, assetTableInterval.startOfPeriod(assetTableMethodPrimary.depDate()), assetTableMethodPrimary.depDate()))
                    {
                        assetData = AssetBook::calculateOtherAdjustmentPerCurrency(_assetBook, assetTableMethodPrimary.depDate(), assetTableMethodSecondary.parmRemaningPeriods(), _isReportingCurrency);                        
                        if (!isTableMethod_JP && !isAltTableMethod_JP)
                        {
                            if (AssetDepreciationProfile::isReducingBalanceDepreciationMethod(depreciationProfile.Method))
                            {
                                assetTableMethodRB = assetTableMethodPrimary;

                                if ((AssetDepreciationProfile::isStraightLineDepreciationMethod(depreciationProfile.Method) &&
                                    AssetProfileDepreciationTypeCastErrorFlight::instance().isEnabled())
                                    || !AssetProfileDepreciationTypeCastErrorFlight::instance().isEnabled())
                                {
                                    assetTableMethodSL = assetTableMethodSecondary;
                                }       
                            }
                            else if (AssetDepreciationProfile::isStraightLineDepreciationMethod(depreciationProfile.Method) &&
                                AssetProfileDepreciationTypeCastErrorFlight::instance().isEnabled())
                            {
                                assetTableMethodSL = assetTableMethodPrimary;
                                
                                if (AssetDepreciationProfile::isReducingBalanceDepreciationMethod(depreciationProfile.Method))
                                {
                                    assetTableMethodRB = assetTableMethodSecondary;
                                }
                            }
                            else if (!AssetProfileDepreciationTypeCastErrorFlight::instance().isEnabled())
                            {
                                assetTableMethodSL = assetTableMethodPrimary;
                                assetTableMethodRB = assetTableMethodSecondary;
                            }

                            if (assetTableMethodRB)
                            {
                                assetTableMethodRB.parmPrevDepAmountThisYear(
                                    assetBookTable.roundDepreciationAmount(
                                        assetTableMethodRB.parmPrevDepAmountThisYear() + conPeek(assetData, 1),
                                        _isReportingCurrency
                                    )
                                );
                            }

                            if (assetTableMethodSL)
                            {
                                assetTableMethodSL.parmPrevDepAmountThisYear(
                                    assetBookTable.roundDepreciationAmount(
                                        assetTableMethodSL.parmPrevDepAmountThisYear() + conPeek(assetData, 2),
                                        _isReportingCurrency
                                    )
                                );
                            }
                        }

                        periodDepreciationPrimary = assetBookTable.roundDepreciationAmount(
                            periodDepreciationPrimary + conPeek(assetData, 1),
                            _isReportingCurrency);

                        periodDepreciationSecondary = assetBookTable.roundDepreciationAmount(
                            periodDepreciationSecondary + conPeek(assetData, 2),
                            _isReportingCurrency);
                    }

                    depreciationPrimaryValue += periodDepreciationPrimary;
                    depreciationSecondaryValue += periodDepreciationSecondary;

                    if (abs(periodDepreciationPrimary) > abs(periodDepreciationSecondary))
                    {
                        totalDepreciation += periodDepreciationPrimary;
                        assetTableMethodSecondary.addPrevDepAmountExternal(periodDepreciationPrimary - periodDepreciationSecondary);

                        if (isDepreciationForPriorYear())
                        {
                            prevDepAmountPriorYears += periodDepreciationPrimary;
                        }
                        else
                        {
                            prevDepAmountThisYear += periodDepreciationPrimary;
                        }
                    }
                    else
                    {
                        totalDepreciation += periodDepreciationSecondary;
                        assetTableMethodPrimary.addPrevDepAmountExternal(periodDepreciationSecondary - periodDepreciationPrimary);

                        if (isDepreciationForPriorYear())
                        {
                            prevDepAmountPriorYears += periodDepreciationSecondary;
                        }
                        else
                        {
                            prevDepAmountThisYear += periodDepreciationSecondary;
                        }
                    }
                }
            }
        }

        AssetAmount totalCatchUpDepreciation;
        AssetAmount priorYearsCatchUpDepreciation;
        AssetAmount thisYearCatchUpDepreciation;
        AssetAmount postedDepreciationAmounts;

        if (_isReportingCurrency)
        {
            postedDepreciationAmounts = _assetBook.getDepreciationAmountInReportingCurrency(_assetBook.AssetId, _assetBook.BookId);
        }
        else
        {
            postedDepreciationAmounts = _assetBook.getDepreciationAmountInAccountingCurrency(_assetBook.AssetId, _assetBook.BookId);
        }

        // Container positions and its values
        // #1   Total prior years Catch-Up Depreciation amount
        // #2   Total this year Catch-Up Depreciation amount
        // #3   Total Depreciation for prior years
        // #4   Total Depreciation for this year
        // #5   Total Depreciation calculated for the Primary profile
        // #6   Total Depreciation calculated for the Alternative profile
        if (totalDepreciation
            && abs(totalDepreciation + postedDepreciationAmounts) > 0)
        {
            totalCatchUpDepreciation = totalDepreciation + postedDepreciationAmounts;

            priorYearsCatchUpDepreciation = (prevDepAmountPriorYears / totalDepreciation) * totalCatchUpDepreciation;
            boolean disableDepreciationAdjustmentForPreviousYear = FeatureStateProvider::isFeatureEnabled(DisableDepreciationAdjustmentForPreviousYearFeature_FR::instance());

            if (disableDepreciationAdjustmentForPreviousYear
                && _assetBook.LastDepreciationDate > assetTableInterval.openingPeriodDate(_depreciationDate))
            {
                priorYearsCatchUpDepreciation = 0;
            }

            priorYearsCatchUpDepreciation = assetBookTable.roundDepreciationAmount(
                priorYearsCatchUpDepreciation,
                _isReportingCurrency);

            thisYearCatchUpDepreciation = totalCatchUpDepreciation - priorYearsCatchUpDepreciation;

            if (disableDepreciationAdjustmentForPreviousYear)
            {
                priorYearsCatchUpDepreciation = 0;
            }
        }

        return [priorYearsCatchUpDepreciation,
                thisYearCatchUpDepreciation,
                prevDepAmountPriorYears,
                prevDepAmountThisYear,
                depreciationPrimaryValue,
                depreciationSecondaryValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOtherAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the depreciation adjustments with basis adjustments selected for the asset or value
    /// model.
    /// </summary>
    /// <param name="_assetBook">
    /// The specified <c>AssetBook</c> table buffer for which to calculate the value.
    /// </param>
    /// <param name="_transDate">
    /// The depreciation start <c>TransDate</c>.
    /// </param>
    /// <param name="_remaningPeriods">
    /// The specified <c>RemaningPeriod</c> value for which to calculate the depreciation for left period.
    /// </param>
    /// <param name="_isEndPeriod">
    /// A Boolean value that indicates whether the period is the last depreciation period.
    /// </param>
    /// <returns>
    /// The calculated true-up depreciation value for specified record.
    /// </returns>
    /// <remarks>
    /// If a re-evaluation, write-up, write-down, or extraordinary depreciation is entered, any required
    /// true-up depreciation must be generated by using the posting process of the adjustment transaction.
    /// </remarks>
    public static container calculateOtherAdjustment(AssetBook _assetBook, TransDate _transDate, AssetDepreciationTime _remaningPeriods, boolean _isEndPeriod = false)
    {
        return AssetBook::calculateOtherAdjustmentPerCurrency(_assetBook, _transDate, _remaningPeriods, _isEndPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOtherAdjustmentPerCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the depreciation adjustments with basis adjustments selected for the asset or value
    /// model.
    /// </summary>
    /// <param name="_assetBook">
    /// The specified <c>AssetBook</c> table buffer for which to calculate the value.
    /// </param>
    /// <param name="_transDate">
    /// The depreciation start <c>TransDate</c>.
    /// </param>
    /// <param name="_remaningPeriods">
    /// The specified <c>RemaningPeriod</c> value for which to calculate the depreciation for left period.
    /// </param>
    /// <param name="_isEndPeriod">
    /// A Boolean value that indicates whether the period is the last depreciation period.
    /// </param>
    /// <returns>
    /// The calculated true-up depreciation value for specified record.
    /// </returns>
    /// <remarks>
    /// If a re-evaluation, write-up, write-down, or extraordinary depreciation is entered, any required
    /// true-up depreciation must be generated by using the posting process of the adjustment transaction.
    /// </remarks>
    public static container calculateOtherAdjustmentPerCurrency(
        AssetBook _assetBook, 
        TransDate _transDate, 
        AssetDepreciationTime _remaningPeriods, 
        boolean _isEndPeriod = false,
        boolean _isReportingCurrency = false)
    {
        AssetTableMethod         assetTableMethodPrimary;
        AssetTableMethod         assetTableMethodSecondary;
        AssetTableMethod_RB      assetTableMethodRB;
        AssetTableMethod_SL      assetTableMethodSL;
        AssetTableInterval       assetTableInterval;
        AssetAmount              depreciationPrimary;
        AssetAmount              depreciationSecondary;
        AssetAmount              totalDepreciationPrimary;
        AssetAmount              totalDepreciationSecondary;
        AssetDepreciationProfile assetDepreciationProfile;
        TransDate                startPeriodDate;
        AssetDepreciationTime    numberOfMonths;
        AssetBookTable           assetBookTable;
        Integer                  sign = 1;

        assetBookTable = AssetBookTable::find(_assetBook.BookId);
        assetDepreciationProfile = _assetBook.depreciationProfile();

        assetTableInterval = AssetTableInterval::construct(_assetBook.depreciationProfile(), assetBookTable.getFiscalCalendar());
        startPeriodDate = assetTableInterval.startOfPeriod(_transDate);

        AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(_assetBook.AssetId, _assetBook.BookId);
        while select TransDate, AmountMST, ReportingCurrencyAmount from assetTransTmp
            where assetTransTmp.AssetId    == _assetBook.AssetId     &&
                  assetTransTmp.BookId     == _assetBook.BookId      &&
                  assetTransTmp.TransDate  >= startPeriodDate        &&
                  assetTransTmp.TransDate  <= _transDate             &&
                  (assetTransTmp.TransType == AssetTransType::WriteDownAdj
                   || assetTransTmp.TransType == AssetTransType::WriteUpAdj
                   || assetTransTmp.TransType == AssetTransType::Revaluation
                   || assetTransTmp.TransType == AssetTransType::ExtraordinaryDepreciation)
        {
            // Calculate Depreciation based on adjusted value.
            if (_isReportingCurrency)
            {
                assetTableMethodPrimary   = AssetTableMethod::constructForReportingCurrency(_assetBook, dateMax(),'',true);
            }
            else
            {
                assetTableMethodPrimary   = AssetTableMethod::construct(_assetBook, dateMax(),'',true);
            }
            assetTableMethodPrimary.parmPeriodEnd(_transDate);
            assetTableMethodPrimary.parmPeriodstart(startPeriodDate);
            assetTableMethodPrimary.parmIsOtherAdjustments(true);

            if (_isReportingCurrency)
            {                
                assetTableMethodPrimary.parmAmountToDepreciate(abs(assetTransTmp.ReportingCurrencyAmount));
            }
            else
            {
                assetTableMethodPrimary.parmAmountToDepreciate(abs(assetTransTmp.AmountMST));
            }

            sign = 1;
            if (_assetBook.depreciationAltProfile())
            {
                if (_isReportingCurrency)
                {
                    assetTableMethodSecondary = AssetTableMethod::constructForReportingCurrency(_assetBook, dateMax(),'',true,true);
                }
                else
                {
                    assetTableMethodSecondary = AssetTableMethod::construct(_assetBook, dateMax(),'',true,true);
                }
                assetTableMethodSecondary.parmPeriodEnd(_transDate);
                assetTableMethodSecondary.parmPeriodstart(startPeriodDate);
                assetTableMethodSecondary.parmIsOtherAdjustments(true);
                if (_isReportingCurrency)
                {                    
                    assetTableMethodSecondary.parmAmountToDepreciate(abs(assetTransTmp.ReportingCurrencyAmount));
                }
                else
                {
                    assetTableMethodSecondary.parmAmountToDepreciate(abs(assetTransTmp.AmountMST));
                }
            }

            if (AssetBook::isReducingBalance(_assetBook.depreciationProfile().Method))
            {
                assetTableMethodRB = assetTableMethodPrimary;
                
                if ((_assetBook.depreciationAltProfile() && 
                    AssetBook::isStraightLine(_assetBook.depreciationAltProfile().Method) &&
                    AssetProfileDepreciationTypeCastErrorFlight::instance().isEnabled())
                    || !AssetProfileDepreciationTypeCastErrorFlight::instance().isEnabled())
                {
                    assetTableMethodSL = assetTableMethodSecondary;
                }
            }
            else if (AssetBook::isStraightLine(_assetBook.depreciationProfile().Method) &&
                    AssetProfileDepreciationTypeCastErrorFlight::instance().isEnabled())
            {
                assetTableMethodSL = assetTableMethodPrimary;
                
                if (_assetBook.depreciationAltProfile() &&
                    AssetBook::isReducingBalance(_assetBook.depreciationAltProfile().Method))
                {
                    assetTableMethodRB = assetTableMethodSecondary;
                }  
            }
            else if (!AssetProfileDepreciationTypeCastErrorFlight::instance().isEnabled())
            {
                assetTableMethodSL = assetTableMethodPrimary;
                assetTableMethodRB = assetTableMethodSecondary;
            }

            if (assetTableMethodRB)
            {
                assetTableMethodRB.parmPrevDepAmountThisYear(0);
                assetTableMethodRB.parmPrevDepAmountPriorYears(0);
            }
            if (assetTableMethodSL)
            {
                assetTableMethodSL.parmPrevDepAmountThisYear(0);
                assetTableMethodSL.parmPrevDepAmountPriorYears(0);
            }

            if ((_assetBook.Status == AssetStatus::NoAcquisition || _assetBook.Status == AssetStatus::Open) && assetTableMethodPrimary)
            {
                if (!_assetBook.depreciationAltProfile())
                {
                    while (assetTableMethodPrimary.next())
                    {
                        assetTableMethodPrimary.parmRemaningPeriods(_remaningPeriods);
                        depreciationPrimary   = assetTableMethodPrimary.calc();
                        break;
                    }
                }
                else
                {
                    while (assetTableMethodPrimary.next() && assetTableMethodSecondary.next())
                    {
                        assetTableMethodSecondary.parmRemaningPeriods(_remaningPeriods);
                        depreciationPrimary       = assetTableMethodPrimary.calc();
                        depreciationSecondary     = assetTableMethodSecondary.calc();
                        break;
                    }
                }
            }

            if (assetTransTmp.AmountMST > 0)
            {
                sign = -1;
            }

            switch (assetDepreciationProfile.Accrual)
            {
                case AssetAccrual::Yearly:
                    if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal)
                    {
                        numberOfMonths = LedgerFiscalCalendar::numberOfPeriodsBetweenDates(assetBookTable.getFiscalCalendar(), startPeriodDate, assetTransTmp.TransDate);

                        if (numberOfMonths)
                        {
                            numberOfMonths--;
                        }
                    }
                    else
                    {
                        numberOfMonths  = mthOfYr(assetTransTmp.TransDate) - mthOfYr(startPeriodDate);
                    }
                    depreciationPrimary   = (depreciationPrimary * numberOfMonths) / 12;
                    depreciationSecondary = (depreciationSecondary * numberOfMonths) / 12;
                    break;

                case AssetAccrual::HalfYearly:
                    if (mthOfYr(assetTransTmp.TransDate) <= 6)
                    {
                        numberOfMonths  = mthOfYr(assetTransTmp.TransDate) - 1;
                    }
                    else
                    {
                        numberOfMonths  = mthOfYr(assetTransTmp.TransDate) - 7;
                    }

                    depreciationPrimary   = (depreciationPrimary * numberOfMonths)  / 6;
                    depreciationSecondary = (depreciationSecondary * numberOfMonths) / 6;
                    break;

                case AssetAccrual::Quarterly:
                    numberOfMonths  = mthOfYr(dateEndQtr(assetTransTmp.TransDate)) - mthOfYr(assetTransTmp.TransDate);
                    if (mthOfYr(dateEndQtr(assetTransTmp.TransDate)) == mthOfYr(assetTransTmp.TransDate))
                        numberOfMonths = 2;
                    if (mthOfYr(dateStartQtr(assetTransTmp.TransDate)) == mthOfYr(assetTransTmp.TransDate))
                        numberOfMonths = 0;
                    depreciationPrimary   = (depreciationPrimary * numberOfMonths) / 3;
                    depreciationSecondary = (depreciationSecondary * numberOfMonths) / 3;
                    break;

                // Current System itself is returing correct value for monthly period frequency that why modification is not required in this case.
                case AssetAccrual::Monthly:
                case AssetAccrual::FiscalPeriod:
                    break;
            }

            totalDepreciationPrimary   += depreciationPrimary * sign;
            totalDepreciationSecondary += depreciationSecondary * sign;
        }

        if (_isEndPeriod && _assetBook.depreciationProfile().AssetEndDependOnServiceLife == true)
        {
            totalDepreciationPrimary = 0;
            totalDepreciationSecondary = 0;
        }

        return [totalDepreciationPrimary, totalDepreciationSecondary];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllAssetsSold_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if all assets for a group has been sold or not
    /// </summary>
    /// <param name="_assetGroupId">
    /// The id of the asset group
    /// </param>
    /// <param name="_bookId">
    /// The bookid of the asset group
    /// </param>
    /// <returns>
    /// Returns true if all assets are sold
    /// </returns>
    static boolean checkAllAssetsSold_IN(AssetGroupId        _assetGroupId,
                                         AssetBookId         _bookId)
    {
        AssetBook               assetBookLoc;
        boolean                 allAssetsSold;
        AssetSumCalc_Trans_IN   assetSumCalc;

        select firstonly RecId from assetBookLoc
            where assetBookLoc.AssetGroup == _assetGroupId
                && assetBookLoc.BookId    == _bookId
                && assetBookLoc.Status    != AssetStatus::Sold
                && assetBookLoc.Status    != AssetStatus::Scrapped
                && assetBookLoc.Status    != AssetStatus::NoAcquisition;
        if (assetBookLoc.RecId == 0)
        {
            allAssetsSold = true;
        }
        else
        {
            // calculates group net book value, if group net book value less than or equal to zero,
            // it is identified as all sold.
            assetSumCalc = AssetSumCalc_Trans_IN::newAssetYear(_assetGroupId, _bookId);
            assetSumCalc.parmGroup_IN(NoYes::Yes);
            assetSumCalc.parmAllAssetsSold_IN(false);
            if (assetSumCalc.netBookValue() < 0)
            {
                allAssetsSold = true;
            }
        }

        return allAssetsSold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openAssetGroupTrans_IN</Name>
				<Source><![CDATA[
    public static boolean openAssetGroupTrans_IN(Args _args, AssetGroupDepreciation_IN _assetGroupDepreciation_IN)
    {
        boolean openAssetGroupTrans;

        if (AssetParameters::checkAssetParameters_IN() &&
            _assetGroupDepreciation_IN == NoYes::Yes)
        {
            openAssetGroupTrans = true;
            new MenuFunction(menuitemDisplayStr(AssetGroupTrans_IN), MenuItemType::Display).run(_args);
        }

        return openAssetGroupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(AssetId _assetId, AssetBookId _bookId)
    {
        boolean ret = true;
        ;

        if (!AssetBook::exist(_assetId,_bookId))
        {
            ret = checkFailed(strFmt(AssetBook::txtNotExist(), _assetId, _bookId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPriorYearDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the calculated depreciation is for the current year or earlier years.
    /// </summary>
    /// <param name="_assetBook">
    /// The <c>AssetBook</c> table buffer for which to calculate the value.
    /// </param>
    /// <param name="_assetTableInterval">
    /// The specified <c>AssetTableInterval</c> buffer that is used to check the endperiod of the year.
    /// </param>
    /// <param name="_transDate">
    /// The depreciation rundate.
    /// </param>
    /// <param name="_assetTableMethodPrimary">
    /// The specified <c>AssetTableMethodPrimary</c> buffer that is used to check the current depreciation
    /// period.
    /// </param>
    /// <returns>
    /// true if the depreciation date belongs to the earlier year; otherwise, false.
    /// </returns>
    public static boolean checkPriorYearDepreciation(AssetBook           _assetBook,
                                                     AssetTableInterval  _assetTableInterval,
                                                     TransDate           _transDate,
                                                     AssetTableMethod    _assetTableMethodPrimary = null)
    {
        AssetDepreciationYear assetDepreciationYear = _assetBook.depreciationProfile().DepreciationYear;

        if (_assetTableMethodPrimary)
        {
            if ((assetDepreciationYear == AssetDepreciationYear::Calendar
                && year(_assetTableInterval.endPeriod(_assetTableMethodPrimary.depDate())) < year(_transDate))
                ||
                (assetDepreciationYear == AssetDepreciationYear::Fiscal
                && _assetTableMethodPrimary.depDate() < _assetTableInterval.openingPeriodDate(_transDate)))
            {
                return true;
            }
        }
        else
        {
            if ((assetDepreciationYear == AssetDepreciationYear::Calendar
                && year(_assetTableInterval.endPeriod(_transDate)) < year(_assetBook.AcquisitionDate))
                ||
                (assetDepreciationYear == AssetDepreciationYear::Fiscal
                && _transDate <= _assetTableInterval.openingPeriodDate(_assetBook.AcquisitionDate)))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDepreciationPeriod</Name>
				<Source><![CDATA[
    internal static AssetDepreciationPeriod getAssetDepreciationPeriod(
        AssetBook _assetBook,
        AssetTableInterval _assetTableInterval,
        TransDate _transDate)
    {
        AssetDepreciationPeriod ret = AssetDepreciationPeriod::construct();

        if (!AssetBook::checkPriorYearDepreciation(_assetBook, _assetTableInterval, _transDate))
        {
            return ret;    
        }

        AssetDepreciationYear assetDepreciationYear = _assetBook.depreciationProfile().DepreciationYear;
        if (assetDepreciationYear == AssetDepreciationYear::Calendar)
        {
            ret.parmPeriodFromDate(_transDate);

            int year = year(_assetTableInterval.endPeriod(_transDate));

            ret.parmPeriodToDate(mkDate(31, 12, year));

        }
        else
        {
            ret.parmPeriodFromDate(_transDate);
            ret.parmPeriodToDate(_assetTableInterval.openingPeriodDate(_assetBook.AcquisitionDate) - 1);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromAssetGroupBookSetup</Name>
				<Source><![CDATA[
    public static void createFromAssetGroupBookSetup(
        AssetTable          _assetTable,
        AssetGroupBookSetup _assetGroupBookSetup)
    {
        // <GEEPL>
        AssetBookTable assetBookTable;
        // </GEEPL>
        AssetBook  assetBook;
        ;
        // A new AssetBook record is created for the AssetTable and the
        // AssetGroupBookSetup record if the record does not yet exist

        if (_assetTable.AssetGroup == _assetGroupBookSetup.AssetGroup)
        {
            ttsbegin;

            select firstonly RecId from assetBook
                where assetBook.AssetId == _assetTable.AssetId
                   && assetBook.BookId  == _assetGroupBookSetup.BookId;

            if (!assetBook.RecId)
            {
                assetBook.clear();
                assetBook.initValue();
                assetBook.BookId     = _assetGroupBookSetup.BookId;
                assetBook.AssetId    = _assetTable.AssetId;
                assetBook.AssetGroup = _assetGroupBookSetup.AssetGroup;
                assetBook.DepreciationGroupId_W = _assetGroupBookSetup.DepreciationGroupId;
                assetBook.initFromAssetGroupBookSetup();
                assetBook.SortingId  = _assetTable.SortingId;
                assetBook.SortingId2 = _assetTable.SortingId2;
                assetBook.SortingId3 = _assetTable.SortingId3;

                // <GEEPL>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    assetBookTable = AssetBookTable::find(assetBook.BookId);
                    assetBook.Percentage_PL    = assetBook.depreciationProfile().Percentage;
                    assetBook.PercentageAlt_PL = assetBook.depreciationAltProfile().Percentage;
                    assetBook.PercentageExt_PL = assetBook.depreciationExtProfile().Percentage;
                }
                // </GEEPL>
                // <GEECZ>
                // <GEEHU>
                // <GEELV>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoHU, #isoLV]))
                {
                    GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
                        [#isoCZ, GlobalizationConstants::FeatureReferenceCZ00022] ],
                        funcName()
                    );

                    assetBook.AcquisitionPrice      = _assetTable.AcquisitionPrice_W;
                    assetBook.AcquisitionDate       = _assetTable.AcquisitionDate_W;
                    assetBook.CategorizationDate_CZ = _assetTable.AcquisitionDate_W;
                }
                // </GEELV>
                // </GEEHU>
                // </GEECZ>
                // <GEEHU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
                {
                    assetBook.initDepreciationStartDate_HU();
                }
                // </GEEHU>

                assetBook.insert();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(AssetId  _assetId, AssetBookId  _bookId)
    {
        boolean found;
        ;

        found = (select firstonly
                    RecId
                 from
                    assetBook
                 where
                    assetBook.AssetId == _assetId
                    && assetBook.BookId  == _bookId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAssetId_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether a particular asset exists or not
    /// </summary>
    /// <param name="_assetId">
    /// The assetId to check for
    /// </param>
    /// <returns>
    /// Returns true if a particular asset exists
    /// </returns>
    public static boolean existAssetId_IN(AssetId  _assetId)
    {
        return _assetId && (select firstonly RecId from assetBook
                             where assetBook.AssetId == _assetId
                                && assetBook.AssetGroupDepreciation_IN  ==  NoYes::Yes).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static AssetBook find(
        AssetId             _assetId,
        AssetBookId         _bookId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetBook   assetBook;
        ;

        assetBook.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetBook.concurrencyModel(_concurrencyModel);
        }

        if (_assetId != '' && _bookId != '')
        {
            select firstonly
                assetBook
            where
                assetBook.AssetId == _assetId
                && assetBook.BookId  == _bookId;
        }

        return assetBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    internal static AssetBook findByRecId(
        RecId _recId,
        boolean _forUpdate = false)
    {
        AssetBook assetBook;

        if (_recId)
        {
            assetBook.selectForUpdate(_forUpdate);

            select firstonly assetBook
                where assetBook.RecId == _recId;
        }

        return assetBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepreciationStartDate</Name>
				<Source><![CDATA[
    //
    // This method returns depreciation start date on the asset value model
    //
    static AssetDepreciationStartDate getDepreciationStartDate(AssetId _assetId, AssetBookId _bookId)
    {
        return AssetBook::find(_assetId, _bookId).DepreciationStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLowValueCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the low value cost that is associated with a depreciation book.
    /// </summary>
    /// <param name="_bookId">
    ///    The deprecation book to check.
    /// </param>
    /// <returns>
    ///    The low value cost that is associated with the depreciation book.
    /// </returns>
    public static AssetLowValueCost_AU getLowValueCost(AssetBookId _bookId)
    {
        AssetBookTable              assetBookTable;
        AssetDepreciationProfile    assetDepreciationProfile;
        AssetLowValueCost_AU        retValue = 0.00;

        if (_bookId && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAU, #isoNZ]))
        {
            select firstonly lvpLowValueCost_AU from assetDepreciationProfile
            join DepreciationProfile from assetBookTable
                where assetBookTable.BookId == _bookId
                   && assetBookTable.DepreciationProfile == assetDepreciationProfile.Profile;

            if (assetDepreciationProfile)
            {
                retValue = assetDepreciationProfile.lvpLowValueCost_AU;
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryBookForAssetProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the primary value model for the current fixed asset record.
    /// </summary>
    /// <param name="_assetId">
    ///    The ID of the asset for which to retrieve the value model.
    /// </param>
    /// <returns>
    ///    The primary value model.
    /// </returns>
    /// <remarks>
    ///    If there is no value model defined for the current layer, <c>AssetBook</c> records are sorted in
    ///    descending order and the first record is retrieved. If there are no records, null is retrieved.
    /// </remarks>
    public static AssetBook getPrimaryBookForAssetProject(AssetId _assetId)
    {
        AssetBook assetBook;
        AssetBookTable assetBookTable;

        select firstonly assetBook order by BookId desc
            where assetBook.AssetId == _assetId
        exists join RecId from assetBookTable
            where assetBookTable.BookId == assetBook.BookId
               && assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current;

        if (!assetBook)
        {
            // Select value model where Posting to general ledger is allowed
            select firstonly assetBook order by BookId desc
                where assetBook.AssetId == _assetId
            exists join RecId from assetBookTable
                where assetBookTable.BookId == assetBook.BookId
                   && assetBookTable.CurrentOperationsTax != CurrentOperationsTax::None;
        }
        return assetBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTopDefaultBookIdForAssetId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the top default book from the list of books that are associated with the specified fixed asset.
    /// </summary>
    /// <param name="_assetId">
    ///    The ID of the fixed asset for which to find the book.
    /// </param>
    /// <param name="_company">
    ///    The company to which the fixed asset belongs.
    /// </param>
    /// <param name="_currentOperationsTax">
    ///    The current operations tax, usually gathered from a journal.
    /// </param>
    /// <param name="_includeOnlyAssetBookPostingToLedger">
    ///    Asset book which has post to general ledger set to true will be filtered when this parameter is true.
    /// </param>
    /// <returns>
    ///    The top default book from the list of books that are associated with the specified fixed asset.
    /// </returns>
    public static AssetBookId getTopDefaultBookIdForAssetId(
        AssetId _assetId,
        CompanyId _company,
        CurrentOperationsTax _currentOperationsTax)
    {
        AssetBook assetBook;
        AssetBookTable assetBookTable;

        changecompany(_company)
        {
            // Select the top record associated with the specified fixed asset.

            select firstonly BookId from assetBook order by Status
                where assetBook.AssetId == _assetId
                   && (assetBook.Status == AssetStatus::NoAcquisition
                       || assetBook.Status == AssetStatus::Acquired_CZ
                       || assetBook.Status == AssetStatus::Open
                       || assetBook.Status == AssetStatus::Closed)
                exists join assetBookTable
                    where assetBookTable.BookId == assetBook.BookId
                       && assetBookTable.CurrentOperationsTax == _currentOperationsTax;
        }

        return assetBook.BookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenOrClosedAssetBookByAssetIdLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// This function finds the first asset book with open or closed state with the specified asset id and posting layer.
    /// </summary>
    /// <param name = "_assetId">Asset id</param>
    /// <param name = "_layer">Posting layer</param>
    /// <returns></returns>
    public static AssetBook findOpenOrClosedAssetBookByAssetIdLayer(AssetId _assetId , CurrentOperationsTax _layer)
    {
        AssetBook assetBook;
        AssetBookTable assetBooktable;

        select firstonly assetBook
            where assetBook.AssetId == _assetId
                && (assetBook.Status == AssetStatus::Open
                    || assetBook.Status == AssetStatus::Closed)
            exists join assetBookTable
                where assetBookTable.BookId == assetBook.BookId
                    && assetBookTable.CurrentOperationsTax == _layer;

        return assetBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenOrNotAcquiredAssetBookByAssetIdLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// This function finds the first asset book with open or not acquired state with specified asset id and posting layer
    /// </summary>
    /// <param name = "_assetId">Asset id</param>
    /// <param name = "_layer">Posting layer</param>
    /// <returns></returns>
    public static AssetBook findOpenOrNotAcquiredAssetBookByAssetIdLayer(AssetId _assetId , CurrentOperationsTax _layer)
    {
        AssetBook assetBook;
        AssetBookTable assetBooktable;

        select firstonly assetBook
            where assetBook.AssetId == _assetId
                && (assetBook.Status == AssetStatus::Open
                    || assetBook.Status == AssetStatus::NoAcquisition)
            exists join assetBookTable
                where assetBookTable.BookId == assetBook.BookId
                    && assetBookTable.CurrentOperationsTax == _layer;

        return assetBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenBookForAsset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether any <c>AssetBook</c> record with a value of <c>Open</c> for the <c>Status</c>
    ///    field is assigned to a particular fixed asset.
    /// </summary>
    /// <param name="_assetId">
    ///    The asset ID for which to find a record.
    /// </param>
    /// <returns>
    ///    true if an opened <c>AssetBook</c> record is found for the specified asset ID; otherwise, false.
    /// </returns>
    public static boolean hasOpenBookForAsset(AssetId  _assetId)
    {
        boolean found;
        ;
        found = (select firstonly
                    RecId
                 from
                    assetBook
                 where
                    assetBook.AssetId == _assetId && assetBook.Status == AssetStatus::Open).RecId != 0;
        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasUnpostedLVPTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether an unposted low value pool transfer for the specified asset and value model
    ///    already exists.
    /// </summary>
    /// <param name="_assetId">
    ///    The asset ID to check.
    /// </param>
    /// <param name="_bookId">
    ///    The value model to check
    /// </param>
    /// <returns>
    ///    true if an unposted transfer exists; otherwise, false.
    /// </returns>

    public static boolean hasUnpostedLVPTransfer(AssetId _assetId, AssetBookId _bookId)
    {
        LedgerJournalTrans_Asset        ledgerJournalTrans_Asset;
        LedgerJournalTrans              ledgerJournalTrans;
        LedgerJournalTable              ledgerJournalTable;
        boolean                         foundUpostedTransfer = false;

        ;

        select firstonly ledgerJournalTrans_Asset
                    where ledgerJournalTrans_Asset.AssetId == _assetId
                        && ledgerJournalTrans_Asset.BookId == _bookId
                        && ledgerJournalTrans_Asset.lvpTransferId_AU != ''
                join JournalNum, RecId from ledgerJournalTrans
                    where ledgerJournalTrans_Asset.RefRecId == ledgerJournalTrans.RecId
                join JournalNum from ledgerJournalTable
                    where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                        && ledgerJournalTable.Posted == false;

        if (ledgerJournalTrans_Asset)
        {
            foundUpostedTransfer = true;
        }

        return foundUpostedTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLowValuePoolBook</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the asset value model uses a low value pool depreciation.
    /// </summary>
    /// <param name="_bookId">
    ///    The value model to check.
    /// </param>
    /// <returns>
    ///    true if the asset value model uses low value pool depreciation; otherwise, false.
    /// </returns>
    public static boolean isLowValuePoolBook(AssetBookId _bookId)
    {
        AssetBookTable              assetBookTable;
        AssetDepreciationProfile    assetDepreciationProfile;
        boolean                     retValue = false;

        if (_bookId && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAU, #isoNZ]))
        {
            select firstonly RecId from assetBookTable
                where assetBookTable.BookId == _bookId
            exists join assetDepreciationProfile
                where assetDepreciationProfile.Profile == assetBookTable.DepreciationProfile
                   && assetDepreciationProfile.Method == AssetDepreciationMethod::LowValuePool;

            if (assetBookTable)
            {
                retValue = true;
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReducingBalance</Name>
				<Source><![CDATA[
    public static boolean isReducingBalance(AssetDepreciationMethod _assetDepreciationMethod)
    {
        return AssetDepreciationProfile::isReducingBalanceDepreciationMethod(_assetDepreciationMethod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStraightLine</Name>
				<Source><![CDATA[
    public static boolean isStraightLine(AssetDepreciationMethod _assetDepreciationMethod)
    {
        return AssetDepreciationProfile::isStraightLineDepreciationMethod(_assetDepreciationMethod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAssetBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides lookup functionality for asset book IDs.
    /// </summary>
    /// <param name="_ctrl">
    /// A form control.
    /// </param>
    /// <param name="_assetId">
    /// A asset ID.
    /// </param>
    /// <param name="_company">
    /// The name of the company context.
    /// </param>
    public static void lookupAssetBook(
        FormControl         _ctrl,
        AssetId             _assetId,
        CompanyId           _company = curext())
    {
        FormStringControl   formStringControl;
        Args                args;
        CompanyId           companyId;
        FormRun             formRun;

        // The following block is needed for the case that intercompany transactions is disabled and someone passes
        // in an empty string. Ideally one would remove the "curext()" defaulting from the paramter list, but this
        // code was added as part of a bug fix, and did not have the scope or need of changing the interface.
        if (!_company)
        {
            companyId = curext();
        }
        else
        {
            companyId = _company;
            if (! xDataArea::exist(companyId))
            {
                throw error(strFmt("@SYS10666",companyId));
            }
        }

        changecompany(companyId)
        {
            args = new Args();
            args.name(formStr(AssetBookInvoiceLookup));
            args.caller(_ctrl);
            args.parm(_assetId);

            formRun = classfactory.formRunClass(args);
            formRun.init();
            if (_ctrl is FormStringControl)
            {
                formStringControl = _ctrl as FormStringControl;
                formStringControl.performFormLookup(formRun);
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBookIdForAsset</Name>
				<Source><![CDATA[
    public static void lookupBookIdForAsset(
        FormStringControl       _ctrl,
        AssetId                 _assetId,
        boolean                 _selectCurrentOperationsTax = true,
        CurrentOperationsTax    _currentOperationsTax       = CurrentOperationsTax::Current,
        CompanyId               _company                    = curext())
    {
        Args        args;
        CompanyId   companyId;
        FormRun     formRun;
        ;

        if (_assetId)
        {
            // The following block is needed for the case that intercompany transactions is disabled and someone passes
            // in an empty string. Ideally one would remove the "curext()" defaulting from the paramter list, but this
            // code was added as part of a bug fix, and did not have the scope or need of changing the interface.
            if (!_company)
            {
                companyId = curext();
            }
            else
            {
                companyId = _company;
                if (! xDataArea::exist(companyId))
                    throw error(strFmt("@SYS10666", companyId));
            }

            changecompany(companyId)
            {
                args = new Args();
                args.name(formStr(AssetBookLookup));
                args.caller(_ctrl);
                args.record(AssetTable::find(_assetId));
                if (_selectCurrentOperationsTax)
                {
                    args.parmEnumType(enumNum(CurrentOperationsTax));
                    args.parmEnum(enum2int(_currentOperationsTax));
                }
                formRun = classfactory.formRunClass(args);
                formRun.init();
                _ctrl.performFormLookup(formRun);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBookIdForPostingLayer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the value model lookup restricted to value models that use the specified posting layer.
    /// </summary>
    /// <param name="_ctrl">
    ///    The control performing the lookup.
    /// </param>
    /// <param name="_currentOperationsTax">
    ///    The posting layer to restrict to; optional. The default value is Current.
    /// </param>
    /// <param name="_company">
    ///    The company to restrict to; optional. The default value is the current company.
    /// </param>

    public static void lookupBookIdForPostingLayer(
        FormStringControl       _ctrl,
        CurrentOperationsTax    _currentOperationsTax       = CurrentOperationsTax::Current,
        CompanyId               _company                    = curext())
    {
        Args        args;
        CompanyId   companyId;
        FormRun     formRun;
        ;

        // The following block is needed for the case that intercompany transactions is disabled and someone passes
        // in an empty string. Ideally one would remove the "curext()" defaulting from the paramter list, but this
        // code was added as part of a bug fix, and did not have the scope or need of changing the interface.
        if (!_company)
        {
            companyId = curext();
        }
        else
        {
            companyId = _company;
            if (! xDataArea::exist(companyId))
                throw error(strFmt("@SYS10666", companyId));
        }

        changecompany(companyId)
        {
            args = new Args();
            args.name(formStr(AssetBookBookForPostingLayerLookup));
            args.caller(_ctrl);
            args.parmEnumType(enumNum(CurrentOperationsTax));
            args.parmEnum(enum2int(_currentOperationsTax));

            formRun = classfactory.formRunClass(args);
            formRun.init();
            _ctrl.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupConsumptionBookIdForAsset</Name>
				<Source><![CDATA[
    public static void lookupConsumptionBookIdForAsset(
        FormStringControl       _ctrl,
        AssetId                 _assetId,
        CurrentOperationsTax    _currentOperationsTax   = CurrentOperationsTax::Current,
        CompanyId               _company                = curext())
    {
        Args        args;
        CompanyId   companyId;
        FormRun     formRun;
        ;

        if (_assetId)
        {
            // The following block is needed for the case that intercompany transactions is disabled and someone passes
            // in an empty string. Ideally one would remove the "curext()" defaulting from the paramter list, but this
            // code was added as part of a bug fix, and did not have the scope or need of changing the interface.
            if (!_company)
            {
                companyId = curext();
            }
            else
            {
                companyId = _company;
                if (! xDataArea::exist(companyId))
                    throw error(strFmt("@SYS10666", companyId));
            }

            changecompany(companyId)
            {
                args = new Args();
                args.name(formStr(AssetBookConsumptionLookup));
                args.caller(_ctrl);
                args.record(AssetTable::find(_assetId));
                args.parmEnumType(enumNum(CurrentOperationsTax));
                args.parmEnum(enum2int(_currentOperationsTax));
                formRun = classfactory.formRunClass(args);
                formRun.init();
                _ctrl.performFormLookup(formRun);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLVPBookIdForAsset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the lookup that contains the value models with a particular asset ID that use low value pool
    ///    depreciation.
    /// </summary>
    /// <param name="_ctrl">
    ///    The control performing the lookup.
    /// </param>
    /// <param name="_assetId">
    ///    The asset to restrict to.
    /// </param>
    /// <param name="_selectCurrentOperationsTax">
    ///    A Boolean value that determines whether the lookup should restricted to a specific posting layer;
    ///    optional. The default value is true.
    /// </param>
    /// <param name="_currentOperationsTax">
    ///    The posting layer to restrict; optional. The default value is the current posting layer.
    /// </param>
    /// <param name="_company">
    ///    The company to restrict; optional. The default value is the current company.
    /// </param>

    public static void lookupLVPBookIdForAsset(
        FormStringControl       _ctrl,
        AssetId                 _assetId,
        boolean                 _selectCurrentOperationsTax = true,
        CurrentOperationsTax    _currentOperationsTax       = CurrentOperationsTax::Current,
        CompanyId               _company                    = curext())
    {
        Args        args;
        CompanyId   companyId;
        FormRun     formRun;
        ;

        if (_assetId)
        {
            // The following block is needed for the case that intercompany transactions is disabled and someone passes
            // in an empty string. Ideally one would remove the "curext()" defaulting from the paramter list, but this
            // code was added as part of a bug fix, and did not have the scope or need of changing the interface.
            if (!_company)
            {
                companyId = curext();
            }
            else
            {
                companyId = _company;
                if (! xDataArea::exist(companyId))
                    throw error(strFmt("@SYS10666", companyId));
            }

            changecompany(companyId)
            {
                args = new Args();
                args.name(formStr(AssetBookLVPLookup));
                args.caller(_ctrl);
                args.record(AssetTable::find(_assetId));
                if (_selectCurrentOperationsTax)
                {
                    args.parmEnumType(enumNum(CurrentOperationsTax));
                    args.parmEnum(enum2int(_currentOperationsTax));
                }
                formRun = classfactory.formRunClass(args);
                formRun.init();
                _ctrl.performFormLookup(formRun);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupOpenAndClosedBookIdForAsset</Name>
				<Source><![CDATA[
    public static void lookupOpenAndClosedBookIdForAsset(
        FormStringControl       _ctrl,
        AssetId                 _assetId,
        boolean                 _selectCurrentOperationsTax = true,
        CurrentOperationsTax    _currentOperationsTax       = CurrentOperationsTax::Current,
        CompanyId               _company                    = curext(),
        boolean                 _filterToOnlyLedgerPostingBooks   = false)
    {
        AssetBook::lookupOpenBookIdForAssetInternal(_ctrl,
                                             _assetId,
                                             _selectCurrentOperationsTax,
                                             _currentOperationsTax,
                                             _company,
                                             true,
                                             _filterToOnlyLedgerPostingBooks);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupOpenBookIdForAsset</Name>
				<Source><![CDATA[
    public static void lookupOpenBookIdForAsset(
        FormStringControl       _ctrl,
        AssetId                 _assetId,
        boolean                 _selectCurrentOperationsTax = true,
        CurrentOperationsTax    _currentOperationsTax       = CurrentOperationsTax::Current,
        CompanyId               _company                    = curext(),
        boolean                 _filterToOnlyLedgerPostingBooks   = false)
    {
        AssetBook::lookupOpenBookIdForAssetInternal(_ctrl,
                                             _assetId,
                                             _selectCurrentOperationsTax,
                                             _currentOperationsTax,
                                             _company,
                                             false,
                                             _filterToOnlyLedgerPostingBooks);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMethod_CZ</Name>
				<Source><![CDATA[
    private static AssetTableMethod getMethod_CZ(AssetBook _assetBook, AssetTableInterval _assetTableInterval, boolean _isCatchUpDepreciation, boolean _isOriginalDepreciation, TransDate _startDate,
        AssetDepreciationTime _serviceLife, boolean _depreciationAltProfile = false, boolean _depreciationExtProfile = false)
    {
        AssetTableMethod_CZ assetTableMethod = AssetTableMethod::construct(_assetBook, dateMax(), '', _depreciationAltProfile, _depreciationExtProfile);
        assetTableMethod.parmIsCatchUpDepreciation(_isCatchUpDepreciation);
        assetTableMethod.parmIsOriginalDepreciation(_isOriginalDepreciation);
        assetTableMethod.parmPeriodstart(_startDate);
        assetTableMethod.parmPeriodEnd(_assetTableInterval.endPeriod(_startDate));
        assetTableMethod.parmPrevDepAmount(0);
        assetTableMethod.initAdditional();

        return assetTableMethod as AssetTableMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupOpenBookIdForAssetInternal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the value model lookup that restricts to value models with the specified status.
    /// </summary>
    /// <param name="_ctrl">
    ///    The control that performs the lookup.
    /// </param>
    /// <param name="_assetId">
    ///    The asset to which to restrict.
    /// </param>
    /// <param name="_selectLayer">
    ///    A Boolean value that determines whether the lookup should restrict to a specific posting layer.
    /// </param>
    /// <param name="_restrictedLayer">
    ///    The posting layer to which the lookup will be restricted.
    /// </param>
    /// <param name="_company">
    ///    The company to restrict.
    /// </param>
    /// <param name="_excludeNoAcquisition">
    ///    A Boolean value that determines whether the lookup should exclude value models with a
    ///    <c>NoAcquisition</c>status.
    /// </param>
    /// <param name="_filterToOnlyLedgerPostingBooks">
    ///    A Boolean value that determines whether the lookup should include only value models who have
    ///    post to general ledger set to yes.
    /// </param>
    private static void lookupOpenBookIdForAssetInternal(
        FormStringControl       _ctrl,
        AssetId                 _assetId,
        boolean                 _selectLayer,
        CurrentOperationsTax    _restrictedLayer,
        CompanyId               _company,
        boolean                 _excludeNoAcquisition,
        boolean                 _filterToOnlyLedgerPostingBooks  = false)
    {
        Args    args;
        FormRun formRun;
        CompanyId companyId;
        Struct s = new Struct('boolean OpenAndClosed; boolean filterLedgerPostingBooks');

        if (_assetId)
        {
            // The following block is needed for the case that intercompany transactions is disabled and someone passes
            // in an invalid company.
            companyId = _company;
            if (! xDataArea::exist(companyId))
            {
                throw error(strFmt("@SYS10666", companyId));
            }

            changecompany(companyId)
            {
                args = new Args();
                args.name(formStr(AssetBookOpenLookup));
                args.caller(_ctrl);
                args.record(AssetTable::find(_assetId));

                if (_selectLayer)
                {
                    args.parmEnumType(enumNum(CurrentOperationsTax));
                    args.parmEnum(enum2int(_restrictedLayer));
                }

                // Use the parmObject to pass the exclude value to the lookup form.
                s.value(s.fieldName(1), _excludeNoAcquisition);
                s.value(s.fieldName(2), _filterToOnlyLedgerPostingBooks);
                args.parmObject(s);

                formRun = classfactory.formRunClass(args);
                formRun.init();

                _ctrl.performFormLookup(formRun);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDepreciationConvention</Name>
				<Source><![CDATA[
    public static void setDepreciationConvention(AssetBookId _bookId,AssetDepreciationConvention _depreciationConvention)
    {
        AssetBook assetBook;
        ;
        update_recordset assetBook
            setting DepreciationConvention = _depreciationConvention
            where   assetBook.BookId == _bookId &&
                   (assetBook.Status == AssetStatus::Open ||
                    assetBook.Status == AssetStatus::NoAcquisition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtAjustmentNotAllowedForSYDM_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets info log text of txt ajustment and not allowed for SYDM.
    /// </summary>
    /// <returns>
    /// The instance of the <c>InfologText</c> class.
    /// </returns>
    public static InfologText txtAjustmentNotAllowedForSYDM_CN()
    {
        //The acquisition value must not be adjusted for fixed asset %1 because the depreciation method is the sum-year-digits.
        return "@GLS223029";
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@FixedAssets:FA_MessageValidation_AssetBookDoesNotExist";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustInfo</Name>
				<Source><![CDATA[
    public static void updateCustInfo(
        AssetId         _assetId,
        AssetBookId     _assetBookId,
        CustAccount     _custAccount,
        CustInvoiceId   _custInvoiceId  = '',
        AssetAmount     _assetAmount    = 0,
        SalesId         _salesId        = '')
    {
        AssetBook  assetBook = AssetBook::find(_assetId, _assetBookId, true);
        ;
        if (assetBook)
        {
            assetBook.CustAccount = _custAccount;

            if (_custInvoiceId)
            {
                assetBook.CustInvoiceId = _custInvoiceId;
            }

            if (_assetAmount)
            {
                assetBook.SaleValue += _assetAmount;
            }

            assetBook.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendInfo</Name>
				<Source><![CDATA[
    public static void updateVendInfo(
        AssetId         _assetId,
        AssetBookId     _assetBookId,
        VendAccount     _vendAccount,
        PurchId         _purchId,
        VendInvoiceId   _vendInvoiceId  = '',
        AssetAmount     _assetAmount    = 0,
        InventTransId          _inventTransId = '',
        PurchInternalInvoiceId _purchInternalInvoiceId = '',
        NumberSequenceGroupId  _numberSequenceGroupId = '')
    {
        AssetBook  assetBook = AssetBook::find(_assetId, _assetBookId, true);

        if (assetBook)
        {
            assetBook.PurchId       = _purchId;
            assetBook.VendAccount   = _vendAccount;

            if (_vendInvoiceId)
            {
                assetBook.VendInvoiceId = _vendInvoiceId;
            }

            if (_assetAmount)
            {
                assetBook.AcquisitionPrice += _assetAmount;
            }

            assetBook.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAcquisitionInfo_RU</Name>
				<Source><![CDATA[
    [SysObsolete('This method has been deprecated', false, 25\5\2020)]
    public static void updateAcquisitionInfo_RU(AssetId      _assetId,
                                                AssetBookId  _assetBookId,
                                                AssetAmount  _assetAmount,
                                                CurrencyCode _currencyCode,
                                                TransDate    _transDate,
                                                ExchRate     _exchRate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccrualAndYearOnProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validates that it is allowed to change Accrual or Depreciation year on profile.
    /// </summary>
    /// <param name = "_depreciationProfileId">
    ///   Depreciation profile.
    /// </param>
    /// <param name = "_depreciationYear">
    ///   Depreciation year enum value.
    /// </param>
    /// <param name = "_accrual">
    ///   Accrual.
    /// </param>
    /// <returns>
    ///   true, if there are no restrictions to change the profile; otherwise, false.
    /// </returns>
    public static boolean validateAccrualAndYearOnProfile(
        AssetDepreciationProfileId  _depreciationProfileId,
        AssetDepreciationYear       _depreciationYear,
        AssetAccrual                _accrual)
    {
        boolean   ret = true;
        AssetBook assetBook;
        AssetBookTable assetBookTable;

        while select assetBook
            where assetBook.DepreciationProfile    == _depreciationProfileId
               || assetBook.DepreciationAltProfile == _depreciationProfileId
        join assetBookTable
            where assetBookTable.BookId == assetBook.BookId
        {
            if (ret &&
                !assetBookTable.postToGeneralLedger() &&
                _accrual == AssetAccrual::Daily)
            {
                ret = false;
            }

            if (ret &&
                _accrual == AssetAccrual::Daily &&
                assetBook.DepreciationConvention != AssetDepreciationConvention::None)
            {
                ret = false;
            }

            if (ret &&
                _depreciationYear == AssetDepreciationYear::Fiscal &&
                assetBook.DepreciationConvention != AssetDepreciationConvention::None &&
                !assetBook.assetBookTable().getFiscalCalendar())
            {
                ret = false;
            }

            if (ret &&
                assetBook.DepreciationProfile == _depreciationProfileId &&
                assetBook.DepreciationAltProfile &&
                assetBook.DepreciationAltProfile != assetBook.depreciationProfile)
            {
                AssetDepreciationProfile assetDepreciationAltProfile = assetBook.depreciationAltProfile();

                if (_depreciationYear != assetDepreciationAltProfile.DepreciationYear ||
                    _accrual          != assetDepreciationAltProfile.Accrual)
                {
                    ret = false;
                }
            }

            if (ret &&
                assetBook.DepreciationAltProfile == _depreciationProfileId &&
                assetBook.DepreciationProfile &&
                assetBook.DepreciationProfile != assetBook.DepreciationAltProfile)
            {
                AssetDepreciationProfile assetDepreciationProfile = assetBook.depreciationProfile();

                if (_depreciationYear != assetDepreciationProfile.DepreciationYear ||
                    _accrual          != assetDepreciationProfile.Accrual)
                {
                    ret = false;
                }
            }

            if (!ret)
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDepreciationMethodOnProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validates that it is allowed to change depreciation method on profile.
    /// </summary>
    /// <param name = "_depreciationProfileId">
    ///   Depreciation profile.
    /// </param>
    /// <param name = "_depreciationMethod">
    ///   DEpreciation method.
    /// </param>
    /// <returns>
    ///   true, if there are no restrictions to change the profile; otherwise, false.
    /// </returns>
    public static boolean validateDepreciationMethodOnProfile(
        AssetDepreciationProfileId _depreciationProfileId,
        AssetDepreciationMethod    _depreciationMethod)
    {
        AssetBook assetBook;
        AssetBookTable assetBookTable;

        boolean ret = true;

        // <GJP>
        boolean                     isISOJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
        AssetDepreciationProfile    depreciationExtProfile;
        AssetDepreciationProfile    depreciationProfile;
        // </GJP>

        while select assetBook
            where assetBook.DepreciationProfile == _depreciationProfileId
               || assetBook.DepreciationAltProfile == _depreciationProfileId
               || assetBook.DepreciationExtProfile == _depreciationProfileId
        join assetBookTable
            where assetBookTable.BookId == assetBook.BookId
        {
            if (!assetBookTable.postToGeneralLedger() &&
                _depreciationMethod == AssetDepreciationMethod::RBSL)
            {
                ret = false;
            }

            if (assetBook.DepreciationProfile == _depreciationProfileId)
            {
                if (ret &&
                    assetBook.DepreciationProfile &&
                    assetBook.DepreciationAltProfile)
                {
                    if (!AssetDepreciationProfile::isValidProfileForAltProfileCombination(_depreciationMethod))
                    {
                        ret = false;
                    }
                }

                if (ret &&
                    !AssetDepreciationProfile::isConventionAllowedForMethod(_depreciationMethod) &&
                    assetBook.DepreciationConvention != AssetDepreciationConvention::None)
                {
                    ret = false;
                }

                // <GJP>
                if (isISOJP)
                {
                    if (ret &&
                        _depreciationMethod == AssetDepreciationMethod::SpecialDepreciation_JP ||
                        _depreciationMethod == AssetDepreciationMethod::AdditionalDepreciation_JP)
                    {
                        ret = false;
                    }

                    AssetDepreciationProfile depreciationExtProfileForProfile = assetBook.depreciationExtProfile();

                    if (ret &&
                        depreciationExtProfileForProfile.Method == AssetDepreciationMethod::AdditionalDepreciation_JP &&
                        !AssetDepreciationProfile::isDepMethodAllowAdditionalDep_JP(_depreciationMethod))
                    {
                        ret = false;
                    }
                }
                // </GJP>
            }

            if (assetBook.DepreciationAltProfile == _depreciationProfileId)
            {
                if (ret &&
                    assetBook.DepreciationProfile &&
                    assetBook.DepreciationAltProfile &&
                    !AssetDepreciationProfile::isValidProfileForAltProfileCombination(_depreciationMethod))
                {
                    ret = false;
                }
            }

            if (assetBook.DepreciationExtProfile == _depreciationProfileId)
            {
                AssetDepreciationMethod  depreciationExtMethod = _depreciationMethod;
                AssetDepreciationProfile depreciationProfileForExt = assetBook.depreciationProfile();

                // <GJP>
                if (isISOJP)
                {
                    if (ret &&
                        depreciationExtMethod == AssetDepreciationMethod::AdditionalDepreciation_JP &&
                        !AssetDepreciationProfile::isDepMethodAllowAdditionalDep_JP(depreciationProfileForExt.Method))
                    {
                        ret = false;
                    }

                    if (ret &&
                        depreciationExtMethod != AssetDepreciationMethod::Manual &&
                        !AssetDepreciationProfile::isSpecialDepMethod_JP(depreciationExtMethod))
                    {
                        ret = false;
                    }
                }
                else
                // </GJP>
                {
                    if (ret &&
                        depreciationExtMethod != AssetDepreciationMethod::Manual)
                    {
                        ret = false;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTopDefaultAcceleratedBookIdForAssetId_JP</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the top default book containing accelerated depreciation profile from the list of books that are associated with the specified fixed asset.
    /// </summary>
    /// <param name="_assetId">
    ///    The ID of the fixed asset for which to find the book.
    /// </param>
    /// <param name="_company">
    ///    The company to which the fixed asset belongs.
    /// </param>
    /// <param name="_currentOperationsTax">
    ///    The current operations tax, usually gathered from a journal.
    /// </param>
    /// <returns>
    ///    The top default book from the list of books that are associated with the specified fixed asset.
    /// </returns>
    public static AssetBookId getTopDefaultAcceleratedBookIdForAssetId_JP(AssetId _assetId, CompanyId _company, CurrentOperationsTax _currentOperationsTax)
    {
        AssetBook assetBook;
        AssetBookTable assetBookTable;

        changecompany(_company)
        {
            // Select the top record associated with the specified fixed asset.
            select firstonly BookId from assetBook
                order by Status
                where assetBook.AssetId == _assetId
                    &&   (assetBook.Status == AssetStatus::NoAcquisition
                       || assetBook.Status == AssetStatus::Open
                       || assetBook.Status == AssetStatus::Closed)
                    && assetBook.DepreciationAcceleratedProfile_JP != ''
            join BookId from assetBookTable
                where assetBookTable.BookId               == assetBook.BookId
                   && assetBookTable.CurrentOperationsTax == _currentOperationsTax;
        }

        return assetBook.BookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSummarizedByMajorType_JP</Name>
				<Source><![CDATA[
    public void setSummarizedByMajorType_JP()
    {
        // <GJP>
        if (this.determinSpecialDepType_JP() == AssetDepType_JP::OrdinaryDepreciation)
        {
            this.SummarizeByMajorType_JP = NoYes::Yes;
        }
        else
        {
            this.SummarizeByMajorType_JP = NoYes::No;
        }
        // </GJP>
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAssetBookBonusFromAssetGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will create <c>AssetBookBonus</c> records for each
    /// <c>AssetGroupSetupBonus</c> record of the <c>AssetGroup</c>.
    /// </summary>
    public void createAssetBookBonusFromAssetGroup()
    {
        AssetGroupSetupBonus  assetGroupSetupBonus;

        while select assetGroupSetupBonus
            where assetGroupSetupBonus.AssetGroupId == this.AssetGroup
               && assetGroupSetupBonus.BookId       == this.BookId
        {
            AssetBookBonus::createFromAssetGroupSetupBonus(
                this.assetTable(),
                assetGroupSetupBonus);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>usedLifeTime_LV</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the number of depreciation periods for which the asset has been used.
    /// </summary>
    /// <returns>
    ///     The number of depreciation periods for which the asset has been used.
    /// </returns>
    public display AssetLifeTime usedLifeTime_LV()
    {
        return this.LifeTime - any2int(this.LifeTimeRest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetGroupDepAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the correct amount for the depreciation value.
    /// </summary>
    /// <returns>
    /// Returns the depreciation value amount.
    /// </returns>
    public display AmountCur assetGroupDepAmount_IN()
    {
        AmountCur   assetAmount;

        if (AssetParameters::isDepreciationCompaniesActEnable_IN() == NoYes::Yes)
        {
            assetAmount = AssetSumCalc_Trans_IN::newAssetYear(this.AssetGroup, this.BookId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())).depreciationValue();
        }

        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>actualNetBookValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the correct amount for the net book value.
    /// </summary>
    /// <returns>
    /// Returns the net book value amount.
    /// </returns>
    public display AmountCur actualNetBookValue_IN()
    {
        AmountCur   assetAmount;

        if (AssetParameters::isDepreciationCompaniesActEnable_IN() == NoYes::Yes)
        {
            assetAmount = AssetSumCalc_Trans_IN::newAssetYear(this.AssetGroup, this.BookId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())).netBookValue();
        }

        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates the status of the given asset value model.
    /// </summary>
    /// <param name="_assetId">An asset id.</param>
    /// <param name="_assetBookId">An asset book id.</param>
    /// <param name="_assetStatus">The status to update.</param>
    public static void updateStatus(AssetId      _assetId,
                                    AssetBookId  _bookId,
                                    AssetStatus  _assetStatus)
    {
        AssetBook assetBook = AssetBook::find(_assetId, _bookId, true);
        if (assetBook)
        {
            assetBook.Status = _assetStatus;
            assetBook.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfile_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves a posting profile by the given date.
    /// </summary>
    /// <param name="_transDate">A date to get the posting profile.</param>
    /// <returns>A posting profile.</returns>
    public AssetPostingProfile postingProfile_RU(TransDate  _transDate)
    {
        AssetPostingProfile postingProfile;
        AssetLending        assetlending   = AssetLending::findByTransDate(this.AssetId, _transDate);

        if (assetlending)
        {
            postingProfile = assetlending.PostingProfile;
        }
        if (!postingProfile)
        {
            postingProfile = this.PostingProfile;
        }
        if (!postingProfile)
        {
            postingProfile = AssetParameters::getDefaultPostingProfile_RU(this.BookId);
        }

        return postingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factor_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves a depreciation factor by the given date.
    /// </summary>
    /// <param name="_transDate">A date to get the depreciation factor.</param>
    /// <returns>A depreciation factor.</returns>
    public display RAssetFactor factor_RU(RAssetTransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return RAssetLifeHist::findDateLifeTime(this.AssetId, _transDate, this.BookID).NewFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lifeTime_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves a life time by the given date.
    /// </summary>
    /// <param name="_transDate">A date to get the life time.</param>
    /// <returns>A life time.</returns>
    public display AssetLifeTime lifeTime_RU(RAssetTransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return RAssetLifeHist::findDateLifeTime(this.AssetId, _transDate, this.BookID).NewLife;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves the merged financial dimension specified in the value model and in the lending.
    /// </summary>
    /// <param name="_transDate">A date which is used to read dimension from lending history.</param>
    /// <param name="_defaultDimension">A dimension which is merged with the value model dimension.</param>
    /// <returns>The merged financial dimension.</returns>
    public DimensionDefault defaultDimension_RU(TransDate        _transDate,
                                                DimensionDefault _defaultDimension = 0)
    {
        AssetLending       assetlending       = AssetLending::findByTransDate(this.AssetId, _transDate);
        AssetBookTable     assetStandardTable = AssetBookTable::find(this.BookId);
        DimensionDefault   defaultDimension   = _defaultDimension;

        if (assetlending)
        {
            defaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(defaultDimension, assetlending.DefaultDimension);
        }
        defaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(defaultDimension, this.DefaultDimension);

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds the specified record in the given company by the given asset id, book and company id.
    /// </summary>
    /// <param name="_assetId">An asset id.</param>
    /// <param name="_assetBookId">A value model id.</param>
    /// <param name="_companyId">A company id.</param>
    /// <param name="_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>
    ///   The specified record in the <c>AssetTable</c> table; otherwise, an empty record.
    /// </returns>
    public static AssetBook findInCompany(AssetId     _assetId,
                                          AssetBookId _assetBookId,
                                          CompanyId   _companyId,
                                          boolean     _forUpdate = false)
    {
        AssetBook assetBook;
        if (_companyId && _assetId && _assetBookId)
        {
            if (SysDataArea::checkAccessible(_companyId))
            {
                changecompany(_companyId)
                {
                    assetBook.selectForUpdate(_forUpdate);

                    select firstonly assetBook
                        where assetBook.AssetId == _assetId
                            && assetBook.BookId  == _assetBookId;
                    return assetBook;
                }
            }
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasHalfYearDepreciation_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if half depreciation is posted before asset disposal for Regular CZ and Accelerated CZ methods
    /// </summary>
    /// <returns>
    /// True, if the asset has half-depreciation posted (or not applicable); otherwise, false.
    /// </returns>
    public boolean hasHalfYearDepreciation_CZ(AssetTransTypeJournal _assetTransType, TransDate _transDate)
    {
        #ISOCountryRegionCodes
        boolean ret = true;

        AssetDepreciationProfile depreciationProfile = this.depreciationProfile();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]) &&
            (!AssetParameters::find().IsAutomaticPosting) &&
            (_assetTransType == AssetTransTypeJournal::DisposalSale ||
            _assetTransType == AssetTransTypeJournal::DisposalScrap) &&
            depreciationProfile.Accrual == AssetAccrual::Yearly &&
            (depreciationProfile.Method == AssetDepreciationMethod::Regular_CZ ||
            depreciationProfile.Method == AssetDepreciationMethod::Accelerated_CZ))
        {
            AssetTableInterval deprInterval = AssetTableInterval::construct(depreciationProfile);

            if (deprInterval.endPeriod(this.LastDepreciationDate) != deprInterval.endPeriod(_transDate))
            {
                ret = checkFailed("@FixedAssets:FA_MessageError_HalfYearDepreciationNotApplied");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates and gets asset profile records linked with current record.
    /// </summary>
    /// <returns><c>RecordLinkList</c> containing all records.</returns>
    [ERTableName(tableStr(TmpDateSum))]
    public RecordLinkList getAssetProfile()
    {
        RecordLinkList recordList = new RecordLinkList();

        TmpDateSum depreciationProfile = AssetInitDepreciationProfile::newFromBookDate(this).calcDepreciationProfile();

        while select depreciationProfile
        {
            recordList.ins(depreciationProfile);
        }

        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAssetScrapValueReportingCurrencyByDate_CN</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the asset scrap value in reporting currency of the asset book.
    /// </summary>
    /// <param name="_assetTransDate">
    ///     the asset trans date to calculate the scrap value.
    /// </param>
    /// <returns>
    ///     return the scrap value in reporting currency based on "_assetTransDate",
    ///     else return current scrap value if scrap rate is zero.
    /// </returns>
    public AssetScrapValue calcAssetScrapValueReportingCurrencyByDate_CN(AssetTransDate _assetTransDate)
    {
        AssetScrapRate_CN   scrapRate = AssetBookTable::find(this.BookId).ExpectedScrapRate_CN;
        AssetScrapValue     scrapValueThisMonthReportingCurrency;
        AssetAmount         acquisitionAmountReportingCurrency;
        AssetAmount         prevAmountToDepreciateReportingCurrency;
        TransDate           adjustTransDate;
        AssetTableInterval  deprInterval;

        acquisitionAmountReportingCurrency = AssetTrans::acquisitionAmountReportingCurrency(this.AssetId, _assetTransDate, this.BookId);

        if (scrapRate == 0 || acquisitionAmountReportingCurrency == 0)
        {
            if (AssetScrapValueReportingCurrencyFlight::instance().isEnabled())
            {            
                scrapValueThisMonthReportingCurrency = this.ScrapValueReportingCurrency;
            }
            else
            {
                scrapValueThisMonthReportingCurrency = this.ScrapValue;
            }
        }
        else
        {
            deprInterval = AssetTableInterval::construct(this.depreciationProfile(), this.assetBookTable().FiscalCalendar);
            prevAmountToDepreciateReportingCurrency = AssetTrans::amountToDepriciateInReportingCurrency(this.AssetId, _assetTransDate, this.BookId);

            if (this.DepreciationConvention == AssetDepreciationConvention::None)
            {
                adjustTransDate = deprInterval.startOfPeriod(_assetTransDate) - 1;
                adjustTransDate = deprInterval.endPeriod(adjustTransDate);
            }
            else
            {
                adjustTransDate = _assetTransDate;
            }

            // Revaluation will not be calculated
            prevAmountToDepreciateReportingCurrency -= AssetTrans::amountMSTPerDateTranstype(this.AssetId, adjustTransDate, this.BookId, AssetTransType::Revaluation);

            scrapValueThisMonthReportingCurrency = prevAmountToDepreciateReportingCurrency * scrapRate / 100;
        }

        return scrapValueThisMonthReportingCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAssetRevisedDepreciationCost_JP</Name>
				<Source><![CDATA[
    private void checkAssetRevisedDepreciationCost_JP()
    {
        if (this.AssetRevisedAcquisitionCost_JP || this.AssetRevisedAcquisitionCostStartDate_JP)
        {
            if (hasGUI()
                && Box::yesNo("@ApplicationSuite_Localization:AssetRevisedAcquisitionCostCleanupDialogMessage", DialogButton::Yes) == DialogButton::Yes)
            {
                this.AssetRevisedAcquisitionCost_JP = 0;
                this.AssetRevisedAcquisitionCostStartDate_JP = dateNull();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAcquisitionAmountSign</Name>
				<Source><![CDATA[
    internal int getAcquisitionAmountSign()
    {
        int ret = 1;

        if ((!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL])
                || !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                || !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
            && (this.isPositiveDepreciation
                || this.isPositiveDepreciation_JP())) // Japan has its own localization logic. It doesn't use this.isPositiveDepreciation value.
        {
            ret = -1;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPositiveDepreciation_JP</Name>
				<Source><![CDATA[
    private boolean isPositiveDepreciation_JP()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP])
            && this.NegativeNetBookValue
            && this.AcquisitionPrice < 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNetBookValueRest</Name>
				<Source><![CDATA[
    internal AmountMST getNetBookValueRest(AssetBookTable _book)
    {
        AmountMST netBookValueRest = _book.NetBookValueRest;

        if (this.isPositiveDepreciation
            && _book.NetBookValueRest > 0)
        {
            netBookValueRest = -1 * _book.NetBookValueRest;
        }

        return netBookValueRest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNetBookValueRestReporting</Name>
				<Source><![CDATA[
    internal AmountMST getNetBookValueRestReporting(AssetBookTable _book)
    {
        AmountMST netBookValueRest = _book.NetBookValueRestReportingCurrency;

        if (this.isPositiveDepreciation
            && _book.NetBookValueRest > 0)
        {
            netBookValueRest = -1 * _book.NetBookValueRestReportingCurrency;
        }

        return netBookValueRest;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<DeveloperDocumentation>@FixedAssets:FA_MessageDeveloper_AssetBook</DeveloperDocumentation>
	<FormRef>AssetBook</FormRef>
	<Label>@FixedAssets:FA_TableTitle_AssetBook</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>AssetId</TitleField1>
	<TitleField2>BookId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>AssetBookIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>AssetBookIdx</PrimaryIndex>
	<ReplacementKey>AssetBookIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>AssetBookShiftDepreciation_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetBookShiftDepreciation_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetBudget</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetBudget</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetChangesHistory</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetChangesHistory</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>AssetTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetDeferralsAccounts</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RAssetDeferralsAccounts</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetDeprAccount</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RAssetDeprAccount</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetLifeHist</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RAssetLifeHist</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcquisitionPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcquisitionDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AcceleratedDepreciation_JP</Name>
			<Label>@FixedAssetsIncentiveDepreciation:SYP4880008</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LastDepreciationDateAccelerated_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Acquisition</Name>
			<Label>@SYS67402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AcquisitionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetPurchaseDate_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetCostAccountingType_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcquisitionPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcquisitionPriceReportingCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcquisitionMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeprPrevPeriods_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeprPrevPeriodsNonCost_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeprPrevPriorCost_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeprPrevPriorNonCost_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>acquisitionDocumentNum_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategorizationDate_CZ</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Balance</Name>
			<Label>@SYS3566</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BalancingAccounts_PSN</Name>
			<Label>@SPS1597</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DueFrom_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueTo_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CheckNetBookValue</Name>
			<Label>@SYS77976</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExceedingNetBookValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NegativeNetBookValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPositiveDepreciation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConsumptionDepreciation</Name>
			<Label>@SYS71157</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConsumptionFactorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsumptionUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationAmountUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationAmountUnitReportingCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsumptionQtyEstimated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Depreciation</Name>
			<Label>@SYS67341</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Depreciation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsedFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastDepreciationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CheckMaxPercentRB</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxPercentRB</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceLife</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LifeTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LifeTimeRest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScrapValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScrapValueReportingCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EquallyDividedStartDate_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationConvention</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDisposalSameYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsTrueUpDepreciation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetGroupDepreciation_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigAcquisitionDate_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationGroupId_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubGroupId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>factor_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowableLimitForAccumulatedDepType_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetRevisedAcquisitionCost_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetRevisedAcquisitionCostStartDate_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsShorteningUsefulLife_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocationStartDate_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastReserveAllocationDate_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAllowDepreciationAdjSameDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DepreciationExtProfile_JP</Name>
			<Label>@SYS71181</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SpecialDepAllocationPeriods_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecialDepAllocationConvention_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecialDepAllocationUnit_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DerogatoryCalculation</Name>
			<Label>@SYS110414</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetDerogatoryModel_FR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDerogatoryBook_FR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExtraordinaryDepreciation</Name>
			<Label>@SYS71286</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LastDepreciationDateExtraOrd</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecialDepStartDate_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecialDepLastAllocationDate_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Issue</Name>
			<Label>@SYS15242</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DisposalDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SaleValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReplacementDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LowValuePool</Name>
			<Label>@SYS113681</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LVPTransferId_AU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LVPTransferDate_AU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Percentage</Name>
			<Label>@SYS67344</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Percentage_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PercentageAlt_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PercentageExt_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Provisions</Name>
			<Label>@SYS71184</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReserveTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseAccount</Name>
			<Label>@SYS67404</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RBSL</Name>
			<Label>@SYS84155</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceLifeYears_FR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceLifeMonths_FR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RBSLFactor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>rbslPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SortingId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SortingId2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SortingId3</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Revaluation</Name>
			<Label>@SYS71182</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RevaluationGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetFairValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesAccount</Name>
			<Label>@SYS67405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetReport_JP</Name>
			<Label>@SYS81753</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SummarizeByMajorType_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendInfo_RU</Name>
			<Label>@SYS80105</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroupId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchInternalInvoiceId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency_RU</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Operations_RU</Name>
			<Label>@GLS101567</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Lock_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AcquisitionDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetAcquisitionDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AcquisitionMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetAcquisitionMethodId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AcquisitionPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetAcquisitionPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AllocationStartDate_JP</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowableLimitForAccumulatedDepType_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetLimitForAccumulatedDepType_JP</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetCostAccountingType_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PlAssetCostAccountingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetDerogatoryModel_FR</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDerogatoryValueModel_FR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssetFairValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetFairValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetGroupDepreciation_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetGroupDepreciation_IN</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AssetPurchaseDate_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlAssetPurchaseDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssetRevisedAcquisitionCost_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetRevisedAcquisitionCost_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AssetRevisedAcquisitionCostStartDate_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<ExtendedDataType>AssetTransDate</ExtendedDataType>
			<Label>@ApplicationSuite_Localization:AssetRevisedAcquisitionCostStartDate_JP</Label>
			<RelationContext>JP</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CategorizationDate_CZ</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CzAssetCategorizationDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CheckMaxPercentRB</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetCheckMaxPercentRB_DE</ExtendedDataType>
			<Label>@SYS108423</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConsumptionFactorId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetConsumptionFactorId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConsumptionQtyEstimated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetConsumptionQtyEstimated</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConsumptionUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetConsumptionUnitId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustInvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Depreciation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DepreciationAmountUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationAmountUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DepreciationConvention</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetDepreciationConvention</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationGroupId_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationGroupId_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DepreciationStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationStartDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DeprPrevPeriods_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>PL</CountryRegionCodes>
			<ExtendedDataType>AssetAmount</ExtendedDataType>
			<Label>@GLS109603</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DeprPrevPeriodsNonCost_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>PL</CountryRegionCodes>
			<ExtendedDataType>AssetAmount</ExtendedDataType>
			<Label>@GLS114168</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DeprPrevPriorCost_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>PL</CountryRegionCodes>
			<ExtendedDataType>AssetAmount</ExtendedDataType>
			<Label>@GLS114170</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DeprPrevPriorNonCost_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>PL</CountryRegionCodes>
			<ExtendedDataType>AssetAmount</ExtendedDataType>
			<Label>@GLS114172</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DisposalDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDisposalDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DueFrom_PSN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS1209</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DueTo_PSN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS1210</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EquallyDividedStartDate_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepYearsEquallyDividedStartDate_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExceedingNetBookValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExceedingNetBookValue</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDerogatoryBook_FR</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDerogatoryBook_FR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDisposalSameYear</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FixedAssetDisposalSameYear</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsShorteningUsefulLife_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetIsShorteningUsefulLife_JP</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsTrueUpDepreciation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FixedAssetTrueUpDepreciation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastDepreciationDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetLastDepreciationDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastDepreciationDateAccelerated_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<ExtendedDataType>AssetLastDepreciationDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastDepreciationDateExtraOrd</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetLastDepreciationDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastReserveAllocationDate_JP</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LifeTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetLifeTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LifeTimeRest</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetLifeTimeRest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LVPTransferDate_AU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetLowValuePoolTransferDate_AU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LVPTransferId_AU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetLowValuePoolTransferId_AU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxPercentRB</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetMaxPercentRB_DE</ExtendedDataType>
			<Label>@SYS108316</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NegativeNetBookValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NegativeNetBookValue</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>OrigAcquisitionDate_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AssetAcquisitionDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percentage_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>PL</CountryRegionCodes>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@sys67344</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PercentageAlt_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>PL</CountryRegionCodes>
			<ExtendedDataType>Percent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PercentageExt_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>PL</CountryRegionCodes>
			<ExtendedDataType>Percent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RBSLFactor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetRBSLFactor</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReplacementDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetReplacementDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReserveTypeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetReserveTypeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RevaluationGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<ExtendedDataType>AssetRevaluationGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SaleValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetSaleValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ScrapValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetScrapValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ServiceLife</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetServiceLife</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ServiceLifeMonths_FR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetServiceLifeMonths</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ServiceLifeYears_FR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetServiceLifeYears</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SortingId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetSortingId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SortingId2</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetSortingId2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SortingId3</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetSortingId3</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SpecialDepAllocationConvention_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetSpecialDepAllocationConvention_JP</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SpecialDepAllocationPeriods_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetSpecialDepAllocationPeriods_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SpecialDepAllocationUnit_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetSpecialDepAllocationUnit_JP</ExtendedDataType>
			<EnumType>AssetAccrualFiscal</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SpecialDepLastAllocationDate_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetSpecialDepLastAllocationDate_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SpecialDepStartDate_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetSpecialDepStartDate_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SummarizeByMajorType_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetSummarizeByMajorType_JP</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>UsedFromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetUsedFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationAltProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationAltProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationExtProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationExtProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationAcceleratedProfile_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationAcceleratedProfileId_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubGroupId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetSubGroupId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Lock_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetLock_RU</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequenceGroupId_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchInternalInvoiceId_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>PurchInternalInvoiceId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>SalesId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationExtProfile_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<ExtendedDataType>AssetDepreciationExtProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AcquisitionPriceReportingCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetAcquisitionPriceReportingCurrency</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ScrapValueReportingCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetScrapValueReportingCurrency</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DepreciationAmountUnitReportingCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationAmountUnitReportingCurrency</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAllowDepreciationAdjSameDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@FixedAssets:FA_PreventAutomaticPostingAdjustment</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPositiveDepreciation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@FixedAssets:FA_HelpText_CalculatePositiveDepreciation</HelpText>
			<Label>@FixedAssets:FA_CalculatePositiveDepreciation</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsMigratedAsset</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@FixedAssets:MigratedAsset</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AssetBookIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DueFromMainAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DueFrom_PSN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DueToMainAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DueTo_PSN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DepreciationProfileIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DepreciationProfile</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DepreciationAltProfileIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DepreciationAltProfile</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DepreciaitonExtProfileIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DepreciationExtProfile</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BookIdAcquisitionDisposalAssetIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AcquisitionDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DisposalDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>AssetDepBookMap_JP</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AcquisitionDate</MapField>
					<MapFieldTo>AcquisitionDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AcquisitionPrice</MapField>
					<MapFieldTo>AcquisitionPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AllocationStartDate</MapField>
					<MapFieldTo>AllocationStartDate_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AllowableLimitForAccumulatedDepType</MapField>
					<MapFieldTo>AllowableLimitForAccumulatedDepType_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetBookId</MapField>
					<MapFieldTo>BookId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetGroup</MapField>
					<MapFieldTo>AssetGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetId</MapField>
					<MapFieldTo>AssetId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetRevisedAcquisitionCostStartDate</MapField>
					<MapFieldTo>AssetRevisedAcquisitionCostStartDate_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetRevisedAcquisitionCost_JP</MapField>
					<MapFieldTo>AssetRevisedAcquisitionCost_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetStatus</MapField>
					<MapFieldTo>Status</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Depreciation</MapField>
					<MapFieldTo>Depreciation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationConvention</MapField>
					<MapFieldTo>DepreciationConvention</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationStartDate</MapField>
					<MapFieldTo>DepreciationStartDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EquallyDividedStartDate</MapField>
					<MapFieldTo>EquallyDividedStartDate_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastDepreciationDate</MapField>
					<MapFieldTo>LastDepreciationDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastDepreciationDateAccelerated</MapField>
					<MapFieldTo>LastDepreciationDateAccelerated_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastDepreciationDateExtraOrd</MapField>
					<MapFieldTo>LastDepreciationDateExtraOrd</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastReserveAllocationDate</MapField>
					<MapFieldTo>LastReserveAllocationDate_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LifeTime</MapField>
					<MapFieldTo>LifeTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LifeTimeRest</MapField>
					<MapFieldTo>LifeTimeRest</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ScrapValue</MapField>
					<MapFieldTo>ScrapValue</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceLife</MapField>
					<MapFieldTo>ServiceLife</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SpecialDepAllocationConvention_JP</MapField>
					<MapFieldTo>SpecialDepAllocationConvention_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SpecialDepAllocationPeriods_JP</MapField>
					<MapFieldTo>SpecialDepAllocationPeriods_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SpecialDepAllocationUnit_JP</MapField>
					<MapFieldTo>SpecialDepAllocationUnit_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SpecialDepLastAllocationDate</MapField>
					<MapFieldTo>SpecialDepLastAllocationDate_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SpecialDepStartDate</MapField>
					<MapFieldTo>SpecialDepStartDate_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Status</MapField>
					<MapFieldTo>Status</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UsedFromDate</MapField>
					<MapFieldTo>UsedFromDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>AssetFieldChangesMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AssetBookId</MapField>
					<MapFieldTo>BookId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetDepreciationBookId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetId</MapField>
					<MapFieldTo>AssetId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetLifeTime</MapField>
					<MapFieldTo>LifeTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetSaleValue</MapField>
					<MapFieldTo>SaleValue</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetScrapValue</MapField>
					<MapFieldTo>ScrapValue</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetServiceLife</MapField>
					<MapFieldTo>ServiceLife</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>AssetGroupDepBookMap_JP</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AllowableLimitForAccumulatedDepType_JP</MapField>
					<MapFieldTo>AllowableLimitForAccumulatedDepType_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetBookId</MapField>
					<MapFieldTo>BookId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetGroup</MapField>
					<MapFieldTo>AssetGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Depreciation</MapField>
					<MapFieldTo>Depreciation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationConvention</MapField>
					<MapFieldTo>DepreciationConvention</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LifeTime</MapField>
					<MapFieldTo>LifeTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceLife</MapField>
					<MapFieldTo>ServiceLife</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SpecialDepAllocationConvention_JP</MapField>
					<MapFieldTo>SpecialDepAllocationConvention_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SpecialDepAllocationPeriods_JP</MapField>
					<MapFieldTo>SpecialDepAllocationPeriods_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SpecialDepAllocationUnit_JP</MapField>
					<MapFieldTo>SpecialDepAllocationUnit_JP</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>AssetDepBookMap_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AcquisitionDate</MapField>
					<MapFieldTo>AcquisitionDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AcquisitionPrice</MapField>
					<MapFieldTo>AcquisitionPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetBookId</MapField>
					<MapFieldTo>BookId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetGroup</MapField>
					<MapFieldTo>AssetGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetGroupDepreciation_IN</MapField>
					<MapFieldTo>AssetGroupDepreciation_IN</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetId</MapField>
					<MapFieldTo>AssetId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetStatus</MapField>
					<MapFieldTo>Status</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationStartDate</MapField>
					<MapFieldTo>DepreciationStartDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DisposalDate</MapField>
					<MapFieldTo>DisposalDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastDepreciationDate</MapField>
					<MapFieldTo>LastDepreciationDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UsedFromDate</MapField>
					<MapFieldTo>UsedFromDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>AssetDepreciationProfilesValidationMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BookId</MapField>
					<MapFieldTo>BookId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationAcceleratedProfile_JP</MapField>
					<MapFieldTo>DepreciationAcceleratedProfile_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationAltProfile</MapField>
					<MapFieldTo>DepreciationAltProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationConvention</MapField>
					<MapFieldTo>DepreciationConvention</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationExtProfile</MapField>
					<MapFieldTo>DepreciationExtProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationProfile</MapField>
					<MapFieldTo>DepreciationProfile</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetAcquisitionMethod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetAcquisitionMethod</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AcquisitionMethod</Name>
					<SourceEDT>AssetAcquisitionMethodId</SourceEDT>
					<Field>AcquisitionMethod</Field>
					<RelatedField>AcquisitionMethod</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AcquisitionMethodIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>assetBook</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EntityRelationshipRole>@SYS127010</EntityRelationshipRole>
			<RelatedTable>AssetBook</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>assetBook</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>AssetBook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<SourceEDT>AssetBookId</SourceEDT>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BookIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetChangesHistory</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EntityRelationshipRole>@SYS127386</EntityRelationshipRole>
			<RelatedTable>AssetChangesHistory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetChangesHistory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<Field>BookId</Field>
					<RelatedField>Bookid</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>Assetid</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetConsumptionFactor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetConsumptionFactor</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConsumptionFactorId</Name>
					<SourceEDT>AssetConsumptionFactorId</SourceEDT>
					<Field>ConsumptionFactorId</Field>
					<RelatedField>FactorId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>FactorIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetConsumptionUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetConsumptionUnit</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConsumptionUnitId</Name>
					<SourceEDT>AssetConsumptionUnitId</SourceEDT>
					<Field>ConsumptionUnitId</Field>
					<RelatedField>UnitId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>UnitIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetGroup_Asset</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetGroup_Asset</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBook</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetGroup</Name>
					<SourceEDT>AssetGroupId</SourceEDT>
					<Field>AssetGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetLedger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>AssetPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetReserveType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetReserveType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReserveTypeId</Name>
					<SourceEDT>AssetReserveTypeId</SourceEDT>
					<Field>ReserveTypeId</Field>
					<RelatedField>ReserveType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetRevaluationGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetRevaluationGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RevaluationGroupId</Name>
					<SourceEDT>AssetRevaluationGroupId</SourceEDT>
					<Field>RevaluationGroupId</Field>
					<RelatedField>RevaluationGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RevaluationGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetSorting_SortingId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetSorting</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetSorting_SortingId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBook</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SortingId</Name>
					<SourceEDT>AssetSortingId</SourceEDT>
					<Field>SortingId</Field>
					<RelatedField>SortingId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>SortCode_Extern</Name>
					<SourceEDT>AssetSortingId</SourceEDT>
					<RelatedField>SortCode</RelatedField>
					<ValueStr>AssetSortValue::Sorting1</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetSorting_SortingId2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetSorting</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetSorting_SortingId2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBook</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SortingId2</Name>
					<SourceEDT>AssetSortingId2</SourceEDT>
					<Field>SortingId2</Field>
					<RelatedField>SortingId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>SortCode_Extern</Name>
					<SourceEDT>AssetSortingId2</SourceEDT>
					<RelatedField>SortCode</RelatedField>
					<ValueStr>AssetSortValue::Sorting2</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetSorting_SortingId3</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetSorting</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetSorting_SortingId3</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBook</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SortingId3</Name>
					<SourceEDT>AssetSortingId3</SourceEDT>
					<Field>SortingId3</Field>
					<RelatedField>SortingId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>SortCode_Extern</Name>
					<SourceEDT>AssetSortingId3</SourceEDT>
					<RelatedField>SortCode</RelatedField>
					<ValueStr>AssetSortValue::Sorting3</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable_AssertId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>AssetTable_AssertId</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>AssetBook</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable_LVPTransferId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetTable_LVPTransferId</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>AssetBook</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LVPTransferId_AU</Name>
					<SourceEDT>AssetLowValuePoolTransferId_AU</SourceEDT>
					<Field>LVPTransferId_AU</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>assettrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EntityRelationshipRole>@SYS127387</EntityRelationshipRole>
			<RelatedTable>AssetTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>assettrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoice</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceId</Name>
					<SourceEDT>CustInvoiceId</SourceEDT>
					<Field>CustInvoiceId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DepreciationGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetDepreciationGroup_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DepreciationGroupId_W</Name>
					<Field>DepreciationGroupId_W</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DueFrom_PSN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MainAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MainAccount_DueFrom</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DueFrom_PSN</Name>
					<Field>DueFrom_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DueTo_PSN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MainAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MainAccount_DueTo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DueTo_PSN</Name>
					<Field>DueTo_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<SourceEDT>PurchId</SourceEDT>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DepreciationProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetDepreciationProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DepreciationProfile</Name>
					<SourceEDT>AssetDepreciationProfileId</SourceEDT>
					<Field>DepreciationProfile</Field>
					<RelatedField>Profile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DeprProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DepreciationAltProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetDepreciationProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DepreciationAltProfile</Name>
					<SourceEDT>AssetDepreciationAltProfileId</SourceEDT>
					<Field>DepreciationAltProfile</Field>
					<RelatedField>Profile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DeprProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DepreciationExtProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetDepreciationProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DepreciationExtProfile</Name>
					<SourceEDT>AssetDepreciationExtProfileId</SourceEDT>
					<Field>DepreciationExtProfile</Field>
					<RelatedField>Profile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DeprProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DepreciationAcceleratedProfile_JP</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetDepreciationProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DepreciationAcceleratedProfile_JP</Name>
					<SourceEDT>AssetDepreciationAcceleratedProfileId_JP</SourceEDT>
					<Field>DepreciationAcceleratedProfile_JP</Field>
					<RelatedField>Profile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DeprProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId_RU</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId_RU</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency_RU</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>AssetBook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode_RU</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode_RU</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetSubGroup_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetSubGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetSubGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SubGroupId_RU</Name>
					<SourceEDT>RAssetSubGroupId</SourceEDT>
					<Field>SubGroupId_RU</Field>
					<RelatedField>SubGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SubGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>NumberSequenceGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBook</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceGroupId_RU</Name>
					<SourceEDT>NumberSequenceGroupId</SourceEDT>
					<Field>NumberSequenceGroupId_RU</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId_RU</Name>
					<SourceEDT>SalesId</SourceEDT>
					<Field>SalesId_RU</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetBookInUseForPosting</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>AssetBookInUseForPosting</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>