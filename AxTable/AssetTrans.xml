<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetTrans extends common
{
    #IsoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>CompanyInfo</c> record that is associated with the current record.
    /// </summary>
    /// <returns>
    /// A <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAcquisitionTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a Boolean value that indicates whether a transaction is an acquisition transaction.
    /// </summary>
    /// <returns>
    /// true if it is an acquisition transaction; otherwise, false.
    /// </returns>
    public boolean isAcquisitionTransaction()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        {
            return this.TransType == AssetTransType::Acquisition
                || this.TransType == AssetTransType::AcquisitionAdj;
        }
        else
        {
            return this.TransType == AssetTransType::Acquisition
                || this.TransType == AssetTransType::AcquisitionAdj
                || this.TransType == AssetTransType::WriteDownAdj
                || this.TransType == AssetTransType::WriteUpAdj;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisposalTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a transaction is a disposal or profit loss transaction.
    /// </summary>
    /// <returns>
    /// true if it is a disposal or profit loss transaction; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A disposal transaction includes disposal scrap and disposal sale transaction types.
    /// </remarks>
    public boolean isDisposalTransaction()
    {
        return this.TransType == AssetTransType::DisposalScrap  ||
               this.TransType == AssetTransType::DisposalSale   ||
               this.TransType == AssetTransType::ProfitLoss;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Looks up the transaction reversal record for the current asset transaction and returns the value of
    ///    the transaction reversal reversed field.
    /// </summary>
    /// <returns>
    ///    A <c>transactionReversalTrans.Reversed</c> field value if a record is found that corresponds to the
    ///    current asset transaction; otherwise false.
    /// </returns>
    //
    display boolean reversed()
    {
        return TransactionReversalTrans::findTransactionReversalTrans(tableNum(AssetTrans), this.RecId).Reversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>traceNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Looks up the transaction reversal record for the current asset transaction and returns the value of
    ///    the transaction reversal <c>TraceNum</c> field.
    /// </summary>
    /// <returns>
    ///    A <c>transactionReversalTrans.TraceNum</c> field value if a record is found that corresponds to the
    ///    current asset transaction; otherwise false.
    /// </returns>
    //
    display TraceNum traceNum()
    {
        return TransactionReversalTrans::findTransactionReversalTrans(tableNum(AssetTrans), this.RecId).TraceNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocument_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>DocumentNum_W</c> and <c>DocumentDate_W</c> fields.
    /// </summary>
    /// <param name="_docNum">
    /// The document number.
    /// </param>
    /// <param name="_docDate">
    /// The document date.
    /// </param>
    public void updateDocument_W(DocumentNum _docNum, DocumentDate _docDate)
    {
        if (this.DocumentNum_W != _docNum || this.DocumentDate_W != _docDate)
        {
            ttsbegin;
            this.selectForUpdate(true);
            this.DocumentNum_W  = _docNum;
            this.DocumentDate_W = _docDate;
            this.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionAmount</Name>
				<Source><![CDATA[
    public static AssetAmount acquisitionAmount(
        AssetId     _assetId,
        TransDate   _transDate,
        AssetBookId _assetBookId)
    {
        return AssetTrans::amountMSTPerDateTransTypes(
                _assetId,
                _assetBookId,
                [AssetTransType::Acquisition, AssetTransType::AcquisitionAdj, AssetTransType::CapitalReserveTransfer],
                dateNull(),
                _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionAmountReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the transactions for reporting currency amount from the <c>AssetTrans</c> table for Acquisition, AcquisitionAdj and CapitalReserveTransfer transaction types.
    /// </summary>
    /// <param name="_assetId">
    /// The ID of the asset.
    /// </param>
    /// <param name = "_transDate">
    /// The Transaction date value.
    /// </param>
    /// <param name="_assetBookId">
    /// The ID of the asset's book.
    /// </param>
    /// <returns>
    /// A sum of the acquisition transaction types for reporting currency amount from the <c>AssetTrans</c> table.
    /// </returns>
    public static AssetAmount acquisitionAmountReportingCurrency(
        AssetId     _assetId,
        TransDate   _transDate,
        AssetBookId _assetBookId)
    {
        return AssetTrans::amountReportingCurrencyPerDateTransTypes(
                _assetId,
                _assetBookId,
                [AssetTransType::Acquisition, AssetTransType::AcquisitionAdj, AssetTransType::CapitalReserveTransfer],
                dateNull(),
                _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTPerDateTranstype</Name>
				<Source><![CDATA[
    public static AmountMST amountMSTPerDateTranstype(
        AssetId         _assetId,
        TransDate       _transDate,
        AssetBookId     _assetBookId,
        AssetTransType  _assetTransType)
    {
        Query query = AssetTrans::getQueryPerDateTransType(
            _assetId,
            _transDate,
            _assetBookId,
            _assetTransType);

        AmountMST amountMST;

        if (isFlightEnabled(FixedAssetsConstants::DisableAssetTransTmpCacheFlight))
        {
            QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(AssetTrans));
            queryBuildDataSource.addSelectionField(fieldNum(AssetTrans, AmountMST), SelectionField::Sum);
        }
        else
        {
            QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(AssetTransTmp));
            queryBuildDataSource.addSelectionField(fieldNum(AssetTransTmp, AmountMST), SelectionField::Sum);
        }

        return AssetTrans::getAssetTransMap(query, _assetId, _assetBookId).AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetTransMap</Name>
				<Source><![CDATA[
    private static AssetTransMap getAssetTransMap(
        Query _query,
        AssetId _assetId,
        AssetBookId _assetBookId)
    {
        AssetTransMap assetTransMap;
        QueryRun queryRun = new QueryRun(_query);

        if (isFlightEnabled(FixedAssetsConstants::DisableAssetTransTmpCacheFlight))
        {
            queryRun.next();
            assetTransMap = queryRun.get(tableNum(AssetTrans));
        }
        else
        {
            queryRun.setRecord(AssetCacheManager::getCacheAssetTrans(_assetId, _assetBookId));
            queryRun.next();
            assetTransMap = queryRun.get(tableNum(AssetTransTmp));
        }

        return assetTransMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryPerDateTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>Query</c> instance to return an <c>AssetTrans</c> record for the specified transaction.
    /// </summary>
    /// <param name = "_assetId">
    /// The ID of the asset.
    /// </param>
    /// <param name = "_transDate">
    /// The Transaction date value.
    /// </param>
    /// <param name="_assetBookId">
    /// The ID of the value model.
    /// </param>
    /// <param name = "_assetTransType">
    ///  A container that contains the transaction types to include in the calculation.
    /// </param>
    /// <returns>
    /// A <c>Query</c> instance with datasource for the <c>AssetTrans</c> table.
    /// </returns>
    protected static Query getQueryPerDateTransType(
        AssetId _assetId,
        TransDate _transDate,
        AssetBookId _assetBookId,
        AssetTransType _assetTransType)
    {
        Query query = new Query();

        if (isFlightEnabled(FixedAssetsConstants::DisableAssetTransTmpCacheFlight))
        {
            QueryBuildDataSource qbds = query.addDataSource(tableNum(AssetTrans));

            qbds.addRange(fieldNum(AssetTrans, AssetId)).value(SysQuery::value(_assetId));
            qbds.addRange(fieldNum(AssetTrans, BookId)).value(SysQuery::value(_assetBookId));
            qbds.addRange(fieldNum(AssetTrans, TransDate)).value(
                strFmt('(%1 <= %2)',
                    fieldStr(AssetTrans, TransDate),
                    date2StrXpp(_transDate)));
            qbds.addRange(fieldNum(AssetTrans, TransType)).value(SysQuery::value(_assetTransType));
        }
        else
        {
            QueryBuildDataSource qbds = query.addDataSource(tableNum(AssetTransTmp));

            qbds.addRange(fieldNum(AssetTransTmp, AssetId)).value(SysQuery::value(_assetId));
            qbds.addRange(fieldNum(AssetTransTmp, BookId)).value(SysQuery::value(_assetBookId));
            qbds.addRange(fieldNum(AssetTransTmp, TransDate)).value(
                strFmt('(%1 <= %2)',
                    fieldStr(AssetTransTmp, TransDate),
                    date2StrXpp(_transDate)));
            qbds.addRange(fieldNum(AssetTransTmp, TransType)).value(SysQuery::value(_assetTransType));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountReportingCurrencyPerDateTranstype</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the transactions for reporting currency amounts from the <c>AssetTrans</c> table for the specified transaction
    /// types and asset information.
    /// </summary>
    /// <param name = "_assetId">
    /// The ID of the asset.
    /// </param>
    /// <param name = "_transDate">
    /// The transaction date for the sum.
    /// </param>
    /// <param name = "_assetBookId">
    /// The ID of the value model
    /// </param>
    /// <param name = "_assetTransType">
    /// A container that contains the transaction types to include in the calculation.
    /// </param>
    /// <returns>
    /// A sum of the transactions for reporting currency amount from the <c>AssetTrans</c> table.
    /// </returns>
    public static AmountMSTSecondary amountReportingCurrencyPerDateTranstype(
        AssetId         _assetId,
        TransDate       _transDate,
        AssetBookId     _assetBookId,
        AssetTransType  _assetTransType)
    {
        Query query = AssetTrans::getQueryPerDateTransType(
            _assetId,
            _transDate,
            _assetBookId,
            _assetTransType);

        AssetAmountReportingCurrency reportingCurrencyAmount;

        if (isFlightEnabled(FixedAssetsConstants::DisableAssetTransTmpCacheFlight))
        {
            QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(AssetTrans));
            queryBuildDataSource.addSelectionField(fieldNum(AssetTrans, ReportingCurrencyAmount), SelectionField::Sum);
        }
        else
        {
            QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(AssetTransTmp));
            queryBuildDataSource.addSelectionField(fieldNum(AssetTransTmp, ReportingCurrencyAmount), SelectionField::Sum);
        }

        return AssetTrans::getAssetTransMap(query, _assetId, _assetBookId).ReportingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTPerDateTransTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the transactions from the <c>AssetTrans</c> table for the specified transaction
    /// types and asset information.
    /// </summary>
    /// <param name="_assetId">
    /// The ID of the asset.
    /// </param>
    /// <param name="_assetBookId">
    /// The ID of the value model
    /// </param>
    /// <param name="_assetTransTypes">
    /// A container that contains the transaction types to include in the calculation.
    /// </param>
    /// <param name="_fromTransDate">
    /// The starting date for the sum.
    /// </param>
    /// <param name="_toTransDate">
    /// The ending date for the sum.
    /// </param>
    /// <param name="_voucherToExclude">
    /// The voucher to exclude from the sum; optional.
    /// </param>
    /// <returns>
    /// A sum of the transactions from the <c>AssetTrans</c> table.
    /// </returns>
    public static AmountMST amountMSTPerDateTransTypes(
        AssetId     _assetId,
        AssetBookId _assetBookId,
        container   _assetTransTypes,
        TransDate   _fromTransDate,
        TransDate   _toTransDate,
        Voucher     _voucherToExclude = '')
    {
        AssetTransMap assetTrans;

        if (conLen(_assetTransTypes) > 0)
        {
            Query assetTransQuery = AssetTrans::getQueryForAmountMSTPerDateTransTypes(
                _assetId,
                _assetBookId,
                _assetTransTypes,
                _fromTransDate,
                _toTransDate,
                _voucherToExclude);

            assetTrans = AssetTrans::getAssetTransMap(assetTransQuery, _assetId, _assetBookId);
        }

        return assetTrans.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountReportingCurrencyPerDateTransTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the transactions for reporting currency amount from the <c>AssetTrans</c> table for the specified transaction
    /// types and asset information.
    /// </summary>
    /// <param name="_assetId">
    /// The ID of the asset.
    /// </param>
    /// <param name="_assetBookId">
    /// The ID of the value model
    /// </param>
    /// <param name="_assetTransTypes">
    /// A container that contains the transaction types to include in the calculation.
    /// </param>
    /// <param name="_fromTransDate">
    /// The starting date for the sum.
    /// </param>
    /// <param name="_toTransDate">
    /// The ending date for the sum.
    /// </param>
    /// <param name="_voucherToExclude">
    /// The voucher to exclude from the sum; optional.
    /// </param>
    /// <returns>
    /// A sum of the transactions for reporting currency amount from the <c>AssetTrans</c> table.
    /// </returns>
    public static AmountMSTSecondary amountReportingCurrencyPerDateTransTypes(
        AssetId     _assetId,
        AssetBookId _assetBookId,
        container   _assetTransTypes,
        TransDate   _fromTransDate,
        TransDate   _toTransDate,
        Voucher     _voucherToExclude = '')
    {
        AssetTransMap assetTrans;

        if (conLen(_assetTransTypes) > 0)
        {
            Query assetTransQuery = AssetTrans::getQueryForAmountReportingCurrencyPerDateTransTypes(
                _assetId,
                _assetBookId,
                _assetTransTypes,
                _fromTransDate,
                _toTransDate,
                _voucherToExclude);

            assetTrans = AssetTrans::getAssetTransMap(assetTransQuery, _assetId, _assetBookId);
        }

        return assetTrans.ReportingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForAmountMSTPerDateTransTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>Query</c> instance to return an <c>AssetTrans</c> record for the specified transaction
    /// types and asset information.
    /// </summary>
    /// <param name="_assetId">
    /// The ID of the asset.
    /// </param>
    /// <param name="_assetBookId">
    /// The ID of the value model
    /// </param>
    /// <param name="_assetTransTypes">
    /// A container that contains the transaction types to include in the calculation.
    /// </param>
    /// <param name="_fromTransDate">
    /// The starting date for the sum.
    /// </param>
    /// <param name="_toTransDate">
    /// The ending date for the sum.
    /// </param>
    /// <param name="_voucherToExclude">
    /// The voucher to exclude from the sum.
    /// </param>
    /// <returns>
    /// A <c>Query</c> instance with datasource for the <c>AssetTrans</c> table.
    /// </returns>
    protected static Query getQueryForAmountMSTPerDateTransTypes(
        AssetId     _assetId,
        AssetBookId _assetBookId,
        container   _assetTransTypes,
        TransDate   _fromTransDate,
        TransDate   _toTransDate,
        Voucher     _voucherToExclude)
    {        
        return AssetTrans::getQueryForAmountPerDateTransTypesPerCurrency(_assetId,
                                                                            _assetBookId,
                                                                            _assetTransTypes,
                                                                            _fromTransDate,
                                                                            _toTransDate,
                                                                            _voucherToExclude);       
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForAmountReportingCurrencyPerDateTransTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>Query</c> instance to return an <c>AssetTrans</c> record for the specified transaction
    /// types and asset information.
    /// </summary>
    /// <param name="_assetId">
    /// The ID of the asset.
    /// </param>
    /// <param name="_assetBookId">
    /// The ID of the value model
    /// </param>
    /// <param name="_assetTransTypes">
    /// A container that contains the transaction types to include in the calculation.
    /// </param>
    /// <param name="_fromTransDate">
    /// The starting date for the sum.
    /// </param>
    /// <param name="_toTransDate">
    /// The ending date for the sum.
    /// </param>
    /// <param name="_voucherToExclude">
    /// The voucher to exclude from the sum.
    /// </param>
    /// <returns>
    /// A <c>Query</c> instance with datasource for the <c>AssetTrans</c> table.
    /// </returns>
    protected static Query getQueryForAmountReportingCurrencyPerDateTransTypes(
        AssetId     _assetId,
        AssetBookId _assetBookId,
        container   _assetTransTypes,
        TransDate   _fromTransDate,
        TransDate   _toTransDate,
        Voucher     _voucherToExclude)
    {
        return AssetTrans::getQueryForAmountPerDateTransTypesPerCurrency(_assetId,
                                                                        _assetBookId,
                                                                        _assetTransTypes,
                                                                        _fromTransDate,
                                                                        _toTransDate,
                                                                        _voucherToExclude,
                                                                        true);  
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForAmountPerDateTransTypesPerCurrency</Name>
				<Source><![CDATA[
    private static Query getQueryForAmountPerDateTransTypesPerCurrency(
        AssetId     _assetId,
        AssetBookId _assetBookId,
        container   _assetTransTypes,
        TransDate   _fromTransDate,
        TransDate   _toTransDate,
        Voucher     _voucherToExclude,
        Boolean     _isReportingCurrency = false)
    {
        Query assetTransQuery = new Query();

        if (isFlightEnabled(FixedAssetsConstants::DisableAssetTransTmpCacheFlight))
        {
            QueryBuildDataSource assetTransQBDS = assetTransQuery.addDataSource(tableNum(AssetTrans));

            if (_isReportingCurrency)
            {
                assetTransQBDS.addSelectionField(fieldNum(AssetTrans, ReportingCurrencyAmount), SelectionField::Sum);
            }
            else
            {
                assetTransQBDS.addSelectionField(fieldNum(AssetTrans, AmountMST), SelectionField::Sum);
            }
        
            assetTransQBDS.addRange(fieldNum(AssetTrans, AssetId)).value(SysQuery::value(_assetId));
            assetTransQBDS.addRange(fieldNum(AssetTrans, BookId)).value(SysQuery::value(_assetBookId));
            assetTransQBDS.addRange(fieldNum(AssetTrans, TransDate)).value(QueryRange(_fromTransDate, _toTransDate));

            if (_voucherToExclude)
            {
                assetTransQBDS.addRange(fieldNum(AssetTrans, Voucher)).value(SysQuery::valueNot(_voucherToExclude));
            }

            int typeIndex;

            for (typeIndex = 1; typeIndex <= conLen(_assetTransTypes); typeIndex++)
            {
                str assetTransTypeValue = SysQuery::value(conPeek(_assetTransTypes, typeIndex));
                if (assetTransTypeValue)
                {
                    assetTransQBDS.addRange(fieldNum(AssetTrans, TransType)).value(assetTransTypeValue);
                }
            }
        }
        else
        {
            QueryBuildDataSource assetTransQBDS = assetTransQuery.addDataSource(tableNum(AssetTransTmp));

            if (_isReportingCurrency)
            {
                assetTransQBDS.addSelectionField(fieldNum(AssetTransTmp, ReportingCurrencyAmount), SelectionField::Sum);
            }
            else
            {
                assetTransQBDS.addSelectionField(fieldNum(AssetTransTmp, AmountMST), SelectionField::Sum);
            }
        
            assetTransQBDS.addRange(fieldNum(AssetTransTmp, AssetId)).value(SysQuery::value(_assetId));
            assetTransQBDS.addRange(fieldNum(AssetTransTmp, BookId)).value(SysQuery::value(_assetBookId));
            assetTransQBDS.addRange(fieldNum(AssetTransTmp, TransDate)).value(QueryRange(_fromTransDate, _toTransDate));

            if (_voucherToExclude)
            {
                assetTransQBDS.addRange(fieldNum(AssetTransTmp, Voucher)).value(SysQuery::valueNot(_voucherToExclude));
            }

            int typeIndex;

            for (typeIndex = 1; typeIndex <= conLen(_assetTransTypes); typeIndex++)
            {
                str assetTransTypeValue = SysQuery::value(conPeek(_assetTransTypes, typeIndex));
                if (assetTransTypeValue)
                {
                    assetTransQBDS.addRange(fieldNum(AssetTransTmp, TransType)).value(assetTransTypeValue);
                }
            }
        }

        return assetTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToDepriciate</Name>
				<Source><![CDATA[
    public static AssetAmount amountToDepriciate(
        AssetId     _assetId,
        TransDate   _transDate,
        AssetBookId _assetBookId)
    {
        // <GCN>
        TransDate   adjustTransDate;

        // get the related depreciation policies parameters and check whether the depreciation from next month after adjustment is set.
        // if true only take the adjustment from previous month into calculation.
        if (AssetParameters::isDepreciationPolicyEnabled())
        {
            if (AssetBook::find(_assetId, _assetBookId).DepreciationConvention == AssetDepreciationConvention::None)
            {
                adjustTransDate = prevMth(_transDate);
                adjustTransDate = endmth(adjustTransDate);
            }
            else
            {
                adjustTransDate = _transDate;
            }
            return AssetTrans::amountMSTPerDate(_assetId, _assetBookId, dateNull(), adjustTransDate);
        }
        else
        {
        // </GCN>
            return AssetTrans::amountMSTPerDate(_assetId, _assetBookId, dateNull(), _transDate);
        // <GCN>
        }
        // </GCN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToDepriciateInReportingCurrency</Name>
				<Source><![CDATA[
    public static AssetAmountReportingCurrency amountToDepriciateInReportingCurrency(
        AssetId     _assetId,
        TransDate   _transDate,
        AssetBookId _assetBookId)
    {
        return AssetTrans::amountReportingCurrencyPerDate(_assetId, _assetBookId, dateNull(), _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!AssetTrans::exist(_recId))
        {
            ret = checkFailed(strFmt(AssetTrans::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether the specified asset transaction can be reversed.
    /// </summary>
    /// <param name="_assetTrans">
    /// The asset transaction record to check for reversal.
    /// </param>
    /// <returns>
    /// true if the transaction type of the passed asset transaction record is a valid type and the
    /// transaction has not been reversed nor settled, or is the original transaction; otherwise false.
    /// </returns>
    public static boolean checkReversal(
        AssetTrans  _assetTrans,
        boolean     _showError = false)
    {
        boolean isValid;

        // <GJP>
        //if asset transaction is for assembling
        if (AssetComponentReversal_JP::isAssetTransRelatedToAssembling(_assetTrans.RecId))
        {
            return true;
        }
        // </GJP>

        isValid = AssetTrans::checkReversalValidForTransType(_assetTrans);

        // <GJP>
        if (AssetDocumentUtility_JP::isAssetDocumentEnabled())
        {
            AssetDocumentTrans_JP assetDocumentTrans = AssetDocumentTrans_JP::findByReference(_assetTrans.TableId, _assetTrans.RecId);

            isValid = AssetTrans::checkReversal_JP(_assetTrans, isValid, assetDocumentTrans);
        }
        // </GJP>

        if (isValid)
        {
            GeneralJournalEntry                 generalJournalEntry;
            GeneralJournalAccountEntry          generalJournalAccountEntry;
            SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
            LedgerEntry                         ledgerEntry;

            while select subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.Voucher == _assetTrans.Voucher
                    && subledgerVoucherGeneralJournalEntry.AccountingDate == _assetTrans.TransDate
                    && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == _assetTrans.DataAreaId
            join generalJournalEntry
                where generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
            join generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            outer join ledgerEntry
                where ledgerEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
            {
                isValid = generalJournalAccountEntry.checkReversal(
                    generalJournalEntry,
                    subledgerVoucherGeneralJournalEntry,
                    ledgerEntry,
                    _showError,
                    false,
                    0,
                    true);

                if (!isValid)
                {
                    break;
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReversalValidForTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether the specified asset transaction can be reversed due to its transaction type.
    /// </summary>
    /// <param name="_assetTrans">
    /// The asset transaction record to check for reversal.
    /// </param>
    /// <returns>
    /// true if the transaction type of the passed asset transaction record is a valid type; otherwise false.
    /// </returns>
    protected static boolean checkReversalValidForTransType(AssetTrans _assetTrans)
    {
        boolean isValid =  (_assetTrans.TransType == AssetTransType::Acquisition ||
                            // <GEEU>
                            _assetTrans.TransType == AssetTransType::PreAcquisition_CZ ||
                            // </GEEU>
                            // <GEEPL>
                            _assetTrans.TransType == AssetTransType::AccumulatedDepreciation_PL ||
                            _assetTrans.TransType == AssetTransType::DepreciationNotCost_PL ||
                            _assetTrans.TransType == AssetTransType::PostOffAccDepreciation_PL ||
                            // </GEEPL>
                            _assetTrans.TransType == AssetTransType::AcquisitionAdj ||
                            _assetTrans.TransType == AssetTransType::BonusDepreciation ||
                            _assetTrans.TransType == AssetTransType::CapitalReserve ||
                            _assetTrans.TransType == AssetTransType::CapitalReserveTransfer ||
                            _assetTrans.TransType == AssetTransType::Depreciation ||
                            _assetTrans.TransType == AssetTransType::DepreciationAdj ||
                            _assetTrans.TransType == AssetTransType::DisposalSale ||
                            _assetTrans.TransType == AssetTransType::DisposalScrap ||
                            _assetTrans.TransType == AssetTransType::ExtraordinaryDepreciation ||
                            _assetTrans.TransType == AssetTransType::Revaluation ||
                            _assetTrans.TransType == AssetTransType::DerogatoryDecrease ||
                            _assetTrans.TransType == AssetTransType::DerogatoryIncrease ||
                            _assetTrans.TransType == AssetTransType::WriteDownAdj ||
                            _assetTrans.TransType == AssetTransType::WriteUpAdj ||
                            _assetTrans.TransType == AssetTransType::AssetTransfer);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReversal_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if specific asset trans can be reversed.
    /// </summary>
    /// <param name="_assetTrans">
    /// The <c>AssetTrans</c> record.
    /// </param>
    /// <param name="_isValid">
    /// The original validation value.
    /// </param>
    /// <param name="_assetDocumentTrans">
    /// The <c>AssetDocumentTrans_JP</c> record; Optional.
    /// </param>
    /// <returns>
    /// True if the transaction is supported; otherwise, false.
    /// </returns>
    public static boolean checkReversal_JP(
        AssetTrans            _assetTrans,
        boolean               _isValid,
        AssetDocumentTrans_JP _assetDocumentTrans  = null)
    {
        boolean                            ret = _isValid;
        AssetDocument_JP                   document;
        AssetImpairmentAssetTransaction_JP impairmentTrans;

        if (_assetDocumentTrans)
        {
            document = AssetDocument_JP::construct(_assetDocumentTrans.AssetDocumentEntry_JP);

            if (document.parmAssetDocumentTable())
            {
                switch (document.getAssetDocumentType())
                {
                    case AssetDocumentType_JP::AssetImpairment:
                        if (_assetTrans.TransType == AssetTransType::WriteDownAdj)
                        {
                            impairmentTrans = AssetImpairmentAssetTransaction_JP::construct(document, _assetDocumentTrans, _assetTrans);
                            ret = impairmentTrans.checkReversal();
                        }
                        break;
                    case AssetDocumentType_JP::AssetRetirementObligation:
                        if (_assetTrans.TransType == AssetTransType::AssetRetirementObligationInterest_JP)
                        {
                            ret = true;
                        }
                        break;
                    case AssetDocumentType_JP::AssetReductionEntry_Reserve:
                    case AssetDocumentType_JP::AssetReductionEntry_DirectOff:
                        if (_assetTrans.TransType == AssetTransType::ReductionEntryReserve_JP
                            || _assetTrans.TransType == AssetTransType::ReductionEntryReserveAllocation_JP
                            || _assetTrans.TransType == AssetTransType::Acquisition
                            || _assetTrans.TransType == AssetTransType::ReductionEntryRepayment_JP
                            || _assetTrans.TransType == AssetTransType::ReductionEntryRepaymentProportional_JP
                            || _assetTrans.TransType == AssetTransType::ReductionEntryRepaymentSubsidy_JP)
                        {
                            ret = true;
                        }
                        break;
                }
            }
        }
        else if (_assetTrans.TransType == AssetTransType::SpecialDepReserve_JP
                || _assetTrans.TransType == AssetTransType::SpecialDepReserveAllocation_JP
                || _assettrans.TransType == AssetTransType::AdditionalDepReserve_JP
                || _assetTrans.TransType == AssetTransType::AdditionalDepReserveAllocation_JP)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                 from
                     assetTrans
                 where
                     assetTrans.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAdjustmentTransPerDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a depreciation, depreciation adjustment, or extraordinary depreciation
    /// transaction exists in the asset transaction table.
    /// </summary>
    /// <param name="_assetId">
    /// The asset ID of the object for which to check for a depreciation transaction.
    /// </param>
    /// <param name="_bookId">
    /// The value model in which to check for a depreciation transaction.
    /// </param>
    /// <param name="_startPeriod">
    /// Start period of transaction.
    /// </param>
    /// <param name="_endPeriod">
    /// End period of transaction.
    /// </param>
    /// <returns>
    /// true if a depreciation, depreciation adjustment, or extraordinary depreciation transaction exists;
    /// otherwise false.
    /// </returns>
    static boolean existAdjustmentTransPerDate(AssetId     _assetId,
                                               AssetBookId _bookId,
                                               TransDate   _startPeriod,
                                               TransDate   _endPeriod)
    {
        boolean ret;
        if (_assetId && _bookId)
        {
            AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(_assetId, _bookId);
            select firstonly RecId from assetTransTmp
                where assetTransTmp.AssetId == _assetId
                    && assetTransTmp.BookId == _bookId
                    && assetTransTmp.TransDate >= _startPeriod
                    && assetTransTmp.TransDate <= _endPeriod
                    && (assetTransTmp.TransType == AssetTransType::WriteDownAdj
                    || assetTransTmp.TransType == AssetTransType::WriteUpAdj
                    || assetTransTmp.TransType == AssetTransType::Revaluation
                    || assetTransTmp.TransType == AssetTransType::ExtraordinaryDepreciation);
            ret = assetTransTmp.RecId != 0;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBookTransactions</Name>
				<Source><![CDATA[
    static boolean existBookTransactions(AssetBookId _bookId)
    {
            return _bookId &&
                     (select firstonly RecId from assetTrans
                        where assetTrans.BookId == _bookId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDepreciationTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a depreciation, depreciation adjustment, extraordinary depreciation,
    ///    bonus depreciation, or derogatory depreciation transaction is in the asset transaction table.
    /// </summary>
    /// <param name="_assetId">
    ///    The asset ID in which to check for a depreciation transaction.
    /// </param>
    /// <param name="_bookId">
    ///    The value model in which to check for a depreciation transaction.
    /// </param>
    /// <param name="_includeBonusDepreciation">
    ///    If true, the search will include Bonus Depreciation transactions, optional.
    /// </param>
    /// <returns>
    ///    true if a depreciation, depreciation adjustment, bonus depreciation, derogatory depreciation,
    ///    or extraordinary depreciation transaction exists;
    ///    otherwise false.
    /// </returns>
    public static boolean existDepreciationTrans(
        AssetId _assetId,
        AssetBookId _bookId,
        boolean _includeBonusDepreciation = false)
    {
        boolean ret;

        if (_assetId && _bookId)
        {
            AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(_assetId, _bookId);
            if (_includeBonusDepreciation)
            {
                select firstonly RecId from assetTransTmp
                    where assetTransTmp.AssetId == _assetId
                        && assetTransTmp.BookId == _bookId
                        && (assetTransTmp.TransType == AssetTransType::Depreciation
                        || assetTransTmp.TransType == AssetTransType::DepreciationAdj
                        || assetTransTmp.TransType == AssetTransType::ExtraordinaryDepreciation
                        || assetTransTmp.TransType == AssetTransType::BonusDepreciation
                        || assetTransTmp.TransType == AssetTransType::DerogatoryIncrease
                        || assetTransTmp.TransType == AssetTransType::DerogatoryDecrease);
            }
            else
            {
                select firstonly RecId from assetTransTmp
                    where assetTransTmp.AssetId == _assetId
                        && assetTransTmp.BookId == _bookId
                        && (assetTransTmp.TransType == AssetTransType::Depreciation
                        || assetTransTmp.TransType == AssetTransType::DepreciationAdj
                        || assetTransTmp.TransType == AssetTransType::ExtraordinaryDepreciation
                        || assetTransTmp.TransType == AssetTransType::DerogatoryIncrease
                        || assetTransTmp.TransType == AssetTransType::DerogatoryDecrease);
            }
            ret = assetTransTmp.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSaleScrapTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a disposal- sale or scrap transaction exists with date more or equal than the given one.
    /// </summary>
    /// <param name="_assetId">The asset ID in which to check for a depreciation transaction.</param>
    /// <param name="_bookId">The value model in which to check for a depreciation transaction.</param>
    /// <param name="_fromTransDate">Start period of transaction.</param>
    /// <returns>True if the transaction exists; otherwise, false.</returns>
    internal static boolean existSaleScrapTrans(AssetId _assetId, AssetBookId _bookId, TransDate _fromTransDate)
    {
        boolean ret;
        if (_assetId && _bookId)
        {
            AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(_assetId, _bookId);
            select firstonly RecId from assetTransTmp
                where assetTransTmp.AssetId == _assetId
                    && assetTransTmp.BookId == _bookId
                    && assetTransTmp.TransDate >= _fromTransDate
                    && (assetTransTmp.TransType == AssetTransType::DisposalSale
                    || assetTransTmp.TransType == AssetTransType::DisposalScrap);
            ret = assetTransTmp.RecId != 0;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTransAfterDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any transactions exists in the asset transaction table after a given date.
    /// </summary>
    /// <param name="_assetId">
    /// The asset ID which to check for a transaction.
    /// </param>
    /// <param name="_bookId">
    /// The value model in which to check for a transaction.
    /// </param>
    /// <param name="_date">
    /// The date that transactions must exist after.
    /// </param>
    /// <returns>
    /// true if a transactions exists after the given date; otherwise false.
    /// </returns>
    static boolean existTransAfterDate(AssetId _assetId,
                                       AssetBookId _bookId,
                                       AssetTransDate _date)
    {
        boolean ret;
        if (_assetId && _bookId)
        {
            AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(_assetId, _bookId);
            select firstonly RecId from assetTransTmp
                where assetTransTmp.AssetId == _assetId &&
                    assetTransTmp.BookId == _bookId &&
                    assetTransTmp.TransDate > _date;
            ret = assetTransTmp.RecId != 0;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static AssetTrans find(
        recId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetTrans assetTrans;

        assetTrans.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            assetTrans
        where
            assetTrans.RecId == _recId;

        return assetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAssetIdBookIdTransType_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get instance of AssetTrans given AssetId, AssetBookId and AssetTransType.
    /// </summary>
    /// <param name="_assetId">
    /// Instance of <c>AssetId</c>.
    /// </param>
    /// <param name="_bookId">
    /// Instance of <c>AssetBookId</c>.
    /// </param>
    /// <param name="_transType">
    /// Instance of <c>AssetTransType</c>.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// The <c>AssetTrans</c> table record.
    /// </returns>
    public static AssetTrans findByAssetIdBookIdTransType_JP(
        AssetId            _assetId,
        AssetBookId        _bookId,
        AssetTransType     _transType,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetTrans assetTrans;

        assetTrans.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly assetTrans
        order by TransDate
        where assetTrans.AssetId == _assetId
            && assetTrans.BookId == _bookId
            && assetTrans.TransType == _transType;

        return assetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and returns the first occurrence from the asset transaction table that matches the supplied
    ///    voucher and transaction date parameter values.
    /// </summary>
    /// <param name="_voucher">
    ///    The voucher number of the asset transaction record.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date of the asset transaction record.
    /// </param>
    /// <returns>
    ///    An <c>AssetTrans</c> table buffer with the found record.
    /// </returns>
    public static AssetTrans findByVoucher(Voucher _voucher, TransDate _transDate)
    {
        AssetTrans assetTrans;
        
        assetTrans.selectLocked(false);

        select firstonly assetTrans
                    index VoucherDateIdx
                    where assetTrans.Voucher   == _voucher &&
                          assetTrans.TransDate == _transDate;

        return assetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstType_W</Name>
				<Source><![CDATA[
    public static AssetTrans findFirstType_W(AssetId         _assetId,
                                             AssetBookId     _assetBookId,
                                             AssetTransType  _assetTransType,
                                             TransDate       _transDate = dateNull(),
                                             boolean         _forUpdate = false)
    {
        AssetTrans      assetTrans;

        if (_assetId && _assetBookId)
        {
            assetTrans.selectForUpdate(_forUpdate);

            select firstonly assetTrans
                order by TransDate asc, CreatedDateTime asc
                where assetTrans.AssetId   == _assetId        &&
                      assetTrans.BookId    == _assetBookId    &&
                      assetTrans.TransType == _assetTransType &&
                      assetTrans.TransDate >= _transDate;
        }
        return assetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastType_W</Name>
				<Source><![CDATA[
    public static AssetTrans findLastType_W(AssetId         _assetId,
                                     AssetBookId     _assetBookId,
                                     AssetTransType  _assetTransType,
                                     TransDate       _transDate = maxDate(),
                                     boolean         _forUpdate = false)
    {
        AssetTrans      assetTrans;

        if (_assetId && _assetBookId)
        {
            assetTrans.selectForUpdate(_forUpdate);

            select firstonly assetTrans
                order by TransDate desc, CreatedDateTime desc
                where assetTrans.AssetId   == _assetId        &&
                      assetTrans.BookId    == _assetBookId    &&
                      assetTrans.TransType == _assetTransType &&
                      assetTrans.TransDate <= _transDate;
        }
        return assetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesScrapValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amounts related to a Polish disposal process.
    /// </summary>
    /// <param name="_assetId">
    /// The ID of the asset.
    /// </param>
    /// <param name="_assetBookId">
    /// The ID of the value model
    /// </param>
    /// <param name="_startDate">
    /// The starting date of the search.
    /// </param>
    /// <param name="_endDate">
    /// The ending date of the search.
    /// </param>
    /// <returns>
    /// A sum of the disposal related transactions for a specified period.
    /// </returns>
    public static Amount getSalesScrapValue(
        AssetId     _assetId,
        AssetBookId _assetBookId,
        TransDate   _startDate,
        TransDate   _endDate)
    {
        Amount  salesScrapPrevPeriod;
        salesScrapPrevPeriod = -(AssetTrans::amountMSTPerDateTransTypes(
            _assetId,
            _assetBookId,
            [AssetTransType::DisposalSale, AssetTransType::DisposalScrap, AssetTransType::ProfitLoss],
            _startDate,
            _endDate));

        return salesScrapPrevPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesScrapValueReportingCurrency</Name>
				<Source><![CDATA[
    internal static Amount getSalesScrapValueReportingCurrency(
        AssetId     _assetId,
        AssetBookId _assetBookId,
        TransDate   _startDate,
        TransDate   _endDate)
    {
        return -(AssetTrans::amountReportingCurrencyPerDateTransTypes(
            _assetId,
            _assetBookId,
            [AssetTransType::DisposalSale, AssetTransType::DisposalScrap, AssetTransType::ProfitLoss],
            _startDate,
            _endDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastDepreciateDate_PL</Name>
				<Source><![CDATA[
    public static TransDate lastDepreciateDate_PL(AssetId _assetId, AssetBookId _bookId)
    {
        TransDate ret;
        if (_assetId && _bookId)
        {
            AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(_assetId, _bookId);
            select maxof(TransDate) from assetTransTmp
                where (assetTransTmp.TransType == AssetTransType::Depreciation
                    || assetTransTmp.TransType == AssetTransType::DepreciationNotCost_PL)
                    && assetTransTmp.AssetId == _assetId
                    && assetTransTmp.BookId == _bookId;
            ret = assetTransTmp.TransDate;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastTransDate_PL</Name>
				<Source><![CDATA[
    public static TransDate lastTransDate_PL(AssetId _assetId, AssetBookId _bookId)
    {
        TransDate ret;
        if (_assetId && _bookId)
        {
            AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(_assetId, _bookId);
            select maxof(TransDate) from assetTransTmp
                where assetTransTmp.AssetId == _assetId
                    && assetTransTmp.BookId == _bookId;
            ret = assetTransTmp.TransDate;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS19286";
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTPerDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of asset transaction amounts for a given date range.
    /// </summary>
    /// <returns>
    /// A sum of the functional currency amounts for the following transaction types; Acquisitions,
    /// Acquisition Adjustments, Capital Reserve Transfers, Revaluations, Write-up Adjustments,
    /// Write-down Adjustments
    /// </returns>
    public static AmountMST amountMSTPerDate(
        AssetId     _assetId,
        AssetBookId _assetBookId,
        TransDate   _fromTransDate,
        TransDate   _toTransDate)
    {
        Query query = AssetTrans::getQueryPerDateRange(
            _assetId,
            _assetBookId,
            _fromTransDate,
            _toTransDate);

        if (isFlightEnabled(FixedAssetsConstants::DisableAssetTransTmpCacheFlight))
        {
            QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(AssetTrans));
            queryBuildDataSource.addSelectionField(fieldNum(AssetTrans, AmountMST), SelectionField::Sum);
        }
        else
        {
            QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(AssetTransTmp));
            queryBuildDataSource.addSelectionField(fieldNum(AssetTransTmp, AmountMST), SelectionField::Sum);
        }

        return AssetTrans::getAssetTransMap(query, _assetId, _assetBookId).AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountReportingCurrencyPerDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of asset transaction reporting currency amounts for a given date range.
    /// </summary>
    /// <returns>
    /// A sum of the reporting currency amounts for the following transaction types; Acquisitions,
    /// Acquisition Adjustments, Capital Reserve Transfers, Revaluations, Write-up Adjustments,
    /// Write-down Adjustments
    /// </returns>
    public static AmountMSTSecondary amountReportingCurrencyPerDate(
        AssetId     _assetId,
        AssetBookId _assetBookId,
        TransDate   _fromTransDate,
        TransDate   _toTransDate)
    {
        Query query = AssetTrans::getQueryPerDateRange(
            _assetId,
            _assetBookId,
            _fromTransDate,
            _toTransDate);

        if (isFlightEnabled(FixedAssetsConstants::DisableAssetTransTmpCacheFlight))
        {
            QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(AssetTrans));
            queryBuildDataSource.addSelectionField(fieldNum(AssetTrans, ReportingCurrencyAmount), SelectionField::Sum);
        }
        else
        {
            QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(AssetTransTmp));
            queryBuildDataSource.addSelectionField(fieldNum(AssetTransTmp, ReportingCurrencyAmount), SelectionField::Sum);
        }

        return AssetTrans::getAssetTransMap(query, _assetId, _assetBookId).ReportingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryPerDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>Query</c> instance to return an <c>AssetTrans</c> record for a given date range.
    /// </summary>
    /// <param name = "_assetId">
    /// The ID of the asset.
    /// </param>
    /// <param name = "_assetBookId">
    /// The ID of the value model.
    /// </param>
    /// <param name = "_fromTransDate">
    /// The starting date for the sum.
    /// </param>
    /// <param name = "_toTransDate">
    /// The ending date for the sum.
    /// </param>
    /// <returns>
    /// A <c>Query</c> instance with datasource for the <c>AssetTrans</c> table.
    /// </returns>
    protected static Query getQueryPerDateRange(
        AssetId _assetId,
        AssetBookId _assetBookId,
        TransDate _fromTransDate,
        TransDate _toTransDate)
    {
        Query query = new Query();

        if (isFlightEnabled(FixedAssetsConstants::DisableAssetTransTmpCacheFlight))
        {
            QueryBuildDataSource qbds = query.addDataSource(tableNum(AssetTrans));

            qbds.addRange(fieldNum(AssetTrans, AssetId)).value(SysQuery::value(_assetId));
            qbds.addRange(fieldNum(AssetTrans, BookId)).value(SysQuery::value(_assetBookId));
            qbds.addRange(fieldNum(AssetTrans, TransDate)).value(
            strFmt('(%1 >= %2) && (%1 <= %3)',
            fieldStr(AssetTrans, TransDate),
            date2StrXpp(_fromTransDate),
            date2StrXpp(_toTransDate)));
            qbds.addRange(fieldNum(AssetTrans, TransType)).value(SysQuery::value(AssetTransType::Acquisition));
            qbds.addRange(fieldNum(AssetTrans, TransType)).value(SysQuery::value(AssetTransType::AcquisitionAdj));
            qbds.addRange(fieldNum(AssetTrans, TransType)).value(SysQuery::value(AssetTransType::CapitalReserveTransfer));
            qbds.addRange(fieldNum(AssetTrans, TransType)).value(SysQuery::value(AssetTransType::Revaluation));
            qbds.addRange(fieldNum(AssetTrans, TransType)).value(SysQuery::value(AssetTransType::WriteDownAdj));
            qbds.addRange(fieldNum(AssetTrans, TransType)).value(SysQuery::value(AssetTransType::WriteUpAdj));
        }
        else
        {
            QueryBuildDataSource qbds = query.addDataSource(tableNum(AssetTransTmp));

            qbds.addRange(fieldNum(AssetTransTmp, AssetId)).value(SysQuery::value(_assetId));
            qbds.addRange(fieldNum(AssetTransTmp, BookId)).value(SysQuery::value(_assetBookId));
            qbds.addRange(fieldNum(AssetTransTmp, TransDate)).value(
                strFmt('(%1 >= %2) && (%1 <= %3)',
                fieldStr(AssetTransTmp, TransDate),
                date2StrXpp(_fromTransDate),
                date2StrXpp(_toTransDate)));
            qbds.addRange(fieldNum(AssetTransTmp, TransType)).value(SysQuery::value(AssetTransType::Acquisition));
            qbds.addRange(fieldNum(AssetTransTmp, TransType)).value(SysQuery::value(AssetTransType::AcquisitionAdj));
            qbds.addRange(fieldNum(AssetTransTmp, TransType)).value(SysQuery::value(AssetTransType::CapitalReserveTransfer));
            qbds.addRange(fieldNum(AssetTransTmp, TransType)).value(SysQuery::value(AssetTransType::Revaluation));
            qbds.addRange(fieldNum(AssetTransTmp, TransType)).value(SysQuery::value(AssetTransType::WriteDownAdj));
            qbds.addRange(fieldNum(AssetTransTmp, TransType)).value(SysQuery::value(AssetTransType::WriteUpAdj));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTPerDateForDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of depreciation related transaction amounts for a given date range.
    /// </summary>
    /// <returns>
    /// A sum of the functional currency amounts for the following transaction types; Depreciation
    /// and Depreciation Adjustments
    /// </returns>
    public static AmountMST amountMSTPerDateForDepreciation(
        AssetId     _assetId,
        AssetBookId _assetBookId,
        TransDate   _fromTransDate,
        TransDate   _toTransDate)
    {
        AmountMST ret;
        if (_assetId && _assetBookId)
        {
            AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(_assetId, _assetBookId);
            select sum(AmountMST) from assetTransTmp
                where assetTransTmp.AssetId == _assetId
                    && assetTransTmp.BookId == _assetBookId
                    && assetTransTmp.TransDate >= _fromTransDate
                    && assetTransTmp.TransDate <= _toTransDate
                    && (assetTransTmp.TransType == AssetTransType::Depreciation
                    || assetTransTmp.TransType == AssetTransType::DepreciationAdj);
            ret = assetTransTmp.AmountMST;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountReportingCurrencyPerDateForDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of depreciation related transaction reporting currency amounts for a given date range.
    /// </summary>
    /// <returns>
    /// A sum of the reporting currency amounts for the following transaction types; Depreciation
    /// and Depreciation Adjustments
    /// </returns>
    public static AmountMSTSecondary amountReportingCurrencyPerDateForDepreciation(
        AssetId     _assetId,
        AssetBookId _assetBookId,
        TransDate   _fromTransDate,
        TransDate   _toTransDate)
    {
        AmountMSTSecondary ret;
        if (_assetId && _assetBookId)
        {
            AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(_assetId, _assetBookId);
            select sum(ReportingCurrencyAmount) from assetTransTmp
                where assetTransTmp.AssetId == _assetId
                    && assetTransTmp.BookId == _assetBookId
                    && assetTransTmp.TransDate >= _fromTransDate
                    && assetTransTmp.TransDate <= _toTransDate
                    && (assetTransTmp.TransType == AssetTransType::Depreciation
                    || assetTransTmp.TransType == AssetTransType::DepreciationAdj);
            ret = assetTransTmp.ReportingCurrencyAmount;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNumberOfAcquisitionTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the number of acquisition types transactions.
    /// </summary>
    /// <param name="_assetId">
    /// The ID of the asset.
    /// </param>
    /// <param name="_bookId">
    /// The ID of the value model
    /// </param>
    /// <returns>
    /// Number of transactions.
    /// </returns>
    public static int64 findNumberOfAcquisitionTransactions(AssetId _assetId, AssetBookId _bookId)
    {
        int64 ret;
        if (_assetId && _bookId)
        {
            AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(_assetId, _bookId);

            Query query = new Query();

            QueryBuildDataSource qbds = query.addDataSource(tableNum(AssetTransTmp));
            qbds.addSelectionField(fieldNum(AssetTransTmp, RecId),SelectionField::Count);

            qbds.addRange(fieldNum(AssetTransTmp, BookId)).value(SysQuery::value(_bookId));
            qbds.addRange(fieldNum(AssetTransTmp, AssetId)).value(SysQuery::value(_assetId));
            qbds.addRange(fieldNum(AssetTransTmp, Txt)).value(SysQuery::valueNot("@SYS67430"));

            qbds.addRange(fieldNum(AssetTransTmp, TransType)).value(SysQuery::value(AssetTransType::Acquisition));
            qbds.addRange(fieldNum(AssetTransTmp, TransType)).value(SysQuery::value(AssetTransType::AcquisitionAdj));
            qbds.addRange(fieldNum(AssetTransTmp, TransType)).value(SysQuery::value(AssetTransType::CapitalReserveTransfer));
            qbds.addRange(fieldNum(AssetTransTmp, TransType)).value(SysQuery::value(AssetTransType::WriteUpAdj));

            QueryRun queryRun = new QueryRun(query);
            queryRun.setCursor(assetTransTmp);
            queryRun.next();

            ret = queryRun.get(tableNum(AssetTransTmp)).recId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountMSTAssetSale_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of SoldAsset amount for given AssetBook.
    /// </summary>
    /// <param name="_assetDepBook">
    /// The AssetDepBookMap_IN buffer.
    /// </param>
    /// <returns>
    /// Retuns sum of SoldAsset amount for given AssetBook.
    /// </returns>
    public static AmountMST getAmountMSTAssetSale_IN(AssetDepBookMap_IN _assetDepBook)
    {
        AmountMST ret;
        if (_assetDepBook.AssetId && _assetDepBook.AssetBookId)
        {
            AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(_assetDepBook.AssetId, _assetDepBook.AssetBookId);
            select sum(AmountMST) from assetTransTmp
                where assetTransTmp.AssetId    == _assetDepBook.AssetId
                    && assetTransTmp.AssetGroup == _assetDepBook.AssetGroup
                    && assetTransTmp.BookId     == _assetDepBook.AssetBookId
                    && (assetTransTmp.TransType == AssetTransType::DisposalSale
                    || assetTransTmp.TransType  == AssetTransType::DisposalScrap);
            ret = assetTransTmp.AmountMST;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSaleAmountForAssetGroup_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of SoldAsset amount for given AssetBook.
    /// </summary>
    /// <param name="_assetDepBook">
    /// The AssetDepBookMap_IN buffer.
    /// </param>
    /// <param name="_periodEnd">
    /// The AssetTransDate.
    /// </param>
    /// <returns>
    /// Retuns sum of SoldAsset amount for given AssetBook.
    /// </returns>
    public static AmountMST getSaleAmountForAssetGroup_IN(AssetDepBookMap_IN _assetDepBook, AssetTransDate  _periodEnd)
    {
        AssetTrans  assetTrans;

        select sum(AmountMST) from assetTrans
            where assetTrans.AssetGroup == _assetDepBook.AssetGroup
                && assetTrans.BookId     == _assetDepBook.AssetBookId
                && assetTrans.TransDate  <= _periodEnd
                && (assetTrans.TransType == AssetTransType::DisposalSale
                || assetTrans.TransType  == AssetTransType::DisposalScrap);

        return assetTrans.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBonusDepForAssetGroup_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of BonusDepreciation amount for given AssetBook.
    /// </summary>
    /// <param name="_assetDepBook">
    /// The AssetDepBookMap_IN buffer.
    /// </param>
    /// <param name="_periodEnd">
    /// The AssetTransDate.
    /// </param>
    /// <returns>
    /// Retuns sum of SoldAsset amount for given AssetBook.
    /// </returns>
    public static AmountMST getBonusDepForAssetGroup_IN(AssetDepBookMap_IN _assetDepBook, AssetTransDate  _periodEnd)
    {
        AssetTrans  assetTrans;
        AssetBook   assetBookLoc;
        AssetAmount bonusDepreciationAmount;

        while select AssetGroup, AssetId, BookId, DepreciationStartDate from assetBookLoc
            where assetBookLoc.AssetGroup == _assetDepBook.AssetGroup
               && assetBookLoc.BookId     == _assetDepBook.AssetBookId
        {
            bonusDepreciationAmount += AssetTrans::amountMSTPerDateTranstype(assetBookLoc.AssetId,_periodEnd,assetBookLoc.BookId,AssetTransType::BonusDepreciation);
        }
        return bonusDepreciationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the asset book that is specified in current transaction.
    /// </summary>
    /// <param name="_forupdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>
    /// Found <c>AssetBook</c> record.
    /// </returns>
    public AssetBook assetBook(boolean _forUpdate = false)
    {
        return AssetBook::find(this.AssetId, this.BookId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetBookTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the value model that is specified in current transaction.
    /// </summary>
    /// <returns>
    /// Found <c>AssetBookTable</c> record.
    /// </returns>
    public AssetBookTable assetBookTable()
    {
        return AssetBookTable::find(this.BookId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a transaction exists between the from and to dates.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_bookId">
    /// The value model id.
    /// </param>
    /// <param name="_fromTransDate">
    /// The from date.
    /// </param>
    /// <param name="_toTransDate">
    /// The to date.
    /// </param>
    /// <returns>
    /// true if transaction exist for the value model that
    /// are between the two dates; otherwise, false.
    /// </returns>
    public static boolean existTransactions(AssetId _assetId,
                                            AssetBookId _bookId,
                                            TransDate _fromTransDate = dateNull(),
                                            TransDate _toTransDate = dateMax())
    {
        return _assetId && _bookId &&
                 (select firstonly RecId from assetTrans
                    where assetTrans.AssetId == _assetId
                        && assetTrans.BookId == _bookId
                        && assetTrans.TransDate >= _fromTransDate
                        && assetTrans.TransDate <= _toTransDate).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastNonReversedTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Finds the last non-reversed transaction for the given transaction type
    /// </summary>
    /// <param name = "_assetId">The asset id</param>
    /// <param name = "_bookId">The value model id</param>
    /// <param name = "_transType">The transaction type</param>
    /// <returns>The asset transaction record</returns>
    public static AssetTrans findLastNonReversedTransaction(AssetId _assetId, AssetBookId _bookId, AssetTransType _transType)
    {
        AssetTrans assetTransLast;
        AssetTrans assetTrans;
        TransactionReversalTrans transactionReversalTrans;

        while select assetTrans
            order by TransDate desc
                where assetTrans.TransType == _transType
                    && assetTrans.AssetId == _assetId
                    && assetTrans.BookId == _bookId
        {
            select firstonly transactionReversalTrans
                where transactionReversalTrans.RefRecId == assetTrans.RecId
                    && transactionReversalTrans.RefTableId == assetTrans.TableId;

            if (!transactionReversalTrans
                || (transactionReversalTrans.Original == true && transactionReversalTrans.Reversed == false))
            {
                assetTransLast = assetTrans;
                break;
            }
        }

        return assetTransLast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);
        switch (_fieldIdToCheck)
        {
            case fieldNum(AssetTrans, InterestAmount):
                ret = this.validateInterestAmount();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstByType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves a first asset transaction by the given type.
    /// </summary>
    /// <param name="_assetId">An asset Id.</param>
    /// <param name="_assetBookId">A value model Id.</param>
    /// <param name="_assetTransType">A transaction type.</param>
    /// <param name="_includeStorno">Includes the storno transactions, if True.</param>
    /// <param name="_transDate">A transaction type; optional.</param>
    /// <param name="_forupdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>
    ///   The first asset transaction.
    /// </returns>
    public static AssetTrans findFirstByType_RU(AssetId          _assetId,
                                                AssetBookId      _assetBookId,
                                                AssetTransType   _assetTransType,
                                                boolean          _includeStorno,
                                                TransDate        _transDate     = dateNull(),
                                                boolean          _forUpdate     = false)
    {
        AssetTrans      assetTrans;
        if (_assetId && _assetBookId)
        {
            assetTrans.selectForUpdate(_forUpdate);
            select firstonly assetTrans
                order by TransDate asc, CreatedDateTime asc
                where assetTrans.AssetId == _assetId
                    && assetTrans.BookId == _assetBookId
                    && assetTrans.TransType == _assetTransType
                    && assetTrans.TransDate >= _transDate;
        }
        return assetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransFirstDate_RU</Name>
				<Source><![CDATA[
    [SysObsolete('This method has been deprecated', false, 16\6\2020)]
    public static AssetTransDate getTransFirstDate_RU(AssetId     _assetId,
                                                      AssetBookId _assetBookId,
                                                      boolean     _includeStorno = true)
    {
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransLastDate_RU</Name>
				<Source><![CDATA[
    [SysObsolete('This method has been deprecated', false, 16\6\2020)]
    public static AssetTransDate getTransLastDate_RU(AssetId     _assetId,
                                                     AssetBookId _assetBookId,
                                                     boolean     _includeStorno = true)
    {
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingDate_RU</Name>
				<Source><![CDATA[
    [SysObsolete('This method has been deprecated', false, 16\6\2020)]
    public TransDate getAccountingDate_RU()
    {
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (this.assetBookTable().CurrentOperationsTax != CurrentOperationsTax::None)
        {
            throw error("@FixedAssets:FA_MessageError_TransactionsWithPostingLayerOtherThanNoneCannotBeDeleted");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubledgerVouchers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all <c>SubledgerVoucherGeneralJournalEntry</c> records linked with current record.
    /// </summary>
    /// <returns><c>RecordLinkList</c> containing all found records.</returns>
    [ERTableName(tableStr(SubledgerVoucherGeneralJournalEntry))]
    public RecordLinkList getSubledgerVouchers()
    {
        RecordLinkList recordList = new RecordLinkList();

        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        while select subledgerVoucherGeneralJournalEntry
            index VoucherIdx
            where subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == this.DataAreaId
                && subledgerVoucherGeneralJournalEntry.AccountingDate == this.TransDate
                && subledgerVoucherGeneralJournalEntry.Voucher == this.Voucher
        {
            recordList.ins(subledgerVoucherGeneralJournalEntry);
        }

        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterestEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if interest is enabled.
    /// </summary>
    /// <returns>
    /// true if interest is enabled; otherwise, false.
    /// </returns>
    public boolean isInterestEnabled()
    {
        return (this.TransType == AssetTransType::Acquisition
            || this.TransType == AssetTransType::AcquisitionAdj)
            && !this.reversed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInterestAmount</Name>
				<Source><![CDATA[
    private boolean validateInterestAmount()
    {
        boolean ret = true;

        if (abs(this.InterestAmount) > abs(this.AmountMST))
        {
            ret = checkFailed(strfmt("@SYS344287", fieldpname(AssetTrans, InterestAmount), fieldpname(AssetTrans, AmountMST)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>latestWriteUpDownAdjDate</Name>
				<Source><![CDATA[
    internal static TransDate latestWriteUpDownAdjDate(AssetId _assetId, AssetBookId _bookId, TransDate _transDate)
    {
        return AssetTrans::getLatestWriteUpDownTransaction(_assetId, _bookId, _transDate).TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestWriteUpDownTransaction</Name>
				<Source><![CDATA[
    private static AssetTransMap getLatestWriteUpDownTransaction(AssetId _assetId, AssetBookId _bookId, TransDate _transDate)
    {
        Query query = AssetTrans::getQueryLatestWriteUpDownTransaction(
            _assetId,
            _bookId,
            _transDate);

        return AssetTrans::getAssetTransMap(query, _assetId, _bookId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryLatestWriteUpDownTransaction</Name>
				<Source><![CDATA[
    private static Query getQueryLatestWriteUpDownTransaction(AssetId _assetId, AssetBookId _bookId, TransDate _transDate)
    {
        Query query = new Query();

        if (isFlightEnabled(FixedAssetsConstants::DisableAssetTransTmpCacheFlight))
        {
            QueryBuildDataSource qbds = query.addDataSource(tableNum(AssetTrans));
            qbds.firstOnly(true);

            qbds.addRange(fieldNum(AssetTrans, AssetId)).value(SysQuery::value(_assetId));
            qbds.addRange(fieldNum(AssetTrans, BookId)).value(SysQuery::value(_bookId));
            qbds.addRange(fieldNum(AssetTrans, TransType)).value(SysQuery::value(AssetTransType::WriteDownAdj));
            qbds.addRange(fieldNum(AssetTrans, TransType)).value(SysQuery::value(AssetTransType::WriteUpAdj));
            qbds.addRange(fieldNum(AssetTrans, TransDate)).value(
                strFmt('(%1 <= %2)',
                    fieldStr(AssetTrans, TransDate),
                    date2StrXpp(_transDate)));

            qbds.addSortField(fieldNum(AssetTrans, TransDate), SortOrder::Descending);
        }
        else
        {
            QueryBuildDataSource qbds = query.addDataSource(tableNum(AssetTransTmp));
            qbds.firstOnly(true);

            qbds.addRange(fieldNum(AssetTransTmp, AssetId)).value(SysQuery::value(_assetId));
            qbds.addRange(fieldNum(AssetTransTmp, BookId)).value(SysQuery::value(_bookId));
            qbds.addRange(fieldNum(AssetTransTmp, TransType)).value(SysQuery::value(AssetTransType::WriteDownAdj));
            qbds.addRange(fieldNum(AssetTransTmp, TransType)).value(SysQuery::value(AssetTransType::WriteUpAdj));
            qbds.addRange(fieldNum(AssetTransTmp, TransDate)).value(
                strFmt('(%1 <= %2)',
                    fieldStr(AssetTrans, TransDate),
                    date2StrXpp(_transDate)));

            qbds.addSortField(fieldNum(AssetTransTmp, TransDate), SortOrder::Descending);
        }

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<DeveloperDocumentation>@FixedAssets:FA_MessageDeveloper_AssetTrans</DeveloperDocumentation>
	<FormRef>AssetTrans</FormRef>
	<Label>@SYS67422</Label>
	<SingularLabel>@SYS14834</SingularLabel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Voucher</TitleField1>
	<TitleField2>AssetId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>TransTypeIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Accounts</Name>
			<Label>@SYS11800</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Approve</Name>
			<Label>@SYS16449</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConsumptionDepreciation</Name>
			<Label>@SYS71157</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConsumptionQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Document_W</Name>
			<Label>@SYS21873</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentDate_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNum_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LowValuePool</Name>
			<Label>@SYS113681</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LowValuePoolType_AU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LVPTransferId_AU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reason</Name>
			<Label>@SYS107174</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReasonRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Revaluation</Name>
			<Label>@SYS71182</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RevaluationTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevaluationAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevaluationDone</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransactionType</Name>
			<Label>@SYS21201</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reclassification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingType_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransferFromReserve</Name>
			<Label>@SYS71210</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReserveTransferDone</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period_RU</Name>
			<Label>@GLS101101</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DepreciationPeriod_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DepreciationBonus_RU</Name>
			<Label>@GLS116827</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DepreciationBonusId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationBonusCost_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LinkedTrans_RU</Name>
			<Label>@GLS111708</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LinkedTransRecId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Storno_RU</Name>
			<Label>@SYS22850</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StornoRecId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Interest</Name>
			<Label>@AccountsReceivable:SubmenuInterest</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterestAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Approver</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmApprover</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetId</ExtendedDataType>
			<GroupPrompt>@SYS13864</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConsumptionQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetConsumption</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CZ,LT,LV,PL,RU</CountryRegionCodes>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentNum_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CZ,LT,LV,PL,RU</CountryRegionCodes>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPriorYear</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LowValuePoolType_AU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetLowValuePoolType_AU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LVPTransferId_AU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetLowValuePoolTransferId_AU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostingType_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RAssetPostingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReasonRefRecID</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reclassification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS75424</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReserveTransferDone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetReserveTransferDone</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReserveTransId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>Asset</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RevaluationAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetRevaluationAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RevaluationDone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetRevaluationDone</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RevaluationTrans</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetRevaluationTrans</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RevaluedTransID</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>Asset</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetTransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalTransTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CashDiscBaseTransId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscBaseAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisposalTransaction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS98113</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DepreciationPeriod_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>AssetTransDate</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYS67451</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationBonusId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>AssetBonusId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DepreciationBonusCost_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetDepreciationBonusCost</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetLedgerDimension_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYS11162</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LinkedTransRecId_RU</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>StornoRecId_RU</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InterestAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>DE,AT</CountryRegionCodes>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS128219</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetAmountReportingCurrency</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsReportingCurrencyAmountUpdated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetTransSubType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetTransactionSubType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FinTag</Name>
			<ExtendedDataType>FinTagRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymReference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymReference</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodFromDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@FixedAssets:PeriodFromDate</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodToDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@FixedAssets:PeriodToDate</Label>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VoucherDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReserveIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>Asset</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReserveTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_DimensionAttributeValueSet_AssetTrans</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ApproverIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Approver</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OriginalForCachDiscTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CashDiscBaseTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OffsetLedgerDimenssion_RUIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Enabled>No</Enabled>
			<Fields>
				<AxTableIndexField>
					<DataField>OffsetLedgerDimension_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AssetTransLinked_RUIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Enabled>No</Enabled>
			<Fields>
				<AxTableIndexField>
					<DataField>LinkedTransRecId_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AssetTransStorno_RUIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Enabled>No</Enabled>
			<Fields>
				<AxTableIndexField>
					<DataField>StornoRecId_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerDimension_RUIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Enabled>No</Enabled>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>AssetDepTransMap_JP</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AmountCur</MapField>
					<MapFieldTo>AmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AmountMST</MapField>
					<MapFieldTo>AmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetBookId</MapField>
					<MapFieldTo>BookId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetId</MapField>
					<MapFieldTo>AssetId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPriorYear</MapField>
					<MapFieldTo>IsPriorYear</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingCurrencyAmount</MapField>
					<MapFieldTo>ReportingCurrencyAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransType</MapField>
					<MapFieldTo>TransType</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>AssetDepTransMap_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AmountCur</MapField>
					<MapFieldTo>AmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AmountMST</MapField>
					<MapFieldTo>AmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetBookId</MapField>
					<MapFieldTo>BookId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetGroup</MapField>
					<MapFieldTo>AssetGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetId</MapField>
					<MapFieldTo>AssetId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPriorYear</MapField>
					<MapFieldTo>IsPriorYear</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransType</MapField>
					<MapFieldTo>TransType</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Approver_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Approver_AssetTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Approver</Name>
					<Field>Approver</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetBook</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@FixedAssets:FA_EntityField_Book</EntityRelationshipRole>
			<RelatedTable>AssetBook</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetBook</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>AssetTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<SourceEDT>AssetBookId</SourceEDT>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BookIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetGroup</Name>
					<SourceEDT>AssetGroupId</SourceEDT>
					<Field>AssetGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>AssetPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable_LVPTransferId_AU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetTable_LVPTransferId_AU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LVPTransferId_AU</Name>
					<SourceEDT>AssetLowValuePoolTransferId_AU</SourceEDT>
					<Field>LVPTransferId_AU</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReasonRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125970</EntityRelationshipRole>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReasonRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonRefRecId</Name>
					<SourceEDT>ReasonRefRecID</SourceEDT>
					<Field>ReasonRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReserveTransId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127395</EntityRelationshipRole>
			<RelatedTable>AssetTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReserveTransId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReserveTransId</Name>
					<Field>ReserveTransId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RevaluedTransId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS127396</EntityRelationshipRole>
			<RelatedTable>AssetTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RevaluedTransId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RevaluedTransID</Name>
					<Field>RevaluedTransID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OriginalForCashDiscTransId</Name>
			<RelatedTable>AssetTrans</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscBaseTransId</Name>
					<Field>CashDiscBaseTransId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension_RU</Name>
					<Field>LedgerDimension_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OffsetLedgerDimension_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OffsetLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetLedgerDimension_RU</Name>
					<Field>OffsetLedgerDimension_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTransLinked_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetTransLinked_RU</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>AssetTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinkedTransRecId_RU</Name>
					<Field>LinkedTransRecId_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTransStorno_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetTransStorno</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>AssetTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StornoRecId_RU</Name>
					<Field>StornoRecId_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FinTag</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FinTag</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RecId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FinTag</Name>
					<Field>FinTag</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>