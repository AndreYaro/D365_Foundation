<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreationRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkCreationRule extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WHSWorkCreationRule, WorkTransType):
                if (!this.validateWorkOrderType())
                {
                    ret = checkFailed(strFmt("@WAX:ErrorMessageWorkOrderTypeNotSupported", this.WorkTransType));
                }
                break;

            case fieldNum(WHSWorkCreationRule, WorkProcess):
                if (!this.validateWorkProcess())
                {
                    ret = checkFailed(strFmt("@WAX:ErrorMessageWorkCreationTypeNotSupported", this.WorkProcess));
                }
                break;
            case fieldNum(WHSWorkCreationRule, WorkCreationMethod):
                ret = this.validateWorkCreationMethod();
                
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkOrderType</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean validateWorkOrderType()
    {
        switch (this.WorkTransType)
        {
            case WHSWorkTransType::ProdPick,
                 WHSWorkTransType::ProdPut,
                 WHSWorkTransType::ProdProcessPut,
                 WHSWorkTransType::TransferReceipt,
                 WHSWorkTransType::Purch:
                     return true;                 
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkCreationMethod</Name>
				<Source><![CDATA[
    private boolean validateWorkCreationMethod()
    {
        if (this.WorkCreationMethod == WHSWorkCreationMethod::CrossDock)
        {
            if (this.WorkTransType     != WHSWorkTransType::ProdPut
                && this.WorkTransType  != WHSWorkTransType::ProdProcessPut)
            {
                return checkFailed("@WAX:CrossDockWorkPolicyIncorrectWorkType");
            }

            WHSWorkPolicyLocation locPolicy = WHSWorkPolicyLocation::findNonLPLocationPolicy(this.WorkPolicy);
            if (locPolicy)
            {
                return checkFailed(strFmt("@WAX:WorkCreationMethodInvalidForNonLP", locPolicy.WMSLocationId, locPolicy.InventLocationId, this.WorkCreationMethod));
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkProcess</Name>
				<Source><![CDATA[
    private boolean validateWorkProcess()
    {
        Set validCreationProcesses = WHSWorkCreationRule::getValidCreationProcessesForWorkTransType(this.WorkTransType);

        if(validCreationProcesses.in(this.WorkProcess))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultWorkProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is a single work process enabled and retreives the default process for a work order type.
    /// </summary>
    /// <param name = "_workTransType">A work order type.</param>
    /// <returns>A container with a boolean specifying if a single work process is enabled, and the default work process.</returns>
    [Hookable(false)]
    internal static container getDefaultWorkProcess(WHSWorkTransType _workTransType)
    {
        Set validCreationProcesses = WHSWorkCreationRule::getValidCreationProcessesForWorkTransType(_workTransType);
        boolean isSingleProcessEnabled = (validCreationProcesses.elements() == 1);

        Enumerator enumerator = validCreationProcesses.getEnumerator();
        enumerator.moveNext();
        WhsWorkProcess defaultProcess = enumerator.current();

        return [isSingleProcessEnabled, defaultProcess];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidCreationProcessesForWorkTransType</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static Set getValidCreationProcessesForWorkTransType(WHSWorkTransType _workTransType)
    {
        Set creationProcesses = new Set(Types::Enum);

        switch (_workTransType)
        {
            case WHSWorkTransType::Purch:
                creationProcesses.add(WhsWorkProcess::PurchaseItemReceiving);
                creationProcesses.add(WhsWorkProcess::PurchaseLineReceiving);
                creationProcesses.add(WhsWorkProcess::LoadItemReceiving);
                creationProcesses.add(WhsWorkProcess::LicensePlateReceiving);
                break;

            case WHSWorkTransType::TransferReceipt:
                creationProcesses.add(WhsWorkProcess::LicensePlateReceiving);
                break;
                
            default:
                creationProcesses.add(WhsWorkProcess::All);
                break;
        }
        return creationProcesses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForCreationProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWorkCreationRule</c> record for given work policy, work order type, and work process.
    /// </summary>
    /// <param name="_workPolicyRecId">
    /// RecId of the work policy.
    /// </param>
    /// <param name="_workTransType">
    /// Work order type for the creation rule.
    /// </param>
    /// <param name="_workProcess">
    /// Work process type for the creation rule.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    [Hookable(false)]
    public final static WHSWorkCreationRule findForCreationProcess(
        WHSWorkPolicyRecId        _workPolicyRecId,
        WHSWorkTransType          _workTransType,
        WhsWorkProcess            _workProcess,
        boolean                   _forUpdate = false)
    {
        WHSWorkCreationRule    workCreationRule;

        if (_workPolicyRecId && _workTransType)
        {
            workCreationRule.selectForUpdate(_forUpdate);

            select firstonly workCreationRule
                where workCreationRule.WorkPolicy       == _workPolicyRecId
                   && workCreationRule.WorkTransType    == _workTransType
                   && (workCreationRule.WorkProcess     == _workProcess);
        }

        return workCreationRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForWorkProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>WHSWorkCreationRule</c> record exists for a given work policy, work order type, work creation method, and work process.
    /// </summary>
    /// <param name="_workPolicyRecId">
    /// RecId of the work policy.
    /// </param>
    /// <param name="_workTransType">
    /// Work order type for the creation rule.
    /// </param>
    /// <param name="_workCreationMethod">
    /// Work creation method for the creation rule.
    /// </param>
    /// <param name="_workProcess">
    /// Work process type for the creation rule.
    /// </param>
    /// <returns>
    /// Boolean that indicates whether the record exists or not.
    /// </returns>
    [Hookable(false)]
    public final static boolean existForWorkProcess(
        WHSWorkPolicyRecId      _workPolicyRecId,
        WHSWorkTransType        _workTransType,
        WHSWorkCreationMethod   _workCreationMethod,
        WhsWorkProcess          _workProcess)
    {
        return _workPolicyRecId
                && _workTransType
                && (select firstonly RecId from WHSWorkCreationRule
                        where WHSWorkCreationRule.WorkPolicy            == _workPolicyRecId
                           && WHSWorkCreationRule.WorkTransType         == _workTransType
                           && WHSWorkCreationRule.WorkCreationMethod    == _workCreationMethod
                           && WHSWorkCreationRule.WorkProcess           == _workProcess
                   ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMandatoryRulesForNonLpLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add mandatory rules if non-lp location is added.
    /// </summary>
    /// <param name="_workPolicyRecId">
    /// RecId of the work policy.
    /// </param>
    /// <param name="_workCreationMethod">
    /// Work creation method for the creation rule.
    /// </param>
    [SysObsolete('The license plate receiving enhancements feature replaces the use of this method', false, 31\10\2023)]
    public static void addMandatoryRulesForNonLpLocation(
        WHSWorkPolicyRecId      _workPolicyRecId,
        WHSWorkCreationMethod   _workCreationMethod)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRuleForWorkOrderType</Name>
				<Source><![CDATA[
    private static void addRuleForWorkOrderType(
        WHSWorkPolicyRecId      _workPolicyRecId,
        WHSWorkTransType        _workTransType,
        WHSWorkCreationMethod   _workCreationMethod)
    {
        if (_workPolicyRecId
            && !WHSWorkCreationRule::existForWorkProcess(_workPolicyRecId, _workTransType, _workCreationMethod, WhsWorkProcess::All))
        {
            WHSWorkCreationRule workCreationRule;
            workCreationRule.WorkPolicy         = _workPolicyRecId;
            workCreationRule.WorkTransType      = _workTransType;
            workCreationRule.WorkCreationMethod = _workCreationMethod;
            workCreationRule.WorkProcess        = WhsWorkProcess::All;
            workCreationRule.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        WHSWorkCreationRule workCreationRule = this.orig();
        boolean workTransTypeChanged = this.WorkTransType != workCreationRule.WorkTransType;

        if (workTransTypeChanged
            && !this.validateNoNonLpLocationsExistWhenRemovingPutWorkType())
        {
            this.WorkTransType = this.orig().WorkTransType;
        }
        else
        {
            if (this.CrossDockOpportunityPolicyName
            &&  this.WorkCreationMethod != WHSWorkCreationMethod::CrossDock)
            {
                this.CrossDockOpportunityPolicyName = '';
            }

            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        ret = ret && this.validateNoNonLpLocationsExistWhenRemovingPutWorkType();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTransTypeIsMandatoryForNonLPLocations</Name>
				<Source><![CDATA[
    private boolean workTransTypeIsMandatoryForNonLPLocations(WHSWorkTransType _workTransType)
    {
        switch (_workTransType)
        {
            case WHSWorkTransType::ProdPut,
                 WHSWorkTransType::ProdProcessPut:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoNonLpLocationsExistWhenRemovingPutWorkType</Name>
				<Source><![CDATA[
    private boolean validateNoNonLpLocationsExistWhenRemovingPutWorkType()
    {
        WHSWorkCreationRule workCreationRule = this.orig();
        if (this.workTransTypeIsMandatoryForNonLPLocations(workCreationRule.WorkTransType)
            && WHSWorkPolicyLocation::checkNonLpLocationsExist(workCreationRule.WorkPolicy))
        {
            return checkFailed(strFmt("@WAX:ErrorWhenDeletingWorkCreationRule", workCreationRule.WorkTransType));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret &&  !this.validateWorkCreationMethod())
        {
            ret = checkFailed("@WAX:CrossDockWorkPolicyIncorrectWorkType");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<Label>@WAX:WorkCreationRule</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>WorkPolicy</TitleField1>
	<TitleField2>WorkTransType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>Inventory</Modules>
	<ReplacementKey>WHSWorkPolicyIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCreationMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkPolicy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkProcess</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkPolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkPolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkPolicyRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSWorkTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkCreationMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSWorkCreationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CrossDockOpportunityPolicyName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCrossDockOpportunityPolicyName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkProcess</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSWorkProcess</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WHSWorkPolicyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkPolicy</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkTransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkProcess</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkPolicy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkPolicy</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkPolicy</Name>
					<Field>WorkPolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CrossDockOpportunityPolicy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSCrossDockOpportunityPolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CrossDockOpportunityPolicyName</Name>
					<Field>CrossDockOpportunityPolicyName</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>