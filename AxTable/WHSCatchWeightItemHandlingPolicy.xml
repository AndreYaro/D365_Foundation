<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCatchWeightItemHandlingPolicy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSCatchWeightItemHandlingPolicy extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>WHSCatchWeightItemHandlingPolicy</c> table.
    /// </summary>
    /// <param name = "_policyName">
    /// The policy name of the <c>WHSCatchWeightItemHandlingPolicy</c> record to find.
    /// </param>
    /// <param name = "_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// An <c>WHSCatchWeightItemHandlingPolicy</c> record.
    /// </returns>
    static public WHSCatchWeightItemHandlingPolicy find(
        WHSCatchWeightItemHandlingPolicyName    _policyName,
        boolean                                 _forUpdate = false)
    {
        WHSCatchWeightItemHandlingPolicy  catchWeightItemHandlingPolicy;

        catchWeightItemHandlingPolicy.selectForUpdate(_forUpdate);

        if (_policyName)
        {
            select firstonly catchWeightItemHandlingPolicy
                where catchWeightItemHandlingPolicy.PolicyName == _policyName;
        }

        return catchWeightItemHandlingPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInboundCatchWeightTagCapturingMethodApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inbound catch weight tag capturing method is applicable
    /// </summary>
    /// <returns>
    /// true, if the inbound catch weight tag capturing method is applicable; otherwise false
    /// </returns>
    [Hookable(false)]
    public boolean isInboundCatchWeightTagCapturingMethodApplicable()
    {
        return this.CatchWeightTagTracking == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOutboundCatchWeightTagCapturingMethodApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the outbound catch weight tag capturing method is applicable
    /// </summary>
    /// <returns>
    /// true, if the outbound catch weight tag capturing method is applicable; otherwise false
    /// </returns>
    [Hookable(false)]
    public boolean isOutboundCatchWeightTagCapturingMethodApplicable()
    {
        return this.CatchWeightTagTracking == NoYes::Yes
            && this.CatchWeightTagDimensionTrackingMethod == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInboundWeightCapturingMethodApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inbound weight capturing method is applicable
    /// </summary>
    /// <returns>
    /// true, if the inbound weight capturing method is applicable; otherwise false
    /// </returns>
    [Hookable(false)]
    public boolean isInboundWeightCapturingMethodApplicable()
    {
        return this.CatchWeightTagTracking == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldValuesToEnsureConsistencyWithoutCatchWeightTagTracking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set values to ensure settings are correct for catch weight item handling policies without tag tracking
    /// </summary>
    protected void setFieldValuesToEnsureConsistencyWithoutCatchWeightTagTracking()
    {
        this.InboundCatchWeightTagCapturingMethod = WHSInboundCatchWeightTagCapturingMethod::NotApplicable;
        this.OutboundCatchWeightTagCapturingMethod = WHSOutboundCatchWeightTagCapturingMethod::AlwaysPrompt;
        this.CatchWeightTagDimensionTrackingMethod = WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndInventoryStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldValuesToEnsureConsistencyWithCatchWeightTagTracking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set values to ensure settings are correct for catch weight item handling policies with tag tracking
    /// </summary>
    protected void setFieldValuesToEnsureConsistencyWithCatchWeightTagTracking()
    {
        this.InboundWeightCapturingMethod           = WHSInboundWeightCapturingMethod::NotApplicable;
        this.ProductionPickingWeightCapturingMethod = WHSProductionPickingWeightCapturingMethod::NotCaptured;
        this.CountingWeightCapturingMethod          = WHSCountingWeightCapturingMethod::NotCaptured;
        this.OutboundWeightVarianceMethod           = WHSOutboundWeightVarianceMethod::Allow;
        this.MovementWeightCapturingMethod          = WHSMovementWeightCapturingMethod::NotCaptured;
        this.CycleCountWeightCapturingMethod        = WHSCycleCountWeightCapturingMethod::PerCountingQty;
        this.WarehouseTransferWeightCapturingMethod = WHSWarehouseTransferWeightCapturingMethod::PerPickingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndSetFieldValuesToEnsureConsistency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check values to ensure settings are correct for catch weight item handling policies based on tag tracking
    /// </summary>
    [Hookable(false)]
    private void checkAndSetFieldValuesToEnsureConsistency()
    {
        if (this.isInboundCatchWeightTagCapturingMethodApplicable())
        {
            this.setFieldValuesToEnsureConsistencyWithCatchWeightTagTracking();
        }
        else
        if (this.isInboundWeightCapturingMethodApplicable())
        {
            this.setFieldValuesToEnsureConsistencyWithoutCatchWeightTagTracking();
        }

        if (!this.isOutboundWeightVarianceMethodApplicable())
        {
            this.OutboundWeightVarianceMethod = WHSOutboundWeightVarianceMethod::Allow;
        }

        if (!this.isOutboundCatchWeightTagCapturingMethodApplicable())
        {
            this.OutboundCatchWeightTagCapturingMethod = WHSOutboundCatchWeightTagCapturingMethod::AlwaysPrompt;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.checkAndSetFieldValuesToEnsureConsistency();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.checkAndSetFieldValuesToEnsureConsistency();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductionPickingWeightCapturingMethodApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the production picking weight capturing method is applicable
    /// </summary>
    /// <returns>
    /// true, if the production picking weight capturing method is applicable; otherwise false
    /// </returns>
    [Hookable(false)]
    public boolean isProductionPickingWeightCapturingMethodApplicable()
    {
        return this.CatchWeightTagTracking == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCountingWeightCapturingMethodApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the counting weight capturing method is applicable.
    /// </summary>
    /// <returns>
    /// true if the counting weight capturing method is applicable; otherwise false
    /// </returns>
    [Hookable(false)]
    public boolean isCountingWeightCapturingMethodApplicable()
    {
        return this.CatchWeightTagTracking == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOutboundWeightCapturingMethodApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the outbound weight capturing method is applicable.
    /// </summary>
    /// <returns>
    /// true if the outbound weight capturing method is applicable; otherwise false
    /// </returns>
    [Hookable(false)]
    public boolean isOutboundWeightCapturingMethodApplicable()
    {
        return this.CatchWeightTagTracking == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOutboundWeightVarianceMethodApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the outbound weight variance method is applicable.
    /// </summary>
    /// <returns>
    /// true if the outbound weight variance method is applicable; otherwise false
    /// </returns>
    [Hookable(false)]
    internal boolean isOutboundWeightVarianceMethodApplicable()
    {
        return this.CatchWeightTagTracking == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMovementWeightCapturingMethodApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the movement weight capturing method is applicable.
    /// </summary>
    /// <returns>
    /// true if the movement weight capturing method is applicable; otherwise false
    /// </returns>
    [Hookable(false)]
    internal boolean isMovementWeightCapturingMethodApplicable()
    {
        return this.CatchWeightTagTracking == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatchWeightTagDimensionTrackingMethodApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the catch weight tag dimension tracking method is applicable.
    /// </summary>
    /// <returns>
    /// true if the catch weight tag dimension tracking method is applicable; otherwise false
    /// </returns>
    [Hookable(false)]
    internal boolean isCatchWeightTagDimensionTrackingMethodApplicable()
    {
        return this.CatchWeightTagTracking == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWarehouseTransferWeightCapturingMethodApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the warehouse transfer capturing method is applicable.
    /// </summary>
    /// <returns>
    /// true if the warehouse transfer capturing method is applicable; otherwise false
    /// </returns>
    [Hookable(false)]
    internal boolean isWarehouseTransferWeightCapturingMethodApplicable()
    {
        return this.CatchWeightTagTracking == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCycleCountWeightCapturingMethodApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the cycle count weight capturing method is applicable.
    /// </summary>
    /// <returns>
    /// true if the movement cycle count capturing method is applicable; otherwise false
    /// </returns>
    [Hookable(false)]
    internal boolean isCycleCountWeightCapturingMethodApplicable()
    {
        return this.CatchWeightTagTracking == NoYes::No
            && this.CountingWeightCapturingMethod != WHSCountingWeightCapturingMethod::NotCaptured;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.CatchWeightTagTracking == NoYes::Yes)
        {
            if (this.InboundCatchWeightTagCapturingMethod == WHSInboundCatchWeightTagCapturingMethod::NotApplicable)
            {
                ret = ret && checkFailed("@WAX:AnInboundCatchWeightTagCapturingMethodMustBeSpecified");
            }
        }            
        else
        {
            if (this.InboundWeightCapturingMethod == WHSInboundWeightCapturingMethod::NotApplicable)
            {
                ret = ret && checkFailed("@WAX:AnInboundCatchWeightCapturingMethodMustBeSpecified");
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.CatchWeightTagTracking                 = NoYes::No;
        this.SalesOrderWeightCapturingProcess       = WHSSalesOrderWeightCapturingProcess::Picking;
        this.TransferIssueWeightCapturingProcess    = WHSTransferIssueWeightCapturingProcess::Picking;
        this.OutboundWeightCapturingMethod          = WHSOutboundWeightCapturingMethod::PerCatchWeightUnit;
        this.ProductionPickingWeightCapturingMethod = WHSProductionPickingWeightCapturingMethod::NotCaptured;
        this.InboundCatchWeightTagCapturingMethod   = WHSInboundCatchWeightTagCapturingMethod::NotApplicable;
        this.OutboundCatchWeightTagCapturingMethod  = WHSOutboundCatchWeightTagCapturingMethod::AlwaysPrompt;
        this.InboundWeightCapturingMethod           = WHSInboundWeightCapturingMethod::PerReceivingEvent;
        this.CountingWeightCapturingMethod          = WHSCountingWeightCapturingMethod::NotCaptured;
        this.OutboundWeightVarianceMethod           = WHSOutboundWeightVarianceMethod::Allow;
        this.MovementWeightCapturingMethod          = WHSMovementWeightCapturingMethod::NotCaptured;
        this.CatchWeightTagDimensionTrackingMethod  = WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndInventoryStatus;
        this.CycleCountWeightCapturingMethod        = WHSCycleCountWeightCapturingMethod::PerCountingQty;
        this.WarehouseTransferWeightCapturingMethod = WHSWarehouseTransferWeightCapturingMethod::PerPickingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            if (this.RecId
                && this.(_fieldIdToCheck) != this.orig().(_fieldIdToCheck)
                && this.hasOpenInventoryQuantity())
            {
                if (this.CatchWeightTagTracking && _fieldIdToCheck == fieldNum(WHSCatchWeightItemHandlingPolicy, CatchWeightTagTracking))
                {
                    warning("@WAX:ChangeTagEnableCWPolicyWarning");
                }

                WHSCatchWeightTelemetryLogger::logPolicyFieldChangedWithOpenInventory(funcName(), _fieldIdToCheck, this.RecId);
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenInventoryQuantity</Name>
				<Source><![CDATA[
    private boolean hasOpenInventoryQuantity()
    {
        boolean ret = false;

        if (this.RecId)
        {
            WHSInventTable  whsInventTable;
            InventSum       inventSum;

            select firstonly RecId from inventSum
                where InventSum.ClosedQty == NoYes::No
                exists join whsInventTable
                    where whsInventTable.ItemId == inventSum.ItemId
                        && whsInventTable.CatchWeightItemHandlingPolicyName == this.PolicyName;
                        
            if (inventSum.RecId)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WHSCatchWeightItemHandlingPolicyDevDoc</DeveloperDocumentation>
	<FormRef>WHSCatchWeightItemHandlingPolicy</FormRef>
	<Label>@WAX:WHSCatchWeightItemHandlingPolicy</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Group</TableGroup>
	<TitleField1>PolicyName</TitleField1>
	<TitleField2>PolicyDescription</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>PolicyNameIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<ReplacementKey>PolicyNameIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PolicyName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PolicyName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PolicyDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CapturingProcess</Name>
			<Label>@WAX:WHSWeightCapturingProcess</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesOrderWeightCapturingProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferIssueWeightCapturingProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountingWeightCapturingMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CapturingMethod</Name>
			<Label>@WAX:WHSWeightCapturingMethod</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CatchWeightTagTracking</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatchWeightTagDimensionTrackingMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InboundCatchWeightTagCapturingMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutboundCatchWeightTagCapturingMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InboundWeightCapturingMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutboundWeightCapturingMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductionPickingWeightCapturingMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutboundWeightVarianceMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MovementWeightCapturingMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CycleCountWeightCapturingMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarehouseTransferWeightCapturingMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PolicyName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCatchWeightItemHandlingPolicyName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PolicyDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InboundCatchWeightTagCapturingMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSInboundCatchWeightTagCapturingMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InboundWeightCapturingMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSInboundWeightCapturingMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CatchWeightTagTracking</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCatchWeightTagTracking</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OutboundWeightCapturingMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSOutboundWeightCapturingMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProductionPickingWeightCapturingMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSProductionPickingWeightCapturingMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesOrderWeightCapturingProcess</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSSalesOrderWeightCapturingProcess</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransferIssueWeightCapturingProcess</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSTransferIssueWeightCapturingProcess</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CountingWeightCapturingMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSCountingWeightCapturingMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OutboundWeightVarianceMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSOutboundWeightVarianceMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MovementWeightCapturingMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSMovementWeightCapturingMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CatchWeightTagDimensionTrackingMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSCatchWeightTagDimensionTrackingMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CycleCountWeightCapturingMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSCycleCountWeightCapturingMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WarehouseTransferWeightCapturingMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSWarehouseTransferWeightCapturingMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OutboundCatchWeightTagCapturingMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSOutboundCatchWeightTagCapturingMethod</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PolicyNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PolicyName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>