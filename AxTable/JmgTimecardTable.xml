<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTimecardTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgTimecardTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dateCalculated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the profile date that the <c>JmgTimecardTable</c> record refers to has been
    /// calculated.
    /// </summary>
    /// <returns>
    /// A <c>NoYes::Yes</c> enumeration value if the profile date has been calculated; otherwise a
    /// <c>NoYes::No</c> enumeration value.
    /// </returns>
    public display JmgCalculated dateCalculated()
    {
        JmgStampJournalTable jmgStampJournalTable;
        jmgStampJournalTable = JmgStampJournalTable::find(this.Worker, this.ProfileDate);
        if (jmgStampJournalTable && jmgStampJournalTable.Calculated == NoYes::Yes)
        {
            return NoYes::Yes;
        }
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateLocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the profile date that the <c>JmgTimecardTable</c> record refers to has been
    /// locked.
    /// </summary>
    /// <returns>
    /// A <c>NoYes::Yes</c> enumeration value if the profile date has been locked; otherwise a
    /// <c>NoYes::No</c> enumeration value.
    /// </returns>
    public display Locked dateLocked()
    {
        JmgStampJournalTable jmgStampJournalTable;
        jmgStampJournalTable = JmgStampJournalTable::find(this.Worker, this.ProfileDate);
        if (jmgStampJournalTable && jmgStampJournalTable.Locked == NoYes::Yes)
        {
            return NoYes::Yes;
        }
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>JmgTimecardTable</c> record from the database.
    /// </summary>
    public void delete()
    {
        super();
        this.synchronizeLock(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsEventCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the worker has made a switch code registration on the profile date that is
    /// referred to by the <c>JmgTimecardTable</c> record.
    /// </summary>
    /// <returns>
    /// A <c>NoYes::Yes</c> enumeration value if the worker has made a switch code registration; otherwise,
    /// a <c>NoYes::Yes</c> enumeration value.
    /// </returns>
    public display JmgLabelEventCode existsEventCode()
    {
        return (((select firstonly RecId from jmgEventCtrl
                        where jmgEventCtrl.Worker               == this.Worker     &&
                              jmgEventCtrl.ProfileDate          == this.ProfileDate).RecId)
                ? NoYes::Yes : NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkerProfileDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>JmgTimecardTable</c> record based on a worker and a profile date.
    /// </summary>
    /// <param name="_worker">
    /// The ID of the worker to which the <c>JmgTimecardTable</c> record must refer.
    /// </param>
    /// <param name="_profileDate">
    /// The profile date to which the <c>JmgTimecardTable</c> record must refer.
    /// </param>
    public void initWorkerProfileDate(JmgWorkerRecId _worker, JmgProfileDate _profileDate)
    {
        if (_worker && _profileDate)
        {
            this.Worker                     = _worker;
            this.ProfileDate                = _profileDate;
            this.ProfileId                  = JmgEmployee::find(this.Worker).profileId(_profileDate);
            this.RegistrationsTransferred   = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>JmgTimecardTable</c> record into the database.
    /// </summary>
    public void insert()
    {
        super();
        this.synchronizeLock();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Locks the profile date that is referred to by the <c>JmgTimecardTable</c> table for editing.
    /// </summary>
    public void lock()
    {
        JmgStampJournalTable jmgStampJournalTable;

        ttsbegin;
        jmgStampJournalTable = JmgStampJournalTable::find(this.Worker, this.ProfileDate, true);
        if (!jmgStampJournalTable)
        {
            jmgStampJournalTable = JmgStampJournalTable::makeLineEmployee(JmgEmployee::find(this.Worker), this.ProfileDate);
            jmgStampJournalTable.insert();
        }
        jmgStampJournalTable.Locked = NoYes::Yes;
        jmgStampJournalTable.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeLock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the <c>Lock</c> field on the <c>JmgStampJournalTable</c> record, which this
    /// <c>JmgTimecardTable</c> record refers to.
    /// </summary>
    /// <param name="_forceUnlock">
    /// true if the lock must be released; otherwise, false.
    /// </param>
    private void synchronizeLock(boolean _forceUnlock = false)
    {
        JmgStampJournalTable jmgStampJournalTable;
        ttsbegin;
        jmgStampJournalTable = JmgStampJournalTable::find(this.Worker, this.ProfileDate, true);

        if (!jmgStampJournalTable)
        {
            jmgStampJournalTable = JmgStampJournalTable::makeLineEmployee(JmgEmployee::find(this.Worker), this.ProfileDate);
            if (!jmgStampJournalTable)
            {
                jmgStampJournalTable.insert();
            }
        }
        if (this.RegistrationsTransferred == NoYes::Yes || _forceUnlock)
        {
            jmgStampJournalTable.Locked = NoYes::No;
        }
        jmgStampJournalTable.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unlocks the profile date that is referred to by the <c>JmgTimecardTable</c> for editing.
    /// </summary>
    public void unlock()
    {
        JmgStampJournalTable jmgStampJournalTable;
        ttsbegin;
        jmgStampJournalTable = JmgStampJournalTable::find(this.Worker, this.ProfileDate, true);
        if (jmgStampJournalTable)
        {
            jmgStampJournalTable.Locked = NoYes::No;
            jmgStampJournalTable.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>JmgTimecardTable</c> record in the database.
    /// </summary>
    public void update()
    {
        super();
        this.synchronizeLock();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>JmgTimecardTable</c> record for the specified worker and profile date.
    /// </summary>
    /// <param name="_worker">
    /// The ID of the worker for which to retrieve a <c>JmgTimecardTable</c> record.
    /// </param>
    /// <param name="_profileDate">
    /// The profile date for which to retrieve a <c>JmgTimecardTable</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// true if the returned record must be selected for update; otherwise, false.
    /// </param>
    /// <returns>
    /// A <c>JmgTimecardTable</c> record for the specified worker and profile date.
    /// </returns>
    public static JmgTimecardTable find(JmgWorkerRecId _worker, JmgProfileDate _profileDate, boolean _forUpdate = false)
    {
        JmgTimecardTable jmgTimecardTable;
        jmgTimecardTable.selectForUpdate(_forUpdate);

        if (_worker && _profileDate)
        {
            select firstonly jmgTimecardTable
                where jmgTimecardTable.Worker       == _worker      &&
                      jmgTimecardTable.ProfileDate  == _profileDate;
        }
        return jmgTimecardTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>JmgRegistrationEmployees</ConfigurationKey>
	<DeveloperDocumentation>@SYS317316</DeveloperDocumentation>
	<FormRef>JmgTimeCard</FormRef>
	<Label>@SYS39126</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>Worker</TitleField1>
	<TitleField2>ProfileDate</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>EmplIdProfileDateIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>EmplIdProfileDateIdx</PrimaryIndex>
	<ReplacementKey>EmplIdProfileDateIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationsTransferred</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Information</Name>
			<Label>@SYS53922</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationsTransferred</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>dateCalculated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProfileDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgProfileDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProfileId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgProfileId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RegistrationsTransferred</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgRegistrationsTransferred</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EmplIdProfileDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProfileDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_JmgTimecardTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgProfileTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgProfileTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProfileId</Name>
					<Field>ProfileId</Field>
					<RelatedField>Profile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JmgStampJournalTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>JmgStampJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DaysTotal</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ElectronicTimecard</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>Worker</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProfileDate</Name>
					<Field>ProfileDate</Field>
					<RelatedField>ProfileDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>