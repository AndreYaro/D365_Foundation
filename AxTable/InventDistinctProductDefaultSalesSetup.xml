<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDistinctProductDefaultSalesSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDistinctProductDefaultSalesSetup extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByInventDistinctProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns a record in the table based on invent distinct product RecId.
    /// </summary>
    /// <param name = "_productRecId">Product identifier.</param>
    /// <param name = "_forUpdate">Indicates whether the record should be selected for update; optional.</param>
    /// <returns>The <c>InventDistinctProduct</c> record.</returns>
    public static InventDistinctProductDefaultSalesSetup findByInventDistinctProduct(InventDistinctProductRecId _productRecId, boolean _forUpdate = false)
    {
        InventDistinctProductDefaultSalesSetup productDefaultSalesSetup;

        productDefaultSalesSetup.selectForUpdate(_forUpdate);

        select firstonly productDefaultSalesSetup
            where productDefaultSalesSetup.DistinctProduct == _productRecId;

        return productDefaultSalesSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert record.
    /// </summary>
    /// <param name="_inventDistinctProduct">
    /// The <c>InventDistinctProduct</c> record.
    /// </param>
    /// <param name="_isPopulatingForFirstTime">
    /// A Boolean that indicates the table is being populated for the first time; optional.
    /// </param>
    /// <remarks>
    /// Should be called upon creation of any item in <c>InventDistinctProduct.</c>
    /// </remarks>
    public static void insertProduct(InventDistinctProduct _inventDistinctProduct, boolean _isPopulatingForFirstTime = false)
    {
        ttsbegin;
        
        InventDistinctProductDefaultSalesSetup productDefaultSalesSetup;
        if (InventDistinctProductDefaultSalesSetup::shouldDefaultSalesSettings(_inventDistinctProduct, _isPopulatingForFirstTime))
        {
            productDefaultSalesSetup.DistinctProduct = _inventDistinctProduct.RecId;
            productDefaultSalesSetup.DefaultSalesSiteId  = '';
            productDefaultSalesSetup.DefaultSiteSalesStopped = NoYes::No;
        }
        else 
        {
            productDefaultSalesSetup = InventDistinctProductDefaultSalesSetup::populateDefaultSalesSetup(_inventDistinctProduct, true);
        }
        
        productDefaultSalesSetup.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the given record with new default values.
    /// </summary>
    /// <param name="_distinctProductDefaultSalesSetup">
    /// The <c>InventDistinctProductDefaultSalesSetup</c> record that contain the new values to be updated.
    /// </param>
    public static void updateDefaults(InventDistinctProductDefaultSalesSetup _distinctProductDefaultSalesSetup)
    {
        InventDistinctProductDefaultSalesSetup salesSetup = InventDistinctProductDefaultSalesSetup::findByInventDistinctProduct(_distinctProductDefaultSalesSetup.DistinctProduct, true);
        if ( salesSetup.DefaultSalesSiteId          != _distinctProductDefaultSalesSetup.DefaultSalesSiteId
            || salesSetup.DefaultSiteSalesStopped   != _distinctProductDefaultSalesSetup.DefaultSiteSalesStopped)
        {
            salesSetup.DefaultSalesSiteId = _distinctProductDefaultSalesSetup.DefaultSalesSiteId;
            salesSetup.DefaultSiteSalesStopped = _distinctProductDefaultSalesSetup.DefaultSiteSalesStopped;
            salesSetup.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAffectedDefaultSalesSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find and update the affected distinct products when touching the default order settings.
    /// </summary>
    /// <param name="_itemId">
    /// The item id to filter on.
    /// </param>
    /// <param name="_inventDim">
    /// The invent dim to filter on.
    /// </param>
    /// <param name="_updateSalesSite">
    /// A Boolean that indicates whether to update the default sales site or not.
    /// </param>
    public static void updateAffectedDefaultSalesSetup(ItemId _itemId, InventDim _inventDim, boolean _updateSalesSite)
    {
        Query query = new Query();
       
        QueryBuildDataSource qbds = query.addDataSource(tableNum(InventDistinctProduct));
        qbds.addRange(fieldNum(InventDistinctProduct, itemId)).value(queryValue(_itemId));
        InventDistinctProduct::queryAddProductDimRanges(qbds, _inventDim, false);
        
        QueryBuildDataSource qbdsSalesSetup = qbds.addDataSource(tableNum(InventDistinctProductDefaultSalesSetup));
        qbdsSalesSetup.joinMode(JoinMode::ExistsJoin);
        qbdsSalesSetup.relations(true);

        ttsBegin;

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            InventDistinctProduct inventDistinctProduct = queryRun.get(tableNum(InventDistinctProduct));

            InventDistinctProductDefaultSalesSetup updatedDefaultSalesSetup = InventDistinctProductDefaultSalesSetup::populateDefaultSalesSetup(inventDistinctProduct, _updateSalesSite);
            InventDistinctProductDefaultSalesSetup::updateDefaults(updatedDefaultSalesSetup);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDefaultSalesSetup</Name>
				<Source><![CDATA[
    private static InventDistinctProductDefaultSalesSetup populateDefaultSalesSetup(InventDistinctProduct _distinctProduct, boolean _updateSalesSite)
    {
        InventDistinctProductDefaultSalesSetup defaultSalesSetup;
        InventItemSalesSetup defaultSalesSiteSetup;
        
        defaultSalesSetup.DistinctProduct = _distinctProduct.RecId;
        if (_updateSalesSite)
        {
            defaultSalesSiteSetup = InventItemSalesSetup::find(_distinctProduct.ItemId, _distinctProduct.InventDimId);
            defaultSalesSetup.DefaultSalesSiteId = InventDistinctProductDefaultSalesSetup::getDefaultInventSiteId(defaultSalesSiteSetup);
        }
        else
        {
            defaultSalesSetup.DefaultSalesSiteId = InventDistinctProductDefaultSalesSetup::findByInventDistinctProduct(_distinctProduct.RecId).DefaultSalesSiteId;
        }

        if (InventDistinctProductDefaultSalesSetup::needComputeSalesStopped(defaultSalesSetup.DefaultSalesSiteId, !_updateSalesSite))
        {
            defaultSalesSetup.DefaultSiteSalesStopped = InventDistinctProductDefaultSalesSetup::getDefaultSalesStoppedFlag(_distinctProduct, defaultSalesSetup.DefaultSalesSiteId);
        }
        else
        {
            defaultSalesSetup.DefaultSiteSalesStopped = defaultSalesSiteSetup.Stopped;
        }

        return defaultSalesSetup;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidDefaultSalesSetup</Name>
				<Source><![CDATA[
    private static boolean invalidDefaultSalesSetup(ItemId _itemId)
    {
        InventTable inventTable = InventTable::find(_itemId);
        return (!inventTable.storageDimensionGroup() || !inventTable.trackingDimensionGroup());
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDefaultSalesSettings</Name>
				<Source><![CDATA[
    private static boolean shouldDefaultSalesSettings(InventDistinctProduct _inventDistinctProduct, boolean _populateTable)
    {
        return ((!_populateTable && _inventDistinctProduct.InventDimId == InventDim::inventDimIdBlank())
               || InventDistinctProductDefaultSalesSetup::invalidDefaultSalesSetup(_inventDistinctProduct.ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>needComputeSalesStopped</Name>
				<Source><![CDATA[
    private static boolean needComputeSalesStopped(InventSiteId _defaultSalesSiteId, boolean _computeSalesStopped)
    {
        return _computeSalesStopped || (_defaultSalesSiteId != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultSalesStoppedFlag</Name>
				<Source><![CDATA[
    private static ItemStopped getDefaultSalesStoppedFlag(InventDistinctProduct _distinctProduct, InventSiteId _defaultSalesSiteId)
    {
        InventDim defaultSalesSetupDim = InventDistinctProductDefaultSalesSetup::addInventSiteToInventDim(_distinctProduct.InventDimId, _distinctProduct.ItemId, _defaultSalesSiteId);
        return InventItemSalesSetup::find(_distinctProduct.ItemId, defaultSalesSetupDim.inventDimId).Stopped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventSiteToInventDim</Name>
				<Source><![CDATA[
    private static InventDim addInventSiteToInventDim(InventDimId _inventDimId, ItemId _itemId, InventSiteId _inventSiteId)
    {
        InventDim inventdim = InventDim::find(_inventDimId);
        inventdim.InventSiteId = _inventSiteId;
        return InventDim::findOrCreate(inventdim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultInventSiteId</Name>
				<Source><![CDATA[
    private static InventSiteId getDefaultInventSiteId(InventItemSalesSetup _itemSalesSite)
    {
        return _itemSalesSite.inventDimDefault().InventSiteId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:DistinctProductDefaultSalesSetupDevDoc</DeveloperDocumentation>
	<Label>@SCM:DistinctProductDefaultSalesSetup</Label>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>InventDistinctProduct</ClusteredIndex>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>InventDistinctProduct</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DistinctProduct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DistinctProduct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDistinctProductRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultSalesSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DefaultSiteSalesStopped</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemStopped</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventDistinctProduct</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DistinctProduct</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDistinctProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventDistinctProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DistinctProduct</Name>
					<Field>DistinctProduct</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>