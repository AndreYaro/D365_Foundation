<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdTrans_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdTrans_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyTaxWithholdTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies one  buffer of <c>TaxWithholdTrans_IN</c> to new <c>TaxWithholdTrans_IN</c> Instance.
    /// </summary>
    /// <param name="_taxWithholdTrans">
    ///  Buffer of <c> TaxWithholdTrans_IN </c> table.
    /// </param>
    /// <param name="_reversalVoucher">
    ///  Reversal voucher to initialize .
    /// </param>
    /// <param name="_reverseDate">
    /// Reverse date to initialize
    /// </param>
    /// <param name="_sign">
    /// Sign of amount which define whether it should be negative amounts or postive.
    /// </param>
    public void copyTaxWithholdTrans(
        TaxWithholdTrans_IN   _taxWithholdTrans,
        Voucher               _reversalVoucher,
        TransDate             _reverseDate,
        Integer               _sign)
    {
        ttsbegin;
        this.Voucher                    = _reversalVoucher;
        this.TransDate                  = _reverseDate;
        this.Source                     = _taxWithholdTrans.Source;
        this.TaxWithholdValue           = _taxWithholdTrans.TaxWithholdValue;
        this.TaxWithholdCode            = _taxWithholdTrans.TaxWithholdCode;
        this.CurrencyCode               = _taxWithholdTrans.CurrencyCode;
        this.TaxWithholdBaseAmountCur   = _taxWithholdTrans.TaxWithholdBaseAmountCur * _sign;
        this.TaxWithholdAmountCur       = _taxWithholdTrans.TaxWithholdAmountCur * _sign;

        this.TaxWithholdGroup           = _taxWithholdTrans.TaxWithholdGroup;
        this.LedgerDimension            = _taxWithholdTrans.LedgerDimension;

        this.WithholdBaseAmount         = _taxWithholdTrans.WithholdBaseAmount * _sign;
        this.TaxWithholdAmount          = _taxWithholdTrans.TaxWithholdAmount * _sign;

        this.TaxWithholdCurrency        = _taxWithholdTrans.CurrencyCode;
        this.TaxWithholdAmountOrigin    = _taxWithholdTrans.TaxWithholdAmountOrigin * _sign;
        this.TaxTaxWithholdAmount       = _taxWithholdTrans.TaxTaxWithholdAmount * _sign;

        this.VendAccount                = _taxWithholdTrans.VendAccount;
        this.CustAccount                = _taxWithholdTrans.CustAccount;
        this.AccountId                  = _taxWithholdTrans.AccountId;
        this.Invoice                    = _taxWithholdTrans.Invoice;
        this.TaxType                    = _taxWithholdTrans.TaxType;
        this.TaxWithholdComponent       = _taxWithholdTrans.TaxWithholdComponent;
        this.TaxWithholdComponentGroup  = _taxWithholdTrans.TaxWithholdComponentGroup;
        this.AmountOriginMST            = _taxWithholdTrans.AmountOriginMST * _sign;
        this.OverlookThreshold          = _taxWithholdTrans.OverlookThreshold;
        this.TaxWithholdCalculated      = _taxWithholdTrans.TaxWithholdCalculated;
        this.RateOfDeduction            = _taxWithholdTrans.RateOfDeduction;
        this.LineNum                    = _taxWithholdTrans.LineNum;
        this.PurchId                    = _taxWithholdTrans.PurchId;
        this.SalesId                    = _taxWithholdTrans.SalesId;
        this.JournalNum                 = _taxWithholdTrans.JournalNum;
        this.AdjustedBaseAmount         = _taxWithholdTrans.AdjustedBaseAmount * _sign;
        this.AdjustedTaxWithholdAmount  = _taxWithholdTrans.AdjustedTaxWithholdAmount * _sign;
        this.TransactionReversal        = _taxWithholdTrans.TransactionReversal;
        this.PaymAccount                = _taxWithholdTrans.PaymAccount;
        this.PaymCompany                = _taxWithholdTrans.PaymCompany;
        this.SettlementVoucher          = _taxWithholdTrans.SettlementVoucher;
        this.InvoiceVoucher             = _taxWithholdTrans.InvoiceVoucher;
        this.CustVendTransInvoiceId     = _taxWithholdTrans.CustVendTransInvoiceId;
        this.Posted                     = _taxWithholdTrans.Posted;
        this.TransPaymId                = _taxWithholdTrans.TransPaymId;
        this.CPOrigInvoiceRefRecId      = _taxWithholdTrans.CPOrigInvoiceRefRecId;
        this.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWithHoldingTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the withholding tax amount for display.
    /// </summary>
    /// <returns>
    /// The tax withholding amount for display.
    /// </returns>
    display AmountCur displayWithHoldingTaxAmount()
    {
        return (this.TaxType == TaxWithholdCodeType_IN::TCS) ? abs(this.TaxWithholdAmountCur) : - abs(this.TaxWithholdAmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWithholdTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TaxWithholdTrans_IN</c> table buffer using another <c>TaxWithholdTrans_IN</c> table buffer.
    /// </summary>
    /// <param name="_taxWithholdTrans">
    ///  Buffer of <c> TaxWithholdTrans_IN </c> table.
    /// </param>
    /// <param name="_factor">
    /// Sign of amount which define whether it should be negative amounts or postive.
    /// </param>
    public void initFromTaxWithholdTrans(
        TaxWithholdTrans_IN   _taxWithholdTrans,
        Factor                _factor)
    {
        this.data(_taxWithholdTrans);
        this.AmountOriginMST            = _taxWithholdTrans.AmountOriginMST * _factor;
        this.TaxWithholdBaseAmountCur   = _taxWithholdTrans.TaxWithholdBaseAmountCur * _factor;
        this.TaxWithholdAmountCur       = _taxWithholdTrans.TaxWithholdAmountCur * _factor;
        this.WithholdBaseAmount         = _taxWithholdTrans.WithholdBaseAmount * _factor;
        this.TaxWithholdAmount          = _taxWithholdTrans.TaxWithholdAmount * _factor;
        this.TaxWithholdAmountOrigin    = _taxWithholdTrans.TaxWithholdAmountOrigin * _factor;
        this.TaxTaxWithholdAmount       = _taxWithholdTrans.TaxTaxWithholdAmount * _factor;
        this.AdjustedBaseAmount         = _taxWithholdTrans.AdjustedBaseAmount * _factor;
        this.AdjustedTaxWithholdAmount  = _taxWithholdTrans.AdjustedTaxWithholdAmount * _factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWithholdUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///Populate TaxWithholdTrans_IN table from given TaxWithholdUncommitted_IN table record.
    /// </summary>
    /// <param name="_taxWithholdUncommitted">
    /// The TaxWithholdUncommitted_IN table record.
    /// </param>
    public void initFromTaxWithholdUncommitted(TaxWithholdUncommitted_IN _taxWithholdUncommitted)
    {
        TaxWithholdTable            taxWithholdTable;
        LedgerJournalTrans          ledgerJournalTransLoc;
        CurrencyExchangeHelper      currencyExchangeHelper;
        TaxInformationCustTable_IN  taxInformationCustTable;
        TaxInformationVendTable_IN  taxInformationVendTable;
        TaxWithholdComponentTable_IN    taxWithholdComponentTable;
        TaxWithholdComponentGroupTable_IN   taxWithholdComponentGroupTable;

        #COSNumbers
        #define.7(7)
        #define.8(8)
        #define.9(9)

        select firstonly TaxWithholdComponent_IN, TaxWithholdSettlementPeriod_IN from taxWithholdTable
            where taxWithholdTable.TaxWithholdCode == _taxWithholdUncommitted.TaxWithholdCode
            outer join TaxWithholdComponentGroup from taxWithholdComponentTable
                where taxWithholdComponentTable.RecId == taxWithholdTable.TaxWithholdComponent_IN
                outer join Status from taxWithholdComponentGroupTable
                    where taxWithholdComponentGroupTable.RecId == taxWithholdComponentTable.TaxWithholdComponentGroup;

        this.SourceDocumentLine         = _taxWithholdUncommitted.SourceDocumentLine;
        this.Exempt                     = _taxWithholdUncommitted.ExemptTax;
        this.Voucher                    = _taxWithholdUncommitted.Voucher;
        this.Invoice                    = _taxWithholdUncommitted.InvoiceId;
        this.TransDate                  = _taxWithholdUncommitted.CalculationDate;
        this.Source                     = _taxWithholdUncommitted.Source;
        this.TaxWithholdValue           = _taxWithholdUncommitted.TaxWithholdValue;
        this.TaxWithholdCode            = _taxWithholdUncommitted.TaxWithholdCode;
        this.CurrencyCode               = _taxWithholdUncommitted.SourceCurrencyCOde;
        this.TaxWithholdBaseAmountCur   = _taxWithholdUncommitted.SourceBaseAmountCur;
        this.TaxWithholdAmountCur       = _taxWithholdUncommitted.SourceRegulateAmountCur;
        this.AdjustedBaseAmount         = _taxWithholdUncommitted.SourceBaseAmountCurRegulated;
        this.AdjustedTaxWithholdAmount  = _taxWithholdUncommitted.SourceRegulateAmountCur;
        this.TaxWithholdCalcAmountCur   = _taxWithholdUncommitted.SourceTaxAmountCur;
        this.TaxAutoGenerated           = _taxWithholdUncommitted.TaxAutogenerated;
        this.TaxWithholdGroup           = _taxWithholdUncommitted.TaxWithholdGroup;
        this.LedgerDimension            = _taxWithholdUncommitted.LedgerDimensionDefaultAccount;
        this.RateOfDeduction            = _taxWithholdUncommitted.RateOfDeduction;
        this.HeadingTableId             = _taxWithholdUncommitted.HeadingTableId;
        this.HeadingRecId               = _taxWithholdUncommitted.HeadingRecId;
        this.SourceTableId              = _taxWithholdUncommitted.SourceTableId;
        this.SourceRecId                = _taxWithholdUncommitted.SourceRecId;
        this.TaxWithholdCalculated      = _taxWithholdUncommitted.IsTaxCalculated;
        this.IsPartOfTurnOver           = _taxWithholdUncommitted.IsPartOfTurnOver;
        this.OverlookThreshold          = _taxWithholdUncommitted.OverlookThreshold;
        this.Reason                     = _taxWithholdUncommitted.Reason;
        this.ThresholdValidFrom         = _taxWithholdUncommitted.ThresholdValidFrom;
        this.ThresholdValidTo           = _taxWithholdUncommitted.ThresholdValidTo;
        this.CalcUncalcPostedTrans      = _taxWithholdUncommitted.CalcUncalcPostedTrans;
        this.TurnoverThreshold          = _taxWithholdUncommitted.TurnoverThreshold;
        this.ConcessionCertificateNumber= _taxWithholdUncommitted.ConcessionCertificateNumber;

        // Fields related to original cust/vend trans fields selected for adjustment.
        this.TransactionStatus          = _taxWithholdUncommitted.TransactionStatus;
        this.SourceTransDate            = _taxWithholdUncommitted.SourceTransDate;
        this.SourceTransRecId           = _taxWithholdUncommitted.SourceTransRecId;
        this.SourceTransTableId         = _taxWithholdUncommitted.SourceTransTableId;
        this.SourceTransVoucher         = _taxWithholdUncommitted.SourceTransVoucher;
        this.CPOrigInvoiceRefRecId      = _taxWithholdUncommitted.CPOrigInvoiceRefRecId;
        this.CertificateNumber          = _taxWithholdUncommitted.ConcessionCertificateNumber;

    //Amount
    // Company's currency
        this.WithholdBaseAmount         = _taxWithholdUncommitted.TaxBaseAmount;
        this.TaxWithholdAmount          = _taxWithholdUncommitted.TaxAmount;
        // This field is required for threshold validation, grossAmount is stored in this field
        this.AmountOriginMST            = _taxWithholdUncommitted.AmountOriginMST;
        this.AdvancePayment             = _taxWithholdUncommitted.AdvancePayment;

    //TaxWithhold currency
        this.TaxWithholdCurrency        = _taxWithholdUncommitted.TaxCurrencyCode;
        this.TaxWithholdAmountOrigin    = _taxWithholdUncommitted.TaxBaseAmountCur;
        this.TaxTaxWithholdAmount       = _taxWithholdUncommitted.TaxAmountCur;

        this.TaxApplicability           = _taxWithholdUncommitted.TaxApplicability;
        this.AcknowledgermentNumber     = _taxWithholdUncommitted.AcknowledgermentNumber;
        this.NatureOfRemittance         = _taxWithholdUncommitted.NatureOfRemittance;
        this.CountryRegionToRemittance  = _taxWithholdUncommitted.CountryRegionToRemittance;

        this.TaxType                    = _taxWithholdUncommitted.TaxWithholdType;
        this.TaxWithholdComponent       = taxWithholdTable.TaxWithholdComponent_IN;
        this.TaxWithholdComponentGroup  = taxWithholdComponentTable.TaxWithholdComponentGroup;
        this.SectionCode                = TaxWithholdComponentGroupTable_IN::find(taxWithholdComponentTable.TaxWithholdComponentGroup).SectionCode;

        if (_taxWithholdUncommitted.Source == TaxModuleType::Voucher && _taxWithholdUncommitted.SourceTableId == tableNum(LedgerJournalTrans))
        {
            select firstonly JournalNum, AccountType, OffsetAccountType from ledgerJournalTransLoc
                where ledgerJournalTransLoc.RecId == _taxWithholdUncommitted.SourceRecId;

            if ((ledgerJournalTransLoc.AccountType   == LedgerJournalACType::Cust         && ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Ledger)
                ||(ledgerJournalTransLoc.AccountType == LedgerJournalACType::Ledger       && ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Cust)
                ||(ledgerJournalTransLoc.AccountType == LedgerJournalACType::Cust         && ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Bank)
                ||(ledgerJournalTransLoc.AccountType == LedgerJournalACType::Bank         && ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Cust)
                ||(ledgerJournalTransLoc.AccountType == LedgerJournalACType::FixedAssets  && ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Cust)
                ||(ledgerJournalTransLoc.AccountType == LedgerJournalACType::Cust         && ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::FixedAssets)
                ||(ledgerJournalTransLoc.AccountType == LedgerJournalACType::Project      && ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Cust)
                || (ledgerJournalTransLoc.ledgerJournalTable().JournalType == LedgerJournalType::CustBillOfExchangeDraw)
                || (ledgerJournalTransLoc.ledgerJournalTable().JournalType == LedgerJournalType::CustBillOfExchangeProtest)
                || (ledgerJournalTransLoc.ledgerJournalTable().JournalType == LedgerJournalType::CustBillOfExchangeRedraw))
            {
                select firstonly PANNumber, PANReferenceNumber, PanStatus from taxInformationCustTable
                    where taxInformationCustTable.CustTable == _taxWithholdUncommitted.AccountNumber;

                this.CustAccount        = _taxWithholdUncommitted.AccountNumber;
                this.PAN                = taxInformationCustTable.PANNumber;
                this.PANReferenceNumber = taxInformationCustTable.PANReferenceNumber;
                this.PANStatus          = taxInformationCustTable.PanStatus;
            }

            if ((ledgerJournalTransLoc.AccountType   == LedgerJournalACType::Vend         && ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Ledger)
                ||(ledgerJournalTransLoc.AccountType == LedgerJournalACType::Ledger       && ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Vend)
                ||(ledgerJournalTransLoc.AccountType == LedgerJournalACType::Bank         && ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Vend)
                ||(ledgerJournalTransLoc.AccountType == LedgerJournalACType::Vend         && ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Bank)
                ||(ledgerJournalTransLoc.AccountType == LedgerJournalACType::FixedAssets  && ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Vend)
                ||(ledgerJournalTransLoc.AccountType == LedgerJournalACType::Vend         && ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::FixedAssets)
                ||(ledgerJournalTransLoc.AccountType == LedgerJournalACType::Project      && ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Vend)
                ||(ledgerJournalTransLoc.AccountType == LedgerJournalACType::Vend         && ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Project)
                || (ledgerJournalTransLoc.ledgerJournalTable().JournalType == LedgerJournalType::VendPromissoryNoteDraw))
            {
                select firstonly PANNumber, PANReferenceNumber, PanStatus from taxInformationVendTable
                    where taxInformationVendTable.VendTable == _taxWithholdUncommitted.AccountNumber;

                this.VendAccount        = _taxWithholdUncommitted.AccountNumber;
                this.PAN                = taxInformationVendTable.PANNumber;
                this.PANReferenceNumber = taxInformationVendTable.PANReferenceNumber;
                this.PANStatus          = taxInformationVendTable.PANStatus;
            }

            if ((ledgerJournalTransLoc.AccountType   == LedgerJournalACType::Bank    &&  ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Ledger && ledgerJournalTransLoc.AmountCurDebit != 0)
                ||(ledgerJournalTransLoc.AccountType == LedgerJournalACType::Ledger  &&  ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Bank   && ledgerJournalTransLoc.AmountCurCredit != 0)
                ||(ledgerJournalTransLoc.AccountType == LedgerJournalACType::Bank    &&  ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Ledger && ledgerJournalTransLoc.AmountCurCredit != 0)
                ||(ledgerJournalTransLoc.AccountType == LedgerJournalACType::Ledger  &&  ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Bank   && ledgerJournalTransLoc.AmountCurDebit != 0))
            {
                if (_taxWithholdUncommitted.SourceTransTableId == tableNum(CustTrans))
                {
                    this.CustAccount = _taxWithholdUncommitted.AccountNumber;
                }
                else if (_taxWithholdUncommitted.SourceTransTableId == tableNum(VendTrans))
                {
                    this.VendAccount = _taxWithholdUncommitted.AccountNumber;
                }
                else
                {
                    this.AccountId = _taxWithholdUncommitted.AccountNumber;
                }
            }
        }

        this.ComponentStatus                = taxWithholdComponentGroupTable.Status;
        this.TaxWithholdSettlementPeriod    = taxWithholdTable.TaxWithholdSettlementPeriod_IN;

        // Adjusted taxes.
        if (_taxWithholdUncommitted.SourceRegulateAmountCur != _taxWithholdUncommitted.SourceTaxAmountCur)
        {
            this.initVendAccount();

            if (this.TaxType == TaxWithholdCodeType_IN::TDS
                && this.VendAccount
                && (VendTable::find(this.VendAccount).isForeign()
                    || this.CurrencyCode != Ledger::accountingCurrency())
                && (!TaxTDSExchRateByDocumentDateFlight::instance().isEnabled() 
                    || ledgerExtensionIN::findByLedger(Ledger::current()).TDSImportExchangeRateType))
            {
                this.TaxWithholdAmount = TaxExchangeRateHelper::tdsMSTAmount_IN(this.AdjustedTaxWithholdAmount, this.CurrencyCode);
                this.TaxTaxWithholdAmount = TaxExchangeRateHelper::tdsCurAmount_IN(this.TaxWithholdAmount, this.TaxWithholdCurrency);
            }
            else
            {
                currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), this.TransDate);

                this.TaxWithholdAmount = currencyExchangeHelper.calculateTransactionToAccounting(this.CurrencyCode,
                    this.AdjustedTaxWithholdAmount,
                    true);

                this.TaxTaxWithholdAmount = currencyExchangeHelper.calculateAccountingToTransaction(this.TaxWithholdCurrency,
                    this.TaxWithholdAmount,
                    true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWithholdWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///Populate TaxWithholdTrans_IN table from given TmpTaxWithholdWorkTrans_IN table record.
    /// </summary>
    /// <param name="_tmpTaxWithholdWorkTrans">
    /// The TmpTaxWithholdWorkTrans_IN table record.
    /// </param>
    public void initFromTaxWithholdWorkTrans(TmpTaxWithholdWorkTrans_IN _tmpTaxWithholdWorkTrans)
    {
        TaxWithholdTable                taxWithholdTable;
        int                             taxSign = 1;
        CurrencyExchangeHelper          currencyExchangeHelper;

        taxWithholdTable = TaxWithholdTable::find(_tmpTaxWithholdWorkTrans.TaxWithholdCode);

        // Do not change sign for credit note
        if (_tmpTaxWithholdWorkTrans.TaxBaseQty >= 0)
        {
            if ((TaxWithholdTable::find(_tmpTaxWithholdWorkTrans.TaxWithholdCode).isTDSTaxType_IN()
             && (_tmpTaxWithholdWorkTrans.HeadingTableId == tableNum(PurchTable) || _tmpTaxWithholdWorkTrans.HeadingTableId == tableNum(VendInvoiceJour)))
             || (TaxWithholdTable::find(_tmpTaxWithholdWorkTrans.TaxWithholdCode).isTCSTaxType_IN()
             && (_tmpTaxWithholdWorkTrans.HeadingTableId == tableNum(SalesTable) || _tmpTaxWithholdWorkTrans.HeadingTableId == tableNum(CustInvoiceJour)
             || _tmpTaxWithholdWorkTrans.HeadingTableId == tableNum(CustInvoiceTable)))
             || (TaxWithholdTable::find(_tmpTaxWithholdWorkTrans.TaxWithholdCode).isTCSTaxType_IN()
             && (_tmpTaxWithholdWorkTrans.HeadingTableId == tableNum(ProjInvoiceJour) || _tmpTaxWithholdWorkTrans.HeadingTableId == tableNum(ProjProPosalJour)))
             )
            {
                taxSign = taxSign * -1;
            }
        }

        this.SourceDocumentLine         = _tmpTaxWithholdWorkTrans.SourceDocumentLine;
        this.Exempt                     = _tmpTaxWithholdWorkTrans.ExemptTax;
        this.Voucher                    = _tmpTaxWithholdWorkTrans.Voucher;
        this.Invoice                    = _tmpTaxWithholdWorkTrans.InvoiceId;
        this.TransDate                  = _tmpTaxWithholdWorkTrans.CalculationDate;
        this.Source                     = _tmpTaxWithholdWorkTrans.Source;
        this.TaxWithholdValue           = _tmpTaxWithholdWorkTrans.TaxWithholdValue;
        this.TaxWithholdCode            = _tmpTaxWithholdWorkTrans.TaxWithholdCode;
        this.CurrencyCode               = _tmpTaxWithholdWorkTrans.SourceCurrencyCode;
        this.TaxWithholdBaseAmountCur   = _tmpTaxWithholdWorkTrans.SourceBaseAmountCur;
        this.TaxWithholdAmountCur       = _tmpTaxWithholdWorkTrans.SourceTaxAmountCur * taxSign;
        this.AdjustedBaseAmount         = _tmpTaxWithholdWorkTrans.SourceBaseAmountCurRegulated;
        this.AdjustedTaxWithholdAmount  = _tmpTaxWithholdWorkTrans.SourceRegulateAmountCur * taxSign;
        this.TaxWithholdCalcAmountCur   = _tmpTaxWithholdWorkTrans.SourceTaxAmountCur * taxSign;
        this.TaxAutoGenerated           = _tmpTaxWithholdWorkTrans.TaxAutogenerated;
        this.TaxWithholdGroup           = _tmpTaxWithholdWorkTrans.TaxWithholdGroup;
        this.LedgerDimension            = _tmpTaxWithholdWorkTrans.LedgerDimensionDefaultAccount;
        this.RateOfDeduction            = _tmpTaxWithholdWorkTrans.RateOfDeduction;
        this.HeadingTableId             = _tmpTaxWithholdWorkTrans.HeadingTableId;
        this.HeadingRecId               = _tmpTaxWithholdWorkTrans.HeadingRecId;
        this.SourceTableId              = _tmpTaxWithholdWorkTrans.SourceTableId;
        this.SourceRecId                = _tmpTaxWithholdWorkTrans.SourceRecId;
        this.TaxWithholdCalculated      = _tmpTaxWithholdWorkTrans.IsTaxCalculated;
        this.IsPartOfTurnOver           = _tmpTaxWithholdWorkTrans.IsPartOfTurnOver;
        this.OverlookThreshold          = _tmpTaxWithholdWorkTrans.OverlookThreshold;
        this.Reason                     = _tmpTaxWithholdWorkTrans.Reason;
        this.ThresholdValidFrom         = _tmpTaxWithholdWorkTrans.ThresholdValidFrom;
        this.ThresholdValidTo           = _tmpTaxWithholdWorkTrans.ThresholdValidTo;
        this.CalcUncalcPostedTrans      = _tmpTaxWithholdWorkTrans.CalcUncalcPostedTrans;
        this.TurnoverThreshold          = _tmpTaxWithholdWorkTrans.TurnoverThreshold;
        this.ConcessionCertificateNumber= _tmpTaxWithholdWorkTrans.ConcessionCertificateNumber;

        // Fields related to original cust/vend trans fields selected for adjustment.
        this.TransactionStatus          = _tmpTaxWithholdWorkTrans.TransactionStatus;
        this.SourceTransDate            = _tmpTaxWithholdWorkTrans.SourceTransDate;
        this.SourceTransRecId           = _tmpTaxWithholdWorkTrans.SourceTransRecId;
        this.SourceTransTableId         = _tmpTaxWithholdWorkTrans.SourceTransTableId;
        this.SourceTransVoucher         = _tmpTaxWithholdWorkTrans.SourceTransVoucher;
        this.CPOrigInvoiceRefRecId      = _tmpTaxWithholdWorkTrans.CPOrigInvoiceRefRecId;

    //Amount
    // Company's currency
        this.WithholdBaseAmount         = _tmpTaxWithholdWorkTrans.TaxBaseAmount;
        this.TaxWithholdAmount          = _tmpTaxWithholdWorkTrans.TaxAmount * taxSign;
       // This field is required for threshold validation, grossAmount is stored in this field
        this.AmountOriginMST            = _tmpTaxWithholdWorkTrans.AmountOriginMST;
        this.AdvancePayment             = _tmpTaxWithholdWorkTrans.AdvancePayment;

    //TaxWithhold currency
        this.TaxWithholdCurrency        = _tmpTaxWithholdWorkTrans.TaxCurrencyCode;
        this.TaxWithholdAmountOrigin    = _tmpTaxWithholdWorkTrans.TaxBaseAmountCur;
        this.TaxTaxWithholdAmount       = _tmpTaxWithholdWorkTrans.TaxAmountCur * taxSign;

        this.TaxApplicability           = _tmpTaxWithholdWorkTrans.TaxApplicability;
        this.AcknowledgermentNumber     = _tmpTaxWithholdWorkTrans.AcknowledgermentNumber;
        this.NatureOfRemittance         = _tmpTaxWithholdWorkTrans.NatureOfRemittance;
        this.CountryRegionToRemittance  = _tmpTaxWithholdWorkTrans.CountryRegionToRemittance;
        this.CertificateNumber          = _tmpTaxWithholdWorkTrans.ConcessionCertificateNumber;

        this.TaxType                    = TaxWithhold_IN::TaxWithholdType2TaxWithholdCodeType(_tmpTaxWithholdWorkTrans.TaxWithholdType);
        this.TaxWithholdComponent       = taxWithholdTable.TaxWithholdComponent_IN;
        this.TaxWithholdComponentGroup  = TaxWithholdComponentTable_IN::find(taxWithholdTable.TaxWithholdComponent_IN).TaxWithholdComponentGroup;
        this.SectionCode                = TaxWithholdComponentGroupTable_IN::find(
                                                                    TaxWithholdComponentTable_IN::find(
                                                                                taxWithholdTable.TaxWithholdComponent_IN).TaxWithholdComponentGroup).SectionCode;

        this.ComponentStatus        = TaxWithholdComponentGroupTable_IN::find(
                                                                    TaxWithholdComponentTable_IN::find(
                                                                                taxWithholdTable.TaxWithholdComponent_IN).TaxWithholdComponentGroup).Status;
        this.TaxWithholdSettlementPeriod    = taxWithholdTable.TaxWithholdSettlementPeriod_IN;

        // Adjusted taxes.
        if (_tmpTaxWithholdWorkTrans.SourceRegulateAmountCur != _tmpTaxWithholdWorkTrans.SourceTaxAmountCur)
        {
            currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), this.TransDate);

            this.TaxWithholdAmount    = currencyExchangeHelper.calculateTransactionToAccounting(this.CurrencyCode,
                                                                                                this.AdjustedTaxWithholdAmount,
                                                                                                true);

            this.TaxTaxWithholdAmount = currencyExchangeHelper.calculateAccountingToTransaction(this.TaxWithholdCurrency,
                                                                                                this.TaxWithholdAmount,
                                                                                                true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCheckAccountingDistributionNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if this taxWithholdTrans_IN meet requirement from user.
    /// </summary>
    /// <param name = "_taxWithholdTrans">The <c>TaxWithholdTrans_IN</c> need to verify</param>
    /// <returns>Returns if checking accounting distribution is needed.</returns>
    public static boolean isCheckAccountingDistributionNeeded(TaxWithholdTrans_IN _taxWithholdTrans)
    {
        return _taxWithholdTrans.SourceDocumentLine != 0
            && _taxWithholdTrans.AdjustedTaxWithholdAmount != 0
            && (_taxWithholdTrans.Source == TaxModuleType::FreeTxtInvoice || _taxWithholdTrans.Source == TaxModuleType::PurchInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into <c> TaxWithholdTrans_IN </c> table.
    /// </summary>
    public void  insert()
    {
        TaxWithholdType_IN  taxWithholdType;
        TaxWithholdTrans    taxWithholdTransLoc;

        taxWithholdType = this.TaxType == TaxWithholdCodeType_IN::TDS ? TaxWithholdType_IN::TDS :
                                          TaxWithholdType_IN::TCS;

        if (this.CustAccount)
        {
            TaxInformationCustTable_IN custTaxInfo = TaxInformationCustTable_IN::findByCustTable(this.CustAccount);
            this.NatureOfAssessee  = custTaxInfo.NatureOfAssessee;
        }
        else if (this.VendAccount)
        {
            TaxInformationVendTable_IN vendTaxInfo = TaxInformationVendTable_IN::findByVendTable(this.VendAccount);
            this.NatureOfAssessee = vendTaxInfo.NatureOfAssessee;
        }

        TaxWithholdSettledPeriods_IN taxWithholdSettledPeriods;

        select firstonly VersionNum from taxWithholdSettledPeriods
            where taxWithholdSettledPeriods.TaxWithholdSettlementPeriod  == this.TaxWithholdSettlementPeriod
                && taxWithholdSettledPeriods.TaxType                     == taxWithholdType
                && taxWithholdSettledPeriods.TaxWithholdRegNumber        == this.TaxWithholdRegNumber
                && taxWithholdSettledPeriods.FromDate                    <= this.TransDate
                && taxWithholdSettledPeriods.ToDate                      >= this.TransDate;

        this.TaxRepCounter = taxWithholdSettledPeriods.VersionNum;

        super();
        taxWithholdTransLoc.initFromTaxWithholdTrans_IN(this);

        //Delete tax uncommited records for recalculation purpose for the same account
        if (this.Posted)
        {
            if (!TaxWithholdParameters_IN::find().DisableThresholdCumulativeTracking)
            {
                TaxWHTThresholdCumulativeChangeTracking_IN::createTracking(this);
            }
            else
            {
                TaxWithholdGroupData            taxWithholdGroupData;
                TaxWithholdThresholdLimit_IN    taxWithholdThresholdLimit;
                TaxWithholdTable                taxWithholdTable;
                boolean                         shouldDeleteTaxWithholdUncommitted;

                select firstonly RecId from taxWithholdTable
                        where taxWithholdTable.ApplyThreshold_IN == NoYes::Yes
                    exists join taxWithholdGroupData
                        where taxWithholdGroupData.TaxWithholdCode == taxWithholdTable.TaxWithholdCode
                        && taxWithholdGroupData.TaxWithholdGroup == this.TaxWithholdGroup;
                
                if (taxWithholdTable.RecId)
                {
                    shouldDeleteTaxWithholdUncommitted = true;
                }
                else
                {
                    select firstonly RecId from taxWithholdThresholdLimit
                        exists join taxWithholdTable
                            where taxWithholdTable.TaxWithholdComponent_IN == taxWithholdThresholdLimit.TaxWithholdComponent
                        exists join taxWithholdGroupData
                            where taxWithholdGroupData.TaxWithholdCode == taxWithholdTable.TaxWithholdCode
                            && taxWithholdGroupData.TaxWithholdGroup == this.TaxWithholdGroup;

                    if (taxWithholdThresholdLimit.RecId)
                    {
                        shouldDeleteTaxWithholdUncommitted = true;
                    }
                }

                //Only when threshold is defined, the deletaion will happen then.
                if (shouldDeleteTaxWithholdUncommitted)
                {
                    TaxWithholdUncommitted_IN::deleteForWithholdTaxTrans(this);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxReporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record for tax report .
    /// </summary>
    /// <param name="_periodStartDate">
    /// Period start date to find the record.
    /// </param>
    public void insertTaxReporting(TransDate _periodStartDate)
    {
        TaxWithholdType_IN  taxWithholdType;

        taxWithholdType = this.TaxType == TaxWithholdCodeType_IN::TDS ? TaxWithholdType_IN::TDS :
                                          TaxWithholdType_IN::TCS;

        this.TaxRepCounter = TaxWithholdSettledPeriods_IN::findByTaxPeriod(this.TaxWithholdSettlementPeriod, taxWithholdType,
                                                      this.TransDate, this.TaxWithholdRegNumber).VersionNum;

        this.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// The parent source document line parameter.
    /// </summary>
    /// <returns>
    /// The source document line.
    /// </returns>
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return this.TaxWithholdMap_IN::parmParentSourceDocumentLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    /// <summary>
    /// The enum name source document line type parameter.
    /// </summary>
    /// <returns>
    /// The enum name of the source document line.
    /// </returns>
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return this.TaxWithholdMap_IN::parmSourceDocLineTypeEnumName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enum value of the source document line type parameter.
    /// </summary>
    /// <returns>
    /// The enum value of the source document type.
    /// </returns>
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return this.TaxWithholdMap_IN::parmSourceDocLineTypeEnumValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document header parameter.
    /// </summary>
    /// <returns>
    /// The source document header information.
    /// </returns>
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        return this.TaxWithholdMap_IN::parmSourceDocumentHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax withhold direction parameter information.
    /// </summary>
    /// <returns>
    /// The tax withhold direction information.
    /// </returns>
    public TaxWithholdDirection_IN parmTaxWithholdDirection()
    {
        return this.TaxWithholdMap_IN::parmTaxWithholdDirection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableReverseButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the TaxWithholdTrans is available for reversal, otherwise false.
    /// </summary>
    /// <param name="_custVendTrans">
    /// The CustVendTrans Map buffer.
    /// </param>
    /// <returns>
    /// True, if the taxWithholdTrans transaction can be reversed, otherwise false.
    /// </returns>
    public static boolean enableReverseButton(CustVendTrans   _custVendTrans)
    {
        TaxWithholdTrans_IN     taxWithholdTrans;
        boolean                 ret;

        select firstonly RecId from taxWithholdTrans
            where (taxWithholdTrans.SourceTransVoucher  ==  _custVendTrans.Voucher
                    && taxWithholdTrans.SourceTransDate ==  _custVendTrans.TransDate)
               || (taxWithholdTrans.Voucher         ==  _custVendTrans.Voucher
                    && taxWithholdTrans.TransDate   ==  _custVendTrans.TransDate)
               && taxWithholdTrans.TransactionStatus    == TaxWithholdTransactionstatus_IN::Adjusted;

        ret = (taxWithholdTrans.RecId == 0);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the TaxWithholdTrans_IN record exists for given voucher and transDate.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher of transaction.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// returns true if the TaxWithholdTrans_IN record exists for given voucher and transDate; otherwise false.
    /// </returns>
    public static boolean exist(
        Voucher   _voucher,
        TransDate _transDate)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     taxWithholdTrans_IN
                 where
                       taxWithholdTrans_IN.Voucher   == _voucher
                    && taxWithholdTrans_IN.TransDate == _transDate).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether configuration key is enabled or not .
    /// </summary>
    /// <param name="_fieldId">
    ///  Field Id for which this check performs.
    /// </param>
    /// <returns>
    /// If configuration key is enabled then return true otherwise false.
    /// </returns>
    static boolean fieldEnabled(FieldId _fieldId)
    {
        boolean                 enabled                 = true;
        DictField               dictField               = new DictField(tableNum(TaxWithholdTrans_IN), _fieldId);
        DictConfigurationKey    dictConfigurationKey    = new DictConfigurationKey(dictField.configurationKeyId());

        if (dictConfigurationKey)
            enabled = dictConfigurationKey.enabled();

        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns field name.
    /// </summary>
    /// <param name="_fieldId">
    /// A unique field id.
    /// </param>
    /// <returns>
    ///  Field name.
    /// </returns>
    static str fieldName(FieldId _fieldId)
    {
        str name;

        name = fieldId2pname(tableNum(TaxWithholdTrans_IN), _fieldId);

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c> TaxWithholdTrans_IN </c> table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id is used to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing TaxWithholdTrans_IN table.
    /// </returns>
    public static TaxWithholdTrans_IN find(
        RefRecId            _recId,
        boolean             _forupdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdTrans_IN taxWithholdTrans;

        taxWithholdTrans.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdTrans
            where taxWithholdTrans.RecId == _recId;

        return taxWithholdTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustInvoiceTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c> TaxWithholdTrans_IN </c> table for the specified CustInvoiceTrans Record id.
    /// </summary>
    /// <param name="_custInvoiceTransRecid">
    /// The reference RecId used to fetch recotd from TaxWithholdTrans_IN table.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing TaxWithholdTrans_IN table.
    /// </returns>
    public static TaxWithholdTrans_IN findByCustInvoiceTransRecId(
        RefRecId            _custInvoiceTransRecid,
        boolean             _forupdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdTrans_IN taxWithholdTrans;

        taxWithholdTrans.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdTrans
            where taxWithholdTrans.CustInvoiceTrans == _custInvoiceTransRecid;

        return taxWithholdTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>TaxWithholdTrans_IN</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    ///    A <c>SourceDocumentLine</c> record RecId.
    /// </param>
    /// <returns>
    ///    A <c>TaxTrans</c> record.
    /// </returns>
    static public TaxWithholdTrans_IN findBySourceDocumentLine(RefRecId _sourceDocumentLine)
    {
        TaxWithholdTrans_IN taxWithholdTrans;

        select firstonly taxWithholdTrans
            where taxWithholdTrans.SourceDocumentLine == _sourceDocumentLine;

        return taxWithholdTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendTransPaym</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the record of <c> TaxWithholdTrans_IN </c> table for the specified transaction payment Id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id is used to find.
    /// </param>
    /// <returns>
    /// Return true if records exists otherwise false.
    /// </returns>
    public static boolean findCustVendTransPaym(RecId _recId)
    {
        boolean             found;

        if (_recId)
        {
            found = (select firstonly RecId
                from taxWithholdTrans_IN
                where taxWithholdTrans_IN.TransPaymId == _recId).RecId != 0;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method used to fetche the corresponding string value from <c>TaxWithholdTrans_IN</c> table buffer.
    /// </summary>
    /// <param name="_taxWithholdTrans">
    /// The _taxWithholdTrans buffer that contains the <c>TaxWithholdTrans_IN</c> data.
    /// </param>
    /// <param name="_fieldName">
    /// The _fieldName of corresponding field of <c>TaxWithholdTrans_IN</c>.
    /// </param>
    /// <returns>
    /// Returns the string value based on the field ID of the buffer _taxWithholdTrans passed.
    /// </returns>
    public static CCStatSort_IN getFieldValues(
        TaxWithholdTrans_IN _taxWithholdTrans,
        FieldName           _fieldName)
    {
        DictField         dictField;
        DictTable         dictTable;
        CCStatSort_IN     fieldValue;
        ExecutePermission executePermission;

        dictField = new DictField(tableNum(TaxWithholdTrans_IN), fieldName2id(tableNum(TaxWithholdTrans_IN), _fieldName));

        if (dictField)
        {
            switch (dictField.baseType())
            {
                case  Types::Int64:
                    fieldValue = TaxWithholdTrans_IN::getReferencesFieldValues(fieldName2id(tableNum(TaxWithholdTrans_IN), _fieldName), _taxWithholdTrans);
                    break;

                case  Types::Enum:
                case  Types::Real:
                case  Types::Date:
                    fieldValue = strFmt('%1', _taxWithholdTrans.(fieldName2id(tableNum(TaxWithholdTrans_IN), _fieldName)));
                    break;

                default:
                    fieldValue = _taxWithholdTrans.(fieldName2id(tableNum(TaxWithholdTrans_IN), _fieldName));
                    break;
            }
        }
        else
        {
            dictTable = new DictTable(_taxWithholdTrans.TableId);
            if (dictTable && _fieldName && _fieldName!= '0')
            {
                executePermission = new ExecutePermission();
                executePermission.assert();
                fieldValue = strFmt('%1', dictTable.callObject(_fieldName, _taxWithholdTrans));
            }
        }
        return fieldValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferencesFieldValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to fetch the corresponding string value of Recid fields for <c>TaxWithholdTrans_IN</c> table transactions related data.
    /// </summary>
    /// <param name="fieldId">
    /// The fieldid of corresponding field of <c>TaxWithholdTrans_IN</c> table
    /// </param>
    /// <param name="_taxWithholdTrans">
    /// The _taxWithholdTrans buffer that contains TaxWithholdComponent, TaxWithholdComponentGroup, TaxWithholdSettlementPeriod, TaxWithholdRegNumber, ledgerDimReceivableAccount and ledgerDimension is being passed.
    /// </param>
    /// <returns>
    /// Returns the string value based on the field ID of the buffer _taxWithholdTrans passed.
    /// </returns>
    public static CCStatSort_IN getReferencesFieldValues(FieldId fieldId, TaxWithholdTrans_IN _taxWithholdTrans)
    {
        CCStatSort_IN  name;

        switch (fieldId)
        {
            case fieldNum(TaxWithholdTrans_IN, TaxWithholdComponent) :
                name = TaxWithholdComponentTable_IN::find(_taxWithholdTrans.TaxWithholdComponent).Component;
                break;

            case fieldNum(TaxWithholdTrans_IN, TaxWithholdComponentGroup) :
                name = TaxWithholdComponentGroupTable_IN::find(_taxWithholdTrans.TaxWithholdComponentGroup).ComponentGroup;
                break;

            case fieldNum(TaxWithholdTrans_IN, TaxWithholdSettlementPeriod) :
                name = TaxWithholdHead_IN::find(_taxWithholdTrans.TaxWithholdSettlementPeriod).Period;
                break;

            case fieldNum(TaxWithholdTrans_IN, TaxWithholdRegNumber) :
                name = TaxWithholdRegNumbers_IN::find(_taxWithholdTrans.TaxWithholdRegNumber).RegistrationNumber;
                break;

            case fieldNum(TaxWithholdTrans_IN, LedgerDimensionReceivableAccount) :
                name = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_taxWithholdTrans.LedgerDimensionReceivableAccount);
                break;

            case fieldNum(TaxWithholdTrans_IN, LedgerDimension) :
                name = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_taxWithholdTrans.LedgerDimension);
                break;
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTDSTCSAmountPerInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets TDSTCS amount per invoice line.
    /// </summary>
    /// <param name="_custTransOpenLine">
    /// The cust transaction open line.
    /// </param>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    /// <returns>
    /// The instance of the <c>AmountCur</c> class.
    /// </returns>
    public static AmountCur getTDSTCSAmountPerInvoiceLine(
        CustTransOpenLine _custTransOpenLine,
        TaxWithholdCodeType_IN _taxType)
    {
        TaxWithholdTrans_IN     taxWithholdTrans;
        CustInvoiceTrans        custInvoiceTrans;
        CustInvoiceLineIdRef    custInvoiceLineIdRef;
        AmountCur               tcsTdsAmount;

        // For others like EntityType::MarkupTrans, TCS/TDS will show ZERO.
        select firstonly RecId from custInvoiceLineIdRef
            where custInvoiceLineIdRef.RecId      == _custTransOpenLine.CustInvoiceLineIdRef
               && custInvoiceLineIdRef.EntityType == CustInvoiceLineType::Customer
            join RecId from custInvoiceTrans
                where custInvoiceTrans.CustInvoiceLineIdRef == custInvoiceLineIdRef.RecId
            join sum(TaxWithholdAmountCur) from taxWithholdTrans
                where taxWithholdTrans.CustInvoiceTrans == custInvoiceTrans.RecId
                   && taxWithholdTrans.TaxType == _taxType;

        // TDS is negative.
        switch (_taxType)
        {
            case TaxWithholdCodeType_IN::TDS:
                 tcsTdsAmount = -abs(taxWithholdTrans.TaxWithholdAmountCur);
                break;
            case TaxWithholdCodeType_IN::TCS:
                 tcsTdsAmount = abs(taxWithholdTrans.TaxWithholdAmountCur);
                break;
            default:
                break;
        }
        return tcsTdsAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWithholdTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total withhold tax amount for given voucher and transaction date.
    /// </summary>
    /// <param name="_oldVoucher">
    /// A voucher to select the record.
    /// </param>
    /// <param name="_transDate">
    ///  Transaction date to calculate.
    /// </param>
    /// <param name="_accountNum">
    ///  Account number to calculate.
    /// </param>
    /// <returns>
    ///  Total tax amount.
    /// </returns>
    public static TaxWithholdAmountCur  getWithholdTaxAmount(
        Voucher     _oldVoucher,
        date        _transDate,
        AccountNum  _accountNum)
    {
        TaxWithholdTrans_IN         taxWithholdTrans;
        TaxWithholdAmountCur        taxAmount;

        while select AdjustedTaxWithholdAmount, TaxWithholdAmountCur from taxWithholdTrans
            where taxWithholdTrans.Voucher      == _oldVoucher
               && taxWithholdTrans.TransDate    == _transDate
               && (taxWithholdTrans.CustAccount == _accountNum
               ||  taxWithholdTrans.VendAccount == _accountNum)
        {
            taxWithholdTrans.TaxWithholdAmountCur = taxWithholdTrans.AdjustedTaxWithholdAmount ?
                                                    taxWithholdTrans.AdjustedTaxWithholdAmount : taxWithholdTrans.TaxWithholdAmountCur;
            taxAmount += taxWithholdTrans.TaxWithholdAmountCur;
        }
        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxWHTTransByVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the record of <c> TaxWithholdTrans_IN </c> table for the specified Voucher.
    /// </summary>
    /// <param name="_voucher">
    /// The Voucher used to find the specific record
    /// </param>
    /// <param name="_transDate">
    /// The _transDate used to find the specific record
    /// </param>
    /// <returns>
    /// returns true if found
    /// </returns>
    public static boolean hasTaxWHTTransByVoucher(Voucher _voucher, TransDate _transDate)
    {
        if (_voucher && _transDate)
        {
            return (select firstonly RecId
                from taxWithholdTrans_IN
                where taxWithholdTrans_IN.Voucher == _voucher
                   && taxWithholdTrans_IN.TransDate == _transDate).RecId != 0;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSummaryFieldMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether summary field mandatory  or not .
    /// </summary>
    /// <param name="_fieldId">
    /// A unique field id.
    /// </param>
    /// <returns>
    /// Return true if mandatory.
    /// </returns>
    static boolean isSummaryFieldMandatory(FieldId _fieldId)
    {
        return conFind(TaxWithholdTrans_IN::mandatorySummaryFieldIds(), _fieldId) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isThresholdExceededForAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether threshold has not exceeded for the given taxWithHoldGroup.
    /// </summary>
    /// <param name="_accountNum">
    /// A account number value.
    /// </param>
    /// <param name="_taxWithholdGroup">
    /// A TaxWithholdGroup value.
    /// </param>
    /// <param name="_transDate">
    /// A TransDate value.
    /// </param>
    /// <returns>
    /// Return true if threshold has not exceeded, otherwise false.
    /// </returns>
    public static boolean isThresholdExceededForAccount(
        AccountNum          _accountNum,
        TaxWithholdGroup    _taxWithholdGroup,
        TransDate           _transDate)
    {
        TaxWithholdDesignerTable_IN     taxWithholdDesignerTable;
        TaxWithholdTable                taxWithholdTableLoc;
        TaxWithholdThresholdLimit_IN    taxWithholdThresholdLimit;
        TaxWithholdTrans_IN             taxWithholdTransLoc;
        boolean                         ret = false;

        select FromDate, ToDate, RecId
            from taxWithholdThresholdLimit
            where (!taxWithholdThresholdLimit.FromDate
                || (taxWithholdThresholdLimit.FromDate               <= _transDate
                && taxWithholdThresholdLimit.ToDate                  >= _transDate))
        join TaxWithholdCode from taxWithholdDesignerTable order by id
            where taxWithholdDesignerTable.TaxWithholdGroup == _taxWithholdGroup
        exists join TaxWithholdComponent_IN from taxWithholdTableLoc
            where taxWithholdTableLoc.TaxWithholdCode == taxWithholdDesignerTable.TaxWithholdCode
                && taxWithholdTableLoc.TaxWithholdComponent_IN == taxWithholdThresholdLimit.TaxWithholdComponent;

        if (taxWithholdThresholdLimit.RecId != 0)
        {
            select firstOnly RecId, TaxWithholdComponent, TransDate from taxWithholdTransLoc
                where (taxWithholdTransLoc.VendAccount              == _accountNum
                    || taxWithholdTransLoc.CustAccount              == _accountNum)
                    && taxWithholdTransLoc.TaxWithholdGroup         == _taxWithholdGroup
                    && taxWithholdTransLoc.TaxWithholdCalculated    == true
            join TaxWithholdCode from taxWithholdDesignerTable order by id
                where taxWithholdDesignerTable.TaxWithholdGroup == _taxWithholdGroup
                    && taxWithholdTransLoc.TaxWithholdCode       == taxWithholdDesignerTable.TaxWithholdCode
            exists join TaxWithholdComponent_IN from taxWithholdTableLoc
                where taxWithholdTableLoc.TaxWithholdCode == taxWithholdDesignerTable.TaxWithholdCode
            exists join FromDate, ToDate, RecId
                from taxWithholdThresholdLimit
                where taxWithholdThresholdLimit.TaxWithholdComponent    == taxWithholdTableLoc.TaxWithholdComponent_IN
                    && taxWithholdTransLoc.TransDate                     >= taxWithholdThresholdLimit.FromDate
                    && taxWithholdTransLoc.TransDate                     <= taxWithholdThresholdLimit.ToDate
                    && (!taxWithholdThresholdLimit.FromDate
                    || (taxWithholdThresholdLimit.FromDate               <= _transDate
                    && taxWithholdThresholdLimit.ToDate                  >= _transDate));

            ret = (taxWithholdTransLoc.RecId == 0);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mandatorySummaryFieldIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns a container which contains differents fields Id.
    /// </summary>
    /// <returns>
    /// A container which contains differents fields Id.
    /// </returns>
    static container mandatorySummaryFieldIds()
    {
        return [new SysDictField(tableNum(TaxWithholdTrans_IN),fieldNum(TaxWithholdTrans_IN, TransDate),1).id(),
                new SysDictField(tableNum(TaxWithholdTrans_IN),fieldNum(TaxWithholdTrans_IN, Voucher),1).id(),
                new SysDictField(tableNum(TaxWithholdTrans_IN),fieldNum(TaxWithholdTrans_IN, TaxWithholdCode),1).id(),
                new SysDictField(tableNum(TaxWithholdTrans_IN),fieldNum(TaxWithholdTrans_IN, TaxWithholdAmount),1).id(),
                new SysDictField(tableNum(TaxWithholdTrans_IN),fieldNum(TaxWithholdTrans_IN, AmountOriginMST),1).id()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedFieldIdList</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates and  returns a container which contains field list.
    /// </summary>
    /// <returns>
    ///  A container which contains field list.
    /// </returns>
    static container selectedFieldIdList()
    {
        FieldId         fieldId                 = 0;
        int             selectedNumber       = 1;
        container       summaryFieldIdList      = TaxWithholdTrans_IN::summarySelectedFieldIdList();
        container       selectedFieldIdList;

        while (selectedNumber <= conLen(summaryFieldIdList))
        {
            fieldId = conPeek(summaryFieldIdList, selectedNumber);
            if (TaxWithholdTrans_IN::fieldEnabled(fieldId))
            {
                selectedFieldIdList += fieldId;
            }
            selectedNumber ++;
        }
        return selectedFieldIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarySelectedFieldIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and  returns a container which contains field ids.
    /// </summary>
    /// <returns>
    /// A container which contains field list.
    /// </returns>
    static container summarySelectedFieldIdList()
    {
        int             i,h,j;
        container       fList;
        SysDictField    sysDictField;
        DictFieldGroup  dictFieldGroup;
        DictTable       dictTable = new DictTable(tableNum(TaxWithholdTrans_IN));

        for (i=1;i<=dictTable.fieldGroupCnt();i++)
        {
            if (dictTable.fieldGroup(i) == tableFieldgroupStr(TaxWithholdTrans_IN, WithholdingTaxSelectedFields))
            {
                dictFieldGroup = new DictFieldGroup(tableNum(TaxWithholdTrans_IN),dictTable.fieldGroup(i));
                for (h=1;h<=dictFieldGroup.numberOfFields();h++)
                {
                    sysDictField = new SysDictField(tableNum(TaxWithholdTrans_IN), dictFieldGroup.field(h));
                    for (j=1; j <= sysDictField.arraySize(); j++)
                    {
                        fList += new SysDictField(tableNum(TaxWithholdTrans_IN), dictFieldGroup.field(h), j).id();
                    }
                }
            }
        }
        return fList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns the sum of TaxWithholdAmountCur from the <c> TaxWithholdTrans_IN </c> table for the specified Voucher.
    /// </summary>
    /// <param name="_taxWithholdCodeType">
    /// The TaxWithholdCodeType_IN used to find the specific record
    /// </param>
    /// <param name="_voucher">
    /// The Voucher used to find the specific record
    /// </param>
    /// <param name="_transDate">
    /// The TransDate used to find the specific record
    /// </param>
    /// <returns>
    /// returns table buffer if found
    /// </returns>
    public static TaxWithholdAmountCur taxWithholdAmountCur(TaxWithholdCodeType_IN _taxWithholdCodeType, Voucher _voucher, TransDate _transDate)
    {
        TaxWithholdTrans_IN taxWithholdTrans_IN;
        if (_voucher)
        {
            select sum(TaxWithholdAmountCur)
                from taxWithholdTrans_IN
                where taxWithholdTrans_IN.Voucher   == _voucher
                   && taxWithholdTrans_IN.TaxType   == _taxWithholdCodeType
                   && taxWithholdTrans_IN.TransDate == _transDate;
        }
        return taxWithholdTrans_IN.TaxWithholdAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdAmountForVoucherAndTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax withhold Amount in transaction currency for specified voucher and transdate.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher of transaction.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// returns tax withhold Amount in transaction currency for specified voucher and transdate.
    /// </returns>
    public static TaxWithholdAmountCur taxWithholdAmountForVoucherAndTransDate(
        Voucher     _voucher,
        TransDate   _transDate)
    {
        TaxWithholdTrans_IN taxWithholdTrans_IN;
        if (_voucher)
        {
            select sum(TaxWithholdAmountCur)
                from taxWithholdTrans_IN
                where taxWithholdTrans_IN.Voucher   == _voucher
                   && taxWithholdTrans_IN.TransDate == _transDate;
        }
        return taxWithholdTrans_IN.TaxWithholdAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total withhold tax amount for given query.
    /// </summary>
    /// <param name="_query">
    /// Qyery to calculate withholding tax amount.
    /// </param>
    /// <returns>
    /// Total withholding tax amount.
    /// </returns>
    public static AmountCur taxWithholdAmounts(Query    _query)
    {
        TaxWithholdTrans_IN     taxWithholdTrans;
        Query                   taxQuery;
        QueryRun                taxQueryRun;
        AmountCur               taxAmountCur;
        QueryBuildDataSource    qB;
        boolean                 companyCurrency;

        companyCurrency = false;

        taxQuery = new Query();
        SysQuery::mergeRanges(taxQuery, _query);
        qB = taxQuery.dataSourceNo(1);

        qB.addSelectionField(fieldNum(TaxWithholdTrans_IN, TaxWithholdAmountCur), SelectionField::Sum);
        qB.addRange(fieldNum(TaxWithholdTrans_IN, AdjustedTaxWithholdAmount)).value(queryValue('0'));
        taxQueryRun = new QueryRun(taxQuery);

        while (taxQueryRun.next())
        {
            taxWithholdTrans = taxQueryRun.getNo(1);
            taxAmountCur += taxWithholdTrans.TaxWithholdAmountCur;
        }
        qB.addSelectionField(fieldNum(TaxWithholdTrans_IN, AdjustedTaxWithholdAmount), SelectionField::Sum);
        qB.findRange(fieldNum(TaxWithholdTrans_IN, AdjustedTaxWithholdAmount)).value(strFmt('!%1',queryValue('0')));
        taxQueryRun = new QueryRun(taxQuery);

        while (taxQueryRun.next())
        {
            taxWithholdTrans = taxQueryRun.getNo(1);
            taxAmountCur += taxWithholdTrans.AdjustedTaxWithholdAmount;
        }

        return taxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmountCurrency_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total amount currency.
    /// </summary>
    /// <param name="_invoiceId">
    /// The invoice id.
    /// </param>
    /// <returns>
    /// The instance of the <c>AmountCur</c> class.
    /// </returns>
    public static AmountCur totalAmountCurrency_IN(CustInvoiceId _invoiceId)
    {
        CustTransOpenLine       custTransOpenLineLoc;
        CustTransOpenLineWHT_IN custTransOpenLineWHTLoc;
        TaxWithholdTrans_IN     taxWithholdTransLoc;

        select RecId from taxWithholdTransLoc
            where taxWithholdTransLoc.Invoice == _invoiceId
            join CustTransOpenLine from custTransOpenLineWHTLoc
                where custTransOpenLineWHTLoc.TaxWithholdTrans == taxWithholdTransLoc.RecId
            join sum(AmountCur) from custTransOpenLineLoc
                where custTransOpenLineLoc.RecId == custTransOpenLineWHTLoc.CustTransOpenLine;

        return custTransOpenLineLoc.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChallanInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates challan information for given <c> tTaxWithholdSettleTrans_IN </c> table.
    /// </summary>
    /// <param name="_taxWithholdSettleTrans">
    /// A buffer of <c>TaxWithholdSettleTrans_IN</c> table.
    /// </param>
    /// <param name="_accountNum">
    /// Account number to find the record.
    /// </param>
    /// <param name="_chequeNumber">
    /// Cheque number is used to find the record.
    /// </param>
    public static void updateChallanInformation(
        TaxWithholdSettleTrans_IN   _taxWithholdSettleTrans,
        AccountNum                  _accountNum,
        BankChequeNum               _chequeNumber)
    {
        TaxWithholdTrans_IN    taxWithholdTransLoc;

        ttsbegin;
        update_recordset taxWithholdTransLoc
            setting BankName        = _taxWithholdSettleTrans.BankName,
                    BookEntry       = _taxWithholdSettleTrans.BookEntry,
                    bsrCode         = _taxWithholdSettleTrans.bsrCode,
                    ChallanDate     = _taxWithholdSettleTrans.ChallanDate,
                    ChallanNumber   = _taxWithholdSettleTrans.ChallanNumber,
                    MinorHeadCode   = _taxWithholdSettleTrans.MinorHeadCode,
                    Text            = _taxWithholdSettleTrans.Text,
                    LedgerVoucher   = _taxWithholdSettleTrans.LedgerVoucher,
                    Authority       = _accountNum,
                    ChequeNum       = _chequeNumber
            where taxWithholdTransLoc.Voucher         == _taxWithholdSettleTrans.OrigVoucher
               && taxWithholdTransLoc.SettledVoucher  == _taxWithholdSettleTrans.Voucher
               && taxWithholdTransLoc.IsTaxInterim == NoYes::No;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWithholdingTaxAmountCur_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets withholding tax amount for a specific voucher.
    /// </summary>
    /// <param name="_purchId">
    /// Purchase table id.
    /// </param>
    /// <param name="_voucher">
    /// Voucher number of withholding tax trans.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date of withholding tax trans.
    /// </param>
    /// <returns>
    /// Total amount for all withholding tax within this voucher.
    /// </returns>
    public static AmountCur getWithholdingTaxAmountCur_IN(PurchId _purchId, Voucher _voucher, TransDate _transDate)
    {
        TaxWithholdTrans_IN taxWithholdTransIN;

        select sum(TaxWithholdAmountCur) from taxWithholdTransIN
            where taxWithholdTransIN.PurchId == _purchId
                && taxWithholdTransIN.Voucher == _voucher
                && taxWithholdTransIN.TransDate == _transDate;

        return taxWithholdTransIN.TaxWithholdAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustedTaxWithholdAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns the sum of AdjustedTaxWithholdAmount from the <c> TaxWithholdTrans_IN </c> table for the specified voucher and date.
    /// </summary>
    /// <param name="_taxWithholdCodeType">
    /// The TaxWithholdCodeType_IN used to find the specific records
    /// </param>
    /// <param name="_voucher">
    /// The Voucher used to find the specific records
    /// </param>
    /// <param name="_transDate">
    /// The TransDate used to find the specific records
    /// </param>
    /// <returns>
    /// returns the sum of AdjustedTaxWithholdAmount.
    /// </returns>
    internal static AmountCur adjustedTaxWithholdAmount(
        TaxWithholdCodeType_IN _taxWithholdCodeType,
        Voucher _voucher,
        TransDate _transDate)
    {
        TaxWithholdTrans_IN taxWithholdTrans_IN;
        if (_voucher)
        {
            select sum(AdjustedTaxWithholdAmount)
                from taxWithholdTrans_IN
                where taxWithholdTrans_IN.Voucher   == _voucher
                   && taxWithholdTrans_IN.TaxType   == _taxWithholdCodeType
                   && taxWithholdTrans_IN.TransDate == _transDate;
        }
        return taxWithholdTrans_IN.AdjustedTaxWithholdAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the withholding tax type <c> TaxWithholdCodeType_IN </c> from the <c> TaxWithholdTrans_IN </c> table for the specified voucher and date.
    /// </summary>
    /// <param name="_voucher">
    /// The Voucher used to find the specific records.
    /// </param>
    /// <param name="_transDate">
    /// The TransDate used to find the specific records.
    /// </param>
    /// <returns>
    /// <c> TaxWithholdCodeType_IN </c> instance.
    /// </returns>
    internal static TaxWithholdCodeType_IN taxWithholdTransType(
        Voucher _voucher,
        TransDate _transDate)
    {
        TaxWithholdTrans_IN taxWithholdTrans_IN;
        if (_voucher)
        {
            select firstonly TaxType
                from taxWithholdTrans_IN
                where taxWithholdTrans_IN.Voucher   == _voucher
                   && taxWithholdTrans_IN.TransDate == _transDate;
        }
        return taxWithholdTrans_IN.TaxType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes vendor account for vendor transactions.
    /// </summary>
    private void initVendAccount()
    {
        if (!this.VendAccount && this.SourceTableId == tableNum(VendInvoiceTrans))
        {
            VendInvoiceTrans vendInvoiceTrans;
            VendInvoiceJour vendInvoiceJour;
            VendTable vendTable;

            select firstonly AccountNum from vendTable
                join RecId from vendInvoiceJour
                    where vendInvoiceJour.InvoiceAccount == vendTable.AccountNum
                join RecId from vendInvoiceTrans
                    where vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                        && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                        && vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId
                        && vendInvoiceTrans.numberSequenceGroup == vendInvoiceJour.numberSequenceGroup
                        && vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId
                        && vendInvoiceTrans.RecId == this.SourceRecId;

            this.VendAccount = vendTable.AccountNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBySourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>TaxWithholdTrans_IN</c> table exists for the given document id.
    /// </summary>
    /// <param name="_documentTableId">
    /// The table Id of the transaction line table.
    /// </param>
    /// <param name="_documentId">
    /// The Document ID for a transaction.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existBySourceId(RefTableId _documentTableId, RefRecId _documentId)
    {
        TaxWithholdTrans_IN taxWithholdTrans;

        select firstonly RecId from taxWithholdTrans
            where taxWithholdTrans.SourceRecId == _documentId
                && taxWithholdTrans.SourceTableId == _documentTableId;

        return taxWithholdTrans.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63805</DeveloperDocumentation>
	<Label>@SYS81714</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TaxWithholdGroup</TitleField1>
	<TitleField2>TaxWithholdCode</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdBaseAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WithholdBaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdAmountOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxTaxWithholdAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@SYS31242</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Exempt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ChallanInformation</Name>
			<Label>@GLS6139</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BSRCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookEntry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChallanDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChallanNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateIssueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Nameofdeductee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PAN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettledVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Authority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PANReferenceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PANStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CurrentCurrency</Name>
			<Label>@SYS17756</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdBaseAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustedBaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustedTaxWithholdAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefaultCurrency</Name>
			<Label>@SYS23938</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WithholdBaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inquiry</Name>
			<Label>@SYS1657</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdBaseAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NatureOfAssessee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous_IN</Name>
			<Label>@SYS73543</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimensionReceivableAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdRegNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS30289</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Invoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCalculated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverlookThreshold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RateOfDeduction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecoverableAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NatureOfAssessee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRepCounter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdSettlementPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdComponentGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdComponent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Settled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reason</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ComponentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionReversal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChequeNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecoverableCertificateNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProvisionalReceiptNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SectionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Text</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcknowledgermentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionToRemittance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxApplicability</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NatureOfRemittance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinorHeadCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAutoGenerated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustVendTransInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransPaymId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettlementVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS318380</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxInformation_IN</Name>
			<Label>@SYS33550</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTax</Name>
			<Label>@SYS33817</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTaxAvailableFields</Name>
			<Label>@SYS30545</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AcknowledgermentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConcessionCertificateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TurnoverThreshold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustedBaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustedTaxWithholdAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdAmountOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BSRCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateIssueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateReceivedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecoverableCertificateNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChallanDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChallanNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChequeNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Exempt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Invoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Nameofdeductee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NatureOfAssessee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookEntry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PAN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdSettlementPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProvisionalReceiptNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SectionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdRegNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdComponent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdComponentGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimensionReceivableAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInternalDefaultGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCalcAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reason</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTaxCurrency</Name>
			<Label>@SYS81746</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdAmountOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxTaxWithholdAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTaxSelectedFields</Name>
			<Label>@SYS24159</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountOriginMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTaxTotalFields</Name>
			<Label>@TaxTransactionInquiry:WithholdingTaxTotalFields</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountOriginMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdBaseAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustedTaxWithholdAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustedBaseAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AcknowledgermentNumber</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdAcknowledgementNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AdjustedBaseAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS67702</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AdjustedTaxWithholdAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS4009544</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AdvancePayment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS33632</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountOriginMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS6928</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Authority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendBankAccountId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BookEntry</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS6080</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BSRCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BSRCode_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcUncalcPostedTrans</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CalcUncalcPostedTrans_IN</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CertificateIssueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS6082</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdCertificateNumber_IN</ExtendedDataType>
			<Label>@GLS5770</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CertificateReceivedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS5746</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ChallanDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS6079</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ChallanNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdChallanNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ChequeNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankChequeNum</ExtendedDataType>
			<Label>@GLS6553</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ComponentStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdComponentStatus_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConcessionCertificateNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CertificateNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostLedgerVoucher</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CountryRegionToRemittance</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdCountryToRemitRefRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CPOrigInvoiceRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS62053</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustVendTransInvoiceId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Exempt</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdExempt_IN</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HeadingRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>HeadingTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Invoice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<Label>@SYS4726</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceVoucher</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPartOfTurnOver</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IsPartOfTurnOver_IN</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS24500</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimensionReceivableAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@GLS5360</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerVoucher</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LineStatus</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdReasonCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MinorHeadCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdMinorHeadCode_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Nameofdeductee</Name>
			<AssetClassification>End User Identifiable Information (EUII)</AssetClassification>
			<ExtendedDataType>AccountName</ExtendedDataType>
			<Label>@GLS6074</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NatureOfAssessee</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NatureOfAssessee_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NatureOfRemittance</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWitholdNatureOfRemittanceRefRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverlookThreshold</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS5361</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PAN</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PANNumber_IN</ExtendedDataType>
			<Label>@GLS5039</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PANReferenceNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PANReferenceNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PANStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PANStatus_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymCompany</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PersonDesignation</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PersonFathersName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PersonName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Posted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS22361</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProvisionalReceiptNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdProvisionalReceiptNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PurchIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RateOfDeduction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@SYS40283</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Reason</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdReasonCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RecoverableAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS6202</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RecoverableCertificateNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdCertificateNumber_IN</ExtendedDataType>
			<Label>@GLS6552</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReturnLineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnVoucher</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SalesIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SectionCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdSection_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Settled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS79585</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SettledVoucher</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SettlementVoucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Source</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxModuleTypeId</ExtendedDataType>
			<EnumType>TaxModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SourceTransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceTransRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceTransTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceTransVoucher</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxApplicability</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdTaxApplicability_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxAutoGenerated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAutoGenerated</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TaxRepCounter</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdVersion_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxTaxWithholdAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmountCur</ExtendedDataType>
			<Label>@SYS81752</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdCodeType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmountCur</ExtendedDataType>
			<Label>@SYS81689</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdAmountOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdBaseCur</ExtendedDataType>
			<Label>@SYS21950</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdBaseAmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdBaseCur</ExtendedDataType>
			<Label>@SYS21950</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdCalcAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmountCur</ExtendedDataType>
			<Label>@SYS4009547</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxWithholdCalculated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS81757</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdComponent</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdComponentRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdComponentGroup</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdComponentGroupRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdCurrency</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS81746</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdRegNumber</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdRegNumberRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdSettlementPeriod</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdPeriodRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdValue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdValue</ExtendedDataType>
			<Label>@SYS15774</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Text</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ChallanInformationText_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ThresholdValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValidFrom_IN</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ThresholdValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValidTo_IN</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransactionReversal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS78542</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransactionStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdTransactionstatus_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransPaymId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TurnoverThreshold</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TurnoverThreshold_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceInternalDefaultGroup</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendInvoiceInternalDefaultGroup</ExtendedDataType>
			<Label>@SYS130609</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WithholdBaseAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdBase</ExtendedDataType>
			<Label>@SYS21950</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsTaxInterim</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VoucherDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>IsPartOfTurnOverWHTComponentVendAccTransIndx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>IsPartOfTurnOver</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxWithholdComponent</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AmountOriginMST</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>LedgerTransactionVoucher_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountingDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxInquiryMap_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CostLedgerVoucher</MapField>
					<MapFieldTo>CostLedgerVoucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxWithholdMap_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>SourceRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRegulateAmountCur</MapField>
					<MapFieldTo>AdjustedTaxWithholdAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>SourceTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTaxAmountCur</MapField>
					<MapFieldTo>AdjustedTaxWithholdAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdCode</MapField>
					<MapFieldTo>TaxWithholdCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdGroup</MapField>
					<MapFieldTo>TaxWithholdGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdType</MapField>
					<MapFieldTo>TaxType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankAccountTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountId</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>AccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CPOrigCustTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CPOrigCustTrans_CustTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CPOrigCustTrans_TaxWithholdTrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CPOrigInvoiceRefRecId</Name>
					<Field>CPOrigInvoiceRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CPOrigVendTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CPOrigVendTrans_VendTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CPOrigVendTrans_TaxWithholdTrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CPOrigInvoiceRefRecId</Name>
					<Field>CPOrigInvoiceRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Currency_CurrencyCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency_CurrencyCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Currency_TaxWithholdCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency_TaxWithholdCurrency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdCurrency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>TaxWithholdCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>LedgerVoucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>InvoiceDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans_TaxWithholdTrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceTrans</Name>
					<Field>CustInvoiceTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendTransInvoiceId</Name>
					<Field>CustVendTransInvoiceId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTransRefRecId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTrans_TaxAdjustment</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdTrans_TaxAdjustment</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTransRecId</Name>
					<Field>SourceTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymCompany</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>PaymCompany</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>GeneralJournalEntry</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>GeneralJournalEntry</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>SubledgerVoucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>AccountingDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_TaxWithholdTrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimReceivableAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_1_TaxWithholdTrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimensionReceivableAccount</Name>
					<Field>LedgerDimensionReceivableAccount</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalNum</Name>
					<SourceEDT>LedgerJournalId</SourceEDT>
					<Field>JournalNum</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransPaymId</Name>
					<Field>TransPaymId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjInvoiceJour_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour_1_TaxWithholdTrans_IN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>LedgerVoucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>InvoiceDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRecId</Name>
					<Field>SourceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingTableId</Name>
					<Field>HeadingTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<SourceEDT>PurchIdBase</SourceEDT>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRecId</Name>
					<Field>SourceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingTableId</Name>
					<Field>HeadingTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<SourceEDT>SalesIdBase</SourceEDT>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SourceDocumentLine_TaxWithholdTrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdComponentGroupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdComponentGroupTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdComponentGroupTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdComponentGroupTable_IN_TaxWithholdTrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdComponentGroup</Name>
					<Field>TaxWithholdComponentGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdComponentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdComponentTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdComponentTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdComponentTable_IN_TaxWithholdTrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdComponent</Name>
					<Field>TaxWithholdComponent</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdCountryRegionToRemittance_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdCountryRegionToRemittance_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegionToRemittance</Name>
					<Field>CountryRegionToRemittance</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxWithholdGroupData</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdGroupData</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdCode</Name>
					<Field>TaxWithholdCode</Field>
					<RelatedField>TaxWithholdCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxWithholdGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdGroup</Name>
					<SourceEDT>TaxWithholdGroup</SourceEDT>
					<Field>TaxWithholdGroup</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdHead</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdHead_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdHead_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdHead_IN_TaxWithholdTrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdSettlementPeriod</Name>
					<Field>TaxWithholdSettlementPeriod</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdNatureOfRemittance_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdNatureOfRemittance_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NatureOfRemittance</Name>
					<Field>NatureOfRemittance</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdRegNumberTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdRegNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdRegNumbers_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdRegNumbers_IN_TaxWithholdTrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdRegNumber</Name>
					<Field>TaxWithholdRegNumber</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdCode</Name>
					<SourceEDT>TaxWithholdCode</SourceEDT>
					<Field>TaxWithholdCode</Field>
					<RelatedField>TaxWithholdCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>LedgerVoucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>InvoiceDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable_Authority</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable_Authority</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Authority</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>Authority</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendTransInvoiceId</Name>
					<Field>CustVendTransInvoiceId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTransRefRecId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTrans_TaxAdjustment</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdTrans_TaxAdjustment</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTransRecId</Name>
					<Field>SourceTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>