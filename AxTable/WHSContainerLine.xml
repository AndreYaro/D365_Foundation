<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSContainerLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSContainerLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>containerTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the containerTable record for the containerLine.
    /// </summary>
    /// <param name="_forUpdate">
    /// Determines if the record should be selected for update or not.
    /// </param>
    /// <returns>
    /// The containerTable record of the containerLine.
    /// </returns>
    public WHSContainerTable containerTable(boolean _forUpdate = false)
    {
        return WHSContainerTable::find(this.ShipmentId, this.ContainerId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        WHSContainerLine orig = WHSContainerLine::findByRecId(this.RecId);

        ttsbegin;

        super();

        // Update container weight if the container still exists.
        WHSContainerTable containerTable = WHSContainerTable::findByContainerId(orig.ContainerId, true);

        if (containerTable)
        {
            if (orig.ItemId)
            {
                if (this.isOnlyContainerLine())
                {
                    this.updateContainerWeightWhenDeletingLastContainerLine(containerTable);
                }
                else
                {
                    this.updateContainerWeight(containerTable, orig.Qty, 0, orig.UnitId, orig.UnitId);
                }
            }
            else
            {
                containerTable.Weight = 0;
                containerTable.update();
            }
        }

        WHSCatchWeightTagLastRegistration::registerContainerDeletion(orig.RecId);

        if (InventTable::find(orig.ItemId).isSalesProcessSerialActive()
            &&  WHSInventTable::captureSerial(orig.ItemId) == WHSRFWhenToCapture::Packing)
        {
            warning("@WAX:UnpackedContainerLineSerialExists");
        }
        
        if (WHSPackingWorkRemainingQtyUpdateOnPackingFlight::instance().isEnabled()
            && WHSPackingWorkHelper::connectedPackingWorkToLoadLineExists(orig.LoadLine))
        {
            WHSPackingWorkHelper::updatePackingWorkLineQtyRemainOnContainerLineChange(this, -orig.Qty);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOrderLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for order line number.
    /// </summary>
    /// <returns>
    /// Order line number of the container line.
    /// </returns>
    public display LineNum displayOrderLineNum()
    {
        LineNum     ret;
        WHSLoadLine loadLine = WHSLoadLine::findbyRecId(this.LoadLine);

        if (loadLine.InventTransType == InventTransType::Sales)
        {
            ret = loadLine.salesLine().LineNum;
        }
        else if (loadLine.InventTransType == InventTransType::TransferOrderShip)
        {
            ret = loadLine.inventTransferLine().LineNum;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySOLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for sales order line number.
    /// </summary>
    /// <returns>
    /// Sales order line number of the container line.
    /// </returns>
    display LineNum displaySOLineNum()
    {
        WHSLoadLine         loadLine;
        SalesLine           salesLine;

        select LineNum from salesLine
            exists join loadLine
                where salesLine.InventTransId   == loadLine.InventTransId &&
                  loadLine.RecId            == this.LoadLine;

        return salesLine.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record from a <c>WHSTmpWorkLine</c> record.
    /// </summary>
    /// <param name="_tmpWorkLine">
    /// The record to be used to initialize.
    /// </param>
    public void initFromTmpWorkLine(WHSTmpWorkLine _tmpWorkLine)
    {
        this.ContainerId        = _tmpWorkLine.ContainerId;
        this.ShipmentId         = _tmpWorkLine.ShipmentId;
        this.LoadLine           = _tmpWorkLine.LoadLineRefRecId;
        this.Qty                = _tmpWorkLine.DirectiveQty;
        this.UnitId             = _tmpWorkLine.DirectiveUOM;
        this.ItemId             = _tmpWorkLine.ItemId;
        this.InventDimId        = WHSLoadLine::findbyRecId(_tmpWorkLine.LoadLineRefRecId).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;

        super();
        
        WHSContainerTable containerTable = WHSContainerTable::findByContainerIdWithPessimisticLock(this.ContainerId);
        if (containerTable.ContainerStatus == WHSContainerStatus::Closed)
        {
            throw error("@WAX3127");
        }

        this.updateContainerWeight(containerTable, 0, this.Qty, this.UnitId, this.UnitId);
        
        if (!containerTable.nmfcCode || !containerTable.stccCode)
        {
            WHSInventTable whsInventTable = WHSInventTable::find(this.ItemId);
            containerTable.nmfcCode = containerTable.nmfcCode ? containerTable.nmfcCode : whsInventTable.displayNMFCCode();
            containerTable.stccCode = containerTable.stccCode ? containerTable.stccCode : whsInventTable.displaySTCCCode();
            containerTable.update();
        }

        // If the container type doesn't exist then assume it is a full case container scenario so use item dims instead.
        if (!WHSContainerType::exist(containerTable.ContainerTypeCode))
        {
            this.setDimensionsByItem();
        }

        if (WHSPackingWorkRemainingQtyUpdateOnPackingFlight::instance().isEnabled()
            && WHSPackingWorkHelper::connectedPackingWorkToLoadLineExists(this.LoadLine))
        {
            WHSPackingWorkHelper::updatePackingWorkLineQtyRemainOnContainerLineChange(this, this.Qty);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventDim record for the containerLine.
    /// </summary>
    /// <returns>
    /// Returns the inventDim based on the containerLine inventDimId
    /// </returns>
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergedClosedInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full inventDim of the containerLine inventory once it is closed.
    /// </summary>
    /// <returns>
    /// Returns the inventDim of where the inventory is after being closed.
    /// </returns>
    /// <remarks>
    /// The containe table holds the location and license plate values for where the inventory is picked.
    /// </remarks>
    public InventDim mergedClosedInventDim()
    {
        WHSContainerTable   containerTable;
        InventDim           containerInventDim;
        InventDim           mergedInventDim;

        containerTable = this.containerTable();

        // Only create dim if container is closed and has the inventDimId value filled.
        if (containerTable.ContainerStatus == WHSContainerStatus::Closed
        &&  containerTable.InventDimId)
        {
            containerInventDim = InventDim::find(containerTable.InventDimId);
            mergedInventDim = this.inventDim();
            mergedInventDim.wmsLocationId = containerInventDim.wmsLocationId;
            mergedInventDim.LicensePlateId = containerInventDim.LicensePlateId;
            mergedInventDim = InventDim::findOrCreate(mergedInventDim);
        }

        return mergedInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionsByItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets physical dimensions of the container line from item dimensions.
    /// </summary>
    public void setDimensionsByItem()
    {
        WHSContainerTable   containerTable;

        ttsbegin;

        containerTable = WHSContainerTable::find(this.ShipmentId, this.ContainerId, true);

        EcoResIPhysicalDimensions physicalDimensions = EcoResPhysicalProductDimensions::retrievePackingDimensions(this.itemKey().productKey(), this.UnitId);

        if (physicalDimensions)
        {
            InventParameters inventParameters = InventParameters::find();

            if (physicalDimensions.parmLengthUnitSymbol() != inventParameters.LengthUnitSymbol)
            {
                physicalDimensions = EcoResUnitConvertedPhysicalDimensions::createInstance(physicalDimensions, physicalDimensions.parmMassUnitSymbol(), inventParameters.LengthUnitSymbol, physicalDimensions.parmVolumeUnitSymbol());
            }

            containerTable.Height  = physicalDimensions.parmHeight();
            containerTable.Width   = physicalDimensions.parmWidth();
            containerTable.Length  = physicalDimensions.parmDepth();

            if (!containerTable.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotUpdateRecordInTable", tablePName(WHSContainerTable)));
            }
            else
            {
                containerTable.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        UnitOfMeasureSymbol     origUOM = this.orig().UnitId;
        Qty                     origQty = this.orig().Qty;

        super();

        // This only works for packing items, not containers. Fix later
        if (origQty != this.Qty || origUOM != this.UnitId)
        {
            WHSContainerTable containerTable = WHSContainerTable::find(this.ShipmentId, this.ContainerId, true);
            this.updateContainerWeight(containerTable, origQty, this.Qty, origUOM, this.UnitId);
        }

        if (origQty != this.Qty && WHSPackingWorkRemainingQtyUpdateOnPackingFlight::instance().isEnabled()
            && WHSPackingWorkHelper::connectedPackingWorkToLoadLineExists(this.LoadLine))
        {
            WHSPackingWorkHelper::updatePackingWorkLineQtyRemainOnContainerLineChange(this, this.Qty - origQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContainerWeight</Name>
				<Source><![CDATA[
    private void updateContainerWeight(WHSContainerTable _containerTable, Qty _origQty, Qty _newQty, UnitOfMeasureSymbol _origUOM, UnitOfMeasureSymbol _newUOM)
    {
        Weight diffWeight = this.calculateContainerWeightDifference(_origQty, _newQty, _origUOM, _newUOM);

        ttsbegin;

        _containerTable.Weight += diffWeight;

        // When removing the container lines, the weight of the items is subtracted from the container weight, which could then be negative.
        if (_containerTable.Weight < 0)
        {
            _containerTable.Weight = 0;
        }

        if (!_containerTable.validateWrite())
        {
            // ContainerTypeCode is not set in all cases, even though it is mandatory on the table field, therefore an error should not be thrown in that case.
            if (_containerTable.ContainerTypeCode != '')
            {
                throw error(strFmt("@WAX:WHSCannotUpdateRecordInTable", tablePName(WHSContainerTable)));
            }
        }
        else
        {
            _containerTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateContainerWeightDifference</Name>
				<Source><![CDATA[
    private Weight calculateContainerWeightDifference(Qty _origQty, Qty _newQty, UnitOfMeasureSymbol _origUOM, UnitOfMeasureSymbol _newUOM)
    {
        InventParameters    inventParameters = InventParameters::find();
        EcoResProductKey    productKey = this.itemKey().productKey();

        Weight	origWeight  = EcoResPhysicalProductDimensions::calculatePackingWeight(productKey, _origQty, _origUOM, inventParameters.MassUnitSymbol);
        Weight  newWeight   = EcoResPhysicalProductDimensions::calculatePackingWeight(productKey, _newQty, _newUOM, inventParameters.MassUnitSymbol);

        Weight  diffWeight = newWeight - origWeight;

        return diffWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnlyContainerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if current container line is the only container line in the container.
    /// </summary>
    /// <returns>true if the container line is the only container line in the container; otherwise false.</returns>
    private boolean isOnlyContainerLine()
    {
        boolean ret = true;

        WHSContainerLine additionalContainerLine;

        select firstonly RecId from additionalContainerLine
            where additionalContainerLine.ContainerId	== this.ContainerId
                && additionalContainerLine.RecId		!= this.RecId;

        if (additionalContainerLine)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContainerWeightWhenDeletingLastContainerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update container weight when the container line is being deleted.
    /// </summary>
    private void updateContainerWeightWhenDeletingLastContainerLine(WHSContainerTable _containerTable)
    {
        WHSContainerType	containerType	= WHSContainerType::find(_containerTable.ContainerTypeCode);

        ttsbegin;

        _containerTable.Weight = containerType.TareWeight;

        if (!_containerTable.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotUpdateRecordInTable", tablePName(WHSContainerTable)));
        }
        else
        {
            _containerTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (WHSContainerTable::find(this.ShipmentId, this.ContainerId).ContainerStatus == WHSContainerStatus::Closed)
        {
            ret = checkFailed("@WAX2374");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (WHSContainerTable::find(this.ShipmentId, this.ContainerId).ContainerStatus == WHSContainerStatus::Closed)
        {
            ret = checkFailed("@WAX3127");
        }
        if (this.Qty > this.orig().Qty)
        {
            ret = checkFailed("@WAX2334");
        }
        if (InventTable::find(this.ItemId).isItemSerialNumberActivated())
        {
            ret = checkFailed("@WAX2335");
        }
        if (this.Qty <= 0)
        {
            ret = checkFailed("@WAX2910");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContainerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the given <c>WHSContainerLine</c> record.
    /// </summary>
    /// <param name="_shipmentId">
    /// The shipment the container is on.
    /// </param>
    /// <param name="_containerId">
    /// The container Id the <c>WHSContainerLine</c> is part of.
    /// </param>
    /// <param name="_itemId">
    /// The item id of the <c>WHSContainerLine</c>.
    /// </param>
    /// <param name="_qty">
    /// The qty value of the <c>WHSContainerLine</c>.
    /// </param>
    /// <param name="_unitId">
    /// The unit of meeasure the qty value is stored in.
    /// </param>
    /// <param name="_loadLine">
    /// The RecId of the <c>WHSLoadLine</c> that the <c>WHSContainerLine</c> is related to.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventDimId of the inventory the <c>WHSContainerLine</c> is storing.
    /// </param>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the writeContainerLine method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public static void createContainerLine(
        WHSShipmentId        _shipmentId,
        WHSContainerId       _containerId,
        ItemId               _itemId,
        Qty                  _qty,
        UnitOfMeasureSymbol  _unitId,
        WHSLoadLineRefRecId  _loadLine,
        InventDimId          _inventDimId)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _itemId);

        WHSContainerLine::saveContainerLine(_shipmentId,
                                            _containerId,
                                            _itemId,
                                            _qty,
                                            _unitId,
                                            _loadLine,
                                            _inventDimId,
                                            0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeContainerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the given <c>WHSContainerLine</c> record.
    /// </summary>
    /// <param name="_shipmentId">
    /// The shipment the container is on.
    /// </param>
    /// <param name="_containerId">
    /// The container Id the <c>WHSContainerLine</c> is part of.
    /// </param>
    /// <param name="_itemId">
    /// The item id of the <c>WHSContainerLine</c>.
    /// </param>
    /// <param name="_qty">
    /// The qty value of the <c>WHSContainerLine</c>.
    /// </param>
    /// <param name="_unitId">
    /// The unit of meeasure the qty value is stored in.
    /// </param>
    /// <param name="_capturedWeight">
    /// The captured weight for the catch weight item.
    /// </param>
    /// <param name="_loadLine">
    /// The RecId of the <c>WHSLoadLine</c> that the <c>WHSContainerLine</c> is related to.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventDimId of the inventory the <c>WHSContainerLine</c> is storing.
    /// </param>
    /// <returns>
    /// The written <c>WHSContainerLine</c> record.
    /// </returns>
    [Hookable(false)]
    public static WHSContainerLine writeContainerLine(
        WHSShipmentId        _shipmentId,
        WHSContainerId       _containerId,
        ItemId               _itemId,
        Qty                  _qty,
        UnitOfMeasureSymbol  _unitId,
        WHSCapturedWeight    _capturedWeight,
        WHSLoadLineRefRecId  _loadLine,
        InventDimId          _inventDimId)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightHandlingWeightLogic(funcName(), _itemId, _capturedWeight))
        {
            return WHSContainerLine::saveContainerLine(_shipmentId,
                                                       _containerId,
                                                       _itemId,
                                                       _qty,
                                                       _unitId,
                                                       _loadLine,
                                                       _inventDimId,
                                                       _capturedWeight);
        }

        WHSContainerLine::createContainerLine(_shipmentId,
                                            _containerId,
                                            _itemId,
                                            _qty,
                                            _unitId,
                                            _loadLine,
                                            _inventDimId);

        // Must return a container line that was either just created or increased. Needed for additional Catch Weight functions.
        return WHSContainerLine::find(_shipmentId, _containerId, _inventDimId, _loadLine, _unitId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveContainerLine</Name>
				<Source><![CDATA[
    private static WHSContainerLine saveContainerLine(
        WHSShipmentId        _shipmentId,
        WHSContainerId       _containerId,
        ItemId               _itemId,
        Qty                  _qty,
        UnitOfMeasureSymbol  _unitId,
        WHSLoadLineRefRecId  _loadLine,
        InventDimId          _inventDimId,
        WHSCapturedWeight    _capturedWeight)
    {
        WHSCatchWeightTelemetryLogger::logCatchWeightConflictingQuantities(funcName(), _itemId, _qty, _capturedWeight);
        
        ttsbegin;
        
        WHSContainerLine containerLine = WHSContainerLine::find(_shipmentId, _containerId, _inventDimId, _loadLine, _unitId, true);

        if (containerLine.RecId == 0)
        {
            containerLine.ShipmentId        = _shipmentId;
            containerLine.ContainerId       = _containerId;
            containerLine.ItemId            = _itemId;
            containerLine.Qty               = _qty;
            containerLine.UnitId            = _unitId;
            containerLine.LoadLine          = _loadLine;
            containerLine.InventDimId       = _inventDimId;
            containerLine.CapturedWeight    = _capturedWeight;
        }
        else
        {
            containerLine.Qty += _qty;
            containerLine.CapturedWeight += _capturedWeight;
        }

        if (containerLine.canCreateContainerLine())
        {
            containerLine.write();
        }
        else
        {
            throw error("@SYS18447");
        }

        ttscommit;

        return containerLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateContainerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that container line can be created.
    /// </summary>
    /// <returns>true if container line can be created; false, otherwise.</returns>
    protected boolean canCreateContainerLine()
    {
        return this.checkSerialNumberUnique();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a specific <c>WHSContainerLine</c> record exists with given parameters.
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment id of the record.
    /// </param>
    /// <param name="_containerId">
    /// Container id of the record.
    /// </param>
    /// <param name="_inventDimId">
    /// Dimension id of the record.
    /// </param>
    /// <param name="_loadLine">
    /// Load line id of the record.
    /// </param>
    /// <param name="_uom">
    /// UOM of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(
        WHSShipmentId       _shipmentId,
        WHSContainerId      _containerId,
        InventDimId         _inventDimId,
        WHSLoadLineRefRecId _loadLine,
        UnitOfMeasureSymbol _uom)
    {
        return WHSContainerLine::find(_shipmentId, _containerId, _inventDimId, _loadLine, _uom).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSContainerLine</c> record with given parameters.
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment id of the record.
    /// </param>
    /// <param name="_containerId">
    /// Container id of the record.
    /// </param>
    /// <param name="_inventDimId">
    /// Dimension id of the record.
    /// </param>
    /// <param name="_loadLine">
    /// Load line od of the record.
    /// </param>
    /// <param name="_uom">
    /// UOM of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is seached for.
    /// </returns>
    public static WHSContainerLine find(
        WHSShipmentId       _shipmentId,
        WHSContainerId      _containerId,
        InventDimId         _inventDimId,
        WHSLoadLineRefRecId _loadLine,
        UnitOfMeasureSymbol _uom,
        boolean             _forupdate = false)
    {
        WHSContainerLine    containerLine;

        if (_shipmentId && _containerId && _inventDimId && _loadLine && _uom)
        {
            containerLine.selectForUpdate(_forupdate);

            select firstonly containerLine
                where containerLine.ShipmentId      == _shipmentId
                &&    containerLine.ContainerId     == _containerId
                &&    containerLine.InventDimId     == _inventDimId
                &&    containerLine.LoadLine        == _loadLine
                &&    containerLine.UnitId          == _uom;
        }

        return containerLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>WHSContainerLine</c> record by id.
    /// </summary>
    /// <param name="_recId">
    /// Id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSContainerLine findByRecId(RecId    _recId,
                                               boolean  _forupdate = false)
    {
        WHSContainerLine    containerLine;

        if (_recId)
        {
            containerLine.selectForUpdate(_forupdate);

            select firstonly containerLine
                where containerLine.RecId == _recId;
        }

        return containerLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSerialNumberUnique</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the quantity on container line is valid for the current inventory dimensions.
    /// </summary>
    /// <returns>
    /// false if the quantity is larger than one and the serial number control is enabled for the current dimensions; otherwise, true.
    /// </returns>
    private boolean checkSerialNumberUnique()
    {
        InventDim                   inventDim = InventDim::find(this.InventDimId);
        InventDimGroupFieldSetup    inventDimGroupFieldSetup;

        if (inventDim.InventSerialId && this.Qty > 1)
        {
            inventDimGroupFieldSetup = EcoResDimensionGroupSetup::getFieldSetupForItem(this.ItemId, fieldNum(InventDim, InventSerialId));
            if (inventDimGroupFieldSetup.isSerialNumberControlEnabled())
            {
                return checkFailed(strFmt("@SYS68712", inventDim.InventSerialId));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllPackedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sums all the quantity that has been packed related to a single <c>InventTransId</c>.
    /// </summary>
    /// <param name="_loadLineRecId">
    /// A <c>WHSLoadLine</c> RecId.
    /// </param>
    /// <returns>
    /// Total quantity for a line that has been packed into a container.
    /// </returns>
    public static Qty getAllPackedQty(WHSLoadLineRefRecId _loadLineRecId)
    {
        WHSContainerLine    containerLine;
        WHSLoadLine         loadLine;

        InventTransId transId = WHSLoadLine::findbyRecId(_loadLineRecId).InventTransId;

        select sum(Qty) from containerLine
            exists join loadLine
                where loadLine.InventTransId    == transId
                &&    loadLine.RecId            == containerLine.LoadLine;

        return containerLine.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllSerialCapturedQty</Name>
				<Source><![CDATA[
    internal static Qty getAllSerialCapturedQty(InventTransId _inventTransId)
    {
        InventTransOrigin   inventTransOrigin;
        InventTrackingRegisterTrans inventTrackRegTrans;

        select sum(Qty) from inventTrackRegTrans
            exists join inventTransOrigin
                where inventTransOrigin.RecId == inventTrackRegTrans.InventTransOrigin
                && inventTransOrigin.InventTransId == _inventTransId
                && !inventTrackRegTrans.FinancialRefRecId
                && !inventTrackRegTrans.FinancialRefTableId
                && inventTrackRegTrans.ReadyForFinancialUpdate
                && !inventTrackRegTrans.Cancelled;

        return inventTrackRegTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegisterQty</Name>
				<Source><![CDATA[
    internal static Qty getRegisterQty(WHSLoadLineRefRecId _loadLineRecId)
    {
        return WHSContainerLine::getAllPackedQty(_loadLineRecId) + WHSContainerLine::getAllSerialCapturedQty(WHSLoadLine::findbyRecId(_loadLineRecId).InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity on the container line in inventory units.
    /// </summary>
    /// <returns>Quantity on the container line in inventory units.</returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the getInventoryHandlingQuantity method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public InventQty getInventoryQuantity()
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.ItemId);

        return this.getInventoryHandlingQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryHandlingQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the handling quantity on the container line in inventory units.
    /// </summary>
    /// <returns>Handling quantity on the container line in inventory units.</returns>
    [Hookable(false)]
    public InventHandlingQty getInventoryHandlingQuantity()
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.ItemId))
        {
            return this.getInventoryHandlingQty();
        }

        return this.getInventoryQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryHandlingQty</Name>
				<Source><![CDATA[
    private InventHandlingQty getInventoryHandlingQty()
    {
        EcoResReleasedProductUnitConverter releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        UnitOfMeasureSymbol itemInventoryUnitSymbol = this.getInventoryUnit();

        InventHandlingQty inventHandlingQty = releasedProductUnitConverter.convert(
                                                            this.Qty,
                                                            UnitOfMeasure::findBySymbol(this.UnitId).RecId,
                                                            UnitOfMeasure::findBySymbol(itemInventoryUnitSymbol).RecId,
                                                            NoYes::Yes,
                                                            this.ItemId,
                                                            this.InventDimId,
                                                            NoYes::Yes);

        return inventHandlingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the the container line inventory unit.
    /// </summary>
    /// <returns>Container line inventory unit.</returns>
    public UnitOfMeasureSymbol getInventoryUnit()
    {
        UnitOfMeasureSymbol itemInventoryUnitSymbol = WHSCatchWeightHelper::inventHandlingUnitId(this.ItemId);

        return itemInventoryUnitSymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustQuantity</Name>
				<Source><![CDATA[
    private InventHandlingQty adjustQuantity(InventHandlingQty _inventQtyToAdjust)
    {
        InventHandlingQty remainingQtyToAdjust;

        this.Qty += EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                          this.InventDimId,
                                                                                          _inventQtyToAdjust,
                                                                                          WHSCatchWeightHelper::inventHandlingUnitId(this.ItemId),
                                                                                          this.UnitId,
                                                                                          NoYes::No,
                                                                                          NoYes::No);

        if (this.Qty < 0)
        {
            remainingQtyToAdjust = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                          this.InventDimId,
                                                                                          this.Qty,
                                                                                          this.UnitId,
                                                                                          WHSCatchWeightHelper::inventHandlingUnitId(this.ItemId),
                                                                                          NoYes::No,
                                                                                          NoYes::No);

            this.Qty = 0;
        }

        if (this.Qty)
        {
            this.update();
        }
        else
        {
            WHSContainerTable containerTable;
            WHSContainerLine  containerLine;

            ttsbegin;

            this.delete();

            using (var context = new WHSAdjustContainerLineQtySkipParentValidationContext())
            {              
                context.skipClosedStatusValidation = true;
                
                delete_from containerTable
                    where containerTable.ContainerId == this.ContainerId
                notExists join containerLine
                    where containerLine.ContainerId  == this.ContainerId
                       && containerLine.ShipmentId   == this.ShipmentId;
            }

            ttscommit;
        }

        return remainingQtyToAdjust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustQuantityBasedOnLoadLineRecIdAndShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the quantity of the container lines which are part of the specified container and
    /// related to the specified load line and shipment table.
    /// </summary>
    /// <param name = "_containerId">The container ID</param>
    /// <param name = "_loadLineRecId">The load line record ID</param>
    /// <param name = "_shipmentId">The shipment ID</param>
    /// <param name = "_inventQtyToAdjust">The quantity to be adjusted</param>
    [SysObsoleteAttribute('Use WHSContainerLine::adjustQuantityBasedOnWorkLine() instead.', false, 22\12\2020)]
    public static void adjustQuantityBasedOnLoadLineRecIdAndShipmentId(
                                        WHSContainerId _containerId,
                                        RecId          _loadLineRecId,
                                        WHSShipmentId  _shipmentId,
                                        Qty            _inventQtyToAdjust)
    {
        WHSContainerLine    containerLine;
        WHSContainerTable   containerTable;

        ttsbegin;

        // Containers created through containerization should only have one container per load line, so select using load line RecId.
        select firstonly forupdate containerLine
            where containerLine.LoadLine    == _loadLineRecId
                && containerLine.ContainerId == _containerId;

        if (containerLine.RecId)
        {
            containerLine.adjustQuantity(_inventQtyToAdjust);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustQuantityBasedOnWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the quantity of the container lines which are part of the specified container and
    /// related to the specified load line and shipment table and unit of measure of a container line/work line.
    /// </summary>
    /// <param name = "_workLine">The workline to be used to find a corresponding container line</param>
    /// <param name = "_inventQtyToAdjust">The quantity to be adjusted</param>
    public static void adjustQuantityBasedOnWorkLine(WHSWorkLine _workLine, InventHandlingQty _inventQtyToAdjust)
    {
        ttsbegin;

        WHSContainerLine  containerLine = WHSContainerLine::find(_workLine.ShipmentId, _workLine.ContainerId, _workLine.InventDimId, _workLine.LoadLineRefRecId, _workLine.UnitId, true);
        InventHandlingQty inventQtyToAdjust = _inventQtyToAdjust;

        if (containerLine)
        {
            inventQtyToAdjust = containerLine.adjustQuantity(inventQtyToAdjust);
        }

        if (inventQtyToAdjust)
        {
            select forupdate containerLine
                where containerLine.LoadLine    == _workLine.LoadLineRefRecId
                   && containerLine.ContainerId == _workLine.ContainerId
                   && containerLine.ShipmentId  == _workLine.ShipmentId;

            while (inventQtyToAdjust && containerLine)
            {
                inventQtyToAdjust = containerLine.adjustQuantity(inventQtyToAdjust);

                next containerLine;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustQuantityBasedOnWorkLineNoContainer</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void adjustQuantityBasedOnWorkLineNoContainer(WHSLoadLineRefRecId _loadLineRecId, Qty _inventQtyToAdjust)
    {
        WHSContainerLine    containerLine;
        Qty                 qtyToAdjust;
        Qty                 inventQtyToAdjust = abs(_inventQtyToAdjust);

        ttsbegin;

        while select forupdate containerLine
            where containerLine.LoadLine    == _loadLineRecId
        {
            qtyToAdjust = containerLine.Qty < inventQtyToAdjust ? containerLine.Qty : inventQtyToAdjust;

            containerLine.adjustQuantity(-qtyToAdjust);

            inventQtyToAdjust -= qtyToAdjust;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProductName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for name of a product that this item represents.
    /// </summary>
    /// <returns>
    /// The name of a product.
    /// </returns>
    public display Name displayProductName()
    {
        return InventTable::name(this.ItemId, this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllCatchWeightTags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the catch weight tags related to this container line.
    /// </summary>
    /// <returns>A container with the record Ids in the <c>WHSCatchWeightTag</c> table for the tags related to this container line.</returns>
    [Hookable(false)]
    internal container getAllCatchWeightTags()
    {
        container tags;

        WHSCatchWeightTag catchWeightTag;
        WHSCatchWeightTagLastRegistration catchWeightTagLastRegistration;

        while select RecId from catchWeightTag
            where catchWeightTag.ItemId == this.ItemId
            exists join catchWeightTagLastRegistration
                where catchWeightTagLastRegistration.TagNumber == catchWeightTag.TagNumber
                    && catchWeightTagLastRegistration.ContainerLine == this.RecId
        {
            tags += catchWeightTag.RecId;
        }

        return tags;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an item key object based on the product associated with the current line.
    /// </summary>
    /// <returns>
    /// The <c>InventItemKey</c> object.
    /// </returns>
    [Hookable(false)]
    final public InventItemKey itemKey()
    {
        return InventItemKey::newFromItem(this.ItemId, this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertContainerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts container related transactions into DB.
    /// </summary>
    /// <param name = "_putLocation">Destination location.</param>
    /// <param name = "_containerId">Container id for whic transaction occurs.</param>
    /// <param name = "_licensePlateId">Destination license plate id.</param>
    /// <returns>Newly created container transaction.</returns>
    [Hookable(false)]
    internal WHSContainerTrans insertContainerTrans(
        WMSLocation         _putLocation,
        WHSContainerId      _containerId,
        WHSLicensePlateId   _licensePlateId = _containerId)
    {
        WHSContainerTrans containerTrans;

        containerTrans.TransDateTime = DateTimeUtil::getSystemDateTime();
        containerTrans.initFromcontainerLine(this);
        containerTrans.setFromDim(this);

        WHSContainerLine::updateInventDimFromForFinalShippingLocationPacking(containerTrans, _containerId, _licensePlateId,  this.inventDim().InventSerialId);

        containerTrans.setInventDimIdTo(
                InventDim::find(containerTrans.InventDimIdFrom),
                _putLocation,
                this.inventDim().InventSerialId,
                _licensePlateId);

        containerTrans.insert();

        // If higher than nominal weight has been packed we need to adjust invent quantity,
        // to prevent negative quantity.
        PDSCatchWeightOnHandAdjustment::adjustOnhandWeightWithinThresholds(this.ItemId, containerTrans.InventDimIdFrom);

        if (containerTrans.InventDimIdFrom != containerTrans.InventDimIdTo
                && WHSInventTable::catchWeightTagDimensionTrackingMethod(this.ItemId) == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions)
        {
            WHSCatchWeightTagDimensionUpdater::newScannedTags(this.getAllCatchWeightTags(), InventDim::find(containerTrans.InventDimIdTo)).updateCatchWeightTags();
        }

        return containerTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDimFromForFinalShippingLocationPacking</Name>
				<Source><![CDATA[
    private static void updateInventDimFromForFinalShippingLocationPacking(
        WHSContainerTrans   _containerTrans,
        WHSContainerId      _containerId,
        WHSLicensePlateId   _licensePlateId = _containerId,
        InventSerialId _inventSerialId = '')
    {
        InventDim newFromInventDim = InventDim::find(_containerTrans.InventDimIdFrom);
        boolean isContainerClosed = WHSContainerTable::findByContainerId(_containerId).ContainerStatus == WHSContainerStatus::Closed;

        // For final shipping location packing, if the container is closed but not released
        if (_licensePlateId && newFromInventDim.LicensePlateId != _licensePlateId)
        {
            // If the container is already closed the container LP should be used as from inventory dimension
            if (isContainerClosed)
            {
                // Update from LP to be the LP of the container
                newFromInventDim.LicensePlateId = _licensePlateId;
                newFromInventDim = InventDim::findOrCreate(newFromInventDim);
                _containerTrans.InventDimIdFrom = newFromInventDim.InventDimId;
            }
        }

        if (_inventSerialId && isContainerClosed && !newFromInventDim.inventSerialId 
            && WHSContainerLineReleaseContainerForcePutCapturedSerialIdFlight::instance().isEnabled() 
            && WHSInventTable::captureSerial(_containerTrans.ItemId) == WHSRFWhenToCapture::Packing)
        {
            newFromInventDim.InventSerialId = _inventSerialId;
            newFromInventDim = InventDim::findOrCreate(newFromInventDim);
            _containerTrans.InventDimIdFrom = newFromInventDim.InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInventDimFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the inventDimFrom for when the container line is moved (packed/unpacked).
    /// </summary>
    /// <returns>Cacluclated inventory dimensions</returns>
    [Hookable(false)]
    internal InventDim calculateInventDimFrom()
    {
        if (!WHSLoadLine::findbyRecId(this.LoadLine))
        {
            throw error(strFmt("@WAX3124", this.ContainerId, this.ItemId));
        }

        InventDim inventDim = this.inventDim();

        inventDim = this.setInventDimLicensePlateIdToTmpToteIdIfFound(inventDim);

        // If serial was captured during packing then it doesn't currently exist in inventory so remove it from the from dim.
        if (WHSInventTable::captureSerial(this.ItemId) == WHSRFWhenToCapture::Packing)
        {
            inventDim.InventSerialId = '';
        }

        inventDim = InventDim::findOrCreate(inventDim);
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTemporaryToteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the temporary tote id if the tote reuse funtionality is enabled.
    /// </summary>
    /// <param name = "_inventDim">Inventory dimensions to find the tote id.</param>
    /// <returns>WHSToteId or empty value.</returns>
    [Hookable(false)]
    internal WHSToteId getTemporaryToteId(InventDim _inventDim = null)
    {
        if (!_inventDim)
        {
            _inventDim = this.inventDim();
        }

        WHSToteId tempToteId;

        if (WHSParameters::find().ToteReuse)
        {
            WHSLocationProfile locationProfile = WHSLocationProfile::find(_inventDim.wmsLocation().LocProfileId);

            if (locationProfile.LPControlled)
            {
                WHSWorkTable workTable = WHSWorkTable::findByLicensePlateContainerLine(_inventDim.LicensePlateId, this.RecId, true, WHSWorkStatus::Closed);

                tempToteId = WHSToteReuseTable::find(workTable.TargetLicensePlateId, workTable.WorkId).TmpToteId;
            }
        }

        return tempToteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimLicensePlateIdToTmpToteIdIfFound</Name>
				<Source><![CDATA[
    private InventDim setInventDimLicensePlateIdToTmpToteIdIfFound(InventDim _inventDim)
    {
        WHSToteId tmpToteId = this.getTemporaryToteId(_inventDim);

        if (tmpToteId)
        {
            _inventDim.LicensePlateId = tmpToteId;
        }

        return _inventDim;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4337</DeveloperDocumentation>
	<Label>@WAX1425</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ContainerId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ShipmentIdContainerIdIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ShipmentIdContainerIdIdx</PrimaryIndex>
	<ReplacementKey>ShipmentIdContainerIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainerId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainerId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainerId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContainerId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSContainerId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LoadLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadLineRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProductQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipmentId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShipmentId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUOM</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CapturedWeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCapturedWeight</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ShipmentIdContainerIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ShipmentId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ContainerId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LoadLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UnitId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ContainerIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ContainerId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LoadLine</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LoadLineRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LoadLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitId</Name>
					<Field>UnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSContainerTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSContainerTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContainerId</Name>
					<SourceEDT>WHSContainerId</SourceEDT>
					<Field>ContainerId</Field>
					<RelatedField>ContainerId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipmentId</Name>
					<Field>ShipmentId</Field>
					<RelatedField>ShipmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSLoadLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadLine</Name>
					<Field>LoadLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSShipmentTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>CascadeRestricted</OnDelete>
			<RelatedTable>WHSShipmentTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipmentId</Name>
					<SourceEDT>WHSShipmentId</SourceEDT>
					<Field>ShipmentId</Field>
					<RelatedField>ShipmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>