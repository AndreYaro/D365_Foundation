<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryTransactionArchiveQueueEntry</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSInventoryTransactionArchiveQueueEntry extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addWorkToQueue</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void addWorkToQueue(WHSWorkTable _workTable)
    {
        if (_workTable.InventoryTransactionMechanism == WHSInventoryTransactionMechanismEnum::WHSInventoryTransaction)
        {
            WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(tableStr(WHSInventoryTransactionArchiveQueueEntry));;

            using (var activityContext = instrumentationLogger.inventoryTransactionArchivalActivities().addWorkToArchivalQueue())
            {
                int infologLine = infologLine();

                try
                {
                    ttsbegin;

                    WHSInventoryTransactionArchiveQueueEntry queueEntry;

                    queueEntry.ReferenceCategory = WHSInventoryTransactionReferenceCategoryEnum::Work;
                    queueEntry.ReferenceId = _workTable.WorkId;
                    queueEntry.insert();

                    ttscommit;
                }
                catch (Exception::DuplicateKeyException)
                {
                    // Duplicates expected when closed work is cancelled before it is archived.
                    infolog.clear(infologLine);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addContainerToQueue</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void addContainerToQueue(WHSContainerTable _containerTable)
    {
        if (_containerTable.InventoryTransactionMechanism == WHSInventoryTransactionMechanismEnum::WHSInventoryTransaction)
        {
            WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(tableStr(WHSInventoryTransactionArchiveQueueEntry));;

            using (var activityContext = instrumentationLogger.inventoryTransactionArchivalActivities().addContainerToArchivalQueue())
            {
                int infologLine = infologLine();

                try
                {
                    ttsbegin;

                    WHSInventoryTransactionArchiveQueueEntry queueEntry;

                    queueEntry.ReferenceCategory = WHSInventoryTransactionReferenceCategoryEnum::Container;
                    queueEntry.ReferenceId = _containerTable.ContainerId;
                    queueEntry.insert();

                    ttscommit;
                }
                catch (Exception::DuplicateKeyException)
                {
                    // Ignore duplicates. Could happen if close -> reopen -> close container.
                    infolog.clear(infologLine);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WHSInventory:WHSInventoryTransactionArchiveQueueEntry_DevDoc</DeveloperDocumentation>
	<Label>@WHSInventory:WHSInventoryTransactionArchiveQueueEntry_Label</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>ReferenceId</TitleField1>
	<TitleField2>CreatedDateTime</TitleField2>
	<Visibility>Internal</Visibility>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>InventoryAndAdvancedWarehouse</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReferenceCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventoryTransactionReferenceCategory</ExtendedDataType>
			<EnumType>WHSInventoryTransactionReferenceCategoryEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReferenceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransRefId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReferenceIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ReferenceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReferenceCategory</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>