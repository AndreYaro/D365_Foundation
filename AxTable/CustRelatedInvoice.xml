<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustRelatedInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustRelatedInvoice extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the invoice amount.
    /// </summary>
    /// <returns>
    ///    The amount of the invoice.
    /// </returns>
    public display AmountCur displayInvoiceAmount()
    {
        return CustInvoiceTable::findRecId(this.CustInvoice).calcInvoiceBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the invoice date.
    /// </summary>
    /// <returns>
    ///    The date of the invoice.
    /// </returns>
    public display TransDate displayInvoiceDate()
    {
        return CustInvoiceTable::findRecId(this.CustInvoice).InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the invoice ID.
    /// </summary>
    /// <returns>
    ///    The ID of the invoice.
    /// </returns>
    public display CustInvoiceId displayInvoiceId()
    {
        return CustInvoiceTable::findRecId(this.CustInvoice).InvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!CustRelatedInvoice::exist(_recId))
        {
            ret = checkFailed(strfmt(CustRelatedInvoice::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginalInvoiceAssociation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the original invoice record in the <c>CustRelatedInvoice</c> table.
    /// </summary>
    /// <param name="_custCorrectedInvoiceRecId">
    ///    The invoice ID of the corrected invoice.
    /// </param>
    public static void deleteOriginalInvoiceAssociation(RecId _custCorrectedInvoiceRecId)
    {
        CustRelatedInvoice custRelatedInvoiceParent;
        CustRelatedInvoice custRelatedInvoiceCorrected;
        CustInvoiceTable custInvoiceTable;

        ttsbegin;

        select forupdate firstonly custRelatedInvoiceParent
            exists join custRelatedInvoiceCorrected
            where custRelatedInvoiceCorrected.ParentCustInvoice == custRelatedInvoiceParent.CustInvoice &&
            custRelatedInvoiceParent.InvoiceAssociationType == InvoiceAssociationType::OriginalInvoice &&
            custRelatedInvoiceCorrected.CustInvoice == _custCorrectedInvoiceRecId;

        custInvoiceTable = CustInvoiceTable::findRecId(custRelatedInvoiceParent.CustInvoice, true);
        if (custInvoiceTable.RecId != 0)
        {
            custInvoiceTable.AdjustingInvoiceDate = dateNull();
            custInvoiceTable.update();
        }

        custRelatedInvoiceParent.delete();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesCorrectedInvoiceExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the corrected invoice exists for the invoice.
    /// </summary>
    /// <param name="_custInvoiceRecId">
    ///    The record ID of the free text invoice.
    /// </param>
    /// <returns>
    ///    true if the corrected invoice exists; otherwise, false.
    /// </returns>
    public static boolean doesCorrectedInvoiceExist(RecId _custInvoiceRecId)
    {
        CustRelatedInvoice custRelatedInvoice;

        if (_custInvoiceRecId)
        {
            select RecId from custRelatedInvoice
                where (custRelatedInvoice.CustInvoice == _custInvoiceRecId &&
                custRelatedInvoice.InvoiceAssociationType != InvoiceAssociationType::CorrectedInvoice) ||
                custRelatedInvoice.ParentCustInvoice == _custInvoiceRecId;
        }

        return (custRelatedInvoice.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesInvoiceExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the invoice record exists in the <c>CustRelatedInvoice</c> table.
    /// </summary>
    /// <param name="_custInvoiceRecId">
    ///    The record ID of the free text invoice.
    /// </param>
    /// <returns>
    ///    true if the invoice record exists; otherwise, false.
    /// </returns>
    public static boolean doesInvoiceExist(RecId _custInvoiceRecId)
    {
        CustRelatedInvoice custRelatedInvoice;

        select RecId from custRelatedInvoice
            where custRelatedInvoice.CustInvoice == _custInvoiceRecId;

        return (custRelatedInvoice.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesInvoiceExistForType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the invoice record exists against the association type in the
    ///    <c>CustRelatedInvoice</c> table.
    /// </summary>
    /// <param name="_custInvoiceRecId">
    ///    The record ID of the free text invoice.
    /// </param>
    /// <param name="_invoiceAssociationType">
    ///    The association type of the invoice.
    /// </param>
    /// <returns>
    ///    true if the invoice exists; otherwise, false.
    /// </returns>
    public static boolean doesInvoiceExistForType(RecId _custInvoiceRecId, InvoiceAssociationType _invoiceAssociationType)
    {
        CustRelatedInvoice custRelatedInvoice;

        select RecId from custRelatedInvoice
            where custRelatedInvoice.CustInvoice == _custInvoiceRecId &&
            custRelatedInvoice.InvoiceAssociationType == _invoiceAssociationType;

        return (custRelatedInvoice.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesParentInvoiceExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the parent invoice has a corrected or adjusting invoice.
    /// </summary>
    /// <param name="_custInvoiceRecId">
    ///    The record ID of the free text invoice.
    /// </param>
    /// <returns>
    ///    true if the corrected or adjusting invoice exists; otherwise, false.
    /// </returns>
    public static boolean doesParentInvoiceExist(RecId _custInvoiceRecId)
    {
        CustRelatedInvoice custRelatedInvoice;

        select RecId from custRelatedInvoice
            where custRelatedInvoice.ParentCustInvoice == _custInvoiceRecId;

        return (custRelatedInvoice.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>CustRelatedInvoice</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        if (_recId)
        {
            found = (select firstonly RecId from custRelatedInvoice
                        where custRelatedInvoice.RecId == _recId).RecId != 0;
        }
        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustRelatedInvoice</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CustRelatedInvoice</c> table; otherwise, an empty record.
    /// </returns>
    public static CustRelatedInvoice find(
        RecId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustRelatedInvoice custRelatedInvoice;

        custRelatedInvoice.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custRelatedInvoice.concurrencyModel(_concurrencyModel);
        }

        select firstonly custRelatedInvoice
            where custRelatedInvoice.RecId == _recId;

        return custRelatedInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustRelatedInvoice</c> table by using the <c>CustInvoice</c>
    ///    field.
    /// </summary>
    /// <param name="_custInvoiceRecId">
    ///    The record ID of the record in the <c>CustRelatedInvoice</c> table to find.
    /// </param>
    /// <returns>
    ///    A record in the <c>CustRelatedInvoice</c> table; otherwise, an empty record.
    /// </returns>
    public static CustRelatedInvoice findByCustInvoice(RecId _custInvoiceRecId)
    {
        CustRelatedInvoice custRelatedInvoice;

        select firstonly custRelatedInvoice
            where custRelatedInvoice.CustInvoice == _custInvoiceRecId;

        return custRelatedInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByParentCustInvoiceInvoiceType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustRelatedInvoice</c> table by using the
    ///    <c>ParentCustInvoice</c> field and the <c>InvoiceAssociationType</c> field.
    /// </summary>
    /// <param name="_parentCustInvoiceRecId">
    ///    The record ID of the record in the <c>CustRelatedInvoice</c> table to find.
    /// </param>
    /// <param name="_invoiceAssociationType">
    ///    The association type of the invoice.
    /// </param>
    /// <returns>
    ///    A record in the <c>CustRelatedInvoice</c> table; otherwise, an empty record.
    /// </returns>
    public static CustRelatedInvoice findByParentCustInvoiceInvoiceType(
        RecId _parentCustInvoiceRecId,
        InvoiceAssociationType _invoiceAssociationType)
    {
        CustRelatedInvoice custRelatedInvoice;

        select firstonly custRelatedInvoice
            where custRelatedInvoice.ParentCustInvoice == _parentCustInvoiceRecId &&
            custRelatedInvoice.InvoiceAssociationType == _invoiceAssociationType;

        return custRelatedInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParentInvoiceForChild</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustRelatedInvoice</c> table record.
    /// </summary>
    /// <param name="_custInvoiceRecId">
    ///    The record ID of the record in the <c>CustInvoiceTable</c> table.
    /// </param>
    /// <returns>
    ///    A record in the <c>CustInvoiceTable</c> table; otherwise, an empty record.
    /// </returns>
    public static CustInvoiceTable findParentInvoiceForChild(RecId _custInvoiceRecId)
    {
        CustRelatedInvoice custRelatedInvoice;
        CustInvoiceTable parentCustInvoiceTable;

        select RecId, ParentCustInvoice from custRelatedInvoice
            where custRelatedInvoice.CustInvoice == _custInvoiceRecId;

        if (custRelatedInvoice.RecId)
        {
            parentCustInvoiceTable = CustInvoiceTable::findRecId(custRelatedInvoice.ParentCustInvoice);
        }

        return parentCustInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParentByCustInvoiceInvoiceType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>CustInvoiceTable</c> table by using the
    ///    <c>CustInvoice</c> field and the <c>InvoiceAssociationType</c> field.
    /// </summary>
    /// <param name="_parentCustInvoiceRecId">
    ///    The record ID of the child invoice.
    /// </param>
    /// <param name="_invoiceAssociationType">
    ///    The association type of the invoice.
    /// </param>
    /// <returns>
    ///    A record in the <c>CustInvoiceTable</c> table; otherwise, an empty record.
    /// </returns>
    public static CustInvoiceTable findParentByCustInvoiceInvoiceType(
        RecId _custInvoiceRecId,
        InvoiceAssociationType _invoiceAssociationType)
    {
        CustRelatedInvoice custRelatedInvoice;
        CustInvoiceTable parentCustInvoiceTable;

        select firstonly RecId, ParentCustInvoice from custRelatedInvoice
            where custRelatedInvoice.CustInvoice == _custInvoiceRecId &&
                  custRelatedInvoice.InvoiceAssociationType == _invoiceAssociationType;

        if (custRelatedInvoice)
        {
            parentCustInvoiceTable = CustInvoiceTable::findRecId(custRelatedInvoice.ParentCustInvoice);
        }

        return parentCustInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAdjusting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the relationship between the adjusting invoice and parent invoice.
    /// </summary>
    /// <param name="_adjustingInvoiceRecId">
    /// The record id of the adjusting invoice.
    /// </param>
    /// <param name="_parentInvoiceRecId">
    /// The record id of the parent invoice.
    /// </param>
    public static void insertAdjusting(RefRecId _adjustingInvoiceRecId, RefRecId _parentInvoiceRecId)
    {
        CustRelatedInvoice custRelatedInvoice;

        if (_adjustingInvoiceRecId && _parentInvoiceRecId)
        {
            custRelatedInvoice.CustInvoice = _adjustingInvoiceRecId;
            custRelatedInvoice.ParentCustInvoice = _parentInvoiceRecId;
            custRelatedInvoice.InvoiceAssociationType = InvoiceAssociationType::AdjustingInvoice;
            custRelatedInvoice.OriginalCustInvoice = CustRelatedInvoice::findByCustInvoice(_parentInvoiceRecId).OriginalCustInvoice;
            custRelatedInvoice.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCorrecting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the relationship between the corrected invoice and parent invoice.
    /// </summary>
    /// <param name="_correctedInvoiceRecId">
    /// The record id of the corrected invoice.
    /// </param>
    /// <param name="_parentInvoiceRecId">
    /// The record id of the parent invoice.
    /// </param>
    public static void insertCorrecting(RefRecId _correctedInvoiceRecId, RefRecId _parentInvoiceRecId)
    {
        CustRelatedInvoice custRelatedInvoice;

        if (_correctedInvoiceRecId && _parentInvoiceRecId)
        {
            custRelatedInvoice.CustInvoice = _correctedInvoiceRecId;
            custRelatedInvoice.ParentCustInvoice = _parentInvoiceRecId;
            custRelatedInvoice.InvoiceAssociationType = InvoiceAssociationType::CorrectedInvoice;
            custRelatedInvoice.OriginalCustInvoice = CustRelatedInvoice::findByCustInvoice(_parentInvoiceRecId).OriginalCustInvoice;
            custRelatedInvoice.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a record of the original invoice.
    /// </summary>
    /// <param name="_custParentInvoiceRecId">
    ///    The record ID of the original invoice.
    /// </param>
    /// <remarks>
    ///    The original invoice record is created only when the free text invoice is corrected for the first
    ///    time.
    /// </remarks>
    public static void insertOriginal(RefRecId _custParentInvoiceRecId)
    {
        CustRelatedInvoice custRelatedInvoice;

        if (!CustRelatedInvoice::doesInvoiceExist(_custParentInvoiceRecId) && _custParentInvoiceRecId)
        {
            custRelatedInvoice.CustInvoice = _custParentInvoiceRecId;
            custRelatedInvoice.InvoiceAssociationType = InvoiceAssociationType::OriginalInvoice;
            custRelatedInvoice.OriginalCustInvoice = _custParentInvoiceRecId;
            custRelatedInvoice.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS300094</DeveloperDocumentation>
	<Label>@SYS300076</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>InvoiceAssociationType</TitleField1>
	<TitleField2>ParentCustInvoice</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>CustInvoiceIdx</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<ReplacementKey>CustInvoiceIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAssociationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentCustInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInvoice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustInvoice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RelatedInvoice</Name>
			<Label>@SYS300076</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAssociationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustInvoiceTableRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceAssociationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InvoiceAssociationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OriginalCustInvoice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustInvoiceTableRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentCustInvoice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustInvoiceTableRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustInvoiceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustInvoice</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParentInvoiceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParentCustInvoice</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoice</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustInvoiceTable_CustRelatedInvoice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoice</Name>
					<SourceEDT>CustInvoiceTableRefRecId</SourceEDT>
					<Field>CustInvoice</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceTable_OriginalCustInvoice</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceTable_OriginalCustInvoice</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OriginalCustInvoice</Name>
					<SourceEDT>CustInvoiceTableRefRecId</SourceEDT>
					<Field>OriginalCustInvoice</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceTable_ParentCustInvoice</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceTable_ParentCustInvoice</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentCustInvoice</Name>
					<SourceEDT>CustInvoiceTableRefRecId</SourceEDT>
					<Field>ParentCustInvoice</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ParentCustInvoice</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustRelatedInvoice</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustRelatedInvoice</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustRelatedInvoice_CustRelatedInvoice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentCustInvoice</Name>
					<Field>ParentCustInvoice</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>