<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceInfoMarkupMatchingTolerance</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceInfoMarkupMatchingTolerance extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    private static void add(ParmId parmId, TradeLineRefId tableRefId, MarkupTable _markupTable, MarkupVariancePercent _tolerancePercentage)
    {
        VendInvoiceInfoMarkupMatchingTolerance vendInvoiceInfoMarkupMatchingTolerance;

        vendInvoiceInfoMarkupMatchingTolerance.clear();
        vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableParmId = parmId;
        vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableTableRefId = tableRefId;
        vendInvoiceInfoMarkupMatchingTolerance.ModuleType = _markupTable.ModuleType;
        vendInvoiceInfoMarkupMatchingTolerance.MarkupCode = _markupTable.MarkupCode;
        vendInvoiceInfoMarkupMatchingTolerance.CustType = _markupTable.CustType;
        vendInvoiceInfoMarkupMatchingTolerance.VendType = _markupTable.VendType;
        vendInvoiceInfoMarkupMatchingTolerance.UseInMatching = _markupTable.UseInMatching;
        vendInvoiceInfoMarkupMatchingTolerance.TolerancePercentage = _tolerancePercentage;
        vendInvoiceInfoMarkupMatchingTolerance.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    public static void copy(VendInvoiceInfoMarkupMatchingTolerance fromMarkupMatchingTolerance, VendInvoiceInfoMarkupMatchingTolerance toMarkupMatchingTolerance)
    {
        toMarkupMatchingTolerance.ModuleType = fromMarkupMatchingTolerance.ModuleType;
        toMarkupMatchingTolerance.MarkupCode = fromMarkupMatchingTolerance.MarkupCode;
        toMarkupMatchingTolerance.CustType = fromMarkupMatchingTolerance.CustType;
        toMarkupMatchingTolerance.VendType = fromMarkupMatchingTolerance.VendType;
        toMarkupMatchingTolerance.UseInMatching = fromMarkupMatchingTolerance.UseInMatching;
        toMarkupMatchingTolerance.TolerancePercentage = fromMarkupMatchingTolerance.TolerancePercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create the invoice miscellaneous charge codes and tolerance percentages when charge matching is enabled.
    /// </summary>
    /// <param name="_parmId">
    ///    The parameter ID defines the <c>VendInvoiceInfoTable</c> record for which the miscellaneous charge
    ///    codes and tolerance percentages will be created.
    /// </param>
    /// <param name="_tableRefId">
    ///    The table reference ID defines the <c>VendInvoiceInfoTable</c> table for which the miscellaneous
    ///    charge codes and tolerance percentages will be created.
    /// </param>
    public static void create(ParmId _parmId, TradeLineRefId _tableRefId)
    {
        VendParameters vendParameters = VendParameters::find();

        if (vendParameters.UseMiscChargeMatching == NoYes::Yes)
        {
            // get default company wide miscellaneous charge tolerance percentage
            MarkupVariancePercent variancePercent = VendInvoiceInfoMarkupMatchingTolerance::findCompanyVariancePercent();

            VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
            MarkupTrans markupTrans;

            while select vendInvoiceInfoSubTable
                where vendInvoiceInfoSubTable.TableRefId == _tableRefId
                    && vendInvoiceInfoSubTable.ParmId == _parmId
            join markupTrans
                group by markupTrans.MarkupCode
                where markupTrans.TransRecId == vendInvoiceInfoSubTable.RecId
                    && markupTrans.TransTableId == vendInvoiceInfoSubTable.TableId
            {
                VendInvoiceInfoMarkupMatchingTolerance::createForMarkupCode(_parmId, _tableRefId, markupTrans.MarkupCode, variancePercent);
            }

            VendInvoiceInfoLine vendInvoiceInfoline;

            while select vendInvoiceInfoline
                where vendInvoiceInfoline.TableRefId == _tableRefId
                    && vendInvoiceInfoline.ParmId == _parmId
            join markupTrans
                group by markupTrans.MarkupCode
                where markupTrans.TransRecId == vendInvoiceInfoline.RecId
                    && markupTrans.TransTableId == vendInvoiceInfoline.TableId
            {
                VendInvoiceInfoMarkupMatchingTolerance::createForMarkupCode(_parmId, _tableRefId, markupTrans.MarkupCode, variancePercent);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForMarkupCode</Name>
				<Source><![CDATA[
    private static void createForMarkupCode(ParmId _parmId, TradeLineRefId _tableRefId, MarkupCode _markupCode, MarkupVariancePercent _defaultVariancePercent)
    {
        MarkupTable markupTable;
        MarkupTolerance markupTolerance;
        VendInvoiceInfoMarkupMatchingTolerance vendInvoiceInfoMarkupMatchingTolerance;

        // determine misc charge codes that have specific miscellaneous charge tolerance percentage
        select markupTable
            where markupTable.ModuleType == MarkupModuleType::Vend
                && markupTable.MarkupCode == _markupCode
            outer join TolerancePercentage from markupTolerance
                where markupTolerance.ModuleType == MarkupModuleType::Vend
                    && markupTolerance.MarkupCode == markupTable.MarkupCode
            notexists join vendInvoiceInfoMarkupMatchingTolerance
                where vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableParmId == _parmId
                    && vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableTableRefId == _tableRefId
                    && vendInvoiceInfoMarkupMatchingTolerance.ModuleType == MarkupModuleType::Vend
                    && vendInvoiceInfoMarkupMatchingTolerance.MarkupCode == markupTable.MarkupCode;

        if (markupTolerance.RecId != 0)
        {
            VendInvoiceInfoMarkupMatchingTolerance::add(_parmId, _tableRefId, markupTable, markupTolerance.TolerancePercentage);
        }
        else if (markupTable.RecId !=  0)
        {
            // If there is no specific charge tolerance percentage for the code, apply the default
            VendInvoiceInfoMarkupMatchingTolerance::add(_parmId, _tableRefId, markupTable, _defaultVariancePercent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIfAbsent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the invoice miscellaneous charge code and tolerance percentage.
    /// </summary>
    /// <param name="_markupTrans">
    ///    A <c>MarkUpTrans</c> table that has the miscellaneous charge code and implies the
    ///    <c>VendInvoiceInfoTable</c> record context.
    /// </param>
    public static void createIfAbsent(MarkupTrans _markupTrans)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        ParmId parmId;
        TradeLineRefId tableRefId;
        MarkupTable markupTable;
        MarkupTolerance markupTolerance;
        MarkupVariancePercent variancePercent;

        if (VendParameters::find().UseMiscChargeMatching == NoYes::No)
        {
            return;
        }

        switch (_markupTrans.TransTableId)
        {
            case tableNum(VendInvoiceInfoTable):

                vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(_markupTrans.TransRecId);
                if (vendInvoiceInfoTable.RecId == 0)
                {
                    return;
                }
                parmId = vendInvoiceInfoTable.ParmId;
                tableRefId = vendInvoiceInfoTable.TableRefId;
                break;

            case tableNum(VendInvoiceInfoSubTable):

                vendInvoiceInfoSubTable = VendInvoiceInfoSubTable::findRecId(_markupTrans.TransRecId);
                if (vendInvoiceInfoSubTable.RecId == 0)
                {
                    return;
                }
                parmId = vendInvoiceInfoSubTable.ParmId;
                tableRefId = vendInvoiceInfoSubTable.TableRefId;
                break;

            case tableNum(VendInvoiceInfoLine):

                vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(_markupTrans.TransRecId);
                if (vendInvoiceInfoLine.RecId == 0)
                {
                    return;
                }
                parmId = vendInvoiceInfoLine.ParmId;
                tableRefId = vendInvoiceInfoLine.TableRefId;
                break;

            default:
                return;
        }

        if (VendInvoiceInfoMarkupMatchingTolerance::exist(parmId, tableRefId, _markupTrans.MarkupCode))
        {
            return;
        }

        // get default company wide miscellaneous charge tolerance percentage
        variancePercent = VendInvoiceInfoMarkupMatchingTolerance::findCompanyVariancePercent();

        select markupTable
            where markupTable.ModuleType == _markupTrans.ModuleType
                && markupTable.MarkupCode == _markupTrans.MarkupCode;

        select markupTolerance
            where markupTolerance.ModuleType == _markupTrans.ModuleType
                && markupTolerance.MarkupCode == _markupTrans.MarkupCode;

        if (markupTolerance)
        {
            // misc charge code that have specific miscellaneous charge tolerance percentage
            VendInvoiceInfoMarkupMatchingTolerance::add(parmId, tableRefId, markupTable, markupTolerance.TolerancePercentage);
        }
        else
        {
            // misc charge code that will use the default company wide miscellaneous charge tolerance percentage
            VendInvoiceInfoMarkupMatchingTolerance::add(parmId, tableRefId, markupTable, variancePercent );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(ParmId _parmId, TradeLineRefId _tableRefId, MarkupCode _markupCode)
    {
        VendInvoiceInfoMarkupMatchingTolerance vendInvoiceInfoMarkupMatchingTolerance;

        if (_tableRefId && _markupCode)
        {
            return (select firstonly RecId from vendInvoiceInfoMarkupMatchingTolerance
                        where vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableParmId == _parmId
                            && vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableTableRefId == _tableRefId
                            && vendInvoiceInfoMarkupMatchingTolerance.ModuleType == MarkupModuleType::Vend
                            && vendInvoiceInfoMarkupMatchingTolerance.MarkupCode == _markupCode).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether there is a <c>VendInvoiceInfoMarkupMatchingTolerance</c> record for the given invoice.
    /// </summary>
    /// <param name="_parmId">
    /// The parm ID for which to search.
    /// </param>
    /// <param name="_tableRefId">
    /// The table reference ID for which to search.
    /// </param>
    /// <returns>
    /// true if there is at least one markup matching tolerance record; otherwise, false.
    /// </returns>
    public static boolean existForInvoice(ParmId _parmId, TradeLineRefId _tableRefId)
    {
        VendInvoiceInfoMarkupMatchingTolerance vendInvoiceInfoMarkupMatchingTolerance;

        if (_tableRefId)
        {
            return (select firstonly RecId from vendInvoiceInfoMarkupMatchingTolerance
                        where vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableParmId == _parmId
                            && vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableTableRefId == _tableRefId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static VendInvoiceInfoMarkupMatchingTolerance find(ParmId _parmId, TradeLineRefId _tableRefId, MarkupCode _markupCode, boolean _update = false)
    {
        VendInvoiceInfoMarkupMatchingTolerance vendInvoiceInfoMarkupMatchingTolerance;

        if (_tableRefId && _markupCode)
        {
            vendInvoiceInfoMarkupMatchingTolerance.selectForUpdate(_update);

            select firstonly vendInvoiceInfoMarkupMatchingTolerance
                where vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableParmId == _parmId
                    && vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableTableRefId == _tableRefId
                    && vendInvoiceInfoMarkupMatchingTolerance.ModuleType == MarkupModuleType::Vend
                    && vendInvoiceInfoMarkupMatchingTolerance.MarkupCode == _markupCode;
        }

        return vendInvoiceInfoMarkupMatchingTolerance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCompanyVariancePercent</Name>
				<Source><![CDATA[
    private static MarkupVariancePercent findCompanyVariancePercent()
    {
        VendParameters vendParameters = VendParameters::find();
        MarkupVariancePercent variancePercent;

        if (vendParameters.UseMiscChargeMatching == NoYes::No)
        {
            variancePercent = 0;
        }
        else
        {
            variancePercent = vendParameters.MiscChargeTolerancePercentage;
        }

        return variancePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeUnusedInvoiceMiscChargeCodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes unused miscellaneous charge codes and tolerance percentages from the invoice.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    ///    The active invoice defines the invoice context.
    /// </param>
    public static void removeUnusedInvoiceMiscChargeCodes(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        Set uniqueMarkupCodes = new Set(Types::String);
        VendInvoiceInfoMarkupMatchingTolerance vendInvoiceInfoMarkupMatchingTolerance;

        MarkupTrans::getUniqueMarkupCodes(uniqueMarkupCodes, _vendInvoiceInfoTable.TableId, _vendInvoiceInfoTable.RecId);

        while select ParmId, TableRefId, OrigPurchId, TableId, RecId from vendInvoiceInfoSubTable
            where vendInvoiceInfoSubTable.ParmId == _vendInvoiceInfoTable.ParmId
                && vendInvoiceInfoSubTable.TableRefId == _vendInvoiceInfoTable.TableRefId
        {
            MarkupTrans::getUniqueMarkupCodes(uniqueMarkupCodes, vendInvoiceInfoSubTable.TableId, vendInvoiceInfoSubTable.RecId);

            while select TableId, RecId from vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId == vendInvoiceInfoSubTable.ParmId
                    && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoSubTable.TableRefId
                    && vendInvoiceInfoLine.OrigPurchId == vendInvoiceInfoSubTable.OrigPurchId
            {
                MarkupTrans::getUniqueMarkupCodes(uniqueMarkupCodes, vendInvoiceInfoLine.TableId, vendInvoiceInfoLine.RecId);
            }
        }

        while select forupdate vendInvoiceInfoMarkupMatchingTolerance
            where vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableParmId == _vendInvoiceInfoTable.ParmId
                && vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableTableRefId == _vendInvoiceInfoTable.TableRefId
        {
            if (!uniqueMarkupCodes.in(vendInvoiceInfoMarkupMatchingTolerance.MarkupCode))
            {
                vendInvoiceInfoMarkupMatchingTolerance.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMiscChargeTolerance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the invoice miscellaneous charge codes and tolerance percentages.
    /// </summary>
    /// <param name="_parmId">
    ///    The parameter ID defines the <c>VendInvoiceInfoTable</c> record for which the miscellaneous charge
    ///    codes and tolerance percentages will be created.
    /// </param>
    /// <param name="_tableRefId">
    ///    The table reference ID defines the <c>VendInvoiceInfoTable</c> record for which the miscellaneous
    ///    charge codes and tolerance percentages will be created.
    /// </param>
    /// <param name="_updateMatchingTolerances">
    ///    Indicates whether or not we need to update the miscellaneous charge codes and tolerance percentages.
    ///    If automatic header matching is turned on, these values are updated regardless of this parameter value.
    /// </param>
    /// <param name="_prevParmId">
    ///    The previous <c>ParmId</c>, in case the invoice is transitioning from saved to active; optional.
    /// </param>
    public static void updateMiscChargeTolerance(ParmId _parmId, TradeLineRefId _tableRefId, boolean _updateMatchingTolerances = false, ParmId _prevParmId = '')
    {
        VendInvoiceInfoMarkupMatchingTolerance vendInvoiceInfoMarkupMatchingTolerance;

        if (!_updateMatchingTolerances && !VendParameters::find().editAutomaticHeaderMatching())
        {
            return;
        }

        if (prmisDefault(_prevParmId))
        {
            _prevParmId = _parmId;
        }

        delete_from vendInvoiceInfoMarkupMatchingTolerance
            where vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableParmId == _prevParmId
                && vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableTableRefId == _tableRefId;

        VendInvoiceInfoMarkupMatchingTolerance::create(_parmId, _tableRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ParmId</c> of <c>VendInvoiceInfoMarkupMatchingTolerance</c> records for a given invoice.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> used to determine which <c>VendInvoiceInfoMarkupMatchingTolerance</c> to move.
    /// </param>
    /// <param name="_tableRefId">
    /// The <c>TradeLineRefId</c> used to determine which <c>VendInvoiceInfoMarkupMatchingTolerance</c> to move.
    /// </param>
    /// <param name="_newParmId">
    /// The new <c>ParmId</c> value; optional.
    /// </param>
    public static void updateParmId(ParmId _parmId, TradeLineRefId _tableRefId, ParmId _newParmId = '')
    {
        VendInvoiceInfoMarkupMatchingTolerance vendInvoiceInfoMarkupMatchingTolerance;

        vendInvoiceInfoMarkupMatchingTolerance.skipDataMethods(true);
        vendInvoiceInfoMarkupMatchingTolerance.skipEvents(true);
        vendInvoiceInfoMarkupMatchingTolerance.skipDatabaseLog(true);

        update_recordset vendInvoiceInfoMarkupMatchingTolerance
        setting VendInvoiceInfoTableParmId = _newParmId
        where vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableParmId == _parmId
            && vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableTableRefId == _tableRefId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchInvoiceMatching</ConfigurationKey>
	<DeveloperDocumentation>@SYS136005</DeveloperDocumentation>
	<Label>@SYS131701</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ModuleType</TitleField1>
	<TitleField2>MarkupCode</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>AccountsPayable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoTableTableRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoTableParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseInMatching</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TolerancePercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExpectedValues</Name>
			<Label>@SYS115395</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoTableTableRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoTableParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseInMatching</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TolerancePercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MarkupType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupModule</ExtendedDataType>
			<EnumType>MarkupModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TolerancePercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupVariancePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseInMatching</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupUseInMatching</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceInfoTableParmId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceInfoTableTableRefId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MarkupType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendInvoiceInfoTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>VendInvoiceInfoTableParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendInvoiceInfoTableTableRefId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FK_VendInvoiceInfoTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceInfoTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>FK_VendInvoiceInfoTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>VendInvoiceInfoMarkupMatchingTolerance</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceInfoTableTableRefId</Name>
					<Field>VendInvoiceInfoTableTableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceInfoTableParmId</Name>
					<Field>VendInvoiceInfoTableParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TableRefIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>