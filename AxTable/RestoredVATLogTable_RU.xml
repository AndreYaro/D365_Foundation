<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RestoredVATLogTable_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RestoredVATLogTable_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>datePeriodBook</Name>
				<Source><![CDATA[
    public container datePeriodBook()
    {
        return BookDataCalc_RU::datePeriodBook(this.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>factorExport</Name>
				<Source><![CDATA[
    display Factor factorExport()
    {
        return (this.ExportGain * this.TotalGain > 0) ? 100 * this.ExportGain / this.TotalGain : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factorNotLiable</Name>
				<Source><![CDATA[
    display Factor factorNotLiable()
    {
        return (this.NotLiableGain * this.TotalGain > 0) ? 100 * this.NotLiableGain / this.TotalGain : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchBookProcessingExists</Name>
				<Source><![CDATA[
    public boolean purchBookProcessingExists()
    {
        boolean                                 ret;
        PurchBookTable_RU                       purchBookTable;
        PurchBookVATProcessLogTable_RU          processLogTable;
        PurchBookVATProcessLogTrans_RU          processLogTrans;
        PurchBookVATProcessLogTransOper_RU      processLogTransOper;
        TransDate                               fromDate;
        TransDate                               toDate;
        ;

        [fromDate, toDate] = this.datePeriodBook();

        select firstonly RecId from purchBookTable
            where purchBookTable.ClosingDate >= fromDate;

        if (! purchBookTable)
        {
            select firstonly RecId from processLogTransOper
                where processLogTransOper.CanceledRefRecId == 0               &&
                      processLogTransOper.TransDate   >= fromDate             &&
                    ((processLogTransOper.Blocked     == NoYes::No)           ||
                     (processLogTransOper.Blocked     == NoYes::Yes           &&
                      processLogTransOper.BlockedAuto == NoYes::No))
            exists join processLogTrans
                where processLogTrans.RecId     == processLogTransOper.RefRecId &&
                      processLogTrans.TransType != SalesPurchBookTransType_RU::PrepaymentStorno
            exists join processLogTable
                where processLogTable.RecId     == processLogTransOper.LogTableRefRecId &&
                      processLogTable.TransDate >= fromDate;
        }

        if (purchBookTable || processLogTransOper)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesBookProcessingExists</Name>
				<Source><![CDATA[
    public boolean salesBookProcessingExists()
    {
        boolean                                 ret;
        SalesBookTable_RU                       salesBookTable;
        SalesBookTrans_RU                       salesBookTrans;
        SalesBookVATProcessLogTable_RU          processLogTable;
        SalesBookVATProcessLogTrans_RU          processLogTrans;
        SalesBookVATProcessLogTransOper_RU      processLogTransOper;
        RestoredVATLogTrans_RU                  restoredVATLogTrans;
        TransDate                               fromDate;
        TransDate                               toDate;
        ;

        [fromDate, toDate] = this.datePeriodBook();

        select firstonly RecId from salesBookTable
            where salesBookTable.ClosingDate >= fromDate
        exists join salesBookTrans
            where salesBookTrans.SalesBookTable_RU == salesBookTable.RecId
        exists join restoredVATLogTrans
            where restoredVATLogTrans.TransDate         == toDate                           &&
                  restoredVATLogTrans.FactureId         == salesBookTrans.FactureId         &&
                  restoredVATLogTrans.FactureDate       == salesBookTrans.FactureDate       &&
                  restoredVATLogTrans.FactureExternalId == salesBookTrans.FactureExternalId &&
                  restoredVATLogTrans.Include;

        if (! salesBookTable)
        {
            select firstonly processLogTransOper
                where processLogTransOper.CanceledRefRecId == 0               &&
                      processLogTransOper.TransDate   >= fromDate             &&
                    ((processLogTransOper.Blocked     == NoYes::No)           ||
                     (processLogTransOper.Blocked     == NoYes::Yes           &&
                      processLogTransOper.BlockedAuto == NoYes::No))
            exists join processLogTrans
                where processLogTrans.RecId     == processLogTransOper.RefRecId &&
                      processLogTrans.TransType != SalesPurchBookTransType_RU::PrepaymentStorno
            exists join processLogTable
                where processLogTable.RecId     == processLogTransOper.LogTableRefRecId &&
                      processLogTable.TransDate >= fromDate
            exists join restoredVATLogTrans
                where restoredVATLogTrans.TransDate    == toDate                          &&
                      restoredVATLogTrans.FactureId    == processLogTrans.FactureId       &&
                      restoredVATLogTrans.FactureDate  == processLogTrans.FactureDate     &&
                      restoredVATLogTrans.InvoiceRecId == processLogTrans.InvoiceRecIdRef &&
                      restoredVATLogTrans.Include;
        }

        if (salesBookTable || processLogTransOper)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecalc</Name>
				<Source><![CDATA[
    public void updateRecalc(container _packedChangedCache)
    {
        RestoredVATSumCalc_RU           sumCalc;
        RestoredVATLogGain_RU           restoredVATLogGain;
        RestoredVATLogTransOper_RU      restoredVATLogTransOper;
        RestoredVATLogUpdate_RU         restoredVATLogUpdate;
        BookStructSmallVATAmounts_RU    amounts;
        Factor                          factorExport;
        Factor                          factorNotLiable;
        NoYes                           included;
        boolean                         needRecalc;
        TransDate                       toDate;
        TransDate                       fromDate;
        MapEnumerator                   enumerator;
        TaxParameters                   taxParameters   = TaxParameters::find();
        Map                             changedCache    = Map::create(_packedChangedCache);
        ;

        ttsbegin;

        sumCalc = RestoredVATSumCalc_RU::construct();

        enumerator  = changedCache.getEnumerator();
        while (enumerator.moveNext())
        {
            restoredVATLogGain  = RestoredVATLogGain_RU::findRecId(enumerator.currentKey(), true);
            included            = enumerator.currentValue();

            if (restoredVATLogGain.Include != included)
            {
                restoredVATLogGain.Include = included;
                sumCalc.updateSum(restoredVATLogGain);

                needRecalc = true;
            }
        }

        sumCalc.end();

        this.reread();

        if (needRecalc)
        {
            factorExport    = this.factorExport()    / 100;
            factorNotLiable = this.factorNotLiable() / 100;

            sumCalc = RestoredVATSumCalc_RU::construct();

            while select forupdate restoredVATLogTransOper
                where restoredVATLogTransOper.TransDate      == this.TransDate                   &&
                     (restoredVATLogTransOper.LineType       == RestoredVATLineType_RU::Indirect ||
                      taxParameters.RestoredVATCalcMethod_RU == RestoredVATCalcMethod_RU::ByFactor)
            {
                amounts = BookStructSmallVATAmounts_RU::create(restoredVATLogTransOper.FacturedAmounts);

                restoredVATLogTransOper.TaxAmount           = amounts.taxAmountVAT() * factorExport;
                restoredVATLogTransOper.TaxAmountNotLiable  = amounts.taxAmountVAT() * factorNotLiable;
                restoredVATLogTransOper.AmountLiableToVAT   = amounts.amountLiableToVAT() * (factorExport + factorNotLiable);

                sumCalc.updateSum(restoredVATLogTransOper);
            }

            sumCalc.end();
        }

        [fromDate, toDate] = this.datePeriodBook();

        restoredVATLogUpdate = RestoredVATLogUpdate_RU::newPeriod(fromDate, toDate);

        if (this.RecalcIndirect)
        {
            restoredVATLogUpdate.init();
            restoredVATLogUpdate.processInDirectTrans(false);
            restoredVATLogUpdate.recalcIncomingIndirect();
            restoredVATLogUpdate.createLogTrans();

            this.reread();
            this.RecalcIndirect = NoYes::No;
            this.update();
        }

        restoredVATLogUpdate.recalcSalesTaxTrans();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkApproved</Name>
				<Source><![CDATA[
    static boolean checkApproved(TransDate _processingDate)
    {
        TransDate               toDate;
        TransDate               fromDate;
        RestoredVATLogTable_RU  restoredVATLogTable;
        ;

        [fromDate, toDate] = BookDataCalc_RU::datePeriodBook(_processingDate);

        restoredVATLogTable = RestoredVATLogTable_RU::find(toDate);

        return restoredVATLogTable.Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(TransDate _transDate)
    {
        TransDate               toDate;
        TransDate               fromDate;
        ;

        [fromDate, toDate] = BookDataCalc_RU::datePeriodBook(_transDate);

        return (select firstonly RecId from restoredVATLogTable_RU
                    index hint PeriodDateIdx
                    where restoredVATLogTable_RU.TransDate == toDate).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static RestoredVATLogTable_RU find(TransDate    _transDate,
                                       boolean      _forupdate = false)
    {
        RestoredVATLogTable_RU restoredVATLogTable;
        ;

        if (_transDate)
        {
            restoredVATLogTable.selectForUpdate(_forupdate);

            select firstonly restoredVATLogTable
                index hint PeriodDateIdx
                where restoredVATLogTable.TransDate == _transDate;
        }

        return restoredVATLogTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    static RestoredVATLogTable_RU findOrCreate(TransDate    _transDate,
                                               boolean      _forupdate = false)
    {
        RestoredVATLogTable_RU restoredVATLogTable;
        ;

        if (_transDate)
        {
            restoredVATLogTable = RestoredVATLogTable_RU::find(_transDate, _forupdate);

            if (! restoredVATLogTable)
            {
                restoredVATLogTable.TransDate = _transDate;
                restoredVATLogTable.insert();
            }
        }

        return restoredVATLogTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchBookExpConfirmExists</Name>
				<Source><![CDATA[
    static boolean purchBookExpConfirmExists(TransDate _checkDate, boolean _curPeriodOnly = false)
    {
        PurchBookVATProcessLogTable_RU          processLogTable;
        PurchBookVATProcessLogTrans_RU          processLogTrans;
        PurchBookVATProcessLogTransOper_RU      processLogTransOper;
        TransDate                               fromDate;
        TransDate                               toDate;
        ;

        [fromDate, toDate] = BookDataCalc_RU::datePeriodBook(_checkDate);

        select firstonly RecId from processLogTransOper
            where processLogTransOper.CanceledRefRecId == 0             &&
                  processLogTransOper.TransDate        >= fromDate      &&
                 (processLogTransOper.TransDate        <= toDate        ||
                  !_curPeriodOnly)                                      &&
                ((processLogTransOper.Blocked          == NoYes::No)    ||
                 (processLogTransOper.Blocked          == NoYes::Yes    &&
                  processLogTransOper.BlockedAuto      == NoYes::No))
        exists join processLogTrans
            where processLogTrans.RecId     == processLogTransOper.RefRecId &&
                  processLogTrans.TransType == SalesPurchBookTransType_RU::VATExportConfirmation
        exists join processLogTable
            where processLogTable.RecId     == processLogTransOper.LogTableRefRecId &&
                  processLogTable.TransDate >= fromDate                             &&
                 (processLogTable.TransDate <= toDate                               ||
                  !_curPeriodOnly);

        return processLogTransOper.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecalcAll</Name>
				<Source><![CDATA[
    static void setRecalcAll(TransDate _processingDate)
    {
        TransDate               toDate;
        TransDate               fromDate;
        RestoredVATLogTable_RU  restoredVATLogTable;
        ;

        [fromDate, toDate] = BookDataCalc_RU::datePeriodBook(_processingDate);

        restoredVATLogTable = RestoredVATLogTable_RU::find(toDate, true);

        if (restoredVATLogTable && ! restoredVATLogTable.Approved)
        {
            restoredVATLogTable.RecalcAll = NoYes::Yes;
            restoredVATLogTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtApprovedMsg</Name>
				<Source><![CDATA[
    static str txtApprovedMsg(TransDate _processingDate)
    {
        TransDate   toDate;
        TransDate   fromDate;
        ;

        [fromDate, toDate] = BookDataCalc_RU::datePeriodBook(_processingDate);

        return strFmt("@GLS114223", fromDate, toDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@GLS114253</DeveloperDocumentation>
	<FormRef>RestoredVATProcess_RU</FormRef>
	<Label>@GLS114253</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>TransDate</TitleField1>
	<TitleField2>Approved</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>PeriodDateIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>RSalesPurchBooks</Modules>
	<PrimaryIndex>PeriodDateIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovedBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Approve</Name>
			<Label>@GLS104415</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovedBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IncomingIndirect</Name>
			<Label>@GLS114323</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxStandardIndirectInc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxReducedIndirectInc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxTotals</Name>
			<Label>@GLS114336</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxStandardDirect</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxReducedDirect</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxStandardIndirect</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxReducedIndirect</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxStandardAsset</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxReducedAsset</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TotalGain</Name>
			<Label>@GLS114338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TotalGain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExportGain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DomesticGain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NotLiableGain</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Approved</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Approved</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ApprovedBy</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>EmployeeId_RU</ExtendedDataType>
			<Label>@SYS3492</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DomesticGain</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTDomesticGain_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExportGain</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTExportGain_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NotLiableGain</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTNotLiableGain_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RecalcAll</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RecalcIndirect</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxReducedAsset</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountAssetVAT10_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxReducedDirect</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountDirectVAT10_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxReducedIndirect</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountIndirectVAT10_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxReducedIndirectInc</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountIndirectIncVAT10_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxStandardAsset</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountAssetVAT20_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxStandardDirect</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountDirectVAT20_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxStandardIndirect</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountIndirectVAT20_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxStandardIndirectInc</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountIndirectIncVAT20_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalGain</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTTotalGain_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PeriodDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>RestoredVATLogTable</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>RestoredVATLogTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RestoredVATLogTable_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RestoredVATLogTable_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>