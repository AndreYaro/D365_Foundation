<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetGroupUserGroupOption</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetGroupUserGroupOption extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayUserGroupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the user group name of the current record in the <c>BudgetGroupUserGroupOption</c> table.
    /// </summary>
    /// <returns>
    /// The user group name; otherwise, an empty string.
    /// </returns>
    public display UserGroupName displayUserGroupName()
    {
        UserGroupName userGroupName;

        if (hasTableAccess(tablenum(BudgetOverrideUserGroupOption)))
        {
            userGroupName = BudgetOverrideUserGroupOption::find(this.BudgetOverrideUserGroupOption).displayUserGroupName();
        }

        return userGroupName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editUserGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the user group ID of the current record in the <c>BudgetGroupUserGroupOption</c>
    /// table.
    /// </summary>
    /// <param name="_set">
    /// true if the user group ID is set; otherwise, false.
    /// </param>
    /// <param name="_userGroupId">
    /// The new user group ID value when the <paramref name="_set" /> parameter is true.
    /// </param>
    /// <returns>
    /// The user group ID; otherwise, an empty string.
    /// </returns>
    public edit userGroupId editUserGroupId(boolean _set, userGroupId _userGroupId)
    {
        UserGroupId userGroupId;
        BudgetOverrideUserGroupOption budgetOverrideUserGroupOption;

        if (_set)
        {
            RefRecId oldBudgetOverrideUserGroupOption = this.BudgetOverrideUserGroupOption;

            if (hasTableAccess(tablenum(BudgetGroup))
                && hasTableAccess(tablenum(BudgetOverrideUserGroupOption)))
            {
                BudgetGroup budgetGroup = BudgetGroup::find(this.BudgetGroup);
                budgetOverrideUserGroupOption = BudgetOverrideUserGroupOption::findByUserGroupAndConfiguration(_userGroupId, budgetGroup.BudgetControlConfiguration);

                if (!budgetOverrideUserGroupOption && hasTableAccess(tablenum(BudgetOverrideUserGroupOption), AccessType::Edit))
                {
                    // The default option for the user group at the company level must exist.
                    budgetOverrideUserGroupOption.UserGroupInfo = _userGroupId;
                    budgetOverrideUserGroupOption.DefaultOverBudgetOption = BudgetCheckOverbudgetOption::PreventProcessing;
                    budgetOverrideUserGroupOption.BudgetControlConfiguration = budgetGroup.BudgetControlConfiguration;

                    if (budgetOverrideUserGroupOption.validateWrite())
                    {
                        ttsbegin;

                        budgetOverrideUserGroupOption.write();

                        ttscommit;
                    }
                }
            }

            if (budgetOverrideUserGroupOption.RecId != 0)
            {
                this.BudgetOverrideUserGroupOption = budgetOverrideUserGroupOption.RecId;

                if (this.validateField(fieldnum(BudgetControlRuleUserGroupOption, BudgetOverrideUserGroupOption)))
                {
                    userGroupId = _userGroupId;
                }
                else
                {
                    // Validation of the new value failed.
                    this.BudgetOverrideUserGroupOption = oldBudgetOverrideUserGroupOption;
                }
            }
        }
        else
        {
            if (hasTableAccess(tablenum(BudgetOverrideUserGroupOption)))
            {
                userGroupId = BudgetOverrideUserGroupOption::find(this.BudgetOverrideUserGroupOption).UserGroupInfo;
            }
        }

        return userGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid = super();

        isValid = isValid && BudgetControlConfigurationManager::validateConfigurationEditPermitted(BudgetOverrideUserGroupOption::find(this.BudgetOverrideUserGroupOption).BudgetControlConfiguration);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case (fieldnum(BudgetGroupUserGroupOption, BudgetOverrideUserGroupOption)) :

                    if (BudgetGroupUserGroupOption::existByGroupOverrideUserGroup(this.BudgetGroup, this.BudgetOverrideUserGroupOption))
                    {
                        isValid = checkFailed(strfmt("@SYS127912", BudgetOverrideUserGroupOption::find(this.BudgetOverrideUserGroupOption).UserGroupInfo));
                    }

                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = super();

        if (isValid)
        {
            BudgetOverrideUserGroupOption budgetOverrideUserGroupOption = BudgetOverrideUserGroupOption::find(this.BudgetOverrideUserGroupOption);

            isValid = BudgetControlConfigurationManager::validateConfigurationEditPermitted(budgetOverrideUserGroupOption.BudgetControlConfiguration);

            if (isValid && !budgetOverrideUserGroupOption.checkUserGroupInfo())
            {
                // The associated user group on the BudgetOverrideUserGroupOption table no longer exists.
                isValid = checkFailed(strfmt("@SYS127911", budgetOverrideUserGroupOption.UserGroupInfo));
            }

            if (isValid && this.RecId == 0)
            {
                // For new records validate that the user group is not already in use.
                isValid = this.validateField(fieldnum(BudgetGroupUserGroupOption, BudgetOverrideUserGroupOption));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>BudgetGroupUserGroupOption</c>table; if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetGroupUserGroupOption</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!BudgetGroupUserGroupOption::exist(_recId))
        {
            ret = checkFailed(strfmt(BudgetGroupUserGroupOption::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>BudgetGroupUserGroupOption</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetGroupUserGroupOption</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly RecId from budgetGroupUserGroupOption
                    where budgetGroupUserGroupOption.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByGroupOverrideUserGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>BudgetGroupUserGroupOption</c> table exists.
    /// </summary>
    /// <param name="_budgetGroupRecId">
    /// The <c>BudgetGroup</c> reference of the <c>BudgetGroupUserGroupOption</c> record to find.
    /// </param>
    /// <param name="_budgetOverrideUserGroupOptionRecId">
    /// The <c>BudgetOverrideUserGroupOption</c> reference of the <c>BudgetGroupUserGroupOption</c> record to find.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByGroupOverrideUserGroup(RefRecId _budgetGroupRecId, RefRecId _budgetOverrideUserGroupOptionRecId)
    {
        boolean found;

        found = (select firstonly RecId from budgetGroupUserGroupOption
                    where budgetGroupUserGroupOption.BudgetGroup == _budgetGroupRecId
                        && budgetGroupUserGroupOption.BudgetOverrideUserGroupOption == _budgetOverrideUserGroupOptionRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetGroupUserGroupOption</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record Id of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetGroupUserGroupOption</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetGroupUserGroupOption find(
        RecId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetGroupUserGroupOption budgetGroupUserGroupOption;

        budgetGroupUserGroupOption.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetGroupUserGroupOption.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetGroupUserGroupOption
            where budgetGroupUserGroupOption.RecId == _recId;

        return budgetGroupUserGroupOption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
	<DeveloperDocumentation>@SYS317157</DeveloperDocumentation>
	<FormRef>BudgetControlGroupUserGroupOption</FormRef>
	<Label>@SYS127673</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>BudgetGroup</TitleField1>
	<TitleField2>BudgetOverrideUserGroupOption</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>BudgetGroupOverrideUserGroupOptionIdx</ClusteredIndex>
	<Modules>Budget</Modules>
	<ReplacementKey>BudgetGroupOverrideUserGroupOptionIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editUserGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayUserGroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideOverbudgetOption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetOverrideUserGroupOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS35583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetOverrideUserGroupOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverbudgetOption</Name>
			<Label>@SYS127627</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OverrideOverbudgetOption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UserGroup</Name>
			<Label>@SYS21952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editUserGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayUserGroupName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS139153</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetOverrideUserGroupOption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS314450</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideOverbudgetOption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>BudgetCheckOverbudgetOption</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetGroupOverrideUserGroupOptionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetOverrideUserGroupOption</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS139153</EntityRelationshipRole>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BudgetGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetGroup_BudgetGroupUserGroupOption</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetGroup</Name>
					<Field>BudgetGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetOverrideUserGroupOption</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS314450</EntityRelationshipRole>
			<RelatedTable>BudgetOverrideUserGroupOption</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetOverrideUserGroupOption</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetOverrideUserGroupOption_BudgetGroupUserGroupOption</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetOverrideUserGroupOption</Name>
					<Field>BudgetOverrideUserGroupOption</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>