<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInfoZakat_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInfoZakat_SA extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkContracts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>VendInfoZakat_SA</c> table exist the contract with other tables.
    /// </summary>
    /// <returns>
    /// Returns true if doesn't exist contract.
    /// </returns>
    public boolean checkContracts()
    {
        VendContractZakat_SA                    vendContractZakat;
        PurchTable                              purchTable;
        GeneralJournalAccountEntryZakat_SA      generalJournalAccountEntryZakat;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        GeneralJournalEntry                     generalJournalEntry;
        VendTrans                               vendTrans;
        SubledgerVoucherGeneralJournalEntry     subledgerVoucherLink;
        boolean                                 ret = true;

        if (! this.IsSubcontractor)
        {
            while select ContractNum from vendContractZakat
                where vendContractZakat.VendAccount == this.VendAccount
            {
                select firstonly RecId from purchTable
                    where purchTable.ContractNum_SA == vendContractZakat.ContractNum
                       && purchTable.OrderAccount   == this.VendAccount;

                if (purchTable.RecId)
                {
                    ret = checkFailed("@SYS322403");
                    break;
                }

                select firstonly RecId, DataAreaId from generalJournalAccountEntryZakat
                    where generalJournalAccountEntryZakat.ContractNum == vendContractZakat.ContractNum
                join GeneralJournalEntry from generalJournalAccountEntry
                    where generalJournalAccountEntry.RecId == generalJournalAccountEntryZakat.GeneralJournalAccountEntry
                join AccountingDate from generalJournalEntry
                    where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                join Voucher from subledgerVoucherLink
                    where subledgerVoucherLink.GeneralJournalEntry == generalJournalEntry.RecId &&
                        subledgerVoucherLink.VoucherDataAreaId == generalJournalAccountEntryZakat.DataAreaId
                join Voucher, TransDate from vendTrans
                    where vendTrans.Voucher == subledgerVoucherLink.Voucher &&
                        vendTrans.TransDate == generalJournalEntry.AccountingDate;

                if (generalJournalAccountEntryZakat.RecId)
                {
                    ret = checkFailed("@SYS322403");
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        VendContractZakat_SA    vendContractZakat;

        super();

        if (! this.IsSubcontractor)
        {
            delete_from vendContractZakat
                where vendContractZakat.VendAccount == this.VendAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(VendInfoZakat_SA, IsSubcontractor):
                    ret = this.checkContracts();
                    break;

                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>VendInfoZakat_SA</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record id of <c>VendInfoZakat_SA</c> table is used to find record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>VendInfoZakat_SA</c> table.
    /// </returns>
    public static VendInfoZakat_SA find(
        recId              _recId,
        boolean            _forUpdate        = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendInfoZakat_SA  vendInfoZakat;

        vendInfoZakat.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendInfoZakat.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendInfoZakat
            where vendInfoZakat.RecId == _recId;

        return vendInfoZakat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>VendInfoZakat_SA</c> table.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account is used to find record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>VendInfoZakat_SA</c> table.
    /// </returns>
    public static VendInfoZakat_SA findByVendAccount(
        VendAccount        _vendAccount,
        boolean            _forUpdate        = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendInfoZakat_SA  vendInfoZakat;

        if (_vendAccount)
        {
            vendInfoZakat.selectForUpdate(_forUpdate);
            if (_forUpdate
                && _concurrencyModel != ConcurrencyModel::Auto)
            {
                vendInfoZakat.concurrencyModel(_concurrencyModel);
            }

            select firstonly vendInfoZakat
                where vendInfoZakat.VendAccount == _vendAccount;
        }

        return vendInfoZakat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSubContractor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>VendInfoZakat_SA</c> table.
    /// </summary>
    /// <param name="_formControl">
    /// The form control is used to create the lookup.
    /// </param>
    /// <param name="_account">
    /// The vendor account is used to find record.
    /// </param>
    /// <param name="_offsetAccount">
    /// The offset vendor account is used to find record.
    /// </param>
    public static void lookupSubContractor(
        FormControl   _formControl,
        VendAccount   _account,
        VendAccount   _offsetAccount)
    {
        SysReferenceTableLookup       sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(VendInfoZakat_SA), _formControl);
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange      queryBuildRange;

        queryBuildDataSource  = query.addDataSource(tableNum(VendInfoZakat_SA));
        queryBuildRange       = queryBuildDataSource.addRange(fieldNum(VendInfoZakat_SA, VendAccount));
        queryBuildRange.value(queryValue(_account));
        queryBuildRange       = queryBuildDataSource.addRange(fieldNum(VendInfoZakat_SA, VendAccount));
        queryBuildRange.value(queryValue(_offsetAccount));

        sysReferenceTableLookup.addLookupfield(fieldNum(VendInfoZakat_SA, VendAccount));
        sysReferenceTableLookup.addLookupfield(fieldNum(VendInfoZakat_SA, FileNumber));
        sysReferenceTableLookup.parmQuery(query);
        sysReferenceTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>SA</CountryRegionCodes>
	<DeveloperDocumentation>@SYS322155</DeveloperDocumentation>
	<FormRef>VendTable</FormRef>
	<Label>@SYS9449</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>VendAccount</TitleField1>
	<TitleField2>FileNumber</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<DataSharingType>Single</DataSharingType>
	<Modules>AccountsPayable</Modules>
	<ReplacementKey>VendAccountIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>VendContractZakat_SA</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendContractZakat_SA</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Zakat</Name>
			<Label>@SYS321586</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegistrationNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSubcontractor</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FileNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CompanyFileNumZakat_SA</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSubcontractor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS321589</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RegistrationNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DirOrganizationNumber</ExtendedDataType>
			<Label>@SYS322395</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendServiceNumZakat_SA</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendAccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable_FK</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ZakatVendorInfo_SA</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>