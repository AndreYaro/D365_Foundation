<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInterest</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInterest extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isUsed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified <c>CustInterest</c> record is associated with the
    ///    <c>CustLedgerAccounts</c> records.
    /// </summary>
    /// <returns>
    ///    true if the interest code record is associated with the <c>CustLedgerAccounts</c> records;
    ///    otherwise, false.
    /// </returns>
    public boolean isUsed()
    {
        return (select firstonly custLedgerAccounts where custLedgerAccounts.CustInterest == this.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInterestCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified <c>CustInterest</c> table record is associated with
    /// <c>CustBillingClassification</c> or <c>CustBillingCodeVersion</c> table records.
    /// </summary>
    /// <returns>
    /// true if the interest code record is associated with the <c>CustBillingClassification</c> or
    /// <c>CustBillingCodeVersion</c> table records; otherwise, false.
    /// </returns>
    public boolean validateInterestCode()
    {
        CustBillingClassification custBillingClassification;
        CustBillingCodeVersion custBillingCodeVersion;
        boolean isValid = true;

        select firstonly RecId from custBillingClassification
            where custBillingClassification.CustInterest == this.RecId;

        if (custBillingClassification.RecId != 0)
        {
            isValid = checkFailed(strfmt("@SPS644", "@SPS371"));
        }

        if (isValid)
        {
            select firstonly RecId from custBillingCodeVersion
                where custBillingCodeVersion.CustInterest == this.RecId;

            if (custBillingCodeVersion.RecId != 0)
            {
                isValid = checkFailed(strfmt("@SPS644", "@SPS21"));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(CustInterestRecId _recId)
    {
        boolean found = true;

        if (!CustInterest::exist(_recId))
        {
            found = checkFailed(strfmt(CustInterest::txtNotExist(), _recId));
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
        public static boolean exist(CustInterestRecId _recId)
    {
        boolean found;

        found = (select firstonly RecId
                    from custInterest
                        where custInterest.RecId == _recId).RecId != 0;
        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustInterest</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>CustInterest</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CustInterest</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static CustInterest find(
        CustInterestRecId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInterest custInterest;

        custInterest.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInterest.concurrencyModel(_concurrencyModel);
        }

        select firstonly custInterest where custInterest.RecId == _recId;

        return custInterest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBillingClassOrPostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustInterest</c> table for the specified interest code.
    /// </summary>
    /// <param name="_accountNum">
    /// The customer account number to be used.
    /// </param>
    /// <param name="_billingClassificationId">
    /// The billing classification record ID to be used.
    /// </param>
    /// <param name="_custPostingProfileId">
    /// The customer posting profile ID to be used.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>CustInterest</c> table buffer.
    /// </returns>
    public static CustInterest findByBillingClassOrPostingProfile(
        CustAccount _accountNum,
        RefRecId _billingClassificationId,
        CustPostingProfile _custPostingProfileId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInterest custInterest;
        CustBillingClassification custBillingClassification = CustBillingClassification::find(_billingClassificationId);

        custInterest.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInterest.concurrencyModel(_concurrencyModel);
        }

        if (custBillingClassification.UseFromPostingProfile)
        {
            custInterest = CustInterest::find(
                CustLedgerAccounts::custInterest(_accountNum, _custPostingProfileId),
                _forUpdate,
                _concurrencyModel);
        }
        else
        {
            select custInterest
                where custInterest.RecId == custBillingClassification.CustInterest;
        }

        return custInterest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByInterestCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustInterest</c> table for the specified interest code.
    /// </summary>
    /// <param name="_custInterestCode">
    /// The interest code to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>CustInterest</c> table buffer.
    /// </returns>
    public static CustInterest findByInterestCode(
        CustInterestCode _custInterestCode,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInterest custInterest;

        custInterest.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInterest.concurrencyModel(_concurrencyModel);
        }

        select custInterest
            where
            custInterest.InterestCode == _custInterestCode;

        return custInterest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTableEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>CustInterest</c> table contains records.
    /// </summary>
    /// <returns>
    ///    true if records exist in the <c>CustInterest</c> table; otherwise, false.
    /// </returns>
    public static boolean isTableEmpty()
    {
        return (select firstonly RecId from custInterest).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS102175";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CustInterest</ConfigurationKey>
	<DeveloperDocumentation>@SYS125059</DeveloperDocumentation>
	<FormRef>Interest</FormRef>
	<Label>@SYS327672</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>InterestCode</TitleField1>
	<TitleField2>Txt</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>CodeIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustInterestVersion</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInterestVersion</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustLedgerAccounts</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>CustLedgerAccounts</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LanguageTxt</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LanguageTxt</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterestCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInterestType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterestCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterestCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterestCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterestCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInterestType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustInterestType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>CustInterestType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterestCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInterestCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InterestCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>