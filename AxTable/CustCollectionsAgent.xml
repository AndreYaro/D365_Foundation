<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionsAgent</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustCollectionsAgent extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAgentName</Name>
				<Source><![CDATA[
    public display DirPartyName parmAgentName()
    {
        return CustCollectionsAgent::getAgentName(this.DirPartyRelationship);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectionsTeam</Name>
				<Source><![CDATA[
        public static OMTeam collectionsTeam()
    {
    #CustCollections

        CustCollectionsTeamRecId teamRecId = CustParameters::find().CollectionsOMTeam;
        OMTeam team;
        OMTeamMembershipCriterion teamCriteria;
        CustParameters custParameters;

        if (teamRecId)
        {
            team = OMTeam::find(teamRecId);
            if (team)
                return team;
        }

        // No team specified or found, try the default name
        select team
            where team.Name == #CustCollectionsTeamName;

        ttsbegin;

        if (!team)
        {
            // Does the default Team Criteria exist?
            teamCriteria = OMTeamMembershipCriterion::findByName(#CustCollectionsTeamCriteriaName);

            if (!teamCriteria)
            {
                // No criteria exists, create default
                teamCriteria.clear();
                teamCriteria.Name = #CustCollectionsTeamCriteriaName;
                teamCriteria.AllowContractor = NoYes::Yes;
                teamCriteria.AllowEmployee = NoYes::Yes;
                teamCriteria.insert();
            }

            // No team exists, create default
            team.clear();
            team.Name = #CustCollectionsTeamName;
            team.TeamMembershipCriterion = teamCriteria.RecId;
            team.Description = #CustCollectionsTeamDescription;
            team.IsActive = NoYes::Yes;
            team.insert();
        }

        // Add the team to AR setup
        custParameters = CustParameters::find(true);
        custParameters.CollectionsOMTeam = team.RecId;
        custParameters.update();

        ttscommit;

        return team;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByDirPartyRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes an agent when its relationship is deleted.
    /// </summary>
    /// <param name="_dirPartyRelationship">
    /// The <c>RecId</c> of an agent's relationship.
    /// </param>
    public static void deleteByDirPartyRelationship(RefRecId _dirPartyRelationship)
    {
        CustCollectionsAgent custCollectionsAgent;
        custCollectionsAgent custCollectionsAgentDelete;

        ttsBegin;

        while select crossCompany dataAreaId from custCollectionsAgent
            group by dataAreaId
            where CustCollectionsAgent.DirPartyRelationShip == _dirPartyRelationship
        {
            changeCompany(custCollectionsAgent.company())
            {
                custCollectionsAgentDelete = null;
                delete_from custCollectionsAgentDelete
                    where custCollectionsAgentDelete.DirPartyRelationShip == _dirPartyRelationship;
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
        public static boolean exist(CustCollectionsTeamRecId _dirPartyRelationship)
    {
        return
            (select firstonly custCollectionsAgent
                where custCollectionsAgent.DirPartyRelationship == _dirPartyRelationship).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustCollectionsAgent</c> record by using a
    ///    <c>DirPartyRelationship</c> record ID.
    /// </summary>
    /// <param name="_dirPartyRelationship">
    ///    The record ID of the agent to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    The specified <c>CustCollectionsAgent</c> record.
    /// </returns>
    public static CustCollectionsAgent find(CustCollectionsTeamRecId _dirPartyRelationship, boolean _forUpdate = false)
    {
        CustCollectionsAgent custCollectionsAgent = null;

        if (_dirPartyRelationship)
        {
            custCollectionsAgent.selectForUpdate(_forUpdate);

            select custCollectionsAgent
                where custCollectionsAgent.DirPartyRelationship == _dirPartyRelationship;
        }
        return custCollectionsAgent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCurrentAgent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current user as an agent.
    /// </summary>
    /// <returns>
    ///    The current user as an agent.
    /// </returns>
    public static CustCollectionsAgent findCurrentAgent()
    {
        OMTeam omTeam = CustCollectionsAgent::collectionsTeam();
        DirRelationshipTypeTable dirRelationshipTypeTable;
        DirPersonUser dirPersonUser;
        CustCollectionsAgent custCollectionsAgent;
        DirPerson dirPerson;
        DirPartyRelationship dirPartyRelationship;

        // The current agent is the user who is
        // a DirPerson who is a member of the currently configured Collections team.
        select firstonly custCollectionsAgent
            exists join dirPersonUser
                where
                    dirPersonUser.User == curUserId()
            exists join dirRelationshipTypeTable
                where dirRelationshipTypeTable.SystemType == DirSystemRelationshipType::TeamMember
            exists join dirPartyRelationship
                where
                    dirPartyRelationship.ParentParty == omTeam.RecId &&
                    dirPartyRelationship.RelationshipTypeId == dirRelationshipTypeTable.RelationshipTypeId &&
                    dirPartyRelationship.ChildParty == dirPersonUser.PersonParty &&
                    dirPartyRelationship.RecId == custCollectionsAgent.DirPartyRelationship
            exists join dirPerson
                where
                    dirPerson.RecId == dirPersonUser.PersonParty;

        return custCollectionsAgent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgentName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of an agent by using the specified <c>DirPartyRelationship</c> record ID.
    /// </summary>
    /// <param name="_dirPartyRelationship">
    ///    The record ID of the <c>DirPartyRelationship</c> record for the agent.
    /// </param>
    /// <returns>
    ///    The name of an agent; otherwise, an empty string.
    /// </returns>
    public static DirPartyName getAgentName(CustCollectionsTeamRecId _dirPartyRelationship)
    {
        DirPerson dirPerson;
        DirPartyRelationship dirPartyRelationship;

        select firstonly Name
            from dirPerson
            exists join dirPartyRelationship
                where
                    dirPartyRelationship.RecId == _dirPartyRelationship &&
                    dirPerson.RecId == dirPartyRelationship.ChildParty;

        return dirPerson ? dirPerson.Name : '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Collections</ConfigurationKey>
	<DeveloperDocumentation>@SYS328546</DeveloperDocumentation>
	<Label>@SYS129805</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>AllowShowAllPools</TitleField1>
	<TitleField2>DefaultCustomerPool</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>DirPartyRelationshipIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustCollectionsAgentPool</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustCollectionsAgentPool</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultCustomerPool</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowShowAllPools</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DirPartyRelationship</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DirPartyRelationship</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultCustomerPool</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowShowAllPools</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DirPartyRelationship</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowShowAllPools</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCollectionsAgentAllowShowAllPools</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultCustomerPool</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCollectionsPoolId</ExtendedDataType>
			<Label>@SYS129803</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DirPartyRelationship</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustCollectionsTeamRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DirPartyRelationshipIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DirPartyRelationship</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustCollectionsPool</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustCollectionsPool</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustCollectionsPool</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultCustomerPool</Name>
					<SourceEDT>CustCollectionsPoolId</SourceEDT>
					<Field>DefaultCustomerPool</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPartyRelationship</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>DirPartyRelationship</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DirPartyRelationship</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CustCollectionsAgent</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DirPartyRelationship</Name>
					<Field>DirPartyRelationship</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>