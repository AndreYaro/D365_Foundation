<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCatchWeightTag</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSCatchWeightTag extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoCreateCWTagsPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates multiple catch weight tag records when auto generating tag Id's and capturing aggregate weight.
    /// </summary>
    /// <param name="_cwInventQty">
    /// The number of catch weight tags that need to be generated.
    /// </param>
    /// <param name="_cwTagWeight">
    /// The weight value quantity being processed.
    /// </param>
    /// <param name="_receiptRefRecId">
    /// A reference record Id for when tracking dimensions are captured.
    /// </param>
    /// <param name="_purchLine">
    /// The purchase line tied to the catch weight tag.
    /// </param>
    /// <param name="_receiptId">
    /// Receipt Id used to clean up tag records in the case of receiving errors.
    /// </param>
    public static void autoCreateCWTagsPurch(
        PdsCWInventQty  _cwInventQty,
        WHSTransWeight  _cwTagWeight,
        RefRecId        _receiptRefRecId,
        PurchLine       _purchLine,
        WHSReceiptId    _receiptId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoCreateCWTagsTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates multiple catch weight tag records when auto generating tag Id's and capturing aggregate weight for transfer orders.
    /// </summary>
    /// <param name="_cwInventQty">
    /// The number of catch weight tags that need to be generated.
    /// </param>
    /// <param name="_cwTagWeight">
    /// The weight value quantity being processed.
    /// </param>
    /// <param name="_receiptRefRecId">
    /// A reference record Id for when tracking dimensions are captured.
    /// </param>
    /// <param name="_transferLine">
    /// The transfer line tied to the catch weight tag.
    /// </param>
    /// <param name="_receiptId">
    /// Receipt Id used to clean up tag records in the case of receiving errors.
    /// </param>
    public static void autoCreateCWTagsTransfer(
        PdsCWInventQty      _cwInventQty,
        Qty                 _cwTagWeight,
        RefRecId            _receiptRefRecId,
        InventTransferLine  _transferLine,
        WHSReceiptId        _receiptId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCatchWeightTagFromAdjustIn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a catch weight tag based on information from an adjustment in.
    /// </summary>
    /// <param name="_cwTagNumber">
    /// The identification number of the catch weight tag.
    /// </param>
    /// <param name="_capturedWeight">
    /// The captured weight of the catch weight tag.
    /// </param>
    /// <param name="_itemId">
    /// The item id the catch weight tag is tied to.
    /// </param>
    /// <param name="_inventDimId">
    /// Inventory dimensions tied to captured catch weight tag.
    /// </param>
    public static void createCatchWeightTagFromAdjustIn(
        WHSCatchWeightTagNumber	_cwTagNumber,
        WHSCapturedWeight		_capturedWeight,
        ItemId					_itemId,
        InventDimId				_inventDimId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoCreateCWTagsFromReturnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates multiple catch weight tag records when auto generating tag Id's and capturing aggregate weight.
    /// </summary>
    /// <param name="_cwInventQty">
    /// The number of catch weight tags that need to be generated.
    /// </param>
    /// <param name="_cwTagWeight">
    /// The weight value quantity being processed.
    /// </param>
    /// <param name="_receiptRefRecId">
    /// A reference record Id for when tracking dimensions are captured.
    /// </param>
    /// <param name="_salesLine">
    /// The return sales line tied to the catch weight tag.
    /// </param>
    [Hookable(false)]
    internal static void autoCreateCWTagsFromReturnLine(
        PdsCWInventQty      _cwInventQty,
        Qty                 _cwTagWeight,
        RefRecId            _receiptRefRecId = 0,
        SalesLine           _salesLine = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>WHSCatchWeightTag</c> table.
    /// </summary>
    /// <param name = "_recId">
    /// The record ID to find.
    /// </param>
    /// <param name = "_forupdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>WHSCatchWeightTag</c> table; otherwise, an empty record.
    /// </returns>
    [Hookable(false)]
    internal static WHSCatchWeightTag findByRecId(
        WHSCatchWeightTagRecId _recId,
        boolean                _forupdate = false)
    {
        WHSCatchWeightTag catchWeightTag;
    
        if (_recId)
        {
            catchWeightTag.selectForUpdate(_forupdate);
    
            select firstOnly catchWeightTag
                where catchWeightTag.RecId == _recId;
        }
    
        return catchWeightTag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>WHSCatchWeightTag</c> table.
    /// </summary>
    /// <param name = "_tagNumber">
    /// The tag number to find the details for.
    /// </param>
    /// <param name = "_forupdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>WHSCatchWeightTag</c> table; otherwise, an empty record.
    /// </returns>
    public static WHSCatchWeightTag find(WHSCatchWeightTagNumber _tagNumber, boolean _forupdate = false)
    {
        WHSCatchWeightTag catchWeightTag;
    
        if (_tagNumber)
        {
            catchWeightTag.selectForUpdate(_forupdate);
    
            select firstOnly catchWeightTag
                where catchWeightTag.TagNumber == _tagNumber;
        }
    
        return catchWeightTag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see whether or not the record exists.
    /// </summary>
    /// <param name = "_tagId">The Catch Weight Tag Id to search for.</param>
    /// <returns>true if the record exists; false otherwise.</returns>
    public static boolean exist(WHSCatchWeightTagNumber _tagId)
    {
        WHSCatchWeightTag whsCatchWeightTag;

        return _tagId &&
               (select firstonly RecId from whsCatchWeightTag
                where whsCatchWeightTag.TagNumber == _tagId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCWTagFromReturnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a catch weight tag record based off a return order line.
    /// </summary>
    /// <param name="_cwTagId">
    /// The identification number of the catch weight tag.
    /// </param>
    /// <param name="_cwTagWeight">
    /// The captured weight of the catch weight tag.
    /// </param>
    /// <param name="_salesLine">
    /// The sales line for the return order the catch weight tag is being returned against.
    /// </param>
    /// <param name="_inventDimId">
    /// Inventory dimensions tied to captured catch weight tag.
    /// </param>
    /// <param name="_receiptRefRecId">
    /// Reference receipt details record the catch weight tag is tied to.
    /// </param>
    [Hookable(false)]
    internal static void createCWTagFromReturnLine(
        WHSCatchWeightTagNumber _cwTagId,
        Qty                     _cwTagWeight,
        SalesLine               _salesLine,
        InventDimId             _inventDimId = '',
        RefRecId                _receiptRefRecId = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickOutboundCWTag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the catch weight tag record when being picked for outbound work.
    /// </summary>
    /// <param name="_cwTagId">
    /// The Id of the catch weight tag being picked.
    /// </param>
    /// <param name="_workLine">
    /// The work line the catch weight tag is being picked against.
    /// </param>
    public static void pickOutboundCWTag(
        WHSCatchWeightTagNumber  _cwTagId,
        WHSWorkLine _workLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>WHSCatchWeightTag</c> record and registers an event.
    /// </summary>
    public void insert()
    {
        if (!WHSCatchWeightTagCache::construct().isCatchWeightTagFeatureUsed())
        {
            WHSCatchWeightTagCache::construct().clearCache();
        }

        ttsbegin;

        if (this.InventDimId && this.ItemId)
        {
            this.ProductDimensionInventDimId = this.productDimension().InventDimId;
        }

        super();

        this.registerTagEvent(WHSCatchWeightTagRegistrationEvent::TagCreated);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the product dimensions.
    /// </summary>
    /// <returns>Product dimension for the tag</returns>
    [Hookable(false)]
    internal InventDim productDimension()
    {
        InventDim productDimensionInventDim = InventDim::find(this.InventDimId);
        productDimensionInventDim.clearNotProductDim(InventDimGroupSetup::newItemId(this.ItemId));
        return InventDim::findOrCreate(productDimensionInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimWithTagSpecificDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an <c>InventDim</c> record with the dimensions that can be associated with a catch weight tag.
    /// </summary>
    /// <param name = "_inventDim"><c>InventDim</c>buffer.</param>
    /// <param name = "_itemId">The Item Id.</param>
    /// <returns>Inventory dimension with the product dimensions, tracking dimensions and inventory status or all dimensions depending on the 
    /// policy setting for catch weight tag dimension tracking method.</returns>
    [Hookable(false)]
    internal static InventDimId inventDimWithTagSpecificDimensions(InventDim _inventDim, ItemId _itemId)
    {
        if (WHSInventTable::catchWeightTagDimensionTrackingMethod(_itemId) == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions)
        {
            return _inventDim.inventDimId;
        }
        else
        {
            InventDim inventDim;

            inventDim.data(_inventDim);
            inventDim.clearNotSelectedDim(WHSCatchWeightTag::inventDimParmTagDimensions());
            return InventDim::findOrCreate(inventDim).inventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmTagDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an instance of <c>InventDimParm</c> with product, tracking and status dimensions for a tag.
    /// </summary>
    /// <returns>Return an instance of <c>InventDimParm</c>.</returns>
    private static InventDimParm inventDimParmTagDimensions()
    {
        InventDimParm inventDimParm;
        
        inventDimParm.setAllProductDimensions();
        inventDimParm.setAllTrackingDimensions();
        inventDimParm.InventStatusFlag = true;
        
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>WHSCatchWeightTag</c> record and registers the event.
    /// </summary>
    public void update()
    {
        ttsbegin;

        if (this.InventDimId != this.orig().InventDimId)
        {
            this.ProductDimensionInventDimId = this.productDimension().InventDimId;
        }

        boolean isTagDeletion;

        if (this.IsDeleted && !this.orig().IsDeleted)
        {
            isTagDeletion = true;
        }

        this.assertTagReactivationNotAllowed();

        super();

        if (isTagDeletion)
        {
            this.registerTagEvent(WHSCatchWeightTagRegistrationEvent::TagDeleted);
        }
        else
        {
            this.registerTagEvent(WHSCatchWeightTagRegistrationEvent::TagUpdated);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertTagReactivationNotAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Block reactivation of tag.
    /// </summary>
    private void assertTagReactivationNotAllowed()
    {
        if (!this.IsDeleted && this.orig().IsDeleted)
        {
            throw error("@WAX:ErrorMessageCatchWeightTagReactivationNotAllowed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerTagEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers the tag events.
    /// </summary>
    /// <param name = "_event">Event to be registered. </param>
    private void registerTagEvent(WHSCatchWeightTagRegistrationEvent _event)
    {
        WHSCatchWeightTagEventRegistration tagRegistration = WHSCatchWeightTagEventRegistration::instantiateFromTagRegistration(_event);
        tagRegistration.registerEvent(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByTagNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the catch weight tag and registers a delete event.
    /// </summary>
    /// <param name = "_tagNumber">Tag number</param>
    /// <returns>True if tag has been deleted; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean deleteByTagNumber(WHSCatchWeightTagNumber _tagNumber)
    {
        boolean ret = true;

        ttsbegin;

        WHSCatchWeightTag tag = WHSCatchWeightTag::find(_tagNumber, true);

        if (!tag)
        {
            ret = checkFailed(strFmt("@WAX:WHSDeleteTagRecordInvalidTag", _tagNumber));
        }
        else if (!WHSCatchWeightTagStatus::isActive(_tagNumber))
        {
            ret = checkFailed(strFmt("@WAX:WHSTagIsInactiveCannotBeDeleted", _tagNumber));
        }
        
        if (ret)
        {
            tag.IsDeleted = NoYes::Yes;
            tag.update();
        }
        
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeCapturedWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change the captured weight of the catch weight tag
    /// </summary>
    /// <param name = "_tagNumber">Tag number</param>
    /// <param name="_newCapturedWeight">
    /// The parameter of type <c>WHSCapturedWeight</c>.
    /// </param>
    /// <returns>True if tag has been deleted; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean changeCapturedWeight(WHSCatchWeightTagNumber   _tagNumber,
                                                 WHSCapturedWeight         _newCapturedWeight)
    {
        boolean ret;

        ttsbegin;

        WHSCatchWeightTag tag = WHSCatchWeightTag::find(_tagNumber, true);
        
        if (tag && !tag.IsDeleted)
        {
            tag.CapturedWeight = _newCapturedWeight;

            // If the quantity is not valid, show the error message.
            if (PdsCatchWeight::validateInventQty(tag.ItemId, tag.CapturedWeight, 1, true))
            {
                tag.update();            
                ret = true;
            }
        }
        
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory dimension of the tag.
    /// </summary>
    /// <returns>An <c>InventDim</c> buffer.</returns>
    [Hookable(false)]
    internal InventDim inventDim()
    {
        return InventDim::find(this.inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCatchWeightTagDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update catch weight tag dimension.
    /// </summary>
    /// <param name = "_inventDim">An <c>InventDim</c> buffer.</param>
    /// <param name = "_skipRegistrationEvent">Determines if the update registration event should be skipped; optional.</param>
    [Hookable(false)]
    internal void updateCatchWeightTagDimension(InventDim _inventDim, boolean _skipRegistrationEvent = false)
    {
        if (!this.IsDeleted
            && !InventDim::isInventDimEqual(this.inventDim(), _inventDim))
        {
            this.InventDimId = _inventDim.InventDimId;

            if (_skipRegistrationEvent)
            {
                this.ProductDimensionInventDimId = this.productDimension().InventDimId;
                this.doUpdate();
            }
            else
            {
                this.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory unit of the catch weight tag.
    /// </summary>
    /// <returns>
    /// The inventory unit of the catch weight tag.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display UnitOfMeasureSymbol inventUnitId()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();

        if (ret && !this.orig().isDeleted)
        {
            ret = checkFailed(strFmt("@WAX:CatchWeightTagCannotBeDeleted", this.TagNumber));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the <c>WHSCatchWeightTag</c> record can be saved.
    /// </summary>
    /// <returns>
    ///    true if the record can be saved: otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
    
        ret = ret && this.isItemCatchWeightTagTrackedEnabled();
        ret = ret && PdsCatchWeight::validateInventQty(this.ItemId, this.CapturedWeight, 1, true);
        ret = ret && this.checkDimFieldsValid();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimFieldsValid</Name>
				<Source><![CDATA[
    private boolean checkDimFieldsValid()
    {
        // checkDimFieldsValid should allow empty values for all fields.
        Set allowEmptyFields = new Set(Types::Integer);
        allowEmptyFields.add(-1); 

        InventDim userSpecifiedDimensions = this.inventDim();
        return userSpecifiedDimensions.checkDimFieldsValid(this.ItemId, null, true, allowEmptyFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemCatchWeightTagTrackedEnabled</Name>
				<Source><![CDATA[
    private boolean isItemCatchWeightTagTrackedEnabled()
    {
        boolean ret = true;

        if (this.ItemId != this.orig().ItemId)
        {
            if (!WHSInventTable::isCatchWeightTagTracked(this.ItemId))
            {
                ret = checkFailed("@WAX:ItemNotCatchWeightTagTrackingEnabled");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatchWeightTags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get tags available for the item on the specific dimension.
    /// </summary>
    /// <param name = "_itemId">Item number.</param>
    /// <param name = "_inventDim">Inventory dimensions.</param>
    /// <returns>Tags that are available.</returns>
    [Hookable(false)]
    internal static container getCatchWeightTags(ItemId _itemId, InventDim _inventDim)
    {
        container catchWeightTagCon;

        if (!_itemId)
        {
            return catchWeightTagCon;
        }

        WHSCatchWeightTag	catchWeightTag;
        InventDim			inventDim;
        InventDim           inventDimCriteria = InventDim::find(WHSCatchWeightTag::inventDimWithTagSpecificDimensions(_inventDim, _itemId));
        InventDimParm       inventDimParm;

        inventDimParm.initFromInventDim(inventDimCriteria);

        while select TagNumber from catchWeightTag
            where catchWeightTag.ItemId == _itemId
                && catchWeightTag.IsDeleted == NoYes::No
        #InventDimExistsJoin(catchWeightTag.InventDimId, inventDim, inventDimCriteria, inventDimParm)
        {
            if (WHSCatchWeightTagStatus::isActive(catchWeightTag.TagNumber))
            {
                catchWeightTagCon += catchWeightTag.TagNumber;
            }
        }

        return catchWeightTagCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);
        
        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(WHSCatchWeightTag, ItemId):
                    if (this.ItemId && this.orig().ItemId && !this.hasSameTagDimensionTrackingMethod(this.orig().ItemId))
                    {
                        ret = checkFailed("@WAX:ItemChangeToDiffTagDimTrackTypeNotAllowed");
                    }
                    break;
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSameTagDimensionTrackingMethod</Name>
				<Source><![CDATA[
    private boolean hasSameTagDimensionTrackingMethod(ItemId _otherItemId)
    {
        if (this.ItemId == _otherItemId)
        {
            return true;
        }

        return WHSInventTable::catchWeightTagDimensionTrackingMethod(this.ItemId) == WHSInventTable::catchWeightTagDimensionTrackingMethod(_otherItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRegisteredTagSelectionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>Query</c> to retrieve the catch weight tags for the given item and dimensions registered to a specific lot.
    /// </summary>
    /// <param name = "_itemId">The selection item Id.</param>
    /// <param name = "_inventDim">The selection inventory dimensions; all filled dimensions will be used to identify the catch weight tags.</param>
    /// <param name = "_inventTransId">The lot id that the tags are registered to.</param>
    /// <returns>A query to find the records in the <c>WHSCatchWeightTag</c> table that are active and registered to the given item, dimensions, and lot.</returns>
    [Hookable(false)]
    internal static Query createRegisteredTagSelectionQuery(ItemId _itemId, InventDim _inventDim, InventTransId _inventTransId)
    {
        Query query = new Query();

        QueryBuildDataSource dsCatchWeightTag = query.addDataSource(tableNum(WHSCatchWeightTag));
        dsCatchWeightTag.addRange(fieldNum(WHSCatchWeightTag, ItemId)).value(queryValue(_itemId));
        dsCatchWeightTag.addRange(fieldNum(WHSCatchWeightTag, IsDeleted)).value(queryValue(NoYes::No));

        QueryBuildDataSource dsInventDim = dsCatchWeightTag.addDataSource(tableNum(InventDim));
        dsInventDim.joinMode(JoinMode::ExistsJoin);
        dsInventDim.addLink(fieldNum(WHSCatchWeightTag, InventDimId), fieldNum(InventDim, InventDimId));
        InventDim::queryAddRangeCriteriaForSelectedDims(dsInventDim, _inventDim, _inventDim.toDimParm());

        // Tag must be registered to the given inventory transaction
        QueryBuildDataSource dsLastRegistration = dsCatchWeightTag.addDataSource(tableNum(WHSCatchWeightTagLastRegistration));
        dsLastRegistration.joinMode(JoinMode::ExistsJoin);
        dsLastRegistration.relations(true);
        dsLastRegistration.addRange(fieldNum(WHSCatchWeightTagLastRegistration, RegistrationEvent)).value(queryValue(WHSCatchWeightTagRegistrationEvent::TagRegistered));
        dsLastRegistration.addRange(fieldNum(WHSCatchWeightTagLastRegistration, InventTransId)).value(queryValue(_inventTransId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
	<DeveloperDocumentation>@WAX:CatchWeightTagDevDoc</DeveloperDocumentation>
	<Label>@WAX:CatchWeightTag</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<TitleField1>TagNumber</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>TagNumberIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>TagNumberIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>WHSCatchWeightTag</Relation>
			<Table>WHSCatchWeightTagLastRegistration</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction2</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>WHSCatchWeightTag</Relation>
			<Table>WHSCatchWeightTagRegistration</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TagNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCatchWeightTagNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProductDimensionInventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CapturedWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCapturedWeight</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDeleted</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@WAX:CatchWeightTagRegistrationEventTagDeleted</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TagNumberIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TagNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProductDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductDimensionInventDimId</Name>
					<Field>ProductDimensionInventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>