<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesSummaryParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesSummaryParameters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(DocumentStatus   _documentStatus,
                         fieldId          _fieldId)

    {
        if (!_documentStatus || !_fieldId)
            return false;

        return (select firstonly RecId
                    from salesSummaryParameters
                        where salesSummaryParameters.DocumentStatus == _documentStatus  &&
                              salesSummaryParameters.FieldId        == _fieldId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldEnabled</Name>
				<Source><![CDATA[
    static boolean fieldEnabled(fieldId _fieldId)
    {
        boolean enabled                                 = true;
        // <GBR>
        DictField               dictField               = new DictField(SalesTable::getTableIdFromExt_BR(_fieldId),
                                                                        SalesTable::getFieldIdFromExt_BR(_fieldId));
        // </GBR>
        DictConfigurationKey    dictConfigurationKey    = new DictConfigurationKey(dictField.configurationKeyId());
        // <GBR>
        container               fieldCountryRegionCodes = dictField.getCountryRegionCodes();
        // </GBR>

        if (dictConfigurationKey)
            enabled = dictConfigurationKey.enabled();

        // <GBR>
        if (conLen(fieldCountryRegionCodes) > 0)
        {
            enabled = enabled && SysCountryRegionCode::isLegalEntityInCountryRegion(fieldCountryRegionCodes);
        }
        // </GBR>

        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldName</Name>
				<Source><![CDATA[
    static str fieldName(fieldId _fieldId)
    {
        str name;

        if (fieldExt2Id(new SysDictField(tablenum(SalesTable), fieldnum(SalesTable, ContactPersonId),1).id()) == _fieldId)
            name = "@SYS14559";
        else
            // <GBR>
            name = fieldid2pname(SalesTable::getTableIdFromExt_BR(_fieldId),
                                 SalesTable::getFieldIdFromExt_BR(_fieldId));
            // </GBR>

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static SalesSummaryParameters find(DocumentStatus   _documentStatus,
                                       fieldId          _fieldId,
                                       boolean          _update = false)
    {
        SalesSummaryParameters salesSummaryParameters;

        if (_documentStatus && _fieldId)
        {
            salesSummaryParameters.selectForUpdate (_update);

            select firstonly salesSummaryParameters
                where salesSummaryParameters.DocumentStatus == _documentStatus  &&
                      salesSummaryParameters.FieldId        == _fieldId;
        }

        return salesSummaryParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiate</Name>
				<Source><![CDATA[
    static void initiate(DocumentStatus _documentStatus)
    {
        SalesSummaryParameters  salesSummaryParameters;
        container               mandatorySummaryFieldIds;
        int                     pos = 1;

        if (!SalesSummaryParameters::initiated(_documentStatus))
        {
            mandatorySummaryFieldIds = SalesSummaryParameters::mandatorySummaryFieldIds();

            ttsbegin;

            while (pos <= conlen(mandatorySummaryFieldIds))
            {
                salesSummaryParameters.clear();
                salesSummaryParameters.initValue();
                salesSummaryParameters.DocumentStatus   = _documentStatus;
                salesSummaryParameters.FieldId          = conpeek(mandatorySummaryFieldIds, pos);
                salesSummaryParameters.insert();

                pos++;
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateAll</Name>
				<Source><![CDATA[
    static void initiateAll()
    {
        SalesSummaryParameters::initiate(DocumentStatus::Quotation);
        SalesSummaryParameters::initiate(DocumentStatus::Confirmation);
        SalesSummaryParameters::initiate(DocumentStatus::PickingList);
        SalesSummaryParameters::initiate(DocumentStatus::PackingSlip);
        SalesSummaryParameters::initiate(DocumentStatus::Invoice);
        // <GEERU>
        SalesSummaryParameters::initiate(DocumentStatus::Invoice4Paym_RU);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiated</Name>
				<Source><![CDATA[
    static boolean initiated(DocumentStatus _documentStatus)
    {
        SalesSummaryParameters salesSummaryParameters;

        select count(RecId)
            from salesSummaryParameters
            where salesSummaryParameters.DocumentStatus == _documentStatus;

        return salesSummaryParameters.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSummaryFieldMandatory</Name>
				<Source><![CDATA[
    static boolean isSummaryFieldMandatory(fieldId _fieldId)
    {
        return confind(SalesSummaryParameters::mandatorySummaryFieldIds(), _fieldId) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mandatorySummaryFieldIds</Name>
				<Source><![CDATA[
    static container mandatorySummaryFieldIds()
    {
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            return [fieldExt2Id(new SysDictField(tablenum(SalesTable),fieldnum(SalesTable, InvoiceAccount),1).id()),
                    fieldExt2Id(new SysDictField(tablenum(SalesTable),fieldnum(SalesTable, CurrencyCode),1).id()),
                    SalesTable::getExtFieldId_BR(fieldnum(SalesTable_BR, SalesPurchOperationType_BR), tablenum(SalesTable_BR)),
                    SalesTable::getExtFieldId_BR(fieldnum(SalesTable_BR, CustFinalUser_BR), tableNum(SalesTable_BR)),
                    SalesTable::getExtFieldId_BR(fieldnum(SalesTable_BR, PresenceType), tableNum(SalesTable_BR))];
        }
        // </GBR>

        return [fieldExt2Id(new SysDictField(tablenum(SalesTable),fieldnum(SalesTable, InvoiceAccount),1).id()),
                fieldExt2Id(new SysDictField(tablenum(SalesTable),fieldnum(SalesTable, CurrencyCode),1).id())];
    }

]]></Source>
			</Method>
			<Method>
				<Name>notSelectedFieldIdList</Name>
				<Source><![CDATA[
    static container notSelectedFieldIdList(DocumentStatus _documentStatus)
    {
        fieldId         fieldId                 = 0;
        int             notSelectedNumber       = 1;
        container       summaryFieldIdList      = SalesSummaryParameters::summaryFieldIdList();
        container       notSelectedFieldIdList;

        while (notSelectedNumber <= conlen(summaryFieldIdList))
        {
            fieldId = conpeek(summaryFieldIdList, notSelectedNumber);
            if (!SalesSummaryParameters::exist(_documentStatus, fieldId) && SalesSummaryParameters::fieldEnabled(fieldId))
            {
                notSelectedFieldIdList += fieldId;
            }
            notSelectedNumber ++;
        }

        return notSelectedFieldIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedFieldIdList</Name>
				<Source><![CDATA[
    static container selectedFieldIdList(DocumentStatus _documentStatus)
    {
        SalesSummaryParameters  salesSummaryParameters;
        container               selectedFieldIdList;

        while select salesSummaryParameters
            where salesSummaryParameters.DocumentStatus == _documentStatus
        {
            if (SalesSummaryParameters::fieldEnabled(salesSummaryParameters.FieldId))
            {
                selectedFieldIdList += salesSummaryParameters.FieldId;
            }
        }

        return selectedFieldIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryFieldIdList</Name>
				<Source><![CDATA[
    static container summaryFieldIdList()
    {
        int             i,h,j;
        container       fList;
        SysDictField    sysDictField;
        DictFieldGroup  dictFieldGroup;
        DictTable       dictTable = new DictTable(tablenum(SalesTable));

        for (i=1;i<=dictTable.fieldGroupCnt();i++)
        {
            if (dictTable.fieldGroup(i) == tablefieldgroupstr(SalesTable, SummaryUpdate))
            {
                dictFieldGroup = new DictFieldGroup(tablenum(SalesTable),dictTable.fieldGroup(i));
                for (h=1;h<=dictFieldGroup.numberOfFields();h++)
                {
                    sysDictField = new SysDictField(tablenum(SalesTable), dictFieldGroup.field(h));
                    for (j=1; j <= sysDictField.arraySize(); j++)
                    {
                        fList += fieldExt2Id(new SysDictField(tablenum(SalesTable), dictFieldGroup.field(h), j).id());
                    }
                }
                break;
            }
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            dictTable = new DictTable(tablenum(SalesTable_BR));

            for (i=1; i<=dictTable.fieldGroupCnt(); i++)
            {
                if (dictTable.fieldGroup(i) == tablefieldgroupstr(SalesTable_BR, SummaryUpdate))
                {
                    dictFieldGroup = new DictFieldGroup(tablenum(SalesTable_BR),dictTable.fieldGroup(i));
                    for (h=1; h<=dictFieldGroup.numberOfFields(); h++)
                    {
                        fList += SalesTable::getExtFieldId_BR(dictFieldGroup.field(h), tablenum(SalesTable_BR));
                    }
                    break;
                }
            }
        }
        // </GBR>

        // <GTH>
        if (SalesTableExtensionTH::isExtensionEnabled())
        {
            dictTable = new DictTable(tablenum(SalesTableExtensionTH));

            for (i=1; i<=dictTable.fieldGroupCnt(); i++)
            {
                if (dictTable.fieldGroup(i) == tablefieldgroupstr(SalesTableExtensionTH, SummaryUpdate))
                {
                    dictFieldGroup = new DictFieldGroup(tablenum(SalesTableExtensionTH), dictTable.fieldGroup(i));
                    for (h=1; h<=dictFieldGroup.numberOfFields(); h++)
                    {
                        fList += SalesTable::getExtFieldId_BR(dictFieldGroup.field(h), tablenum(SalesTableExtensionTH));
                    }
                    break;
                }
            }
        }
        // </GTH>

        return fList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124511</DeveloperDocumentation>
	<FormRef>SalesSummaryParameters</FormRef>
	<Label>@SYS57740</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>DocumentStatus</TitleField1>
	<TitleField2>FieldId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>SalesSummaryParametersIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>SalesSummaryParametersIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DocumentStatus</Name>
			<Label>@SYS22101</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>DocumentStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FieldId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldId</ExtendedDataType>
			<RelatedTable>SalesTable</RelatedTable>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesSummaryParametersIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DocumentStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FieldId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>