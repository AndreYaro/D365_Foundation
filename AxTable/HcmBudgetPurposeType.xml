<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmBudgetPurposeType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HcmBudgetPurposeType extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCostElementInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the record in <c>HcmBudgetPurposeTypeDetail</c> table is referenced by records in <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <param name="_showWarningMessage">
    /// A boolean value that indicates whether to show any error messages; optional.
    /// </param>
    /// <returns>
    /// true if the record in <c>HcmBudgetPurposeTypeDetail</c> table is referenced in <c>HcmPositionForecastBudgetAcctLine</c> table; otherwise, false.
    /// </returns>

    public boolean isCostElementInUse(boolean _showWarningMessage = false)
    {
        boolean   inUse;

        inUse = HcmPositionForecastBudgetAcctLine::checkExistByBudgetPurposeType(this.RecId);

        if (inUse && _showWarningMessage)
        {
            checkFailed("@SYS4005578");
        }

        if (HcmBudgetPurposeEarningBasis::isBudgetPurposeUsedAsEarningBasis(this.RecId))
        {
            checkFailed("@SYS4006474");
            inUse = true;
        }

        return inUse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEarningChangeAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// An earnings of type percent cannot be based on other earnings of type percent
    /// This method verifies when changing a <c>HcmBudgetCostElementType</c> of type Earnings, that it does not
    /// contain a Basis cost element that is also of type percent
    /// </summary>
    /// <returns>
    /// Returns true if the <c>HcmBudgetCostElementType</c> is not Earning or if the <c>HcmBudgetCostElementType</c> is Earning
    /// and none of the Basis cost elements are percent types; otherwise, it returns false.
    /// </returns>

    public boolean isEarningChangeAllowed()
    {
        HcmBudgetPurposeTypeDetail hcmBudgetPurposeTypeDetail;
        HcmBudgetPurposeEarningBasis hcmBudgetPurposeEarningBasis;
        HcmBudgetPurposeTypeDetail hcmBudgetPurposeTypeDetailBase;
        boolean isAllowed = true;

        if (this.CostElementType == HcmBudgetCostElementType::Earning)
        {
            select firstOnly RecId from hcmBudgetPurposeTypeDetail
                exists join hcmBudgetPurposeEarningBasis
                    where hcmBudgetPurposeTypeDetail.BudgetPurposeType == hcmBudgetPurposeEarningBasis.BudgetPurposeType
                        && hcmBudgetPurposeTypeDetail.BudgetPurposeType == this.RecId
                        && hcmBudgetPurposeTypeDetail.isPercentageBased == NoYes::Yes
                    exists join hcmBudgetPurposeTypeDetailBase
                        where hcmBudgetPurposeTypeDetailBase.BudgetPurposeType == hcmBudgetPurposeEarningBasis.EarningBudgetPurposeType
                            && hcmBudgetPurposeTypeDetailBase.isPercentageBased == NoYes::Yes;

            if (hcmBudgetPurposeTypeDetail.RecId > 0)
            {
                isAllowed = false;
            }
        }

        return isAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean canDeleteBudgetPurpose;

        canDeleteBudgetPurpose = super();

        if (canDeleteBudgetPurpose)
        {
            canDeleteBudgetPurpose = !this.isCostElementInUse(true);
        }

        return canDeleteBudgetPurpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid;

        switch (_fieldIdToCheck)
        {
            case fieldNum(HcmBudgetPurposeType, CostElementType) :
                isvalid = this.isEarningChangeAllowed();

                if (!isValid)
                {
                    isValid = checkFailed("@SYS4005574");
                }
                else
                {
                    isValid = super(_fieldIdToCheck);
                }
                break;

            default :
                isValid = super(_fieldIdToCheck);
                break;
        }
        return isvalid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;

        isValid = this.isEarningChangeAllowed() && super();

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>HcmBudgetPurposeType</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(HcmBudgetPurposeTypeRecId _recId)
    {
        boolean ret = true;

        if (!HcmBudgetPurposeType::exist(_recId))
        {
            ret = checkFailed(strfmt("@SYS321009", tableStr(HcmBudgetPurposeType)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAllBudgetPurposeTypeDetailsHaveAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>HcmBudgetPurposeTypeDetail</c> table records have <c>LedgerDimension</c> field value set.
    /// </summary>
    /// <param name="_budgetPurposeTypeRecId">
    /// The record ID of the <c>HcmBudgetPurposeType</c> table.
    /// </param>
    /// <returns>
    ///  true if the <c>HcmBudgetPurposeTypeDetail</c> table records have <c>LedgerDimension</c> field value set; otherwise, false
    /// </returns>
    public static boolean doAllBudgetPurposeTypeDetailsHaveAccount(HcmBudgetPurposeTypeRecId _budgetPurposeTypeRecId)
    {
        HcmBudgetPurposeTypeDetail budgetPurposeTypeDetail;
        boolean                    checkPassed = false;

        while select RecId,LedgerDimension from budgetPurposeTypeDetail
                where budgetPurposeTypeDetail.BudgetPurposeType == _budgetPurposeTypeRecId
        {
            if (budgetPurposeTypeDetail.RecId != 0 && budgetPurposeTypeDetail.LedgerDimension != 0 )
            {
                checkPassed = true;
            }
            else
            {
                return false;
            }
        }

        return checkPassed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesBudgetPurposeTypeAllowOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>HcmBudgetPurposeType</c> table record allows overriding the purpose on the forecast position.
    /// </summary>
    /// <param name="_budgetPurposeTypeRecId">
    /// The record ID of the <c>HcmBudgetPurposeType</c> table.
    /// </param>
    /// <returns>
    ///  true if the <c>HcmBudgetPurposeType</c> table record allows overriding the purpose; otherwise, false
    /// </returns>

    public static boolean doesBudgetPurposeTypeAllowOverride(HcmBudgetPurposeTypeRecId _budgetPurposeTypeRecId)
    {
        return (select firstonly PositionOverride from hcmBudgetPurposeType
            where hcmBudgetPurposeType.RecId == _budgetPurposeTypeRecId).PositionOverride == HcmBudgetPositionOverride::AllowOverride;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record ID exists in the <c>HcmBudgetPurposeType</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false .
    /// </returns>
    public static boolean exist(HcmBudgetPurposeTypeRecId _recId)
    {
        return _recId && (select firstonly RecId from HcmBudgetPurposeType
                    where HcmBudgetPurposeType.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmBudgetPurposeType</c> table that is based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmBudgetPurposeType</c> table.
    /// </returns>
    public static HcmBudgetPurposeType find(
    HcmBudgetPurposeTypeRecId         _recId,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmBudgetPurposeType hcmBudgetPurposeType;

        hcmBudgetPurposeType.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmBudgetPurposeType.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmBudgetPurposeType
             where hcmBudgetPurposeType.RecId == _recId;

        return hcmBudgetPurposeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmBudgetPurposeType</c> table that is based on the specified
    /// <c>Purpose</c> value.
    /// </summary>
    /// <param name="_purpose">
    /// The value of the <c>Purpose</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmBudgetPurposeType</c> table.
    /// </returns>
    public static HcmBudgetPurposeType findByPurpose(
    HcmBudgetPurpose    _purpose,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmBudgetPurposeType hcmBudgetPurposeType;

        hcmBudgetPurposeType.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmBudgetPurposeType.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmBudgetPurposeType
            where HcmBudgetPurposeType.Purpose == _purpose;

        return hcmBudgetPurposeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPurposeTypeDetailRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmBudgetPurposeType</c> table that is based on the specific record ID of the
    /// <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </summary>
    /// <param name="_costElementDetailRecId">
    /// The record ID of the <c>HcmBudgetPurposeTypeDetail</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmBudgetPurposeType</c> table.
    /// </returns>
    public static HcmBudgetPurposeType findByPurposeTypeDetailRecId(
    HcmBudgetPurposeTypeDetailRecId _costElementDetailRecId,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmBudgetPurposeType budgetPurposeType;
        HcmBudgetPurposeTypeDetail budgetPurposeTypeDetail;

        budgetPurposeType.selectForUpdate(_forUpdate );

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetPurposeType.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetPurposeType
            exists join budgetPurposeTypeDetail
            where budgetPurposeType.RecId == budgetPurposeTypeDetail.BudgetPurposeType
                && budgetPurposeTypeDetail.RecId == _costElementDetailRecId;

        return budgetPurposeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurposebyRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the value of the <c>Purpose</c> field from the <c>HcmBudgetPurposeType</c> table based on a record ID value.
    /// </summary>
    /// <param name="_budgetPurposeTypeRecId">
    /// The value of the record ID to use in finding <c>Purpose</c>.
    /// </param>
    /// <returns>
    /// The value of the field <c>Purpose</c> from the <c>HcmBudgetPurposeType</c> table.
    /// </returns>
    public static HcmBudgetPurpose getPurposebyRecId(HcmBudgetPurposeTypeRecId _budgetPurposeTypeRecId)
    {
        return (HcmBudgetPurposeType::find(_budgetPurposeTypeRecId).Purpose);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPositionOverrideAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>HcmBudgetPurposeType</c> table record allows overriding the purpose on the forecast position.
    /// </summary>
    /// <param name="_budgetPurposeTypeRecId">
    /// The record ID of the <c>HcmBudgetPurposeType</c> table.
    /// </param>
    /// <returns>
    ///  true if the <c>HcmBudgetPurposeType</c> table record allows overriding the purpose; otherwise, false
    /// </returns>

    public static boolean isPositionOverrideAllowed(HcmBudgetPurposeTypeRecId _budgetPurposeTypeRecId)
    {
        return HcmBudgetPurposeType::find(_budgetPurposeTypeRecId).PositionOverride == HcmBudgetPositionOverride::AllowOverride;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceBudgetPurposeEarningType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a custom lookup for the <c>HcmBudgetPurposeType</c> records that filters on the earnings type cost element.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The control on the form that is used.
    /// </param>
    /// <param name="_legalEntity">
    /// The record Id of the legal entity. This is an optional parameter as not all caller forms require filtering by legal entity.
    /// </param>
    /// <returns>
    /// A reference record for the purpose.
    /// </returns>
    public static HcmBudgetPurposeType lookupReferenceBudgetPurposeEarningType(FormReferenceControl _formReferenceControl,
                                                                               CompanyInfoRecId     _legalEntity = 0)
    {
        Query query          = new Query();
        QueryBuildDataSource qbdsBudgetPurposeType;
        QueryBuildDataSource qbdsBudgetPurposeTypeDetail;
        QueryBuildRange      qbrBudgetPurposeType;
        QueryBuildRange      qbrBudgetPurposeTypeDetail;

        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(HcmBudgetPurposeType), _formReferenceControl, true);

        qbdsBudgetPurposeType        = query.addDataSource(tableNum(HcmBudgetPurposeType));
        qbdsBudgetPurposeTypeDetail  = qbdsBudgetPurposeType.addDataSource(tableNum(HcmBudgetPurposeTypeDetail));
        qbrBudgetPurposeType         = qbdsBudgetPurposeType.addRange(fieldNum(HcmBudgetPurposeType, CostElementType));
        qbrBudgetPurposeType.value(queryValue(HcmBudgetCostElementType::Earning));
        qbdsBudgetPurposeTypeDetail.relations(true);
        qbdsBudgetPurposeTypeDetail.joinMode(JoinMode::ExistsJoin);

        qbrBudgetPurposeTypeDetail = qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, Percent));
        qbrBudgetPurposeTypeDetail.value(strFmt('(%1 == 0)', fieldStr(HcmBudgetPurposeTypeDetail, Percent)));
        if ( _legalEntity)
        {
            qbrBudgetPurposeTypeDetail = qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, LegalEntity));
            qbrBudgetPurposeTypeDetail.value(queryValue(_legalEntity));
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.addLookupfield(fieldNum(HcmBudgetPurposeType, Purpose));
        sysTableLookup.addLookupfield(fieldNum(HcmBudgetPurposeType, Description));

        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveBudgetPurposeEarningType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the custom lookup for the <c>HcmBudgetPurposeType</c> table records that filters on the earning type cost element.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The control on the form that is used.
    /// </param>
    /// <param name="_legalEntity">
    /// The record Id of the legal entity. This is an optional parameter as not all caller forms require filtering by legal entity.
    /// </param>
    /// <returns>
    /// A reference record for the <c>HcmBudgetPurposeType</c> table.
    /// </returns>
    public static HcmBudgetPurposeType resolveBudgetPurposeEarningType(FormReferenceControl _formReferenceControl,
                                                                               CompanyInfoRecId    _legalEntity = 0)
    {
        HcmBudgetPurposeType           hcmBudgetPurposeType;
        HcmBudgetPurposeTypeDetail     budgetPurposeTypeDetail;
        HcmBudgetPurpose budgetPurpose = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(HcmBudgetPurposeType, Purpose), tableStr(HcmBudgetPurposeType))).value();

        select firstonly hcmBudgetPurposeType
            where hcmBudgetPurposeType.CostElementType == HcmBudgetCostElementType::Earning
                  && hcmBudgetPurposeType.Purpose == budgetPurpose
                  exists join budgetPurposeTypeDetail
                      where budgetPurposeTypeDetail.BudgetPurposeType == hcmBudgetPurposeType.RecId
                          && budgetPurposeTypeDetail.Percent == 0
                          && (budgetPurposeTypeDetail.LegalEntity == _legalEntity || !_legalEntity);

        return hcmBudgetPurposeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.CostElementType = HcmBudgetCostElementType::Benefit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GLS190019</DeveloperDocumentation>
	<Label>@SYS4005316</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Purpose</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>PurposeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Purpose</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Purpose</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostElementType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Purpose</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS105600</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PositionOverride</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocationMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Purpose</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostElementType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostElementType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>HcmBudgetCostElementType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HrmDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PositionOverride</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>HcmBudgetPositionOverride</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Purpose</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBudgetPurpose</ExtendedDataType>
			<Label>@SYS4005313</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllocationMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>HcmBudgetPurposeAllocationOption</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurposeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Purpose</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>