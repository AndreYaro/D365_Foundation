<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatDisplayCategoryFilterRange</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatDisplayCategoryFilterRange extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        public void insert()
    {
        if ( this.validate() )
        {
             super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        if ( this.validate() )
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        private boolean validate()
    {
        #CatDisplayCategory

        if ( this.UpperLimit < this.LowerLimit )
        {
            throw error("@SYS191288");
        }
        else if (this.UpperLimit > #CatDisplayCategory_FilterRangeUpperLimit || this.LowerLimit < #CatDisplayCategory_FilterRangeLowerLimit )
        {
            throw error(strfmt("@SYS309058", #CatDisplayCategory_FilterRangeLowerLimit, #CatDisplayCategory_FilterRangeUpperLimit));
        }

        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = false;
        if ( this.validate() )
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CatDisplayCategoryFilterRange</c> table.
    /// </summary>
    /// <param  name='_upperLimit'>
    /// An instance of the <c>RefRecId</c> class denoting upper limit filed.
    /// </param>
    /// <param  name='_lowerLimit'>
    /// An instance of the <c>Name</c> class denoting lower limit filed.
    /// </param>
    /// <returns>
    /// true if the record was found; otherwise, false.
    /// </returns>
    public static boolean checkExist(real _upperLimit, real _lowerLimit)
    {
        if (!CatDisplayCategoryFilterRange::exist(_upperLimit, _lowerLimit))
        {
            return checkFailed(strfmt(CatDisplayCategoryFilterRange::txtNotExist(), _upperLimit, _lowerLimit));
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CatDisplayCategoryFilterRange</c> table.
    /// </summary>
    /// <param  name='_upperLimit'>
    /// An instance of the <c>RefRecId</c> class denoting upper limit filed.
    /// </param>
    /// <param  name='_lowerLimit'>
    /// An instance of the <c>Name</c> class denoting lower limit filed.
    /// </param>
    /// <returns>
    /// true if the record was found; otherwise, false.
    /// </returns>
    public static boolean exist(real _upperLimit, real _lowerLimit)
    {
        return (CatDisplayCategoryFilterRange::find(_upperLimit, _lowerLimit).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>CatDisplayCategoryFilterRange</c> table.
    /// </summary>
    /// <param  name='_upperLimit'>
    /// An instance of the <c>RefRecId</c> class denoting upper limit filed.
    /// </param>
    /// <param  name='_lowerLimit'>
    /// An instance of the <c>Name</c> class denoting lower limit filed.
    /// </param>
    /// <param  name='_forUpdate'>
    /// A Boolean value to specify the selected record is for update; optional.
    /// </param>
    /// <returns>
    /// An instance of the <c>CatDisplayCategoryFilterRange</c> class.
    /// </returns>
    public static CatDisplayCategoryFilterRange find(real _upperLimit, real _lowerLimit, boolean _forUpdate = false)
    {
        CatDisplayCategoryFilterRange tblCatDisplayCategoryFilterRange;
        ;
        if (_upperLimit && _lowerLimit )
        {
            tblCatDisplayCategoryFilterRange.selectForUpdate(_forUpdate);
            select firstonly tblCatDisplayCategoryFilterRange
                index hint FilterRangeIdx
                where tblCatDisplayCategoryFilterRange.UpperLimit == _upperLimit
                    && tblCatDisplayCategoryFilterRange.LowerLimit == _lowerLimit;
        }
        return tblCatDisplayCategoryFilterRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static str txtNotExist()
    {
        return "@SYS131155";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcCatalog</ConfigurationKey>
	<DeveloperDocumentation>@SYS324154</DeveloperDocumentation>
	<Label>@SYS191287</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>UpperLimit</TitleField1>
	<TitleField2>LowerLimit</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>FilterRangeIdx</ClusteredIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>FilterRangeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CatDisplayCategoryAttributeRange</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatDisplayCategoryAttributeRange</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CatDisplayCategoryPriceRange</Name>
			<Relation></Relation>
			<Table>CatDisplayCategoryPriceRange</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CatProcureCatalogPriceRange</Name>
			<Relation></Relation>
			<Table>CatProcureCatalogPriceRange</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UpperLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LowerLimit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UpperLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LowerLimit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LowerLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpperLimit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LowerLimit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RealBase</ExtendedDataType>
			<Label>@SYS81437</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UpperLimit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RealBase</ExtendedDataType>
			<Label>@SYS21886</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FilterRangeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>UpperLimit</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LowerLimit</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>