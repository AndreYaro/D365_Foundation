<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementHeaderExt_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchAgreementHeaderExt_RU extends AgreementHeaderExt_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAgreementUniqueness</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the uniqueness of the agreement.
    /// </summary>
    /// <param name="_agreementHeader">
    ///     The record of the <c>AgreementHeader</c> table.
    /// </param>
    /// <returns>
    ///     true if agreement is unique; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     The argument is not a <c>PurchAgreementHeader</c> table datatype.
    /// </exception>
    public boolean checkAgreementUniqueness(AgreementHeader _agreementHeader)
    {
        PurchAgreementHeader     purchAgreementHeader;
        PurchAgreementHeader     agreementHeaderPurch;
        SalesAgreementHeader     salesAgreementHeader;
        PurchAgreementHeaderExt_RU purchAgreementHeaderExt;
        PurchParameters          purchParameters;
        boolean                  isExtendedUniqueness;
        RefRecId                 legalEntityId;
        RecId                    curRecId;
        AgreementId_RU           agreementId;
        CustVendAC               custVendAc;
        RefRecId                 classificationId;
        CurrencyCode             currency;
        AgreementDocumentTitle   documentTitle;
        StartDate                startDate;
        EndDate                  endDate;
        AgreementDocumentExternalReference extRef;
        boolean                  ok = true;

        if (_agreementHeader is PurchAgreementHeader)
        {
            agreementHeaderPurch = _agreementHeader as PurchAgreementHeader;
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        purchParameters      = PurchParameters::find();
        isExtendedUniqueness =     purchParameters.AgreementAccountKey_RU
                                || purchParameters.AgreementClassificationKey_RU
                                || purchParameters.AgreementCurrencyKey_RU
                                || purchParameters.AgreementDocumentTitleKey_RU
                                || purchParameters.AgreementExtRefKey_RU
                                || purchParameters.AgreementYearKey_RU;

        legalEntityId        = agreementHeaderPurch.BuyingLegalEntity;
        curRecId             = agreementHeaderPurch.RecId;
        agreementId          = agreementHeaderPurch.PurchNumberSequence;
        custVendAc           = agreementHeaderPurch.VendAccount;

        classificationId     = agreementHeaderPurch.AgreementClassification;
        currency             = agreementHeaderPurch.Currency;
        documentTitle        = agreementHeaderPurch.DocumentTitle;
        extRef               = agreementHeaderPurch.DocumentExternalReference;
        startDate            = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), this.AgreementDate);
        endDate              = DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), this.AgreementDate);

        // Base uniqueness
        select firstOnly RecId from salesAgreementHeader
            where salesAgreementHeader.SalesNumberSequence == agreementId
               && salesAgreementHeader.SellingLegalEntity  == legalEntityId;

        if (salesAgreementHeader.RecId)
        {
            ok = checkFailed(strFmt("@GLS220555", agreementId));
        }

        // Extended uniqueness
        if (ok && isExtendedUniqueness)
        {
            select firstOnly PurchNumberSequence from purchAgreementHeader
                where  (!purchParameters.AgreementAccountKey_RU        || purchAgreementHeader.VendAccount               == custVendAc)
                    && (!purchParameters.AgreementClassificationKey_RU || purchAgreementHeader.AgreementClassification   == classificationId)
                    && (!purchParameters.AgreementCurrencyKey_RU       || purchAgreementHeader.Currency                  == currency)
                    && (!purchParameters.AgreementDocumentTitleKey_RU  || purchAgreementHeader.DocumentTitle             == documentTitle)
                    && (!purchParameters.AgreementExtRefKey_RU         || purchAgreementHeader.DocumentExternalReference == extRef)
                    && purchAgreementHeader.BuyingLegalEntity == legalEntityId
                    && purchAgreementHeader.RecId             != curRecId
                    && !purchAgreementHeader.IsDeleted
            exists join purchAgreementHeaderExt
                where purchAgreementHeaderExt.AgreementHeader == purchAgreementHeader.RecId
                    && (!purchParameters.AgreementYearKey_RU           || (purchAgreementHeaderExt.AgreementDate >= startDate && purchAgreementHeaderExt.AgreementDate <= endDate));

            if (purchAgreementHeader.PurchNumberSequence)
            {
                ok = checkFailed(strFmt("@GLS220556", purchAgreementHeader.PurchNumberSequence));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAvailableCreditLimit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs the actual credit limit excess check.
    /// </summary>
    /// <returns>
    ///     false if the credit limit is exceeded; otherwise, true.
    /// </returns>
    public boolean checkAvailableCreditLimit()
    {
        AmountMST creditLimitTotal, balanceWithoutAgreement, openBalance;
        VendTable vendTable;
        VendAccount accountNum = PurchAgreementHeader::find(this.AgreementHeader).VendAccount;
        boolean   ret = true;

        if (accountNum)
        {
            vendTable = VendTable::find(accountNum);

            if (vendTable.CreditMax)
            {
                creditLimitTotal        = PurchAgreementHeaderExt_RU::creditLimitPerVendAccount(accountNum, this.RecId) + this.CreditMax;
                balanceWithoutAgreement = -vendTable.openBalanceMSTPerAgreement_RU('');
                creditLimitTotal        = creditLimitTotal + (balanceWithoutAgreement > 0 ? balanceWithoutAgreement : 0);

                if (vendTable.CreditMax < creditLimitTotal)
                {
                    ret = checkFailed(strFmt("@GLS112517", vendTable.AccountNum, creditLimitTotal, vendTable.CreditMax));
                }
            }

            if (this.CreditMax)
            {
                openBalance = -vendTable.openBalanceMSTPerAgreement_RU(this.AgreementId);

                if (this.CreditMax < openBalance)
                {
                    ret = checkFailed(strFmt("@SYS1532" +' %1 '+"@SYS98556" + ' ' + "@SYS79458"+ ' %2 ', this.CreditMax, openBalance));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVatOperationCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the value of the <c>vatOperationCode</c> field.
    /// </summary>
    /// <param name="_vendAccount">
    ///     The vendor account number.
    /// </param>
    /// <returns>
    ///     true if the <c>vatOperationCode</c> field is valid; otherwise, false.
    /// </returns>
    public boolean checkVatOperationCode(VendAccount _vendAccount)
    {
        boolean ret = true;

        if (VendTable::find(_vendAccount).vatTaxAgent_RU &&
            ! this.vatOperationCode)
        {
            ret = checkFailed("@GLS112883");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventOwnerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines existing of the iventory owner transactions.
    /// </summary>
    /// <returns>
    ///     true if inventory owner transactions exist for an agreement; otherwise, false.
    /// </returns>
    boolean hasInventOwnerTrans()
    {
        InventOwner_RU inventOwner;
        InventTrans    inventTrans;
        InventDim      inventDim;
        PurchAgreementHeader purchAgreementHeader = PurchAgreementHeader::find(this.AgreementHeader);

        select firstonly RecId from inventOwner
            where inventOwner.AccountType        == InventOwnerAccountType_RU::Vend
               && inventOwner.AccountNum         == purchAgreementHeader.VendAccount
               && inventOwner.AgreementHeaderExt == this.RecId
        join TableId from inventDim
            where inventDim.InventOwnerId_RU    == inventOwner.InventOwnerId
        join TableId from inventTrans
            where inventTrans.InventDimId       == inventDim.InventDimId;

        return inventOwner.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the <c>PurchAgreementHeaderExt_RU</c> and <c>AgreementHeaderExt_RU</c> records from the
    ///     <c>AgreementHeader</c> table to default values.
    /// </summary>
    /// <param name="_agreementHeader">
    ///     The agreement record from which to initialize.
    /// </param>
    public void initFromAgreementHeader(AgreementHeader _agreementHeader)
    {
        PurchAgreementHeader purchAgreementHeader = _agreementHeader as PurchAgreementHeader;

        super(purchAgreementHeader);

        this.AgreementId = purchAgreementHeader.PurchNumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the <c>PurchAgreementHeaderExt_RU</c> and <c>AgreementHeaderExt_RU</c> records from the
    ///     <c>VendTable</c> table to default values.
    /// </summary>
    /// <param name="_vendTable">
    ///     The vendor record from which to initialize.
    /// </param>
    public void initFromVendTable(VendTable _vendTable)
    {
        this.initFromCustVendTable(_vendTable);

        this.InventProfileId   = _vendTable.InventProfileId_RU;
        this.InventProfileType = _vendTable.InventProfileType_RU;

        this.Email             = _vendTable.email();
        this.Phone             = _vendTable.phone();
        this.PhoneLocal        = _vendTable.phoneLocal();
        this.TeleFax           = _vendTable.telefax();
        this.Url               = _vendTable.url();

        this.LineOfBusinessId  = _vendTable.LineOfBusinessId;

        this.VATOperationCode = _vendTable.VATOperationCode_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanySync</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Synchronizes changed data to the intercompany sales agreement header record that relates to the
    ///     purchase agreement header record.
    /// </summary>
    /// <param name="_forceIntercompanySync">
    ///     A Boolean value that indicates whether to force the intercompany synchronization; optional.
    /// </param>
    public void intercompanySync(boolean _forceIntercompanySync = false)
    {
        SalesAgreementHeaderExt_RU agreementHeaderSalesExt;
        VendTable                  vendTable;
        InterCompanyCompanyId      vendTableInterCompanyTradingPartnerCompanyId;
        SalesAgreementHeader       salesAgreementHeader;
        PurchAgreementHeader       purchAgreementHeader;
        boolean                    create;
        AgreementHeaderDefault     agreementHeaderDefault;
        #ISOCountryRegionCodes

        if (!_forceIntercompanySync)
        {
            if (this.InterCompanySkipUpdate == InterCompanySkipUpdate::InterCompany
             || !this.intercompanyUpdateNow())
            {
                return;
            }
        }

        select firstonly purchAgreementHeader
            where purchAgreementHeader.RecId == this.AgreementHeader;

        vendTable = purchAgreementHeader.vendTable();
        vendTableInterCompanyTradingPartnerCompanyId = vendTable.interCompanyTradingPartnerCompanyID();

        if (!TradeInterCompany::checkDataAreaAccess(vendTableInterCompanyTradingPartnerCompanyId))
        {
            return;
        }

        changecompany(vendTableInterCompanyTradingPartnerCompanyId)
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                create = !this.salesAgreementHeaderIntercompany(false);

                setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

                if (create)
                {
                    salesAgreementHeader = purchAgreementHeader.salesAgreementHeader();
                    agreementHeaderDefault = salesAgreementHeader.agreementHeaderDefault();
                    agreementHeaderSalesExt.initFromAgreementHeader(salesAgreementHeader);
                    agreementHeaderSalesExt.initFromDeliveryTerm(DlvTerm::find(agreementHeaderDefault.DeliveryTerm));
                    agreementHeaderSalesExt.initFromContactInfo(ContactPerson::find(agreementHeaderDefault.ContactPerson));
                    agreementHeaderSalesExt.initFromCustTable(CustTable::find(salesAgreementHeader.CustAccount));
                }
                else
                {
                    agreementHeaderSalesExt = this.salesAgreementHeaderIntercompany(true);
                }

                this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, AgreementDate));
                this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, AgreementAmount));
                this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, AgreementSubject));
                this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, AgreementVatAmount));
                this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, TaxAmountDifference));

                agreementHeaderSalesExt.InterCompanySkipUpdate = InterCompanySkipUpdate::InterCompany;

                if (create)
                {
                    if (!agreementHeaderSalesExt.checkAgreementUniqueness(salesAgreementHeader))
                    {
                        throw Exception::Error;
                    }

                    agreementHeaderSalesExt.insert();
                }
                else
                {
                    agreementHeaderSalesExt.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>intracompanySync</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Synchronizes changed data to the intracompany sales agreement header record that relates to the
    ///     purchase agreement header record.
    /// </summary>
    /// <param name="_forceIntracompanySync">
    ///     A Boolean value that indicates whether to force the intracompany synchronization; optional.
    /// </param>
    public void intracompanySync(boolean _forceIntracompanySync = false)
    {
        SalesAgreementHeaderExt_RU agreementHeaderSalesExt;
        CustTable                  custTable;
        VendTable                  vendTable;
        SalesAgreementHeader       salesAgreementHeader;
        PurchAgreementHeader       purchAgreementHeader;
        boolean                    create;
        AgreementHeaderDefault     agreementHeaderDefault;

        if (!_forceIntracompanySync)
        {
            if (this.InterCompanySkipUpdate == InterCompanySkipUpdate::Internal
             || !this.intracompanyUpdateNow())
            {
                return;
            }
        }

        select firstonly purchAgreementHeader
            where purchAgreementHeader.RecId == this.AgreementHeader;

        vendTable = purchAgreementHeader.vendTable();
        custTable = CustTable::findByPartyRecId(vendTable.Party);
        create    = !this.salesAgreementHeaderIntracompany(false);

        if (create)
        {
            salesAgreementHeader = purchAgreementHeader.salesAgreementHeader_RU();
            agreementHeaderDefault = salesAgreementHeader.agreementHeaderDefault();
            agreementHeaderSalesExt.initFromAgreementHeader(salesAgreementHeader);
            agreementHeaderSalesExt.initFromDeliveryTerm(DlvTerm::find(agreementHeaderDefault.DeliveryTerm));
            agreementHeaderSalesExt.initFromContactInfo(ContactPerson::find(agreementHeaderDefault.ContactPerson));
            agreementHeaderSalesExt.initFromCustTable(CustTable::find(salesAgreementHeader.CustAccount));
        }
        else
        {
            agreementHeaderSalesExt = this.salesAgreementHeaderIntracompany(true);
        }

        this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, AgreementDate));
        this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, AgreementAmount));
        this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, AgreementSubject));
        this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, AgreementVatAmount));
        this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, TaxAmountDifference));
        this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, PaymDayId));
        this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, InventProfileType));
        this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, InventProfileId));
        this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, LineOfBusinessId));
        this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, Phone));
        this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, PhoneLocal));
        this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, CellularPhone));
        this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, Telex));
        this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, TeleFax));
        this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, Email));
        this.syncField(agreementHeaderSalesExt, create, fieldNum(AgreementHeaderExt_RU, Url));

        agreementHeaderSalesExt.InterCompanySkipUpdate = InterCompanySkipUpdate::Internal;

        if (create)
        {
            if (!agreementHeaderSalesExt.checkAgreementUniqueness(salesAgreementHeader))
            {
                throw Exception::Error;
            }
            this.updateInventOwnerRelation();
            agreementHeaderSalesExt.insert();
        }
        else
        {
            agreementHeaderSalesExt.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the event that is caused when a field is modified for an <c>PurchAgreementHeaderExt_RU</c>
    ///     record.
    /// </summary>
    /// <param name="_fieldId">
    ///     A modified field ID.
    /// </param>
    /// <remarks>
    ///     Call super to invoke parent method.
    /// </remarks>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAgreementHeaderIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the intercompany sales agreement header record that is related to the purchase agreement header record.
    /// </summary>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the <c>SalesAgreementHeaderExt_RU</c> record for update; optional.
    /// </param>
    /// <returns>
    ///     A table buffer that contains the intercompany sales agreement header.
    /// </returns>
    public SalesAgreementHeaderExt_RU salesAgreementHeaderIntercompany(boolean _forUpdate = false)
    {
        AgreementReference agreementReference;

        select firstonly DerivedAgreement from agreementReference
            where agreementReference.SourceAgreement == this.AgreementHeader
               && !agreementReference.IsIntraCompany_RU;

        if (agreementReference.DerivedAgreement)
        {
            return SalesAgreementHeaderExt_RU::findBySalesAgreementHeader(agreementReference.DerivedAgreement,_forUpdate);
        }

        select firstonly SourceAgreement from agreementReference
            where agreementReference.DerivedAgreement == this.AgreementHeader
               && !agreementReference.IsIntraCompany_RU;

        return SalesAgreementHeaderExt_RU::findBySalesAgreementHeader(agreementReference.SourceAgreement,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAgreementHeaderIntracompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the intracompany sales agreement header record that is related to the purchase agreement header record.
    /// </summary>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the <c>SalesAgreementHeaderExt_RU</c> record for update; optional.
    /// </param>
    /// <returns>
    ///     A table buffer that contains the intracompany sales agreement header.
    /// </returns>
    public SalesAgreementHeaderExt_RU salesAgreementHeaderIntracompany(boolean _forUpdate = false)
    {
        AgreementReference agreementReference;

        select firstonly DerivedAgreement from agreementReference
            where agreementReference.SourceAgreement == this.AgreementHeader
               && agreementReference.IsIntraCompany_RU;

        if (agreementReference.DerivedAgreement)
        {
            return SalesAgreementHeaderExt_RU::findBySalesAgreementHeader(agreementReference.DerivedAgreement,_forUpdate);
        }

        select firstonly SourceAgreement from agreementReference
            where agreementReference.DerivedAgreement == this.AgreementHeader
               && agreementReference.IsIntraCompany_RU;

        return SalesAgreementHeaderExt_RU::findBySalesAgreementHeader(agreementReference.SourceAgreement,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the record in the <c>PurchAgreementHeaderExt_RU</c> table.
    /// </summary>
    public void update()
    {
        this.setInventProfileId();

        if (this.InterCompanySkipUpdate != InterCompanySkipUpdate::Internal
            && this.intracompanyLinkExist()
            && this.intracompanyUpdateNow())
        {
            ttsbegin;
            this.intracompanySync();
            ttscommit;
        }

        if (this.InterCompanySkipUpdate != InterCompanySkipUpdate::InterCompany
            && this.InterCompanySkipUpdate != InterCompanySkipUpdate::Both
            && this.intercompanyLinkExist()
            && this.intercompanyUpdateNow())
        {
            ttsbegin;
            this.intercompanySync();
            ttscommit;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventOwnerRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the inventory owner agreement relations.
    /// </summary>
    void updateInventOwnerRelation()
    {
        InventOwner_RU inventOwner;

        ttsbegin;

        update_recordset inventOwner
            setting RelatedAgreementHeaderExt = this.salesAgreementHeaderIntracompany().RecId
            where inventOwner.AccountType        == InventOwnerAccountType_RU::Vend
               && inventOwner.AccountNum         == PurchAgreementHeader::find(this.AgreementHeader).VendAccount
               && inventOwner.AgreementHeaderExt == this.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the event that is caused when a field is validated for an <c>PurchAgreementHeaderExt_RU</c>
    ///     record.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///     A validated field ID.
    /// </param>
    /// <returns>
    ///     true if field has valid information and may be modified; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Call super to invoke parent method.
    /// </remarks>
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditLimitPerVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the credit limit.
    /// </summary>
    /// <param name="_vendAccount">
    ///     The vendor account number.
    /// </param>
    /// <param name="_excludeRecId">
    ///     The record ID of the agreement to exclude from the calculation.
    /// </param>
    /// <returns>
    ///     The credit limit amount.
    /// </returns>
    public static AmountMST creditLimitPerVendAccount(VendAccount  _vendAccount,
                                                      recId        _excludeRecId = 0)
    {
        PurchAgreementHeaderExt_RU purchAgreementHeaderExt;
        PurchAgreementHeader purchAgreementHeader;

        select sum(CreditMax) from purchAgreementHeaderExt
            exists join purchAgreementHeader
            where purchAgreementHeader.VendAccount == _vendAccount &&
                  purchAgreementHeaderExt.AgreementHeader == purchAgreementHeader.RecId &&
                  (_excludeRecId == 0 || purchAgreementHeaderExt.RecId != _excludeRecId);

        return purchAgreementHeaderExt.CreditMax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PurchAgreementHeaderExt_RU</c> table.
    /// </summary>
    /// <param name="_agreementHeaderExtRecId">
    ///    The record ID of the <c>PurchAgreementHeaderExt_RU</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PurchAgreementHeaderExt_RU</c> table; otherwise, an empty record.
    /// </returns>
    public static PurchAgreementHeaderExt_RU find(
        AgreementHeaderExtRecId_RU _agreementHeaderExtRecId,
        boolean                    _forUpdate = false)
    {
        PurchAgreementHeaderExt_RU purchAgreementHeaderExt;

        if (_agreementHeaderExtRecId)
        {
            purchAgreementHeaderExt.selectForUpdate(_forUpdate);

            select firstonly purchAgreementHeaderExt
                where purchAgreementHeaderExt.RecId == _agreementHeaderExtRecId;
        }

        return purchAgreementHeaderExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPurchAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PurchAgreementHeaderExt_RU</c> table.
    /// </summary>
    /// <param name="_agreementHeaderRecId">
    ///    The record ID of the <c>PurchAgreementHeader</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PurchAgreementHeaderExt_RU</c> table; otherwise, an empty record.
    /// </returns>
    public static PurchAgreementHeaderExt_RU findByPurchAgreementHeader(
        AgreementHeaderRecId _agreementHeaderRecId,
        boolean              _forUpdate = false)
    {
        PurchAgreementHeaderExt_RU purchAgreementHeaderExt;

        if (_agreementHeaderRecId)
        {
            if (_forUpdate)
            {
                purchAgreementHeaderExt.selectForUpdate(_forUpdate);
            }

            select firstonly purchAgreementHeaderExt
                where purchAgreementHeaderExt.AgreementHeader == _agreementHeaderRecId;
        }

        return purchAgreementHeaderExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the record from <c>PurchAgreementHeader</c> table.
    /// </summary>
    /// <param name="_agreementHeaderExtRecId">
    ///     The record ID of the <c>PurchAgreementHeaderExt_RU</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the <c>PurchAgreementHeader</c> record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>PurchAgreementHeader</c> table.
    /// </returns>
    public static PurchAgreementHeader purchAgreementHeader(
        AgreementHeaderExtRecId_RU _agreementHeaderExtRecId,
        boolean                    _forUpdate = false)
    {
        PurchAgreementHeader       purchAgreementHeader;
        PurchAgreementHeaderExt_RU purchAgreementHeaderExt;

        if (_agreementHeaderExtRecId)
        {
            if (_forUpdate)
            {
                purchAgreementHeader.selectForUpdate(_forUpdate);
            }

            select firstonly purchAgreementHeader
                exists join purchAgreementHeaderExt
                    where purchAgreementHeader.RecId    == purchAgreementHeaderExt.AgreementHeader
                       && purchAgreementHeaderExt.RecId == _agreementHeaderExtRecId;
        }

        return purchAgreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchAgreementJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides functionality to go to main table.
    /// </summary>
    /// <param name="_purchAgreementExtRecId">
    ///    The record ID of the <c>PurchAgreementHeaderExt_RU</c> record.
    /// </param>
    /// <param name="_companyId">
    ///     The company account identifier; optional.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     The company does not exist.
    /// </exception>
    public static void purchAgreementJumpRef(AgreementHeaderExtRecId_RU _purchAgreementExtRecId, CompanyId _companyId = curext())
    {
        Args args;
        CompanyId companyId;

        if (_companyId)
        {
            companyId = _companyId;
        }
        else
        {
            companyId = curext();
        }

        if (! xDataArea::exist(companyId))
        {
            throw error(strFmt("@SYS10666", companyId));
        }

        changecompany(companyId)
        {
            if (_purchAgreementExtRecId)
            {
                args = new Args();
                args.record(
                    PurchAgreementHeaderExt_RU::purchAgreementHeader(_purchAgreementExtRecId));
            }

            new MenuFunction(menuitemDisplayStr(PurchAgreement), MenuItemType::Display).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchAgreementReferenceLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the purchase agreements lookup.
    /// </summary>
    /// <param name="_callingControl">
    ///     The control for which lookup will be created.
    /// </param>
    /// <param name="_vendAccount">
    ///     The vendor account number.
    /// </param>
    /// <param name="_transDate">
    ///     The agreement date; optional.
    /// </param>
    /// <param name="_invoiceAccount">
    ///     The invoice account number; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>PurchAgreementHeaderExt_RU</c> table.
    /// </returns>
    public static PurchAgreementHeaderExt_RU purchAgreementReferenceLookup(
        FormReferenceControl _callingControl,
        VendAccount          _vendAccount,
        TransDate            _transDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        VendInvoiceAccount   _invoiceAccount = '')
    {
        Query query;
        QueryBuildDataSource qbds;
        PurchAgreementId purchAgreementId;
        PurchAgreementHeaderExt_RU selectedRecord;
        FormRun formRun;
        Args args;

        query = AgreementHeader::partyAgreementsQuery(tableNum(PurchAgreementHeader),
            fieldNum(PurchAgreementHeader, VendAccount),
            _vendAccount ? _vendAccount : SysQuery::valueEmptyString(),
            _transDate,
            false,
            tableNum(PurchAgreementHeaderExt_RU)
            );

        purchAgreementId = _callingControl.filterValue(AbsoluteFieldBinding::construct(
            fieldstr(AgreementHeaderExt_RU, AgreementId),
            tablestr(AgreementHeaderExt_RU))).value();

        if (purchAgreementId)
        {
            findOrCreateRange_W(query.dataSourceTable(tableNum(PurchAgreementHeader)),
                fieldNum(PurchAgreementHeader, PurchNumberSequence),
                purchAgreementId);
        }

        if (_invoiceAccount)
        {
            qbds = query.dataSourceTable(tableNum(PurchAgreementHeader));
            qbds = qbds.addDataSource(tableNum(PurchAgreementHeaderDefault));
            qbds.relations(true);

            qbds.addRange(fieldNum(PurchAgreementHeaderDefault, VendorInvoiceAccount)).value(_invoiceAccount);
        }

        args = new Args();
        args.name(formStr(PurchAgreementHeaderExtLookup_RU));
        args.caller(_callingControl);
        args.parmObject(query);
        formRun = classFactory.formRunClass(args);
        formRun.init();

        _callingControl.performFormLookup(formRun);

        selectedRecord = formRun.selectRecordModeSelectedRecord();

        return selectedRecord;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeBlanketOrder</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@SYS324046</DeveloperDocumentation>
	<Label>@SYS190134</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>RecId</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Extends>AgreementHeaderExt_RU</Extends>
	<Modules>AccountsPayable</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PostingProfile</Name>
			<Label>@SYS21530</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendPostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendPrepaymentPostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VATTaxAgent</Name>
			<Label>@GLS112871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATChargeSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATOperationCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATChargeSource</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VATChargeSource_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATOperationCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATOperationCode_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendPostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendPrepaymentPostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPostingProfile</ExtendedDataType>
			<Label>@SYS59471</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerPurchResponsible</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WorkerPurchResponsible_RU</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchAgreementHeaderExt</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>AgreementHeaderExt_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VATOperationCodeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VATOperationCodeTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VATOperationCode</Name>
					<SourceEDT>VATOperationCode_RU</SourceEDT>
					<Field>VATOperationCode</Field>
					<RelatedField>OperationCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendLedgerPostingProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendLedger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendLedgerPostingProfile</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendPostingProfile</Name>
					<SourceEDT>VendPostingProfile</SourceEDT>
					<Field>VendPostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendLedgerPrepaymentProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendLedger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendLedgerPrepaymentProfile</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendPrepaymentPostingProfile</Name>
					<SourceEDT>VendPostingProfile</SourceEDT>
					<Field>VendPrepaymentPostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerPurchResponsible</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerPurchResponsible</Name>
					<Field>WorkerPurchResponsible</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>