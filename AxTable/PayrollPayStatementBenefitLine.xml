<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPayStatementBenefitLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollPayStatementBenefitLine extends PayrollPayStatementLine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes the current <c>PayrollPayStatementBenefitLine</c> record and adjusts the benefit limit
    ///     remaining amount for the benefit, if applicable.
    /// </summary>
    public void delete()
    {
        HcmWorkerEnrolledBenefit    workerEnrolledBenefit;
        PayrollPayStatement         payStatement;
        PayrollPayPeriod            payPeriod;
        utcdatetime                 companyEndOfPayPeriod;

        ttsbegin;

        // If the benefit has already been marked for removal, any limit adjustment has already occurred at that point
        if (!this.IsMarkedForRemoval)
        {
            payStatement = PayrollPayStatement::find(this.PayStatement);

            payPeriod = PayrollPayPeriod::find(payStatement.PayPeriod);
            companyEndOfPayPeriod = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(payPeriod.PeriodEndDate, timeMax()), DateTimeUtil::getCompanyTimeZone());

            workerEnrolledBenefit = HcmWorkerEnrolledBenefit::findByWorkerBenefit(payStatement.Worker, this.Benefit, companyEndOfPayPeriod);

            if (workerEnrolledBenefit.RecId)
            {
                // Since the benefit line is being deleted, increase the amount remaining for the benefit limit, if a limit is in place
                PayrollWorkerEnrolledBenefitLimit::adjustBenefitLimitAmount(this.AccountingCurrencyAmount, workerEnrolledBenefit.RecId, this.IsEmployer, payPeriod, true);
            }
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBenefitPlanDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <c>HcmBenefitPlan</c> description associated with <c>HcmBenefit</c> record.
    /// </summary>
    /// <returns>
    /// A description from the <c>HcmBenefitPlan</c> table.
    /// </returns>
    display HrmDescription displayBenefitPlanDescription()
    {
        HcmBenefitPlan hcmBenefitPlan;
        HcmBenefit     hcmBenefit;

        select firstonly Description from hcmBenefitPlan
            join RecId from hcmBenefit where hcmBenefitPlan.RecId == hcmBenefit.BenefitPlan
                && hcmBenefit.RecId == this.Benefit;

        return hcmBenefitPlan.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Insertes <c>PayrollPayStatementBenefitLine</c> buffer in to the table.
    /// </summary>
    /// <param name="_earningStatementLines">
    ///     A <c>List</c> containing the record IDs of <c>PayrollEarningStatementLine</c> records.
    /// </param>
    /// <param name="_createSourceDocument">
    ///     A boolean that specifies if the source document needs to be created or not.
    /// </param>
    /// <remarks>
    ///     The _earningStatementLines line parameter is added to over come the compiler error "The method override has an incorrect number of parameters.".
    ///     The problem here is that the parent table <c>PayrollPayStatementLine</c>, overrides the insert with a <c>List</c> parameter so any child tables
    ///     overriding the insert are required to have that parameter too.
    /// </remarks>
    public void insert(List _earningStatementLines = null, boolean _createSourceDocument=true)
    {
        HcmWorkerEnrolledBenefit    workerEnrolledBenefit;
        PayrollPayStatement         payStatement;
        PayrollPayPeriod            payPeriod;
        utcdatetime                 companyEndOfPayPeriod;

        ttsbegin;

        //
        // The _earningStatementLines parameter should always be null. This is being added here to over come the compiler error "The method override has an incorrect number of parameters.".
        // The problem here is that the parent table <c>PayrollPayStatementLine</c>, overrides the insert with a <c>List</c> parameter so any child tables overriding the insert
        // are required to have that parameter too.
        //
        Debug::assert(_earningStatementLines == null);

        payStatement = PayrollPayStatement::find(this.PayStatement);

        payPeriod = PayrollPayPeriod::find(payStatement.PayPeriod);
        companyEndOfPayPeriod = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(payPeriod.PeriodEndDate, timeMax()), DateTimeUtil::getCompanyTimeZone());

        workerEnrolledBenefit = HcmWorkerEnrolledBenefit::findByWorkerBenefit(payStatement.Worker, this.Benefit, companyEndOfPayPeriod);

        if (workerEnrolledBenefit.RecId)
        {
            // Since a benefit line is being added, decrease the amount remaining for the benefit limit, if a limit is in place
            PayrollWorkerEnrolledBenefitLimit::adjustBenefitLimitAmount(-this.AccountingCurrencyAmount, workerEnrolledBenefit.RecId, this.IsEmployer, payPeriod, true);
        }

        super(_earningStatementLines, _createSourceDocument);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineLocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check if the line is locked or not.
    /// </summary>
    /// <returns>
    ///     true if the line is locked; otherwise, false.
    /// </returns>
    public boolean isLineLocked()
    {
        PayrollBenefitPlanDetail planDetail = PayrollBenefitPlanDetail::findByBenefitPlan(HcmBenefit::find(this.Benefit).BenefitPlan);
        PayrollPayStatement payStatement = PayrollPayStatement::find(this.PayStatement);
        boolean isLocked ;

        if (this.RecId == 0  || planDetail.RecId == 0 || payStatement.PaymentType == PayrollPaymentType::Manual)
        {
            isLocked = false;
        }
        else
        {
            isLocked = planDetail.IsPayStatementLineLocked || this.IsLineLocked;
        }

        return isLocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the current <c>PayrollPayStatementBenefitLine</c> record and adjusts the benefit limit
    ///     remaining amount for the benefit, if applicable.
    /// </summary>
    public void update()
    {
        this.updateBenefitLimit();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBenefitLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the limit updating for a benefit on a <c>PayrollPayStatementBenefitLine</c> record.
    /// </summary>
    private void updateBenefitLimit()
    {
        HcmWorkerEnrolledBenefit    workerEnrolledBenefit;
        PayrollPayStatement         payStatement;
        PayrollPayPeriod            payPeriod;
        utcdatetime                 companyEndOfPayPeriod;
        PayrollPayStatementBenefitLine payStatementBenefitLine;

        if (this.getInstanceRelationType() != tableStr(PayrollPayStatementBenefitLine))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        payStatementBenefitLine = this;

        ttsbegin;

        payStatement = PayrollPayStatement::find(this.PayStatement);

        payPeriod = PayrollPayPeriod::find(payStatement.PayPeriod);
        companyEndOfPayPeriod = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(payPeriod.PeriodEndDate, timeMax()), DateTimeUtil::getCompanyTimeZone());

        workerEnrolledBenefit = HcmWorkerEnrolledBenefit::findByWorkerBenefit(payStatement.Worker, payStatementBenefitLine.Benefit, companyEndOfPayPeriod);

        if (workerEnrolledBenefit.RecId)
        {
            // If this update has marked the benefit line for removal
            if (this.IsMarkedForRemoval && !this.orig().IsMarkedForRemoval)
            {
                // We are basically deleting the benefit line by marking it for removal, so put back
                // the entire benefit amount.
                PayrollWorkerEnrolledBenefitLimit::adjustBenefitLimitAmount(this.orig().AccountingCurrencyAmount, workerEnrolledBenefit.RecId, this.IsEmployer, payPeriod, true);
            }
            // If a benefit line has had its amount modified, then limit remaining field on the benefit needs adjusting
            else if (this.AccountingCurrencyAmount != this.orig().AccountingCurrencyAmount)
            {
                // Adjust the limit remaining based on the adjustment to the benefit line
                PayrollWorkerEnrolledBenefitLimit::adjustBenefitLimitAmount(this.orig().AccountingCurrencyAmount - this.AccountingCurrencyAmount, workerEnrolledBenefit.RecId, this.IsEmployer, payPeriod, true);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if it is safe to create a new <c>PayrollPayStatementBenefitLine</c> on the current pay statement
    /// for the specified code.
    /// </summary>
    /// <param name="_benefit">
    /// The benefit record identifier for which to see if benefit line records exist.
    /// </param>
    /// <param name="_payStatement">
    /// The <c>PayrollPayStatement</c> record identifier to verify for existance.
    /// </param>
    /// <param name="_isEmployer">
    /// The flag that indicates if looking for an a contribution (true) or a deduction (false).
    /// </param>
    /// <returns>
    /// True if it is safe to create a new benefit line for the current pay statement for
    /// the specified benefit code.
    /// </returns>
    /// <remarks>
    /// This method is used to ensure that during a recalculation of a pay statement any
    /// lines that were modified or removed by the user do not get replaced by the
    /// recalculation process.
    /// </remarks>
    public static boolean canCreate(HcmBenefitRecId _benefit, PayrollPayStatementRecId _payStatement, boolean _isEmployer)
    {
        PayrollPayStatementBenefitLine      benefitLine;

        // Determine if a modified benefit line record exists on the specified pay statement for the specified benefit
        select firstonly Benefit, PayStatement, IsPayStatementLineOverridden from benefitLine
        where benefitLine.Benefit == _benefit
        &&    benefitLine.IsEmployer == _isEmployer
        &&    benefitLine.PayStatement == _payStatement
        &&    benefitLine.IsPayStatementLineOverridden == NoYes::Yes;

        // If no record is found, true is returend since it is safe to create a new record; else false is returned
        return (benefitLine.RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollPayStatementBenefitLine</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!PayrollPayStatementBenefitLine::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollPayStatementBenefitLine::txtNotExist(), tableStr(PayrollPayStatementBenefitLine)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates and inserts a new record into the <c>PayrollPayStatementBenefitLine</c> table.
    /// </summary>
    /// <param name="_payStatement">
    ///     The <c>PayStatement</c> table buffer that represents the parent record.
    /// </param>
    /// <param name="_periodEndDate">
    ///     The value of the <c>AccountingDate</c> field of the record to create.
    /// </param>
    /// <param name="_benefit">
    ///     The <c>HcmBenefit</c> table buffer of the benefit for the <c>PayrollPayStatementBenefitLine</c> record.
    /// </param>
    /// <param name="_accountingDistributionTemplateRecId">
    ///     The value of the <c>AccountingDistributionTemplate</c> field to the record to create.
    /// </param>
    /// <param name="_benefitAmount">
    ///     The value of the <c>AccountingCurrencyAmount</c> field of the record to create.
    /// </param>
    /// <param name="_payrollType">
    ///     The value of the <c>PyrollType</c>.
    /// </param>
    /// <param name="_positionRecId">
    ///     The value <c>HcmPosition</c> record id.
    /// </param>
    /// <param name="_source">
    ///     The valid of <c>PayrollPayStatementLineSource</c>.
    /// </param>
    /// <param name="_isPayStatementLineOverridden">
    ///     The value that shows whether this line is ovverriden or not.
    /// </param>
    /// <param name="_baseTimeEarningBaseAmount">
    ///     The earning basis value calculated for the benefit line.
    /// </param>
    /// <param name="_baseTimeEarningBaseHours">
    ///     The earning basis value in hours calculated for the benefit line.
    /// </param>
    /// <param name="_premiumEarningBaseAmount">
    ///     The earning basis value of the overtime/doubletime earnings calculated for the benefit line.
    /// </param>
    /// <param name="_premiumEarningBaseHours">
    ///     The earning basis value in hours of the overtime/doubletime earnings calculated for the benefit line.
    /// </param>
    /// <returns>
    ///     The newly created <c>PayrollPayStatementBenefitLine</c> record.
    /// </returns>
    public static PayrollPayStatementBenefitLine create(
        PayrollPayStatement                 _payStatement,
        TransDate                           _periodEndDate,
        HcmBenefit                          _benefit,
        AccountingDistributionTemplateRecId _accountingDistributionTemplateRecId,
        AmountCur                           _benefitAmount,
        PayrollType                         _payrollType,
        HcmPositionRecId                    _positionRecId = 0,
        PayrollPayStatementLineSource       _source = PayrollPayStatementLineSource::WorkerEnrolledBenefit,
        boolean                             _isPayStatementLineOverridden = NoYes::No,
        AmountMST                           _baseTimeEarningBaseAmount = 0,
        PayrollEarningQuantity              _baseTimeEarningBaseHours = 0,
        AmountMST                           _premiumEarningBaseAmount = 0,
        PayrollEarningQuantity              _premiumEarningBaseHours = 0)
    {
        PayrollPayStatementBenefitLine      payStatementBenefitLine;
        boolean                             doAccounting = (_payStatement.SourceDocumentHeader != 0);

        ttsbegin;
        payStatementBenefitLine.AccountingDate                   = _periodEndDate;
        payStatementBenefitLine.Benefit                          = _benefit.RecId;
        payStatementBenefitLine.AccountingCurrencyAmount         = CurrencyExchange::round(_benefitAmount, PayrollSetup::currencyCode());
        payStatementBenefitLine.PayStatement                     = _payStatement.RecId;

        if (doAccounting)
        {
            payStatementBenefitLine.AccountingDistributionTemplate = _accountingDistributionTemplateRecId;
        }

        payStatementBenefitLine.IsPayStatementLineOverridden     = _isPayStatementLineOverridden;
        payStatementBenefitLine.IsMarkedForRemoval               = NoYes::No;
        payStatementBenefitLine.IsEmployer                       = _payrollType == PayrollType::Contribution;
        payStatementBenefitLine.IsLineLocked                     = PayrollPayStatementBenefitLine::getIsLineLocked(_payStatement.PaymentType, _benefit.RecId);
        payStatementBenefitLine.Position                         = _positionRecId;
        payStatementBenefitLine.Source                           = _source;
        payStatementBenefitLine.BaseTimeEarningBaseAmount        = _baseTimeEarningBaseAmount;
        payStatementBenefitLine.BaseTimeEarningBaseHours         = _baseTimeEarningBaseHours;
        payStatementBenefitLine.PremiumEarningBaseAmount         = _premiumEarningBaseAmount;
        payStatementBenefitLine.PremiumEarningBaseHours          = _premiumEarningBaseHours;

        if (payStatementBenefitLine.AccountingCurrencyAmount != 0)
        {
            payStatementBenefitLine.insert(null, doAccounting);
        }
        else
        {
            // Don't create the line if the rounded amount is 0
            payStatementBenefitLine.clear();
        }
        ttscommit;

        return payStatementBenefitLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsLineLocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check if the <c>PayrollPayStatementBenefitLine</c> record is locked.
    /// </summary>
    /// <param name="_paymentType">
    ///     A payment run type of the <c>PayrollPayStatement</c> record.
    /// </param>
    /// <param name="_benefitRecId">
    ///     A RecdId of the <c>HcmBenefit</c> record.
    /// </param>
    /// <returns>
    ///     Yes if the <c>PayrollPayStatementBenefitLine</c> is locked; otherwise, no.
    /// </returns>
    public static NoYes  getIsLineLocked(PayrollPaymentType _paymentType, HcmBenefitRecId _benefitRecId)
    {
        NoYes isLineLocked;

        if (_paymentType == PayrollPaymentType::Manual)
        {
            isLineLocked = NoYes::No;
        }
        else
        {
            HcmBenefit benefit = HcmBenefit::find(_benefitRecId);

            isLineLocked = PayrollBenefitPlanDetail::findByBenefitPlan(benefit.BenefitPlan).IsPayStatementLineLocked;
        }

        return isLineLocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollPayStatementBenefitLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return _recId && (select firstonly RecId from payrollPayStatementBenefitLine
                    where payrollPayStatementBenefitLine.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollPayStatementBenefitLine</c> table based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollPayStatementBenefitLine</c> table.
    /// </returns>
    public static PayrollPayStatementBenefitLine find(
        RecId         _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollPayStatementBenefitLine payrollPayStatementBenefitLine;

        payrollPayStatementBenefitLine.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollPayStatementBenefitLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollPayStatementBenefitLine
             where payrollPayStatementBenefitLine.RecId == _recId;

        return payrollPayStatementBenefitLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRemoveRecord</Name>
				<Source><![CDATA[
    public boolean canRemoveRecord()
    {
        boolean ret = true;

        if (this.AccountingCurrencyAmount > 0)
        {
            // Check whether the total YTD value for a benefit is not negative after removing this line
            ret = PayrollPayStatementBenefitLine::validateYTDBenefitAmountNotNegative(this, PayrollPayStatementBenefitLineCRUDMode::Delete);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();
        ret = ret && PayrollPayStatementBenefitLine::validateYTDBenefitAmountNotNegative(this, PayrollPayStatementBenefitLineCRUDMode::CreateOrUpdate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateYTDBenefitAmountNotNegative</Name>
				<Source><![CDATA[
    public static boolean validateYTDBenefitAmountNotNegative(PayrollPayStatementBenefitLine _payStmtBenLine, PayrollPayStatementBenefitLineCRUDMode _recordMode)
    {
        boolean ret = true;
        PayrollPayStatementBenefitLine payrollPayStatementBenefitLineYTD;
        PayrollPayStatement payrollPayStatementYTD;
        PayrollPayStatement payStatement;
        HcmWorker worker;
        HcmBenefit benefit;
        PayrollBenefitTaxRule_US benefitTaxRule;
        PayrollStatementAccountingCurrencyAmount amount = 0;

        // Only check for benefits which have a PreTaxBasis
        select firstonly worker, PaymentDate, RecId from payStatement
            where payStatement.RecId == _payStmtBenLine.PayStatement
            join RecId from worker
                where worker.recId == payStatement.worker
            exists join benefit
                where benefit.RecId == _payStmtBenLine.Benefit
            exists join benefitTaxRule
                where benefitTaxRule.BenefitPlan == benefit.BenefitPlan
                    && benefitTaxRule.PreTaxBasis != PayrollPreTaxBasis::None;

        if (payStatement.RecId != 0)
        {
            select sum(AccountingCurrencyAmount) from payrollPayStatementBenefitLineYTD
                where payrollPayStatementBenefitLineYTD.IsEmployer == _PayStmtBenLine.IsEmployer
                    && payrollPayStatementBenefitLineYTD.IsMarkedForRemoval == NoYes::No
                    && payrollPayStatementBenefitLineYTD.RecId != _payStmtBenLine.RecId
                    && payrollPayStatementBenefitLineYTD.Benefit == _payStmtBenLine.Benefit
                exists join payrollPayStatementYTD
                    where payrollPayStatementYTD.RecId == payrollPayStatementBenefitLineYTD.PayStatement
                        && payrollPayStatementYTD.Worker == worker.RecId
                        && payrollPayStatementYTD.PaymentDate >= mkDate(01, 01, year(payStatement.PaymentDate))
                        && payrollPayStatementYTD.PaymentDate <= mkDate(31, 12, year(payStatement.PaymentDate));

            if (_recordMode ==  PayrollPayStatementBenefitLineCRUDMode::CreateOrUpdate)
            {
                // record is getting saved, YTD amount plus the new amount should be positive to maintain valid data state
                amount = payrollPayStatementBenefitLineYTD.AccountingCurrencyAmount + _payStmtBenLine.AccountingCurrencyAmount;
            }
            else
            {
                // record is getting deleted, the YTD sum except the current amount should be positive to maintain valid data state
                amount = payrollPayStatementBenefitLineYTD.AccountingCurrencyAmount;
            }

            if (amount < 0)
            {
                error("@Payroll:ThisChangeCannotBeSavedABenefitsAnnualAmountCannotBeNegative");
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollpaystatementbenefitlineTableHoldsThePayStatementBe</DeveloperDocumentation>
	<Label>@Payroll:PayStatementBenefitLines</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>Benefit</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Extends>PayrollPayStatementLine</Extends>
	<Modules>Payroll</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Benefit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BaseTimeEarningBaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BaseTimeEarningBaseHours</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PremiumEarningBaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PremiumEarningBaseHours</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BaseTimeEarningBaseAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollStatementAccountingCurrencyAmount</ExtendedDataType>
			<Label>@Payroll:BaseEarningAmount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BaseTimeEarningBaseHours</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningQuantity</ExtendedDataType>
			<Label>@Payroll:BaseEarningHours</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Benefit</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBenefitRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PremiumEarningBaseAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollStatementAccountingCurrencyAmount</ExtendedDataType>
			<Label>@Payroll:PremiumEarningAmount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PremiumEarningBaseHours</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningQuantity</ExtendedDataType>
			<Label>@Payroll:PremiumEarningHours</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BenefitIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Benefit</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Benefit_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmBenefit</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Benefit</Name>
					<Field>Benefit</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayStatementLineBenefit_FK</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PayrollPayStatementLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BenefitLine</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>