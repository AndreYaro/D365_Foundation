<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepEntityGroup_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetDepEntityGroup_JP extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>AssetDepEntityGroup_JP</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>AssetDepEntityGroup_JP</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        AssetDepEntityGroup_JP  assetDepEntityGroup_JP;

        if (_recId)
        {
            select firstonly RecId
                from assetDepEntityGroup_JP
                where assetDepEntityGroup_JP.RecId == _recId;
        }

        return assetDepEntityGroup_JP.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existById</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified Id in the <c>AssetDepEntityGroup_JP</c> table exists.
    /// </summary>
    /// <param name="_assetId">
    /// The asset Id.
    /// </param>
    /// <param name="_bookId">
    /// The asset book Id of value model / depreciation book.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existById(AssetId _assetId, AssetBookMergeId _bookId)
    {
        AssetDepEntityGroup_JP  assetDepEntityGroup_JP;

        // To make it more flexible, it does not require both Id are not empty.
        // Thus, it can support group for a whole asset or a whole value module / depreciation book
        if (_assetId || _bookId)
        {
            select firstonly RecId
                from assetDepEntityGroup_JP
                where assetDepEntityGroup_JP.AssetId    == _assetId
                    && assetDepEntityGroup_JP.BookId    == _bookId;
        }

        return assetDepEntityGroup_JP.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>AssetDepEntityGroup_JP</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>AssetDepEntityGroup_JP</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetDepEntityGroup_JP</c> table; otherwise, an empty record.
    /// </returns>
    public static AssetDepEntityGroup_JP find(
        RefRecId            _recId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetDepEntityGroup_JP  assetDepEntityGroup_JP;

        if (_recId)
        {
            assetDepEntityGroup_JP.selectForUpdate(_forupdate);
            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                assetDepEntityGroup_JP.concurrencyModel(_concurrencyModel);
            }

            select firstonly assetDepEntityGroup_JP
                where assetDepEntityGroup_JP.RecId == _recId;
        }

        return assetDepEntityGroup_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>AssetDepEntityGroup_JP</c> table. If not exists, create a new one.
    /// </summary>
    /// <param name="_assetId">
    /// The asset Id.
    /// </param>
    /// <param name="_bookId">
    /// The asset book Id of value model / depreciation book.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <param name="_userConnection">
    /// An instance of <C>UserConnection</C> which can be used to connect with datebase; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetDepEntityGroup_JP</c> table; otherwise, an empty record.
    /// </returns>
    public static AssetDepEntityGroup_JP findOrCreate(
        AssetId             _assetId,
        AssetBookMergeId    _bookId,
        boolean             _forupdate          = false,
        ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto,
        UserConnection      _userConnection     = null)
    {
        AssetDepEntityGroup_JP  assetDepEntityGroup_JP;

        if (_assetId && _bookId)
        {
            if (_userConnection)
            {
                assetDepEntityGroup_JP.setConnection(_userConnection);
            }

            assetDepEntityGroup_JP.selectForUpdate(_forupdate);
            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                assetDepEntityGroup_JP.concurrencyModel(_concurrencyModel);
            }

            select firstonly assetDepEntityGroup_JP
                where assetDepEntityGroup_JP.AssetId    == _assetId
                    && assetDepEntityGroup_JP.BookId    == _bookId;

            // Create a new one if not exists
            if (!assetDepEntityGroup_JP)
            {
                assetDepEntityGroup_JP.AssetId  = _assetId;
                assetDepEntityGroup_JP.BookId   = _bookId;
                assetDepEntityGroup_JP.insert();
            }
        }

        return assetDepEntityGroup_JP;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>JP</CountryRegionCodes>
	<DeveloperDocumentation>@SYP4880359</DeveloperDocumentation>
	<TableGroup>Group</TableGroup>
	<TitleField1>AssetId</TitleField1>
	<TitleField2>BookId</TitleField2>
	<Visible>No</Visible>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>FixedAssets</Modules>
	<ReplacementKey>GroupIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetBookMergeId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<SourceEDT>AssetBookMergeId</SourceEDT>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>