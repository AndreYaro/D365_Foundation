<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsBatchAttribByItemCustomer</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsBatchAttribByItemCustomer extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDuplicateAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks for the assignment of duplicate attributes to an item and customer combination.
    /// </summary>
    /// <returns>
    ///  true if the assignment introduces duplicate attributes; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  For each attribute that is being introduced as a duplicate, an error message
    ///  is being shown in the info log.
    /// </remarks>
    public boolean checkDuplicateAttributes()
    {
        PdsBatchAttribByItemCustomer        byItem;
        PdsBatchAttribByAttribGroup         byGroup;
        PdsBatchAttrib                      byAll;
        Set                                 attrs = new Set(Types::String);
        Set                                 duplicates = new Set(Types::String);
        boolean                             ret = true;

        switch (this.PdsBatchAttribCode)
        {
            case TableGroupAll::Table:
                attrs.add(this.PdsBatchAttribRelation);
                break;
            case TableGroupAll::GroupId:
                while select PdsBatchAttribAttribId
                    from byGroup
                    where byGroup.PdsBatchAttribGroupId == this.PdsBatchAttribRelation
                {
                    attrs.add(byGroup.PdsBatchAttribAttribId);
                }
                break;
        }
        while select PdsBatchAttribCode, PdsBatchAttribRelation
            from  byItem
            where  byItem.PdsBatchAttribItemId  == this.PdsBatchAttribItemId
                && byItem.RecId                 != this.RecId
                && byItem.PdsBatchAttribAccountCode == this.PdsBatchAttribAccountCode
                && byItem.PdsBatchAttribAccountRelation == this.PdsBatchAttribAccountRelation
        {
            switch (byItem.PdsBatchAttribCode)
            {
                case TableGroupAll::Table:
                    if ((this.PdsBatchAttribCode == TableGroupAll::All
                            || attrs.in(byItem.PdsBatchAttribRelation))
                        && !duplicates.in(byItem.PdsBatchAttribRelation))
                    {
                        duplicates.add(byItem.PdsBatchAttribRelation);
                        ret = checkFailed(strfmt("@PRO1679", byItem.PdsBatchAttribRelation));
                    }
                    break;
                case TableGroupAll::GroupId:
                    while select PdsBatchAttribAttribId
                        from  byGroup
                        where byGroup.PdsBatchAttribGroupId == byItem.PdsBatchAttribRelation
                    {
                        if ((this.PdsBatchAttribCode == TableGroupAll::All
                                || attrs.in(byGroup.PdsBatchAttribAttribId))
                            && !duplicates.in(byGroup.PdsBatchAttribAttribId))
                        {
                            duplicates.add(byGroup.PdsBatchAttribAttribId);
                            ret = checkFailed(strfmt("@PRO1679", byGroup.PdsBatchAttribAttribId));
                        }
                    }
                    break;
                case TableGroupAll::All:
                    while select PdsBatchAttribId
                        from byAll
                    {
                        if ((this.PdsBatchAttribCode == TableGroupAll::All
                                || attrs.in(byGroup.PdsBatchAttribAttribId))
                            && !duplicates.in(byGroup.PdsBatchAttribAttribId))
                        {
                            duplicates.add(byGroup.PdsBatchAttribAttribId);
                            ret = checkFailed(strfmt("@PRO1679", byGroup.PdsBatchAttribAttribId));
                        }
                    }
                    //
                    // There cannot be any more attributes that may be duplicates.
                    //
                    return true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PdsBatchAttribByItemCustomer, PdsBatchAttribMax):
                if (this.isFieldSet(fieldNum(PdsBatchAttribByItemCustomer, PdsBatchAttribRelation)))
                {
                    this.updateMaxRangeValue();
                }
                break;

            case fieldNum(PdsBatchAttribByItemCustomer, PdsBatchAttribMin):
                if (this.isFieldSet(fieldNum(PdsBatchAttribByItemCustomer, PdsBatchAttribRelation)))
                {
                    this.updateMinRangeValue();
                }
                break;

            case fieldNum(PdsBatchAttribByItemCustomer, PdsBatchAttribAccountRelation):
                if (this.isFieldSet(fieldNum(PdsBatchAttribByItemCustomer, PdsBatchAttribAccountCode)))
                {
                    this.PdsBatchAttribAccountRelation = '';
                }
                break;

            case fieldNum(PdsBatchAttribByItemCustomer, PdsBatchAttribRelation):
                if (this.isFieldSet(fieldNum(PdsBatchAttribByItemCustomer, PdsBatchAttribCode)))
                {
                    this.PdsBatchAttribRelation = '';
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
                [fieldNum(PdsBatchAttribByItemCustomer, PdsBatchAttribMax),
                    [fieldNum(PdsBatchAttribByItemCustomer, PdsBatchAttribRelation)]
                ],
                [fieldNum(PdsBatchAttribByItemCustomer, PdsBatchAttribMin),
                    [fieldNum(PdsBatchAttribByItemCustomer, PdsBatchAttribRelation)]
                ],
                
                [fieldNum(PdsBatchAttribByItemCustomer, PdsBatchAttribAccountRelation),
                    [fieldNum(PdsBatchAttribByItemCustomer, PdsBatchAttribAccountCode)]
                ],
                [fieldNum(PdsBatchAttribByItemCustomer, PdsBatchAttribRelation),
                    [fieldNum(PdsBatchAttribByItemCustomer, PdsBatchAttribCode)]
                ]
              ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttrib</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the related <c>PdsBatchAttrib</c> record in case a relation is defined.
    /// </summary>
    /// <returns>
    /// A <c>PdsBatchAttrib</c> record or no record.
    /// </returns>
    public PdsBatchAttrib pdsBatchAttrib()
    {
        PdsBatchAttrib  pdsBatchAttrib;

        if (   this.PdsBatchAttribCode == TableGroupAll::Table
            && this.PdsBatchAttribRelation)
        {
            pdsBatchAttrib = PdsBatchAttrib::find(this.PdsBatchAttribRelation);
        }

        return pdsBatchAttrib;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribByItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the related <c>pdsBatchAttribByItem</c> record in case a relation is defined.
    /// </summary>
    /// <returns>
    /// A <c>pdsBatchAttribByItem</c> record or no record.
    /// </returns>
    public PdsBatchAttribByItem pdsBatchAttribByItem()
    {
        PdsBatchAttribByItem    pdsBatchAttribByItem;

        if (   this.PdsBatchAttribCode == TableGroupAll::Table
            && this.PdsBatchAttribRelation
            && this.PdsBatchAttribItemId)
        {
            pdsBatchAttribByItem = PdsBatchAttribByItem::findItemId(this.PdsBatchAttribItemId, this.PdsBatchAttribRelation, TableGroupAll::Table);
        }

        return pdsBatchAttribByItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMinRangeValue</Name>
				<Source><![CDATA[
    private void updateMinRangeValue()
    {
        PdsBatchAttribByItem            pdsBatchAttribByItem;
        PdsBatchAttribByAttribGroup     pdsBatchAttribByAttribGroup;

        pdsBatchAttribByItem = PdsBatchAttribByItem::findItemId(
                                    this.PdsBatchAttribItemId,
                                    this.PdsBatchAttribRelation,
                                    this.PdsBatchAttribCode);

        if (pdsBatchAttribByItem)
        {
            this.PdsBatchAttribMin = pdsBatchAttribByItem.PdsBatchAttribMin;
        }
        else
        {
            select firstonly PdsBatchAttribRelation from pdsBatchAttribByItem
                where  pdsBatchAttribByItem.PdsBatchAttribItemId == this.PdsBatchAttribItemId
                    && pdsBatchAttribByItem.PdsBatchAttribCode   == TableGroupAll::GroupId
                join PdsBatchAttribMin from pdsBatchAttribByAttribGroup
                    where pdsBatchAttribByAttribGroup.PdsBatchAttribGroupId  == pdsBatchAttribByItem.PdsBatchAttribRelation
                    &&    pdsBatchAttribByAttribGroup.PdsBatchAttribAttribId == this.PdsBatchAttribRelation;

            this.PdsBatchAttribMin = pdsBatchAttribByAttribGroup.PdsBatchAttribMin;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMaxRangeValue</Name>
				<Source><![CDATA[
    private void updateMaxRangeValue()
    {
        PdsBatchAttribByItem            pdsBatchAttribByItem;
        PdsBatchAttribByAttribGroup     pdsBatchAttribByAttribGroup;

        pdsBatchAttribByItem = PdsBatchAttribByItem::findItemId(
                                    this.PdsBatchAttribItemId,
                                    this.PdsBatchAttribRelation,
                                    this.PdsBatchAttribCode);

        if (pdsBatchAttribByItem)
        {
            this.PdsBatchAttribMax = pdsBatchAttribByItem.PdsBatchAttribMax;
        }
        else
        {
            select firstonly PdsBatchAttribRelation from pdsBatchAttribByItem
                where  pdsBatchAttribByItem.PdsBatchAttribItemId == this.PdsBatchAttribItemId
                    && pdsBatchAttribByItem.PdsBatchAttribCode   == TableGroupAll::GroupId
                join PdsBatchAttribMax from pdsBatchAttribByAttribGroup
                    where pdsBatchAttribByAttribGroup.PdsBatchAttribGroupId  == pdsBatchAttribByItem.PdsBatchAttribRelation
                    &&    pdsBatchAttribByAttribGroup.PdsBatchAttribAttribId == this.PdsBatchAttribRelation;

            this.PdsBatchAttribMax = pdsBatchAttribByAttribGroup.PdsBatchAttribMax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(
        fieldName   _fieldName,
        int         _arrayIndex = 1)
    {
        boolean                 ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(PdsBatchAttribByItemCustomer, PdsBatchAttribRelation):

                if (this.pdsBatchAttrib().PdsBatchAttribType == PdsBatchAttribType::Enumerate)
                {
                    if (!PdsBatchAttribEnumValues::existBatchAttribId(this.PdsBatchAttribRelation))
                    {
                        ret = checkFailed("@PDS1534");
                    }
                }
                break;
            case fieldstr(PdsBatchAttribByItemCustomer, PdsBatchAttribMin):
                ret = ret && this.pdsBatchAttrib().checkValueAgainstAttribRange(this.PdsBatchAttribMin);
                ret = ret && this.pdsBatchAttribByItem().checkValueAgainstAttribRange(this.PdsBatchAttribMin);
                break;

            case fieldstr(PdsBatchAttribByItemCustomer, PdsBatchAttribMax):
                ret = ret && this.pdsBatchAttrib().checkValueAgainstAttribRange(this.PdsBatchAttribMax);
                ret = ret && this.pdsBatchAttribByItem().checkValueAgainstAttribRange(this.PdsBatchAttribMax);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSelection</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks for valid assignments based on Account code and Attribute code
    /// </summary>
    /// <returns>
    ///  true if valid assignments have been made
    /// </returns>
    public boolean validateSelection()
    {
        boolean     ret = true;

        switch (this.PdsBatchAttribAccountCode)
        {
            case TableGroupAll::Table:
                if (!CustTable::exist(this.PdsBatchAttribAccountRelation))
                {
                    ret = checkFailed("@SCM:MessageValidation_AccountSelectionRequired_Customer");
                }
                break;

            case TableGroupAll::GroupId:
                if (!CustGroup::checkExist(this.PdsBatchAttribAccountRelation))
                {
                    ret = checkFailed("@SCM:MessageValidation_AccountSelectionRequired_CustomerGroup");
                }
                break;
        }

        switch (this.PdsBatchAttribCode)
        {
            case TableGroupAll::Table:
                if (!PdsBatchAttrib::exist(this.PdsBatchAttribRelation))
                {
                    ret = checkFailed("@SCM:MessageValidation_AccountRelationRequired_BatchAttribute");
                }
                break;
            case TableGroupAll::GroupId:
                if ((select firstOnly PdsBatchAttribByAttribGroup
                        where PdsBatchAttribByAttribGroup.PdsBatchAttribGroupId == this.PdsBatchAttribRelation).RecId == 0)
                {
                    ret = checkFailed("@SCM:MessageValidation_AccountRelationRequired_BatchAttributeGroup");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNumberBatchAttribute</Name>
				<Source><![CDATA[
    private boolean isNumberBatchAttribute(PdsBatchAttrib _pdsBatchAttrib)
    {
        if (_pdsBatchAttrib)
        {
            return _pdsBatchAttrib.PdsBatchAttribType == PdsBatchAttribType::Integer
                    || _pdsBatchAttrib.PdsBatchAttribType == PdsBatchAttribType::Realnumber;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRangeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the batch attribute range values.
    /// </summary>
    /// <returns>true if the validation succeeds; otherwise, false.</returns>
    private boolean validateRangeValues()
    {
        boolean ret = true;
        PdsBatchAttrib pdsBatchAttrib = this.pdsBatchAttrib();

        if (!this.isNumberBatchAttribute(pdsBatchAttrib)
            && (this.PdsBatchAttribMin != 0
                || this.PdsBatchAttribMax != 0))
        {
            ret = checkFailed("@PDS:MessageError_RangeValuesSpecifiedForNonNumberAttributes");
        }

        if (pdsBatchAttrib
            && pdsBatchAttrib.PdsBatchAttribType == PdsBatchAttribType::Integer
            && (xInfo::getNumberOfDecimals(this.PdsBatchAttribMin) != 0
                || xInfo::getNumberOfDecimals(this.PdsBatchAttribMax) != 0))
        {
            ret = checkFailed("@PDS:MessageError_InvalidIntegerRangeValues");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the <c>PdsBatchAttribByItemCustomer</c> record can be written.
    /// </summary>
    /// <returns>
    /// Returns true if the record can be written; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret =  ret
            && this.validateRangeValues()
            && PdsBatchAttrib::isValidAttribRange(this.PdsBatchAttribMin, this.PdsBatchAttribMax)
            && this.checkDuplicateAttributes()
            && this.validateSelection();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _recId)
    {
        return _recId
            && (select pdsBatchAttribByItemCustomer
                    where pdsBatchAttribByItemCustomer.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAnyCustRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if specific combination of Item, Customer and relation code exists
    /// </summary>
    /// <param name="_custAcct">
    /// Customer account for which to search
    /// </param>
    /// <param name="_itemId">
    /// Item for which to search
    /// </param>
    /// <returns>
    /// true, if any records are found for that combination; otherwise false.
    /// </returns>
    /// <remarks>
    /// This method is only looking to see if a record exists for the specific combination.
    /// </remarks>
    public static boolean existAnyCustRelation(
        CustAccount         _custAcct,
        ItemId              _itemId)
    {
        PdsBatchAttribByItemCustomer    batchCustItem;
        CustGroupId                     custGroupId = CustTable::groupId(_custAcct);

        if (_custAcct && _itemId)
        {
            select firstonly RecId from batchCustItem
                where  batchCustItem.PdsBatchAttribItemId           == _itemId
                    && batchCustItem.PdsBatchAttribAccountCode      == TableGroupAll::Table
                    && batchCustItem.PdsBatchAttribAccountRelation  == _custAcct;

            if (!batchCustItem.RecId)
            {
                select firstonly RecId from batchCustItem
                    where  batchCustItem.PdsBatchAttribItemId           == _itemId
                        && batchCustItem.PdsBatchAttribAccountCode      == TableGroupAll::GroupId
                        && batchCustItem.PdsBatchAttribAccountRelation  == custGroupId;
            }

            if (!batchCustItem.RecId)
            {
                select firstonly RecId from batchCustItem
                    where  batchCustItem.PdsBatchAttribItemId           == _itemId
                        && batchCustItem.PdsBatchAttribAccountCode      == TableGroupAll::All
                        && batchCustItem.PdsBatchAttribAccountRelation  == "";
            }
        }

        return batchCustItem.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PdsBatchAttribByItemCustomer find(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        PdsBatchAttribByItemCustomer attribByItemCustomer;

        if (!prmisdefault(_forUpdate))
        {
            attribByItemCustomer.selectForUpdate(_forUpdate);
        }

        select firstonly attribByItemCustomer
            where  attribByItemCustomer.RecId == _recId;

        return attribByItemCustomer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAttrSelList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update provided TmpPdsBatchAttribSelect record(s) from the specific item
    /// with any customer specific changes
    /// </summary>
    /// <param name="_tmpPdsAttrSel">
    /// Record based on batch attributes by item
    /// </param>
    /// <param name="_itemId">
    /// Item for which to search the batch attributes by item by customer
    /// </param>
    /// <param name="_custAcct">
    /// Customer account for which to search records
    /// </param>
    /// <returns>
    /// Updated TmpPdsBatchAttribSelect.
    /// </returns>
    /// <remarks>
    /// If there is a corresponding customer specific record for the batch attribute,
    /// it will be updated with this data. If no record is found, the original record
    /// is returned.
    /// </remarks>
    public static TmpPdsBatchAttribSelect updateAttrSelList(
        TmpPdsBatchAttribSelect _tmpPdsAttrSel,
        ItemId                  _itemId,
        CustAccount             _custAcct)
    {
        int                             decimals;
        CustGroupId                     custGroupId;
        TmpPdsBatchAttribSelect         tmpAttrSel;
        PdsBatchAttribByItemCustomer    custAttrs;

        decimals = PdsBatchAttrib::realTypeDecimals();

        custGroupId = CustTable::groupId(_custAcct);

        if (#PdsBatchAttribEnabled)
        {
            ttsbegin;
            while select _tmpPdsAttrSel
            {
                tmpAttrSel.PdsBatchAttribId     = _tmpPdsAttrSel.PdsBatchAttribId;
                tmpAttrSel.PdsBatchAttribOpr1   = _tmpPdsAttrSel.PdsBatchAttribOpr1;
                tmpAttrSel.PdsBatchAttribOpr2   = _tmpPdsAttrSel.PdsBatchAttribOpr2;
                tmpAttrSel.PdsBatchAttribValue1 = _tmpPdsAttrSel.PdsBatchAttribValue1;
                tmpAttrSel.PdsBatchAttribValue2 = _tmpPdsAttrSel.PdsBatchAttribValue2;

                custAttrs.recordLevelSecurity(true);
                custAttrs.selectForUpdate(true);

                //Specific customer
                select firstonly PdsBatchAttribRelation, PdsBatchAttribMin, PdsBatchAttribMax from custAttrs
                    where  custAttrs.PdsBatchAttribItemId           == _itemId
                        && custAttrs.PdsBatchAttribAccountCode      == TableGroupAll::Table
                        && custAttrs.PdsBatchAttribAccountRelation  == _custAcct
                        && custAttrs.PdsBatchAttribCode             == TableGroupAll::Table
                        && custAttrs.PdsBatchAttribRelation         == tmpAttrSel.PdsBatchAttribId;

                //Customer Group
                if (!custAttrs.RecId)
                {
                    select firstonly PdsBatchAttribRelation, PdsBatchAttribMin, PdsBatchAttribMax from custAttrs
                        where  custAttrs.PdsBatchAttribItemId           == _itemId
                            && custAttrs.PdsBatchAttribAccountCode      == TableGroupAll::GroupId
                            && custAttrs.PdsBatchAttribAccountRelation  == custGroupId
                            && custAttrs.PdsBatchAttribCode             == TableGroupAll::Table
                            && custAttrs.PdsBatchAttribRelation         == tmpAttrSel.PdsBatchAttribId;
                }

                //All customers
                if (!custAttrs.RecId)
                {
                    select firstonly PdsBatchAttribRelation, PdsBatchAttribMin, PdsBatchAttribMax from custAttrs
                        where  custAttrs.PdsBatchAttribItemId       == _itemId
                            && custAttrs.PdsBatchAttribAccountCode  == TableGroupAll::All
                            && custAttrs.PdsBatchAttribCode         == TableGroupAll::Table
                            && custAttrs.PdsBatchAttribRelation     == tmpAttrSel.PdsBatchAttribId;
                }

                if (custAttrs.RecId
                    && custAttrs.PdsBatchAttribRelation == tmpAttrSel.PdsBatchAttribId)
                {
                    switch (PdsBatchAttrib::find(tmpAttrSel.PdsBatchAttribId).PdsBatchAttribType)
                    {
                        case PdsBatchAttribType::Integer :
                        //Fall through
                        case PdsBatchAttribType::Realnumber :
                            tmpAttrSel.PdsBatchAttribValue1 = num2str(custAttrs.PdsBatchAttribMin, 0,decimals,1,0);
                            tmpAttrSel.PdsBatchAttribValue2 = num2str(custAttrs.PdsBatchAttribMax, 0,decimals,1,0);
                            break;
                    }
                }
                tmpAttrSel.insert();
            }
            ttscommit;
        }

        return tmpAttrSel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsBatchAttrib</ConfigurationKey>
	<DeveloperDocumentation>@PDS1064</DeveloperDocumentation>
	<FormRef>PdsBatchAttribByitemCustomer</FormRef>
	<Label>@PRO1823</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>PdsBatchAttribRelation</TitleField1>
	<TitleField2>PdsBatchAttribAccountRelation</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>PdsBatchAttribByItemCustomerIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribAccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribAccountRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsBatchAttribByItemCustomer</Name>
			<Label>@PRO1595</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribAccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribAccountRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsBatchAttribRange</Name>
			<Label>@SYS24771</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribMin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribMax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsBatchAttribAccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribAccountCode</ExtendedDataType>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsBatchAttribAccountRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribAccountRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsBatchAttribCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribCode</ExtendedDataType>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsBatchAttribItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsBatchAttribMax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribMax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsBatchAttribMin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribMin</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsBatchAttribRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribRelation</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PdsBatchAttribByItemCustomerIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>PdsBatchAttribItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PdsBatchAttribRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PdsBatchAttribCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PdsBatchAttribAccountRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PdsBatchAttribAccountCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribAccountRelation</Name>
					<Field>PdsBatchAttribAccountRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>PdsBatchAttribAccountCode</Name>
					<Field>PdsBatchAttribAccountCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribAccountRelation</Name>
					<Field>PdsBatchAttribAccountRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>PdsBatchAttribAccountCode</Name>
					<Field>PdsBatchAttribAccountCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>PdsBatchAttribItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsBatchAttrib</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PdsBatchAttrib</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribRelation</Name>
					<Field>PdsBatchAttribRelation</Field>
					<RelatedField>PdsBatchAttribId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>PdsBatchAttribCode</Name>
					<Field>PdsBatchAttribCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsBatchAttribGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsBatchAttribGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribRelation</Name>
					<Field>PdsBatchAttribRelation</Field>
					<RelatedField>PdsBatchAttribGroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>PdsBatchAttribCode</Name>
					<Field>PdsBatchAttribCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>