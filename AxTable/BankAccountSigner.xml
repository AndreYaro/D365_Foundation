<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountSigner</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class BankAccountSigner extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editUserInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the bank signer information to display as user name instead of user Id.
    /// </summary>
    /// <param name = "_set">true if write action, otherwise false.</param>
    /// <param name = "_signer">The instance of <c>BankAccountSigner</c>.</param>
    /// <param name = "_userId">The user id.</param>
    /// <returns>The user name.</returns>
    internal edit UserName editUserInfo(boolean _set, BankAccountSigner _signer, UserID _userId)
    {
        if (_set)
        {
            UserInfo userInfo = xUserInfo::find(false, _userId);
            if (userInfo && userInfo.Enable)
            {
                _signer.Signer = _userId;
            }
        }

        return xUserInfo::find(false, _signer.Signer).name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSigner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookups signer from enabled user list.
    /// </summary>
    /// <param name = "_fromControl">Form control.</param>
    /// <param name = "_filterStr">The user name filter string.</param>
    public static void lookupSigner(FormControl _fromControl, str _filterStr)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(UserInfo), _fromControl);
        sysTableLookup.addLookupField(fieldNum(UserInfo, Id));
        sysTableLookup.addLookupField(fieldNum(UserInfo, AccountType));
        sysTableLookup.addLookupField(fieldNum(UserInfo, Name));
        sysTableLookup.addLookupField(fieldNum(UserInfo, NetworkAlias));

        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(UserInfo));
        queryBuildDataSource.addRange(fieldNum(UserInfo, Enable)).value(queryValue(true));
        if (_filterStr)
        {
            findOrCreateRange_W(queryBuildDataSource, fieldNum(UserInfo, Name), _filterStr);
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates when writing.
    /// </summary>
    /// <returns>true if validation passed, otherwise false.</returns>
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            ret = this.validateEffectiveDate();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ActiveBankAccountSigner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates the bank account signer.
    /// </summary>
    /// <param name = "_companyBankAccountId">The bank account Id.</param>
    public static void ActiveBankAccountSigner(CompanyBankAccountId _companyBankAccountId)
    {
        BankAccountSigner signer;

        ttsbegin;
        update_recordset signer
            setting IsActive = true
            where signer.AccountID == _companyBankAccountId
            && signer.IsActive == false;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEffectiveDate</Name>
				<Source><![CDATA[
    private boolean validateEffectiveDate()
    {
        if (this.EffectiveStartDate > this.EffectiveEndDate && this.EffectiveEndDate != dateNull())
        {
            return checkFailed("@Bank:SignerFromDateLaterToDateValidation");
        }

        BankAccountSigner existSigner;
        select firstonly RecId from existSigner
            where existSigner.AccountID == this.AccountID
                && existSigner.Signer == this.Signer
                && existSigner.RecId != this.RecId
                && ((existSigner.EffectiveStartDate < this.EffectiveEndDate || !this.EffectiveEndDate)
                    && (existSigner.EffectiveEndDate > this.EffectiveStartDate || !existSigner.EffectiveEndDate));

        if (existSigner.RecId)
        {
            return checkFailed("@Bank:SignerDateIntervalValidation");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        if (!BankAccountTable::checkBankLifecycleManagementWorkflowEnabled())
        {
            this.IsActive = true;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<DeveloperDocumentation>@Bank:BankAccountSignerDevDoc</DeveloperDocumentation>
	<Label>@Bank:Signer</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>AccountID</TitleField1>
	<TitleField2>Signer</TitleField2>
	<Visibility>Internal</Visibility>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Modules>Bank</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Signer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Signer</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EffectiveEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Signer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Signer</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@Bank:Signer</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EffectiveStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@Bank:BankSignerEffectiveStartDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EffectiveEndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@Bank:BankSignerEffectiveEndDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@Bank:SignerIsActive</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BankAccountSignerIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>EffectiveStartDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EffectiveEndDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Signer</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankAccountTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountID</Name>
					<Field>AccountID</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>