<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementLineReleasedLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AgreementLineReleasedLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        if (this.isVersioned())
        {
            this.deleteSoft();
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSoft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the record as deleted.
    /// </summary>
    private void deleteSoft()
    {
        this.IsDeleted  = NoYes::Yes;
        this.IsModified = NoYes::Yes;
        this.softDeleteClearValues();
        this.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>AgreementLineReleasedLine</c> record from the
    ///    <c>AgreementLineQuantityCommitment</c> record.
    /// </summary>
    /// <param name="_agreeemntLine">
    ///    The <c>AgreementLineQuantityCommitment</c> record from which to initialize the
    ///    <c>AgreementLineReleasedLine</c> record.
    /// </param>
    void initFromAgreementLine(AgreementLine _agreeemntLine)
    {
        this.AgreementLine  = _agreeemntLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementLineReleasedLineHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the history record based on a <c>AgreementLineReleasedLineHistory</c> record.
    /// </summary>
    /// <param name="_agreementLineReleasedLineHistory">
    ///    A <c>AgreementLineReleasedLineHistory</c> record to use to initialize.
    /// </param>
    public void initFromAgreementLineReleasedLineHistory(AgreementLineReleasedLineHistory _agreementLineReleasedLineHistory)
    {
        AgreementLineReleasedLineMap agreementLineReleasedLineMap;

        agreementLineReleasedLineMap.data(_agreementLineReleasedLineHistory.data());
        this.data(agreementLineReleasedLineMap.data());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>AgreementLineReleasedLine</c> record from the <c>PurchLine</c> record.
    /// </summary>
    /// <param name="_purchLine">
    ///    The <c>PurchLine</c> record from which to initialize the <c>AgreementLineReleasedLine</c> record.
    /// </param>
    void initFromPurchLine(PurchLine _purchLine)
    {
        this.ReferenceRelationType  = _purchLine.TableId;
        this.PurchLineInventTransId = _purchLine.InventTransId;
        this.PurchLineDataAreaId    = _purchLine.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>AgreementLineReleasedLine</c> record from the <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_salesLine">
    ///    The <c>SalesLine</c> record from which to initialize the <c>AgreementLineReleasedLine</c> record.
    /// </param>
    void initFromSalesLine(SalesLine _salesLine)
    {
        this.ReferenceRelationType  = _salesLine.TableId;
        this.SalesLineInventTransId = _salesLine.InventTransId;
        this.SalesLineDataAreaId    = _salesLine.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into the <c>AgreementLineReleasedLine</c> table.
    /// </summary>
    public void insert()
    {
        if (this.AgreementLine && this.ReferenceRelationType)
        {
            this.IsModified = NoYes::Yes;
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVersioned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the record has been versioned.
    /// </summary>
    /// <returns>
    /// true if the record has been versioned; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A record has been versioned if it has been confirmed or approved with change management enabled.
    /// </remarks>
    public boolean isVersioned()
    {
        if (this.ReferenceRelationType  == tableNum(PurchLine))
        {
            return !this.IsModified
                || AgreementLineReleasedLineHistory::existAgreementLineReleasedLine(this.RecId)
                || PurchLine::findInventTransId(this.PurchLineInventTransId).isLatestPOVersionNotArchived();
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkPurchDeliverySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates the delivery lines with the same agreement line that is associated with the order line.
    /// </summary>
    /// <remarks>
    /// At all times, either all delivery lines are associated to an agreement line, or no delivery lines
    /// are associated to an agreement line.
    /// </remarks>
    public void linkPurchDeliverySchedule()
    {
        AgreementLineReleasedLine agreementLineReleasedLine;
        PurchLine                 purchLine;
        PurchDeliverySchedule     purchDeliverySchedule;

        RefTableId                relType = tablenum(PurchLine);
        AgreementLineRecId        agreementLineRecId = this.AgreementLine;
        TradeInventTransId        inventTransId = this.PurchLineInventTransId;
        NoYes                     yes = NoYes::Yes;

        if (agreementLineRecId && inventTransId)
        {
            inventTransId = this.PurchLineInventTransId;

            agreementLineReleasedLine.skipDataMethods(true);
            agreementLineReleasedLine.skipEvents(true);

            insert_recordset agreementLineReleasedLine (AgreementLine, ReferenceRelationType, PurchLineInventTransId, PurchLineDataAreaId, IsModified)
            select agreementLineRecId, relType, InventTransId, DataAreaId, yes from purchLine
                where !purchLine.IsDeleted
            join purchDeliverySchedule
                where purchDeliverySchedule.DeliveryLine == purchLine.InventTransId
                   && purchDeliverySchedule.OrderLine    == inventTransId;

            purchLine.skipDataMethods(true); //only update MatchingAgreementLine and IsModified fields
            purchLine.skipEvents(true);

            update_recordset purchLine
            setting MatchingAgreementLine = agreementLineRecId,
                    IsModified            = NoYes::Yes
            where purchLine.InventTransId == inventTransId
              && !purchLine.IsDeleted;

            update_recordset purchLine
            setting MatchingAgreementLine = agreementLineRecId,
                    IsModified            = NoYes::Yes
                join purchDeliverySchedule
                    where purchDeliverySchedule.DeliveryLine == purchLine.InventTransId
                       && purchDeliverySchedule.OrderLine    == inventTransId
                       && !purchDeliverySchedule.IsDeleted;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkSalesDeliverySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates the delivery lines with the same agreement line that is associated with the order line.
    /// </summary>
    /// <remarks>
    /// At all times, either all delivery lines are associated to an agreement line, or no delivery lines
    /// are associated to an agreement line.
    /// </remarks>
    public void linkSalesDeliverySchedule()
    {
        AgreementLineReleasedLine agreementLineReleasedLine;
        SalesLine                 salesLine;
        SalesDeliverySchedule     salesDeliverySchedule;

        RefTableId                relType = tablenum(SalesLine);
        AgreementLineRecId        agreementLineRecId = this.AgreementLine;
        TradeInventTransId        inventTransId = this.SalesLineInventTransId;
        NoYes                     yes = NoYes::Yes;

        if (agreementLineRecId && inventTransId)
        {
            inventTransId = this.SalesLineInventTransId;

            agreementLineReleasedLine.skipDataMethods(true);
            agreementLineReleasedLine.skipEvents(true);

            insert_recordset agreementLineReleasedLine (AgreementLine, ReferenceRelationType, SalesLineInventTransId, SalesLineDataAreaId, IsModified)
            select agreementLineRecId, relType, InventTransId, DataAreaId, yes from salesLine
            join salesDeliverySchedule
                where salesDeliverySchedule.DeliveryLine    == salesLine.InventTransId
                   && salesDeliverySchedule.OrderLine       == inventTransId;

            salesLine.skipDataMethods(true); //only update MatchingAgreementLine field
            salesLine.skipEvents(true);

            update_recordset salesLine
            setting MatchingAgreementLine = agreementLineRecId
            where salesLine.InventTransId == inventTransId;

            update_recordset salesLine
            setting MatchingAgreementLine = agreementLineRecId
                join salesDeliverySchedule
                    where salesDeliverySchedule.DeliveryLine == salesLine.InventTransId
                       && salesDeliverySchedule.OrderLine    == inventTransId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>softDeleteClearValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the fields to zero.
    /// </summary>
    /// <remarks>
    ///    This method sets the fields to zero so the record does not interfere with code that is not aware of
    ///    the deleted status.
    /// </remarks>
    private void softDeleteClearValues()
    {
        this.AgreementLine = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>AgreementLineReleasedLine</c> record.
    /// </summary>
    public void update()
    {
        this.IsModified = NoYes::Yes;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLinkPurchDeliverySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates the delivery lines with the same agreement line that is associated with the order line.
    /// </summary>
    /// <remarks>
    /// At all times, either all delivery lines are associated to an agreement line, or no delivery lines
    /// are associated to an agreement line.
    /// </remarks>
    public void updateLinkPurchDeliverySchedule()
    {
        AgreementLineReleasedLine agreementLineReleasedLine;
        PurchDeliverySchedule     purchDeliverySchedule;
        PurchLine                 purchLine;

        AgreementLineRecId        agreementLineRecId = this.AgreementLine;
        TradeInventTransId        inventTransId = this.PurchLineInventTransId;

        if (agreementLineRecId && inventTransId)
        {
            agreementLineReleasedLine.skipDataMethods(true);
            agreementLineReleasedLine.skipEvents(true);

            update_recordset agreementLineReleasedLine
            setting AgreementLine = agreementLineRecId,
                    IsModified            = NoYes::Yes
            where agreementLineReleasedLine.ReferenceRelationType    == tablenum(PurchLine)
               && agreementLineReleasedLine.PurchLineDataAreaId      == appl.company().dataArea(tablenum(PurchLine))
               && !agreementLineReleasedLine.IsDeleted
                join purchDeliverySchedule
                    where purchDeliverySchedule.DeliveryLine == agreementLineReleasedLine.PurchLineInventTransId
                       && purchDeliverySchedule.OrderLine    == inventTransId
                       && !purchDeliverySchedule.IsDeleted;

            purchLine.skipDataMethods(true); //only update MatchingAgreementLine and IsModified fields
            purchLine.skipEvents(true);

            update_recordset purchLine
            setting MatchingAgreementLine = agreementLineRecId,
                    IsModified            = NoYes::Yes
            where purchLine.InventTransId == inventTransId
              && !purchLine.IsDeleted;

            update_recordset purchLine
            setting MatchingAgreementLine = agreementLineRecId,
                    IsModified            = NoYes::Yes
                join purchDeliverySchedule
                    where purchDeliverySchedule.DeliveryLine == purchLine.InventTransId
                       && purchDeliverySchedule.OrderLine    == inventTransId
                       && !purchDeliverySchedule.IsDeleted;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLinkSalesDeliverySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates the delivery lines with the same agreement line that is associated with the order line.
    /// </summary>
    /// <remarks>
    /// At all times, either all delivery lines are associated to an agreement line, or no delivery lines
    /// are associated to an agreement line.
    /// </remarks>
    public void updateLinkSalesDeliverySchedule()
    {
        AgreementLineReleasedLine agreementLineReleasedLine;
        SalesDeliverySchedule     salesDeliverySchedule;
        SalesLine                 salesLine;

        AgreementLineRecId        agreementLineRecId = this.AgreementLine;
        TradeInventTransId        inventTransId = this.SalesLineInventTransId;

        if (agreementLineRecId && inventTransId)
        {
            inventTransId = this.SalesLineInventTransId;

            agreementLineReleasedLine.skipDataMethods(true);
            agreementLineReleasedLine.skipEvents(true);

            update_recordset agreementLineReleasedLine
            setting AgreementLine = agreementLineRecId,
                    IsModified            = NoYes::Yes
            where agreementLineReleasedLine.ReferenceRelationType == tablenum(SalesLine)
               && agreementLineReleasedLine.SalesLineDataAreaId   == appl.company().dataArea(tablenum(SalesLine))
               && !agreementLineReleasedLine.IsDeleted
            join salesDeliverySchedule
                where salesDeliverySchedule.DeliveryLine == agreementLineReleasedLine.SalesLineInventTransId
                   && salesDeliverySchedule.OrderLine    == inventTransId;

            salesLine.skipDataMethods(true); //only update MatchingAgreementLine field
            salesLine.skipEvents(true);

            update_recordset salesLine
            setting MatchingAgreementLine = agreementLineRecId
            where salesLine.InventTransId == inventTransId;

            update_recordset salesLine
            setting MatchingAgreementLine = agreementLineRecId
                join salesDeliverySchedule
                    where salesDeliverySchedule.DeliveryLine == salesLine.InventTransId
                       && salesDeliverySchedule.OrderLine    == inventTransId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>AgreementLineReleasedLine</c> table by using the <c>PurchLine</c> record.
    /// </summary>
    /// <param name="_purchLine">
    ///    The <c>PurchLine</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>AgreementLineReleasedLine</c> table; otherwise, an empty record.
    /// </returns>
    public static AgreementLineReleasedLine findByPurchLine(PurchLine _purchLine,
                                                            boolean   _forUpdate = false)
    {
        AgreementLineReleasedLine agreementLineReleasedLine;

        if (_purchLine.RecId)
        {
            if (_forUpdate)
            {
                agreementLineReleasedLine.selectForUpdate(_forUpdate);
            }

            select firstonly agreementLineReleasedLine
            where agreementLineReleasedLine.PurchLineInventTransId == _purchLine.InventTransId
               && agreementLineReleasedLine.PurchLineDataAreaId    == _purchLine.DataAreaId
               && agreementLineReleasedLine.ReferenceRelationType  == _purchLine.TableId;
        }

        return agreementLineReleasedLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>AgreementLineReleasedLine</c> table by using the <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_salesLine">
    ///    The <c>SalesLine</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>AgreementLineReleasedLine</c> table; otherwise, an empty record.
    /// </returns>
    public static AgreementLineReleasedLine findBySalesLine(SalesLine _salesLine,
                                                            boolean   _forUpdate = false)
    {
        AgreementLineReleasedLine agreementLineReleasedLine;

        if (_salesLine.InventTransId)
        {
            if (_forUpdate)
            {
                agreementLineReleasedLine.selectForUpdate(_forUpdate);
            }

            select firstonly agreementLineReleasedLine
            where agreementLineReleasedLine.SalesLineInventTransId == _salesLine.InventTransId
               && agreementLineReleasedLine.SalesLineDataAreaId    == _salesLine.DataAreaId
               && agreementLineReleasedLine.ReferenceRelationType  == _salesLine.TableId;
        }

        return agreementLineReleasedLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlinkPurchDeliverySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disassociates the complete delivery schedule from an agreement line.
    /// </summary>
    /// <param name="_orderLine">
    /// The inventory transaction ID of the order line to be disassociated.
    /// </param>
    /// <remarks>
    /// At all times, either all delivery lines are associated to an agreement line, or no delivery lines
    /// are associated to an agreement line.
    /// </remarks>
    static void unlinkPurchDeliverySchedule(TradeInventTransId _orderLine)
    {
        PurchLine                 purchLine;
        AgreementLineReleasedLine agreementLineReleasedLine;
        PurchDeliverySchedule     purchDeliverySchedule;

        ttsbegin;

       // delete delivery line associations
        delete_from agreementLineReleasedLine
            where agreementLineReleasedLine.PurchLineDataAreaId    == appl.company().dataArea(tablenum(PurchLine))
               && agreementLineReleasedLine.ReferenceRelationType  == tablenum(PurchLine)
               && !agreementLineReleasedLine.IsDeleted
            exists join purchLine
                where (purchLine.InventTransId == agreementLineReleasedLine.PurchLineInventTransId
                   && !purchLine.IsDeleted
                   && agreementLineReleasedLine.ReferenceRelationType == tablenum(PurchLine))
                join purchDeliverySchedule
                    where purchDeliverySchedule.DeliveryLine == purchLine.InventTransId
                       && purchDeliverySchedule.OrderLine == _orderLine;

        // delete order line association
        delete_from agreementLineReleasedLine
                where agreementLineReleasedLine.PurchLineInventTransId == _orderLine
                   && agreementLineReleasedLine.PurchLineDataAreaId    == appl.company().dataArea(tablenum(PurchLine))
                   && agreementLineReleasedLine.ReferenceRelationType  == tablenum(PurchLine)
                   && !agreementLineReleasedLine.IsDeleted;

        purchLine.skipDataMethods(true); //only update MatchingAgreementLine and IsModified fields
        purchLine.skipEvents(true);

        update_recordset purchLine
        setting MatchingAgreementLine = 0,
                IsModified            = NoYes::Yes
        where purchLine.InventTransId == _orderLine
          && !purchLine.IsDeleted;

        update_recordset purchLine
        setting MatchingAgreementLine = 0,
                IsModified            = NoYes::Yes
            join purchDeliverySchedule
                where purchDeliverySchedule.DeliveryLine == purchLine.InventTransId
                   && purchDeliverySchedule.OrderLine       == _orderLine
                   && !purchDeliverySchedule.IsDeleted;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlinkSalesDeliverySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disassociates the complete delivery schedule from an agreement line.
    /// </summary>
    /// <param name="_orderLine">
    /// The inventory transaction ID of the order line to be disassociated.
    /// </param>
    /// <remarks>
    /// At all times, either all delivery lines are associated to an agreement line, or no delivery lines
    /// are associated to an agreement line.
    /// </remarks>
    static void unlinkSalesDeliverySchedule(TradeInventTransId _orderLine)
    {
        SalesLine                 salesLine;
        AgreementLineReleasedLine agreementLineReleasedLine;
        SalesDeliverySchedule     salesDeliverySchedule;

        ttsbegin;

        // delete delivery line associations
        delete_from agreementLineReleasedLine
            where agreementLineReleasedLine.ReferenceRelationType  == tablenum(SalesLine)
               && agreementLineReleasedLine.SalesLineDataAreaId    == appl.company().dataArea(tablenum(SalesLine))
               && !agreementLineReleasedLine.IsDeleted
            exists join salesLine
                where salesLine.InventTransId == agreementLineReleasedLine.SalesLineInventTransId
                join salesDeliverySchedule
                    where salesDeliverySchedule.DeliveryLine == salesLine.InventTransId
                       && salesDeliverySchedule.OrderLine    == _orderLine;

        // delete order line association
        delete_from agreementLineReleasedLine
                where agreementLineReleasedLine.SalesLineInventTransId == _orderLine
                   && agreementLineReleasedLine.SalesLineDataAreaId    == appl.company().dataArea(tablenum(SalesLine))
                   && agreementLineReleasedLine.ReferenceRelationType  == tablenum(SalesLine)
                   && !agreementLineReleasedLine.IsDeleted;

        salesLine.skipDataMethods(true); //only update MatchingAgreementLine field
        salesLine.skipEvents(true);

        update_recordset salesLine
        setting MatchingAgreementLine = 0
        where salesLine.InventTransId == _orderLine;

        update_recordset salesLine
        setting MatchingAgreementLine = 0
            join salesDeliverySchedule
                where salesDeliverySchedule.DeliveryLine == salesLine.InventTransId
                   && salesDeliverySchedule.OrderLine    == _orderLine;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeBlanketOrder</ConfigurationKey>
	<DeveloperDocumentation>@SYS325281</DeveloperDocumentation>
	<Label>@SYS190587</Label>
	<TableGroup>Worksheet</TableGroup>
	<TitleField1>AgreementLine</TitleField1>
	<TitleField2>ReferenceRelationType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>AllRefsUniqueIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReferenceRelationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchLineInventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchLineDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesLineInventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesLineDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceItem</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Refs</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchLineInventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchLineDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesLineInventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesLineDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AgreementLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementLineRecId</ExtendedDataType>
			<Label>@SYS184156</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDeleted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VersioningIsDeleted</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsModified</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VersioningIsModified</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjInvoiceItem</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchLineDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchLineInventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ReferenceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesLineDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesLineInventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AgreementLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AgreementLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AllRefsUniqueIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendInvoiceTrans</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchLineInventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchLineDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesLineInventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesLineDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustInvoiceTrans</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjInvoiceItem</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesLineInventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesLineDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustInvoiceTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustInvoiceTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjInvoiceItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjInvoiceItem</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchLineInventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchLineDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>AgreementLineReleasedLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AgreementLine</MapField>
					<MapFieldTo>AgreementLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchLineDataAreaId</MapField>
					<MapFieldTo>PurchLineDataAreaId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchLineInventTransId</MapField>
					<MapFieldTo>PurchLineInventTransId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AgreementLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AgreementLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>AgreementLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AgreementLine_AgreementLineReleasedLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementLine</Name>
					<Field>AgreementLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTrans_AgreementLineReleasedLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceTrans</Name>
					<Field>CustInvoiceTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjInvoiceItem</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ProjInvoiceItem</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjInvoiceItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceItem_AgreementLineReleasedLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjInvoiceItem</Name>
					<Field>ProjInvoiceItem</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchLine_AgreementLineReleasedLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchLineDataAreaId</Name>
					<Field>PurchLineDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchLineInventTransId</Name>
					<Field>PurchLineInventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesLine_AgreementLineReleasedLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesLineDataAreaId</Name>
					<Field>SalesLineDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesLineInventTransId</Name>
					<Field>SalesLineInventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceTrans_AgreementLineReleasedLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceTrans</Name>
					<Field>VendInvoiceTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>