<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSConsolidatedWorkLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSConsolidatedWorkLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findLastConsolidatedWorkLineByOriginWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the last work line for the consolidated work that the origin work line was directly or indirectly consolidated to.
    /// </summary>
    /// <param name = "_workLineOrigin">
    /// A work line that was an origin of a consolidated work.
    /// </param>
    /// <returns>
    /// The last work line from the consolidated work that the origin work line was consolidated to. If no line is found null is returned.
    /// </returns>
    public static WHSWorkLine findLastConsolidatedWorkLineByOriginWorkLine(WHSWorkLine _workLineOrigin)
    {
        WHSWorkLine lastConsolidatedWorkLine;

        //just return empty buffer
        if (!_workLineOrigin.recId)
        {
            return lastConsolidatedWorkLine;
        }

        RefRecId originWorkLineRecId = _workLineOrigin.recId;

        int maxIterationCounter = WHSConsolidatedWorkLine::maxConsolidationHierarchyDepth();

        int iterationCounter;
        //the workline can be consolidated multiple times e.g. workline1 -> workLine2 -> workLine 3
        do
        {
            iterationCounter++;
            WHSWorkLine workLineConsolidated;

            // determine if the workline is an origin by finding the work line it was consolidated into
            workLineConsolidated = WHSConsolidatedWorkLine::findConsolidatedWorkLineByOriginWorkLineId(originWorkLineRecId);

            //the line was consolidated so continue by determining if the consolidated line was an origin
            if (workLineConsolidated.RecId)
            {
                WHSWorkLine originworkLineWithinConsolidatedWork = WHSConsolidatedWorkLine::findOriginWorkLineWithinWork(workLineConsolidated);

                //no further origins so we found the last one and return that
                if (!originworkLineWithinConsolidatedWork.RecId)
                {
                    return WHSWorkLine::findByRecId(workLineConsolidated.RecId);
                }

                //use this one to do another search to see if we were consolidated further
                originWorkLineRecId = originworkLineWithinConsolidatedWork.RecId;
            }
            else
            {
                break;
            }
        }
        while (originWorkLineRecId && iterationCounter <= MaxIterationCounter);

        if (iterationCounter >= MaxIterationCounter)
        {
            throw error(strFmt("@WAX:MaximumNumberOfIterationsInMethodReached", MaxIterationCounter, funcName()));
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginWorkLineWithinWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a work Line within a work that was an origin to a consolidated work.
    /// </summary>
    /// <param name = "_workLine">
    /// A work line for which the origin line should be found.
    /// </param>
    /// <returns>
    /// A work line that was origin to a consolidated work. If no line is found null is returned.
    /// </returns>
    public static WHSWorkLine findOriginWorkLineWithinWork(WHSWorkLine _workLine)
    {
        WHSWorkLine nextWorkLine = _workLine;

        //go through the worklines within the work to find the first one that is consolidated.
        const int MaxIterationCounter = 42; //allow for a large, but not un-realistic number of pick/put pairs within the work
        int iterationCounter;
        do
        {
            iterationCounter++;
            if (nextWorkLine.isOriginWorkLine())
            {
                return nextWorkLine;
            }

            nextWorkLine = WHSWorkLine::getNextOppositeWorkLineFromWorkLine(nextWorkLine);
        }
        while (nextWorkLine && iterationCounter <= MaxIterationCounter);

        if (iterationCounter >= MaxIterationCounter)
        {
            throw error(strFmt("@WAX:MaximumNumberOfIterationsInMethodReached", MaxIterationCounter, funcName()));
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromWorkLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new <c>WHSConsolidatedWorkLine</c> record based on the work lines.
    /// </summary>
    /// <param name="_originWorkLine">
    /// The origin work line.
    /// </param>
    /// <param name="_consolidateWorkLine">
    /// The work line that the origin work line is consolidated with.
    /// </param>
    /// <returns>
    /// A new <c>WHSConsolidatedWorkLine</c> record.
    /// </returns>
    public static WHSConsolidatedWorkLine insertFromWorkLines(WHSWorkLine _originWorkLine, WHSWorkLine _consolidateWorkLine)
    {
        WHSConsolidatedWorkLine consolidatedWorkLine;

        consolidatedWorkLine.OriginWorkLine = _originWorkLine.RecId;
        consolidatedWorkLine.ConsolidatedWorkLine = _consolidateWorkLine.RecId;
        consolidatedWorkLine.insert();

        return consolidatedWorkLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findConsolidatedWorkLineByOriginWorkLineId</Name>
				<Source><![CDATA[
    private static WHSWorkLine findConsolidatedWorkLineByOriginWorkLineId(RefRecId _originWorkLineRecId)
    {
        WHSWorkLine             workLine;
        WHSConsolidatedWorkLine consolidatedWorkLine;

        select firstonly workLine
        exists join consolidatedWorkLine
            where consolidatedWorkLine.OriginWorkLine == _originWorkLineRecId
                &&  consolidatedWorkLine.ConsolidatedWorkLine == workLine.RecId;

        return workLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // This call needs to happen before record is inserted
        WHSSessionCache::consolidatedWorkLinesExist().consolidatedWorkLineInserted();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxConsolidationHierarchyDepth</Name>
				<Source><![CDATA[
    internal static int maxConsolidationHierarchyDepth()
    {
        return 42;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSAndTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WHSConsolidatedWorkLineDevDoc</DeveloperDocumentation>
	<Label>@WAX:WHSConsolidatedWorkLineTable</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ConsolidatedWorkLine</TitleField1>
	<TitleField2>OriginWorkLine</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ConsolidatedOriginIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConsolidatedWorkLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginWorkLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ConsolidatedWorkLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkLineRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OriginWorkLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkLineRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ConsolidatedOriginIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ConsolidatedWorkLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OriginWorkLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OriginWorkLineIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>OriginWorkLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ConsolidatedWorkLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConsolidatedWorkLine</Name>
					<Field>ConsolidatedWorkLine</Field>
					<RelatedField>recId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OriginWorkLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSWorkLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OriginWorkLine</Name>
					<Field>OriginWorkLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>