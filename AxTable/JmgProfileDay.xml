<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgProfileDay</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgProfileDay extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeDayProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes profile ID on the <c>JmgProfileDay</c> to the specified value.
    /// </summary>
    /// <param name="toProfile">
    /// The new profile ID.
    /// </param>
    /// <remarks>
    /// All related <c>JmgProfileSpec</c> records are also updated.
    /// </remarks>
    public void changeDayProfile(JmgProfileId toProfile)
    {
        JmgProfileSpec jmgProfileSpec;

        while select forupdate jmgProfileSpec
            where jmgProfileSpec.Profile == this.Profile &&
                  jmgProfileSpec.DayId   == this.DayId
        {
            jmgProfileSpec.changeSpecProfile(toProfile);
        }

        this.Profile = toProfile;
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the <c>JmgProfileDay</c> record and associated <c>JmgProfileSpec</c> records to the
    /// specified profile and day ID.
    /// </summary>
    /// <param name="toProfile">
    /// The profile ID to copy to
    /// </param>
    /// <param name="toDayId">
    /// the Day ID to copy to
    /// </param>
    /// <param name="doOverwrite">
    /// A Boolean value that specifies whether the existing records must be overridden.
    /// </param>
    /// <returns>
    /// true if values where copied successfully; otherwise, false.
    /// </returns>
    public boolean copyDay(JmgProfileId toProfile, JmgDayId toDayId, NoYesId doOverwrite)
    {
        JmgProfileDay      copyProfDay;
        JmgProfileSpec     copyProfSpec;

        if (doOverwrite==NoYes::No &&
            ((select firstonly RecId from jmgProfileSpec
                    where jmgProfileSpec.Profile == toProfile &&
                          jmgProfileSpec.DayId   == toDayId).RecId))
        {
            return false;
        }

        ttsbegin;
        
        copyProfDay = JmgProfileDay::find(toProfile, toDayId, true);
        if (copyProfDay.RecId != 0)
        {
            copyProfDay.doDelete();
        }

        select copyProfDay
            where copyProfDay.RecId == this.RecId;

        copyProfDay.Profile = toProfile;
        copyProfDay.DayId   = toDayId;
        copyProfDay.insert();

        while select forupdate copyProfSpec
            where copyProfSpec.Profile == toProfile &&
                  copyProfSpec.DayId   == toDayId
        {
            copyProfSpec.doDelete();
        }

        while select copyProfSpec
            where copyProfSpec.Profile == this.Profile &&
                  copyProfSpec.DayId   == this.DayId
        {
            copyProfSpec.Profile = toProfile;
            copyProfSpec.DayId   = toDayId;
            copyProfSpec.insert();
        }
        ttscommit;

        return true ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Occurs when the value of a field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the modified field.
    /// </param>
    /// <remarks>
    /// When the <c>ProfileStartCodeBlankPrev</c> field is changed, the day code is recalculated for all
    /// associated <c>JmgProfileSpec</c> records.
    /// </remarks>
    public void modifiedField(fieldId _fieldId)
    {
        if (_fieldId == fieldNum(JmgProfileDay, ProfileStartCodeBlankPrev))
            this.setDayCode();

        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>normFlexTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the value of the <c>NormFlexSec</c> field on the <c>JmgProfileDay</c> record.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the field value must be updated.
    /// </param>
    /// <param name="value">
    /// The new value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>NormFlexSec</c> field formatted as a string.
    /// </returns>
    public edit JmgLabelNormFlexTime normFlexTime(boolean _set, JmgTimeString value)
    {
        if (_set)
        {
            this.NormFlexSec = JmgProfileSeconds::unFormattedSeconds(value,JmgSecondPresentationEnum::Clocktime);
        }

        return JmgProfileSeconds::formattedSeconds(this.NormFlexSec,JmgSecondPresentationEnum::Clocktime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>normTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the value of the <c>NormSec</c> field on the <c>JmgProfileDay</c> record.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the field value must be updated.
    /// </param>
    /// <param name="value">
    /// The new value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>NormSec</c> field formatted as a string.
    /// </returns>
    public edit JmgLabelNormTime normTime(boolean _set, JmgTimeString value)
    {
        if (_set)
        {
            this.NormSec = JmgProfileSeconds::unFormattedSeconds(value,JmgSecondPresentationEnum::Clocktime);
        }

        return JmgProfileSeconds::formattedSeconds(this.NormSec,JmgSecondPresentationEnum::Clocktime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDayCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the day code on <c>JmgProfileSpec</c> records, which is associated to the <c>JmgProfileDay</c> record.
    /// </summary>
    public void setDayCode()
    {
        JmgProfileSpec  jmgProfileSpec;
        FromTime        dayTimeChk;
        JmgRelDayNo     dayCode;

        dayTimeChk = maxInt();
        dayCode    = this.ProfileStartCodeBlankPrev == JmgProfileStartCodeBlankPrev::Prev ? -1 : 0;

        ttsbegin;

        while select forupdate LineNum, StartTime, StartDay, EndTime, EndDay from jmgProfileSpec
            order by LineNum
            where jmgProfileSpec.Profile == this.Profile &&
                  jmgProfileSpec.DayId   == this.DayId
        {
            if (dayTimeChk <maxInt())
            {
                if (jmgProfileSpec.StartTime < dayTimeChk)
                    dayCode++;
            }

            jmgProfileSpec.StartDay = dayCode;
            if (jmgProfileSpec.EndTime < jmgProfileSpec.StartTime)
                dayCode++;

            jmgProfileSpec.EndDay = dayCode;
            jmgProfileSpec.doUpdate();
            dayTimeChk  = jmgProfileSpec.EndTime;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardTimeDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the calculated standard time for the <c>JmgProfileDay</c> record.
    /// </summary>
    /// <returns>
    /// The calculated standard time for the <c>JmgProfileDay</c> record formatted as a string.
    /// </returns>
    public display JmgLabelProfileTimeDay standardTimeDay()
    {
        return JmgProfileSeconds::formattedSeconds(this.standardTimeSecondsDay(), JmgSecondPresentationEnum::Centitime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardTimeSecondsDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the calculated standard time seconds for the <c>JmgProfileDay</c> record.
    /// </summary>
    /// <returns>
    /// The calculated standard time seconds for the <c>JmgProfileDay</c> record.
    /// </returns>
    public JmgSeconds standardTimeSecondsDay()
    {
        JmgProfiles jmgProfiles = new JmgProfiles(false);
        jmgProfiles.getProfile(this.Profile, this.DayId);

        JmgStampJournalTable stampJournalTable;
        jmgProfiles.initStampJournalTable(stampJournalTable);

        return stampJournalTable.ProfileSeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>JmgProfileDay</c> record from the database.
    /// </summary>
    /// <param name="profileId">
    /// The profile ID to search for.
    /// </param>
    /// <param name="dayId">
    /// The day ID to search for.
    /// </param>
    /// <param name="_forUpdate">
    /// true if the returned record must be selected for update; otherwise, false.
    /// </param>
    /// <returns>
    /// A <c>JmgProfileDay</c> record from the database.
    /// </returns>
    static JmgProfileDay find(JmgProfileId profileId, JmgDayId dayId, boolean  _forUpdate = false)
    {
        JmgProfileDay jmgProfileDay;

        if (profileId)
        {
            jmgProfileDay.selectForUpdate(_forUpdate);

            select firstonly jmgProfileDay
                where jmgProfileDay.Profile == profileId &&
                      jmgProfileDay.DayId   == dayId;
        }

        return jmgProfileDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Jmg</ConfigurationKey>
	<DeveloperDocumentation>@SYS317294</DeveloperDocumentation>
	<FormRef>JmgProfileTable</FormRef>
	<Label>@SYS38521</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>DayId</TitleField1>
	<TitleField2>Profile</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>ProfileDayIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>ProfileDayIdx</PrimaryIndex>
	<ReplacementKey>ProfileDayIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JmgProfileSpec</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JmgProfileSpec</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Profile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DayId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Profile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DayId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DayId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Profile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProfileStaggering</Name>
			<Label>@SYS38918</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PushProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileStartCodeBlankPrev</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StandardTime</Name>
			<Label>@SYS38432</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>normTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>normFlexTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DayId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDayId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>JmgDayIdEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NormFlexSec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NormSec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Profile</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgProfileId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProfileStartCodeBlankPrev</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>JmgProfileStartCodeBlankPrev</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PushProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPushProfile</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>StartTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgTime</ExtendedDataType>
			<Label>@SYS38562</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProfileDayIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Profile</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DayId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>JmgProfileSpec</Name>
			<RelatedTable>JmgProfileSpec</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Profile</Name>
					<Field>Profile</Field>
					<RelatedField>Profile</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DayId</Name>
					<Field>DayId</Field>
					<RelatedField>DayId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgProfileTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgProfileTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Profile</Name>
					<Field>Profile</Field>
					<RelatedField>Profile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>