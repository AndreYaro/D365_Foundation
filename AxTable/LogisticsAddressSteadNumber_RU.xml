<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsAddressSteadNumber_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LogisticsAddressSteadNumber_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addrTypeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name of address element type
    /// </summary>
    /// <returns>
    /// Name of address element type for current address element
    /// </returns>
    // <GEERU>
    [SysClientCacheDataMethodAttribute(true)]
    display public AddrTypeName_RU addrTypeName()
    {
        return LogisticsAddressProperties_RU::find(this.Properties).addrTypeName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>stateName</Name>
				<Source><![CDATA[
    // </GEERU>
    
    /// <summary>
    /// Finds state for current house group
    /// </summary>
    /// <returns>
    /// State record, found by Street, District, City or by FK
    /// </returns>
    // <GEERU>
    [SysClientCacheDataMethodAttribute(true)]
    display public LogisticsAddressStateId stateName()
    {
        LogisticsAddressStreet_RU street;
        LogisticsAddressDistrict  district;
        LogisticsAddressCity     city;
        LogisticsAddressStateId   ret;
        
        
        if (this.Street)
        {
            street   = LogisticsAddressStreet_RU::findRecID(this.Street);
            ret      = street.state().StateId;
        }
        
        if (this.District && ! ret)
        {
            district = LogisticsAddressDistrict::find_RU(this.District);
            ret      = district.state_RU().StateId;
        }
        
        if (this.City && ! ret)
        {
            city     = LogisticsAddressCity::find_RU(this.City);
            ret      = LogisticsAddressState::find(city.CountryRegionId, city.StateId).StateId;
        }
        
        return ret ? ret : LogisticsAddressState::find(this.CountryRegion, this.State).StateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cityName</Name>
				<Source><![CDATA[
    // </GEERU>
    
    /// <summary>
    /// Returns name of related city
    /// </summary>
    /// <returns>
    /// Name of related city
    /// </returns>
    // <GEERU>
    [SysClientCacheDataMethodAttribute(true)]
    display public LogisticsAddressCityName cityName()
    {
        return LogisticsAddressCity::getCityName(this.City);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countyName</Name>
				<Source><![CDATA[
    // </GEERU>
    
    /// <summary>
    /// Returns ID of related county
    /// </summary>
    /// <returns>
    /// ID of related county
    /// </returns>
    // <GEERU>
    [SysClientCacheDataMethodAttribute(true)]
    display public LogisticsAddressCountyId countyName()
    {
        LogisticsAddressStreet_RU street;
        LogisticsAddressDistrict  district;
        LogisticsAddressCity     city;
        LogisticsAddressCountyId  ret;
        
        if (this.Street)
        {
            street   = LogisticsAddressStreet_RU::findRecID(this.Street);
            ret      = street.county().CountyId;
        }
        
        if (this.District && ! ret)
        {
            district = LogisticsAddressDistrict::find_RU(this.District);
            ret      = district.county_RU().CountyId;
        }
        
        if (this.City && ! ret)
        {
            city     = LogisticsAddressCity::find_RU(this.City);
            ret      = LogisticsAddressCounty::find(city.CountryRegionId, city.StateId, city.CountyId).CountyId;
        }
        
        return ret ? ret : LogisticsAddressCounty::find(this.CountryRegion, this.State, this.County).CountyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>districtName</Name>
				<Source><![CDATA[
    // </GEERU>
    
    /// <summary>
    /// Returns name of related district
    /// </summary>
    /// <returns>
    /// Name of related district
    /// </returns>
    // <GEERU>
    [SysClientCacheDataMethodAttribute(true)]
    display public LogisticsAddressDistrictName districtName()
    {
        return LogisticsAddressDistrict::getDistrictName(this.District);
    }

]]></Source>
			</Method>
			<Method>
				<Name>streetName</Name>
				<Source><![CDATA[
    // </GEERU>

    /// <summary>
    /// Returns parent street's name
    /// </summary>
    /// <returns>
    /// Parent street's name
    /// </returns>
    // <GEERU>
    [SysClientCacheDataMethodAttribute(true)]
    display public LogisticsAddressStreetName_RU streetName()
    {
        return LogisticsAddressStreet_RU::getStreetName(this.Street);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullName</Name>
				<Source><![CDATA[
    // </GEERU>

    display public Name fullName()
    {
        return  strRTrim(strRTrim(this.addrTypeName() + ' ' + this.SteadDescription));
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertiesZipCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays or sets ZIP code for address element
    /// </summary>
    /// <param name="_set">
    /// true when editing; false when viewing.
    /// </param>
    /// <param name="_zipCodeID">
    /// New value
    /// </param>
    /// <returns>
    /// Current (edited if _set is true) value
    /// </returns>
    // <GEERU>
    [SysClientCacheDataMethodAttribute(true)]
    edit LogisticsAddressZipCodeId propertiesZipCode(
            boolean                   _set,
            LogisticsAddressZipCodeId _zipCodeID)
    {
        LogisticsAddressZipCodeId ret;
        LogisticsAddressZipCode   logisticsAddressZipCode;
        
        if (_set)
        {
            logisticsAddressZipCode = LogisticsAddressZipCode::findZipCodeCountryRegion(_zipCodeID, this.CountryRegion);
            ret = logisticsAddressZipCode.ZipCode;
            LogisticsAddressProperties_RU::editZipCode(true, this, logisticsAddressZipCode.RecId);
        }
        else
        {
            ret = LogisticsAddressZipCode::findRecId(LogisticsAddressProperties_RU::editZipCode(false, this, 0)).ZipCode;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertiesOKATO_RU</Name>
				<Source><![CDATA[
    // </GEERU>
    /// <summary>
    /// Displays or sets OKATO for address element
    /// </summary>
    /// <param name="_set">
    /// true when editing; false when viewing.
    /// </param>
    /// <param name="_okato">
    /// New value
    /// </param>
    /// <returns>
    /// Current (edited if _set is true) value
    /// </returns>
    // <GEERU>
    [SysClientCacheDataMethodAttribute(true)]
    edit OKATO_RU propertiesOKATO_RU(
            boolean  _set,
            OKATO_RU _okato)
    {
        return LogisticsAddressProperties_RU::editOKATO(_set, this, _okato);
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertiesIMNSDistrict_RU</Name>
				<Source><![CDATA[
    // </GEERU>
    /// <summary>
    /// Displays or sets IMNS district for address element
    /// </summary>
    /// <param name="_set">
    /// true when editing; false when viewing.
    /// </param>
    /// <param name="_imnsDistrict">
    /// New value
    /// </param>
    /// <returns>
    /// Current (edited if _set is true) value
    /// </returns>
    // <GEERU>
    [SysClientCacheDataMethodAttribute(true)]
    edit IMNSDistrict_RU propertiesIMNSDistrict_RU(
            boolean         _set,
            IMNSDistrict_RU _imnsDistrict)
    {
        return LogisticsAddressProperties_RU::editIMNSDistrict(_set, this, _imnsDistrict);
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertiesGniCode</Name>
				<Source><![CDATA[
    // </GEERU>
      
    /// <summary>
    /// Displays or sets GNI code for address element
    /// </summary>
    /// <param name="_set">
    /// true when editing; false when viewing.
    /// </param>
    /// <param name="_gniCode">
    /// New value
    /// </param>
    /// <returns>
    /// Current (edited if _set is true) value
    /// </returns>
    // <GEERU>
    [SysClientCacheDataMethodAttribute(true)]
    edit GniCode_RU propertiesGniCode(
            boolean    _set,
            GniCode_RU _gniCode)
    {
        return LogisticsAddressProperties_RU::editGniCode(_set, this, _gniCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertiesAddrTypeCode</Name>
				<Source><![CDATA[
    // </GEERU>
    
    /// <summary>
    /// Displays or sets code for address element type
    /// </summary>
    /// <param name="_set">
    /// true when editing; false when viewing.
    /// </param>
    /// <param name="_addrTypeCode">
    /// New code for address element type
    /// </param>
    /// <returns>
    /// Code for address element type
    /// </returns>
    // <GEERU>
    [SysClientCacheDataMethodAttribute(true)]
    edit AddrTypeCode_RU propertiesAddrTypeCode(
            boolean          _set,
            AddrTypeCode_RU  _addrTypeCode)
    {
        AddrTypeCode_RU     ret;
        AddressTypeTable_RU addressTypeTable;
        
        if (_set)
        {
            addressTypeTable = AddressTypeTable_RU::findByCode(_addrTypeCode);
            ret              = addressTypeTable.AddrTypeCode;
            LogisticsAddressProperties_RU::editAddrTypeCode(true, this, addressTypeTable.RecId);
        }
        else
        {
            ret = AddressTypeTable_RU::find(LogisticsAddressProperties_RU::editAddrTypeCode(false, this, 0)).AddrTypeCode;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    // </GEERU>
    
    /// <summary>
    /// Validates if House group exists by NK
    /// </summary>
    /// <param name="_countryRegionId">
    /// Parent country/region
    /// </param>
    /// <param name="_stateId">
    /// Parent state
    /// </param>
    /// <param name="_countyId">
    /// Parent county
    /// </param>
    /// <param name="_cityId">
    /// Parent city
    /// </param>
    /// <param name="_districtId">
    /// Parent district
    /// </param>
    /// <param name="_streetId">
    /// Parent street
    /// </param>
    /// <returns>
    /// true if House group exists
    /// </returns>
    public static boolean exist(
            LogisticsAddressCountryRegionId _countryRegionId,
            LogisticsAddressStateId         _stateId,
            LogisticsAddressCountyId        _countyId,
            LogisticsAddressCityRecId       _cityId,
            LogisticsAddressDistrictRecId   _districtId,
            LogisticsAddressStreetID_RU     _streetId)
    {
        return (select firstonly RecId from logisticsAddressSteadNumber_RU
                        where logisticsAddressSteadNumber_RU.CountryRegion == _countryRegionId &&
                              logisticsAddressSteadNumber_RU.State         == _stateId         &&
                              logisticsAddressSteadNumber_RU.County        == _countyId        &&
                              logisticsAddressSteadNumber_RU.City          == _cityId          &&
                              logisticsAddressSteadNumber_RU.District      == _districtId      &&
                              logisticsAddressSteadNumber_RU.Street        == _streetId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds House group by NK
    /// </summary>
    /// <param name="_steadNumber">
    /// Number of the land plot
    /// </param>
    /// <param name="_countryRegionId">
    /// Parent country/region
    /// </param>
    /// <param name="_stateId">
    /// Parent state
    /// </param>
    /// <param name="_countyId">
    /// Parent county
    /// </param>
    /// <param name="_cityId">
    /// Parent city
    /// </param>
    /// <param name="_districtId">
    /// Parent district
    /// </param>
    /// <param name="_streetId">
    /// Parent street
    /// </param>
    /// <param name="_forUpdate">
    /// Pass true if the record to be selected for update
    /// </param>
    /// <returns>
    /// House group record found
    /// </returns>
    public static LogisticsAddressSteadNumber_RU find(
            LogisticsAddressSteadName_RU    _steadNumber,
            LogisticsAddressCountryRegionId _countryRegionId,
            LogisticsAddressStateId         _stateId,
            LogisticsAddressCountyId        _countyId,
            LogisticsAddressCityRecId       _cityId,
            LogisticsAddressDistrictRecId   _districtId,
            LogisticsAddressStreetID_RU     _streetId,
            boolean                         _forUpdate = false)
    {
        LogisticsAddressSteadNumber_RU steadNumber;
        
        steadNumber.selectForUpdate(_forUpdate);
        
        select firstonly steadNumber
                where steadNumber.CountryRegion == _countryRegionId &&
                      steadNumber.State         == _stateId         &&
                      steadNumber.County        == _countyId        &&
                      steadNumber.City          == _cityId          &&
                      steadNumber.District      == _districtId      &&
                      steadNumber.Street        == _streetId        &&
                      steadNumber.Name          == _steadNumber;
        
        return steadNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds House group by PK
    /// </summary>
    /// <param name="_recId">
    /// RecId of House group record
    /// </param>
    /// <param name="_forUpdate">
    /// Pass true if the record to be selected for update
    /// </param>
    /// <returns>
    /// House group record found
    /// </returns>
    public static LogisticsAddressSteadNumber_RU findRecId(
            RecId   _recId,
            boolean _forUpdate = false)
    {
        LogisticsAddressSteadNumber_RU stead;
        
        if (_recId)
        {
            stead.selectForUpdate(_forUpdate);
        
            select firstonly stead
                    where stead.RecId  == _recId;
        }
        
        return stead;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findZip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds House group by ZIP code
    /// </summary>
    /// <param name="_zipCode">
    /// ZIP code reference
    /// </param>
    /// <returns>
    /// House group record found
    /// </returns>
    /// <remarks>
    /// Note: multiple matching houses may exist; returns null, if there are multiple entries.
    /// </remarks>
    public static LogisticsAddressSteadNumber_RU findZip(
            LogisticsAddressZipCodeRecId _zipCode)
    {
        LogisticsAddressSteadNumber_RU steadNumber;
        LogisticsAddressSteadNumber_RU empty = null;
        LogisticsAddressProperties_RU  properties;
        LogisticsAddressSteadId_RU     steadRecId;
        
        if (! _zipCode)
                return null;
        
        select RecId from steadNumber
            exists join properties
                where properties.RecId   == steadNumber.Properties
                   && properties.ZipCode == _zipCode;
        
        if (steadNumber.RecId)
        {
            steadRecId = steadNumber.RecId;
        
            next steadNumber;
            if (steadNumber.RecId)
                    return empty;
        }
        
        return LogisticsAddressSteadNumber_RU::findRecId(steadRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSteadName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns house group name by RecId
    /// </summary>
    /// <param name="_recId">
    /// RecId of House group record
    /// </param>
    /// <returns>
    /// House group name
    /// </returns>
    public static LogisticsAddressName getSteadName(RecId _recId)
    {
        LogisticsAddressSteadNumber_RU stead;
        
        if (_recId)
        {
            select firstonly SteadDescription from stead
                    where stead.RecId == _recId;
        }
        
        return stead.SteadDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSteadId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens lookup form for House groups
    /// </summary>
    /// <param name="_ctrlHouse">
    /// House group control
    /// </param>
    /// <param name="_countryRegionId">
    /// Parent country/region
    /// </param>
    /// <param name="_stateId">
    /// Parent state
    /// </param>
    /// <param name="_countyId">
    /// Parent county
    /// </param>
    /// <param name="_cityId">
    /// Parent city
    /// </param>
    /// <param name="_districtId">
    /// Parent district
    /// </param>
    /// <param name="_streetId">
    /// Parent street
    /// </param>
    /// <returns>
    /// House group record selected by user
    /// </returns>
    public client static LogisticsAddressSteadNumber_RU lookupSteadId_RU(
            FormReferenceControl            _ctrlHouse,
            LogisticsAddressCountryRegionId _countryRegionId,
            LogisticsAddressStateId         _stateId,
            LogisticsAddressCountyId        _countyId,
            LogisticsAddressCityRecId       _cityId,
            LogisticsAddressDistrictRecId   _districtId,
            LogisticsAddressStreetID_RU     _streetId)
    {
        SysReferenceTableLookup lookup = SysReferenceTableLookup::newParameters(
                tableNum(LogisticsAddressSteadNumber_RU),
                _ctrlHouse,
                true);
        
        Query                          query;
        QueryBuildDataSource           qbds;
        LogisticsAddressSteadNumber_RU selectedRecord;
        
        lookup.addLookupfield(fieldNum       (LogisticsAddressSteadNumber_RU, Name));
        lookup.addLookupfield(fieldNum       (LogisticsAddressSteadNumber_RU, SteadDescription));
        lookup.addLookupfield(fieldNum       (LogisticsAddressSteadNumber_RU, BuildingDescription));
        lookup.addLookupMethod(tableMethodStr(LogisticsAddressSteadNumber_RU, propertiesZipCode));
        lookup.addLookupMethod(tableMethodStr(LogisticsAddressSteadNumber_RU, propertiesGniCode));
        
        
        query = new Query();
        qbds = query.addDataSource(tableNum(LogisticsAddressSteadNumber_RU));
        
        qbds = LogisticsAddressNotFoundRecords_RU::filterQueryByLog(qbds, fieldNum(LogisticsAddressSteadNumber_RU, RecId), fieldNum(LogisticsAddressSteadNumber_RU, TableId));
        
        qbds.addRange(fieldNum(LogisticsAddressSteadNumber_RU, CountryRegion)).value(queryValue(_countryRegionId));
        qbds.addRange(fieldNum(LogisticsAddressSteadNumber_RU, State)).value        (queryValue(_stateId));
        qbds.addRange(fieldNum(LogisticsAddressSteadNumber_RU, County)).value       (queryValue(_countyId));
        qbds.addRange(fieldNum(LogisticsAddressSteadNumber_RU, City)).value         (queryValue(_cityId));
        qbds.addRange(fieldNum(LogisticsAddressSteadNumber_RU, District)).value     (queryValue(_districtId));
        qbds.addRange(fieldNum(LogisticsAddressSteadNumber_RU, Street)).value       (queryValue(_streetId));
        
        lookup.parmQuery(query);
        
        selectedRecord = lookup.performFormLookup();
        
        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertiesOKTMO_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays or sets OKTMO for address element
    /// </summary>
    /// <param name="_set">
    /// true when editing; false when viewing.
    /// </param>
    /// <param name="_oktmo">
    /// New value
    /// </param>
    /// <returns>
    /// Current (edited if _set is true) value
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    edit OKTMO_RU propertiesOKTMO_RU(
        boolean  _set,
        OKATO_RU _oktmo)
    {
        if (!this.RecId && _set)
        {
            this.insert();
        }
        return LogisticsAddressFiasGuidCodes_RU::parmOKTMOByAddressTableId(this, _oktmo, _set);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@FIAS:SteadDescription</DeveloperDocumentation>
	<FormRef>LogisticsAddressSteadNumber_RU</FormRef>
	<Label>@FIAS:SteadDescription</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>SteadDescription</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>GAB</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>Landplot</Relation>
			<Table>LogisticsAddressNotFoundRecords_RU</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction2</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>SteadId</Relation>
			<Table>LogisticsAddressNotFoundRecords_RU</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction3</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>LogisticsPostalAddress</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SteadDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BuildingDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>County</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Grid</Name>
			<Label>@SYS26263</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SteadDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BuildingDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS35583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>County</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>City</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>District</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Street</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Properties</Name>
			<Label>@SYS10344</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Properties</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SteadName</Name>
			<Label>@SYP4889667</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SteadDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BuildingDescription</Name>
			<ExtendedDataType>LogisticsAddressBuildingDescription_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>City</Name>
			<ExtendedDataType>LogisticsAddressCityRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryRegion</Name>
			<ExtendedDataType>LogisticsAddressCountryRegionId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>County</Name>
			<ExtendedDataType>LogisticsAddressCountyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>District</Name>
			<ExtendedDataType>LogisticsAddressDistrictRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>LogisticsAddressSteadName_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Properties</Name>
			<ExtendedDataType>LogisticsAddressPropertiesId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>State</Name>
			<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SteadDescription</Name>
			<ExtendedDataType>LogisticsAddressSteadDescription_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Street</Name>
			<ExtendedDataType>LogisticsAddressStreetID_RU</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CountryRegion</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>State</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>County</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>City</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>District</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Street</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PropertiesIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Properties</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>City_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LogisticsAddressCity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressCity_LogisticsAddressHouseNumber_RU</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>City</Name>
					<Field>City</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CountryRegion_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegion</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressCountryRegion_LogisticsAddressHouseNumber_RU</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegion</Name>
					<Field>CountryRegion</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>County_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LogisticsAddressCounty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCounty</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressCounty_LogisticsAddressHouseNumber_RU</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>County</Name>
					<Field>County</Field>
					<RelatedField>CountyId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>State</Name>
					<Field>State</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegion</Name>
					<Field>CountryRegion</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>District_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LogisticsAddressDistrict</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressDistrict</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressDistrict_LogisticsAddressHouseNumber_RU</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>District</Name>
					<Field>District</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Properties_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressProperties_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressProperties_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressProperties_RU_LogisticsAddressHouseNumber_RU</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Properties</Name>
					<Field>Properties</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>State_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressState</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressState_LogisticsAddressHouseNumber_RU</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>State</Name>
					<Field>State</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegion</Name>
					<Field>CountryRegion</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Street_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LogisticsAddressStreet_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressStreet_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressStreet_RU_LogisticsAddressHouseNumber_RU</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Street</Name>
					<Field>Street</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>