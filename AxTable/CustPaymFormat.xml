<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPaymFormat</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustPaymFormat extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFormats</Name>
				<Source><![CDATA[
        static void addFormats(BankFormat    _bankFormat,
                                  container     _classIds)
    {
        CustPaymFormat      custPaymFormat;
        Counter             counter;
        classId             classId;
        DictClass           dictClass;
        ;
        ttsbegin;
        for (counter=1; counter <= conLen(_classIds); counter++)
        {
            classId         = conPeek(_classIds, counter);
            custPaymFormat  = CustPaymFormat::find(classId, _bankFormat);
            if (!custPaymFormat)
            {
                dictClass = new DictClass(classId);
                custPaymFormat.BankFormat   = _bankFormat;
                custPaymFormat.ClassId      = classId;
                custPaymFormat.ClassName    = classId2Name(classId);
                custPaymFormat.Format       = dictClass.makeObject().interfaceName();
                custPaymFormat.insert();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(CustVendPaymModeClassId _classId, BankFormat _bankFormat )
    {
        boolean ret = true;
        ;

        if (!CustPaymFormat::exist(_classId, _bankFormat))
        {
            ret = checkFailed(strFmt(CustPaymFormat::txtNotExist(), _classId, _bankFormat));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
        public static boolean exist(CustVendPaymModeClassId _classId, BankFormat _bankFormat )
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                from
                     custPaymFormat
                 where
                     custPaymFormat.ClassId == _classId &&
                    custPaymFormat.BankFormat == _bankFormat).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        public static CustPaymFormat find(
        CustVendPaymModeClassId _classId,
        BankFormat _bankFormat ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustPaymFormat custPaymFormat;
        ;

        custPaymFormat.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custPaymFormat.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            custPaymFormat
            where
            custPaymFormat.ClassId == _classId &&
                    custPaymFormat.BankFormat == _bankFormat;

        return custPaymFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFormat</Name>
				<Source><![CDATA[
        static CustPaymFormat findFormat(CustVendPaymFormat _custVendPaymFormat,
                                     BankFormat         _bankFormat,
                                     boolean            _update = false)
    {
        CustPaymFormat  custPaymFormat;
        ;

        custPaymFormat.selectForUpdate(_update);

        if (_custVendPaymFormat)
        {
            select firstonly custPaymFormat
                where custPaymFormat.Format     == _custVendPaymFormat &&
                      custPaymFormat.BankFormat == _bankFormat;
        }
        return custPaymFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFormats</Name>
				<Source><![CDATA[
        static void removeFormats(BankFormat _bankFormat,
                                     container  _classIds)
    {
        CustPaymFormat  custPaymFormat;
        Counter         counter;
        classId         classId;
        ;
        ttsbegin;
        for (counter=1; counter <= conLen(_classIds); counter++)
        {
            classId         = conPeek(_classIds, counter);
            custPaymFormat  = CustPaymFormat::find(classId, _bankFormat, true);
            if (custPaymFormat)
            {
                custPaymFormat.delete();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedFormats</Name>
				<Source><![CDATA[
        static container selectedFormats(BankFormat  _bankFormat)
    {
        CustPaymFormat  custPaymFormat;
        container       selectedFormats;

        while select ClassId
            from  custPaymFormat
            where custPaymFormat.BankFormat == _bankFormat
        {
            selectedFormats += custPaymFormat.ClassId;
        }

        return selectedFormats;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS102181";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<DeveloperDocumentation>@SYS125076</DeveloperDocumentation>
	<Label>@SYS68242</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>bankFormat</TitleField1>
	<TitleField2>classId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>FormatClassIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>Bank</Modules>
	<PrimaryIndex>FormatClassIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>bankFormat</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>classId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>format</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>className</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>bankFormat</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>className</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>format</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>classId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>bankFormat</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>bankFormat</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BankFormat</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>classId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendPaymModeClassId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>className</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendPaymModeClassName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>format</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendPaymFormat</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FormatClassIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>bankFormat</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>classId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>formatIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>format</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>bankFormat</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendPaymFormatTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ClassId</MapField>
					<MapFieldTo>classId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ClassName</MapField>
					<MapFieldTo>className</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankFormat</MapField>
					<MapFieldTo>bankFormat</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Format</MapField>
					<MapFieldTo>format</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations />
	<StateMachines />
</AxTable>