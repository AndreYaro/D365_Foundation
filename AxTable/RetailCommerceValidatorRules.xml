<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorRules</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCommerceValidatorRules extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    /// <summary>
    /// Load all validation rules (setup and functional).
    /// </summary>
    /// <returns>The number of rules created.</returns>
    public static int64 load()
    {
        int64 numberOfRules = 0;

        // Do not count Setup rules.
        RetailCommerceValidatorRules::createRules(RetailCommerceValidatorRulesSetup::getRulesList());

        numberOfRules += RetailCommerceValidatorRules::createRules(RetailCommerceValidatorRulesCatalog::getRulesList(), "@Retail:RetailCommerceValidatorCatalogValidationEntityTypeIdLabel");
        numberOfRules += RetailCommerceValidatorRules::createRules(RetailCommerceValidatorRulesCategory::getRulesList(), "@Retail:RetailCommerceValidatorCategoryEntityTypeId");
        numberOfRules += RetailCommerceValidatorRules::createRules(RetailCommerceValidatorRulesCategoryHierarchy::getRulesList(), "@Retail:RetailCommerceValidatorHierarachyTypeId");
        numberOfRules += RetailCommerceValidatorRules::createRules(RetailCommerceValidatorRulesProduct::getRulesList(), "@Retail:RetailCommerceValidatorProductEntityId");
        numberOfRules += RetailCommerceValidatorRules::createRules(RetailCommerceValidatorRulesProductKits::getRulesList(), "@Retail:RetailCommerceValidatorKitValidationEntityId");
        numberOfRules += RetailCommerceValidatorRules::createRules(RetailCommerceValidatorRulesAttribute::getRulesList(), "@Retail:RetailCommerceValidatorAttributeEntityTypeId");
        numberOfRules += RetailCommerceValidatorRules::createRules(RetailCommerceValidatorRulesAttributeGroup::getRulesList(), "@Retail:RetailCommerceValidatorAttributeGroupEntityId");
        numberOfRules += RetailCommerceValidatorRules::createRules(RetailCommerceValidatorRulesChannel::getRulesList(), "@Retail:RetailCommerceValidatorChannelEntityId");

        return numberOfRules;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create rules.
    /// </summary>
    /// <param name = "_ruleList">The Map with rules.</param>
    /// <param name = "_ruleEntityId">The entity type identifier of the rules. Empty string if they are setup rules.</param>
    /// <returns>the number of rules created.</returns>
    private static int64 createRules(Map _ruleList, str _ruleEntityId = "")
    {
        System.Exception exception;
        MapEnumerator  mapEnumerator = _ruleList.getEnumerator();
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();
        int counter = 0;
        
        try
        {
            ttsbegin;

            // If there is rules in DB but not in ruleList, we should remove this rule as it's obselete.
            RetailCommerceValidatorRules validatorRulesInDB;
            while select forupdate RuleId from validatorRulesInDB where validatorRulesInDB.EntityTypeId == _ruleEntityId
            {
                if (!_ruleList.exists(validatorRulesInDB.RuleId))
                {
                    validatorRulesInDB.delete();
                    counter--;
                }
            }

            while (mapEnumerator.moveNext())
            {
                RetailCommerceValidatorRuleId ruleId = mapEnumerator.currentKey();
                RetailCommerceValidatorRules  validatorRules = RetailCommerceValidatorRules::find(ruleId,true);

                validatorRules.RuleId                  = ruleId;
                validatorRules.EntityTypeId            = conPeek(mapEnumerator.currentValue(), 1);
                validatorRules.SetupPriority           = conPeek(mapEnumerator.currentValue(), 2);
                validatorRules.ResultStatusType        = conPeek(mapEnumerator.currentValue(), 3);
                validatorRules.Description             = conPeek(mapEnumerator.currentValue(), 4);
                validatorRules.RuleExecutionTestMethod = conPeek(mapEnumerator.currentValue(), 5);
                validatorRules.RuleMitigationForm      = conPeek(mapEnumerator.currentValue(), 6);
                validatorRules.EntityPartitionRequired = conPeek(mapEnumerator.currentValue(), 7);
                validatorRules.AutomatedRunApplicable  = conPeek(mapEnumerator.currentValue(), 8);

                if (validatorRules.RecId)
                {
                    validatorRules.update();
                }
                else
                {
                    validatorRules.insert();
                    counter++;
                }
            }
            ttscommit;
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry('', strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorRules), 'createRules'), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry('', strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorRules), 'createRules'), xSession::currentRetryCount(), true, exception);
                retry;
            }
        }

        return counter;

    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record on the <c>RetailCommerceValidatorRules</c> table.
    /// </summary>
    /// <param name = "_ruleId">The rule id.</param>
    /// <param name = "_forUpdate">Select for update, true if yes, otherwise false.</param>
    /// <returns>A record on the <c>RetailCommerceValidatorRules</c> table.</returns>
    public static RetailCommerceValidatorRules find(RetailCommerceValidatorRuleId _ruleId, boolean _forUpdate = false)
    {
        RetailCommerceValidatorRules validatorRule;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;

        if (_ruleId)
        {
            try
            {
                if (_forUpdate && !parameters.UsePessimisticLocks)
                {
                    select forupdate validatorRule
                        where validatorRule.RuleId == _ruleId;
                }
                else if (_forUpdate && parameters.UsePessimisticLocks)
                {
                    select pessimisticlock validatorRule
                        where validatorRule.RuleId == _ruleId;
                }
                else
                {
                    select validatorRule
                        where validatorRule.RuleId == _ruleId;
                }
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry('', tableStr(RetailCommerceValidatorRules), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry('', tableStr(RetailCommerceValidatorRules), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }

        return validatorRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRuleCounters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Load all Rules per metrics and validation.
    /// </summary>
    /// <param name = "_metricId">The Metric Id.</param>
    /// <param name = "_validationId">The Validation Id.</param>
    /// <param name = "_batchJobId">The batch job Id.</param>
    public static void loadRuleCounters(RetailCommerceValidatorMetricId _metricId, RetailCommerceValidatorId _validationId = '', RefRecId _batchJobId = 0)
    {
        RetailCommerceValidatorRules  retailCommerceValidatorRules;

        while select RuleId from retailCommerceValidatorRules
        {
            if (_validationId)
            {
                RetailCommerceValidatorCounters::findOrCreate(_metricId, _validationId, _batchJobId, '', retailCommerceValidatorRules.RuleId, strFmt("@Retail:RetailCommerceValidatorTotalIssuesPerValidationRule", _validationId, retailCommerceValidatorRules.RuleId), false, false);
            }
            else
            {
                RetailCommerceValidatorCounters::findOrCreate(_metricId, '', 0, '', retailCommerceValidatorRules.RuleId, strFmt("@Retail:RetailCommerceValidatorTotalIssuesPerRule", retailCommerceValidatorRules.RuleId), false, true, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openRuleMitigationForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the rule mitigation form
    /// </summary>
    /// <param name = "_ruleId">The rule Id.</param>
    /// <param name = "_context">The contextid.</param>
    /// <param name = "_caller">The caller object.</param>
    internal static void openRuleMitigationForm(
        RetailCommerceValidatorRuleId _ruleId,
        RetailCommerceValidatorLogContext _context,
        object _caller)
    {
        RetailCommerceValidatorRules rules;
        Common commonRecord, lookupRecord;
        MenuItemName menuItemName;
        boolean isActionMenuItem;
        Args locArgs = new Args();

        if (_ruleId)
        {
            select firstonly rules
                where rules.RuleId == _ruleId;

            switch(rules.RuleMitigationForm)
            {
                case formStr(RetailCatalogDetails):
                    commonRecord = Catalog::find(_context.CatalogRefRecId);
                    menuItemName = menuitemDisplayStr(RetailCatalogs);
                    break;
                case formStr(EcoResCategoryhierarchylistpage):
                    // Open category hierarchies form.
                    if(_context.CategoryHierarchyRefRecId)
                    {
                        commonRecord = EcoResCategoryHierarchy::find(_context.CategoryHierarchyRefRecId);
                        menuItemName = menuitemDisplayStr(EcoResCategoryHierarchyListPage);
                    }
                    break;
                case formStr(EcoResProductDetailsExtended):
                    [commonRecord, menuItemName, lookupRecord] = RetailCommerceValidatorRules::getDetailsToOpenProductForm(_ruleId,_context);
                    break;
                case formStr(RetailInternalOrganization):
                    // Do not specify caller record for internal organization form.
                    commonRecord = null;
                    menuItemName = menuitemDisplayStr(RetailInternalOrganization);
                    break;
                case formStr(EcoResAttribute):
                    commonRecord = EcoResAttribute::find(_context.AttributeRefRecId);
                    menuItemName = menuitemDisplayStr(EcoResAttribute);
                    break;
                case formStr(EcoResAttributeGroup):
                    commonRecord = EcoResAttributeGroup::find(_context.AttributeGroupRefRecId);
                    menuItemName = menuitemDisplayStr(EcoResAttributeGroup);
                    break;
                case formStr(EcoResProductPerCompanyListPage):
                    // Opens released kits page.
                    commonRecord = InventTable::findByProduct(_context.ProductRefRecId);
                    menuItemName = menuitemDisplayStr(EcoResKitsPerCompanyListPage);
                    break;
                case formStr(EcoResProductListPage):
                    // Opens Retail kits page.
                    commonRecord = EcoResProduct::find(_context.ProductRefRecId);
                    menuItemName = menuitemDisplayStr(RetailKitListPage);
                    break;
                case formStr(EcoResProductDetails):
                    // Opens products page.
                    RefRecId productLoc = _context.VariantRefRecId ? _context.MasterProductRefRecId : _context.ProductRefRecId;
                    commonRecord = EcoResProduct::find(productLoc);
                    menuItemName = menuitemDisplayStr(RetailProductsByCategory);
                    break;
                case formStr(RetailKitConfigure):
                    // Opens Configure kit page.
                    commonRecord = EcoResProduct::find(_context.ProductRefRecId);
                    menuItemName = menuitemDisplayStr(RetailKitConfigure);
                    break;
                case formStr(RetailCategory):
                    // Opens RetailCategory form.
                    if (_context.CategoryRefRecId)
                    {
                        EcoResCategory ecoResCategory = EcoResCategory::find(_context.CategoryRefRecId);
                        lookupRecord = ecoResCategory;
                        commonRecord = EcoResCategoryHierarchy::find(ecoResCategory.CategoryHierarchy);
                        menuItemName = menuItemActionStr(RetailCategoryDetailsLauncher);
                        isActionMenuItem = true;

                        locArgs.parm(enum2Symbol(enumNum(EcoResCategoryNamedHierarchyRole),EcoResCategoryNamedHierarchyRole::RetailChannelNavigation));
                    }
                    break;
                case formStr(EcoResAttributeValue):
                    // Opens product attribute values.
                    menuItemName = menuitemDisplayStr(EcoResAttributeValue);
                    commonRecord = EcoResProduct::find(_context.ProductRefRecId);
                    lookupRecord = RetailCommerceValidatorRules::getLookupRecord(_context, menuItemName, commonRecord);
                    break;
                case formStr(RetailAssortmentDetails):
                    // Opens Assortments form.
                    commonRecord = RetailAssortmentTable::findRecId(_context.AssortmentRefRecId);
                    menuItemName = menuitemDisplayStr(RetailAssortmentGridView);
                    break;
                case formStr(EcoResProductMasterDimension):
                    TableId lookupTableId;

                    // Opens master product dimensions form.
                    [commonRecord, menuItemName, lookupRecord, lookupTableId] = RetailCommerceValidatorRules::getDetailsToOpenMasterProductDimensionForm(_ruleId,_context);

                    locArgs.lookupTable(lookupTableId);
                    break;
                case formStr(EcoResAttributeType):
                    commonRecord = EcoResAttributeType::find(_context.AttributeTypeRefRecId);
                    menuItemName = menuitemDisplayStr(EcoResAttributeType);
                    break;
                case formStr(RetailParameters):
                    RetailConfigurationParameters configParameters = RetailConfigurationParameters::findByName('UseAzureSearch');

                    if (!configParameters)
                    {
                        configParameters = RetailConfigurationParameters::findByName('CloudSearchProvider');
                    }

                    commonRecord = configParameters;
                    menuItemName = menuitemDisplayStr(RetailParameters);
                    break;
            }

            if (menuItemName)
            {
                MenuItemType menuItemType = isActionMenuItem ? MenuItemType::Action : MenuItemType::Display;
 
                locArgs.caller(_caller);
                locArgs.record(commonRecord);
                locArgs.lookupRecord(lookupRecord ? lookupRecord : commonRecord);

                new MenuFunction(menuItemName, menuItemType).run(locArgs);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLookupRecord</Name>
				<Source><![CDATA[
    private static Common getLookupRecord(
        RetailCommerceValidatorLogContext _context,
        MenuItemName _menuItemName,
        Common _lookupRecord
        )
    {
        if (_menuItemName == menuitemDisplayStr(EcoResAttributeValue))
        {
            EcoResAttribute attribute = EcoResAttribute::find(_context.AttributeRefRecId);

            _lookupRecord = attribute;
        }

        return _lookupRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDetailsToOpenProductForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the details like menu item, caller record and lookup record based of Rule Id and Context record.
    /// </summary>
    /// <param name = "_ruleId">The rule Id.</param>
    /// <param name = "_context">The <c>RetailCommerceValidatorLogContext</c> table buffer.</param>
    /// <returns>A container.</returns>
    private static container getDetailsToOpenProductForm(
        RetailCommerceValidatorRuleId _ruleId,
        RetailCommerceValidatorLogContext _context)
    {
        Common commonRecord;
        MenuItemName menuItemName;

        switch(_ruleId)
        {
            case "@Retail:RetailCommerceValidatorProdRule007":
                if (_context.VariantRefRecId)
                {
                    commonRecord = InventDimCombination::findByDistinctProductVariant(_context.VariantRefRecId);
                    menuItemName = menuitemDisplayStr(EcoResProductVariantsPerCompany);
                }
                else
                {
                    commonRecord = InventTable::findByProduct(_context.ProductRefRecId);
                    menuItemName = menuitemDisplayStr(EcoResProductDetailsExtendedGrid);
                }
                break;
            default:
                RefRecId product = _context.VariantRefRecId ? _context.MasterProductRefRecId : _context.ProductRefRecId;
                commonRecord = InventTable::findByProduct(product);
                menuItemName = menuitemDisplayStr(EcoResProductDetailsExtendedGrid);
                break;
        }

        return [commonRecord, menuItemName, commonRecord];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDetailsToOpenMasterProductDimensionForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the details like menu item, caller record, lookup record and lookup table id based of Rule Id and Context record.
    /// </summary>
    /// <param name = "_ruleId">The rule Id.</param>
    /// <param name = "_context">The <c>RetailCommerceValidatorLogContext</c> table buffer.</param>
    /// <returns>A container.</returns>
    private static container getDetailsToOpenMasterProductDimensionForm(
        RetailCommerceValidatorRuleId _ruleId,
        RetailCommerceValidatorLogContext _context)
    {
        Common commonRecord;
        Common lookupRecord;
        MenuItemName menuItemName;
        TableId lookupTableId;

        switch(_ruleId)
        {
            case "@Retail:RetailCommerceValidatorProdRule001":
                if (_context.ProductColorRefRecId)
                {
                    EcoResProductMasterColor productMasterColor = EcoResProductMasterColor::find(_context.ProductRefRecId, _context.ProductColorRefRecId);
                    EcoResProductMaster productMaster = EcoResProductMaster::find(productMasterColor.ColorProductMaster);

                    commonRecord = productMaster;
                    lookupRecord = productMasterColor;
                    lookupTableId = tableNum(EcoResColor);
                }
                break;
            case "@Retail:RetailCommerceValidatorProdRule002":
                if (_context.ProductStyleRefRecId)
                {
                    EcoResProductMasterStyle productMasterStyle = EcoResProductMasterStyle::find(_context.ProductRefRecId, _context.ProductStyleRefRecId);
                    EcoResProductMaster productMaster = EcoResProductMaster::find(productMasterStyle.StyleProductMaster);

                    commonRecord = productMaster;
                    lookupRecord = productMasterStyle;
                    lookupTableId = tableNum(EcoResStyle);
                }
                break;
            case "@Retail:RetailCommerceValidatorProdRule003":
                if (_context.ProductSizeRefRecId)
                {
                    EcoResProductMasterSize productMasterSize = EcoResProductMasterSize::find(_context.ProductRefRecId, _context.ProductSizeRefRecId);
                    EcoResProductMaster productMaster = EcoResProductMaster::find(productMasterSize.SizeProductMaster);

                    commonRecord = productMaster;
                    lookupRecord = productMasterSize;
                    lookupTableId = tableNum(EcoResSize);
                }
                break;
            case "@Retail:RetailCommerceValidatorProdRule004":
                if (_context.ProductConfigRefRecId)
                {
                    EcoResProductMasterConfiguration productMasterConfiguration = EcoResProductMasterConfiguration::find(_context.ProductRefRecId, _context.ProductConfigRefRecId);
                    EcoResProductMaster productMaster = EcoResProductMaster::find(productMasterConfiguration.ConfigProductMaster);

                    commonRecord = productMaster;
                    lookupRecord = productMasterConfiguration;
                    lookupTableId = tableNum(EcoResConfiguration);
                }
                break;
        }

        menuItemName = menuitemDisplayStr(EcoResProductMasterDimensionAction);

        return [commonRecord,menuItemName,lookupRecord,lookupTableId];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@Retail:RetailCommerceValidatorRulesDevDoc</DeveloperDocumentation>
	<Label>@Retail:RetailCommerceValidatorRulesLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>RuleId</TitleField1>
	<TitleField2>Description</TitleField2>
	<ClusteredIndex>RuleIdIdx</ClusteredIndex>
	<PrimaryIndex>RuleIdIdx</PrimaryIndex>
	<ReplacementKey>RuleIdIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RuleId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RuleId</Name>
			<ExtendedDataType>RetailCommerceValidatorRuleId</ExtendedDataType>
			<Label>@Retail:RetailCommerceValidatorRuleIdLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>RetailCommerceValidatorRulesDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EntityTypeId</Name>
			<ExtendedDataType>RetailCommerceValidatorEntityTypeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SetupPriority</Name>
			<ExtendedDataType>RetailCommerceValidatorRuleSetupPriority</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RuleExecutionTestMethod</Name>
			<ExtendedDataType>RetailCommerceValidatorRuleExecutionTestMethod</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RuleMitigationForm</Name>
			<ExtendedDataType>RetailCommerceValidatorRuleMitigationForm</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ResultStatusType</Name>
			<EnumType>RetailCommerceValidatorResultStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EntityPartitionRequired</Name>
			<Label>Entity records partition required</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutomatedRunApplicable</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RuleIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RuleId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>RetailCommerceValidatorEntityTypes</Name>
			<RelatedTable>RetailCommerceValidatorEntityTypes</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EntityTypeId</Name>
					<Field>EntityTypeId</Field>
					<RelatedField>EntityTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>