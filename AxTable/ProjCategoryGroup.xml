<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCategoryGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjCategoryGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accruedCost</Name>
				<Source><![CDATA[
    edit ProjLedgerDimensionDefaultAccountEst accruedCost(boolean _set,LedgerDimensionDefaultAccount  _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set,_ledgerAccount,ProjAccountType::AccruedCost);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedTurnoverProd</Name>
				<Source><![CDATA[
    edit ProjLedgerDimensionDefaultAccountFP accruedTurnoverProd(boolean _set,LedgerDimensionDefaultAccount  _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set,_ledgerAccount,ProjAccountType::AccruedTurnoverProd);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedTurnoverProfit</Name>
				<Source><![CDATA[
    edit ProjLedgerDimensionDefaultAccountFP accruedTurnoverProfit(boolean _set,LedgerDimensionDefaultAccount  _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set,_ledgerAccount,ProjAccountType::AccruedTurnoverProfit);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedTurnoversalesValue</Name>
				<Source><![CDATA[
    edit ProjLedgerDimensionDefaultAccountWIP accruedTurnoversalesValue(boolean       _set,
                                                 LedgerDimensionDefaultAccount _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set,_ledgerAccount,ProjAccountType::SalesValue);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValid</Name>
				<Source><![CDATA[
    public boolean checkValid()
    {
        boolean         ok = true;

        if (! this.CategoryGroupId)
        {
            ok = checkFailed("@SYS50004");
        }

        if (! this)
        {
            ok = checkFailed(strfmt(ProjCategoryGroup::txtNotExist(), this.CategoryGroupId) );
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canceledInvoiceRevenue</Name>
				<Source><![CDATA[
    edit ProjLedgerDimensionDefaultAccountTM canceledInvoiceRevenue(boolean _set,
                                           LedgerDimensionDefaultAccount _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set, _ledgerAccount, ProjAccountType::InvoiceCancelRevenueAccount);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAccount</Name>
				<Source><![CDATA[
    edit ProjLedgerDimensionDefaultAccountCost costAccount(boolean          _set,
                                   LedgerDimensionDefaultAccount    _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set,_ledgerAccount,ProjAccountType::CostAccount);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceTurnover</Name>
				<Source><![CDATA[
    edit ProjLedgerDimensionDefaultAccountTM invoiceTurnover(boolean       _set,
                                       LedgerDimensionDefaultAccount _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set,_ledgerAccount,ProjAccountType::RevenueAccount);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountItem</Name>
				<Source><![CDATA[
    edit ProjLedgerDimensionDefaultAccountWIP offsetAccountItem(boolean        _set,
                                         LedgerDimensionDefaultAccount  _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set,_ledgerAccount,ProjAccountType::OffsetAccountItem);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onAccountAccount</Name>
				<Source><![CDATA[
    edit LedgerDimensionDefaultAccount onAccountAccount(boolean         _set,
                                        LedgerDimensionDefaultAccount   _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set,_ledgerAccount,ProjAccountType::OnAccountAccount);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payrollAllocation</Name>
				<Source><![CDATA[
    edit ProjLedgerDimensionDefaultAccountHour payrollAllocation(boolean        _set,
                                         LedgerDimensionDefaultAccount  _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set,_ledgerAccount,ProjAccountType::PayrollAllocation);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projLinePropertyIdEdit</Name>
				<Source><![CDATA[
    edit ProjLinePropertyId projLinePropertyIdEdit(boolean                _set,
                                                   ProjCategoryGroup      _projCategoryGroup,
                                                   ProjLinePropertyId     _projLinePropertyId)
    {
        ProjLinePropertyId projLinePropertyId = '';
        DictTable dictTable = new DictTable(tablenum(ProjLinePropertySetup));

        if (_set)
        {
            if (dictTable.rights() >= AccessType::Edit)
            {
                ProjLinePropertySetup::updateLinePropertyCategory( _projCategoryGroup.CategoryGroupId, _projLinePropertyId, TableGroupAll::GroupId, _set);
                projLinePropertyId = _projLinePropertyId;
            }
        }
        else
        {
            if (dictTable.rights() >= AccessType::View)
            {
                projLinePropertyId = (select projLinePropertySetup where projLinePropertySetup.ProjCode         == TableGroupAll::All     &&
                                                                     projLinePropertySetup.ProjRelation     == ''                     &&
                                                                     projLinePropertySetup.CategoryCode     == TableGroupAll::GroupId &&
                                                                     projLinePropertySetup.CategoryRelation == _projCategoryGroup.CategoryGroupId).LinePropertyId;
            }
        }

        return projLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerAccount</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount setLedgerAccount(boolean              set,
                                           LedgerDimensionDefaultAccount        ledgerAccount,
                                           ProjAccountType      accountType)
    {
        if (set)
        {
            ProjPosting::createTrans(ledgerAccount,
                                     accountType,
                                     TableGroupAll::All,
                                     '',
                                     TableGroupAll::GroupId,
                                     this.CategoryGroupId);
        }

        return ProjPosting::find(accountType,
                                 TableGroupAll::All,
                                 '',
                                 TableGroupAll::GroupId,
                                 this.CategoryGroupId).LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaAccruedRevenueSubscription</Name>
				<Source><![CDATA[
    edit SMAAccruedRevenueSubscriptionLedDimDefAc smaAccruedRevenueSubscription( boolean       _set,
                                                      LedgerDimensionDefaultAccount _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set,_ledgerAccount,ProjAccountType::AccruedRevenueSubscription);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smawipSubscription</Name>
				<Source><![CDATA[
    edit SMAWIPSubscriptionLedDimDefAc smawipSubscription(  boolean       _set,
                                            LedgerDimensionDefaultAccount _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set,_ledgerAccount,ProjAccountType::WIPSubscription);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusAccountItem</Name>
				<Source><![CDATA[
    edit ProjLedgerDimensionDefaultAccountWIP statusAccountItem(boolean        _set,
                                         LedgerDimensionDefaultAccount  _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set,_ledgerAccount,ProjAccountType::StatusAccountItem);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCostAccrued</Name>
				<Source><![CDATA[
    edit ProjLedgerDimensionDefaultAccountEst wipCostAccrued(boolean _set,LedgerDimensionDefaultAccount  _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set,_ledgerAccount,ProjAccountType::WIPCostAccruals);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCostvalue</Name>
				<Source><![CDATA[
    edit ProjLedgerDimensionDefaultAccountWIP wipCostvalue(boolean        _set,
                                    LedgerDimensionDefaultAccount  _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set,_ledgerAccount,ProjAccountType::StatusAccount);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipProduction</Name>
				<Source><![CDATA[
    edit ProjLedgerDimensionDefaultAccountFP wipProduction(boolean _set,LedgerDimensionDefaultAccount  _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set,_ledgerAccount,ProjAccountType::WIPProduction);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipProfit</Name>
				<Source><![CDATA[
    edit ProjLedgerDimensionDefaultAccountFP wipProfit(boolean _set, LedgerDimensionDefaultAccount  _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set,_ledgerAccount,ProjAccountType::WIPProfit);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipSalesvalue</Name>
				<Source><![CDATA[
    edit ProjLedgerDimensionDefaultAccountWIP wipSalesvalue(boolean       _set,
                                     LedgerDimensionDefaultAccount _ledgerAccount)
    {
        if (ProjPosting::isAccessibleToSetLedger (_set, _ledgerAccount))
        {
            return this.setLedgerAccount(_set,_ledgerAccount,ProjAccountType::SalesOffsetAccount);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(ProjCategoryGroupId _projCategoryGroup)
    {
        if (_projCategoryGroup && !ProjCategoryGroup::exist(_projCategoryGroup))
        {
            // Category group '%1' does not exist.
            return checkFailed(strfmt("@SYS50005", _projCategoryGroup));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(ProjCategoryGroupId projCategoryGroup)
    {
        return projCategoryGroup && (select projCategoryGroup where projCategoryGroup.CategoryGroupId == projCategoryGroup).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjCategoryGroup find(ProjCategoryGroupId _projCategoryGroupId, boolean _forUpdate = false)
    {
        ProjCategoryGroup projCategoryGroup = null;

        projCategoryGroup.selectForUpdate(_forUpdate);

        if (_projCategoryGroupId)
        {
            select firstonly projCategoryGroup where projCategoryGroup.CategoryGroupId == _projCategoryGroupId;
        }

        return projCategoryGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupByProjCategoryGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the look up of all category groups.
    /// </summary>
    /// <param name = "_ctrl">A <c>FormStringControl</c> value that is used to display the category groups.</param>
    public static void lookupByProjCategoryGroup(FormStringControl  _ctrl)
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tablenum(ProjCategoryGroup));

        SysTableLookup  sysTableLookup = SysTableLookup::newParameters(tablenum(ProjCategoryGroup), _ctrl);
        sysTableLookup.addLookupfield(fieldnum(ProjCategoryGroup, CategoryGroupId));
        sysTableLookup.addLookupfield(fieldnum(ProjCategoryGroup, Name));
        sysTableLookup.addLookupfield(fieldnum(ProjCategoryGroup, CategoryType));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupByProjCategoryType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the look up of category groups.
    /// </summary>
    /// <param name="ctrl">
    ///    A <c>FormStringControl</c> value that is used to display the category groups.
    /// </param>
    /// <param name="categoryType">
    ///    The category type to display in the lookup. The default value is set to
    ///    <c>ProjCategoryType::Hour</c>; optional.
    /// </param>
    public static void lookupByProjCategoryType(
        FormStringControl   ctrl,
        ProjCategoryType    categoryType = ProjCategoryType::Hour)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(ProjCategoryGroup),ctrl);
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        sysTableLookup.addLookupfield(fieldnum(ProjCategoryGroup, CategoryGroupId));
        sysTableLookup.addLookupfield(fieldnum(ProjCategoryGroup, Name));

        query = new Query();
        queryBuildDataSource = query.addDataSource(tablenum(ProjCategoryGroup));
        queryBuildDataSource.addRange(fieldnum(ProjCategoryGroup, CategoryType)).value(queryValue(categoryType));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    public static Name name(ProjCategoryGroupId projCategoryGroupId)
    {
        return ProjCategoryGroup::find(projCategoryGroupId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static str 80 txtNotExist()
    {
        // Category group '%1' does not exist.
        return "@SYS50005";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124891</DeveloperDocumentation>
	<FormRef>ProjCategoryGroup</FormRef>
	<Label>@SYS50007</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CategoryGroupId</TitleField1>
	<TitleField2>CategoryType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>CategoryGroupIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>CategoryGroupIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ProjCategory</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjCategory</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjLinePropertySetup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjLinePropertySetup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjPosting</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjPosting</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CategoryType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjCategoryType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryGroupName</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CategoryGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CategoryGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>