<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWorkRegulation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWorkRegulation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
            public boolean validateField(fieldId _fieldIdToCheck)
    {
        #VendInvoiceFaults

        boolean isValid;

        isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(TaxWorkRegulation, TaxCode):
                    if (!TaxTable::exist(this.TaxCode))
                    {
                        AifFault::checkFailedLogFault(strfmt("@SYS324084", this.TaxCode), #TaxCodeDoesNotExist);
                        isValid = false;
                    }
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(tableId _headingTableId, recId _headingRecId )
    {
        boolean ret = true;
        ;

        if (!TaxWorkRegulation::exist(_headingTableId, _headingRecId))
        {
            ret = checkFailed(strfmt(TaxWorkRegulation::txtNotExist(), _headingTableId, _headingRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearRegulation</Name>
				<Source><![CDATA[
        static void clearRegulation(tableId _headingTableId, recId _headingRecId)
    {
        TaxWorkRegulation   taxWorkRegulation;
        ;
        ttsbegin;
        delete_from taxWorkRegulation
        where taxWorkRegulation.HeadingTableId == _headingTableId
           && taxWorkRegulation.HeadingRecId == _headingRecId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies <c>TaxWorkRegulation</c> table records associated with one table record to another.
    /// </summary>
    /// <param name="_bufferFrom">
    /// The source table record.
    /// </param>
    /// <param name="_bufferTo">
    /// The destination table record.
    /// </param>
    static void copy(Common _bufferFrom, Common _bufferTo)
    {
        TaxWorkRegulation   taxWorkRegulationFrom, taxWorkRegulationTo;
        RefTableId          newTableId = _bufferTo.TableId;
        RefRecId            newRecId = _bufferTo.RecId;
        ;

        insert_recordset taxWorkRegulationTo (
            HeadingTableId,
            HeadingRecId,
            TaxRegulationAmountCur,
            ActualTaxRegulationAmountCur,
            TaxCode,
            TaxDirection,
            ManualInsertedTax,
            SourceBaseAmountCurRegulated
            // <GEEU>
            , SourceBaseAmountRegulated_W
            , SourceRegulateAmount_W
            // </GEEU>
            , ExchangeRateTaxBaseAmountCurRegulated
            , ExchangeRateTaxAmountCurRegulated
            // <GBR>
            , TaxationCodeAdj_BR
            // </GBR>
            )
        select
            newTableId,
            newRecId,
            TaxRegulationAmountCur,
            ActualTaxRegulationAmountCur,
            TaxCode,
            TaxDirection,
            ManualInsertedTax,
            SourceBaseAmountCurRegulated
            // <GEEU>
            , SourceBaseAmountRegulated_W
            , SourceRegulateAmount_W
            // </GEEU>
            , ExchangeRateTaxBaseAmountCurRegulated
            , ExchangeRateTaxAmountCurRegulated
            // <GBR>
            , TaxationCodeAdj_BR
            // </GBR>
            from taxWorkRegulationFrom
            where taxWorkRegulationFrom.HeadingTableId == _bufferFrom.TableId &&
                  taxWorkRegulationFrom.HeadingRecId   == _bufferFrom.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedTaxAmount</Name>
				<Source><![CDATA[
        static TaxAmountCur correctedTaxAmount(tableId _headingTableId, recId _headingRecId)
    {
        TaxWorkRegulation   taxWorkRegulation;
        ;
        select sum(TaxRegulationAmountCur)
        from taxWorkRegulation
        where taxWorkRegulation.HeadingTableId == _headingTableId
           && taxWorkRegulation.HeadingRecId == _headingRecId;

        return taxWorkRegulation.TaxRegulationAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
        public static boolean exist(tableId _headingTableId, recId _headingRecId )
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                from
                     taxWorkRegulation
                 where
                     taxWorkRegulation.HeadingTableId == _headingTableId &&
                    taxWorkRegulation.HeadingRecId == _headingRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForTaxCodeAndDirection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a tax adjustment records exists for the transaction, the tax code, and the tax
    ///    direction.
    /// </summary>
    /// <param name="_headingTableId">
    ///    The table ID of the parent.
    /// </param>
    /// <param name="_headingRecId">
    ///    The record ID of the parent.
    /// </param>
    /// <param name="_taxCode">
    ///    The tax code.
    /// </param>
    /// <param name="_taxDirection">
    ///    The direction of the tax.
    /// </param>
    /// <returns>
    ///    true if the tax adjustment exists; otherwise, false.
    /// </returns>
    public static boolean existForTaxCodeAndDirection(tableId _headingTableId, recId _headingRecId, TaxCode _taxCode, TaxDirection _taxDirection)
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                from
                     taxWorkRegulation
                 where
                     taxWorkRegulation.HeadingTableId == _headingTableId &&
                    taxWorkRegulation.HeadingRecId == _headingRecId &&
                    taxWorkRegulation.TaxCode == _taxCode &&
                    taxWorkRegulation.TaxDirection == _taxDirection).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        public static TaxWorkRegulation find(
        tableId _headingTableId,
        recId _headingRecId ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWorkRegulation taxWorkRegulation;
        ;

        taxWorkRegulation.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWorkRegulation.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            taxWorkRegulation
            where
            taxWorkRegulation.HeadingTableId == _headingTableId &&
                    taxWorkRegulation.HeadingRecId == _headingRecId;

        return taxWorkRegulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a tax adjustment record for the specified transaction and tax code.
    /// </summary>
    /// <param name = "_headingTableId">The transaction table id.</param>
    /// <param name = "_headingRecId">The transaction record id.</param>
    /// <param name = "_taxCode">The tax code.</param>
    /// <param name = "_forupdate">A Boolean value that indicates whether to read the record for an update; optional.</param>
    /// <param name = "_concurrencyModel">The concurrency model option to use when the record is read; optional.</param>
    /// <returns>The <c>TaxWorkRegulation</c> record.</returns>
    public static TaxWorkRegulation findByTaxCode(
        tableId _headingTableId,
        recId _headingRecId,
        TaxCode _taxCode,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWorkRegulation taxWorkRegulation;

        taxWorkRegulation.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWorkRegulation.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWorkRegulation
            where taxWorkRegulation.HeadingTableId == _headingTableId &&
                taxWorkRegulation.HeadingRecId == _headingRecId &&
                taxWorkRegulation.TaxCode == _taxCode;

        return taxWorkRegulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxCodeTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a tax adjustment record for the specified transaction, tax code, and tax direction.
    /// </summary>
    /// <param name="_headingTableId">
    ///    The table ID of the parent.
    /// </param>
    /// <param name="_headingRecId">
    ///    The record ID of the parent.
    /// </param>
    /// <param name="_taxCode">
    ///    The tax code.
    /// </param>
    /// <param name="_taxDirection">
    ///    The direction of the tax.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for an update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    ///    A <c>TaxWorkRegulation</c> record.
    /// </returns>
    public static TaxWorkRegulation findByTaxCodeTaxDirection(
        tableId _headingTableId,
        recId _headingRecId,
        TaxCode _taxCode,
        TaxDirection _taxDirection,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWorkRegulation taxWorkRegulation;
        ;

        taxWorkRegulation.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWorkRegulation.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWorkRegulation
            where
                taxWorkRegulation.HeadingTableId == _headingTableId &&
                taxWorkRegulation.HeadingRecId == _headingRecId &&
                taxWorkRegulation.TaxCode == _taxCode &&
                taxWorkRegulation.TaxDirection == _taxDirection;

        return taxWorkRegulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxWorkRegulation_W</Name>
				<Source><![CDATA[
        static TaxWorkRegulation findTaxWorkRegulation_W(TableId        _headingTableId = 0,
                                                     RecId          _headingRecId   = 0,
                                                     boolean        _forUpdate      = false)
    {
        TaxWorkRegulation taxWorkRegulation;
        ;
        if (_forUpdate)
        {
            taxWorkRegulation.selectForUpdate(_forUpdate);
        }
        select firstonly taxWorkRegulation
            where taxWorkRegulation.HeadingTableId              == _headingTableId
                && taxWorkRegulation.HeadingRecId               == _headingRecId;

            return taxWorkRegulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaxWorkRegulationList</Name>
				<Source><![CDATA[
        static RecordSortedList loadTaxWorkRegulationList(tableId _headingTableId, recId _headingRecId)
    {
        TaxWorkRegulation   taxWorkRegulation;
        RecordSortedList    taxWorkRegulationList;
        ;

        taxWorkRegulationList = new RecordSortedList(tablenum (TaxWorkRegulation));
        taxWorkRegulationList.sortOrder(fieldnum(TaxWorkRegulation, RecId));

        while select taxWorkRegulation
        where taxWorkRegulation.HeadingTableId == _headingTableId
           && taxWorkRegulation.HeadingRecId   == _headingRecId
        {
            taxWorkRegulationList.ins(taxWorkRegulation);
        }

        return taxWorkRegulationList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>move</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves <c>TaxWorkRegulation</c> table records associated with one table record to another.
    /// </summary>
    /// <param name="_bufferFrom">
    /// The source table record.
    /// </param>
    /// <param name="_bufferTo">
    /// The destination table record.
    /// </param>
    static void move(Common _bufferFrom, Common _bufferTo)
    {
        TaxWorkRegulation   taxWorkRegulation;
        ;

        if (_bufferTo.TableId == _bufferFrom.TableId && _bufferTo.RecId == _bufferFrom.RecId)
        {
            return;
        }

        update_recordset taxWorkRegulation
        setting
            HeadingTableId = _bufferTo.TableId,
            HeadingRecId   = _bufferTo.RecId
        where
            taxWorkRegulation.HeadingTableId == _bufferFrom.TableId &&
            taxWorkRegulation.HeadingRecId   == _bufferFrom.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTaxWorkRegulationList</Name>
				<Source><![CDATA[
        static void saveTaxWorkRegulationList(RecordSortedList  _taxWorkRegulationList,
                                          tableId           _headingTableId,
                                          recId             _headingRecId)
    {
        boolean more;
        TaxWorkRegulation   taxWorkRegulation, taxWorkRegulationLines;
        ;

        if (!_taxWorkRegulationList)
        {
            return;
        }

        ttsbegin;

        for (more = _taxWorkRegulationList.first(taxWorkRegulation);
             more;
             more = _taxWorkRegulationList.next(taxWorkRegulation))
        {
            taxWorkRegulationLines.clear();
            taxWorkRegulationLines.HeadingRecId   = _headingRecId;
            taxWorkRegulationLines.HeadingTableId     = _headingTableId;
            taxWorkRegulationLines.ManualInsertedTax    = taxWorkRegulation.ManualInsertedTax;
            taxWorkRegulationLines.TaxCode          = taxWorkRegulation.TaxCode;
            taxWorkRegulationLines.TaxDirection     = taxWorkRegulation.TaxDirection;
            taxWorkRegulationLines.TaxRegulationAmountCur = taxWorkRegulation.TaxRegulationAmountCur;
            taxWorkRegulationLines.ActualTaxRegulationAmountCur = taxWorkRegulation.ActualTaxRegulationAmountCur;
            taxWorkRegulationLines.SourceBaseAmountCurRegulated = taxWorkRegulation.SourceBaseAmountCurRegulated;

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                taxWorkRegulationLines.TaxationCodeAdj_BR   = taxWorkRegulation.TaxationCodeAdj_BR;
            }
            // </GBR>

            taxWorkRegulationLines.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS102260";
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustTaxWorkRegulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates tax adjustment for the specified heading record, tax code and tax direction.
    /// </summary>
    /// <param name="_headingTableId">
    /// The heading record table ID.
    /// </param>
    /// <param name="_headingRecId">
    /// The heading record ID.
    /// </param>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_taxDirection">
    /// The direction of the tax.
    /// </param>
    /// <param name="_amount">
    /// The tax adjustment amount.
    /// </param>
    public static void adjustTaxWorkRegulation(TableId _headingTableId, RecId _headingRecId, TaxCode _taxCode, TaxDirection _taxDirection, AmountCur _amount)
    {
        TaxWorkRegulation taxWorkRegulation;

        taxWorkRegulation = TaxWorkRegulation::findByTaxCodeTaxDirection(
            _headingTableId,
            _headingRecId,
            _taxCode,
            _taxDirection,
            true);

        if (taxWorkRegulation)
        {
            taxWorkRegulation.TaxRegulationAmountCur += _amount;
            taxWorkRegulation.ActualTaxRegulationAmountCur += _amount;
            taxWorkRegulation.update();
        }
        else
        {
            taxWorkRegulation.HeadingTableId         = _headingTableId;
            taxWorkRegulation.HeadingRecId           = _headingRecId;
            taxWorkRegulation.TaxCode                = _taxCode;
            taxWorkRegulation.TaxDirection           = _taxDirection;
            taxWorkRegulation.TaxRegulationAmountCur = _amount;
            taxWorkRegulation.ActualTaxRegulationAmountCur = _amount;
            taxWorkRegulation.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTaxRegulation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the tax regulation records.
    /// </summary>
    /// <param name="_tableId">
    ///    The table id of vend invoice info table.+
    /// </param>
    /// <param name="_recId">
    ///    The record id of vend invoice info table.
    /// </param>
    public static void deleteTaxRegulation(TableId _tableId, RecId _recId)
    {
        TaxWorkRegulation           taxWorkRegulation;
        TaxUncommitted              taxUncommitted;
        
        delete_from taxWorkRegulation
            exists join RecId from taxUncommitted
                where taxUncommitted.HeadingTableId == _tableId
                    && taxUncommitted.HeadingRecId == _recId
                    && taxUncommitted.TaxOrigin != TaxOrigin::TaxReversed
                    && taxWorkRegulation.HeadingTableId == taxUncommitted.SourceTableId
                    && taxWorkRegulation.HeadingRecId == taxUncommitted.SourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActualTaxRegulationAmountCur</Name>
				<Source><![CDATA[
    public void updateActualTaxRegulationAmountCur(SalesLine _salesLine, SalesParmLine _salesParmLine)
    {
        // When tax code adjustment feature enabled, update only if OverrideCalculatedTax = Yes and Status = Adjusted.
        // When tax code adjustment feature disabled, run the original logic according to CustParameters.
        if ((TaxIntegrationAdjustment::isEnabledForTransaction(this.HeadingTableId, this.HeadingRecId)
                && this.OverrideCalculatedTax && this.Status == TaxAdjustmentStatus::Adjusted)
            || (!TaxIntegrationAdjustment::isEnabledForTransaction(this.HeadingTableId, this.HeadingRecId)
                && CustParameters::enableSingleLineTaxAdjustment()))
        {
            TaxAmount InvoicedTaxAmount;
            CustInvoiceTrans custInvoiceTrans;
            TaxTrans taxTrans;

            ttsbegin;
            if (_salesLine.SalesQty)
            {
                select sum(Qty) from custInvoiceTrans
                    where custInvoiceTrans.SalesId == _salesLine.SalesId
                        && custInvoiceTrans.LineNum == _salesLine.LineNum;

                if ((_salesLine.SalesQty - custInvoiceTrans.Qty - _salesParmLine.DeliverNow)== 0)
                {
                    while select TaxAmount from taxTrans
                        join RecId from custInvoiceTrans
                            where custInvoiceTrans.RecId == taxTrans.SourceRecId
                                && custInvoiceTrans.SalesId == _salesLine.SalesId
                                && custInvoiceTrans.LineNum == _salesLine.LineNum
                                && taxTrans.SourceTableId == tableNum(CustInvoiceTrans)
                                && taxTrans.TaxCode == this.TaxCode
                    {
                        InvoicedTaxAmount += taxTrans.TaxAmount;
                    }

                    if (abs(InvoicedTaxAmount) > abs(this.TaxRegulationAmountCur))
                        this.ActualTaxRegulationAmountCur = 0;
                    else
                        this.ActualTaxRegulationAmountCur = this.TaxRegulationAmountCur - InvoicedTaxAmount;
                }
                else
                {
                    this.ActualTaxRegulationAmountCur =
                        CurrencyExchangeHelper::amount(this.TaxRegulationAmountCur / _salesLine.SalesQty * _salesParmLine.DeliverNow, _salesLine.CurrencyCode);
                }
                this.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // When tax code adjustment feature enabled and users add a tax line, adjust any one of them should works.
        if (this.Status == TaxAdjustmentStatus::Adjusted)
        {
            if (!this.TaxRegulationAmountCur && this.ActualTaxRegulationAmountCur)
            {
                this.TaxRegulationAmountCur = this.ActualTaxRegulationAmountCur;
            }
            if (!this.ActualTaxRegulationAmountCur && this.TaxRegulationAmountCur)
            {
                this.ActualTaxRegulationAmountCur = this.TaxRegulationAmountCur;
            }
        }

        if (!this.IsCreatedFromUIInDetailedMode)
        {
            this.ActualTaxRegulationAmountCur = this.TaxRegulationAmountCur;
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<DeveloperDocumentation>@SYS126074</DeveloperDocumentation>
	<Label>@SYS55727</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>TaxCode</TitleField1>
	<TitleField2>TaxRegulationAmountCur</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>HeadingRecId</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>Tax</Modules>
	<PrimaryIndex>HeadingRecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxDirection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRegulationAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Data</Name>
			<Label>@SYS7403</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxDirection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRegulationAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ManualInsertedTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceBaseAmountCurRegulated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxationCodeAdj_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HeadingRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HeadingTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous_IN</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRegulationAmountCustoms_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VatExchRate_W</Name>
			<Label>@GLS112405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceRegulateAmount_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceBaseAmountRegulated_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchangeRateTaxBaseAmountCurRegulated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchangeRateTaxAmountCurRegulated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HeadingRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@TaxTrans:HeadingRecIdHelpText</HelpText>
			<Label>@SYS23494</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>HeadingTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<HelpText>@TaxTrans:HeadingTableIdHelpText</HelpText>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ManualInsertedTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS67708</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SourceBaseAmountCurRegulated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBaseCur</ExtendedDataType>
			<HelpText>@TaxTrans:SourceBaseAmountCurRegulatedHelpText</HelpText>
			<Label>@SYS67702</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SourceBaseAmountRegulated_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBase</ExtendedDataType>
			<FeatureClass>TaxSpecificExchangeRateMenuItemDisplayToggle</FeatureClass>
			<Label>@GLS112409</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SourceRegulateAmount_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
			<FeatureClass>TaxSpecificExchangeRateMenuItemDisplayToggle</FeatureClass>
			<Label>@GLS112411</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchangeRateTaxBaseAmountCurRegulated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBaseCur</ExtendedDataType>
			<FeatureClass>TaxSpecificExchangeRateAdjustmentDisplayToggle</FeatureClass>
			<Label>@TaxIntegration:ExchangeRateBaseAmountCurRegulated</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchangeRateTaxAmountCurRegulated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<FeatureClass>TaxSpecificExchangeRateAdjustmentDisplayToggle</FeatureClass>
			<Label>@TaxIntegration:ExchangeRateRegulateAmountCur</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxationCodeAdj_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxationCode_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
			<HelpText>@TaxTrans:TaxCodeHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxDirection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxTrans:TaxDirectionHelpText</HelpText>
			<EnumType>TaxDirection</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxRegulationAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegulationAmountCur</ExtendedDataType>
			<HelpText>@TaxTrans:TaxRegulationAmountCurHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxRegulationAmountCustoms_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxRegulationAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DistributedTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS80924</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ActualTaxRegulationAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegulationAmountCur</ExtendedDataType>
			<HelpText>@TaxTrans:ActualTaxRegulationAmountCurHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCreatedFromUIInDetailedMode</Name>
			<AllowEdit>No</AllowEdit>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxInCostPriceRegulated</Name>
			<ExtendedDataType>TaxRegulationAmountCur</ExtendedDataType>
			<HelpText>@TaxTrans:TaxInCostPriceRegulatedHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideCalculatedTax</Name>
			<Label>@SYS128982</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<EnumType>TaxAdjustmentStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConsolidateSourceRegulateAmountCur_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<ExtendedDataType>TaxRegulationAmountCur</ExtendedDataType>
			<Label>@Tax:ActualConsolidatedSalesTax</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HeadingRecId</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>HeadingTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HeadingRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWorkRegulation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingTableId</Name>
					<Field>HeadingTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>TaxWorkRegulation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingTableId</Name>
					<Field>HeadingTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransferJour_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransferJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransferJour_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWorkRegulation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingTableId</Name>
					<Field>HeadingTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransferTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransferTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransferTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWorkRegulation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingTableId</Name>
					<Field>HeadingTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWorkRegulation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingTableId</Name>
					<Field>HeadingTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MarkupTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>MarkupTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingTableId</Name>
					<Field>HeadingTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjProposalJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjProposalJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjProposalJour</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>TaxWorkRegulation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingTableId</Name>
					<Field>HeadingTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchParmTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchParmTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchParmTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>TaxWorkRegulation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingTableId</Name>
					<Field>HeadingTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>TaxWorkRegulation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingTableId</Name>
					<Field>HeadingTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingTableId</Name>
					<Field>HeadingTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesQuotationTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesQuotationTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesQuotationTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>TaxWorkRegulation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingTableId</Name>
					<Field>HeadingTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>TaxWorkRegulation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingTableId</Name>
					<Field>HeadingTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>TaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceInfoLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>VendInvoiceInfoLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingTableId</Name>
					<Field>HeadingTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceInfoTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceInfoTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceInfoTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>TaxWorkRegulation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingTableId</Name>
					<Field>HeadingTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWorkRegulation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingTableId</Name>
					<Field>HeadingTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>