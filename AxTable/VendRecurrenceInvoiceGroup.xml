<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRecurrenceInvoiceGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendRecurrenceInvoiceGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUpdateFacture</Name>
				<Source><![CDATA[
    public boolean canUpdateFacture()
    {
        VendorRecurrenceInvoice recurrenceInvoice;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceJour vendInvoiceJour;

        // Non-posted pending vendor invoices exist
        select firstOnly RecId from recurrenceInvoice
            where recurrenceInvoice.VendRecurrenceInvoiceGroup == this.RecId
        join vendInvoiceInfoTable
            where vendInvoiceInfoTable.RecId == recurrenceInvoice.VendInvoiceInfoTable &&
                  vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed;
        if (recurrenceInvoice.RecId)
        {
            return true;
        }

        // Non-factured invoices exist among posted invoices for current Vendor invoies
        select firstOnly RecId from recurrenceInvoice
            where recurrenceInvoice.VendRecurrenceInvoiceGroup == this.RecId
        join SourceDocumentHeader from vendInvoiceinfoTable
            where vendInvoiceinfoTable.RecId == recurrenceInvoice.VendInvoiceInfoTable &&
                  vendInvoiceinfoTable.ParmJobStatus == ParmJobStatus::Executed
        join RecId from vendInvoiceJour
            where vendInvoiceJour.SourceDocumentHeader == vendInvoiceinfoTable.SourceDocumentHeader &&
                  vendInvoiceJour.InvoiceId == vendInvoiceinfoTable.Num &&
                  vendInvoiceJour.InvoiceAccount == vendInvoiceInfoTable.InvoiceAccount;

        if (recurrenceInvoice.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
        VendorRecurrenceInvoice recurrenceInvoice;
        VendorRecurrenceInvoice recurrenceInvoiceDifferentGroup;
        DialogButton dialogButton;

        // Select the maximum date of the recurrence invoice based on recurrence setup and current recurrence group.
        select maxof(RecurrenceInvoiceDate), VendRecurrenceInvoice from recurrenceInvoice
            group by recurrenceInvoice.VendRecurrenceInvoice
            where recurrenceInvoice.VendRecurrenceInvoiceGroup == this.RecId;

        // Select the maximum date of the recurrence invoice based on recurrence setup and different recurrence group.
        select maxof(RecurrenceInvoiceDate) from recurrenceInvoiceDifferentGroup
            where recurrenceInvoiceDifferentGroup.VendRecurrenceInvoice == recurrenceInvoice.VendRecurrenceInvoice
            && recurrenceInvoiceDifferentGroup.VendRecurrenceInvoiceGroup != this.RecId;

        // If any future invoice found; system will not delete the selected recurrence group.
        if (recurrenceInvoiceDifferentGroup.RecurrenceInvoiceDate > recurrenceInvoice.RecurrenceInvoiceDate)
        {
            warning("@SYS318908");
            ret = false;
        }
        else
        {
            dialogButton = Box::yesNo("@SYS328391", DialogButton::No);

            if (dialogButton == DialogButton::Yes)
            {
				if (this.doPostedTransactionsExist())
                {
                    this.deleteUnpostedTransactionsAndUpdateInvoiceGroupToPosted();
                    ret = false;
                }
				else
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnpostedTransactionsAndUpdateInvoiceGroupToPosted</Name>
				<Source><![CDATA[
    internal void deleteUnpostedTransactionsAndUpdateInvoiceGroupToPosted()
    {
        VendorRecurrenceInvoice invoice;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        delete_from invoice
            where invoice.VendRecurrenceInvoiceGroup == this.RecId
            exists join vendInvoiceInfoTable
            where vendInvoiceInfoTable.RecId == invoice.VendInvoiceInfoTable
                && vendInvoiceInfoTable.parmJobStatus != ParmJobStatus::Executed;

        ttsbegin; 
		this.selectForUpdate(true);
        this.Posted = NoYes::Yes;
        this.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPostedTransactionsExist</Name>
				<Source><![CDATA[
    internal boolean doPostedTransactionsExist()
    {
        VendorRecurrenceInvoice invoice;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        select firstonly RecId from invoice
            where invoice.VendRecurrenceInvoiceGroup == this.RecId
            exists join vendInvoiceInfoTable
                where vendInvoiceInfoTable.RecId == invoice.VendInvoiceInfoTable
                    && vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Executed;

        return invoice.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(recId _vendRecurrenceInvoiceGroupRecId)
    {
        boolean ret = true;

        if (!VendRecurrenceInvoiceGroup::exist(_vendRecurrenceInvoiceGroupRecId))
        {
            ret = checkFailed(strFmt(VendRecurrenceInvoiceGroup::txtNotExist(), _vendRecurrenceInvoiceGroupRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _vendRecurrenceInvoiceGroupRecId)
    {
        boolean found;

        found = (select firstonly RecId from vendRecurrenceInvoiceGroup
                    where vendRecurrenceInvoiceGroup.RecId == _vendRecurrenceInvoiceGroupRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static VendRecurrenceInvoiceGroup find(
        RecId _vendRecurrenceInvoiceGroupRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendRecurrenceInvoiceGroup vendRecurrenceInvoiceGroup;

        vendRecurrenceInvoiceGroup.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendRecurrenceInvoiceGroup.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendRecurrenceInvoiceGroup
            where vendRecurrenceInvoiceGroup.RecId == _vendRecurrenceInvoiceGroupRecId;

        return vendRecurrenceInvoiceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfRecurrenceInvoice</Name>
				<Source><![CDATA[
    public static int numOfRecurrenceInvoice(RecId _vendRecurrenceInvoiceGroupRecId)
    {
        VendorRecurrenceInvoice vendorRecurrenceInvoice;
        int numOfLines;

        numOfLines = any2int((select count(RecId) from vendorRecurrenceInvoice
                                where vendorRecurrenceInvoice.VendRecurrenceInvoiceGroup == _vendRecurrenceInvoiceGroupRecId).RecId);

        return numOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@AccountsPayable:VendRecurrenceInvoiceGroupTableDevDoc</DeveloperDocumentation>
	<FormRef>VendRecurrenceInvoiceGroup</FormRef>
	<Label>@AccountsPayable:VendRecurrenceInvoiceGroup</Label>
	<TableGroup>Worksheet</TableGroup>
	<TitleField1>RecurrenceInvoiceId</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>AccountsPayable</Modules>
	<ReplacementKey>RecurrenceInvoiceIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>VendorRecurrenceInvoice</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendorRecurrenceInvoice</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecurrenceInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecurrenceInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecurrenceInvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RecurrenceInvoice</Name>
			<Label>@SYS318922</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecurrenceInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Posted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS22361</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RecurrenceInvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendRecurrenceInvoiceId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>GenerationDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS318853</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS57610</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RecurrenceInvoiceIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RecurrenceInvoiceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>