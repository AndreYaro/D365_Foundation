<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollAccrualRate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollAccrualRate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.showWarningsOnImproperCarryFwdSetup();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWarningsOnImproperCarryFwdSetup</Name>
				<Source><![CDATA[
    private void showWarningsOnImproperCarryFwdSetup()
    {
        PayrollAccrual payrollAccrual;

        if (this.CarryForwardLimit != 0)
        {
            payrollAccrual = PayrollAccrual::find(this.Accrual);

            if (payrollAccrual.CanCarryForward == NoYes::No || payrollAccrual.StartingDate == DateTimeUtil::date(DateTimeUtil::minValue()))
            {
                warning("@Payroll:ARuleForThisPlanIncludesACarryForwardLimitButTheCheckBoxToCa");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.showWarningsOnImproperCarryFwdSetup();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollAccrualRate</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollAccrualRateRecId _recId)
    {
        boolean ret = true;

        if (!PayrollAccrualRate::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollAccrualRate::txtNotExist(), tableId2name(tableNum(PayrollAccrualRate))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollAccrualRate</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(PayrollAccrualRateRecId _recId)
    {
        return _recId && (select firstonly RecId from payrollAccrualRate
                    where payrollAccrualRate.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollAccrualRate</c> table based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollAccrualRate</c> table.
    /// </returns>
    public static PayrollAccrualRate find(
    PayrollAccrualRateRecId         _recId,
    boolean                         _forUpdate          = false,
    ConcurrencyModel                _concurrencyModel   = ConcurrencyModel::Auto)
    {
        PayrollAccrualRate payrollAccrualRate;

        payrollAccrualRate.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollAccrualRate.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollAccrualRate
            where payrollAccrualRate.RecId == _recId;

        return payrollAccrualRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAccrualRateByAccrualEmploymentMonths</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollAccrualRate</c> table based on supplied values of the <c>Accrual</c> and <c>EmploymentMonths</c> fields.
    /// </summary>
    /// <param name="_accrual">
    /// The value of the <c>Accrual</c> field to find.
    /// </param>
    /// <param name="_employmentMonths">
    /// The value of the <c>EmploymentMonths</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollAccrualRate</c> table.
    /// </returns>
    /// <remarks>
    /// This method is different from the <c>findByAccrualEmploymentMonths</c> and the <c>findPayrollAccrualRateByEmploymentMonths</c> methods.
    /// </remarks>
    public static PayrollAccrualRate findAccrualRateByAccrualEmploymentMonths(
    PayrollAccrualRecId             _accrual,
    PayrollAccrualEmploymentMonth   _employmentMonths,
    boolean                         _forUpdate          = false,
    ConcurrencyModel                _concurrencyModel   = ConcurrencyModel::Auto)
    {
        PayrollAccrualRate payrollAccrualRate;

        payrollAccrualRate.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollAccrualRate.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollAccrualRate
            order by EmploymentMonths desc
            where payrollAccrualRate.Accrual == _accrual &&
                    payrollAccrualRate.EmploymentMonths <= _employmentMonths;

        return payrollAccrualRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAccrualEmploymentMonths</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollAccrualRate</c> table based on supplied values of the <c>Accrual</c> and <c>EmploymentMonths</c> fields.
    /// </summary>
    /// <param name="_accrual">
    /// The value of the <c>accrual</c> field to find.
    /// </param>
    /// <param name="_employmentMonths">
    /// The value of the <c>EmploymentMonths</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollAccrualRate</c> table.
    /// </returns>
    public static PayrollAccrualRate findByAccrualEmploymentMonths(
    PayrollAccrualRecId                     _accrual,
    PayrollAccrualEmploymentMonth           _employmentMonths,
    boolean                                 _forUpdate          = false,
    ConcurrencyModel                        _concurrencyModel   = ConcurrencyModel::Auto)
    {
        PayrollAccrualRate payrollAccrualRate;

        payrollAccrualRate.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollAccrualRate.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollAccrualRate
            where payrollAccrualRate.Accrual == _accrual &&
                    payrollAccrualRate.EmploymentMonths == _employmentMonths;

        return payrollAccrualRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPayrollAccrualRateByEmploymentMonths</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollAccrualRate</c> table based on supplied values of the <c>Accrual</c> and <c>EmploymentMonths</c> fields.
    /// </summary>
    /// <param name="_accrual">
    /// The value of the <c>Accrual</c> field to find.
    /// </param>
    /// <param name="_fromDate">
    /// A Date value.
    /// </param>
    /// <param name="_toDate">
    /// A Date value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollAccrualRate</c> table.
    /// </returns>
    public static PayrollAccrualRate findPayrollAccrualRateByEmploymentMonths(
    PayrollAccrualRecId _accrual,
    date                _fromDate,
    date                _toDate,
    boolean             _forUpdate          = false,
    ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto)
    {
        PayrollAccrualRate payrollAccrualRate;
        int employementMonths;

        if ((_fromDate != dateNull() && _toDate != dateNull()) && (_fromDate <= _toDate))
        {
            employementMonths = real2int(((_toDate - _fromDate) * 12) / 365);

            payrollAccrualRate.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                payrollAccrualRate.concurrencyModel(_concurrencyModel);
            }

            select firstonly payrollAccrualRate
                order by EmploymentMonths desc
                where payrollAccrualRate.Accrual == _accrual &&
                      payrollAccrualRate.EmploymentMonths <= employementMonths;
        }

        return payrollAccrualRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollaccrualrateTableStoresTheBenefitAccrualsRateInform</DeveloperDocumentation>
	<Label>@Payroll:BenefitAccrualRate</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>Accrual</TitleField1>
	<TitleField2>HourlyRate</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>Payroll</Modules>
	<ReplacementKey>PayrollAccrualRateIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Accrual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmploymentMonths</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HourlyRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinimumLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarryForwardLimit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Accrual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmploymentMonths</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmploymentMonths</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HourlyRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinimumLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarryForwardLimit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Accrual</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollAccrualRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CarryForwardLimit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollAccrualCarryForward</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EmploymentMonths</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollAccrualEmploymentMonth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>HourlyRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollAccrualHourlyRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumLimit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollAccrualMaximumLimit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MinimumLimit</Name>
			<ExtendedDataType>PayrollAccrualMinimumLimit</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PayrollAccrualRateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Accrual</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EmploymentMonths</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayrollAccrual</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PayrollAccrual</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Accrual</Name>
					<Field>Accrual</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>