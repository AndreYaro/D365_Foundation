<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetGroupBookSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetGroupBookSetup extends common
{
    #isoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcLifeTime</Name>
				<Source><![CDATA[
    public void calcLifeTime(AssetDepreciationProfile _assetDepreciationProfile = null)
    {
        // <GEEU>
        Percent percent;
        // </GEEU>
        AssetDepreciationProfile    assetDepreciationProfile;
        AssetTableInterval          assetTableInterval;
        AssetBookTable              assetBookTable = AssetBookTable::find(this.BookId);

        // <GJP>
        boolean                     isIsoJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
        AssetTransDate              currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (isISOJP)
        {
            assetDepreciationProfile = this.AssetDepBookMap_JP::depreciationProfileOnDate(currentDate);
        }
        else
        {
            if (_assetDepreciationProfile)
            {
                assetDepreciationProfile = _assetDepreciationProfile;
            }
            else
            {
                assetDepreciationProfile = this.depreciationProfile();
            }
        }

        if (!assetDepreciationProfile.RecId)
        {
            return;
        }

        if (isISOJP && AssetDepreciationProfile::isDepMethod_JP(assetDepreciationProfile.Method))
        {
            assetTableInterval = AssetTableIntervalExt_JP::constructFromCalendarSchedule(
                assetDepreciationProfile, AssetBookTable.TableId, AssetBookTable.RecId);
        }
        else
        {
        // </GJP>
            assetTableInterval = AssetTableInterval::construct(
                assetDepreciationProfile, assetBookTable.getFiscalCalendar());
        // <GJP>
        }
        // </GJP>

        switch (assetDepreciationProfile.Method)
        {
            case AssetDepreciationMethod::RBSL:
                this.LifeTime = assetTableInterval.yearToPeriod(this.ServiceLifeYears_FR)+ this.ServiceLifeMonths_FR;
                break;
            // <GEEU>
            case AssetDepreciationMethod::StraightLinePercentage_PL:
            case AssetDepreciationMethod::Factor_HU:
                percent = this.depreciationPercentage();
                if (percent)
                {
                    this.LifeTime = real2int(roundUpDec(100 / percent * assetTableInterval.numOfPeriodsPerYear() , 0));
                }
                break;

            case AssetDepreciationMethod::MultiplicationFactor_HU:
                this.ServiceLife = AssetDepreciationProfileSpec::getNumberOfIntervals(assetDepreciationProfile.Profile);

                switch (assetDepreciationProfile.Accrual)
                {
                    case AssetAccrual::Yearly :
                    case AssetAccrual::HalfYearly:
                    case AssetAccrual::Quarterly:
                    case AssetAccrual::Monthly:
                        this.LifeTime = real2int(round(this.ServiceLife * assetTableInterval.numOfPeriodsPerYear(), 0));
                        break;
                    case AssetAccrual::FiscalPeriod:
                        this.LifeTime = assetTableInterval.yearToPeriod(this.ServiceLife);
                        break;
                    default :
                        break;
                }
                break;
            // </GEEU>
            default:
                this.LifeTime = assetTableInterval.yearToPeriod(this.ServiceLife);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcServiceLife</Name>
				<Source><![CDATA[
    public void calcServiceLife()
    {
        AssetTableInterval  assetTableInterval;
        AssetBookTable      assetBookTable = AssetBookTable::find(this.BookId);

        // <GJP>
        boolean             isIsoJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
        AssetTransDate      currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (isISOJP)
        {
            assetTableInterval = AssetTableInterval::construct(
                this.AssetDepBookMap_JP::depreciationProfileOnDate(currentDate),
                assetBookTable.getFiscalCalendar_JP(currentDate));
        }
        else
        {
        // </GJP>
            assetTableInterval = AssetTableInterval::construct(this.depreciationProfile(), assetBookTable.getFiscalCalendar());
        // <GJP>
        }
        // </GJP>

        if (this.LifeTime)
        {
            this.ServiceLife    = assetTableInterval.periodToYear(this.LifeTime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAssetGroupDepreciation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find group status for the asset group.
    /// </summary>
    /// <returns>
    /// Group status of the asset group.
    /// </returns>
    public int  checkAssetGroupDepreciation_IN()
    {
        #COSNumbers
        AssetGroupBookSetup  assetGroupBookSetupLoc;

        select AssetGroupDepreciation_IN, Depreciation from assetGroupBookSetupLoc
            where  assetGroupBookSetupLoc.BookId                      == this.BookId    &&
                   (assetGroupBookSetupLoc.Depreciation               == NoYes::Yes     ||
                    assetGroupBookSetupLoc.AssetGroupDepreciation_IN  == NoYes::Yes)    &&
                   assetGroupBookSetupLoc.AssetGroup                  != this.AssetGroup;

        if (assetGroupBookSetupLoc.AssetGroupDepreciation_IN == NoYes::Yes)
        {
            return #2;
        }

        if (assetGroupBookSetupLoc.Depreciation == NoYes::Yes)
        {
            return #1;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDepreciationValueModel_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find group status for the asset group.
    /// </summary>
    /// <param name="_assetBookId">
    /// Book id of the asset to check.
    /// </param>
    /// <returns>
    /// Group status of the asset group.
    /// </returns>
    public int  checkDepreciationValueModel_IN(AssetBookId _assetBookId)
    {
        AssetGroupBookSetup  assetGroupBookSetupLoc;
        int                  checkStatus = 0;

        select RecId from assetGroupBookSetupLoc
            where assetGroupBookSetupLoc.BookId                      == _assetBookId &&
                  assetGroupBookSetupLoc.AssetGroupDepreciation_IN   == NoYes::Yes;
        if (assetGroupBookSetupLoc.RecId)
        {
            checkStatus = 1;
        }

        return  checkStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfLifeTimeServiceLifeCanBeSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>LifeTime</c> and <c>ServiceLife</c> fields can be set.
    /// </summary>
    /// <returns>
    /// true if they can be set;  otherwise, false.
    /// </returns>
    public boolean checkIfLifeTimeServiceLifeCanBeSet()
    {
        boolean retValue = true;

        switch (this.depreciationMethod())
        {
            case AssetDepreciationMethod::LowValuePool:
            case AssetDepreciationMethod::RBSL:
            case AssetDepreciationMethod::Consumption:
                retValue = false;
                break;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfConventionCanBeSet</Name>
				<Source><![CDATA[
    public boolean checkIfConventionCanBeSet()
    {
        AssetDepreciationProfile assetDepreciationProfile = this.depreciationProfile();

        if (!assetDepreciationProfile.isConventionAllowed())
        {
            return false;
        }

        if (assetDepreciationProfile.Accrual == AssetAccrual::Daily)
        {
            return false;
        }

        AssetBookTable assetBookTable = AssetBookTable::find(this.BookId);

        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal &&
            !assetBookTable.FiscalCalendar)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetBookTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>AssetBookTable</c> record associated with current record.
    /// </summary>
    /// <returns>
    /// An <c>AssetBookTable</c> record.
    /// </returns>
    public AssetBookTable assetBookTable()
    {
        AssetBookTable assetBookTable = AssetBookTable::find(this.BookId);

        return assetBookTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationProfile</Name>
				<Source><![CDATA[
    public AssetDepreciationProfile depreciationProfile()
    {
        return AssetDepreciationProfile::find(this.DepreciationProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationMethod</Name>
				<Source><![CDATA[
    display AssetDepreciationMethod depreciationMethod()
    {
        return this.depreciationProfile().Method;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationPercentage</Name>
				<Source><![CDATA[
    display AssetDepreciationPercentage depreciationPercentage()
    {
        return this.depreciationProfile().Percentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationAltProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related record of alternative <c>AssetDepreciationProfile</c>.
    /// </summary>
    /// <returns>
    /// A record of <c>AssetDepreciationProfile</c>.
    /// </returns>
    public AssetDepreciationProfile depreciationAltProfile()
    {
        return AssetDepreciationProfile::find(this.DepreciationAltProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationAltMethod</Name>
				<Source><![CDATA[
    display AssetDepreciationMethod depreciationAltMethod()
    {
        return this.depreciationAltProfile().Method;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationAltProfileId</Name>
				<Source><![CDATA[
    display AssetDepreciationProfileId depreciationAltProfileId()
    {
        return this.DepreciationAltProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationExtProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related record of extraordinary <c>AssetDepreciationProfile</c>.
    /// </summary>
    /// <returns>
    /// A record of <c>AssetDepreciationProfile</c>.
    /// </returns>
    public AssetDepreciationProfile depreciationExtProfile()
    {
        return AssetDepreciationProfile::find(this.DepreciationExtProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationAcceleratedProfile_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related record of accelerated <c>AssetDepreciationProfile</c>.
    /// </summary>
    /// <returns>
    /// A record of <c>AssetDepreciationProfile</c>.
    /// </returns>
    public AssetDepreciationProfile depreciationAcceleratedProfile_JP()
    {
        return AssetDepreciationProfile::find(this.DepreciationAcceleratedProfile_JP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCurrentDepreciationProfile_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the current depreciation profile based on current session date.
    /// </summary>
    /// <param name="_assetGroupBookSetup">
    /// Current <c>AssetGroupBookSetup</c> record
    /// </param>
    /// <returns>
    /// The depreciation profile for the current session date
    /// </returns>
    display AssetDepreciationProfileId displayCurrentDepreciationProfile_JP(AssetGroupBookSetup _assetGroupBookSetup)
    {
        return _assetGroupBookSetup.AssetGroupDepBookMap_JP::depreciationProfileIdOnDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAssetBookTable</Name>
				<Source><![CDATA[
    public void initFromAssetBookTable(AssetBookId _bookId = this.BookId)
    {
        AssetBookTable   assetBookTable = AssetBookTable::find(_bookId);

        if (assetBookTable)
        {
            this.Depreciation  = assetBookTable.Depreciation;

            this.DepreciationProfile    = assetBookTable.DepreciationProfile;
            this.DepreciationAltProfile = assetBookTable.DepreciationAltProfile;
            this.DepreciationExtProfile = assetBookTable.DepreciationExtProfile;
            this.DepreciationAcceleratedProfile_JP = assetBookTable.DepreciationAcceleratedProfile_JP;

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                this.calcLifeTime();
                this.calcServiceLife();
            }
            // </GEEPL>
            // <GEEHU>
            else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
            {
                if (assetBookTable.LowCostAsset_HU)
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00021, funcName());

                    this.LifeTime = 1;
                    this.calcServiceLife();
                }
                else
                {
                    this.calcLifeTime();
                    if (this.depreciationProfile().Method != AssetDepreciationMethod::MultiplicationFactor_HU)
                    {
                        this.calcServiceLife();
                    }
                }
            }
            // </GEEHU>
            // <GJP>
            else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
            {
            	AssetSpecialDepHelper_JP::updateDefaultAllocationPeriods(this, true);
                if (this.depreciationProfile().Method == AssetDepreciationMethod::EquallyDivided_JP)
                {
                    this.AllowableLimitForAccumulatedDepType_JP = AssetLimitForAccumulatedDepType_JP::AcquisitionCost;
                }
            }
            // </GJP>

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL, #isoCZ, #isoRU]))
            {
                AssetDepreciationGroup_W  depreciationGroup;
                select count(RecId) from depreciationGroup
                    where depreciationGroup.BookId == _bookId;

                if (depreciationGroup.RecId == 1)
                {
                    select firstonly GroupId from depreciationGroup
                        where depreciationGroup.BookId == _bookId;
                    this.DepreciationGroupId = depreciationGroup.GroupId;
                }
                else
                {
                    this.DepreciationGroupId = '';
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.initFromAssetBookTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidDerogatoryServiceLife</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the service life of the derogatory tax model is longer than the main value model.
    /// </summary>
    /// <returns>
    ///    true if the service life of the derogatory tax model is longer than the main one; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is only used for value models that are used for French derogatory depreciation.
    /// </remarks>
    private boolean invalidDerogatoryServiceLife()
    {
        AssetGroupBookSetup assetGroupBookDerogatory;
        boolean             retValue = false;
        AssetBookTable      derogatoryValueBook;

        if (this.ServiceLife > 0 && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
        {
            // If this is a derogatory tax model, verify that this its derogoatry tax model service life is not longer than the main value model.
            derogatoryValueBook = AssetBookTable::find(this.BookId);
            if (derogatoryValueBook.IsDerogatoryBook_FR)
            {
                select firstonly assetGroupBookDerogatory
                    where assetGroupBookDerogatory.BookId == AssetBookTable::findDerogatoryAccountingModelBookId(derogatoryValueBook.BookId)
                        && assetGroupBookDerogatory.AssetGroup == this.AssetGroup;
                if (assetGroupBookDerogatory && assetGroupBookDerogatory.ServiceLife > 0 &&
                   (this.ServiceLife > assetGroupBookDerogatory.ServiceLife))
                {
                    // Derogatory tax model '%1' service life cannot be greater than of value model '%2'.
                    warning(strFmt("@FixedAssets:FA_MessageValidation_ServiceLifeOfDerogatoryTaxModelCannotBeGreaterThanBook", this.BookId, assetGroupBookDerogatory.BookId ));
                    retValue = true;
                }
            }
            // If this is a main derogatory value model, verify that its derogoatry tax model service life is not longer than the main value model.
            else if (derogatoryValueBook.AssetDerogatoryModel_FR)
            {
                 select firstonly assetGroupBookDerogatory
                    where assetGroupBookDerogatory.BookId == derogatoryValueBook.AssetDerogatoryModel_FR
                        && assetGroupBookDerogatory.AssetGroup == this.AssetGroup;
                if (assetGroupBookDerogatory && assetGroupBookDerogatory.ServiceLife > 0 &&
                   (assetGroupBookDerogatory.ServiceLife > this.ServiceLife))
                {
                    // Derogatory tax model '%1' service life cannot be greater than of value model '%2'.
                    warning(strFmt("@FixedAssets:FA_MessageValidation_ServiceLifeOfDerogatoryTaxModelCannotBeGreaterThanBook", assetGroupBookDerogatory.BookId, this.BookId ));
                    retValue = true;
                }
            }
        }

    return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        // <GJP>
        boolean     isISOJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
        // </GJP>

        super(_fieldId);

        switch (_fieldId)
        {
            // <GEEU>
            case fieldNum(AssetGroupBookSetup, AssetGroup):
                this.initFromAssetBookTable();
                break;
            // </GEEU>

            case fieldNum(AssetGroupBookSetup, BookId):
                this.initFromAssetBookTable();
                break;
            case fieldNum(AssetGroupBookSetup, LifeTime):
                this.calcServiceLife();
                // French Derogatory Depreciation does not allow the Deprecation Tax Model
                // to have service life longer then the main value model
                if (this.invalidDerogatoryServiceLife())
                {
                    this.ServiceLife = this.orig().ServiceLife;
                    this.LifeTime = this.orig().LifeTime;
                }
	            // <GJP>
	            if (isISOJP)
	            {
	                AssetSpecialDepHelper_JP::updateDefaultAllocationPeriods(this);
	            }
	            // </GJP>
                break;

            case fieldNum(AssetGroupBookSetup, ServiceLife):
                this.calcLifeTime();
                // French Derogatory Depreciation does not allow the Deprecation Tax Model
                // to have service life longer then the main value model
                if (this.invalidDerogatoryServiceLife())
                {
                    this.ServiceLife = this.orig().ServiceLife;
                    this.LifeTime = this.orig().LifeTime;
                }
	            // <GJP>
	            if (isISOJP)
	            {
	                AssetSpecialDepHelper_JP::updateDefaultAllocationPeriods(this);
	            }
	            // </GJP>
                break;

            case fieldNum(AssetGroupBookSetup, ServiceLifeYears_FR):
                this.calcLifeTime();
                this.calcServiceLife();
                // French Derogatory Depreciation does not allow the Deprecation Tax Model
                // to have service life longer then the main value model
                if (this.invalidDerogatoryServiceLife())
                {
                    this.ServiceLife = this.orig().ServiceLife;
                    this.LifeTime = this.orig().LifeTime;
                    this.ServiceLifeYears_FR = this.orig().ServiceLifeYears_FR;
                }
                break;

            case fieldNum(AssetGroupBookSetup, ServiceLifeMonths_FR):
                this.calcLifeTime();
                this.calcServiceLife();
                // French Derogatory Depreciation does not allow the Deprecation Tax Model
                // to have service life longer then the main value model
                if (this.invalidDerogatoryServiceLife())
                {
                    this.ServiceLife = this.orig().ServiceLife;
                    this.LifeTime = this.orig().LifeTime;
                    this.ServiceLifeMonths_FR = this.orig().ServiceLifeMonths_FR;
                }
                break;

            case fieldNum(AssetGroupBookSetup, DepreciationConvention):

                if (this.DepreciationConvention != AssetDepreciationConvention::None)
                {
                    if (!this.checkIfConventionCanBeSet())
                    {
                        this.DepreciationConvention = AssetDepreciationConvention::None;
                        warning("@SYS95011");
                    }
                    //  add validation for field where daily accrual is selected
                    //  to restrict the setting of a depreciation convention
                    else if (this.depreciationProfile().Accrual == AssetAccrual::Daily &&
                                 this.DepreciationConvention        != AssetDepreciationConvention::None)
                    {
                        this.DepreciationConvention = AssetDepreciationConvention::None;
                        warning("@SYS100479");
                    }
                }

                break;

            case fieldNum(AssetGroupBookSetup, DepreciationProfile):

                if (!this.checkIfConventionCanBeSet())
                {
                    this.DepreciationConvention = AssetDepreciationConvention::None;

                    warning(strFmt("@FixedAssets:FA_WarningMessage_DepreciationConventionHasBeenUpdated", AssetDepreciationConvention::None));
                }

                break;

            case fieldNum(AssetGroupBookSetup, DepreciationAltProfile):

                if (this.depreciationAltProfile().Accrual == AssetAccrual::Daily)
                {
                    this.DepreciationConvention = AssetDepreciationConvention::None;

                    warning(strFmt("@FixedAssets:FA_WarningMessage_DepreciationConventionHasBeenUpdated", AssetDepreciationConvention::None));
                }

                break;

	        case fieldNum(AssetGroupBookSetup, DepreciationExtProfile):
	            if (isISOJP)
	            {
	                AssetSpecialDepHelper_JP::updateDefaultAllocationPeriods(this, true);
	        	}
	            break;

	        case fieldNum(AssetGroupBookSetup, SpecialDepAllocationUnit_JP):
	            if (isISOJP)
	            {
	                AssetSpecialDepHelper_JP::updateDefaultAllocationPeriods(this, false);
                    if (this.SpecialDepAllocationUnit_JP == AssetAccrualFiscal::Yearly)
                    {
                        this.SpecialDepAllocationConvention_JP = AssetSpecialDepAllocationConvention_JP::FollowingFiscalYear;
                    }
	            }
	            break;

            case fieldnum(AssetGroupBookSetup, DepreciationGroupId):
                if (this.DepreciationGroupId)
                {
                    AssetDepreciationGroup_W depreciationGroup = AssetDepreciationGroup_W::find(this.DepreciationGroupId);
                    if (depreciationGroup.BookId)
                    {
                        this.BookId = depreciationGroup.BookId;
                    }
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId field)
    {
        boolean             ret;
        #COSNumbers

        AssetDepreciationProfilesValidation depreciationProfilesValidation;

        ret = super(field);

        if (ret)
        {
            switch (field)
            {
                case fieldNum(AssetGroupBookSetup, LifeTime):
                case fieldNum(AssetGroupBookSetup, ServiceLife):
                    if (!this.checkIfLifeTimeServiceLifeCanBeSet())
                    {
                        if (this.LifeTime != 0)
                        {
                            ret = checkFailed(strFmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetGroupBookSetup, LifeTime), this.depreciationMethod()));
                        }

                        if (this.ServiceLife != 0)
                        {
                            ret = checkFailed(strFmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetGroupBookSetup, ServiceLife), this.depreciationMethod()));
                        }
                    }
                    break;

                case fieldNum(AssetGroupBookSetup, ServiceLifeMonths_FR):
                    if (this.ServiceLifeMonths_FR > #11)
                    {
                        ret = checkFailed("@SYS99111");
                    }
                case fieldNum(AssetGroupBookSetup, ServiceLifeYears_FR):
                    AssetDepreciationMethod method = this.depreciationMethod();

                    if (method != AssetDepreciationMethod::RBSL
                        && this.ServiceLifeMonths_FR != 0)
                    {
                        ret = checkFailed(strFmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetGroupBookSetup, ServiceLifeMonths_FR), this.depreciationMethod()));
                    }

                    if (method != AssetDepreciationMethod::RBSL
                            && this.ServiceLifeYears_FR != 0)
                    {
                        ret = checkFailed(strFmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetGroupBookSetup, ServiceLifeYears_FR), this.depreciationMethod()));
                    }
                    break;

                case fieldNum(AssetGroupBookSetup, DepreciationConvention):

                    depreciationProfilesValidation = AssetDepreciationProfilesValidation::construct(this);
                    ret = ret && depreciationProfilesValidation.validateDepreciationConvention();

                    break;

                case fieldNum(AssetGroupBookSetup, DepreciationProfile):

                    depreciationProfilesValidation = AssetDepreciationProfilesValidation::construct(this);
                    ret = ret && depreciationProfilesValidation.validateDepreciationProfile();

                    break;

                case fieldNum(AssetGroupBookSetup, DepreciationAltProfile):

                    depreciationProfilesValidation = AssetDepreciationProfilesValidation::construct(this);
                    ret = ret && depreciationProfilesValidation.validateDepreciationAltProfile();

                    break;

                case fieldNum(AssetGroupBookSetup, DepreciationExtProfile):

                    depreciationProfilesValidation = AssetDepreciationProfilesValidation::construct(this);
                    ret = ret && depreciationProfilesValidation.validateDepreciationExtProfile();

                    break;

                case fieldNum(AssetGroupBookSetup, DepreciationAcceleratedProfile_JP):

                    depreciationProfilesValidation = AssetDepreciationProfilesValidation::construct(this);
                    ret = ret && depreciationProfilesValidation.validateDepreciationAcceleratedProfile_JP();

                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the field value of the instance of the <c>AssetGroupBookSetup</c> table.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index.
    /// </param>
    /// <returns>
    /// true if the validation succeeded; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        // <GJP>
	    AssetTableInterval          assetTableInterval;
	    boolean                     isISOJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
	    AssetDepreciationProfile    depreciationExtProfile;
        real                        periods;
        // </GJP>

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(AssetGroupBookSetup, BookId):
                    // <GJP>
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
                    {
                        ret = this.AssetGroupDepBookMap_JP::validateBookId();
                    }
                    // </GJP>
                    break;
	            // <GJP>
                case fieldStr(AssetGroupBookSetup, SpecialDepAllocationPeriods_JP):
                    depreciationExtProfile = AssetDepreciationProfile::find(this.DepreciationExtProfile);
                    if (depreciationExtProfile.Method == AssetDepreciationMethod::AdditionalDepreciation_JP
                        && depreciationExtProfile.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::Reserve)
                    {
                        if ((this.depreciationProfile().Accrual == AssetAccrual::FiscalPeriod
                                && this.SpecialDepAllocationUnit_JP == AssetAccrualFiscal::FiscalPeriod)
                            ||(this.depreciationProfile().Accrual == AssetAccrual::Yearly
                                && this.SpecialDepAllocationUnit_JP == AssetAccrualFiscal::Yearly))
                        {
                            if (this.SpecialDepAllocationPeriods_JP > this.LifeTime)
                            {
                                ret = checkFailed("@FixedAssetsIncentiveDepreciation:SYP4880205");
                            }
                        }
                        else
                        {
                            if (this.depreciationProfile().Accrual == AssetAccrual::Yearly)
                            {
                                assetTableInterval = AssetSpecialDepHelper_JP::assetTableIntervalForAllocation(this);
                                if (this.SpecialDepAllocationPeriods_JP >assetTableInterval.yearToPeriod(this.LifeTime))
                                {
                                    ret = checkFailed("@FixedAssetsIncentiveDepreciation:SYP4880205");
                                }
                            }
                            else if (this.SpecialDepAllocationUnit_JP == AssetAccrualFiscal::Yearly)
                            {
                                assetTableInterval = this.AssetDepbookMap_JP::assetTableInterval();
                                if (assetTableInterval.yearToPeriod(this.SpecialDepAllocationPeriods_JP) > this.LifeTime)
                                {
                                    ret = checkFailed("@FixedAssetsIncentiveDepreciation:SYP4880205");
                                }
                            }
                            else
                            {
                                assetTableInterval = this.AssetDepbookMap_JP::assetTableInterval();
                                periods = assetTableInterval.periodToYear(this.LifeTime);
                                assetTableInterval = AssetSpecialDepHelper_JP::assetTableIntervalForAllocation(this);
                                if (assetTableInterval.periodToYear(this.SpecialDepAllocationPeriods_JP) > periods)
                                {
                                    ret = checkFailed("@FixedAssetsIncentiveDepreciation:SYP4880205");
                                }
                            }
                        }
                    }
                    break;
                // </GJP>
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        AssetBookTable      assetBookTable;
        boolean             ret;

        ret = super();

        // Check the depreciation
        if (NoYes::Yes == this.Depreciation)
        {
            if (ret)
            {
                ret = AssetDepreciationProfile::check(this.DepreciationProfile, this.LifeTime);
            }
        }

        if (ret && FeatureStateProvider::isFeatureEnabled(AssetDepCalculation_AcceleratedFeature_JP::instance()))
        {
            ret = AssetDepreciationProfile::validateDepreciationProfilesHaveSameDepreciationYear_JP(
                this.DepreciationProfile,
                this.DepreciationAcceleratedProfile_JP);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(
        AssetGroupId _assetGroupId,
        AssetBookId  _bookId)
    {
        boolean ret = true;

        if (!AssetGroupBookSetup::exist(_assetGroupId, _bookId))
        {
            ret = checkFailed(strFmt(AssetGroupBookSetup::txtNotExist(), _assetGroupId, _bookId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>derivedBookIdDepreciatelookup_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup method for book ids.
    /// </summary>
    /// <param name="_formcontrol">
    /// Control on which to perform lookup.
    /// </param>
    /// <param name="_assetGroupId">
    /// Id of the asset group.
    /// </param>
    /// <param name="_assetDepreciate">
    /// AssetDepreciate value.
    /// </param>
    public static void derivedBookIdDepreciatelookup_IN(FormStringControl   _formcontrol,
                                                 AssetGroupId               _assetGroupId,
                                                 AssetDepreciate            _assetDepreciate)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(AssetGroupBookSetup),_formcontrol);
        QueryBuildRange         queryBuildRange,queryBuildRangeNew;

        sysTableLookup.addLookupfield(fieldNum(AssetGroupBookSetup,BookId));
        sysTableLookup.addLookupfield(fieldNum(AssetGroupBookSetup,AssetGroup));

        queryBuildDataSource = query.addDataSource(tableNum(AssetGroupBookSetup));
        queryBuildRange      = queryBuildDataSource.addRange(fieldNum(AssetGroupBookSetup,AssetGroup));
        queryBuildRangeNew   = queryBuildDataSource.addRange(fieldNum(AssetGroupBookSetup,Depreciation));
        queryBuildRange.value(queryValue(_assetGroupId));
        queryBuildRangeNew.value(queryValue(_assetDepreciate));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>derivedBookIdGroupDepreciatelookup_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup method for book ids.
    /// </summary>
    /// <param name="_formcontrol">
    /// Control on which to perform lookup.
    /// </param>
    /// <param name="_assetGroupId">
    /// Id of the asset group.
    /// </param>
    /// <param name="_assetGroupDepreciate">
    /// AssetDepreciate value.
    /// </param>
    public static void derivedBookIdGroupDepreciatelookup_IN(FormStringControl      _formcontrol,
                                                      AssetGroupId                  _assetGroupId,
                                                      AssetGroupDepreciation_IN     _assetGroupDepreciate)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(AssetGroupBookSetup),_formcontrol);
        QueryBuildRange         queryBuildRange,queryBuildRangeNew;

        sysTableLookup.addLookupfield(fieldNum(AssetGroupBookSetup,BookId));
        sysTableLookup.addLookupfield(fieldNum(AssetGroupBookSetup,AssetGroup));

        queryBuildDataSource    = query.addDataSource(tableNum(AssetGroupBookSetup));
        queryBuildRange         = queryBuildDataSource.addRange(fieldNum(AssetGroupBookSetup,AssetGroup));
        queryBuildRangeNew      = queryBuildDataSource.addRange(fieldNum(AssetGroupBookSetup,AssetGroupDepreciation_IN));
        queryBuildRange.value(queryValue(_assetGroupId));
        queryBuildRangeNew.value(queryValue(_assetGroupDepreciate));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
        }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
        AssetGroupId _assetGroupId,
        AssetBookId  _bookId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                 from
                     assetGroupBookSetup
                 where
                     assetGroupBookSetup.BookId == _bookId &&
                     assetGroupBookSetup.AssetGroup == _assetGroupId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static AssetGroupBookSetup find(
        AssetGroupId _assetGroupId,
        AssetBookId _bookId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetGroupBookSetup      assetGroupBookSetup;

        assetGroupBookSetup.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetGroupBookSetup.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            assetGroupBookSetup
        where
            assetGroupBookSetup.BookId == _bookId &&
            assetGroupBookSetup.AssetGroup == _assetGroupId;

        return assetGroupBookSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTmpAssetGroupCOT</Name>
				<Source><![CDATA[
    public static TmpAssetGroupCOT findTmpAssetGroupCOT(AssetGroupId _assetGroupId)
    {
        AssetGroupBookSetup assetGroupBookSetup;
        AssetBookTable      assetBookTable;
        TmpAssetGroupCOT    tmpAssetGroupCOT;

        tmpAssetGroupCOT.clear();
        tmpAssetGroupCOT.AssetGroupId = _assetGroupId;

        while select BookId from assetGroupBookSetup
            where assetGroupBookSetup.AssetGroup == _assetGroupId
            join CurrentOperationsTax from assetBookTable
                where assetBookTable.BookId == assetGroupBookSetup.BookId
        {
            switch (assetBookTable.CurrentOperationsTax)
            {
                case CurrentOperationsTax::Current:
                    tmpAssetGroupCOT.Current    = true;
                    break;
                case CurrentOperationsTax::Operations:
                    tmpAssetGroupCOT.Operations = true;
                    break;
                case CurrentOperationsTax::Tax:
                    tmpAssetGroupCOT.Tax        = true;
                    break;
            }
        }
        return tmpAssetGroupCOT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDepreciationConvention</Name>
				<Source><![CDATA[
    public static void setDepreciationConvention(AssetBookId _bookId, AssetDepreciationConvention _depreciationConvention)
    {
        AssetGroupBookSetup assetGroupBookSetup;

        update_recordset assetGroupBookSetup
            setting DepreciationConvention = _depreciationConvention
            where   assetGroupBookSetup.BookId == _bookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS100037";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccrualAndYearOnProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validates that it is allowed to change Accrual or Depreciation year on profile.
    /// </summary>
    /// <param name = "_depreciationProfileId">
    ///   Depreciation profile.
    /// </param>
    /// <param name = "_depreciationYear">
    ///   Depreciation year enum value.
    /// </param>
    /// <param name = "_accrual">
    ///   Accrual.
    /// </param>
    /// <returns>
    ///   true, if there are no restrictions to change the profile; otherwise, false.
    /// </returns>
    public static boolean validateAccrualAndYearOnProfile(
        AssetDepreciationProfileId  _depreciationProfileId,
        AssetDepreciationYear       _depreciationYear,
        AssetAccrual                _accrual)
    {
        boolean   ret = true;
        AssetGroupBookSetup assetGroupBookSetup;
        AssetBookTable assetBookTable;

        while select assetGroupBookSetup
            where assetGroupBookSetup.DepreciationProfile    == _depreciationProfileId
               || assetGroupBookSetup.DepreciationAltProfile == _depreciationProfileId
        join assetBookTable
            where assetBookTable.BookId == assetGroupBookSetup.BookId
        {
            if (ret &&
                !assetBookTable.postToGeneralLedger() &&
                _accrual == AssetAccrual::Daily)
            {
                ret = false;
            }

            if (ret &&
                _accrual == AssetAccrual::Daily &&
                assetGroupBookSetup.DepreciationConvention != AssetDepreciationConvention::None)
            {
                ret = false;
            }

            if (ret &&
                _depreciationYear == AssetDepreciationYear::Fiscal &&
                assetGroupBookSetup.DepreciationConvention != AssetDepreciationConvention::None &&
                !assetGroupBookSetup.assetBookTable().getFiscalCalendar())
            {
                ret = false;
            }

            if (ret &&
                assetGroupBookSetup.DepreciationProfile == _depreciationProfileId &&
                assetGroupBookSetup.DepreciationAltProfile &&
                assetGroupBookSetup.DepreciationAltProfile != assetGroupBookSetup.depreciationProfile)
            {
                AssetDepreciationProfile assetDepreciationAltProfile = assetGroupBookSetup.depreciationAltProfile();

                if (_depreciationYear != assetDepreciationAltProfile.DepreciationYear ||
                    _accrual          != assetDepreciationAltProfile.Accrual)
                {
                    ret = false;
                }
            }

            if (ret &&
                assetGroupBookSetup.DepreciationAltProfile == _depreciationProfileId &&
                assetGroupBookSetup.DepreciationProfile &&
                assetGroupBookSetup.DepreciationProfile != assetGroupBookSetup.DepreciationAltProfile)
            {
                AssetDepreciationProfile assetDepreciationProfile = assetGroupBookSetup.depreciationProfile();

                if (_depreciationYear != assetDepreciationProfile.DepreciationYear ||
                    _accrual          != assetDepreciationProfile.Accrual)
                {
                    ret = false;
                }
            }

            if (!ret)
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDepreciationMethodOnProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validates that it is allowed to change depreciation method on profile.
    /// </summary>
    /// <param name = "_depreciationProfileId">
    ///   Depreciation profile.
    /// </param>
    /// <param name = "_depreciationMethod">
    ///   DEpreciation method.
    /// </param>
    /// <returns>
    ///   true, if there are no restrictions to change the profile; otherwise, false.
    /// </returns>
    public static boolean validateDepreciationMethodOnProfile(
        AssetDepreciationProfileId _depreciationProfileId,
        AssetDepreciationMethod    _depreciationMethod)
    {
        AssetGroupBookSetup assetGroupBookSetup;
        AssetBookTable      assetBookTable;

        boolean ret = true;

        boolean                     isISOJP = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]);
        AssetDepreciationProfile    depreciationExtProfile;
        AssetDepreciationProfile    depreciationProfile;

        while select assetGroupBookSetup
            where assetGroupBookSetup.DepreciationProfile == _depreciationProfileId
               || assetGroupBookSetup.DepreciationAltProfile == _depreciationProfileId
               || assetGroupBookSetup.DepreciationExtProfile == _depreciationProfileId
        join assetBookTable
            where assetBookTable.BookId == assetGroupBookSetup.BookId
        {
            if (!assetBookTable.postToGeneralLedger() &&
                _depreciationMethod == AssetDepreciationMethod::RBSL)
            {
                ret = false;
            }

            if (assetGroupBookSetup.DepreciationProfile == _depreciationProfileId)
            {
                if (ret &&
                    assetGroupBookSetup.DepreciationProfile &&
                    assetGroupBookSetup.DepreciationAltProfile)
                {
                    if (!AssetDepreciationProfile::isValidProfileForAltProfileCombination(_depreciationMethod))
                    {
                        ret = false;
                    }
                }

                if (ret &&
                    !AssetDepreciationProfile::isConventionAllowedForMethod(_depreciationMethod) &&
                    assetGroupBookSetup.DepreciationConvention != AssetDepreciationConvention::None)
                {
                    ret = false;
                }

                // <GJP>
                if (isISOJP)
                {
                    if (ret &&
                        _depreciationMethod == AssetDepreciationMethod::SpecialDepreciation_JP ||
                        _depreciationMethod == AssetDepreciationMethod::AdditionalDepreciation_JP)
                    {
                        ret = false;
                    }

                    AssetDepreciationProfile depreciationExtProfileForProfile = assetGroupBookSetup.depreciationExtProfile();

                    if (ret &&
                        depreciationExtProfileForProfile.Method == AssetDepreciationMethod::AdditionalDepreciation_JP &&
                        !AssetDepreciationProfile::isDepMethodAllowAdditionalDep_JP(_depreciationMethod))
                    {
                        ret = false;
                    }
                }
                // </GJP>
            }

            if (assetGroupBookSetup.DepreciationAltProfile == _depreciationProfileId)
            {
                if (ret &&
                    assetGroupBookSetup.DepreciationProfile &&
                    assetGroupBookSetup.DepreciationAltProfile &&
                    !AssetDepreciationProfile::isValidProfileForAltProfileCombination(_depreciationMethod))
                {
                    ret = false;
                }
            }

            if (assetGroupBookSetup.DepreciationExtProfile == _depreciationProfileId)
            {
                AssetDepreciationMethod  depreciationExtMethod = _depreciationMethod;
                AssetDepreciationProfile depreciationProfileForExt = assetGroupBookSetup.depreciationProfile();

                // <GJP>
                if (isISOJP)
                {
                    if (ret &&
                        depreciationExtMethod == AssetDepreciationMethod::AdditionalDepreciation_JP &&
                        !AssetDepreciationProfile::isDepMethodAllowAdditionalDep_JP(depreciationProfileForExt.Method))
                    {
                        ret = false;
                    }

                    if (ret &&
                        depreciationExtMethod != AssetDepreciationMethod::Manual &&
                        !AssetDepreciationProfile::isSpecialDepMethod_JP(depreciationExtMethod))
                    {
                        ret = false;
                    }
                }
                else
                // </GJP>
                {
                    if (ret &&
                        depreciationExtMethod != AssetDepreciationMethod::Manual)
                    {
                        ret = false;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<DeveloperDocumentation>@FixedAssets:FA_MessageDeveloper_AssetGroupBookSetup</DeveloperDocumentation>
	<FormRef>AssetGroupBookSetupBooks</FormRef>
	<Label>@FixedAssets:FA_TableTitle_AssetGroupBookSetup</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>AssetGroup</TitleField1>
	<TitleField2>BookId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>GroupBookIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>GroupBookIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LifeTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LifeTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Depreciation</Name>
			<Label>@SYS67341</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Depreciation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceLife</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LifeTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationConvention</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceLifeYears_FR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceLifeMonths_FR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetGroupDepreciation_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowableLimitForAccumulatedDepType_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DepreciationExtProfile_JP</Name>
			<Label>@SYS71181</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SpecialDepAllocationPeriods_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecialDepAllocationConvention_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecialDepAllocationUnit_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QuotaUsagePeriod_RU</Name>
			<Label>@GLS116115</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotaUsagePeriod_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DepreciationGroup</Name>
			<Label>@GLS104029</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DepreciationGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowableLimitForAccumulatedDepType_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetLimitForAccumulatedDepType_JP</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetGroupDepreciation_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetGroupDepreciation_IN</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Depreciation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DepreciationConvention</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetDepreciationConvention</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationAltProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationAltProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationExtProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationExtProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationAcceleratedProfile_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationAcceleratedProfileId_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LifeTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetLifeTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ServiceLife</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetServiceLife</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ServiceLifeMonths_FR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetServiceLifeMonths</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ServiceLifeYears_FR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetServiceLifeYears</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SpecialDepAllocationPeriods_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetSpecialDepAllocationPeriods_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SpecialDepAllocationUnit_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetSpecialDepAllocationUnit_JP</ExtendedDataType>
			<EnumType>AssetAccrualFiscal</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SpecialDepAllocationConvention_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetSpecialDepAllocationConvention_JP</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>QuotaUsagePeriod_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@GLS113970</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationGroupId_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationExtProfile_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<ExtendedDataType>AssetDepreciationExtProfileId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GroupBookIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DepreciationProfileIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DepreciationProfile</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DepreciationAltProfileIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DepreciationAltProfile</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DepreciationExtProfileIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DepreciationExtProfile</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>AssetGroupDepBookMap_JP</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AllowableLimitForAccumulatedDepType_JP</MapField>
					<MapFieldTo>AllowableLimitForAccumulatedDepType_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetBookId</MapField>
					<MapFieldTo>BookId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetGroup</MapField>
					<MapFieldTo>AssetGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Depreciation</MapField>
					<MapFieldTo>Depreciation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationConvention</MapField>
					<MapFieldTo>DepreciationConvention</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LifeTime</MapField>
					<MapFieldTo>LifeTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceLife</MapField>
					<MapFieldTo>ServiceLife</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SpecialDepAllocationConvention_JP</MapField>
					<MapFieldTo>SpecialDepAllocationConvention_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SpecialDepAllocationPeriods_JP</MapField>
					<MapFieldTo>SpecialDepAllocationPeriods_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SpecialDepAllocationUnit_JP</MapField>
					<MapFieldTo>SpecialDepAllocationUnit_JP</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>AssetDepreciationProfilesValidationMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BookId</MapField>
					<MapFieldTo>BookId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationAcceleratedProfile_JP</MapField>
					<MapFieldTo>DepreciationAcceleratedProfile_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationAltProfile</MapField>
					<MapFieldTo>DepreciationAltProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationConvention</MapField>
					<MapFieldTo>DepreciationConvention</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationExtProfile</MapField>
					<MapFieldTo>DepreciationExtProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DepreciationProfile</MapField>
					<MapFieldTo>DepreciationProfile</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<SourceEDT>AssetBookId</SourceEDT>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BookIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetGroup</Name>
					<SourceEDT>AssetGroupId</SourceEDT>
					<Field>AssetGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetDepreciationGroup_W</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetDepreciationGroup_W</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DepreciationGroupId</Name>
					<SourceEDT>AssetDepreciationGroupId_W</SourceEDT>
					<Field>DepreciationGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>