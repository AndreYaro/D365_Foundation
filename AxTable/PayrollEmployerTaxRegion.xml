<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollEmployerTaxRegion</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollEmployerTaxRegion extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getStateDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the description of the state.
    /// </summary>
    /// <returns>
    ///     Returns state description.
    /// </returns>
    public display Description getStateDescription()
    {
        #ISOCountryRegionCodes

        return LogisticsAddressState::name(LogisticsAddressCountryRegion::findByISOCode(#isoUS).CountryRegionId, this.StateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Set the country by default to US.
    /// </summary>
    public void initValue()
    {
        #ISOCountryRegionCodes

        super();

        this.CountryRegionId    = LogisticsAddressCountryRegion::findByISOCode(#isoUS).CountryRegionId;
        this.LegalEntity        = CompanyInfo::findDataArea(curext()).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveGNIS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the Geographic Names Information System from the Symmetry Tax Engine based on the state id.
    /// </summary>
    /// <returns>
    ///    true if a Geographic Names Information System record exists; otherwise, false.
    /// </returns>
    public boolean retrieveGNIS()
    {
        #PayrollConstants

        str                                         strVal;
        InteropPermission                           permission;

        System.Collections.ArrayList                list;
        int                                         listCount;

        permission = new InteropPermission(InteropKind::ClrInterop);
        permission.assert();

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollEmployerTaxRegion</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollEmployerTaxRegionRecId _recId)
    {
        boolean ret = true;

        if (!PayrollEmployerTaxRegion::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollEmployerTaxRegion::txtNotExist(), tableStr(PayrollEmployerTaxRegion)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollEmployerTaxRegion</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(PayrollEmployerTaxRegionRecId _recId)
    {
        return _recId && (select firstonly RecId from payrollEmployerTaxRegion
                    where payrollEmployerTaxRegion.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollEmployerTaxRegion</c> table based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollEmployerTaxRegion</c> table.
    /// </returns>
    public static PayrollEmployerTaxRegion find(
    PayrollEmployerTaxRegionRecId   _recId,
    boolean                         _forUpdate = false,
    ConcurrencyModel                _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollEmployerTaxRegion payrollEmployerTaxRegion;

        payrollEmployerTaxRegion.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollEmployerTaxRegion.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollEmployerTaxRegion
             where payrollEmployerTaxRegion.RecId == _recId;

        return payrollEmployerTaxRegion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLegalEntityCountryRegionState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollEmployerTaxRegion</c> table based on supplied values of the <c>LegalEntity</c>, <c>CountryRegionId</c> and <c>StateId</c> fields.
    /// </summary>
    /// <param name="_legalEntity">
    /// The value of the <c>LegalEntity</c> field to find.
    /// </param>
    /// <param name="_countryRegionId">
    /// The value of the <c>CountryRegionId</c> field to find.
    /// </param>
    /// <param name="_stateId">
    /// The value of the <c>StateId</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollEmployerTaxRegion</c> table.
    /// </returns>
    public static PayrollEmployerTaxRegion findByLegalEntityCountryRegionState(
    CompanyInfoRecId _legalEntity,
    LogisticsAddressCountryRegionId _countryRegionId,
    LogisticsAddressStateId _stateId,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollEmployerTaxRegion payrollEmployerTaxRegion;

        payrollEmployerTaxRegion.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollEmployerTaxRegion.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollEmployerTaxRegion
            where payrollEmployerTaxRegion.LegalEntity == _legalEntity &&
                    payrollEmployerTaxRegion.CountryRegionId == _countryRegionId &&
                    payrollEmployerTaxRegion.StateId == _stateId;

        return payrollEmployerTaxRegion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;

        //Retrieve the GNIS code if this is a new record
        if (this.RecId == 0)
        {
            ret = this.retrieveGNIS();
        }

        if (ret)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollemployertaxregionTableContainsAllTheTaxRegionsThat</DeveloperDocumentation>
	<Label>@Payroll:EmployerTaxRegion</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>CountryRegionId</TitleField1>
	<TitleField2>StateId</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Payroll</Modules>
	<ReplacementKey>EmployerTaxRegion_AK1</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@Payroll:Overview1</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>getStateDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax</Name>
			<Label>@Payroll:Tax</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryRegionId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsAddressCountryRegionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GNIS</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollGNIS</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@Payroll:Active</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CompanyInfoRecId</ExtendedDataType>
			<Label>@SYS315616</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StateId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
			<Label>@SYS21816</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EmployerTaxRegion_AK1</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CountryRegionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegionId</Name>
					<SourceEDT>LogisticsAddressCountryRegionId</SourceEDT>
					<Field>CountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressState_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StateId</Name>
					<SourceEDT>LogisticsAddressStateId</SourceEDT>
					<Field>StateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegionId</Name>
					<SourceEDT>LogisticsAddressCountryRegionId</SourceEDT>
					<Field>CountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionStateIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>