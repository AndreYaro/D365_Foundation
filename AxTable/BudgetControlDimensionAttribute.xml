<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlDimensionAttribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetControlDimensionAttribute extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearBudgetCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the budget cache for the budget control dimension attribute data.
    /// </summary>
    private void clearBudgetCache()
    {
        BudgetCache::clearScope(BudgetCacheScope::MainAccountInBudgetControlDimAttrbs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        this.clearBudgetCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        this.clearBudgetCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        this.clearBudgetCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid = super();

        isValid = isValid && BudgetControlConfigurationManager::validateConfigurationEditPermitted(this.BudgetControlConfiguration);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = super();

        isValid = isValid && BudgetControlConfigurationManager::validateConfigurationEditPermitted(this.BudgetControlConfiguration);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDimensionHierarchyLevelDeletion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the dimension hierarchy level can be deleted.
    /// </summary>
    /// <param name="_dimensionHierarchyLevel">
    /// The dimension hierarchy level being deleted.
    /// </param>
    /// <returns>
    /// true if the dimension hierarchy level can be deleted; otherwise, false.
    /// </returns>
    public static boolean allowDimensionHierarchyLevelDeletion(DimensionHierarchyLevel _dimensionHierarchyLevel)
    {
        boolean isValid = true;

        if (_dimensionHierarchyLevel)
        {
            DimensionAttribute dimensionAttribute = DimensionAttribute::find(_dimensionHierarchyLevel.DimensionAttribute);

            Ledger ledger;
            BudgetControlConfiguration controlConfiguration;
            BudgetControlDimensionAttribute controlDimensionAttribute;
            BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;

            while select Name from ledger
                exists join controlConfiguration
                    where controlConfiguration.PrimaryLedger == Ledger.RecId
                        && controlConfiguration.DimensionHierarchyAccountStructure == _dimensionHierarchyLevel.DimensionHierarchy
                    exists join controlDimensionAttribute
                        where controlDimensionAttribute.BudgetControlConfiguration == controlConfiguration.RecId
                        exists join budgetDimensionAttribute
                            where budgetDimensionAttribute.RecId == controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute
                                && budgetDimensionAttribute.DimensionAttribute == dimensionAttribute.RecId
            {
                isValid = checkFailed(strfmt("@SYS329486", dimensionAttribute.localizedName(), ledger.Name));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>BudgetControlDimensionAttribute</c> table exists
    ///    and displays an error if it does not exist.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetControlDimensionAttribute</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!BudgetControlDimensionAttribute::exist(_recId))
        {
            ret = checkFailed(strfmt(BudgetControlDimensionAttribute::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>BudgetControlDimensionAttribute</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetControlDimensionAttribute</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly RecId from budgetControlDimensionAttribute
                    where budgetControlDimensionAttribute.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByBudgetControlConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>BudgetControlDimensionAttribute</c> table exists.
    /// </summary>
    /// <param name="_controlConfigurationRecId">
    /// The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByBudgetControlConfiguration(BudgetControlConfigurationRecId _controlConfigurationRecId)
    {
        boolean found;

        found = (select firstonly RecId from budgetControlDimensionAttribute
                    where budgetControlDimensionAttribute.BudgetControlConfiguration == _controlConfigurationRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetControlDimensionAttribute</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetControlDimensionAttribute</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetControlDimensionAttribute find(
        RecId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetControlDimensionAttribute budgetControlDimensionAttribute;

        budgetControlDimensionAttribute.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetControlDimensionAttribute.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetControlDimensionAttribute
            where budgetControlDimensionAttribute.RecId == _recId;

        return budgetControlDimensionAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the dimension attributes for the specified budget control configuration.
    /// </summary>
    /// <param name="_controlConfigurationRecId">
    /// The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <returns>
    /// A <c>List</c> object that contains the budget control dimension attributes.
    /// </returns>
    public static List getDimensionAttributes(BudgetControlConfigurationRecId _controlConfigurationRecId)
    {
        BudgetControlDimensionAttribute         controlDimensionAttribute;
        BudgetPrimaryLedgerDimensionAttribute   budgetDimensionAttribute;
        DimensionAttribute                      dimensionAttribute;

        List dimensionAttributes = new List(Types::Record);

        while select RecId from controlDimensionAttribute
            order by controlDimensionAttribute.Ordinal
            where controlDimensionAttribute.BudgetControlConfiguration == _controlConfigurationRecId
            join RecId from budgetDimensionAttribute
                where budgetDimensionAttribute.RecId == controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute
            join * from dimensionAttribute
                where dimensionAttribute.RecId == budgetDimensionAttribute.DimensionAttribute
        {
            dimensionAttributes.addEnd(dimensionAttribute);
        }

        return dimensionAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetControlDimensionAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget control dimension attribute and value pairs from the source ledger dimension.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    /// The record ID of the primary ledger record.
    /// </param>
    /// <param name="_ledgerDimension">
    /// The record ID of the source ledger dimension record.
    /// </param>
    /// <returns>
    /// A map that contains the budget control dimension attribute and the value pairs.
    /// </returns>
    /// <remarks>
    /// The key of the map is the <c>BudgetControlDimensionAttribute</c> record ID and the value of the map
    /// is the <c>DimensionAttributeValue</c> display value.An empty map will be returned when the primary
    /// ledger does not have an active budget control configuration or the account structure from the
    /// source ledger dimension does not match the one from the budget control configuration.
    /// </remarks>
    public static Map getBudgetControlDimensionAttributeValues(
        LedgerRecId _primaryLedgerRecId,
        LedgerDimensionBase _ledgerDimension)
    {
        DimensionHierarchyId sourceAccountStructure;

        // Budget Control Dimension Attribute : Dimension Attribute Value
        Map dimensionValues = new Map(Types::Int64, Types::String);

        // Get the active BudgetControlConfiguration for the primary ledger.
        BudgetControlConfiguration controlConfiguration = BudgetControlConfiguration::findActiveByPrimaryLedger(_primaryLedgerRecId);

        if (controlConfiguration && _ledgerDimension)
        {
            sourceAccountStructure = DimensionHierarchy::getAccountStructureFromDimensionCombination(_ledgerDimension).RecId;
        }

        if (controlConfiguration &&
            sourceAccountStructure == controlConfiguration.DimensionHierarchyAccountStructure)
        {
            BudgetControlDimensionAttribute controlDimensionAttribute;
            BudgetPrimaryLedgerDimensionAttribute primaryLedgerDimensionAttribute;
            DimensionAttributeLevelValueView attributeLevelValueView;

            // The source account structure is the budget control account structure.
            // Populate the dimension values map with the budget control dimension attribute and value pairs.
            while select RecId
                from controlDimensionAttribute
                where controlDimensionAttribute.BudgetControlConfiguration == controlConfiguration.RecId
                join RecId from primaryLedgerDimensionAttribute
                    where primaryLedgerDimensionAttribute.RecId == controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute
                outer join DisplayValue
                    from attributeLevelValueView
                    where attributeLevelValueView.ValueCombinationRecId == _ledgerDimension &&
                        attributeLevelValueView.DimensionAttribute == primaryLedgerDimensionAttribute.DimensionAttribute
            {
                // The attributeLevelValueView.DisplayValue may not be returned.
                // In this case the map value will be blank and treated like an optional value.
                dimensionValues.insert(controlDimensionAttribute.RecId, attributeLevelValueView.DisplayValue);
            }
        }

        return dimensionValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextOrdinal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next <c>Ordinal</c> field value for the specified budget control configuration.
    /// </summary>
    /// <param name="_controlConfigurationRecId">
    /// The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <returns>
    /// The next <c>Ordinal</c> field value.
    /// </returns>
    public static DimensionOrdinal getNextOrdinal(BudgetControlConfigurationRecId _controlConfigurationRecId)
    {
        BudgetControlDimensionAttribute controlDimAttributeCurrentMaxOrdinal;

        select maxof(Ordinal)
            from controlDimAttributeCurrentMaxOrdinal
            where controlDimAttributeCurrentMaxOrdinal.BudgetControlConfiguration == _controlConfigurationRecId;

        return controlDimAttributeCurrentMaxOrdinal.Ordinal + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionAttributeInList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record ID of a <c>DimensionAttribute</c> record is in the specified list.
    /// </summary>
    /// <param name="_dimensionAttributeId">
    /// The record ID of the <c>DimensionAttribute</c> record to look for in the list.
    /// </param>
    /// <param name="_dimensionAttributes">
    /// A <c>List</c> instance that contains the list of dimension attributes. Each element in the list
    /// should have a dimension attribute record as the value.
    /// </param>
    /// <returns>
    /// true if the record ID is found in the list; otherwise, false.
    /// </returns>
    public static boolean isDimensionAttributeInList(DimensionAttributeRecId _dimensionAttributeId, List _dimensionAttributes)
    {
        boolean isDimensionAttributeInList;
        DimensionAttribute dimensionAttribute;

        ListEnumerator listEnumerator = _dimensionAttributes.getEnumerator();

        while (listEnumerator.moveNext())
        {
            dimensionAttribute = listEnumerator.current();

            if (dimensionAttribute.RecId == _dimensionAttributeId)
            {
                isDimensionAttributeInList = true;
                break;
            }
        }

        return isDimensionAttributeInList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMainAccountInBudgetControlDimAttrbs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the main account dimension attribute is in the set of budget control dimension attributes.
    /// </summary>
    /// <param name="_controlConfigurationRecId">
    /// The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <returns>
    /// true if the main account is in the set of budget control dimension attributes; otherwise, false.
    /// </returns>
    public static boolean isMainAccountInBudgetControlDimAttrbs(BudgetControlConfigurationRecId _controlConfigurationRecId)
    {
        boolean isMainAccountIn;

        container cachedResult = BudgetCache::getValue(BudgetCacheScope::MainAccountInBudgetControlDimAttrbs, [_controlConfigurationRecId]);

        if (cachedResult != connull())
        {
            isMainAccountIn = conpeek(cachedResult, 1);
        }
        else
        {
            BudgetControlDimensionAttribute controlDimensionAttribute;
            BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;

            select firstonly RecId
                from controlDimensionAttribute
                where controlDimensionAttribute.BudgetControlConfiguration == _controlConfigurationRecId
                exists join budgetDimensionAttribute
                    where budgetDimensionAttribute.RecId == controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute
                       && budgetDimensionAttribute.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

            if (controlDimensionAttribute)
            {
                isMainAccountIn = true;
            }

            BudgetCache::insertValue(
                BudgetCacheScope::MainAccountInBudgetControlDimAttrbs,
                [_controlConfigurationRecId],
                [isMainAccountIn]);
        }

        return isMainAccountIn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrdinals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>Ordinal</c> field values of the <c>BudgetControlDimensionAttribute</c> records for
    /// the specified budget control configuration.
    /// </summary>
    /// <param name="_packedZeroBasedPositionMap">
    /// The packed map that contains the <c>DimensionAttribute</c> record ID and the <c>Ordinal</c> field
    /// value pairs.
    /// </param>
    /// <param name="_controlConfigurationRecId">
    /// The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <remarks>
    /// The <c>Ordinal</c> field values in a map are expected to be zero-based and the method will convert
    /// them to one-based before they are stored.
    /// </remarks>
    public static void updateOrdinals(container _packedZeroBasedPositionMap, BudgetControlConfigurationRecId _controlConfigurationRecId)
    {
        BudgetControlConfiguration controlConfiguration = BudgetControlConfiguration::find(_controlConfigurationRecId);

        if (controlConfiguration &&
            !controlConfiguration.IsActive &&
            _packedZeroBasedPositionMap)
        {
            ttsbegin;

            BudgetControlDimensionAttribute controlDimensionAttribute;
            BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;

            // Update all the ordinal values to allow the new positions to be set.
            int nextOrdinal = BudgetControlDimensionAttribute::getNextOrdinal(_controlConfigurationRecId);

            update_recordset controlDimensionAttribute
                setting Ordinal = controlDimensionAttribute.Ordinal + nextOrdinal
                where controlDimensionAttribute.BudgetControlConfiguration == _controlConfigurationRecId;

            // Insert the records in the new order.
            Map positionMap = Map::create(_packedZeroBasedPositionMap);
            MapEnumerator positionMapEnumerator = positionMap.getEnumerator();

            while (positionMapEnumerator.moveNext())
            {
                select firstonly forupdate controlDimensionAttribute
                    where controlDimensionAttribute.BudgetControlConfiguration == _controlConfigurationRecId
                    exists join budgetDimensionAttribute
                        where budgetDimensionAttribute.RecId == controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute
                            && budgetDimensionAttribute.DimensionAttribute == positionMapEnumerator.currentKey();

                if (controlDimensionAttribute)
                {
                    // Set the ordinal to the current position.
                    controlDimensionAttribute.Ordinal = positionMapEnumerator.currentValue() + 1;
                    controlDimensionAttribute.update();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetControlDimensionAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the budget control dimension attribute is valid.
    /// </summary>
    /// <param name="_dimensionHierarchyRecId">
    /// The record ID of the account structure for which the dimensions must be validated.
    /// </param>
    /// <param name="_dimAttributeRecId">
    /// The dimension attribute record ID that must be verified.
    /// </param>
    /// <returns>
    /// true if the dimension attribute is present in the account structure; otherwise, false.
    /// </returns>
    public static boolean validateBudgetControlDimensionAttribute(DimensionHierarchyId _dimensionHierarchyRecId, DimensionAttributeRecId _dimAttributeRecId)
    {
        boolean isValid = true;

        if (_dimensionHierarchyRecId)
        {
            // Check whether the budget control configuration dimensions are valid.
            DimensionHierarchyLevel dimensionHierarchyLevel = DimensionHierarchyLevel::findByDimensionHierarchyAndDimAttribute(_dimensionHierarchyRecId, _dimAttributeRecId);

            if (!dimensionHierarchyLevel)
            {
                error(strFmt("@SYS335518", DimensionHierarchy::find(_dimensionHierarchyRecId).Name));
                isValid = false;
            }
        }
        else
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
	<DeveloperDocumentation>@SYS317164</DeveloperDocumentation>
	<FormRef>BudgetControlConfiguration</FormRef>
	<Label>@SYS301238</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>BudgetControlConfiguration</TitleField1>
	<TitleField2>BudgetPrimaryLedgerDimensionAttribute</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>BudgetControlConfigurationOrdinalIdx</ClusteredIndex>
	<Modules>Budget</Modules>
	<ReplacementKey>BudgetControlConfigPrimaryLedgerDimIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPrimaryLedgerDimensionAttribute</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPrimaryLedgerDimensionAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS35583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Ordinal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPrimaryLedgerDimensionAttribute</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetControlConfiguration</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetControlConfigurationRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPrimaryLedgerDimensionAttribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS314048</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Ordinal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionOrdinal</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetControlConfigurationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BudgetControlConfigPrimaryLedgerDimIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetPrimaryLedgerDimensionAttribute</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BudgetControlConfigurationOrdinalIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Ordinal</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetControlConfiguration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BudgetControlConfiguration</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetControlConfiguration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetControlConfiguration_BudgetPrimaryLedgerDimensionAttribute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetControlConfiguration</Name>
					<Field>BudgetControlConfiguration</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPrimaryLedgerDimensionAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetPrimaryLedgerDimensionAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetPrimaryLedgerDimensionAttribute</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetPrimaryLedgerDimensionAttribute_BudgetControlDimensionAttribute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPrimaryLedgerDimensionAttribute</Name>
					<Field>BudgetPrimaryLedgerDimensionAttribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>