<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventBatch extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bufferPdsVendBatchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a buffer containing the vendor batch information attached to the <c>InventBatch</c> record.
    /// </summary>
    /// <returns>
    ///     An uncommitted buffer of the <c>PdsVendBatchInfo</c> table.
    /// </returns>
    public PdsVendBatchInfo bufferPdsVendBatchInfo()
    {
        PdsVendBatchInfo bufferPdsVendBatchInfo;

        bufferPdsVendBatchInfo.CountryOfOrigin1 = this.PdsCountryOfOrigin1;
        bufferPdsVendBatchInfo.CountryOfOrigin2 = this.PdsCountryOfOrigin2;
        bufferPdsVendBatchInfo.UseVendBatchDate = this.PdsUseVendBatchDate;
        bufferPdsVendBatchInfo.UseVendBatchExp  = this.PdsUseVendBatchExp;
        bufferPdsVendBatchInfo.VendBatchDate    = this.PdsVendBatchDate;
        bufferPdsVendBatchInfo.VendExpiryDate   = this.PdsVendExpiryDate;
        bufferPdsVendBatchInfo.VendBatchId      = this.PdsVendBatchId;

        return bufferPdsVendBatchInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventBailee_RU</Name>
				<Source><![CDATA[
    public boolean checkInventBailee_RU()
    {
        boolean ok = true;
        if (this.hasInventBaileeTrans_RU())
        {
            ok = checkFailed("@GLS115698");
        }
        if (this.hasInventBaileeCalcItemSetup_RU())
        {
            ok = checkFailed("@GLS115699");
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispositionDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the description for the disposition of the current batch.
    /// </summary>
    /// <returns>
    ///    The disposition description for the current batch.
    /// </returns>
    public display PdsDescription dispositionDescription()
    {
        PdsDescription      ret = '';

        if (this.PdsDispositionCode && hasFieldAccess(tableNum(InventBatch), fieldNum(InventBatch, PdsDispositionCode), AccessType::View))
        {
            ret = PdsDispositionMaster::find(this.PdsDispositionCode).Description;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPotencyBatchManagementDisplayValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the information related to the quantity management of the batch.
    /// </summary>
    /// <returns>
    /// A <c>container</c> with:
    /// <list type="bullet">
    ///     <item><description>The potency value specified for the batch.</description></item>
    ///     <item><description>The target value of the potency attribute.</description></item>
    ///     <item><description>The available on-hand inventory for the batch.</description></item>
    ///     <item><description>The active available on-hand for the batch.</description></item>
    /// </list>; or a container with empty values if the related item is not potency-enabled.
    /// </returns>
    public container getPotencyBatchManagementDisplayValues()
    {
        PDSBaseAttributeId      baseAttributeId;
        PDSBaseAttributeValues  batchActualAttributeValue;
        PDSBaseValue            baseAttributeTargetValue;
        PDSAvailableQty         batchAvailableQuantityOnHand;
        PDSNormalizedQty        batchActiveQuantityOnHand;

        if (this.ItemId && this.InventBatchId)
        {
            baseAttributeId = InventTable::find(this.ItemId).PDSBaseAttributeId;
            if (baseAttributeId)
            {
                batchActualAttributeValue = this.pdsBaseAttributeValue();
                baseAttributeTargetValue  = this.pdsBaseValue();
                batchAvailableQuantityOnHand = this.pdsOnHandQty();
                if (batchAvailableQuantityOnHand && batchActualAttributeValue)
                {
                    batchActiveQuantityOnHand = PDSBalanceIngredient::selectIngredient(PDSIngredientTypeEnum::Active).normalizeQty(this.InventBatchId, batchAvailableQuantityOnHand, this);
                }
            }
        }
        return [batchActualAttributeValue, baseAttributeTargetValue, batchAvailableQuantityOnHand, batchActiveQuantityOnHand];
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAnyInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if this inventory batch has any inventory transactions.
    /// </summary>
    /// <returns>
    ///    true if this inventory batch has any inventory transactions; otherwise, false.
    /// </returns>
    public boolean hasAnyInventTrans()
    {
        InventDim           inventDim;
        WHSInventReserve    inventReserve;

        if (WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled())
        {
            select firstonly RecId from inventReserve
                where  inventReserve.ItemId == this.ItemId
                    && inventReserve.AvailPhysical != 0
                exists join inventDim
                    where  inventDim.inventDimId == inventReserve.InventDimId
                        && inventDim.InventBatchId == this.InventBatchId;
        }

        if (!inventReserve.RecId)
        {
            InventTrans inventTrans;

            select firstOnly RecId from inventDim
                where inventDim.InventBatchId       == this.InventBatchId
                exists join inventTrans
                    where inventTrans.InventDimId   == inventDim.InventDimId
                          && inventTrans.ItemId     == this.ItemId;
        }

        return inventDim.RecId || inventReserve.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventBaileeCalcItemSetup_RU</Name>
				<Source><![CDATA[
    public boolean hasInventBaileeCalcItemSetup_RU()
    {
        InventBaileeCalcSetup_RU    inventBaileeCalcSetup;
        select firstonly RecId from inventBaileeCalcSetup
            where inventBaileeCalcSetup.CalcItemId == this.ItemId;

        return inventBaileeCalcSetup.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventBaileeTrans_RU</Name>
				<Source><![CDATA[
    public boolean hasInventBaileeTrans_RU()
    {
        InventTrans         inventTrans;
        InventDim           inventDim;
        InventProfile_RU    inventProfile;
        select firstonly RecId from inventTrans
            where inventTrans.ItemId                == this.ItemId
        join TableId from inventDim
            where inventDim.InventDimId             == inventTrans.InventDimId &&
                  inventDim.InventBatchId           == this.InventBatchId
        join TableId from inventProfile
            where inventProfile.InventProfileId     == inventDim.InventProfileId_RU
               && inventProfile.InventProfileType   == InventProfileType_RU::Bailee;

        return inventTrans.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenInventSum</Name>
				<Source><![CDATA[
    [SysObsolete("Please use the method hasOpenInventSumQuantity if you want to check for open quantity.", false, 31\03\2019)]
    boolean hasOpenInventSum()
    {
        InventSum   inventSum;
        InventDim   inventDim;

        select forceplaceholders firstonly RecId from inventDim
            where inventDim.InventBatchId   == this.InventBatchId
        join TableId from inventSum
            where inventSum.InventDimId     == inventDim.InventDimId    &&
                    inventSum.Closed        == NoYes::No                &&
                    inventSum.ItemId        == this.ItemId;

        return inventDim.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenInventSumQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the batch has <c>InventSum</c> records with open quantity.
    /// </summary>
    /// <returns>true if the batch has <c>InventSum</c> records with open quantity; otherwise, false.</returns>
    public boolean hasOpenInventSumQuantity()
    {
        InventSum   inventSum;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly RecId from inventSum
                where inventSum.InventBatchId   == this.InventBatchId   &&
                      inventSum.ClosedQty       == NoYes::No            &&
                      inventSum.ItemId          == this.ItemId;

            return inventSum.RecId ? true : false;
        }
        else
        {
            InventDim   inventDim;

            select forceplaceholders firstonly RecId from inventDim
            where inventDim.InventBatchId   == this.InventBatchId
            join TableId from inventSum
                where inventSum.InventDimId     == inventDim.InventDimId    &&
                      inventSum.ClosedQty       == NoYes::No                &&
                      inventSum.ItemId          == this.ItemId;

            return inventDim.RecId ? true : false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    void initFromCaller(Args args)
    {
        InventMovement  inventMovement;
        FormRun         callerForm;
        Object          caller;
        int             h;

        if (this.RecId || !args || !args.caller())
        {
            return;
        }

        caller = args.caller();

        // check if caller is not a FormRun
        if (!SysDictClass::isEqualOrSuperclass(classIdGet(caller),classNum(FormRun)))
        {
            return;
        }

        callerForm  = args.caller();

        if (callerForm.name() == formStr(WMSJournalTable))
        {
            for (h = 1; h <= callerForm.dataSourceCount(); h++)
            {
                if (callerForm.dataSource(h).cursor().TableId == tableNum(WMSJournalTrans))
                {
                    this.initFromWMSJournalTrans(callerForm.dataSource(h).cursor() as WMSJournalTrans);
                    return;
                }
            }
        }

        for (h = 1; h <= callerForm.dataSourceCount(); h++)
        {
            inventMovement = InventMovement::constructNoThrow(callerForm.dataSource(h).cursor());
            if (inventMovement)
            {
                break;
            }
        }
        if (inventMovement)
        {
            this.initFromInventMovement(inventMovement);
        }
        else if (callerForm.args() && callerForm.args().caller())
        {
            this.initFromCaller(callerForm.args());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventMovement</Name>
				<Source><![CDATA[
    void initFromInventMovement(InventMovement inventMovement, InventTrans _inventTrans = null)
    {
        PdsVendBatchInfo    localVendBatchInfo = inventMovement.pdsVendBatchInfo();

        this.ItemId     = inventMovement.itemId();

        this.pdsInitFromVendBatchDetails(localVendBatchInfo);

        // set ProdDate here only if it was not set based on the item, batch and vendor batch info
        if (!this.PdsUseVendBatchDate)
        {
            this.ProdDate = inventMovement.batchProdDate(_inventTrans);
        }

        this.pdsCreateAttribute(inventMovement.pdsGetBaseValue());
        inventMovement.pdsInheritBatchData(this, _inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTrans</Name>
				<Source><![CDATA[
    void initFromInventTrans(InventTrans _inventTrans)
    {
        this.ItemId = _inventTrans.ItemId;

        if (#PdsShelfEnabled)
        {
            this.PdsFinishedGoodsDateTested = this.ProdDate;
            this.pdsSetShelfLifeBestBeforeFields(InventTable::find(this.ItemId));
        }

        // set ProdDate here only if it was not set based on the item and batch shelf life info
        if (!this.PdsUseVendBatchDate)
        {
            this.ProdDate = _inventTrans.DateExpected;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWMSJournalTrans</Name>
				<Source><![CDATA[
    void initFromWMSJournalTrans(WMSJournalTrans wmsJournalTrans)
    {
        this.ItemId = wmsJournalTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromTmpInventTransWMS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the batch from the <c>TmpInventTransWMS</c>.
    /// </summary>
    /// <param name = "_tmpInventTransWMS">A <c>TmpInventTransWMS</c> record.</param>
    public void initializeFromTmpInventTransWMS(TmpInventTransWMS _tmpInventTransWMS)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodDateOnInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the production date when inserting a batch record.
    /// </summary>
    /// <param name = "_inventTable">The item.</param>
    /// <returns>The production date.</returns>
    protected InventBatchProdDate prodDateOnInsert(InventTable _inventTable)
    {
        if (this.PdsUseVendBatchDate && this.PdsVendBatchDate)
        {
            return this.PdsVendBatchDate;
        }
        return this.prodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expDateOnInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the expiration date when inserting a batch record.
    /// </summary>
    /// <param name = "_inventTable">The item.</param>
    /// <returns>The expiration date.</returns>
    protected InventBatchExpDate expDateOnInsert(InventTable _inventTable)
    {
        if (!this.ExpDate ||
            this.isExpDateConflictingWithShelLifeInternal(_inventTable))
        {
            if (this.PdsUseVendBatchExp && this.PdsVendExpiryDate)
            {
                return this.PdsVendExpiryDate;
            }
            
            if (this.ProdDate && _inventTable.PdsShelfLife)
            {
                return this.ProdDate + _inventTable.PdsShelfLife;
            }
        }
        return this.ExpDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PdsBestBeforeDateOnInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the best before date when inserting a batch record.
    /// </summary>
    /// <param name = "_inventTable">The item.</param>
    /// <returns>The best before date.</returns>
    protected PdsBestBeforeDate PdsBestBeforeDateOnInsert(InventTable _inventTable)
    {
        if (!this.PdsBestBeforeDate && this.ExpDate)
        {
            return this.ExpDate - _inventTable.PdsBestBefore;
        }
        return this.PdsBestBeforeDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PdsFinishedGoodsDateTestedOnInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the finished goods date when inserting a batch record.
    /// </summary>
    /// <param name = "_inventTable">The item.</param>
    /// <returns>The finished goods date.</returns>
    protected PdsFinishedGoodsDateTested PdsFinishedGoodsDateTestedOnInsert(InventTable _inventTable)
    {
        if (!this.PdsFinishedGoodsDateTested && this.ProdDate)
        {
            return this.ProdDate;
        }
        return this.PdsFinishedGoodsDateTested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PdsShelfAdviceDateOnInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the shelf advice date when inserting a batch record.
    /// </summary>
    /// <param name = "_inventTable">The item.</param>
    /// <returns>The shelf advice date.</returns>    
    protected PdsShelfAdviceDate PdsShelfAdviceDateOnInsert(InventTable _inventTable)
    {
        if (!this.PdsShelfAdviceDate && this.PdsFinishedGoodsDateTested && _inventTable.PdsShelfAdvice)
        {
            return this.PdsFinishedGoodsDateTested + _inventTable.PdsShelfAdvice;
        }
        return this.PdsShelfAdviceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (#PdsShelfEnabled)
        {
            InventTable inventTable = InventTable::find(this.ItemId);

            this.ProdDate = this.prodDateOnInsert(inventTable);
            this.ExpDate = this.expDateOnInsert(inventTable);

            if (inventTable.isShelfLifeItem())
            {
                this.PdsBestBeforeDate = this.PdsBestBeforeDateOnInsert(inventTable);
                this.PdsFinishedGoodsDateTested = this.PdsFinishedGoodsDateTestedOnInsert(inventTable);
                this.PdsShelfAdviceDate = this.PdsShelfAdviceDateOnInsert(inventTable);
            }

            if (!this.PdsDispositionCode)
            {
                PdsDispositionCode pdsDispositionCode = inventTable.modelGroup().PdsDispositionCode;
                if (PdsDispositionMaster::exist(pdsDispositionCode))
                {
                    this.PdsDispositionCode = pdsDispositionCode;
                }
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventOnhand</Name>
				<Source><![CDATA[
    public InventOnhand inventOnhand()
    {
        return InventOnhand::newInventBatch(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventOnhandPhysicalDetailed</Name>
				<Source><![CDATA[
    public InventDimOnHand_Physical inventOnhandPhysicalDetailed()
    {
        InventDim                   inventDimCriteria;
        InventDimParm               inventDimParmCriteria;
        InventDimParm               inventDimParmOnHandLevel;
        InventDimOnHand_Physical    inventDimOnHand_Physical;

        inventDimCriteria.InventBatchId         = this.InventBatchId;
        inventDimParmCriteria.InventBatchIdFlag = NoYes::Yes;
        inventDimParmOnHandLevel.ItemIdFlag     = NoYes::Yes;
        inventDimParmOnHandLevel.setAllInventDim();
        inventDimOnHand_Physical = InventDimOnHand_Physical::newPhysical(   this.ItemId,
                                                                            inventDimCriteria,
                                                                            inventDimParmCriteria,
                                                                            InventDimOnHandLevel::SpecPositive,
                                                                            inventDimParmOnHandLevel);

        return inventDimOnHand_Physical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventOnhandQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the internal on hand buffer based on parameters specified earlier.
    /// </summary>
    /// <returns>
    ///     Internal on hand buffer.
    /// </returns>
    public InventOnHandQty inventOnhandQty()
    {
        return  InventOnHandQty::newInventBatch(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExpDateConflictingWithShelLife</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the shelf life of an item is respected in the batch production and expiry dates.
    /// </summary>
    /// <returns>
    /// true if the dates disrespect the shelf life; otherwise false.
    /// </returns>
    public boolean isExpDateConflictingWithShelLife()
    {
        return this.isExpDateConflictingWithShelLifeInternal(InventTable::find(this.ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExpDateConflictingWithShelLifeInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the shelf life of an item is respected in the batch production and expiry dates.
    /// </summary>
    /// <param name="_inventTable">
    /// The item associated with the batch.
    /// </param>
    /// <returns>
    /// true if the dates disrespect the shelf life; otherwise false.
    /// </returns>
    /// <remarks>
    /// The related <c>InventTable</c> record under validation is required to be the one referenced on the
    /// <c>ItemId</c> field.
    /// </remarks>
    private boolean isExpDateConflictingWithShelLifeInternal(InventTable _inventTable)
    {
        boolean ret = false;

        if (    this.ExpDate
            &&  this.ProdDate
            &&  _inventTable.isShelfLifeItem()) // includes check for configKey
        {
            ret = (_inventTable.PdsShelfLife != (this.ExpDate - this.ProdDate));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsActiveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the active quantity for the current batch.
    /// </summary>
    /// <returns>
    /// The current on hand quantity adjusted by the active potency value.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display PDSNormalizedQty pdsActiveQty()
    {
        if (!InventTable::isPotencyItem(this.ItemId))
        {
            return 0;
        }
        return PDSBalanceIngredient::selectIngredient(PDSIngredientTypeEnum::Active).normalizeQty(this.InventBatchId, this.pdsOnHandQty(), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBaseAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the base potency attribute for the item of this batch.
    /// </summary>
    /// <returns>
    /// The base potency attribute ID.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display PDSBaseAttributeId pdsBaseAttribute()
    {
        return InventTable::find(this.ItemId).PDSBaseAttributeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBaseAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the actual value of the base attribute for this batch.
    /// </summary>
    /// <returns>
    /// The actual value of the base attribute.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display PDSBaseAttributeValues pdsBaseAttributeValue()
    {
        PDSBaseAttributeId itemBaseAttributeId = InventTable::find(this.ItemId).PDSBaseAttributeId;
        if (itemBaseAttributeId == '')
        {
            return '';
        }
        return PdsBatchAttributes::find(this.ItemId, this.InventBatchId, itemBaseAttributeId).PdsBatchAttribValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBaseValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the target value of the base attribute for the base potency attribute for the item.
    /// </summary>
    /// <returns>
    /// The value of the base attribute for the base potency attribute for the item.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display PDSBaseValue pdsBaseValue()
    {
        PDSBaseAttributeId itemBaseAttributeId = InventTable::find(this.ItemId).PDSBaseAttributeId;
        if (itemBaseAttributeId == '')
        {
            return '';
        }
        return PdsBatchAttribByItem::findItemId(this.ItemId, itemBaseAttributeId, TableGroupAll::Table).PDSBaseValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribCheckMandatory</Name>
				<Source><![CDATA[
    public boolean pdsBatchAttribCheckMandatory()
    {
        PdsBatchAttribByItem        byItem;
        PdsBatchAttribByAttribGroup byGroup;
        PdsBatchAttrib              batchAttrib;
        boolean                     ret = false;

        select firstonly RecId
            from   byItem
            where  byItem.PdsBatchAttribCode == TableGroupAll::Table
                && byItem.PdsBatchAttribItemId == this.ItemId
            join   RecId
            from   batchAttrib
            where  batchAttrib.PdsBatchAttribId == byItem.PdsBatchAttribRelation
                && batchAttrib.PdsMandatory;

        if (byItem.RecId)
        {
            ret = true;
        }

        select firstonly RecId
            from   byItem
            where  byItem.PdsBatchAttribCode == TableGroupAll::GroupId
                && byItem.PdsBatchAttribItemId  == this.ItemId
            join   PdsBatchAttribAttribId
            from   byGroup
            where  byGroup.PdsBatchAttribGroupId == byItem.PdsBatchAttribRelation
            join   RecId
            from   batchAttrib
            where  batchAttrib.PdsBatchAttribId == byGroup.PdsBatchAttribAttribId
                && batchAttrib.PdsMandatory;

        if (byItem.RecId)
        {
            ret = true;
        }

        select firstonly RecId
            from   byItem
            where  byItem.PdsBatchAttribCode == TableGroupAll::All
                && byItem.PdsBatchAttribItemId == this.ItemId;

        if (byItem.RecId)
        {
            select firstonly RecId
                from batchAttrib
                where batchAttrib.PdsMandatory;

            if (batchAttrib.RecId)
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribMandatory</Name>
				<Source><![CDATA[
    public PdsBatchAttributes pdsBatchAttribMandatory()
    {
        PdsBatchAttribByItem        byItem;
        PdsBatchAttribByAttribGroup byGroup;
        PdsBatchAttrib              batchAttrib;
        PdsBatchAttributes          batchAttributes;

        while select RecId
            from   byItem
            where  byItem.PdsBatchAttribCode == TableGroupAll::Table
                && byItem.PdsBatchAttribItemId == this.ItemId
            join   PdsBatchAttribId
            from   batchAttrib
            where  batchAttrib.PdsBatchAttribId == byItem.PdsBatchAttribRelation
                && batchAttrib.PdsMandatory
        {
            batchAttributes = PdsBatchAttributes::find(this.ItemId,
                    this.InventBatchId, batchAttrib.PdsBatchAttribId);
            if (!batchAttributes.PdsBatchAttribValue)
            {
                return batchAttributes;
            }
        }
        while select RecId
            from   byItem
            where  byItem.PdsBatchAttribCode == TableGroupAll::GroupId
                && byItem.PdsBatchAttribItemId  == this.ItemId
            join   RecId
            from   byGroup
            where  byGroup.PdsBatchAttribGroupId == byItem.PdsBatchAttribRelation
            join   PdsBatchAttribId
            from   batchAttrib
            where  batchAttrib.PdsBatchAttribId == byGroup.PdsBatchAttribAttribId
                && batchAttrib.PdsMandatory
        {
            batchAttributes = PdsBatchAttributes::find(this.ItemId,
                    this.InventBatchId, batchAttrib.PdsBatchAttribId);
            if (!batchAttributes.PdsBatchAttribValue)
            {
                return batchAttributes;
            }
        }

        select firstonly RecId
            from   byItem
            where  byItem.PdsBatchAttribCode == TableGroupAll::All
                && byItem.PdsBatchAttribItemId == this.ItemId;

        if (byItem.RecId)
        {
            while select PdsBatchAttribId
                from batchAttrib
                where batchAttrib.PdsMandatory
            {
                batchAttributes = PdsBatchAttributes::find(this.ItemId,
                        this.InventBatchId, batchAttrib.PdsBatchAttribId);
                if (!batchAttributes.PdsBatchAttribValue)
                {
                    return batchAttributes;
                }
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribValidateMandatory</Name>
				<Source><![CDATA[
    public boolean pdsBatchAttribValidateMandatory()
    {
        PdsBatchAttribByItem        byItem;
        PdsBatchAttribByAttribGroup byGroup;
        PdsBatchAttrib              batchAttrib;
        PdsBatchAttributes          batchAttributes;

        boolean ret = true;

        while select RecId
            from   byItem
            where  byItem.PdsBatchAttribCode == TableGroupAll::Table
                && byItem.PdsBatchAttribItemId == this.ItemId
            join   PdsBatchAttribId
            from   batchAttrib
            where  batchAttrib.PdsBatchAttribId == byItem.PdsBatchAttribRelation
                && batchAttrib.PdsMandatory
        {
            batchAttributes = PdsBatchAttributes::find(this.ItemId,
                    this.InventBatchId, batchAttrib.PdsBatchAttribId);
            if (!batchAttributes.PdsBatchAttribValue)
            {
                ret = false;
            }
        }
        while select RecId
            from   byItem
            where  byItem.PdsBatchAttribCode == TableGroupAll::GroupId
                && byItem.PdsBatchAttribItemId  == this.ItemId
            join   RecId
            from   byGroup
            where  byGroup.PdsBatchAttribGroupId == byItem.PdsBatchAttribRelation
            join   PdsBatchAttribId
            from   batchAttrib
            where  batchAttrib.PdsBatchAttribId == byGroup.PdsBatchAttribAttribId
                && batchAttrib.PdsMandatory
        {
            batchAttributes = PdsBatchAttributes::find(this.ItemId,
                    this.InventBatchId, batchAttrib.PdsBatchAttribId);
            if (!batchAttributes.PdsBatchAttribValue)
            {
                ret = false;
            }
        }

        select firstonly RecId
            from   byItem
            where  byItem.PdsBatchAttribCode == TableGroupAll::All
                && byItem.PdsBatchAttribItemId == this.ItemId;

        if (byItem.RecId)
        {
            while select PdsBatchAttribId
                from batchAttrib
                where batchAttrib.PdsMandatory
            {
                batchAttributes = PdsBatchAttributes::find(this.ItemId,
                        this.InventBatchId, batchAttrib.PdsBatchAttribId);
                if (!batchAttributes.PdsBatchAttribValue)
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the inventory batch has at least one batch attribute value.
    /// </summary>
    /// <returns>
    /// A <c>NoYes::Yes</c> enumeration value if the batch has at least one batch attribute value;
    /// otherwise, a <c>NoYes::No</c> enumeration value.
    /// </returns>
    public display PdsBatchAttribValues pdsBatchAttribValues()
    {
        PdsBatchAttributes  batchAttributes;
        boolean             ret = false;

        if (#PdsBatchAttribEnabled)
        {
            if (hasTableAccess(
                    tableNum(PdsBatchAttributes),
                    AccessType::View))
            {
                select firstonly RecId
                    from batchAttributes
                    where  batchAttributes.InventBatchId == this.InventBatchId
                        && batchAttributes.PdsBatchAttribValue != '';

                ret = batchAttributes.RecId != 0;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckVendBatchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the current vendor batch information matches the current container values.
    /// </summary>
    /// <param name="_vendBatchInfo">
    /// A container that contains the vendor batch information.
    /// </param>
    /// <returns>
    /// true if the information in the container matches the current batch information; otherwise false .
    /// </returns>
    public boolean pdsCheckVendBatchInfo(container _vendBatchInfo)
    {
        boolean     ret = true;

        #PdsVendBatchPos

        if (this.RecId && InventTable::find(this.ItemId).isShelfLifeItem())
        {
            if (ret && conLen(_vendBatchInfo) >= #vendBatchDtPos)
            {
                ret = this.PdsVendBatchDate == conPeek(_vendBatchInfo,#vendBatchDtPos);
            }

            if (ret && conLen(_vendBatchInfo) >= #useVendDtPos)
            {
                ret = this.PdsUseVendBatchDate == conPeek(_vendBatchInfo,#useVendDtPos);
            }

            if (ret && conLen(_vendBatchInfo) >= #expiryPos)
            {
                ret = this.PdsVendExpiryDate == conPeek(_vendBatchInfo,#expiryPos);
            }

            if (ret && conLen(_vendBatchInfo) >= #useExpiryPos)
            {
                ret = this.PdsUseVendBatchExp == conPeek(_vendBatchInfo,#useExpiryPos);
            }

            if (ret && conLen(_vendBatchInfo) >= #ctry1Pos)
            {
                ret = this.PdsCountryOfOrigin1 == conPeek(_vendBatchInfo,#ctry1Pos);
            }

            if (ret && conLen(_vendBatchInfo) >= #ctry2Pos)
            {
                ret = this.PdsCountryOfOrigin2 == conPeek(_vendBatchInfo,#ctry2Pos);
            }

            if (ret && conLen(_vendBatchInfo) >= #vendBatchIdPos)
            {
                ret = this.PdsVendBatchId == conPeek(_vendBatchInfo,#vendBatchIdPos);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCreateAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the default potency attribute using the specified actual value.
    /// </summary>
    /// <param name="_value">
    /// The actual value for the potency attribute to create.
    /// </param>
    public void pdsCreateAttribute(PDSBaseValue _value)
    {
        PdsBatchAttribByItem attrib;
        PdsBatchAttributes   value;

        if (!_value)
        {
            return;
        }

        attrib = InventTable::pdsFindBaseAttribute(this.ItemId);
        if (attrib && !PdsBatchAttributes::exist(this.ItemId, this.InventBatchId, attrib.PdsBatchAttribRelation))
        {
            ttsBegin;

            value.initValue();
            value.InventBatchId         = this.InventBatchId;
            value.PdsBatchAttribId      = attrib.PdsBatchAttribRelation;
            value.ItemId                = this.ItemId;
            value.PdsBatchAttribValue   = attrib.pdsBatchAttrib().locale2Storage(_value);
            value.insert();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInterCompanyBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void createInterCompanyBatch(ItemId _itemId, InventDim _inventDim)
    {
        InventBatch interCompanyBatch;

        ttsbegin;
        interCompanyBatch.ItemId              = _itemId;
        interCompanyBatch.InventBatchId       = _inventDim.InventBatchId;
        interCompanyBatch.PdsVendBatchId 	  = _inventDim.InventBatchId;
        interCompanyBatch.PdsVendBatchDate    = this.ProdDate;
        interCompanyBatch.PdsVendExpiryDate   = this.ExpDate;
        interCompanyBatch.PdsShelfAdviceDate  = this.PdsShelfAdviceDate;
        interCompanyBatch.PdsBestBeforeDate   = this.PdsBestBeforeDate;
        interCompanyBatch.PdsUseVendBatchDate = NoYes::Yes;
        interCompanyBatch.PdsUseVendBatchExp  = NoYes::Yes;
        interCompanyBatch.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDispositionStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the batch disposition status that is associated to the <c>InventBatch</c> record.
    /// </summary>
    /// <returns>
    /// The disposition status associated with the <c>InventBatch</c> record.
    /// </returns>
    public display PdsBatchDispositionStatus pdsDispositionStatus()
    {
        PdsBatchDispositionStatus   status = PdsStatus::NotApplicable;

        if (hasFieldAccess(
                tableNum(InventBatch),
                fieldNum(InventBatch,PdsDispositionCode),
                AccessType::View)
            &&  this.PdsDispositionCode)
        {
            status = PdsDispositionMaster::find(this.PdsDispositionCode).Status;
        }

        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsEffectiveExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the effective shelf life expiration date for this batch.
    /// </summary>
    /// <returns>
    /// The effective expiration date for the batch; otherwise, null .
    /// </returns>
    /// <remarks>
    /// This method retrieves the shelf life effective expiration date based on the item model group. The
    /// batch expires at midnight on the day that is returned by this method.If shelf life is not enabled
    /// or not used for the item that the batch is associated to or if no expiration date is assigned, and
    /// then this returns null. Otherwise, this method selects the appropriate expiration date for the
    /// batch based on the FEFO rule in the item model group, either expiry date or best before date.Note
    /// that the expiry date that is returned based on the best before date is the actual date on which the
    /// batch will expire.
    /// </remarks>
    public date pdsEffectiveExpiryDate()
    {
        InventModelGroup    modelGroup;
        date                expiryDate = dateNull();

        if (#PdsShelfEnabled)
        {
            modelGroup = InventTable::find(this.ItemId).modelGroup();
            if (modelGroup.PdsCheck
                && modelGroup.PdsPickCriteria == PdsPickCriteria::BestBeforeDate)
            {
                expiryDate = this.PdsBestBeforeDate - 1;
            }
            else
            {
                expiryDate = this.ExpDate;
            }
        }

        return expiryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsInitFromVendBatchDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the vendor information about the batch from the specified vendor details.
    /// </summary>
    /// <param name="_pdsVendBatchInfo">
    /// The vendor batch information to use for the update.
    /// </param>
    /// <param name="_allowEmptyData">
    /// A Boolean value that indicates that empty data can be set on the batch.
    /// </param>
    public void pdsInitFromVendBatchDetails(
        PdsVendBatchInfo _pdsVendBatchInfo,
        boolean          _allowEmptyData   = false)
    {
        InventTable inventTable = InventTable::find(this.ItemId);

        if ((!_pdsVendBatchInfo.isNullOrEmpty()) || _allowEmptyData)
        {
            // copy the batch life information
            this.PdsVendBatchDate    = _pdsVendBatchInfo.VendBatchDate;
            this.PdsUseVendBatchDate = _pdsVendBatchInfo.UseVendBatchDate;

            this.PdsVendExpiryDate   = _pdsVendBatchInfo.VendExpiryDate;
            this.PdsUseVendBatchExp  = _pdsVendBatchInfo.UseVendBatchExp;

            if (_pdsVendBatchInfo.UseVendBatchDate
                || _pdsVendBatchInfo.UseVendBatchExp)
            {
                // Initialize all the dates
                this.pdsSetShelfLifeBestBeforeFields(inventTable);
            }

            // separate the vendor details from the shelf life here
            this.PdsCountryOfOrigin1 = _pdsVendBatchInfo.CountryOfOrigin1;
            this.PdsCountryOfOrigin2 = _pdsVendBatchInfo.CountryOfOrigin2;
            this.PdsVendBatchId      = _pdsVendBatchInfo.VendBatchId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsOnHandQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the on-hand quantity for the current batch.
    /// </summary>
    /// <returns>
    /// The current on-hand quantity.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display PDSAvailableQty pdsOnHandQty()
    {
        return InventOnhand::newInventBatch(this).availPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSetShelfLifeBestBeforeFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the shelf life date fields if the dates of the vendor are used.
    /// </summary>
    /// <param name="_inventTable">
    /// An <c>InventTable</c> record that is used for the item that is listed in the <c>InventBatch</c>
    /// record; otherwise, the current record.
    /// </param>
    /// <param name="_updateNull">
    /// A Boolean value that indicates whether to update the date if no production date has been set.
    /// </param>
    /// <remarks>
    /// This method will indicate whether to use vendor date fields to a <c>NoYes::Yes</c> value. If so the
    /// corresponding field will be updated and the related shelf life date field will be recalculated
    /// based on this information.
    /// </remarks>
    public void pdsSetShelfLifeBestBeforeFields(
        InventTable _inventTable = InventTable::find(this.ItemId),
        boolean     _updateNull  = false)
    {
        if (this.ProdDate == dateNull() && _updateNull)
        {
            this.initializeProductionDate();
            this.PdsFinishedGoodsDateTested = this.ProdDate;
        }

        if (this.PdsUseVendBatchDate)
        {
            this.ProdDate = this.PdsVendBatchDate;
        }

        if (!this.pdsInheritedShelfLife)
        {
            if (_inventTable.PdsShelfLife)
            {
                if (this.PdsUseVendBatchExp)
                {
                    this.ExpDate = this.PdsVendExpiryDate;
                }
                else if (this.ProdDate != dateNull())
                {
                    this.ExpDate = this.ProdDate + _inventTable.PdsShelfLife;
                }
            }

            if ((this.ExpDate != dateNull()) && this.ExpDate != this.orig().ExpDate)
            {
                this.PdsBestBeforeDate = this.ExpDate - _inventTable.PdsBestBefore;
            }

            if (this.PdsUseVendBatchDate && _inventTable.PdsShelfAdvice)
            {
                this.PdsShelfAdviceDate = this.PdsVendBatchDate + _inventTable.PdsShelfAdvice;
            }
            else if ((this.PdsFinishedGoodsDateTested != dateNull()) && _inventTable.PdsShelfAdvice)
            {
                this.PdsShelfAdviceDate = this.PdsFinishedGoodsDateTested + _inventTable.PdsShelfAdvice;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUpdateVendBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the vendor batch values when the batch dates are changed.
    /// </summary>
    public void pdsUpdateVendBatch()
    {
        if (#PdsShelfEnabled)
        {
            if (this.ProdDate != this.orig().ProdDate)
            {
                this.PdsUseVendBatchDate = NoYes::No;
            }

            if (this.ExpDate != this.orig().ExpDate)
            {
                this.PdsUseVendBatchExp  = NoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsValidateBestBeforeDate</Name>
				<Source><![CDATA[
    public boolean pdsValidateBestBeforeDate(TransDate _bestBeforeDate = dateNull())
    {
        boolean     ret = true;
        TransDate   testDate = _bestBeforeDate;

        if (#PdsShelfEnabled)
        {
            if (!testDate)
            {
                testDate = this.PdsBestBeforeDate;
            }

            if (testDate > this.ExpDate)
            {
                ret = checkFailed("@PRO1973");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsValidateExpirationDate</Name>
				<Source><![CDATA[
    public boolean pdsValidateExpirationDate(TransDate _expirationDate = dateNull())
    {
        boolean     ret = true;
        TransDate   testDate = _expirationDate;

        if (!testDate)
        {
            testDate = this.expDate;
        }

        if (this.prodDate && testDate != dateNull() && testDate < this.prodDate)
        {
            ret = checkFailed("@PRO2236");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsValidateCntryofOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the two countries or regions of origin are the same.
    /// </summary>
    /// <returns>
    /// true if the country or region is not the same; otherwise false .
    /// </returns>
    /// <remarks>
    /// If the two fields are the same then an error will be issued.
    /// </remarks>
    public boolean pdsValidateCntryofOrigin()
    {
        boolean ret = true;

        if (this.PdsCountryOfOrigin1 && this.PdsCountryOfOrigin2)
        {
            if (this.PdsCountryOfOrigin1 == this.PdsCountryOfOrigin2)
            {
                ret = checkFailed("@PDS1356");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsValidateExpiryDate</Name>
				<Source><![CDATA[
    public boolean pdsValidateExpiryDate(TransDate _expiryDate = dateNull())
    {
        boolean     ret = true;
        TransDate   testDate = _expiryDate;

        if (#PdsShelfEnabled)
        {
            if (!testDate)
            {
                testDate = this.ExpDate;
            }

            if (this.PdsBestBeforeDate > testDate)
            {
                ret = checkFailed("@PRO1974");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrderStatusDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the status of the associated quality orders.
    /// </summary>
    /// <returns>
    ///    The current quality order status.
    /// </returns>
    display InventTestOrderStatusDisplay qualityOrderStatusDisplay()
    {
        InventQualityOrderTable    orderTable;
        InventDim                  inventDim;

        if (!InventParameters::find().UseQualityManagement)
        {
            return InventTestOrderStatusDisplay::None;
        }

        select firstonly orderTable
            order by OrderStatus
            where orderTable.ReferenceType == InventTestReferenceType::Inventory
               && orderTable.ItemId        == this.ItemId
                exists join inventDim
                where   inventDim.InventDimId   == orderTable.InventDimId
                     && inventDim.InventBatchId == this.InventBatchId;

        return orderTable ? orderTable.statusDisplay() : InventTestOrderStatusDisplay::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    void renamePrimaryKey()
    {
        InventDimRenameDimValue inventDimRenameDimValue = InventDimRenameDimValue::newInventBatch(this);

        if (inventDimRenameDimValue.validate())
        {
            ttsbegin;
            inventDimRenameDimValue.runOperation();
            ttscommit;

            if (FormDataUtil::isFormDataSource(this))
            {
                inventDimRenameDimValue.updateCallerForm(FormDataUtil::getFormDataSource(this));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates a table.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    Quality management is used for the company and an open quality order exists for this batch.
    /// </exception>
    public void update()
    {
        if (this.isAssociatedWithOpenQualityOrders())
        {
            throw error("@SYS113930");
        }

        if (!this.pdsValidateBestBeforeDate())
        {
            throw error(strFmt("@SYS85685", tableId2pname(tableNum(InventBatch))));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssociatedWithOpenQualityOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this batch is associated with open quality orders.
    /// </summary>
    /// <returns>true if the batch is associated with open quality orders; otherwise, false.</returns>
    protected boolean isAssociatedWithOpenQualityOrders()
    {
        return InventParameters::find().UseQualityManagement 
                && !this.equal(this.orig()) 
                && this.qualityOrderStatusDisplay() == InventTestOrderStatusDisplay::Open;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBaseBatchAttribValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the base attribute value for the inventory batch.
    /// </summary>
    /// <param name="_attributeValue">
    ///     The specified attribute value.
    /// </param>
    public void updateBaseBatchAttribValue(PdsBatchAttribValue _attributeValue)
    {
        PdsBatchAttribByItem    attribByItem;
        PdsBatchAttributes      attribValue;

        attribByItem = InventTable::pdsFindBaseAttribute(this.ItemId);

        if (attribByItem.RecId != 0)
        {
            if (!attribByItem.pdsCheckAttribCriteria(_attributeValue))
            {
                // The above call issues error on the infolog when the validation fails.
                throw error("@SYS18447");
            }

            ttsbegin;

            attribValue = PdsBatchAttributes::find(this.ItemId, this.InventBatchId, attribByItem.PdsBatchAttribRelation, true);

            if (attribValue)
            {
                attribValue.PdsBatchAttribValue = _attributeValue;

                if (!attribValue.PdsBatchAttribId)
                {
                    attribValue.PdsBatchAttribId = attribByItem.PdsBatchAttribRelation;
                }

                attribValue.update();
            }
            else
            {
                attribValue.initValue();
                attribValue.ItemId              = this.ItemId;
                attribValue.InventBatchId       = this.InventBatchId;
                attribValue.PdsBatchAttribId    = attribByItem.PdsBatchAttribRelation;
                attribValue.PdsBatchAttribValue = _attributeValue;
                attribValue.insert();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchDispCodeForPicking</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the selected batch is available for picking.
    /// </summary>
    /// <param name="_workTransType">
    ///     The work transaction type.
    /// </param>
    /// <returns>
    ///     Returns true if the batch is available for picking.
    /// </returns>
    public boolean validateBatchDispCodeForPicking(WHSWorkTransType _workTransType)
    {
        boolean                 ret = true;
        PdsDispositionMaster    pdsDispositionMaster;

        pdsDispositionMaster = PdsDispositionMaster::find(this.PdsDispositionCode);

        switch (_workTransType)
        {
            case WHSWorkTransType::KanbanPick:
            case WHSWorkTransType::ProdPick:
                if (pdsDispositionMaster.PdsProdBlockPick)
                {
                    ret = false;
                }
                break;
            case WHSWorkTransType::Sales:
                if (pdsDispositionMaster.PdsSalesBlockPick)
                {
                    ret = false;
                }
                break;
            case WHSWorkTransType::TransferIssue:
                if (pdsDispositionMaster.PdsTransBlockPick)
                {
                    ret = false;
                }
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (this.hasOpenInventSumQuantity())
        {
            ret = checkFailed(strFmt("@SYS79457", tablePName(InventSum)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        boolean ret;

        ret = super(_fieldIdToCheck);

        // <GEERU>
        if (ret && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(InventBatch, ExpDate):
                case fieldNum(InventBatch, ProdDate):
                    ret = this.checkInventBailee_RU() && ret;
                    break;
            }
        }
        // </GEERU>

        if (ret && #PdsShelfEnabled)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(InventBatch,PdsVendBatchDate):
                    if (this.PdsVendBatchDate > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                    {
                        ret = checkFailed("@PRO2230");
                    }
                    break;
                case fieldNum(InventBatch,PdsUseVendBatchDate):
                    if (this.PdsUseVendBatchDate
                        && this.PdsVendBatchDate == dateNull())
                    {
                        ret = checkFailed("@PRO2231");
                    }
                    break;
                case fieldNum(InventBatch,PdsVendExpiryDate):
                    ret = InventBatch::checkVendorExpiryDate(this.PdsVendExpiryDate, this.PdsVendBatchDate);
                    break;
                case fieldNum(InventBatch,PdsUseVendBatchExp):
                    if (this.PdsUseVendBatchExp
                        && this.PdsVendExpiryDate == dateNull())
                    {
                        ret = checkFailed("@PDS1352");
                    }
                    break;
                case fieldNum(InventBatch,PdsCountryOfOrigin1):
                //Fall through
                case fieldNum(InventBatch,PdsCountryOfOrigin2):
                    ret = this.pdsValidateCntryofOrigin();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && this.pdsValidateBestBeforeDate();

        if (InventBatchExpirationDateValidationFlight::instance().isEnabled())
        {
            ret = ret && this.pdsValidateExpirationDate();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist(
        InventBatchId   _batchId,
        ItemId          _itemId)
    {
        if (_itemId && _batchId && ! InventBatch::exist(_batchId, _itemId))
        {
            return checkFailed(strFmt(InventBatch::txtNotExist(), _batchId, _itemId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(
        InventBatchId   _batchId,
        ItemId          _itemId)
    {
        return (select firstonly RecId from inventBatch
                    where inventBatch.ItemId        == _itemId    &&
                          inventBatch.InventBatchId == _batchId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsNullDateShelfLifeBatches</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there are any linked batch produced that does not have a shelf life date
    /// specified.
    /// </summary>
    /// <param name="_prodId">
    /// The ID of the production order that is being reported as finished.
    /// </param>
    /// <returns>
    /// true if any batch exists for a shelf-life item without any date specified; otherwise, false.
    /// </returns>
    public static boolean existsNullDateShelfLifeBatches(ProdId _prodId)
    {
        ProdParmReportFinished  prodParmRAF;
        InventTable             inventTable;
        InventDim               inventDim;
        InventBatch             inventBatch;

        if (#PdsShelfEnabled && _prodId)
        {
            //select the first unprocessed RAF line for the specified order
            select firstonly RecId, InventDimId from prodParmRAF
                where   prodParmRAF.ProdId           == _prodId
                    &&  prodParmRAF.ExecutedDateTime == utcDateTimeNull()
                    &&  prodParmRAF.QtyGood > 0
            //that has a batch number identified
            join  InventDimId, InventBatchId    from inventDim
                where   inventDim.InventBatchId  != ''
                    &&  inventDim.InventDimId    == prodParmRAF.InventDimId
            //and that batch has a null production date
            join  InventBatchId, ItemId         from inventBatch
                where   inventBatch.InventBatchId == inventDim.InventBatchId
                &&      inventBatch.ProdDate      == dateNull()
            //and is connected to a shelf life item
            join  ItemId, PdsShelfLife          from inventTable
                where   inventTable.ItemId        == inventBatch.ItemId
                &&      inventTable.ItemId        == prodParmRAF.ItemId
                &&      inventTable.PdsShelfLife != 0;
        }

        return (prodParmRAF.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static InventBatch find(InventBatchId _inventBatchId, ItemId _itemId, boolean _forupdate = false)
    {
        InventBatch inventBatch;

        inventBatch.selectForUpdate(_forupdate);

        if (_inventBatchId)
        {
            select firstonly inventBatch
                where inventBatch.ItemId            == _itemId
                   && inventBatch.InventBatchId     == _inventBatchId;
        }

        return inventBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find an <c>InventBatch</c> record if it exists or create a new one if it does not.
    /// </summary>
    /// <param name = "_inventBatchId">Item batch number.</param>
    /// <param name = "_itemId">Item number.</param>
    /// <param name = "_expirationDate">Item batch expiration date.</param>
    /// <param name = "_forupdate">Select record for update?</param>
    /// <returns>Corresponding <c>InventBatch</c> record.</returns>
    public static InventBatch findOrCreate(
        InventBatchId _inventBatchId,
        ItemId _itemId,
        ExpirationDate _expirationDate = dateNull(),
        boolean _forupdate = false)
    {
        InventBatch inventBatch;

        inventBatch.selectForUpdate(_forupdate);

        if (_inventBatchId != '' && _itemId != '')
        {
            inventBatch = InventBatch::find(_inventBatchId, _itemId, _forupdate);

            if (inventBatch.RecId == 0)
            {
                inventBatch.inventBatchId = _inventBatchId;
                inventBatch.itemId = _itemId;
                inventBatch.expDate = _expirationDate;
                inventBatch.insert();
            }
        }

        return inventBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateWithProdDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find an <c>InventBatch</c> record if it exists or create a new one if it does not.
    /// </summary>
    /// <param name = "_inventBatchId">Item batch number.</param>
    /// <param name = "_itemId">Item number.</param>
    /// <param name = "_prodDate">Item batch manufactoring date.</param>
    /// <param name = "_forupdate">Select record for update?</param>
    /// <returns>Corresponding <c>InventBatch</c> record.</returns>
    public static InventBatch findOrCreateWithProdDate(
        InventBatchId       _inventBatchId,
        ItemId              _itemId,
        InventBatchProdDate _prodDate = dateNull(),
        boolean _forupdate = false)
    {
        InventBatch inventBatch;

        inventBatch.selectForUpdate(_forupdate);

        if (_inventBatchId != '' && _itemId != '')
        {
            inventBatch = InventBatch::find(_inventBatchId, _itemId, _forupdate);

            if (!inventBatch.RecId)
            {
                inventBatch.inventBatchId = _inventBatchId;
                inventBatch.itemId = _itemId;
                inventBatch.prodDate = _prodDate;

                if (!inventBatch.validateWrite())
                {
                    throw error(strFmt('@SYS55952', _inventBatchId, _itemId));
                }

                inventBatch.insert();
            }
        }

        return inventBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateWithExpAndProdDate</Name>
				<Source><![CDATA[
    internal static InventBatch findOrCreateWithExpAndProdDate(
        InventBatchId       _inventBatchId,
        ItemId              _itemId,
        ExpirationDate      _expirationDate,
        InventBatchProdDate _prodDate,
        boolean             _forupdate = false)
    {
        InventBatch inventBatch;

        inventBatch.selectForUpdate(_forupdate);

        if (_inventBatchId != '' && _itemId != '')
        {
            inventBatch = InventBatch::find(_inventBatchId, _itemId, _forupdate);

            if (!inventBatch.RecId)
            {
                inventBatch.inventBatchId = _inventBatchId;
                inventBatch.itemId = _itemId;
                inventBatch.expDate = _expirationDate;
                inventBatch.prodDate = _prodDate;

                if (!inventBatch.validateWrite())
                {
                    throw error(strFmt('@SYS55952', _inventBatchId, _itemId));
                }

                inventBatch.insert();
            }
        }

        return inventBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupVendBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a standard lookup dialog with the vendor batch numbers available for the selected item or batch.
    /// </summary>
    /// <param name="_itemId">
    /// Product number.
    /// </param>
    /// <param name="_inventBatchId">
    /// Batch number; optional.
    /// </param>
    /// <param name="_formControl">
    /// Control for which the lookup needs to be enabled.
    /// </param>
    /// <remarks>
    /// <para>If the specified batch number is blank the lookup will show all vendor batch numbers available for the item.</para>
    /// </remarks>
    public static void lookupVendBatchId(ItemId _itemId, InventBatchId _inventBatchId, FormControl _formControl)
    {
        InventBatch::vendBatchIdLookup(_itemId, _inventBatchId, _formControl).performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrLookupAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up all batches.
    /// </summary>
    /// <param name="lookupCtrl">
    /// The control on which to perform the look up.
    /// </param>
    public static void mcrLookupAll(
        FormStringControl   lookupCtrl    )
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventBatch), lookupCtrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventBatch));

        sysTableLookup.addLookupfield(fieldNum(InventBatch, InventBatchId));
        sysTableLookup.addLookupfield(fieldNum(InventBatch, ProdDate));
        sysTableLookup.addLookupfield(fieldNum(InventBatch, ExpDate));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrLookupByGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Looks up all batches for an itemGroup.
    /// </summary>
    /// <param name="lookupCtrl">
    /// The control on which the look up has to be performed.
    /// </param>
    /// <param name="_itemGroupId">
    /// The item group ID to be used for the look up.
    /// </param>
    public static void mcrLookupByGroup(
        FormStringControl lookupCtrl,
        ItemGroupId _itemGroupId)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventBatch), lookupCtrl);
        Query                   query = new Query();
        QueryBuildDataSource    qbdsInventbatch;
        QueryBuildDataSource    qbdsInventTable;
        QueryBuildDataSource    qbdsInventItemGroupItem;
        QueryBuildRange         qbdsRangeItemGroup;

        qbdsInventbatch = query.addDataSource(tableNum(InventBatch));
        qbdsInventbatch.orderMode(OrderMode::GroupBy);
        qbdsInventbatch.addSortField(fieldNum(InventBatch, InventBatchId));

        // Item joined to batch
        qbdsInventTable = qbdsInventbatch.addDataSource(tableNum(InventTable));
        qbdsInventTable.addLink(fieldNum(InventBatch, ItemId), fieldNum(InventTable , ItemId));

        // Group joined to item, filter by item group
        qbdsInventItemGroupItem = qbdsInventTable.addDataSource(tableNum(InventItemGroupItem));
        qbdsInventItemGroupItem.addLink(fieldNum(InventTable, ItemId), fieldNum(InventItemGroupItem, ItemId));
        qbdsInventItemGroupItem.addLink(fieldNum(InventTable, DataAreaId), fieldNum(InventItemGroupItem, DataAreaId));
        qbdsRangeItemGroup = qbdsInventItemGroupItem.addRange(fieldNum(InventItemGroupItem, ItemGroupId));
        qbdsRangeItemGroup.value(queryValue(_itemGroupId));

        // Initialize lookup
        sysTableLookup.addLookupfield(fieldNum(InventBatch, InventBatchId));
        sysTableLookup.addLookupfield(fieldNum(InventBatch, ProdDate));
        sysTableLookup.addLookupfield(fieldNum(InventBatch, ExpDate));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrLookupByItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up all batches for a given <c>IemID</c>.
    /// </summary>
    /// <param name="lookupCtrl">
    ///  The control on which the look up is performed.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemID</c> for which to perform the look up.
    /// </param>
    public static void mcrLookupByItem(
        FormStringControl   lookupCtrl,
        ItemId  _itemId    )
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventBatch), lookupCtrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventBatch));
        QueryBuildRange         queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventBatch, ItemId));

        queryBuildRange.value(_itemId);
        sysTableLookup.addLookupfield(fieldNum(InventBatch, InventBatchId));
        sysTableLookup.addLookupfield(fieldNum(InventBatch, ProdDate));
        sysTableLookup.addLookupfield(fieldNum(InventBatch, ExpDate));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckDisposition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the disposition master settings and displays the selected options in an infolog.
    /// </summary>
    /// <param name="_inventBatchId">
    /// The batch id.
    /// </param>
    /// <param name="_itemId">
    /// The item id.
    /// </param>
    /// <param name="_displayType">
    /// The type of disposition options to show; optional.
    /// </param>
    /// <remarks>
    /// The method no longer returns a boolean value indicating if lines were added to the infolog.
    /// Use the Global::infologLine() API determine if lines were added.
    /// </remarks>
    public static void pdsCheckDisposition(InventBatchId _inventBatchId,
        ItemId              _itemId,
        PdsDispDisplayType  _displayType = PdsDispDisplayType::Blocked)
    {
        InventBatch             inventBatch;
        PdsDispositionMaster    dispMaster;
        str                     strInitBlocked;
        container               strBlocked;
        str                     strInitAvailable;
        container               strAvailable;
        int                     i;

        inventBatch = InventBatch::find(_inventBatchId,_itemId);

        if (!inventBatch)
        {
            return;
        }

        if (inventBatch.PdsDispositionCode
            && inventBatch.pdsDispositionStatus() == PdsStatus::Unavailable)
        {
            select firstonly dispMaster
                where  dispMaster.DispositionCode == inventBatch.PdsDispositionCode
                    && dispMaster.Status == PdsStatus::Unavailable;

            if (dispMaster)
            {
                setPrefix(strFmt("@PRO906",_inventBatchId,_itemId));
                strInitBlocked      = "@PRO2106";
                strInitAvailable    = "@PRO2107";

                [strBlocked,strAvailable] = dispMaster.getDispositionFields();

                switch (_displayType)
                {
                    case PdsDispDisplayType::Both:
                        setPrefix(strInitAvailable);
                        for (i = 1; i <= conLen(strAvailable); i++)
                        {
                            info(conPeek(strAvailable,i));
                        }

                        setPrefix(strInitBlocked);
                        for (i = 1; i <= conLen(strBlocked); i++)
                        {
                            info(conPeek(strBlocked,i));
                        }
                        break;
                    case PdsDispDisplayType::Available:
                        setPrefix(strInitAvailable);
                        for (i = 1; i <= conLen(strAvailable); i++)
                        {
                            info(conPeek(strAvailable,i));
                        }
                        break;
                    case PdsDispDisplayType::Blocked:
                        setPrefix(strInitBlocked);
                        for (i = 1; i <= conLen(strBlocked); i++)
                        {
                            info(conPeek(strBlocked,i));
                        }
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the batch shelf life has not, or will not expire before the date provided.
    /// </summary>
    /// <param name="_inventBatchId">
    /// The batch ID for which to verify the expiration date.
    /// </param>
    /// <param name="_itemId">
    /// The item ID for which to verify the expiration date.
    /// </param>
    /// <param name="_date">
    /// A date value that will be used to verify that the expiration date is beyond this date.
    /// </param>
    /// <param name="_displayMsg">
    /// A Boolean value that indicates whether a message will be returned if the batch is found to be
    /// expired.
    /// </param>
    /// <param name="_custId">
    /// The customer account can be provided for sales order validation. This will allow for the retrieval
    /// of sellable days information.
    /// </param>
    /// <param name="_override">
    /// Determines whether the expiration check will be done.
    /// </param>
    /// <param name="_orderInventDim">
    /// The <c>InventDim</c> record for a sales order that will be used as part of the sellable days search.
    /// </param>
    /// <returns>
    /// true if the batch is still valid for the date provided; otherwise false .
    /// </returns>
    /// <remarks>
    /// The expiration check will be conducted based on the parameters of the item's InventModelGroup. This
    /// will determine whether the check has to be done and against which batch date the check will be
    /// conducted.
    /// </remarks>
    public static boolean pdsCheckExpiryDate(
        InventBatchId   _inventBatchId,
        ItemId          _itemId,
        date            _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        boolean         _displayMsg = true,
        CustAccount     _custId = '',
        PdsOverrideFEFO _override = false,
        InventDim       _orderInventDim = null)
    {
        InventTable         inventTable;
        InventModelGroup    inventModelGroup;
        InventBatch         inventBatch;
        date                checkDate;
        PdsSellableDays     pdsDays = 0;
        boolean             ret = true;
        InventDim           orderInventDim;

        void batchExpired(FieldId _fieldId)
        {
            SysDictField    sd;

            if (_displayMsg)
            {
                if (pdsDays > 0)
                {
                    info(strFmt("@PRO2200",pdsDays));
                }

                sd  = new SysDictField(tableNum(InventBatch),_fieldId);
                ret = checkFailed(strFmt("@PRO2199",
                                             _inventBatchId,
                                             sd.label()));
            }
            else
            {
                ret = false;
            }
        }

        if (!_override)
        {
            inventTable = InventTable::find(_itemId);
            inventBatch = InventBatch::find(_inventBatchId,_itemId);
            inventModelGroup = InventTable::find(_itemId).modelGroup();

            if (inventBatch && inventTable.isShelfLifeItem())
            {
                if (_custId)
                {
                    //pdsDays = CustTable::find(_custId).PdsSellableDays;
                    if (!_orderInventDim)
                    {
                        orderInventDim
                            = InventDim::find(InventDim::inventDimIdBlank());
                    }
                    else
                    {
                        orderInventDim = _orderInventDim;
                    }

                    pdsDays = PdsCustSellableDays::findValidRec(
                                _itemId,
                                _custId,
                                orderInventDim).SellableDays;
                }

                if (!prmisDefault(_date))
                {
                    checkDate = _date + pdsDays;
                }

                if (!inventModelGroup.PdsCheck || inventModelGroup.PdsPickCriteria == PdsPickCriteria::ExpiryDate)
                {
                    if (checkDate > inventBatch.ExpDate
                        && inventBatch.ExpDate != dateNull())
                    {
                        batchExpired(fieldNum(InventBatch,ExpDate));
                    }
                }
                else
                {
                    if (checkDate >= inventBatch.PdsBestBeforeDate
                        && inventBatch.PdsBestBeforeDate != dateNull())
                    {
                        batchExpired(fieldNum(InventBatch,PdsBestBeforeDate));
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckNullBatchDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the product batch specified has empty shelf dates.
    /// </summary>
    /// <param name="_batchId">
    /// The batch number specified.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item specified.
    /// </param>
    /// <returns>
    /// true if the batch has no dates and the item is shelf life; otherwise false.
    /// </returns>
    /// <remarks>
    /// false if the item is not shelf life or the batch number is not specified; otherwise, true.
    /// </remarks>
    public static boolean pdsCheckNullBatchDate(
        InventBatchId   _batchId,
        ItemId          _itemId)
    {
        InventBatch inventBatch;
        boolean     existsNullDateBatch = false;

        if (_batchId && _itemId && InventTable::find(_itemId).isShelfLifeItem())
        {
            select firstonly ProdDate
                from inventBatch
                where  inventBatch.InventBatchId == _batchId
                    && inventBatch.ItemId        == _itemId;

            existsNullDateBatch = inventBatch.ProdDate == dateNull();
        }

        return existsNullDateBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckUnavailable</Name>
				<Source><![CDATA[
    public static boolean pdsCheckUnavailable(InventBatchId _batchId,
        ItemId _itemId)
    {
        InventBatch inventBatch;

        select firstonly inventBatch
            where  inventBatch.InventBatchId == _batchId
                && inventBatch.ItemId        == _itemId;

        return inventBatch.pdsDispositionStatus() == PdsStatus::Unavailable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCreateSameLotBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new batch for the same lot batch reservation functionality.
    /// </summary>
    /// <param name="_movement">
    /// The movement record for which to create the batch.
    /// </param>
    /// <returns>
    /// The created inventory batch record.
    /// </returns>
    public static InventBatch pdsCreateSameLotBatch(
        InventMovement  _movement)
    {
        InventBatch     inventBatch;
        InventTable     inventTable;
        InventNumGroup  inventNumGroupBatch;

        NumberSeq   numberSeq;

        inventTable = InventTable::find(_movement.itemId());
        try
        {
            ttsbegin;
            inventBatch.initValue();
            inventBatch.ItemId      = inventTable.ItemId;
            inventBatch.initializeProductionDate();
            inventBatch.PdsSameLot  = NoYes::Yes;

            if (inventTable.BatchNumGroupId
                && InventNumGroup::find(inventTable.BatchNumGroupId).NumberSequenceTable)
            {
                inventNumGroupBatch = InventNumGroup::find(
                                        inventTable.BatchNumGroupId);
                inventBatch.InventBatchId
                    = inventNumGroupBatch.buildNumberParameters(
                        _movement.transDate(),
                        _movement.transRefId(),
                        _movement.transId(),
                        extendedTypeNum(InventBatchId));
            }
            else
            {
                numberSeq = NumberSeq::newGetNum(
                    InventParameters::numRefInventBatchSerialId());
                inventBatch.InventBatchId = numberSeq.num();
            }

            if (#PdsShelfEnabled)
            {
                inventBatch.PdsFinishedGoodsDateTested  = inventBatch.ProdDate;
                inventBatch.PdsUseVendBatchDate         = NoYes::No;
                inventBatch.PdsVendBatchDate            = dateNull();
                inventBatch.pdsSetShelfLifeBestBeforeFields(inventTable);
            }

            inventBatch.insert();

            if (numberSeq)
            {
                numberSeq.used();
            }

            ttscommit;
        }
        catch (Exception::Error)
        {
            numberSeq.abort();
            throw error("@PDS579");
        }

        return inventBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsFindOrCreateSameLotBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a new batch for the same lot batch reservation feature.
    /// </summary>
    /// <param name="_movement">
    /// The inventory movement for which to create or find the batch.
    /// </param>
    /// <param name="_qty">
    /// The quantity for which to create or find the batch.
    /// </param>
    /// <returns>
    /// The inventory batch that has been created for the item or, if the requirement has to be
    /// consolidated, the inventory batch created by an earlier call to the method.
    /// </returns>
    public static InventBatch pdsFindOrCreateSameLotBatch(
        InventMovement  _movement,
        InventQty       _qty)
    {
        InventBatch             inventBatch;
        InventTrans             inventTrans;
        InventTrans             tmpTrans;
        InventTransOrigin       inventTransOrigin;
        InventDim               inventDim;
        InventDim               tmpDim;
        InventQty               maxBatchQty, maxQty;
        InventQty               maxInventQty;
        InventTable             inventTable = InventTable::find(_movement.itemId());
        boolean                 overMax = true;
        ReqPO                   reqPO;
        InventDim               reqPODim;

        if (inventTable.modelGroup().PdsConsReq)
        {
            if (inventTable.BatchNumGroupId)
            {
                maxBatchQty = InventNumGroup::find(inventTable.BatchNumGroupId).PerQty;
            }

            while select InventBatchId, RecId from inventBatch
                where  inventBatch.ItemId           == _movement.itemId()
                    && inventBatch.PdsSameLot       == NoYes::Yes
                join TableId from inventDim
                where  inventDim.InventBatchId      == inventBatch.InventBatchId
                notexists join inventTrans
                where  inventTrans.ItemId           == _movement.itemId()
                    && inventDim.InventDimId        == inventTrans.InventDimId
                    && inventTrans.InventDimId      == inventDim.InventDimId
                    && inventTrans.StatusIssue      == StatusIssue::None
                    && inventTrans.StatusReceipt    != StatusReceipt::None
            {
                select RecId from reqPO
                    join TableId from reqPODim
                    where reqPODim.InventBatchId == inventBatch.InventBatchId
                    && reqPODim.InventDimId      == reqPO.CovInventDimId;

                if (reqPO.RecId)
                {
                    continue;
                }

                inventTransOrigin = inventTrans.inventTransOrigin();
                switch (inventTransOrigin.ReferenceCategory)
                {
                    case InventTransType::Production :
                        if (inventTransOrigin.originator())
                        {
                            continue;
                        }
                        break;
                    case InventTransType::Purch :
                        if (inventTransOrigin.originator())
                        {
                            continue;
                        }
                        break;
                }

                select sum(Qty) from tmpTrans
                    where  tmpTrans.ItemId == _movement.itemId()
                    join   TableId from tmpDim
                    where  tmpDim.InventDimId == tmpTrans.InventDimId
                    &&     tmpDim.InventBatchId == inventBatch.InventBatchId;

                maxInventQty = InventItemInventSetup::find(_movement.itemId(), inventDim.InventDimId).highestQty();
                if (maxBatchQty > 0)
                {
                    if (maxInventQty > 0)
                    {
                        maxQty = min(maxBatchQty,maxInventQty);
                    }
                    else
                    {
                        maxQty = maxBatchQty;
                    }
                }
                else
                {
                    maxQty = maxInventQty;
                }

                if (!maxQty || maxQty >= abs(tmpTrans.Qty) + abs(_qty))
                {
                    overMax = false;
                    break;
                }
            }
        }

        if (!inventBatch.RecId && overMax)
        {
            inventBatch = InventBatch::pdsCreateSameLotBatch(_movement);
        }

        return inventBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsLoadAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads batch attributes for select inventory batch.
    /// </summary>
    /// <param name="_batch">
    /// The inventory batch for which attributes are created.
    /// </param>
    public static void pdsLoadAttributes(InventBatch _batch)
    {
        PdsBatchAttribByItem byItem;
        PdsBatchAttributes   pdsBatchAttributes;
        RecordInsertList     batchAttributesList = new RecordInsertList(tableNum(PdsBatchAttributes));

        void createBatchAttribute(PdsBatchAttribId _attributeId)
        {
            if (!PdsBatchAttributes::exist(_batch.ItemId, _batch.InventBatchId, _attributeId))
            {
                pdsBatchAttributes.clear();
                pdsBatchAttributes.initValue();
                pdsBatchAttributes.ItemId        = _batch.ItemId;
                pdsBatchAttributes.InventBatchId = _batch.InventBatchId;
                pdsBatchAttributes.PdsBatchAttribId = _attributeId;

                batchAttributesList.add(pdsBatchAttributes);
            }
        }

        if (!_batch.RecId)
        {
            throw error("@PRO1677");
        }

        select firstonly RecId
            from   byItem
            where  byItem.PdsBatchAttribCode    == TableGroupAll::All
                && byItem.PdsBatchAttribItemId  == _batch.ItemId;

        if (byItem.RecId)
        {
            PdsBatchAttrib all;

            while select PdsBatchAttribId
                from  all
            {
                createBatchAttribute(all.PdsBatchAttribId);
            }
        }
        else
        {
            while select PdsBatchAttribRelation
                from   byItem
                where  byItem.PdsBatchAttribCode   == TableGroupAll::Table
                    && byItem.PdsBatchAttribItemId == _batch.ItemId
            {
                createBatchAttribute(byItem.PdsBatchAttribRelation);
            }

            PdsBatchAttribByAttribGroup byGroup;

            while select PdsBatchAttribRelation
                from   byItem
                where  byItem.PdsBatchAttribCode    == TableGroupAll::GroupId
                    && byItem.PdsBatchAttribItemId  == _batch.ItemId
            {
                while select PdsBatchAttribAttribId
                    from  byGroup
                    where byGroup.PdsBatchAttribGroupId == byItem.PdsBatchAttribRelation
                {
                    createBatchAttribute(byGroup.PdsBatchAttribAttribId);
                }
            }
        }

        batchAttributesList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUpdateNullBatchDateRAF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ProdDate</c> field of the <c>InventBatch</c> record with information from the
    /// <c>ProdParmReportFinished</c> record for those that are blank.
    /// </summary>
    /// <param name="_prodId">
    /// The product ID for which to update batches.
    /// </param>
    public static void pdsUpdateNullBatchDateRAF(
        ProdId  _prodId)
    {
        InventDim               inventDim;
        InventBatch             inventBatch;
        ProdParmReportFinished  prodParmRAF;

        if (#PdsShelfEnabled)
        {
            while select InventDimId, ItemId, TransDate from prodParmRAF
                where  prodParmRAF.ProdId == _prodId
                    && prodParmRAF.ExecutedDateTime == utcDateTimeNull()
                    && prodParmRAF.QtyGood > 0
            {
                ttsbegin;
                inventDim = InventDim::find(prodParmRAF.InventDimId);
                inventBatch = InventBatch::find(inventDim.InventBatchId,
                                                prodParmRAF.ItemId,
                                                true);
                if (inventBatch
                    && inventBatch.ProdDate == dateNull())
                {
                    inventBatch.ProdDate = prodParmRAF.TransDate;
                    inventBatch.PdsFinishedGoodsDateTested
                        = prodParmRAF.TransDate;

                    inventBatch.pdsSetShelfLifeBestBeforeFields(
                        InventTable::find(prodParmRAF.ItemId));
                    inventBatch.update();
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUpdateNullBatchDateTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the vendor batch information about an <c>InventBatch</c> record.
    /// </summary>
    /// <param name="_tmpInventTrans">
    /// The <c>TmpInventTransWMS</c> record buffer that contains the references for the inventory batches
    /// to update.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item that the batches are associated with.
    /// </param>
    public static void pdsUpdateNullBatchDateTrans(
        TmpInventTransWMS _tmpInventTrans,
        ItemId            _itemId)
    {
        InventDim           inventDim;
        InventBatch         inventBatch;
        PdsVendBatchDate    vendDate;

        if (#PdsShelfEnabled)
        {
            while select _tmpInventTrans
                where _tmpInventTrans.PdsUpdateBatchDate == PdsUpdateBatchDate::Update
            {
                ttsbegin;
                inventDim = InventDim::find(_tmpInventTrans.InventDimId);
                inventBatch = InventBatch::find(inventDim.InventBatchId,
                                                _itemId,
                                                true);
                if (inventBatch
                    && inventBatch.ProdDate == dateNull())
                {
                    if (_tmpInventTrans.PdsUseVendBatchDate)
                    {
                        vendDate = _tmpInventTrans.PdsVendBatchDate;
                        inventBatch.ProdDate = vendDate;
                        inventBatch.PdsFinishedGoodsDateTested = vendDate;
                        inventBatch.PdsVendBatchDate = vendDate;
                        inventBatch.PdsUseVendBatchDate = true;
                    }
                    else
                    {
                        inventBatch.initializeProductionDate();
                        inventBatch.PdsFinishedGoodsDateTested = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    }

                    if (_tmpInventTrans.PdsUseVendBatchExp)
                    {
                        inventBatch.PdsVendExpiryDate
                            = _tmpInventTrans.PdsVendExpiryDate;
                        inventBatch.PdsUseVendBatchExp
                            = _tmpInventTrans.PdsUseVendBatchExp;
                    }

                    inventBatch.PdsCountryOfOrigin1
                        = _tmpInventTrans.PdsCountryOfOrigin1;
                    inventBatch.PdsCountryOfOrigin2
                        = _tmpInventTrans.PdsCountryOfOrigin2;
                    inventBatch.PdsVendBatchId = _tmpInventTrans.PdsVendBatchId;

                    inventBatch.pdsSetShelfLifeBestBeforeFields(
                        InventTable::find(inventBatch.ItemId));
                    inventBatch.update();

                    info(strFmt(
                            "@PRO2401",
                            inventBatch.InventBatchId,
                            inventBatch.ProdDate));
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsValidateBestBeforeAndExpiryDate</Name>
				<Source><![CDATA[
    public static boolean pdsValidateBestBeforeAndExpiryDate(
        TransDate _pdsBestBeforeDate,
        TransDate _expDate)
    {
        boolean     ret = true;

        if (_pdsBestBeforeDate > _expDate)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS55952";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether the specified vendor batch number is valid for the specified product or batch.
    /// </summary>
    /// <param name="_itemId">
    /// Product number.
    /// </param>
    /// <param name="_inventBatchId">
    /// Batch number (optional).
    /// </param>
    /// <param name="_vendBatchId">
    /// Vendor batch number.
    /// </param>
    /// <returns>
    /// true if the specified vendor batch number is valid; otherwise false.
    /// </returns>
    /// <remarks>
    /// <para>
    /// If the batch number parameter is not specified then the validation will succeed
    /// if the specified vendor batch number is valid for any of the product's batches.
    /// </para>
    /// <para>
    /// If the vendor batch number is not specified the validation will succeed.
    /// </para>
    /// </remarks>
    public static boolean validateVendBatchId(ItemId _itemId, InventBatchId _inventBatchId, PdsVendBatchId _vendBatchId)
    {
        InventBatch inventBatch;

        if (_vendBatchId)
        {
            select firstOnly RecId from inventBatch
                where inventBatch.itemId == _itemId
                    && (inventBatch.inventBatchId == _inventBatchId || !_inventBatchId)
                    && inventBatch.PdsVendBatchId == _vendBatchId;

            if (!inventBatch.RecId)
            {
                return checkFailed(strFmt("@SYS78966", fieldPName(InventBatch, PdsVendBatchId)));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendBatchIdLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>SysTableLookup</c> object initialized to perform lookup of vendor batch numbers based on product number and batch.
    /// </summary>
    /// <param name="_itemId">
    /// Product number.
    /// </param>
    /// <param name="_inventBatchId">
    /// Batch number (optional).
    /// </param>
    /// <param name="_formControl">
    /// Control for which the lookup needs to be enabled.
    /// </param>
    /// <returns>
    /// A <c>SysTableLookup</c> object initialized to perform the lookup.
    /// </returns>
    /// <remarks>
    /// <para>If the specified batch number is blank the lookup will show all vendor batch numbers available for the item.</para>
    /// </remarks>
    public static SysTableLookup vendBatchIdLookup(ItemId _itemId, InventBatchId _inventBatchId, FormControl _formControl)
    {
        SysTableLookup sysTableLookup;

        sysTableLookup = SysTableLookup::newParameters(tableNum(InventBatch), _formControl);
        sysTableLookup.parmUseLookupValue(true);
        sysTableLookup.addLookupfield(fieldNum(InventBatch, PdsVendBatchId));
        sysTableLookup.parmQuery(InventBatch::vendBatchIdLookupQuery(_itemId, _inventBatchId));

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendBatchIdLookupQuery</Name>
				<Source><![CDATA[
    private static Query vendBatchIdLookupQuery(ItemId _itemId, InventBatchId _inventBatchId)
    {
        Query                   lookupQuery;
        QueryBuildDataSource    inventBatchQbds;

        lookupQuery = new Query();
        inventBatchQbds = lookupQuery.addDataSource(tableNum(InventBatch));
        inventBatchQbds.addRange(fieldNum(InventBatch, ItemId)).value(queryValue(_itemId));
        inventBatchQbds.addRange(fieldNum(InventBatch, PdsVendBatchId)).value(SysQuery::valueNotEmptyString());
        inventBatchQbds.addGroupByField(fieldNum(InventBatch, PdsVendBatchId));

        if (_inventBatchId)
        {
            inventBatchQbds.addRange(fieldNum(InventBatch, InventBatchId)).value(queryValue(_inventBatchId));
        }

        return lookupQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTable</Name>
				<Source><![CDATA[
    public InventTable InventTable(InventTable _relatedTable = null)
    {
        if (prmIsDefault(_relatedTable))
        {
            return this.setLink('InventTable');
        }
        else
        {
            return this.setLink('InventTable', _relatedTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create  <c>InventBatch</c> with the specified batch number.
    /// </summary>
    /// <param name="_inventBatchId">
    ///  The batch number ID.
    /// </param>
    /// <param name="_movement">
    ///  The movement with the batch number.
    /// </param>
    /// <param name="_inventTrans">
    ///  The inventory transaction with the batch number.
    /// </param>
    public static void createFromMovement(
        InventBatchId    _inventBatchId,
        InventMovement   _movement,
        InventTrans      _inventTrans)
    {
        InventBatch inventBatch;

        ttsbegin;
        if (_inventBatchId && !InventBatch::exist(_inventBatchId, _movement.itemId()))
        {
            inventBatch.InventBatchId = _inventBatchId;
            inventBatch.initFromInventMovement(_movement, _inventTrans);
            inventBatch.pdsInitFromVendBatchDetails(_movement.pdsVendBatchInfo());
            inventBatch.insert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendorExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the vendor expiration date is a valid date in relation to the batch date.
    /// </summary>
    /// <param name = "_vendExpiryDate">The vendor expiration date</param>
    /// <param name = "_vendBatchDate">The vendor batch date</param>
    /// <returns>True if the expiry date is a valid date; otherwise, false.</returns>
    public static boolean checkVendorExpiryDate(PdsVendExpiryDate _vendExpiryDate, PdsVendBatchDate _vendBatchDate)
    {
        boolean ret = true;

        if (_vendExpiryDate && _vendExpiryDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            ret = checkFailed("@PDS1353");
        }
        if (_vendExpiryDate && _vendExpiryDate <= _vendBatchDate)
        {
            ret = checkFailed("@PDS1351");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProductionDate</Name>
				<Source><![CDATA[
	/// <summary>
    ///		Initializes the manufacturing date of the InventBatch buffer.
    /// </summary>
	public void initializeProductionDate()
    {
        this.prodDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123943</DeveloperDocumentation>
	<FormRef>InventBatch</FormRef>
	<Label>@SYS54381</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>inventBatchId</TitleField1>
	<TitleField2>itemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>itemBatchIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>itemBatchIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>expDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>prodDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DispositionDescription</Name>
			<Label>@PRO175</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsDispositionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>dispositionDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DispositionStatus</Name>
			<Label>@PRO175</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsDispositionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsDispositionStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsDisposition</Name>
			<Label>@PRO175</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsDispositionCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PDSGenealogy</Name>
			<Label>@PSC182</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PDSInheritedShelfLife</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PDSInheritBatchAttrib</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PDSPotency</Name>
			<Label>@PSC61</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>pdsOnHandQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsActiveQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsBaseAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsBaseValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsBaseAttributeValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsShelfLife</Name>
			<Label>@PRO945</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>prodDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsShelfAdviceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBestBeforeDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>expDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsVendorBatch</Name>
			<Label>@PDS1357</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsVendBatchDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsUseVendBatchDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsVendExpiryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsUseVendBatchExp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCountryOfOrigin1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCountryOfOrigin2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsVendBatchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Properties</Name>
			<Label>@SYS10344</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>prodDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsShelfAdviceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBestBeforeDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>expDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsFinishedGoodsDateTested</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QualityManagement</Name>
			<Label>@SYS113616</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>qualityOrderStatusDisplay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendorBatchTrace</Name>
			<Label>@PDS1357</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsVendBatchDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsVendExpiryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCountryOfOrigin1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCountryOfOrigin2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsVendBatchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>expDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchExpDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventBatchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>itemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PdsBestBeforeDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBestBeforeDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsCountryOfOrigin1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCountryOfOrigin1</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsCountryOfOrigin2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCountryOfOrigin2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsDispositionCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsDispositionCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PdsFinishedGoodsDateTested</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsFinishedGoodsDateTested</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PDSInheritBatchAttrib</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSInheritBatchAttrib</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PDSInheritedShelfLife</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSInheritShelfLife</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsSameLot</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsSameLot</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PdsShelfAdviceDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsShelfAdviceDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsUseVendBatchDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsUseVendBatchDate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsUseVendBatchExp</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsUseVendBatchExp</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PdsVendBatchDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsVendBatchDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsVendBatchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsVendBatchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PdsVendExpiryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsVendExpiryDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>prodDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchProdDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>batchIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>inventBatchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>itemBatchIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>itemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventBatchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemVendBatchIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>itemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PdsVendBatchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemExpDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>itemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>expDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventBatchId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>itemId</Name>
					<Field>itemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsCountryOfOrigin1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PdsCountryOfOrigin1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventBatch</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsCountryOfOrigin1</Name>
					<SourceEDT>PdsCountryOfOrigin1</SourceEDT>
					<Field>PdsCountryOfOrigin1</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsCountryOfOrigin2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PdsCountryOfOrigin2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventBatch</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsCountryOfOrigin2</Name>
					<SourceEDT>PdsCountryOfOrigin2</SourceEDT>
					<Field>PdsCountryOfOrigin2</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsDispositionMaster</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PdsDispositionMaster</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsDispositionCode</Name>
					<Field>PdsDispositionCode</Field>
					<RelatedField>DispositionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>