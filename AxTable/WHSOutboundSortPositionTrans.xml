<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOutboundSortPositionTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSOutboundSortPositionTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>containerId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the associated <c>WHSContainerId</c>.
    /// </summary>
    /// <returns>The associated <c>WHSContainerId</c>.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display WHSContainerId containerId()
    {
        WHSContainerId  containerId;
    
        if (this.SortTemplateType == WHSOutboundSortTemplateType::Container)
        {
            containerId = this.SortIdentifier;
        }
    
        return containerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByContainerIdentifier</Name>
				<Source><![CDATA[
	/// <summary>
    /// Finds the first <c>WHSOutboundSortPositionTrans</c> record by a given container sort identifier.
    /// </summary>
    /// <param name = "_sortIdentifier">
	/// The given sort identifier.
	/// </param>
    /// <param name = "_forupdate">
	/// Determines if the record will be selected to update.
	/// </param>
    /// <returns>
	/// The first transaction with the given sort identifier on a position with the assigned status.
	/// </returns>
    [Hookable(false)]
    public static WHSOutboundSortPositionTrans findByContainerIdentifier(
        WHSOutboundSortIdentifier	_sortIdentifier,
        boolean                     _forupdate = false)
    {
        WHSOutboundSortPositionTrans	sortPositionTrans;
        WHSOutboundSortPosition			sortPosition;
    
        if (_sortIdentifier)
        {
            WHSSortPutawayValidator sortPutawayValidator = WHSSortPutawayValidator::newWithIdentifier(sortPositionTrans.SortIdentifier);
            sortPutawayValidator.validateOnlyOneSortPosition();

            sortPositionTrans.selectForUpdate(_forUpdate);
    
            select firstOnly sortPositionTrans
                where sortPositionTrans.SortIdentifier		== _sortIdentifier
                &&	  sortPositionTrans.SortTemplateType	== WHSOutboundSortTemplateType::Container
				exists join sortPosition
					where sortPosition.RecId				== sortPositionTrans.OutboundSortPosition
					&&	  sortPosition.SortPositionStatus	== WHSOutboundSortPositionStatus::Assigned;
        }
    
        return sortPositionTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByOutboundSortPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a sort position transaction exists for a given sort position.
    /// </summary>
    /// <param name = "_outboundSortPositionRecId">The outbound sort position.</param>
    /// <returns>True if a sort position transaction exists; otherwise False.</returns>
    [Hookable(false)]
    internal static boolean existByOutboundSortPosition(WHSOutboundSortPositionRecId _outboundSortPositionRecId)
    {
        return _outboundSortPositionRecId &&
               (select firstOnly RecId from WHSOutboundSortPositionTrans
                    where WHSOutboundSortPositionTrans.OutboundSortPosition == _outboundSortPositionRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContainerSortPositionTransAndRemoveRFInstruction</Name>
				<Source><![CDATA[
	/// <summary>
    /// Creates a <c>WHSOutboundSortPositionTrans</c> record with the given criteria and 
	/// deletes the associating <c>WHSOutboundSortRFInstuction</c> record.
    /// </summary>
    /// <param name = "_containerId">
    /// The given container ID to create a transaction record for.
	/// </param>
    /// <param name = "_sortPositionRecId">
	/// The associating <c>WHSOutboundSortPosition</c> records RecId
	/// </param>
    /// <param name = "_sortTemplateId">
	/// The <c>WHSOutboundSortTemplate</c> record's sort template ID related to the position.
	/// </param>
    /// <returns>
    /// The item's status related to the transaction created.
	/// </returns>
    internal static WHSInventStatusId createContainerSortPositionTransAndRemoveRFInstruction(
        WHSContainerId					_containerId,
        WHSOutboundSortPositionRecId	_sortPositionRecId,
        WHSOutboundSortTemplateId		_sortTemplateId)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        WHSOutboundSortTemplateType sortTemplateType = WHSOutboundSortTemplate::find(_sortTemplateId).SortTemplateType;

        if (!_sortTemplateId || sortTemplateType != WHSOutboundSortTemplateType::Container)
        {
            throw error(Error::missingParameter(null));
        }

        WHSContainerLine                containerLine;
        WHSOutboundSortRFInstruction    sortRFInstruction;
        WHSInventStatusId               inventStatusId;

        while select containerLine
            where containerLine.ContainerId == _containerId
            exists join sortRFInstruction
                where sortRFInstruction.SortIdentifier  == containerLine.ContainerId
                &&    sortRFInstruction.ItemId          == containerLine.ItemId
                &&    sortRFInstruction.InventDimId     == containerLine.InventDimId
        {
            // Create sortTrans record for this position
            WHSOutboundSortPositionTrans sortPositionTrans;

            sortPositionTrans.SortIdentifier        = containerLine.ContainerId;
            sortPositionTrans.OutboundSortPosition  = _sortPositionRecId;
            sortPositionTrans.SortTemplateId        = _sortTemplateId;
            sortPositionTrans.SortTemplateType      = sortTemplateType;
            sortPositionTrans.SortTransStatus       = WHSOutboundSortPositionStatus::Closed;
            sortPositionTrans.ItemId                = containerLine.ItemId;
            sortPositionTrans.InventDimId           = containerLine.InventDimId;
            sortPositionTrans.ProductQuantity       = containerLine.Qty;
            sortPositionTrans.UnitSymbol            = containerLine.UnitId;
            sortPositionTrans.LoadLine              = containerLine.loadLine;
    
            sortPositionTrans.insert();
    
            if (!inventStatusId)
            {
                inventStatusId = containerLine.inventDim().InventStatusId;
            }
        }

        delete_from sortRFInstruction
            where sortRFInstruction.SortIdentifier == _containerId;

        return inventStatusId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryQuantity</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventQty inventoryQuantity()
    {
        return WHSCatchWeightHelper::convertInventQuantity(
                this.ItemId,
                this.UnitSymbol,
                this.ProductQuantity,
                this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSortPositionTransForReversedWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete transactions for the position tied to work that is being reversed.
    /// </summary>
    /// <param name="_workId">
    /// The work being reversed.
    /// </param>
    internal static void deleteSortPositionTransForReversedWork(WHSWorkId _workId)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        WHSWorkLine             reversedWorkLine;
        WHSOutboundSortPositionTrans sortPositionTrans;

        delete_from sortPositionTrans
            exists join reversedWorkLine
                where reversedWorkLine.WorkId == _workId
                && reversedWorkLine.RecId == sortpositiontrans.WorkLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WHSOutboundSortPositionTransDevDocumentation</DeveloperDocumentation>
	<Label>@WAX:WHSOutboundSortPositionTransLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>SortTemplateId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>SortIdentifierPositionItemIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SortTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutboundSortPosition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitSymbol</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SortIdentifier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SortTransStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductQuantity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SortTemplateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOutboundSortTemplateId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OutboundSortPosition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOutboundSortPositionRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitSymbol</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUOM</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LoadLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadLineRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkLine</Name>
			<ExtendedDataType>WHSWorkLineRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SortIdentifier</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOutboundSortIdentifier</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SortTransStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSOutboundSortPositionStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProductQuantity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProductQuantity</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SortTemplateType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSOutboundSortTemplateType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SortIdentifierPositionItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OutboundSortPosition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SortIdentifier</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LoadLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LoadLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SortIdentifierIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SortIdentifier</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SortTemplateType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSLoadLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSLoadLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadLine</Name>
					<Field>LoadLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LicensePlate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLicensePlate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SortIdentifier</Name>
					<Field>SortIdentifier</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SortTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSOutboundSortTemplate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SortTemplateId</Name>
					<Field>SortTemplateId</Field>
					<RelatedField>SortTemplateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SortPosition</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSOutboundSortPosition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OutboundSortPosition</Name>
					<Field>OutboundSortPosition</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSWorkLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSWorkLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkLine</Name>
					<Field>WorkLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>