<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanBoardTmpFilterCriteria</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class KanbanBoardTmpFilterCriteria extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyFilterCriteria</Name>
				<Source><![CDATA[
    public void applyFilterCriteria(QueryBuildDataSource _qbdsPlanActivity)
    {
        QueryBuildRange                     queryBuildRange;
        QueryBuildDataSource                qbdsPlanActivityRelationshipPick;
        QueryBuildDataSource                qbdsPlanConstraintPick;
        QueryBuildDataSource                qbdsPlanActivityPick;
        QueryBuildDataSource                qbdsPlanActivityLocationPick;
        QueryBuildDataSource                qbdsInventLocationPick;
        QueryBuildDataSource                qbdsPlanActivityRelationshipReceive;
        QueryBuildDataSource                qbdsPlanConstraintReceive;
        QueryBuildDataSource                qbdsPlanActivityReceive;
        QueryBuildDataSource                qbdsPlanActivityLocationReceive;
        QueryBuildDataSource                qbdsInventLocationReceive;

        if (   _qbdsPlanActivity
            && _qbdsPlanActivity.table() == tablenum(PlanActivity)
            && this.isFilterCriteriaSet())
        {
            //filter activity
            if (this.PlanActivity)
            {
                queryBuildRange = _qbdsPlanActivity.addRange(fieldnum(PlanActivity,RecId));
                queryBuildRange.value(queryValue(this.PlanActivity));
            }

            //filter plan reference
            if (this.PlanReference)
            {
                queryBuildRange = _qbdsPlanActivity.addRange(fieldnum(PlanActivity,PlanReference));
                queryBuildRange.value(queryValue(this.PlanReference));
            }

            //if one or more 'from' filters are set, find the picking location and apply filter.
            if (   this.InventSiteIdFrom
                || this.InventLocationIdFrom
                || this.wmsLocationIdFrom)
            {
                qbdsPlanActivityRelationshipPick = _qbdsPlanActivity.addDataSource(tablenum(PlanActivityRelationship));
                qbdsPlanActivityRelationshipPick.joinMode(JoinMode::ExistsJoin);
                qbdsPlanActivityRelationshipPick.addLink(fieldnum(PlanActivity,RecId),fieldnum(PlanActivityRelationship,IndependentPlanActivity));

                qbdsPlanConstraintPick = qbdsPlanActivityRelationshipPick.addDataSource(tablenum(PlanConstraint));
                qbdsPlanConstraintPick.joinMode(JoinMode::ExistsJoin);
                qbdsPlanConstraintPick.addLink(fieldnum(PlanActivityRelationship,Constraint),fieldnum(PlanConstraint,RecId));
                queryBuildRange = qbdsPlanConstraintPick.addRange(fieldnum(PlanConstraint,ConstraintType));
                queryBuildRange.value(queryValue(ConstraintTypes::Aggregation));

                qbdsPlanActivityPick = qbdsPlanActivityRelationshipPick.addDataSource(tablenum(PlanActivity));
                qbdsPlanActivityPick.joinMode(JoinMode::ExistsJoin);
                qbdsPlanActivityPick.addLink(fieldnum(PlanActivityRelationship,DependentPlanActivity),fieldnum(PlanActivity,RecId));
                queryBuildRange = qbdsPlanActivityPick.addRange(fieldnum(PlanActivity,PlanActivityType));
                queryBuildRange.value(queryValue(PlanActivityType::Pick));

                qbdsPlanActivityLocationPick = qbdsPlanActivityPick.addDataSource(tablenum(PlanActivityLocation));
                qbdsPlanActivityLocationPick.joinMode(JoinMode::ExistsJoin);
                qbdsPlanActivityLocationPick.addLink(fieldnum(PlanActivity,RecId),fieldnum(PlanActivityLocation,PlanActivity));

                if (this.wmsLocationIdFrom)
                {
                    queryBuildRange = qbdsPlanActivityLocationPick.addRange(fieldnum(PlanActivityLocation,wmsLocationId));
                    queryBuildRange.value(queryValue(this.wmsLocationIdFrom));
                }

                if (this.InventLocationIdFrom)
                {
                    queryBuildRange = qbdsPlanActivityLocationPick.addRange(fieldnum(PlanActivityLocation,InventLocationId));
                    queryBuildRange.value(queryValue(this.InventLocationIdFrom));
                }

                if (this.InventSiteIdFrom)
                {
                    qbdsInventLocationPick = qbdsPlanActivityLocationPick.addDataSource(tablenum(InventLocation));
                    qbdsInventLocationPick.joinMode(JoinMode::ExistsJoin);
                    qbdsInventLocationPick.addLink(fieldnum(PlanActivityLocation,InventLocationId),
                                                   fieldnum(InventLocation,InventLocationId));
                    queryBuildRange = qbdsInventLocationPick.addRange(fieldnum(InventLocation,InventSiteId));
                    queryBuildRange.value(queryValue(this.InventSiteIdFrom));
                }
            }

            //if one or more 'to' filters are set, find the picking location and apply filter.
            if (   this.InventSiteIdTo
                || this.InventLocationIdTo
                || this.wmsLocationIdTo)
            {
                qbdsPlanActivityRelationshipReceive = _qbdsPlanActivity.addDataSource(tablenum(PlanActivityRelationship));
                qbdsPlanActivityRelationshipReceive.joinMode(JoinMode::ExistsJoin);
                qbdsPlanActivityRelationshipReceive.addLink(fieldnum(PlanActivity,RecId),
                                                            fieldnum(PlanActivityRelationship,IndependentPlanActivity));

                qbdsPlanConstraintReceive = qbdsPlanActivityRelationshipReceive.addDataSource(tablenum(PlanConstraint));
                qbdsPlanConstraintReceive.joinMode(JoinMode::ExistsJoin);
                qbdsPlanConstraintReceive.addLink(fieldnum(PlanActivityRelationship,Constraint),fieldnum(PlanConstraint,RecId));
                queryBuildRange = qbdsPlanConstraintReceive.addRange(fieldnum(PlanConstraint,ConstraintType));
                queryBuildRange.value(queryValue(ConstraintTypes::Aggregation));

                qbdsPlanActivityReceive = qbdsPlanActivityRelationshipReceive.addDataSource(tablenum(PlanActivity));
                qbdsPlanActivityReceive.joinMode(JoinMode::ExistsJoin);
                qbdsPlanActivityReceive.addLink(fieldnum(PlanActivityRelationship,DependentPlanActivity),fieldnum(PlanActivity,RecId));
                queryBuildRange = qbdsPlanActivityReceive.addRange(fieldnum(PlanActivity,PlanActivityType));
                queryBuildRange.value(queryValue(PlanActivityType::Receive));

                qbdsPlanActivityLocationReceive = qbdsPlanActivityReceive.addDataSource(tablenum(PlanActivityLocation));
                qbdsPlanActivityLocationReceive.joinMode(JoinMode::ExistsJoin);
                qbdsPlanActivityLocationReceive.addLink(fieldnum(PlanActivity,RecId),fieldnum(PlanActivityLocation,PlanActivity));

                if (this.wmsLocationIdTo)
                {
                    queryBuildRange = qbdsPlanActivityLocationReceive.addRange(fieldnum(PlanActivityLocation,wmsLocationId));
                    queryBuildRange.value(queryValue(this.wmsLocationIdTo));
                }

                if (this.InventLocationIdTo)
                {
                    queryBuildRange = qbdsPlanActivityLocationReceive.addRange(fieldnum(PlanActivityLocation,InventLocationId));
                    queryBuildRange.value(queryValue(this.InventLocationIdTo));
                }

                if (this.InventSiteIdTo)
                {
                    qbdsInventLocationReceive = qbdsPlanActivityLocationReceive.addDataSource(tablenum(InventLocation));
                    qbdsInventLocationReceive.joinMode(JoinMode::ExistsJoin);
                    qbdsInventLocationReceive.addLink(fieldnum(PlanActivityLocation,InventLocationId),
                                                      fieldnum(InventLocation,InventLocationId));
                    queryBuildRange = qbdsInventLocationReceive.addRange(fieldnum(InventLocation,InventSiteId));
                    queryBuildRange.value(queryValue(this.InventSiteIdTo));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFilterCriteriaSet</Name>
				<Source><![CDATA[
    public boolean isFilterCriteriaSet()
    {
        SysDictTable    sysDictTable = new SysDictTable(tablenum(KanbanBoardTmpFilterCriteria));
        fieldId         fieldId;
        boolean         result;
        int             i;

        for (i=1; i <= sysDictTable.fieldCntWithoutSys(); i++)
        {
            fieldId = sysDictTable.fieldCnt2Id(i);
            result  = this.(fieldId) != nullValue(this.(fieldId));
            if (result)
            {
                break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the specified actions when a field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field that has been modified.
    /// </param>
    /// <remarks>
    /// This is overridden to enable for specific actions when a field is modified.
    /// </remarks>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(KanbanBoardTmpFilterCriteria,PlanReference):
                if (   !this.PlanReference
                    || (this.PlanReference
                    &&  this.PlanActivity
                    &&  PlanActivity::find(this.PlanActivity).PlanReference != this.PlanReference))
                {
                    this.PlanActivity = 0;
                }
                break;
            case fieldnum(KanbanBoardTmpFilterCriteria,PlanActivity):
                if (   this.PlanActivity
                    && !this.PlanReference)
                {
                    this.PlanReference = PlanActivity::find(this.PlanActivity).PlanReference;
                }
                break;
            case fieldnum(KanbanBoardTmpFilterCriteria,InventSiteIdFrom):
                if (   !this.InventSiteIdFrom
                    || (this.InventSiteIdFrom
                    &&  this.InventLocationIdFrom
                    &&  InventLocation::find(this.InventLocationIdFrom).InventSiteId != this.InventSiteIdFrom))
                {
                    this.InventLocationIdFrom = '';
                    this.wmsLocationIdFrom    = '';
                }
                break;
            case fieldnum(KanbanBoardTmpFilterCriteria,InventSiteIdTo):
                if (   !this.InventSiteIdTo
                    || (this.InventSiteIdTo
                    &&  this.InventLocationIdTo
                    &&  InventLocation::find(this.InventLocationIdTo).InventSiteId != this.InventSiteIdTo))
                {
                    this.InventLocationIdTo = '';
                    this.wmsLocationIdTo    = '';
                }
                break;
            case fieldnum(KanbanBoardTmpFilterCriteria,InventLocationIdFrom):
                if (   this.InventLocationIdFrom
                    && !this.InventSiteIdFrom)
                {
                    this.InventSiteIdFrom = InventLocation::find(this.InventLocationIdFrom).InventSiteId;
                }
                if (   !this.InventLocationIdFrom
                    || (this.InventLocationIdFrom
                    &&  this.wmsLocationIdFrom
                    &&  !WMSLocation::exist(this.wmsLocationIdFrom,this.InventLocationIdFrom)))
                {
                    this.wmsLocationIdFrom = '';
                }
                break;
            case fieldnum(KanbanBoardTmpFilterCriteria,InventLocationIdTo):
                if (   this.InventLocationIdTo
                    && !this.InventSiteIdTo)
                {
                    this.InventSiteIdTo = InventLocation::find(this.InventLocationIdTo).InventSiteId;
                }
                if (   !this.InventLocationIdTo
                    || (this.InventLocationIdTo
                    &&  this.wmsLocationIdTo
                    &&  !WMSLocation::exist(this.wmsLocationIdTo,this.InventLocationIdTo)))
                {
                    this.wmsLocationIdTo = '';
                }
                break;
        }

        if (FormDataUtil::isFormDataSource(this))
        {
            FormDataUtil::getFormDataSource(this).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>planActvityName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the plan activity specified in the current record buffer.
    /// </summary>
    /// <returns>
    ///    A <c>PlanActivityName</c> value if a plan activity is specified in the buffer; otherwise, an empty
    ///    string.
    /// </returns>
    public PlanActivityName planActvityName()
    {
        PlanActivityName    planActivityName;

        if (this.PlanActivity)
        {
            planActivityName = PlanActivity::find(this.PlanActivity).Name;
        }

        return planActivityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planReferenceName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the plan reference that is specified in the current record buffer.
    /// </summary>
    /// <returns>
    ///    A <c>PlanName</c> value if a plan reference is specified in the buffer; otherwise, an empty string.
    /// </returns>
    public PlanName planReferenceName()
    {
        PlanName    planName;

        if (this.PlanReference)
        {
            planName = PlanReference::find(this.PlanReference).PlanName;
        }

        return planName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified field is valid.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///    The field ID of the field to validate.
    /// </param>
    /// <returns>
    ///    true if the field is valid; otherwise, false.
    /// </returns>
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean result;

        result = super(_fieldIdToCheck);

        if (result)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(KanbanBoardTmpFilterCriteria,PlanReference):
                    result = this.validatePlanReference();
                    break;
                case fieldnum(KanbanBoardTmpFilterCriteria,PlanActivity):
                    result = this.validatePlanActivity();
                    break;
                case fieldnum(KanbanBoardTmpFilterCriteria,InventLocationIdFrom):
                    result = this.validateInventLocationId(this.InventLocationIdFrom,this.InventSiteIdFrom);
                    break;
                case fieldnum(KanbanBoardTmpFilterCriteria,InventLocationIdTo):
                    result = this.validateInventLocationId(this.InventLocationIdTo,this.InventSiteIdTo);
                    break;
                case fieldnum(KanbanBoardTmpFilterCriteria,WorkCell):
                    result = this.validateWorkCell(this.WorkCell);
                    break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a specified inventory location and site.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The inventory location to validate.
    /// </param>
    /// <param name="_inventSiteId">
    /// The site to validate.
    /// </param>
    /// <returns>
    /// true if the inventory location belongs to the specified site or at least one of the parameters is blank; otherwise, false.
    /// </returns>
    public boolean validateInventLocationId(
        InventLocationId _inventLocationId,
        InventSiteId     _inventSiteId)
    {
        boolean result = true;

        if (   _inventLocationId
            && _inventSiteId)
        {
            if (InventLocation::find(_inventLocationId).InventSiteId != _inventSiteId)
            {
                result = checkFailed(strfmt("@SYS313400",_inventLocationId,_inventSiteId));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the plan activity that is specified in the current record buffer.
    /// </summary>
    /// <param name="_transDateTime">
    ///    The date and time used to validate the plan activity.
    /// </param>
    /// <returns>
    ///    true if the plan activity is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The plan activity must have an active version and belong to the plan reference if one is specified
    ///    in the current record buffer.
    /// </remarks>
    public boolean validatePlanActivity(TransDateTime _transDateTime = DateTimeUtil::getSystemDateTime())
    {
        PlanPlanActivity    planPlanActivity;
        PlanActivity        planActivity;
        Plan                plan;
        LegalEntity         legalEntity;
        boolean             result = true;

        if (this.PlanActivity)
        {
            legalEntity = CompanyInfo::current();

            // verify that there is at least one current planActivity with the name
            select firstonly RecId from planActivity
                where planActivity.RecId          == this.PlanActivity
                   && planActivity.LegalEntity    == legalEntity
                   && (planActivity.PlanReference == this.PlanReference
                   ||  !this.PlanReference)
                exists join planPlanActivity
                    where planPlanActivity.PlanActivity == planActivity.RecId
                exists join plan
                    where plan.RecId     == planPlanActivity.Plan
                       && plan.Status    == PlanStatus::Active
                       && plan.ValidFrom <= _transDateTime
                       && (plan.ValidTo  >= _transDateTime
                       ||  !plan.ValidTo);

            if (!planActivity.RecId)
            {
                planActivity = PlanActivity::find(this.PlanActivity);

                if (!planActivity.RecId)
                {
                    //should never happen, since it is selected from lookup
                    result = checkFailed(strfmt("@SYS313402",this.PlanActivity));
                }
                else
                {
                    result = checkFailed(strfmt("@SYS313403",planActivity.Name));
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePlanReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the plan reference that is specified in the current record buffer.
    /// </summary>
    /// <returns>
    /// true if the plan reference is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The plan reference must exist and be of the production flow type.
    /// </remarks>
    public boolean validatePlanReference()
    {
        PlanReference   planReference;
        boolean         result = true;

        if (this.PlanReference)
        {
            planReference = PlanReference::find(this.PlanReference);

            if (   !planReference
                || planReference.PlanType    != PlanTypes::ProductionFlow
                || planReference.LegalEntity != CompanyInfo::current())
            {
                result = checkFailed(strfmt("@SYS313404",planReference.PlanName));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkCell</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the specified work cell.
    /// </summary>
    /// <param name="_workCell">
    ///    A record ID of the <c>WrkCtrResourceGroup</c> table.
    /// </param>
    /// <returns>
    ///    true if the resource group exists and is marked as a work cell; otherwise, false.
    /// </returns>
    public boolean validateWorkCell(WrkCtrResourceGroupRefRecId _workCell)
    {
        WrkCtrResourceGroup wrkCtrResourceGroup;
        boolean result = true;

        if (_workCell)
        {
            wrkCtrResourceGroup = WrkCtrResourceGroup::find(_workCell);
            if (   !wrkCtrResourceGroup
                || !wrkCtrResourceGroup.IsWorkCell)
            {
                result = checkFailed("@SYS313405");
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        SysDictTable    sysDictTable = new SysDictTable(tablenum(KanbanBoardTmpFilterCriteria));
        boolean         result;
        int             i;

        result = super();

        if (result)
        {
            for (i=1; i <= sysDictTable.fieldCntWithoutSys(); i++)
            {
                result = this.validateField(sysDictTable.fieldCnt2Id(i)) && result;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>container2Record</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills data from a <c>container</c> object into a <c>KanbanBoardTmpFilterCriteria</c> record buffer.
    /// </summary>
    /// <param name="_containerRecord">
    /// The <c>container</c> object that holds the data.
    /// </param>
    /// <returns>
    /// A <c>KanbanBoardTmpFilterCriteria</c> record buffer.
    /// </returns>
    /// <remarks>
    /// The container must have been created by using the <c>record2Container</c> method. System fields are
    /// not included.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The container holds invalid data.
    /// </exception>
    public static KanbanBoardTmpFilterCriteria container2Record(container _containerRecord)
    {
        SysDictTable                    sysDictTable = new SysDictTable(tablenum(KanbanBoardTmpFilterCriteria));
        tableId                         tableId;
        KanbanBoardTmpFilterCriteria    kanbanBoardTmpFilterCriteria;
        int                             i;

        tableId = conpeek(_containerRecord,1);
        if (tableId == tablenum(KanbanBoardTmpFilterCriteria))
        {
            for (i=1; i <= sysDictTable.fieldCntWithoutSys(); i++)
            {
                kanbanBoardTmpFilterCriteria.(sysDictTable.fieldCnt2Id(i)) = conpeek(_containerRecord,i+1);
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return kanbanBoardTmpFilterCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>record2Container</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a <c>container</c> object by using data from a <c>KanbanBoardTmpFilterCriteria</c> record
    /// buffer.
    /// </summary>
    /// <param name="_kanbanBoardTmpFilterCriteria">
    /// The <c>KanbanBoardTmpFilterCriteria</c> buffer that holds the data.
    /// </param>
    /// <returns>
    /// A <c>container</c> object that holds data from the record buffer.
    /// </returns>
    /// <remarks>
    /// The container can be extracted using the <c>container2Record</c> method. System fields are not
    /// included.
    /// </remarks>
    public static container record2Container(KanbanBoardTmpFilterCriteria _kanbanBoardTmpFilterCriteria)
    {
        SysDictTable    sysDictTable    = new SysDictTable(tablenum(KanbanBoardTmpFilterCriteria));
        container       recordContainer = [_kanbanBoardTmpFilterCriteria.TableId];
        int             i;

        for (i=1; i <= sysDictTable.fieldCntWithoutSys(); i++)
        {
            recordContainer += _kanbanBoardTmpFilterCriteria.(sysDictTable.fieldCnt2Id(i));
        }

        return recordContainer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<FormRef>Kanban</FormRef>
	<Label>@SYS313387</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>InventSiteIdFrom</TitleField1>
	<TitleField2>InventSiteIdTo</TitleField2>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KanbanCardId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationIdTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlanActivity</Name>
			<Label>@SYS152525</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanActivity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransferFrom</Name>
			<Label>@SYS313398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationIdFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransferTo</Name>
			<Label>@SYS313399</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationIdTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkCell</Name>
			<Label>@SYS131859</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkCell</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationIdFrom</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationIdTo</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteIdFrom</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteIdTo</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KanbanCardId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanCardId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PlanActivity</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PlanActivityRefRecId</ExtendedDataType>
			<Label>@SYS302381</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PlanReference</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PlanReferenceRefRecId</ExtendedDataType>
			<Label>@SYS131941</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SuppressKanbanQtyOverview</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS4004538</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationIdFrom</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationIdTo</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkCell</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WrkCtrResourceGroupRefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocationFrom</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventLocationFrom</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Filter</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationIdFrom</Name>
					<Field>InventLocationIdFrom</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocationTo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventLocationTo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Filter</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationIdTo</Name>
					<Field>InventLocationIdTo</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSiteFrom</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventSiteFrom</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Filter</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteIdFrom</Name>
					<Field>InventSiteIdFrom</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSiteTo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventSiteTo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Filter</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteIdTo</Name>
					<Field>InventSiteIdTo</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlanActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlanActivity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PlanActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Filter</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanActivity</Name>
					<Field>PlanActivity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlanReference</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlanReference</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PlanReference</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Filter</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanReference</Name>
					<Field>PlanReference</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WMSLocationFrom</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WMSLocationFrom</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Filter</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationIdFrom</Name>
					<Field>WMSLocationIdFrom</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationIdFrom</Name>
					<Field>InventLocationIdFrom</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>LocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WMSLocationTo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WMSLocationTo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Filter</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationIdTo</Name>
					<Field>WMSLocationIdTo</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationIdTo</Name>
					<Field>InventLocationIdTo</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>LocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WrkCtrResourceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrResourceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkCell</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Filter</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkCell</Name>
					<Field>WorkCell</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>