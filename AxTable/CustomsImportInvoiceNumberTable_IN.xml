<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomsImportInvoiceNumberTable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustomsImportInvoiceNumberTable_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkImporterInvoiceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if customsImportInvoiceNumberTable_IN table record exists for specified CustomsImporterInvoiceNumber_IN.
    /// </summary>
    /// <param name="_importerInvoiceNumber">
    /// The CustomsImporterInvoiceNumber_IN for which customsImportInvoiceNumberTable_IN table is queried.
    /// </param>
    /// <returns>
    /// true if customsImportInvoiceNumberTable_IN table record is found otherwise, false
    /// </returns>
    public static boolean checkImporterInvoiceNumber(CustomsImporterInvoiceNumber_IN  _importerInvoiceNumber)
    {
        return _importerInvoiceNumber
            && (select firstonly RecId from customsImportInvoiceNumberTable_IN
                    where customsImportInvoiceNumberTable_IN.ImporterInvoiceNumber  == _importerInvoiceNumber
                       && customsImportInvoiceNumberTable_IN.Closed                 == NoYes::No).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsImportInvoiceNumberTable_IN table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing CustomsImportInvoiceNumberTable_IN table.
    /// </returns>
    public static CustomsImportInvoiceNumberTable_IN find(
        RefRecId            _recId,
        boolean             _forupdate          = false,
        ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto)
    {
        CustomsImportInvoiceNumberTable_IN customsImportInvoiceNumberTable;

        customsImportInvoiceNumberTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            customsImportInvoiceNumberTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly customsImportInvoiceNumberTable
            where customsImportInvoiceNumberTable.RecId == _recId;

        return customsImportInvoiceNumberTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByImporterInvoiceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsImportInvoiceNumberTable_IN table for the specified CustomsImporterInvoiceNumber_IN.
    /// </summary>
    /// <param name="_customsImporterInvoiceNumber">
    /// The CustomsImporterInvoiceNumber_IN for which customsImportInvoiceNumberTable_IN table is queried.
    /// </param>
    /// <param name="_forUpdate">
    /// if true, select record for update.
    /// </param>
    /// <returns>
    /// The selected CustomsImportInvoiceNumberTable_IN table record.
    /// </returns>
    public static CustomsImportInvoiceNumberTable_IN findByImporterInvoiceNumber(
        CustomsImporterInvoiceNumber_IN  _customsImporterInvoiceNumber,
        boolean                          _forUpdate = false)
    {
        CustomsImportInvoiceNumberTable_IN customsImporterInvoiceNumber;

        if (_customsImporterInvoiceNumber)
        {
            if (_forUpdate)
            {
                customsImporterInvoiceNumber.selectForUpdate  (_forUpdate);
            }

            select firstonly customsImporterInvoiceNumber
                where customsImporterInvoiceNumber.ImporterInvoiceNumber == _customsImporterInvoiceNumber;
        }

        return customsImporterInvoiceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupImporterInvoiceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>CustomsImportInvoiceNumberTable_IN</c> table.
    /// </summary>
    /// <param name="_orderAccount">
    /// The VendAccount for which CustomsImportInvoiceNumberTable_IN records needs to be filetered.
    /// </param>
    /// <param name="_formControl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    public static void lookupImporterInvoiceNumber(
        VendAccount  _orderAccount,
        FormControl  _formControl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(CustomsImportInvoiceNumberTable_IN), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        QueryBuildDataSource    queryBuildDataSourceAdapter;
        QueryBuildLink          queryBuildLink;

        queryBuildDataSource    = query.addDataSource(tablenum(CustomsImportInvoiceNumberTable_IN));
        queryBuildRange         = queryBuildDataSource.addRange(fieldnum(CustomsImportInvoiceNumberTable_IN, Closed));
        queryBuildRange.value(queryValue(NoYes::No));

        queryBuildDataSourceAdapter = queryBuildDataSource.addDataSource(tablenum(CustomsImportInvoiceVendAcctSetup_IN));
        queryBuildDataSourceAdapter.addRange(fieldnum(CustomsImportInvoiceVendAcctSetup_IN, AccountNum)).value(_orderAccount);
        queryBuildDataSourceAdapter.joinMode(JoinMode::InnerJoin);
        queryBuildLink = queryBuildDataSourceAdapter.addLink(fieldnum(CustomsImportInvoiceNumberTable_IN, RecId),
                                                             fieldnum(CustomsImportInvoiceVendAcctSetup_IN, CustomsImportInvoiceNumberTable));

        sysTableLookup.addLookupfield(fieldnum(CustomsImportInvoiceNumberTable_IN, ImporterInvoiceNumber));
        sysTableLookup.addLookupfield(fieldnum(CustomsImportInvoiceNumberTable_IN, ImporterInvoiceDate));
        sysTableLookup.addLookupfield(fieldnum(CustomsImportInvoiceNumberTable_IN, Name));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupImporterInvoiceNumberRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a list of importerInvoiceNumber from <c>CustomsImportInvoiceNumberTable_IN</c> table and binds to the form control.
    /// </summary>
    /// <param name="_formReferenceControl">
    ///     The form reference control to bind the list to.
    /// </param>
    /// <param name="_orderAccount">
    ///     The <c>VendAccount</c> to generate the importerInvoiceNumber lookup on.
    /// </param>
    /// <returns>
    ///     The selected CustomsImportInvoiceNumberTable_IN.
    /// </returns>
    public static common lookupImporterInvoiceNumberRef(FormReferenceControl   _formReferenceControl,
                                                        VendAccount            _orderAccount)
    {
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(CustomsImportInvoiceNumberTable_IN), _formReferenceControl);
        Query                   query           = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        QueryBuildDataSource    queryBuildDataSourceAdapter;
        QueryBuildLink          queryBuildLink;

        queryBuildDataSource    = query.addDataSource(tablenum(CustomsImportInvoiceNumberTable_IN));
        queryBuildRange         = queryBuildDataSource.addRange(fieldnum(CustomsImportInvoiceNumberTable_IN, Closed));
        queryBuildRange.value(queryValue(NoYes::No));

        queryBuildDataSourceAdapter = queryBuildDataSource.addDataSource(tablenum(CustomsImportInvoiceVendAcctSetup_IN));
        queryBuildDataSourceAdapter.addRange(fieldnum(CustomsImportInvoiceVendAcctSetup_IN, AccountNum)).value(_orderAccount);
        queryBuildDataSourceAdapter.joinMode(JoinMode::ExistsJoin);
        queryBuildLink = queryBuildDataSourceAdapter.addLink(fieldnum(CustomsImportInvoiceNumberTable_IN, RecId),
                                                             fieldnum(CustomsImportInvoiceVendAcctSetup_IN, CustomsImportInvoiceNumberTable));

        sysTableLookup.addLookupfield(fieldnum(CustomsImportInvoiceNumberTable_IN, ImporterInvoiceNumber));
        sysTableLookup.addLookupfield(fieldnum(CustomsImportInvoiceNumberTable_IN, ImporterInvoiceDate));
        sysTableLookup.addLookupfield(fieldnum(CustomsImportInvoiceNumberTable_IN, Name));

        sysTableLookup.parmQuery(query);

        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceImporterInvoiceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides custom <c>resolveReference</c> logic for foreign keys to the <c>CustomsImporterInvoiceNumber_IN</c> table.
    /// </summary>
    /// <param name="_formReferenceControl">The form reference group control.</param>
    /// <param name="_orderAccount">The <c>VendAccount</c> to validate the <c>ImporterInvoiceNumber</c></param>
    /// <returns>A record in the <c>CustomsImportInvoiceNumberTable_IN</c> table.</returns>
    public static Common resolveReferenceImporterInvoiceNumber(FormReferenceControl _formReferenceControl,
        VendAccount _orderAccount)
    {
        CustomsImporterInvoiceNumber_IN importerInvoiceNumber = _formReferenceControl.filterValue(
            AbsoluteFieldBinding::construct(fieldStr(CustomsImportInvoiceNumberTable_IN, ImporterInvoiceNumber),
            tableStr(CustomsImportInvoiceNumberTable_IN))).value();

        CustomsImportInvoiceNumberTable_IN importInvoiceNumberTable;
        CustomsImportInvoiceVendAcctSetup_IN importInvoiceVendAcctSetup;

        if (importerInvoiceNumber)
        {
            select firstonly importInvoiceNumberTable
                where importInvoiceNumberTable.ImporterInvoiceNumber == importerInvoiceNumber
                exists join importInvoiceVendAcctSetup
                    where importInvoiceVendAcctSetup.CustomsImportInvoiceNumberTable == importInvoiceNumberTable.RecId
                        && importInvoiceVendAcctSetup.AccountNum == _orderAccount;
        }

        return importInvoiceNumberTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64158</DeveloperDocumentation>
	<Label>@GLS5738</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ImporterInvoiceNumber</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ImporterInvoiceNumberIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustomsImportInvoiceVendAcctSetup_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustomsImportInvoiceVendAcctSetup_IN</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ImporterInvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImporterInvoiceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ImporterInvoiceNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customs</Name>
			<Label>@GLS5007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ImporterInvoiceDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS41042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ImporterInvoiceNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Closed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Closed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS18742</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ImporterInvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsDate_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ImporterInvoiceNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsImporterInvoiceNumber_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ImporterInvoiceNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ImporterInvoiceNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>