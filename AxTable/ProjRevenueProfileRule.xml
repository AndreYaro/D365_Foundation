<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjRevenueProfileRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjRevenueProfileRule extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the project revenue profile rule that has the given RecId.
    /// </summary>
    /// <param name="_recId">
    ///    The RecId of the project revenue profile rule.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    <c>ProjRevenueProfileRule</c> record. Returns null if the revenue profile rule does not exist.
    /// </returns>
    public static ProjRevenueProfileRule find(RecId _recId, boolean _forUpdate = false)
    {
        ProjRevenueProfileRule projRevenueProfileRule = null;

        projRevenueProfileRule.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstOnly projRevenueProfileRule where projRevenueProfileRule.RecId == _recId;
        }

        return projRevenueProfileRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRevenueProfileId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the project revenue profile rule that has the given revenue profile id.
    /// </summary>
    /// <param name="_revenueProfileId">
    ///    The project revenue profile id of the project revenue profile rule.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    <c>ProjRevenueProfileRule</c> record. Returns null if the revenue profile rule does not exist.
    /// </returns>
    public static ProjRevenueProfileRule findByRevenueProfileId(ProjRevenueProfileId _revenueProfileId, boolean _forUpdate = false)
    {
        ProjRevenueProfileRule projRevenueProfileRule;

        projRevenueProfileRule.selectForUpdate(_forUpdate);

        if (_revenueProfileId)
        {
            select firstOnly projRevenueProfileRule 
                where projRevenueProfileRule.ProjRevenueProfileId == _revenueProfileId;
        }

        return projRevenueProfileRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the project revenue profile rule.
    /// </summary>
    /// <returns>
    ///    true if the record is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret = super();

        if(ret && this.ContractLineGroupRefRecId && this.ProjRelationId != '')
        {
            throw error(strFmt("@Proj:ProjIdAndContractLineGroupIdNotAllowedTogether"));
        }

        if (ret && this.ProjContractRelation == TableAll::Table && this.ProjContractId == '')
        {
            ret = checkFailed("@Proj:RevenueProfileRule_MissingContractId");
        }

        if (ret && this.ProjRelation != TableGroupAll::All && this.ProjRelationId == '')
        {
            ret = checkFailed("@Proj:RevenueProfileRule_MissingProjRelationId");
        }

        // Confirm that project and contract ids provided actually match a real project.
        if (ret && this.ProjContractId && this.ProjRelation == TableGroupAll::Table && this.ProjRelationId)
        {
            ProjTable projLoc;
            select firstonly RecId from projLoc where projLoc.ProjId == this.ProjRelationId && projLoc.ProjInvoiceProjId == this.ProjContractId;

            if (!projLoc.RecId)
            {
                ret = checkFailed(strFmt("@Proj:RevenueProfileRuleInvalidProjAndContractId", this.ProjRelationId, this.ProjContractId));
            }
        }

        if (ret)
        {
            if (!this.RecId && ProjRevenueProfileRule::findRule(this.ProjContractRelation, this.ProjContractId, this.ProjRelation, this.ProjRelationId, this.BillingMethod, this.ContractLineGroupRefRecId).RecId)
            {
                ret = checkFailed("@Proj:RevenueProfileRule_DuplicateRecord");
            }
            else if (this.RecId && ProjRevenueProfileRule::findDuplicateRule(this.ProjContractRelation, this.ProjContractId, this.ProjRelation, this.ProjRelationId, this.BillingMethod, this.RecId, this.ContractLineGroupRefRecId).RecId)
            {
                ret = checkFailed("@Proj:RevenueProfileRule_DuplicateRecord");
            }
        }
		
		// Confirms that the project cost and revenue profile id provided exists for the billing method.
        ProjRevenueProfile projRevenueProfile = ProjRevenueProfile::findByRevenueProfileId(this.ProjRevenueProfileId);
		if (!projRevenueProfile || projRevenueProfile.BillingMethod != this.BillingMethod)
        {
            ret = checkFailed(strFmt("@Proj:InvalidProjectRevenueProfileIdForBillingMethod", this.ProjRevenueProfileId, this.BillingMethod));
        }

        // Validate update for TM billing method only. For FP, the OnAccLedgerStatus field is always set to P&L.
        if (ret && this.BillingMethod == ProjContractBillingMethod::TimeMaterial)
        {
            if (this.RecId)
            {
                ret = this.validateUpdate();
            }
            else
            {
                // Testing if new rule impacts any existing project with posted on account trans
                ret = this.validateNewRuleOverlap();
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdate</Name>
				<Source><![CDATA[
    private boolean validateUpdate()
    {
        boolean ret = true;
        str action = "update";

        ProjRevenueProfileRule origRule = this.orig();

        if (this.ContractLineGroupRefRecId && this.ProjRelationId != '')
        {
            ret = checkFailed(strFmt("@Proj:ProjIdAndContractLineGroupIdNotAllowedTogether"));
        }
        else if (this.ProjRevenueProfileId != origRule.ProjRevenueProfileId)
        {
            ProjRevenueProfile revProfNew = ProjRevenueProfile::findByRevenueProfileId(this.ProjRevenueProfileId);
            ProjRevenueProfile revProfOrig = ProjRevenueProfile::findByRevenueProfileId(origRule.ProjRevenueProfileId);

            // Don't validate further if new and old profile have same onAccLedgerStatus coz this is the only field we care about.
            if (revProfNew.OnAccLedgerStatus != revProfOrig.OnAccLedgerStatus)
            {
                Set projIds = ProjRevenueProfileRule::getProjIdsFromRule(this);
                SetEnumerator se = projIds.getEnumerator();
                while(se.moveNext())
                {
                    ProjId projId = se.current();
                    if (ProjRevenueProfileRule::hasPostedOnAccTransForProj(projId, this.BillingMethod))
                    {
                        ProjTable projLoc = ProjTable::find(projId);

                        // Fail only if this rule will be selected for the concerned project.
                        if (projLoc.Type == ProjType::None && this.RecId == ProjRevenueProfileRule::matchProfileRule(projLoc.ProjInvoiceProjId, projLoc.ProjId, projLoc.projGroupId, this.BillingMethod, this.ContractLineGroupRefRecId).RecId)
                        {
                            // Since these validations are expensive, we fail at the first problematic project instead of going through the entire list.
                            ret = checkFailed(strFmt("@Proj:RevenueProfileRulePostedTransError", action, projId));
                            break;
                        }
                    }
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNewRuleOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the new rule is interfering with an existing rule.
    /// </summary>
    /// <returns>true if validation pass; otherwise, false.</returns>
    private boolean validateNewRuleOverlap()
    {
        boolean ret = true;
        str action = "create";

        ProjRevenueProfile newProfileMatch = ProjRevenueProfile::findByRevenueProfileId(this.ProjRevenueProfileId);

        Set projIds = ProjRevenueProfileRule::getProjIdsFromRule(this);
        SetEnumerator se = projIds.getEnumerator();

        while(se.moveNext())
        {
            ProjId projId = se.current();
            if (ProjRevenueProfileRule::hasPostedOnAccTransForProj(projId, this.BillingMethod))
            {
                ProjTable projLoc = ProjTable::find(projId);

                // The rule that would have matched for this project before the new rule creation.
                ProjRevenueProfileRule oldRuleMatch = ProjRevenueProfileRule::matchProfileRule(projLoc.ProjInvoiceProjId, projLoc.ProjId, projLoc.projGroupId, this.BillingMethod, this.ContractLineGroupRefRecId);
                if (oldRuleMatch)
                {
                    ProjRevenueProfile oldProfileMatch = ProjRevenueProfile::findByRevenueProfileId(oldRuleMatch.ProjRevenueProfileId);

                    // Only compare the onAccLedgerStatus field since that is the only field which should not be changed over the course of a project.
                    // We have a problem only if the new rule has a lower rank than the old rule which means the new rule will get picked up once it is created.
                    if (newProfileMatch.OnAccLedgerStatus != oldProfileMatch.OnAccLedgerStatus && ProjRevenueProfileRule::getRuleRank(this) < ProjRevenueProfileRule::getRuleRank(oldRuleMatch))
                    {
                        // Since these validations are expensive, we fail at the first problematic project instead of going through the entire list.
                        ret = checkFailed(strFmt("@Proj:RevenueProfileRulePostedTransError", action, projId));
                        break;
                    }
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = true;
        str action = "delete";

        Set projIds = ProjRevenueProfileRule::getProjIdsFromRule(this);
        SetEnumerator se = projIds.getEnumerator();
        while(se.moveNext())
        {
            ProjId projId = se.current();
            if (ProjRevenueProfileRule::hasPostedOnAccTransForProj(projId, this.BillingMethod))
            {
                ProjTable projLoc = ProjTable::find(projId);

                // Fail if the rule being deleted is matched with an existing project with posted onacc transaction.
                if (projLoc.Type == ProjType::None && this.RecId == ProjRevenueProfileRule::matchProfileRule(projLoc.ProjInvoiceProjId, projLoc.ProjId, projLoc.projGroupId, this.BillingMethod).RecId)
                {
                    // Since these validations are expensive, we fail at the first problematic project instead of going through the entire list.
                    ret = checkFailed(strFmt("@Proj:RevenueProfileRulePostedTransError", action, projId));
                    break;
                }
            }
        }

        ret = ret && super();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjIdsFromRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all the project IDs that might match the given rule.
    /// All projects matching a rule should have a contract id.
    /// </summary>
    /// <param name = "_rule"><c>ProjRevenueProfileRule</c> object.</param>
    /// <returns></returns>
    private static Set getProjIdsFromRule(ProjRevenueProfileRule _rule)
    {
        Set projIds = new Set(Types::String);

        // When rule is using projId filter.
        if (_rule.ProjRelation == TableGroupAll::Table)
        {
            ProjTable projLoc;
            select RecId from projLoc 
                where projLoc.ProjId == _rule.ProjRelationId
                    && projLoc.Type == ProjType::None
                    && projLoc.Status != ProjStatus::Completed
                    && projLoc.ProjInvoiceProjId != '';

            if (projLoc.RecId)
            {
                projIds.add(_rule.ProjRelationId);
            }
            
        }
        else if (_rule.ProjRelation == TableGroupAll::GroupId)
        {
            // Find all projects associated with this group and are of type none.
            ProjTable projLoc;

            if (_rule.ProjContractRelation == TableAll::All)
            {
                while select ProjId from projLoc 
                    where projLoc.Type == ProjType::None
                        && projLoc.Status != ProjStatus::Completed
                        && projLoc.projGroupId == _rule.ProjRelationId
                        && ProjLoc.ProjInvoiceProjId != ''
                {
                    projIds.add(projLoc.ProjId);
                }
            }
            else
            {
                while select ProjId from projLoc 
                    where projLoc.Type == ProjType::None
                        && projLoc.Status != ProjStatus::Completed
                        && projLoc.projGroupId == _rule.ProjRelationId
                        && projLoc.ProjInvoiceProjId == _rule.ProjContractId
                {
                    projIds.add(projLoc.ProjId);
                }
            }
        }
        else
        {
            // For case where ProjRelation is set to All.
            ProjTable projLoc;

            if (_rule.ProjContractRelation == TableAll::All)
            {
                while select ProjId from projLoc 
                    where projLoc.Type == ProjType::None
                        && projLoc.Status != ProjStatus::Completed
                        && projLoc.ProjInvoiceProjId != ''
                {
                    projIds.add(projLoc.ProjId);
                }
            }
            else
            {
                while select ProjId from projLoc 
                    where projLoc.Type == ProjType::None
                        && projLoc.Status != ProjStatus::Completed
                        && projLoc.ProjInvoiceProjId == _rule.ProjContractId
                {
                    projIds.add(projLoc.ProjId);
                }
            }
        }

        return projIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchProfileRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the most restrictive matching rule for provided parameters.
    /// </summary>
    /// <param name = "_projInvoiceId">Contract ID.</param>
    /// <param name = "_projId">Proj ID.</param>
    /// <param name = "_projGroupId">Proj group ID.</param>
    /// <param name = "_billingMethod">Billing method for the revenue profile.</param>
    /// <param name = "_contractLineGroupRefRecId">RecId of corresponding<c>Contract line group</c> Id.</param>
    /// <returns><c>ProjRevenueProfileRule</c> record.</returns>
    protected internal static ProjRevenueProfileRule matchProfileRule(ProjInvoiceProjId _projInvoiceId, ProjId _projId, ProjGroupId _projGroupId,
                                                                   ProjContractBillingMethod _billingMethod, RecId _contractLineGroupRefRecId = 0)
    {
        ProjRevenueProfileRule matchingRule;

        if (_projInvoiceId)
        {
            if (_projId)
            {
                matchingRule = ProjRevenueProfileRule::findRule(TableAll::Table, _projInvoiceId, TableGroupAll::Table, _projId, _billingMethod);
                if (!matchingRule)
                {
                    matchingRule = ProjRevenueProfileRule::findRule(TableAll::All, '', TableGroupAll::Table, _projId, _billingMethod);
                }
            }
            
            if (!matchingRule && _projGroupId)
            {
                matchingRule = ProjRevenueProfileRule::findRule(TableAll::Table, _projInvoiceId, TableGroupAll::GroupId, _projGroupId, _billingMethod);
                if (!matchingRule)
                {
                    matchingRule = ProjRevenueProfileRule::findRule(TableAll::All, '', TableGroupAll::GroupId, _projGroupId, _billingMethod);
                }
            }

            if (!matchingRule && _contractLineGroupRefRecId)
            {
                matchingRule = ProjRevenueProfileRule::findRule(TableAll::Table, _projInvoiceId, TableGroupAll::All, '', _billingMethod, _contractLineGroupRefRecId);
            }
            
            if (!matchingRule)
            {
                matchingRule = ProjRevenueProfileRule::findRule(TableAll::Table, _projInvoiceId, TableGroupAll::All, '', _billingMethod);
            }
        }
        else
        {
            if (_projId)
            {
                matchingRule = ProjRevenueProfileRule::findRule(TableAll::All, '', TableGroupAll::Table, _projId, _billingMethod);
            }
            
            if (!matchingRule && _projGroupId)
            {
                matchingRule = ProjRevenueProfileRule::findRule(TableAll::All, '', TableGroupAll::GroupId, _projGroupId, _billingMethod);
            }
        }

        if (!matchingRule && _contractLineGroupRefRecId)
        {
            matchingRule = ProjRevenueProfileRule::findRule(TableAll::All, '', TableGroupAll::All, '', _billingMethod, _contractLineGroupRefRecId);
        }

        if (!matchingRule)
        {
            matchingRule = ProjRevenueProfileRule::findRule(TableAll::All, '', TableGroupAll::All, '', _billingMethod);
        }

        return matchingRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRuleRank</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets rank of the given rule. The lower the rank the more restrictive the rule is and is more likely to be matched for a given project.
    /// </summary>
    /// <param name = "_rule"><c>ProjRevenueProfileRule</c> object for which rank is being calculated.</param>
    /// <returns>Rank of the given rule.</returns>
    private static int getRuleRank(ProjRevenueProfileRule _rule)
    {
        ProjRevenueProfileRule matchingRule;
        int rank = 0;

        // Start with the most specific condition.
        if (_rule.ProjRelation == TableGroupAll::Table)
        {
            if (_rule.ProjContractRelation == TableAll::Table)
            {
                rank = 1;
            }
            else
            {
                rank = 2;
            }
        }
        else if (_rule.ProjRelation == TableGroupAll::GroupId)
        {
            if (_rule.ProjContractRelation == TableAll::Table)
            {
                rank = 3;
            }
            else
            {
                rank = 4;
            }
        }
        else
        {
            if (_rule.ProjContractRelation == TableAll::Table)
            {
                if (_rule.ContractLineGroupRefRecId)
                {
                    rank = 5;
                }
                else
                {
                    rank = 6;
                }
            }
            else
            {
                if ( _rule.ContractLineGroupRefRecId)
                {
                    rank = 7;
                }
                else
                {
                    rank = 8;
                }
            }
        }

        return rank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDuplicateRule</Name>
				<Source><![CDATA[
    private static ProjRevenueProfileRule findDuplicateRule(TableAll _contractRelation, ProjInvoiceProjId _contractId, TableGroupAll _projRelation, ProjRelation _projRelationId, ProjContractBillingMethod _billingMethod,  RecId _profileRuleRecId, RecId _contractLineGroupRefRecId = 0)
    {
        ProjRevenueProfileRule existingProfRule;

        select firstonly existingProfRule
                    where existingProfRule.ProjContractRelation == _contractRelation &&
                        existingProfRule.ProjContractId == _contractId &&
                        existingProfRule.ProjRelation == _projRelation &&
                        existingProfRule.ProjRelationId == _projRelationId &&
                        existingProfRule.BillingMethod == _billingMethod &&
                        existingProfRule.ContractLineGroupRefRecId == _contractLineGroupRefRecId &&
                        existingProfRule.RecId != _profileRuleRecId;

        return existingProfRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRule</Name>
				<Source><![CDATA[
    private static ProjRevenueProfileRule findRule(TableAll _contractRelation, ProjInvoiceProjId _contractId, TableGroupAll _projRelation, ProjRelation _projRelationId, ProjContractBillingMethod _billingMethod,  RecId _contractLineGroupRefRecId = 0)
    {
        ProjRevenueProfileRule existingProfRule;

        select firstonly existingProfRule
                    where existingProfRule.ProjContractRelation == _contractRelation &&
                        existingProfRule.ProjContractId == _contractId &&
                        existingProfRule.ProjRelation == _projRelation &&
                        existingProfRule.ProjRelationId == _projRelationId &&
                        existingProfRule.BillingMethod == _billingMethod &&
                        existingProfRule.ContractLineGroupRefRecId == _contractLineGroupRefRecId;

        return existingProfRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPostedOnAccTransForProj</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any posted on account transaction exists for this contract line.
    /// </summary>
    /// <param name = "_projId">Project ID to lookup posted on account transaction for.</param>
    /// <param name = "_billingMethod">Billing method for which on acc is being fetched.</param>
    /// <returns>true if posted transaction exists; otherwise false.</returns>
    private static boolean hasPostedOnAccTransForProj(ProjId _projId, ProjContractBillingMethod _billingMethod)
    {
        ProjOnAccTrans projOnAccTrans;
        ProjOnAccTransSale projOnAccTransSale;

        if (_billingMethod == ProjContractBillingMethod::FixedPrice)
        {
            select firstonly projOnAccTrans
            join projOnAccTransSale
                where projOnAccTrans.TransId == projOnAccTransSale.TransId
                    && projOnAccTrans.ProjID == _projId
                && projOnAccTrans.TransactionOrigin == ProjOrigin::Milestone
                    && projOnAccTransSale.TransStatus != ProjTransStatus::NoStatus
                    && projOnAccTransSale.TransStatus != ProjTransStatus::Registered;
        }
        else
        {
            select firstonly projOnAccTrans
            join projOnAccTransSale
                where projOnAccTrans.TransId == projOnAccTransSale.TransId
                    && projOnAccTrans.ProjID == _projId
                    && projOnAccTrans.TransactionOrigin != ProjOrigin::Milestone
                    && projOnAccTransSale.TransStatus != ProjTransStatus::NoStatus
                    && projOnAccTransSale.TransStatus != ProjTransStatus::Registered;
        }

        return projOnAccTrans.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:RevenueProfileRuleDevDoc</DeveloperDocumentation>
	<Label>@Proj:RevenueProfileRule</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ProjRevenueProfileId</TitleField1>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>ProjectManagementAndAccounting</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjRevenueProfileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjContractRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjRevenueProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjRelationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillingMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjContractRelation</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@Proj:RevenueProfileRule_ContractRelation</Label>
			<Mandatory>Yes</Mandatory>
			<EnumType>TableAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjRelation</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@Proj:RevenueProfileRule_ProjRelation</Label>
			<Mandatory>Yes</Mandatory>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjContractId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
			<Label>@Proj:ContractId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjRelationId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ProjRelation</ExtendedDataType>
			<Label>@Proj:ProjRelationId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjRevenueProfileId</Name>
			<ExtendedDataType>ProjRevenueProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BillingMethod</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>ProjContractBillingMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ContractLineGroupRefRecId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjRevenueProfileIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjRevenueProfileId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjRevenueProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjRevenueProfile</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjRevenueProfileId</Name>
					<SourceEDT>ProjRevenueProfileId</SourceEDT>
					<Field>ProjRevenueProfileId</Field>
					<RelatedField>ProjRevenueProfileId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BillingMethod</Name>
					<Field>BillingMethod</Field>
					<RelatedField>BillingMethod</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjContract</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjContractId</Name>
					<SourceEDT>ProjInvoiceProjId</SourceEDT>
					<Field>ProjContractId</Field>
					<RelatedField>ProjInvoiceProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContractLineGroupRefRec</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjContractLineGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjContractLineGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjContractLineGroup</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContractLineGroupRefRecId</Name>
					<Field>ContractLineGroupRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>