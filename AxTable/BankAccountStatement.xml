<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountStatement</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankAccountStatement extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearedAmount</Name>
				<Source><![CDATA[
    display AmountCur clearedAmount()
    {
        BankAccountTrans bankAccountTrans;

        select sum(AmountCur), sum(AmountCorrect) from bankAccountTrans
            where bankAccountTrans.AccountId == this.AccountId
                && bankAccountTrans.AccountStatement == this.AccountStatementNum
                && bankAccountTrans.AccountStatementDate == this.AccountStatementDate;

        return (bankAccountTrans.AmountCur + bankAccountTrans.AmountCorrect);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearedOpenAmount</Name>
				<Source><![CDATA[
    display AmountCur clearedOpenAmount()
    {
        BankAccountTrans bankAccountTrans;

        select sum(AmountCur), sum(AmountCorrect) from bankAccountTrans
            where bankAccountTrans.AccountId == this.AccountId
                && bankAccountTrans.AccountStatement == this.AccountStatementNum
                && bankAccountTrans.AccountStatementDate == this.AccountStatementDate;

        return (bankAccountTrans.AmountCur + bankAccountTrans.AmountCorrect);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openingBalance</Name>
				<Source><![CDATA[
    display AmountCur openingBalance()
    {
        AmountCur openingBalance;

        if (!hasFieldAccess(tablenum(BankAccountStatement), fieldnum(BankAccountStatement, EndingBalance), AccessType::View))
        {
            throw error("@SYS57330");
        }

        BankAccountStatement bankAccountStatement = this.findPreviousStatement();

        if (bankAccountStatement)
        {
            openingBalance = bankAccountStatement.EndingBalance;
        }

        return openingBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPreviousStatement</Name>
				<Source><![CDATA[
    internal BankAccountStatement findPreviousStatement() 
    {
        BankAccountStatement bankAccountStatement;
        
        /* This query generates lots of discussion, so hopefully this explains the necessity for the 'where' clause being so complex.
         * Bank statements have a lexicographic ordering on (AccountStatementDate, CreatedDateTime, RecId).
         * An additional field "AccountId" is added at the beginning of the "order by" clause to let the SQL pick the index StatementOrderingIdx.
         * Since in the "where" clause the value of the AccountId field is determined to be unique, adding this field will actually not change the expected order.
         *
         * In mathematical terms:
         *      (x_1, y_1, z_1) < (x_2, y_2, z_2)
         *      iff
         *      (x_1 < x_2) OR (x_1 == x_2 AND y_1 < y_2) OR (x_1 == x_2 AND y_1 == y_2 AND z_1 < z_2)
         * 
         * the above is simplified to:
         *      (x_1 < x_2) OR (x_1 == x_2 AND (y_1 < y_2 OR (y_1 == y_2 AND z_1 < z_2)))
         * 
         * this logic needs to be reflected in the where clause to limit the returned records to those strictly less than the current record.
         * The ORDER BY clause naturally orders lexicographically when given multiple columns, so we are guaranteed to get the previous statement
         * from those that are returned. If X++ ever implements SQL's LAG function, this query could be simplified.
         */
        select firstonly reverse bankAccountStatement
            order by AccountId, AccountStatementDate, CreatedDateTime, RecId
            where bankAccountStatement.AccountId == this.AccountId
                && bankAccountStatement.CancelDate == dateNull()
                && (bankAccountStatement.AccountStatementDate < this.AccountStatementDate
                    || (bankAccountStatement.AccountStatementDate == this.AccountStatementDate 
                        && (bankAccountStatement.CreatedDateTime < this.CreatedDateTime
                            || (bankAccountStatement.CreatedDateTime == this.CreatedDateTime && bankAccountStatement.RecId < this.RecId)
                           )
                       )
                   );

        return bankAccountStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextStatement</Name>
				<Source><![CDATA[
    internal BankAccountStatement findNextStatement()
    {
        BankAccountStatement bankAccountStatement;
         
        // Bank statements have a lexicographic ordering on (AccountStatementDate, CreatedDateTime, RecId).
        select firstonly bankAccountStatement
            order by AccountId, AccountStatementDate, CreatedDateTime, RecId
            where bankAccountStatement.AccountId == this.AccountId
                && bankAccountStatement.CancelDate == dateNull()
                && (bankAccountStatement.AccountStatementDate > this.AccountStatementDate
                    || (bankAccountStatement.AccountStatementDate == this.AccountStatementDate 
                        && (bankAccountStatement.CreatedDateTime > this.CreatedDateTime
                            || (bankAccountStatement.CreatedDateTime == this.CreatedDateTime && bankAccountStatement.RecId > this.RecId)
                           )
                       )
                   );

        return bankAccountStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDateUpdateMaintainsStatementOrder</Name>
				<Source><![CDATA[
    internal static boolean checkDateUpdateMaintainsStatementOrder(BankAccountStatement _bankAccountStatement, TransDate _newStatementDate)
    {
        BankAccountStatement prevStatement = _bankAccountStatement.findPreviousStatement();
        BankAccountStatement nextStatement = _bankAccountStatement.findNextStatement();

        // Bank statements have a lexicographic ordering on (AccountStatementDate, CreatedDateTime, RecId).
        boolean isPrevStatementOrderMaintained = (
                prevStatement.AccountStatementDate == dateNull()
                || prevStatement.AccountStatementDate < _newStatementDate
                || (prevStatement.AccountStatementDate == _newStatementDate && prevStatement.CreatedDateTime < _bankAccountStatement.CreatedDateTime)
                || (prevStatement.AccountStatementDate == _newStatementDate && prevStatement.CreatedDateTime == _bankAccountStatement.CreatedDateTime && prevStatement.RecId < _bankAccountStatement.RecId));
            
        boolean isNextStatementOrderMaintained = (
                nextStatement.AccountStatementDate == dateNull()
                || nextStatement.AccountStatementDate > _newStatementDate
                || (nextStatement.AccountStatementDate == _newStatementDate && nextStatement.CreatedDateTime > _bankAccountStatement.CreatedDateTime)
                || (nextStatement.AccountStatementDate == _newStatementDate && nextStatement.CreatedDateTime == _bankAccountStatement.CreatedDateTime && nextStatement.RecId > _bankAccountStatement.RecId));
        
        return isPrevStatementOrderMaintained && isNextStatementOrderMaintained;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStatementCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the statement is cancelled.
    /// </summary>
    /// <returns>true if the statement is cancelled; otherwise, false.</returns>
    internal boolean isStatementCancelled()
    {
        return this.CancelDate != dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatementStatus</Name>
				<Source><![CDATA[
    internal BankAccountStatementStatus getStatementStatus()
    {
        BankAccountStatementStatus statementStatus;

        if (this.CancelDate != dateNull())
        {
            statementStatus = BankAccountStatementStatus::Cancelled;
        }
        else if (this.ReconcileDate != dateNull())
        {
            statementStatus = BankAccountStatementStatus::Reconciled;
        }
        else
        {
            statementStatus = BankAccountStatementStatus::Unreconciled;
        }
        return statementStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMostRecentReconciledStatement</Name>
				<Source><![CDATA[
    private static BankAccountStatement findMostRecentReconciledStatement(CompanyBankAccountId _accountId)
    {
        BankAccountStatement bankAccountStatement;

        select firstonly reverse bankAccountStatement
            order by AccountId, AccountStatementDate, CreatedDateTime, RecId
            where bankAccountStatement.AccountId == _accountId
                && bankAccountStatement.ReconcileDate != dateNull()
                && bankAccountStatement.CancelDate == dateNull(); 

        return bankAccountStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMostRecentReconciledStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if statement is the most recent reconciled.
    /// </summary>
    /// <returns>true if the statement is the most recent reconciled; otherwise, false.</returns>
    internal boolean isMostRecentReconciledStatement()
    {
        BankAccountStatement lastStatement = BankAccountStatement::findMostRecentReconciledStatement(this.AccountId);

        return this.RecId == lastStatement.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean validateDelete()
    {
        BankAccountTrans bankAccountTrans;
        boolean ret = super();

        if (ret)
        {
            if (this.ReconcileDate)
            {
                ret = checkFailed("@SYS50988");
            }
            else
            {
                select RecId from bankAccountTrans
                    where bankAccountTrans.AccountId == this.AccountId
                        && bankAccountTrans.AccountStatement == this.AccountStatementNum
                        && bankAccountTrans.AccountStatementDate == this.AccountStatementDate;

                if (bankAccountTrans.RecId)
                {
                    ret = checkFailed(strfmt("@SYS56339", tablestr(BankAccountTrans)));
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(BankAccountStatement, AccountStatementDate):
                    if (BankAccountStatement::enforceOrderForNewStatements())
                    {
                        TransDate mostRecentStatementDate = this.findMostRecentStatementDate();

                        if (this.AccountStatementDate < mostRecentStatementDate)
                        {
                            isValid = checkFailed("@CashManagement:NewStatementCreatedOutOfOrder");
                        }
                    }
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMostRecentStatementDate</Name>
				<Source><![CDATA[
    private TransDate findMostRecentStatementDate()
    {
        BankAccountStatement bankAccountStatement;

        select maxof(AccountStatementDate) from bankAccountStatement
            where bankAccountStatement.AccountId == this.AccountId
                && bankAccountStatement.CancelDate == dateNull();

        return bankAccountStatement.AccountStatementDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enforceOrderForNewStatements</Name>
				<Source><![CDATA[
    internal static boolean enforceOrderForNewStatements()
    {
        // Newly created statements must be created in order if this feature flag is on
        return BankParameters::find().AllowEditBankAccountStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(CompanyBankAccountId _accountId, TransDate _accountStatementDate, BankAccountStatementNum _accountStatementNum )
    {
        boolean ret = true;

        if (!BankAccountStatement::exist(_accountId, _accountStatementDate, _accountStatementNum))
        {
            ret = checkFailed(strfmt(BankAccountStatement::txtNotExist(), _accountId, date2StrUsr(_accountStatementDate, DateFlags::FormatAll), _accountStatementNum));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(CompanyBankAccountId _accountId, TransDate _accountStatementDate, BankAccountStatementNum _accountStatementNum )
    {
        return (select firstonly RecId from bankAccountStatement
                    where bankAccountStatement.AccountId == _accountId
                        && bankAccountStatement.AccountStatementDate == _accountStatementDate
                        && bankAccountStatement.AccountStatementNum == _accountStatementNum).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static BankAccountStatement find(
        CompanyBankAccountId _accountId,
        TransDate _accountStatementDate,
        BankAccountStatementNum _accountStatementNum,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankAccountStatement bankAccountStatement;

        bankAccountStatement.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            bankAccountStatement.concurrencyModel(_concurrencyModel);
        }

        select firstonly bankAccountStatement
            where bankAccountStatement.AccountId == _accountId
                && bankAccountStatement.AccountStatementDate == _accountStatementDate
                && bankAccountStatement.AccountStatementNum == _accountStatementNum;

        return bankAccountStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102165";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<DeveloperDocumentation>@SYS127006</DeveloperDocumentation>
	<Label>@SYS25725</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>AccountId</TitleField1>
	<TitleField2>AccountStatementDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>AccountDateIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Bank</Modules>
	<PrimaryIndex>AccountDateIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountStatementNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountStatementDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReconcileDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndingBalance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CancelDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Balance</Name>
			<Label>@SYS10145</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndingBalance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountStatementDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountStatementNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndingBalance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReconcileDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CancelDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Statement</Name>
			<Label>@SYS10066</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountStatementDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountStatementNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReconcileDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CancelDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AccountStatementDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS26785</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountStatementNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankAccountStatementNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EndingBalance</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS50986</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReconcileDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS22247</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CancelDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@CashManagement:BankReconciliationCancelDate</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountStatementDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountStatementNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReconciledateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ReconcileDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatementOrderingIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountStatementDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CreatedDateTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReconcileDateCancelDateIndex</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReconcileDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CancelDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BankAccountTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123560</EntityRelationshipRole>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BankAccountTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>BankAccountStatement</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountId</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>AccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>