<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailAssortmentTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailAssortmentTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.AssortmentID = NumberSeq::newGetNum(RetailParameters::numRefAssortmentId()).num();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the value into <c>RetailAssortmentTable</c> table.
    /// </summary>
    public void insert()
    {
        if (this.AssortmentID == '')
        {
            this.AssortmentID = NumberSeq::newGetNum(RetailParameters::numRefAssortmentId()).num();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && this.PublishedDateTime != DateTimeUtil::minValue())
        {
            // Cannot delete previously published assortment.
            info("@RET260541");
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDraftCopyOfAssortment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a draft copy of the channels and products associated with the specified retail assortment
    /// record.
    /// </summary>
    /// <param name="_retailAssortmentTable">
    /// The retail assortment record.
    /// </param>
    /// <remarks>
    /// The assortment definition is set to draft in such a way that changes are not observed by the
    /// assortment exploder job.
    /// </remarks>
    public static void createDraftCopyOfAssortment(RetailAssortmentTable _retailAssortmentTable)
    {
        if (_retailAssortmentTable.Status == RetailAssortmentStatusType::Published ||
            _retailAssortmentTable.Status == RetailAssortmentStatusType::Expired)
        {
            RetailAssortmentTable::updateAssortmentStatusFromEdit(_retailAssortmentTable);

            ttsbegin;
            // Copy the associated channels
            RetailAssortmentChannelLine::copyChannelLines(
                _retailAssortmentTable.RecId,
                RetailAssortmentStatusType::Published,
                _retailAssortmentTable.RecId,
                RetailAssortmentStatusType::Draft);

            // Copy the associated products
            RetailAssortmentProductLine::copyProductLines(
                _retailAssortmentTable.RecId,
                RetailAssortmentStatusType::Published,
                _retailAssortmentTable.RecId,
                RetailAssortmentStatusType::Draft);

            _retailAssortmentTable.Status = RetailAssortmentStatusType::Draft;
            _retailAssortmentTable.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssortmentStatusFromEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// updates the status of assortment record to intermediate unpublishing state.
    /// And deletes draft versions of channels lines and product lines.
    /// </summary>
    /// <param name="_retailAssortmentTable">
    /// The retail assortment record.
    /// </param>
    /// <remarks>
    /// Updates the status and deletes drafts to avoid duplicate key exception 
    /// when multiple users work concurrently in the same assortment.
    /// </remarks>
    public static void updateAssortmentStatusFromEdit(RetailAssortmentTable _retailAssortmentTable)
    {
        ttsbegin;
        _retailAssortmentTable.PreviousStatus   = _retailAssortmentTable.Status;
        _retailAssortmentTable.Status           = RetailAssortmentStatusType::UnPublishing;
        _retailAssortmentTable.update();

        RetailAssortmentProductLine assortmentProduct, assortmentProductGroup;
        RetailGroupMemberLine       groupMemberLine;
        RetailAssortmentChannelLine assortmentChannel;

        delete_from groupMemberLine
            exists join assortmentProductGroup
            where groupMemberLine.RecId == assortmentProductGroup.RetailGroupMemberLineId
            &&    assortmentProductGroup.AssortmentRecId == _retailAssortmentTable.RecId
            &&    assortmentProductGroup.Status == RetailAssortmentStatusType::Draft;

        delete_from assortmentProduct
            where assortmentProduct.AssortmentRecId == _retailAssortmentTable.RecId
            &&    assortmentProduct.Status == RetailAssortmentStatusType::Draft;

        delete_from assortmentChannel
            where assortmentChannel.AssortmentRecId == _retailAssortmentTable.RecId
            &&    assortmentChannel.Status == RetailAssortmentStatusType::Draft;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailAssortmentTable</c> table.
    /// </summary>
    /// <param name="_assortmentNumber">
    /// The assortment number of the assortment record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailAssortmentTable</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailAssortmentTable find(RetailAssortmentID _assortmentNumber, boolean _forUpdate = false)
    {
        RetailAssortmentTable   assortmentTable;

        if (_assortmentNumber)
        {
            assortmentTable.selectForUpdate(_forUpdate);

            select firstOnly assortmentTable
                where assortmentTable.AssortmentID == _assortmentNumber;
        }

        return assortmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>RetailAssortmentTable</c> table using recid value.
    /// </summary>
    /// <param name="recId">
    /// The RecId of the current record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailAssortmentTable</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailAssortmentTable findRecId(RecId       recId,
                                boolean     _forUpdate = false )
    {
        RetailAssortmentTable retailAssortmentTable;

        retailAssortmentTable.selectForUpdate(_forUpdate);

        select firstOnly retailAssortmentTable
            where retailAssortmentTable.RecId == recId;

        return retailAssortmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductAssortedTo</Name>
				<Source><![CDATA[
/// <summary>
    /// Checkes whether a product or variant is assorted to the specificed channel on the specified date.
    /// </summary>
    /// <param name="_productRecId">
    /// The recid of the product.
    /// </param>
    /// <param name="_channelRecId">
    /// The recid of the channel.
    /// </param>
    /// <param name="_date">
    /// The date.
    /// </param>
    /// <returns>
    /// The result.
    /// </returns>
    public static boolean isProductAssortedTo(RefRecId _productRecId, RefRecId _channelRecId, date _date)
    {
        RetailAssortmentLookupExplodedLeaf assortmentProductExploded;
        RetailAssortmentLookupChannelGroup assortmentChannelExploded;
        RetailChannelTable channel;

        select firstOnly RecId from assortmentProductExploded
            where assortmentProductExploded.Product == _productRecId
               && assortmentProductExploded.ValidFrom <= _date
               && assortmentProductExploded.ValidTo >= _date
            exists join assortmentChannelExploded
                where assortmentChannelExploded.AssortmentId == assortmentProductExploded.AssortmentId
            exists join channel
                where channel.OMOperatingUnitID == assortmentChannelExploded.OMOperatingUnitId
                   && channel.RecId == _channelRecId;

        return assortmentProductExploded.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the number sequence module for retail parameters.
    /// </summary>
    /// <returns>
    /// The number sequence module.
    /// </returns>
    public static NumberSeqModule numberSeqModule()
    {
        return NumberSeqModule::RetailParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishAssortment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publishes the current assortment in such a way that the changes that were made to the assortment
    /// are observed by the assortment exploder job.
    /// </summary>
    /// <param name="_retailAssortmentTable">
    /// The retail assortment record.
    /// </param>
    public static void publishAssortment(RetailAssortmentTable _retailAssortmentTable)
    {
        if (_retailAssortmentTable.Status == RetailAssortmentStatusType::Draft)
        {
            RetailAssortmentTable::updateAssortmentStatusFromPublish(_retailAssortmentTable);

            ttsbegin;
            RetailAssortmentChannelLine::publishChannelLines(_retailAssortmentTable.RecId);
            RetailAssortmentProductLine::publishProductLines(_retailAssortmentTable.RecId);

            _retailAssortmentTable.Status = RetailAssortmentStatusType::Published;
            _retailAssortmentTable.PublishedDateTime = DateTimeUtil::utcNow();
            _retailAssortmentTable.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssortmentStatusFromPublish</Name>
				<Source><![CDATA[
    /// <summary>
    /// updates the status of assortment record to intermediate Publishing state.
    /// </summary>
    /// <param name="_retailAssortmentTable">
    /// The retail assortment record.
    /// </param>
    /// <remarks>
    /// Updates the status to avoid duplicate key exception.
    /// when multiple users work concurrently in the same assortment.
    /// </remarks>
    public static void updateAssortmentStatusFromPublish(RetailAssortmentTable _retailAssortmentTable)
    {
        ttsbegin;
        _retailAssortmentTable.PreviousStatus   = _retailAssortmentTable.Status;
        _retailAssortmentTable.Status           = RetailAssortmentStatusType::Publishing;
        _retailAssortmentTable.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertAssortment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverts the current assortment to the previous published state.
    /// </summary>
    /// <param name="_retailAssortmentTable">
    /// The retail assortment record.
    /// </param>
    public static void revertAssortment(RetailAssortmentTable _retailAssortmentTable)
    {
        RetailAssortmentChannelLine channelLine;
        RetailAssortmentProductLine productLine;

        ttsBegin;

        if (_retailAssortmentTable.Status == RetailAssortmentStatusType::Draft)
        {
            delete_from channelLine
                where
                    channelLine.AssortmentRecId == _retailAssortmentTable.RecId &&
                    channelLine.Status == RetailAssortmentStatusType::Draft;

            delete_from productLine
                where
                    productLine.AssortmentRecId == _retailAssortmentTable.RecId &&
                    productLine.Status == RetailAssortmentStatusType::Draft;

            _retailAssortmentTable.Status = RetailAssortmentStatusType::Published;
            _retailAssortmentTable.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET6070</DeveloperDocumentation>
	<FormRef>RetailAssortmentDetails</FormRef>
	<Label>@RET5212</Label>
	<ListPageRef>RetailAssortmentDetails</ListPageRef>
	<TableGroup>Main</TableGroup>
	<TitleField1>AssortmentID</TitleField1>
	<TitleField2>name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Merchandising</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>AssortmentNumberIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RetailAssortmentProductLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailAssortmentProductLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RetailAssortmentChannelLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailAssortmentChannelLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssortmentID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PublishedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssortmentID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@RET5150</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssortmentID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PublishedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssortmentID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAssortmentID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailAssortmentName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>PublishedDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DateSubmitted</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailAssortmentStatusType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
			<Label>@RET260626</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
			<Label>@RET4369</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PreviousStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Retail:RetailAssortmentPreviousStatus</Label>
			<EnumType>RetailAssortmentStatusType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AssortmentNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AssortmentID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>