<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardTypeCurrency</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CreditCardTypeCurrency extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayCurrencyCodeISO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ISO currency code of the currency.
    /// </summary>
    /// <returns>
    /// The ISO currency code; otherwise, an empty string.
    /// </returns>
    public display CurrencyCodeISO displayCurrencyCodeISO()
    {
        CurrencyCodeISO currencyCodeISO;

        if (hasTableAccess(tableNum(Currency)))
        {
            currencyCodeISO = Currency::currencyCodeISO(this.CurrencyCode);
        }

        return currencyCodeISO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCurrencyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the currency.
    /// </summary>
    /// <returns>
    /// The currency name; otherwise, an empty string.
    /// </returns>
    public display CurrencyName displayCurrencyName()
    {
        CurrencyName currencyName;

        if (hasTableAccess(tableNum(Currency)))
        {
            currencyName = Currency::find(this.CurrencyCode).Txt;
        }

        return currencyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue()
    {
        super();
        this.DataSupport = CreditCardCurrencyDataSupport::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CreditCardTypeCurrency</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_creditCardTypeSetup">
    /// The <c>CreditCardTypeSetup</c> record of the <c>CreditCardTypeCurrency</c> to check for existence.
    /// </param>
    /// <param name="_currencyCode">
    /// The <c>CurrencyCode</c> of the <c>CreditCardTypeCurrency</c> to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(CreditCardTypeSetup _creditCardTypeSetup, CurrencyCode _currencyCode)
    {
        boolean found = true;

        if (!CreditCardTypeCurrency::exist(_creditCardTypeSetup, _currencyCode))
        {
            found = checkFailed(strFmt(CreditCardTypeCurrency::txtNotExist(), _creditCardTypeSetup, _currencyCode));
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new <c>CreditCardTypeCurrency</c> record.
    /// </summary>
    /// <param name="_creditCardTypeSetup">
    /// A <c>CreditCardTypeSetup</c> table record.
    /// </param>
    /// <param name="_currency">
    /// A <c>CurrencyCode</c> value.
    /// </param>
    /// <remarks>
    /// A new record is only added if it does not already exist.
    /// </remarks>
    public static void createDefaultData(CreditCardTypeSetup _creditCardTypeSetup, CurrencyCode _currency)
    {
        CreditCardTypeCurrency creditCardTypeCurrency;

        select firstonly creditCardTypeCurrency
            where creditCardTypeCurrency.CreditCardTypeSetup == _creditCardTypeSetup.RecId;

        if (!creditCardTypeCurrency)
        {
            creditCardTypeCurrency.CreditCardTypeSetup = _creditCardTypeSetup.RecId;
            creditCardTypeCurrency.CurrencyCode = _currency;
            creditCardTypeCurrency.DataSupport = CreditCardCurrencyDataSupport::Level1;
            creditCardTypeCurrency.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>CreditCardTypeCurrency</c> table exists.
    /// </summary>
    /// <param name="_creditCardTypeSetup">
    /// The <c>CreditCardProcessorOption</c> record of the <c>CreditCardTypeCurrency</c> to check for existence.
    /// </param>
    /// <param name="_currencyCode">
    /// The <c>CurrencyCode</c> of the <c>CreditCardTypeCurrency</c> to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(CreditCardTypeSetup _creditCardTypeSetup, CurrencyCode _currencyCode)
    {
        return (select creditCardTypeCurrency
                 where
                    creditCardTypeCurrency.CreditCardTypeSetup == _creditCardTypeSetup.RecId &&
                    creditCardTypeCurrency.CurrencyCode == _currencyCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CreditCardTypeCurrency</c> table.
    /// </summary>
    /// <param name="_creditCardTypeSetup">
    /// The <c>CreditCardTypeSetup</c> record of the <c>CreditCardTypeCurrency</c> to check for existence.
    /// </param>
    /// <param name="_currencyCode">
    /// The <c>CurrencyCode</c> of the <c>CreditCardTypeCurrency</c> to check for existence.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CreditCardTypeCurrency</c> table; otherwise, an empty record.
    /// </returns>
    public static CreditCardTypeCurrency find(
            CreditCardTypeSetup _creditCardTypeSetup,
            CurrencyCode _currencyCode,
            boolean _forUpdate = false,
            ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CreditCardTypeCurrency creditCardTypeCurrency;

        creditCardTypeCurrency.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            creditCardTypeCurrency.concurrencyModel(_concurrencyModel);
        }

        select firstonly creditCardTypeCurrency
            where creditCardTypeCurrency.CreditCardTypeSetup == _creditCardTypeSetup.RecId &&
                creditCardTypeCurrency.CurrencyCode == _currencyCode;

        return creditCardTypeCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CreditCard</ConfigurationKey>
	<DeveloperDocumentation>@SYS328855</DeveloperDocumentation>
	<Label>@SYS327088</Label>
	<TitleField1>CurrencyCode</TitleField1>
	<TitleField2>DataSupport</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>TypeSetupCurrencyIdx</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<Modules>AccountsReceivable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataSupport</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayCurrencyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayCurrencyCodeISO</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataSupport</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CreditCardTypeSetup</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DataSupport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CreditCardCurrencyDataSupport</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TypeSetupCurrencyIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>CreditCardTypeSetup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CreditCardTypeSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CreditCardTypeSetup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CreditCardTypeSetup</Name>
					<Field>CreditCardTypeSetup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>