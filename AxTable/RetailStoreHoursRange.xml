<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStoreHoursRange</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

public class RetailStoreHoursRange extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the line number of next record in <c>RetailStoreHoursRange</c> table.
    /// </summary>
    /// <param name = "_templateId">
    /// The template ID of the selected StoreHoursTemplate.
    /// </param>
    /// <returns>
    /// The line number of the next record.
    /// </returns>
    public static LineNum nextLineNum(RetailStoreHoursTemplateId _templateId)
    {
        RetailStoreHoursRange storeHoursRange;

        select maxof(LineNum) from storeHoursRange
            where storeHoursRange.StoreHoursTemplateId == _templateId;

        return storeHoursRange.LineNum + 1.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeHoursOnMonday</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display field for Monday store hours.
    /// </summary>
    /// <returns>Store hours to be displayed.</returns>
    public display RetailDailyStoreHours storeHoursOnMonday()
    {
        return this.storeHoursOnWeekday(WeekDays::Monday);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeHoursOnTuesday</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display field for Tuesday store hours.
    /// </summary>
    /// <returns>Store hours to be displayed.</returns>
    public display RetailDailyStoreHours storeHoursOnTuesday()
    {
        return this.storeHoursOnWeekday(WeekDays::Tuesday);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeHoursOnWednesday</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display field for Wednesday store hours.
    /// </summary>
    /// <returns>Store hours to be displayed.</returns>
    public display RetailDailyStoreHours storeHoursOnWednesday()
    {
        return this.storeHoursOnWeekday(WeekDays::Wednesday);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeHoursOnThursday</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display field for Thursday store hours.
    /// </summary>
    /// <returns>Store hours to be displayed.</returns>
    public display RetailDailyStoreHours storeHoursOnThursday()
    {
        return this.storeHoursOnWeekday(WeekDays::Thursday);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeHoursOnFriday</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display field for Friday store hours.
    /// </summary>
    /// <returns>Store hours to be displayed.</returns>
    public display RetailDailyStoreHours storeHoursOnFriday()
    {
        return this.storeHoursOnWeekday(WeekDays::Friday);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeHoursOnSaturday</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display field for Saturday store hours.
    /// </summary>
    /// <returns>Store hours to be displayed.</returns>
    public display RetailDailyStoreHours storeHoursOnSaturday()
    {
        return this.storeHoursOnWeekday(WeekDays::Saturday);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeHoursOnSunday</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display field for Sunday store hours.
    /// </summary>
    /// <returns>Store hours to be displayed.</returns>
    public display RetailDailyStoreHours storeHoursOnSunday()
    {
        return this.storeHoursOnWeekday(WeekDays::Sunday);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeHoursOnWeekday</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the formatted content of store hours.
    /// </summary>
    /// <param name = "weekday">The day to be displayed.</param>
    /// <returns>Formatted content of store hours.</returns>
    private RetailDailyStoreHours storeHoursOnWeekday(WeekDays weekday)
    {
        const str StoreClosedHint = "@Retail:StoreClosedMessage";
        switch (weekday)
        {
            case WeekDays::Monday:
                return this.ClosedOnMonday ? StoreClosedHint : this.formatStoreHours(this.MondayOpenTime, this.MondayCloseTime);
            case WeekDays::Tuesday:
                return this.ClosedOnTuesday ? StoreClosedHint : this.formatStoreHours(this.TuesdayOpenTime, this.TuesdayCloseTime);
            case WeekDays::Wednesday:
                return this.ClosedOnWednesday ? StoreClosedHint : this.formatStoreHours(this.WednesdayOpenTime, this.WednesdayCloseTime);
            case WeekDays::Thursday:
                return this.ClosedOnThursday ? StoreClosedHint : this.formatStoreHours(this.ThursdayOpenTime, this.ThursdayCloseTime);
            case WeekDays::Friday:
                return this.ClosedOnFriday ? StoreClosedHint : this.formatStoreHours(this.FridayOpenTime, this.FridayCloseTime);
            case WeekDays::Saturday:
                return this.ClosedOnSaturday ? StoreClosedHint : this.formatStoreHours(this.SaturdayOpenTime, this.SaturdayCloseTime);
            case WeekDays::Sunday:
                return this.ClosedOnSunday ? StoreClosedHint : this.formatStoreHours(this.SundayOpenTime, this.SundayCloseTime);
            default:
                return StoreClosedHint;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInsideStoreHourRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the store open or close within Store Hours Range.
    /// </summary>
    /// <param name = "_currentUtcDataTime">Current UTC Date and Time.</param>
    /// <param name = "_storeHours">The <c>RetailStoreHoursRange</c> object.</param>
    /// <param name = "_timeZone">Channel Time zone.</param>
    /// <returns>True if store is open within the store hours range; otherwise, false.</returns>
    internal static boolean isInsideStoreHourRange(utcdatetime _currentUtcDataTime, RetailStoreHoursRange _storeHours, ChannelTimeZone _timeZone)
    {
        // Get the channel date/time.
        utcdatetime localStoreDateTime = DateTimeUtil::applyTimeZoneOffset(_currentUtcDataTime, _timeZone);

        TransDate currentDate = DateTimeUtil::date(localStoreDateTime);
        int  currentTimeInSec = DateTimeUtil::time(localStoreDateTime);
        int defaultTimeInSec = 0;
        int openTimeInSec;
        int closeTimeInSec;
        boolean isClosed;
   
        switch (dayOfWk(currentDate))
        {
            case WeekDays::Monday:
                openTimeInSec = _storeHours.MondayOpenTime;
                closeTimeInSec = _storeHours.MondayCloseTime;
                isClosed = _storeHours.ClosedOnMonday;
                break;

            case WeekDays::Tuesday:
                openTimeInSec = _storeHours.TuesdayOpenTime;
                closeTimeInSec = _storeHours.TuesdayCloseTime;
                isClosed = _storeHours.ClosedOnTuesday;
                break;

            case WeekDays::Wednesday:
                openTimeInSec = _storeHours.WednesdayOpenTime;
                closeTimeInSec = _storeHours.WednesdayCloseTime;
                isClosed = _storeHours.ClosedOnWednesday;
                break;

            case WeekDays::Thursday:
                openTimeInSec = _storeHours.ThursdayOpenTime;
                closeTimeInSec = _storeHours.ThursdayCloseTime;
                isClosed = _storeHours.ClosedOnThursday;
                break;

            case WeekDays::Friday:
                openTimeInSec = _storeHours.FridayOpenTime;
                closeTimeInSec = _storeHours.FridayCloseTime;
                isClosed = _storeHours.ClosedOnFriday;
                break;

            case WeekDays::Saturday:
                openTimeInSec = _storeHours.SaturdayOpenTime;
                closeTimeInSec = _storeHours.SaturdayCloseTime;
                isClosed = _storeHours.ClosedOnSaturday;
                break;

            case WeekDays::Sunday:
                openTimeInSec = _storeHours.SundayOpenTime;
                closeTimeInSec = _storeHours.SundayCloseTime;
                isClosed = _storeHours.ClosedOnSunday;
                break;
        }

        // Return true if the isClosed is false and current time is between open and close time.
        return (!isClosed && currentTimeInSec >= openTimeInSec && currentTimeInSec <= closeTimeInSec);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStoreHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Depending on the configuration, format retail store hours to
    /// 12H format like 08:00 AM - 10:00 PM
    /// 24H format like 08:00 - 20:00
    /// </summary>
    /// <param name = "_fromTime">
    /// Store open time.
    /// </param>
    /// <param name = "_toTime">
    /// Store close time.
    /// </param>
    /// <returns>
    /// Formatted store open and close time.
    /// </returns>
    private RetailDailyStoreHours formatStoreHours(RetailStoreHoursOpenTime _fromTime, RetailStoreHoursCloseTime _toTime)
    {
        str openTime = this.timeToStrHourMinute(_fromTime);
        str closeTime = this.timeToStrHourMinute(_toTime);

        return strFmt("@Retail:StoreHoursOpenCloseTime", openTime, closeTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeToStrHourMinute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Depending on the configuration, convert time to 12H format like 08:00 AM OR 24H format like 21:00.
    /// Method time2Str will return 08:00:00 am OR 19:00:00, which contains useless seconds for our case.
    /// </summary>
    /// <param name = "time">
    /// Time of day to be formatted.
    /// </param>
    /// <returns>
    /// Formatted time of day which contains only hours and minutes.
    /// </returns>
    private str timeToStrHourMinute(TimeOfDay time)
    {
        str timeStr = strUpr(time2Str(time, TimeSeparator::Colon, TimeFormat::Auto));
        str timeStrHM = subStr(timeStr, 0, 5) + subStr(timeStr, 9, strLen(timeStr) - 8);

        return timeStrHM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the specific record in the <c>RetailStoreHoursRange</c> table.
    /// </summary>
    /// <param name = "_templateId">
    /// The retail store hours template ID of range to find.
    /// </param>
    /// <param name = "_lineNum">
    /// The line number of range to find.
    /// </param>
    /// <param name = "_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailStoreHoursRange</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailStoreHoursRange find(RetailStoreHoursTemplateId _templateId, LineNum _lineNum, boolean _forUpdate = false)
    {
        RetailStoreHoursRange storeHoursRange;

        if (_templateId && _lineNum)
        {
            storeHoursRange.selectForUpdate(_forUpdate);

            select firstonly storeHoursRange
                where storeHoursRange.StoreHoursTemplateId == _templateId && storeHoursRange.LineNum == _lineNum;
        }

        return storeHoursRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate store hours range when creating new or modifying existing ones.
    /// Three types of validation will be performed:
    /// 1. End date must be after Start date.
    /// 2. Close time of every weekday must be after open time.
    /// 3. The valid date of newly created range or modified range cannot have overlap with other ranges.
    /// </summary>
    /// <returns>
    /// True if the record is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        // End date must be after start date.
        if (this.EndDate && this.StartDate > this.EndDate)
        {
            ApplicationEventSource::EventWriteRetailStoreHoursRangeInfoLog(funcName(), 'Failed to save store hours range because the end date cannot be before the start date.');
            error("@Retail:StoreHoursRangeDateValidationError");

            return false;
        }

        // Close time must be after open time.
        if ((!this.ClosedOnMonday && this.MondayOpenTime >= this.MondayCloseTime) ||
            (!this.ClosedOnTuesday && this.TuesdayOpenTime >= this.TuesdayCloseTime) ||
            (!this.ClosedOnWednesday && this.WednesdayOpenTime >= this.WednesdayCloseTime) ||
            (!this.ClosedOnThursday && this.ThursdayOpenTime >= this.ThursdayCloseTime) ||
            (!this.ClosedOnFriday && this.FridayOpenTime >= this.FridayCloseTime) ||
            (!this.ClosedOnSaturday && this.SaturdayOpenTime >= this.SaturdayCloseTime) ||
            (!this.ClosedOnSunday && this.SundayOpenTime >= this.SundayCloseTime))
        {
            ApplicationEventSource::EventWriteRetailStoreHoursRangeInfoLog(funcName(), 'Failed to save store hours range because the close time must be greater than the open time.');
            error("@Retail:StoreHoursRangeHoursValidationError");

            return false;
        }

        // Valid date cannot have overlap with other ranges.
        RetailStoreHoursTemplateId templateId = this.StoreHoursTemplateId;
        RetailStoreHoursRange storeHoursRange;
        RetailStoreHoursRangeEndDate lastStartDate, lastEndDate;

        while select StartDate, EndDate from storeHoursRange
            where storeHoursRange.StoreHoursTemplateId == templateId &&
                storeHoursRange.RecId != this.RecId
        {
            // Both current end date and existing end date are not "never".
            if ((max(this.StartDate, storeHoursRange.StartDate) <= min(this.EndDate, storeHoursRange.EndDate)) ||
                // Existing end date is "never".
                (storeHoursRange.EndDate == dateNull() && this.EndDate >= storeHoursRange.StartDate) ||
                // Current end date is "never".
                (this.EndDate == dateNull() && storeHoursRange.EndDate >= this.StartDate))
            {
                ApplicationEventSource::EventWriteRetailStoreHoursRangeInfoLog(funcName(), 'Failed to save store hours range because the date overlaps with other ranges.');
                error("@Retail:StoreHoursRangeDateOverlapError");

                return false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (!this.LineNum)
        {
            this.LineNum = RetailStoreHoursRange::nextLineNum(this.StoreHoursTemplateId);
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Modules>BrickAndMortarStore</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GeneralInfo</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AllRangeInfo</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>storeHoursOnMonday</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>storeHoursOnTuesday</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>storeHoursOnWednesday</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>storeHoursOnThursday</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>storeHoursOnFriday</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>storeHoursOnSaturday</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>storeHoursOnSunday</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MondayHours</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MondayOpenTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MondayCloseTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedOnMonday</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TuesdayHours</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TuesdayOpenTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TuesdayCloseTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedOnTuesday</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WednesdayHours</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WednesdayOpenTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WednesdayCloseTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedOnWednesday</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ThursdayHours</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ThursdayOpenTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThursdayCloseTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedOnThursday</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FridayHours</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FridayOpenTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FridayCloseTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedOnFriday</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SaturdayHours</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SaturdayOpenTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SaturdayCloseTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedOnSaturday</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SundayHours</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SundayOpenTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SundayCloseTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedOnSunday</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDescriptionEx5</ExtendedDataType>
			<Label>@Retail:StoreHoursRangeDescription</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreHoursRangeStartDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreHoursRangeEndDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StoreHoursTemplateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreHoursTemplateId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>MondayOpenTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreHoursOpenTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>MondayCloseTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreHoursCloseTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>TuesdayOpenTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreHoursOpenTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>TuesdayCloseTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreHoursCloseTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>WednesdayOpenTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreHoursOpenTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>WednesdayCloseTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreHoursCloseTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ThursdayOpenTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreHoursOpenTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ThursdayCloseTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreHoursCloseTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>FridayOpenTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreHoursOpenTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>FridayCloseTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreHoursCloseTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>SaturdayOpenTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreHoursOpenTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>SaturdayCloseTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreHoursCloseTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>SundayOpenTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreHoursOpenTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>SundayCloseTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreHoursCloseTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ClosedOnMonday</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreClosed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ClosedOnTuesday</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreClosed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ClosedOnWednesday</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreClosed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ClosedOnThursday</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreClosed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ClosedOnFriday</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreClosed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ClosedOnSaturday</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreClosed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ClosedOnSunday</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreClosed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>StoreHoursRangeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>StoreHoursTemplateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStoreHoursTemplate</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>RetailStoreHoursTemplate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StoreHoursTemplateId</Name>
					<Field>StoreHoursTemplateId</Field>
					<RelatedField>Id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>