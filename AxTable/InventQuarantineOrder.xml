<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQuarantineOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventQuarantineOrder extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowUpdateWithQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an update of the quarantine order is allowed by using the related quality order.
    /// </summary>
    /// <returns>
    /// true if an update is allowed; otherwise, false.
    /// </returns>
    ///
    boolean allowUpdateWithQualityOrder()
    {
        return !InventParameters::find().UseQualityManagement || (this.qualityOrderStatusDisplay() != InventTestOrderStatusDisplay::Open);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValid</Name>
				<Source><![CDATA[
    public boolean checkValid(InventQuarantineId _quarantineId)
    {
        boolean         ok = true;

        if (!_quarantineId)
        {
            ok = checkFailed("@SYS17656");
        }

        if (!this && _quarantineId)
        {
            ok = checkFailed(strFmt(InventQuarantineOrder::txtNotExist(), _quarantineId) );
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidReturn</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if return fields are set correctly for Quarantine order with regard to Return order.
    /// </summary>
    /// <returns>
    ///    Boolean value that indicates correct set up of return fields.
    /// </returns>
    /// <remarks>
    ///    Must be called before quarantine order is Ended or Reported as Finished.
    /// </remarks>
    public boolean checkValidReturn()
    {
        boolean ret = true;

        if (!this.hasReturnOrderReference())
        {
            return ret;
        }

        if (this.ReturnDispositionCodeId == '' || !ReturnDispositionCode::exist(this.ReturnDispositionCodeId))
        {
            // Disposition code must be selected on quarantine order '%1'.
            return checkFailed(strFmt("@SYS115237", this.QuarantineId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a dimension set that can be applied to the <c>InventQuarantineOrder.dimension</c> field.
    /// </summary>
    /// <param name="_dimension">
    ///    A dimension set that should be applied to the <c>InventQuarantineOrder.dimension</c> field.
    /// </param>
    /// <param name="_dimensionCopy">
    ///    A <c>dimensionCopy</c> object previously instantiated using the current
    ///    <c>InventQuarantineOrder</c> buffer; optional.
    /// </param>
    /// <returns>
    ///    A dimension set that can be applied to the <c>InventQuarantineOrder.dimension</c> field.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(DimensionDefault _dimension, DimensionCopy _dimensionCopy = DimensionCopy::newFromTable(this, CompanyInfo::findDataArea(curext()).RecId))
    {
        return _dimensionCopy.copy(_dimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;

        super();

        InventUpd_DeleteMovement::newMovement(InventMovement::construct(this)).updateNow();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventMovSubType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>InventMovSubType</c> value to use to construct inventory movements.
    /// </summary>
    /// <param name="_inventDirection">
    ///    The direction of the inventory transactions
    /// </param>
    /// <returns>
    ///    The <c>InventMovSubType</c> value to use to construct inventory movements.
    /// </returns>
    /// <remarks>
    ///    The value of the <paramref name="_inventDirection" /> parameter should be passed based on the
    ///    direction of the inventory transactions that will be updated by using the <c>InventMovement</c>
    ///    class.For example, if you are picking or reserving, the direction is Issue.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The value of the <paramref name="_inventdirection" /> parameter is unknown.
    /// </exception>
    public InventMovSubType getInventMovSubType(InventDirection _inventDirection)
    {
        switch (_inventDirection)
        {
            case InventDirection::None      :           //fall through  - this is if we should encounter inventtrans with qty = 0
            case InventDirection::Issue     :           return (this.Status == InventQuarantineStatus::Created ? InventMovSubType::TransferReceipt : InventMovSubType::None);
            case InventDirection::Receipt   :           return (this.Status != InventQuarantineStatus::Created ? InventMovSubType::TransferReceipt : InventMovSubType::None);
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnItemNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up to sales table for an RMA number if the Quarantine order is related to the Return order.
    /// </summary>
    /// <returns>
    /// An RMA number for return quarantine order
    /// </returns>
    display public SalesReturnItemNum getReturnItemNum()
    {
        SalesReturnItemNum rmaId = '';

        rmaId = SalesTable::find(this.TransRefId).ReturnItemNum;
        return rmaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasReturnOrderReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a quarantine order is referenced by a return order.
    /// </summary>
    /// <returns>
    ///    true if the quarantine order is referenced by a return order; otherwise, false.
    /// </returns>
    public boolean hasReturnOrderReference()
    {
        boolean ret = false;

        if (this.TransType == InventTransType::Sales)
        {
            ret = SalesTable::find(this.TransRefId).returnItem();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(InventTable _inventTable)
    {
        InventDim   inventDim;

        if (this.InventDimId)
        {
            inventDim = InventDim::find(this.InventDimId);
        }

        inventDim.initFromInventTable(_inventTable);
        inventDim = InventDim::findOrCreate(inventDim);

        this.Name                   = _inventTable.defaultProductName();
        this.Qty                    = _inventTable.inventStandardQty(inventDim.InventDimId);
        this.Qty                    = decRound(this.Qty,UnitOfMeasure::unitOfMeasureDecimalPrecision(
            UnitOfMeasure::unitOfMeasureIdBySymbol(InventTableModule::find(_inventTable.ItemId,ModuleInventPurchSales::Invent).UnitId)));

        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.PdsCWQty           = 1;
            this.pdsCWQtyConversion();
        }

        this.DefaultDimension       = this.copyDimension(_inventTable.DefaultDimension);

        this.setInventDimIdFromInventDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTrans</Name>
				<Source><![CDATA[
    public void initFromInventTrans(InventTrans _inventTrans)
    {
        InventDim           inventDim;

        this.ItemId            = _inventTrans.ItemId;

        inventDim              = InventDim::find(this.InventDimId);
        EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, _inventTrans.inventDim(), inventDim);
        this.setInventDimIdFromInventDim(inventDim);

        this.PdsCWQty          = _inventTrans.PdsCWQty;
        this.PdsCWRemainQty    = _inventTrans.PdsCWQty;

        this.Name                       = InventTable::find(_inventTrans.ItemId).defaultProductName();
        this.Qty                        = _inventTrans.Qty;
        this.RemainQty                  = _inventTrans.Qty;

        InventTransOrigin   inventTransOrigin = _inventTrans.inventTransOrigin();
        if (inventTransOrigin.ReferenceCategory == InventTransType::Sales)
        {
            this.ReturnDispositionCodeId = SalesLine::findInventTransId(inventTransOrigin.InventTransId).ReturnDispositionCodeId;
        }
        else
        {
            this.ReturnDispositionCodeId    = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTrans_W</Name>
				<Source><![CDATA[
    private boolean initFromInventTrans_W(InventMovement _inventMovement)
    {
        SalesLine               salesLine, linkedSalesLines;
        InventQuarantineOrder   inventQuarantineOrder;
        Qty                     remainSalesQty;

        if (_inventMovement.buffer() &&
            _inventMovement.buffer().TableId == tableNum(SalesLine))
        {
            salesLine = _inventMovement.buffer();
        }

        if (salesLine.CreditNoteInternalRef_PL &&
            salesLine.InventTransIdReturn)
        {
            select sum(SalesQty)
                from linkedSalesLines
                where linkedSalesLines.SalesId                  == salesLine.SalesId &&
                      linkedSalesLines.CreditNoteInternalRef_PL == salesLine.CreditNoteInternalRef_PL &&
                      linkedSalesLines.RecId                    != salesLine.RecId;

            select sum(Qty) from inventQuarantineOrder
                    where inventQuarantineOrder.InventTransIdRef == salesLine.InventTransId;

            remainSalesQty  = -salesLine.SalesQty - linkedSalesLines.SalesQty - inventQuarantineOrder.Qty;
            if (this.Qty > remainSalesQty)
            {
                this.Qty        = remainSalesQty;
                this.RemainQty  = this.Qty;
            }
        }

        return this.Qty > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.TransType = InventTransType::QuarantineOrder;

        super();

        this.QuarantineDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(
        NoYes   _dropEstimated      = NoYes::No,
        NoYes   _updateReservation  = NoYes::Yes)
    {
        InventUpd_Estimated     estimated;
        InventUpd_Estimated     estimatedTransfer;
        InventMovement          movement;
        InventMovement          movementTransfer;

        ttsbegin;

        if (!this.QuarantineId)
        {
            this.QuarantineId = InventQuarantineOrder::numberSeq().num();
        }

        this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();

        if (!_dropEstimated)
        {
            movement  = InventMovement::construct(this);
            estimated = InventUpd_Estimated::newInventMovement(movement);
            estimated.updateNow();

            movementTransfer  = InventMovement::construct(this,InventMovSubType::TransferReceipt);
            movementTransfer.inventTransOriginId(movement.inventTransOriginId());
            estimatedTransfer = InventUpd_Estimated::newInventMovement(movementTransfer);
            estimatedTransfer.updateNow();
        }

        super();

        if (estimated)
        {
            estimated.updateOwnerRelationship();
        }

        if (estimatedTransfer)
        {
            estimatedTransfer.updateOwnerRelationship();
        }

        if (_updateReservation)
        {
            if (estimated)
            {
                estimated.updateReservation();
            }

            if (estimatedTransfer)
            {
                estimatedTransfer.updateReservation();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim(boolean  _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUpdateReturnOrderRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating whether the return order needs to be modified as a consequence of updating the quarantine order.
    /// </summary>
    /// <returns>
    /// <c>true</c> if the return order needs to be modified as a consequence of updating the quarantine order; otherwise <c>false</c>.
    /// </returns>
    /// <remarks>
    /// Update is needed in case the quarantine order is at least in the Started status and the quarantine order relates to a return order.
    /// </remarks>
    public boolean isUpdateReturnOrderRequired()
    {
        return this.Status > InventQuarantineStatus::Created 
            && this.hasReturnOrderReference()
            && !InventQuarantineOrderFromScrapReturnOrderContext::isQuarantineOrderFromScrapReturnOrderContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default <c>InventQuarantineOrder.dimension</c> values that are based on the
    ///    <c>InventDim</c> record buffer values.
    /// </summary>
    /// <param name="_newInventDim">
    ///    The <c>InventDim</c> record buffer linked to the current <c>InventQuarantineOrder</c> record buffer.
    /// </param>
    /// <param name="_oldInventDim">
    ///    The <c>InventDim</c> record buffer that was previously linked to the current
    ///    <c>InventQuarantineOrder</c> record buffer.
    /// </param>
    public void linkInventDim2Dimension(
        InventDim   _newInventDim,
        InventDim   _oldInventDim)
    {
        _newInventDim.setInventSiteFromParentIfModified(this, _oldInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was previously created by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        SalesLine   salesLine;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventQuarantineOrder, ItemId):
                this.initFromInventTable(InventTable::find(this.ItemId));
                break;

            case fieldNum(InventQuarantineOrder, ReturnDispositionCodeId):
                if (this.ReturnDispositionCodeId != this.orig().ReturnDispositionCodeId)
                {
                    if (ReturnDispositionCode::find(this.orig().ReturnDispositionCodeId).createReplacement())
                    {
                        salesLine = SalesLine::findInventTransId(this.InventTransIdRef);
                        ReturnReplaceItemRef::deleteReplaceSetup(salesLine.SalesId, salesLine.LineNum);
                    }
                }
                break;

            case fieldNum(InventQuarantineOrder, PdsCWQty):
                this.pdsCWQtyConversion();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDoAutoLossProfitPhysical</Name>
				<Source><![CDATA[
    public boolean mustDoAutoLossProfitPhysical()
    {
        PurchLine   purchLine;

        if (this.TransType == InventTransType::Purch)
        {
            purchLine = PurchLine::findInventTransId(this.InventTransIdRef);

            if (purchLine.ProjId && !InventTable::find(this.ItemId).modelGroup().NegativePhysical)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyConversion</Name>
				<Source><![CDATA[
    private void pdsCWQtyConversion()
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.Qty = PdsCatchWeight::inventQty(
                                        this.ItemId,
                                        this.PdsCWQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyStartedFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quarantine order issue transactions quantity in catch weight unit that is updated financially.
    /// </summary>
    /// <returns>
    /// The quarantine order issue transactions quantity in catch weight unit that is updated financially.
    /// </returns>
    public PdsCWInventQty pdsCWQtyStartedFinancial()
    {
        InventTrans     inventTrans;
        InventDim       inventDim;
        InventLocation  inventLocation;

        select sum(PdsCWQty) from inventTrans
            where inventTrans.InventTransOrigin == InventTransOriginQuarantineOrder::findInventTransOriginId(this.DataAreaId, this.QuarantineId)
               && inventTrans.StatusIssue       == StatusIssue::Sold
               && inventTrans.StatusReceipt     == StatusReceipt::None
            join TableId from inventDim
                where inventDim.InventDimId == inventTrans.InventDimId
            join TableId from inventLocation
                where inventLocation.InventLocationId   == inventDim.InventLocationId
                   && inventLocation.InventLocationType == InventLocationType::Standard;

        return -inventTrans.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyEndedPhysical</Name>
				<Source><![CDATA[
    public InventQty qtyEndedPhysical()
    {
        InventTrans     inventTrans;
        InventDim       inventDim;
        InventLocation  inventLocation;

        select sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin == InventTransOriginQuarantineOrder::findInventTransOriginId(this.DataAreaId, this.QuarantineId)
               && inventTrans.StatusIssue       == StatusIssue::Deducted
               && inventTrans.StatusReceipt     == StatusReceipt::None
            join TableId from inventDim
                where inventDim.InventDimId == inventTrans.InventDimId
            join TableId from inventLocation
                where inventLocation.InventLocationId   == inventDim.InventLocationId
                   && inventLocation.InventLocationType == InventLocationType::Quarantine;

        return -inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyStarted</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines the quantity that has been started.
    /// </summary>
    /// <returns>
    ///   An quantity in the inventory unit for the item.
    /// </returns>
    public InventQty qtyStarted()
    {
        InventTrans     inventTrans;
        InventDim       inventDim;
        InventLocation  inventLocation;

        select sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin == InventTransOriginQuarantineOrder::findInventTransOriginId(this.DataAreaId, this.QuarantineId)
               && (inventTrans.StatusIssue      == StatusIssue::Deducted
               ||  inventTrans.StatusIssue      == StatusIssue::Sold)
               && inventTrans.StatusReceipt     == StatusReceipt::None
            join TableId from inventDim
                where inventDim.InventDimId == inventTrans.InventDimId
            join TableId from inventLocation
                where inventLocation.InventLocationId   == inventDim.InventLocationId
                   && inventLocation.InventLocationType == InventLocationType::Standard;

        return -inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyStartedFinancial</Name>
				<Source><![CDATA[
    public InventQty qtyStartedFinancial()
    {
        InventTrans     inventTrans;
        InventDim       inventDim;
        InventLocation  inventLocation;

        select sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin == InventTransOriginQuarantineOrder::findInventTransOriginId(this.DataAreaId, this.QuarantineId)
               && inventTrans.StatusIssue       == StatusIssue::Sold
               && inventTrans.StatusReceipt     == StatusReceipt::None
            join TableId from inventDim
                where inventDim.InventDimId == inventTrans.InventDimId
            join TableId from inventLocation
                where inventLocation.InventLocationId   == inventDim.InventLocationId
                   && inventLocation.InventLocationType == InventLocationType::Standard;

        return -inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrderStatusDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the status of the associated quality orders.
    /// </summary>
    /// <returns>
    ///    The current quality order status.
    /// </returns>

    display public InventTestOrderStatusDisplay qualityOrderStatusDisplay()
    {
        return InventQualityOrderTable::referenceDocumentStatusDisplay(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantityRemainingAfterSplitDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity after split for quarantine order
    /// </summary>
    /// <returns>
    ///    The remain quantity after split
    /// </returns>
    display public InventQuarantineOrderRemainQtyAfterSplit quantityRemainingAfterSplitDisplay()
    {
        return this.Qty - this.QuantityThatHasSplitIntoOtherQuarantineOrders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>catchWeightQuantityRemainingAfterSplitDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the catch weight quantity after split for quarantine order
    /// </summary>
    /// <returns>
    ///    The remain catch weight qty after split
    /// </returns>
    display public InventQuarantineOrderRemainCWQtyAfterSplit catchWeightQuantityRemainingAfterSplitDisplay()
    {
        return this.PdsCWQty - this.PdsCWQuantityThatHasSplitIntoOtherQuarantineOrders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quarantineInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the ID of the quarantine warehouse that is used for this quarantine order.
    /// </summary>
    /// <returns>
    ///    The ID of the quarantine warehouse; otherwise, an empty string.
    /// </returns>
    public InventLocationId quarantineInventLocationId()
    {
        InventDim       inventDim;
        InventLocation  inventLocation;

        inventDim = InventDim::find(this.InventDimIdQuarantine);
        inventLocation = inventDim.inventLocation();
        if (inventLocation && inventLocation.InventLocationType == InventLocationType::Quarantine)
        {
            return inventDim.InventLocationId;
        }

        inventDim = InventDim::find(this.InventDimId);
        inventLocation = inventDim.inventLocation();
        if (inventLocation && inventLocation.InventLocationType == InventLocationType::Quarantine)
        {
            return inventDim.InventLocationId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromFormWrite</Name>
				<Source><![CDATA[
    public void setFromFormWrite(
        InventDim   _inventDim,
        InventDim   _inventDimQuarantine)
    {
        this.InventDimId            = InventDim::findOrCreate(_inventDim).InventDimId;
        this.InventDimIdQuarantine  = InventDim::findOrCreate(_inventDimQuarantine).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the <c>InventDimId</c> parameter to the <c>InventQuarantineOrder.inventDimId</c> field and
    ///    applies default values that are based on the new inventory dimensions.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> value that should be applied to the <c>InventQuarantineOrder.InventDimId</c>
    ///    field.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record buffer related to the <c>InventDimId</c> parameters; optional.
    /// </param>
    public void setInventDimId(
        InventDimId     _inventDimId,
        InventDim       _inventDim      = InventDim::find(_inventDimId))
    {
        InventDim   currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();

        this.InventDimId = _inventDimId;
        this.linkInventDim2Dimension(_inventDim, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates an <c>InventDimId</c> value for the <c>InventDim</c> parameter and applies the
    ///    found <c>InventDimId</c> to the <c>InventQuarantineOrder.inventDimId</c> field.
    /// </summary>
    /// <param name="_inventDim">
    ///    An <c>InventDim</c> record buffer that should be referenced by the current
    ///    <c>InventQuarantineOrder</c> record buffer.
    /// </param>
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim   inventDim;

        inventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId standardInventLocationId()
    {
        InventDim       inventDim;
        InventLocation  inventLocation;

        inventDim = InventDim::find(this.InventDimId);
        inventLocation = inventDim.inventLocation();
        if (inventLocation && inventLocation.InventLocationType == InventLocationType::Standard)
        {
            return inventDim.InventLocationId;
        }

        inventDim = InventDim::find(this.InventDimIdQuarantine);
        inventLocation = inventDim.inventLocation();
        if (inventLocation && inventLocation.InventLocationType == InventLocationType::Standard)
        {
            return inventDim.InventLocationId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>startFinancial</Name>
				<Source><![CDATA[
    public void startFinancial(
        InventQty       _startQty,
        InventQty       _remainQty,
        LedgerVoucher   _ledgerVoucher
        ,   PdsCWInventQty  _cwStartQty,
            PdsCWInventQty  _cwRemainQty
        )
    {
        InventMov_Quarantine        movement        = InventMovement::construct(this);
        InventMov_QuarantineInvent  movement_Invent = InventMovement::construct(this,InventMovSubType::TransferReceipt);
        InventUpd_Financial         financial;

        if (!_startQty)
        {
            return;
        }

        movement_Invent.parmInventDirection(InventDirection::Issue);
        financial = InventUpd_Financial::newInventQuarantineOrder(movement_Invent, _ledgerVoucher, -_startQty,-_remainQty,0
            , -_cwStartQty, -_cwRemainQty
        );
        if (_startQty == this.RemainQty)
        {
            financial.parmAllowNegativeFinancial(NoYes::Yes);
        }
        financial.updateNow();

        movement.parmInventDirection(InventDirection::Receipt);
        financial = InventUpd_Financial::newInventQuarantineOrder(movement,_ledgerVoucher, _startQty, _remainQty,-financial.updCostAmountInvent()
            , _cwStartQty, _cwRemainQty
            // <GEERU>
            , -financial.updCostAmountInventSecCur_RU()
            // </GEERU>
            );
        financial.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(
        NoYes   _dropEstimated      = NoYes::No,
        NoYes   _updateReservation  = NoYes::Yes)
    {
        InventUpd_Estimated     estimated;
        InventUpd_Estimated     estimatedTransfer;

        if (!this.allowUpdateWithQualityOrder())
        {
            throw error("@SYS113930");
        }

        ttsbegin;

        if (! _dropEstimated)
        {
            estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(this));
            estimated.updateNow();

            estimatedTransfer = InventUpd_Estimated::newInventMovement(InventMovement::construct(this,InventMovSubType::TransferReceipt));
            estimatedTransfer.updateNow();
        }

        super();

        if (_updateReservation)
        {
            if (estimated)
            {
                estimated.updateReservation();
            }

            if (estimatedTransfer)
            {
                estimatedTransfer.updateReservation();
            }
        }

        // update related return order
        if (this.isUpdateReturnOrderRequired())
        {
            this.updateReturnOrder();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReturnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the return order line that is referenced by the quarantine order.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The status of the quarantine order is inconsistent with the return order.
    /// </exception>
    public void updateReturnOrder()
    {
        ReturnStatusLine    returnStatus;
        SalesLine           salesLineUpdate;
        boolean             setDispositionCodeId = false;
        boolean             updateSalesLine = false;

        // calculate a new value for a return order status
        switch (this.Status)
        {
            case InventQuarantineStatus::Ended:
                returnStatus            = ReturnStatusLine::Registered;
                setDispositionCodeId    = true;
                break;

            case InventQuarantineStatus::Started:
            case InventQuarantineStatus::ReportedFinished:
                returnStatus            = ReturnStatusLine::Quarantine;
                break;

            default:
                // Quarantine order %1 has incorrect status.
                throw error(strFmt("@SYS58714", this.QuarantineId));
        }

        ttsbegin;
        salesLineUpdate = SalesLine::findInventTransId(this.InventTransIdRef,true);

        if (salesLineUpdate
            && salesLineUpdate.ReturnStatus != returnStatus
            && salesLineUpdate.ReturnStatus != ReturnStatusLine::Invoiced)
        {
            salesLineUpdate.ReturnStatus = returnStatus;
            if (setDispositionCodeId)
            {
                if (salesLineUpdate.ReturnDispositionCodeId != this.ReturnDispositionCodeId
                 || !MarkupTrans::exist(salesLineUpdate.TableId, salesLineUpdate.RecId))
                {
                    salesLineUpdate.ReturnDispositionCodeId = this.ReturnDispositionCodeId;
                    salesLineUpdate.createReturnMarkupTrans(salesLineUpdate.salesTable());
                }
            }
            updateSalesLine = true;
        }

        if (this.Status == InventQuarantineStatus::Started && salesLineUpdate && (salesLineUpdate.InventRefTransId != this.InventTransId || salesLineUpdate.InventRefId != this.QuarantineId))
        {
            salesLineUpdate.InventRefTransId = this.InventTransId;
            salesLineUpdate.InventRefId      = this.QuarantineId;
            updateSalesLine = true;
        }
        else if (this.Status == InventQuarantineStatus::Ended)
        {
            salesLineUpdate.InventRefTransId = '';
            salesLineUpdate.InventRefId      = '';
            updateSalesLine = true;
        }

        if (updateSalesLine)
        {
            salesLineUpdate.update();
            // Need to adjust payments just in case disposition code had a misc charge
            SalesTable salesTable = salesLineUpdate.salesTable();
            if (SalesTableType_ReturnItem::shouldAdjustReturnCredit(salesTable))
            {
                SalesTableType_ReturnItem::MCRAdjustReturnCredit(salesTable);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (this.Status != InventQuarantineStatus::Created && this.Status != InventQuarantineStatus::Ended)
        {
            ret = checkFailed(strFmt("@SYS58753",InventQuarantineStatus::Created,InventQuarantineStatus::Ended));
        }

        ret = InventQualityOrderTable::checkNoOpenQualityOrders(this) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(InventQuarantineOrder, ReturnDispositionCodeId) :
                    if (this.TransType == InventTransType::Sales)
                    {
                        ret = WMSJournalTable::validateDispositionCodeId(this.TransRefId, this.ReturnDispositionCodeId);
                    }
                    break;

                case fieldNum(InventQuarantineOrder, ItemId) :
                    if (!InventTable::find(this.ItemId).isStocked())
                    {
                        ret = checkFailed("@SYS190618");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates write.
    /// </summary>
    /// <param name="_skipWHSChecks">
    /// Whether to perform WHS related checks; optional.
    /// </param>
    /// <returns>
    /// true if validation succeeds; otherwise, false.
    /// </returns>
    public boolean validateWrite(
        boolean _skipWHSChecks = false)
    {
        boolean         ret                     = super();
        InventDim       inventDim;
        InventDim       inventDimQuarantine;

        inventDim = InventDim::find(this.InventDimId);
        inventDimQuarantine = InventDim::find(this.InventDimIdQuarantine);

        if (this.Qty <= 0)
        {
            ret = checkFailed(("@SYS58583"));
        }

        if (!inventDim.InventLocationId)
        {
            ret = checkFailed("@SYS85069");
        }

        if (!inventDimQuarantine.InventLocationId)
        {
            ret = checkFailed("@SYS85070");
        }

        if (inventDim.InventSiteId != inventDimQuarantine.InventSiteId)
        {
            ret = checkFailed("@SYS106961");
        }

        if (!_skipWHSChecks
            && WHSInventEnabled::exist(this.ItemId)
            && InventLocation::find(inventDim.InventLocationId).WHSEnabled)
        {
            ret = checkFailed(strFmt("@SYS4001370", this.ItemId, inventDim.InventLocationId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static public boolean checkExist(InventQuarantineId _quarantineId)
    {
        if (_quarantineId && !InventQuarantineOrder::exist(_quarantineId))
        {
            return checkFailed(strFmt(InventQuarantineOrder::txtNotExist(),_quarantineId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromInventUpd</Name>
				<Source><![CDATA[
    static public InventQuarantineId createFromInventUpd(
        InventUpdate    _inventUpd,
        InventTrans     _inventTrans,
        TransDate       _quarantineDate)
    {
        InventQuarantineOrder           inventQuarantineOrder;
        InventTransOriginId             quarantineInventTransOriginId;
        InventDim                       inventDim;
        InventLocationId                inventLocationIdCurrent;
        WMSLocation                     defaultLocation;

        InventMovement                  movement = _inventUpd.movement();
        InventMovement                  movement_qc;
        InventMovement                  parentMovement = movement.parentMovement();
        InventDim                       inventDimMovement = movement.inventdim();
        InventDim                       parentDim;

        InventQuarantineUpdStartUp      startUp;
        InventParmQuarantineOrder       inventParmQuarantineOrder;

        InventUpd_Reservation           reservation;
        InventTransIdSum_InventLocation inventTransIdSum_InventLocation;

        InventQty                       qtyRemain;

        // <GEEU>
        #EECountryRegionCodes
        // </GEEU>

        boolean initInventDimFromParentMovement()
        {
            if (parentMovement && !parentDim.InventDimId)
            {
                parentDim = parentMovement.inventdim();
            }

            if (parentMovement && parentDim.InventLocationId && parentDim.inventLocation().InventLocationType == InventLocationType::Standard)
            {
                inventDim.InventSiteId      = parentDim.InventSiteId;
                inventDim.InventLocationId  = parentDim.InventLocationId;
                inventDim.wmsLocationId     = parentDim.wmsLocationId;
                return true;
            }
            return false;
        }

        inventQuarantineOrder.initFromInventTrans(_inventTrans);

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll)
        && !inventQuarantineOrder.initFromInventTrans_W(movement))
        {
            return "";
        }
        // </GEEU>

        inventQuarantineOrder.QuarantineDate    = _quarantineDate;
        inventQuarantineOrder.DefaultDimension  =  inventQuarantineOrder.copyDimension(movement.defaultDimension());

        inventDim.data(_inventTrans.inventDim());
        //Locations in the quarantine warehouse cannot be license plate controlled.
        inventDim.LicensePlateId = '';

        inventLocationIdCurrent = inventDim.InventLocationId;
        if (InventLocation::find(inventLocationIdCurrent).InventLocationType == InventLocationType::Quarantine)
        {
            inventQuarantineOrder.InventDimIdQuarantine     = _inventTrans.InventDimId;

            if (_inventUpd.parmInventDimQuarantine().InventLocationId   &&
                _inventUpd.parmInventDimQuarantine().inventLocation().InventLocationType == InventLocationType::Quarantine)
            {
                if (!initInventDimFromParentMovement())
                {
                    inventDim.InventSiteId      = _inventUpd.parmInventDimQuarantine().InventSiteId;
                    inventDim.InventLocationId  = _inventUpd.parmInventDimQuarantine().InventLocationId;
                    inventDim.wmsLocationId     = _inventUpd.parmInventDimQuarantine().wmsLocationId;
                }
            }
            else
            {
                if (movement.transChildType() == InventTransChildType::WMSOrder)
                {
                    inventDim.InventLocationId = WMSOrder::find(movement.transChildRefId()).inventDim().InventLocationId;
                    if (inventLocationIdCurrent == inventDim.InventLocationId)  // Arrived directly at quarantine warehouse
                    {
                        if (!initInventDimFromParentMovement())
                        {
                            inventDim.InventLocationId = movement.inventItemInventSetup(inventDim.InventDimId).inventLocationId();
                        }
                    }
                }
                else
                {
                    if (!initInventDimFromParentMovement())
                    {
                        inventDim.InventLocationId = movement.inventItemInventSetup(inventDim.InventDimId).inventLocationId();
                    }
                }
            }

            if (inventDim.wmsLocationId && !WMSLocation::exist(inventDim.wmsLocationId, inventDim.InventLocationId))
            {
                inventDim.wmsLocationId = '';
            }
            inventQuarantineOrder.setInventDimIdFromInventDim(inventDim);
            inventQuarantineOrder.Status = InventQuarantineStatus::Started;
        }
        else
        {
            inventQuarantineOrder.setInventDimId(_inventTrans.InventDimId);

            if (_inventUpd.parmInventDimQuarantine().InventLocationId   &&
                _inventUpd.parmInventDimQuarantine().inventLocation().InventLocationType == InventLocationType::Quarantine)
            {
                inventDim.InventLocationId  = _inventUpd.parmInventDimQuarantine().InventLocationId;
                inventDim.wmsLocationId     = _inventUpd.parmInventDimQuarantine().wmsLocationId;
            }
            else
            {
                if (movement.transChildType() == InventTransChildType::WMSOrder)
                {
                    inventDimMovement = InventDim::find(WMSOrder::find(movement.transChildRefId()).ToInventDimId);
                    if (inventDimMovement.inventLocation().InventLocationType == InventLocationType::Quarantine &&
                        inventDim.inventLocation().InventLocationType != InventLocationType::Quarantine)
                    {
                        // input transports
                        inventDim.InventLocationId                  = inventDimMovement.InventLocationId;
                        inventDim.wmsLocationId                     = inventDimMovement.wmsLocationId;
                    }
                    else
                    {
                        inventDim.InventLocationId                  = InventLocation::find(inventDim.InventLocationId).InventLocationIdQuarantine;
                    }
                }
                else
                {
                    inventDim.InventLocationId                      = InventLocation::find(inventDim.InventLocationId).InventLocationIdQuarantine;
                    if (inventDim.wmsLocationId)
                    {
                        // if a default location has been configured for the item at the quarantine warehouse this should be used instead.
                        defaultLocation                             = WMSLocation::defaultItemLocation(inventQuarantineOrder.ItemId, InventDirection::Receipt, InventDim::findOrCreate(inventDim));
                        if (defaultLocation.RecId)
                        {
                            inventDim.wmsLocationId                 = defaultLocation.wmsLocationId;
                        }
                    }
                }
            }
            if (!inventDim.InventLocationId)
            {
                throw(error(strFmt("@SYS69047", inventLocationIdCurrent)));
            }

            inventDim.initFromInventLocation(inventDim.inventLocation());

            inventQuarantineOrder.InventDimIdQuarantine     = InventDim::findOrCreate(inventDim).InventDimId;
            inventQuarantineOrder.Status                    = InventQuarantineStatus::Created;
        }

        inventQuarantineOrder.TransType         = parentMovement.transType();
        inventQuarantineOrder.TransRefId        = parentMovement.transRefId();
        inventQuarantineOrder.InventTransIdRef  = parentMovement.transId();

        if (WHSInventEnabled::exist(inventQuarantineOrder.ItemId)
            && inventQuarantineOrder.inventDim().inventLocation().WHSEnabled)
        {
            throw error(strFmt("@SYS4001370", inventQuarantineOrder.ItemId, inventQuarantineOrder.inventDim().InventLocationId));
        }        

        inventQuarantineOrder.insert();
        quarantineInventTransOriginId = InventTransOriginQuarantineOrder::findInventTransOriginId(inventQuarantineOrder.DataAreaId, inventQuarantineOrder.QuarantineId);

        if (inventQuarantineOrder.Status == InventQuarantineStatus::Created)
        {
            inventParmQuarantineOrder.QuarantineId  = inventQuarantineOrder.QuarantineId;
            inventParmQuarantineOrder.TransDate     = inventQuarantineOrder.QuarantineDate;

            startUp = InventQuarantineUpdStartUp::newParmBuffer(inventParmQuarantineOrder);
            startUp.run();

            if (startUp.isReferenceOriginModified())
            {
                movement.buffer().reread();
            }

            inventQuarantineOrder.updateQuarantineOrderMarking(_inventTrans, quarantineInventTransOriginId, true);
        }
        else
        {
            movement_qc = InventMovement::construct(inventQuarantineOrder);
            qtyRemain = movement_qc.transQty(); // qtyRemain is the (negative) value of the remaining quantity to be reserved

            inventTransIdSum_InventLocation = InventTransIdSum_InventLocation::newQuarantine(movement_qc.inventTransOriginId());

            qtyRemain -= inventTransIdSum_InventLocation.reserved(); // subtract what is already reserved

            if (qtyRemain < 0)
            {
                reservation = InventUpd_Reservation::newMovement(movement_qc, qtyRemain, false);
                reservation.updateNow();
            }
        }

        return inventQuarantineOrder.QuarantineId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a new quarantine order based on a quality order.
    /// </summary>
    /// <param name="_qualityOrder">
    /// An <c>InventQualityOrderTable</c> specifying values for new quarantine order.
    /// </param>
    /// <param name="_inventDimId">
    /// Identification of inventory dimension values for new quarantine order.
    /// </param>
    /// <param name="_qty">
    /// The <c>InventQty</c> for the new quarantine order.
    /// </param>
    /// <param name="_cwQty">
    /// The <c>PdsCWInventQty</c> for the new quarantine order.
    /// </param>
    /// <returns>
    /// The <c>InventQuarantineId</c> of the new quarantine order.
    /// </returns>
    static public InventQuarantineId createFromQualityOrder(
        InventQualityOrderTable     _qualityOrder,
        InventDimId                 _inventDimId,
        InventQty                   _qty
        , PdsCWInventQty            _cwQty = 0
        )
    {
        InventQuarantineOrder           inventQuarantineOrder;
        InventDim                       inventDimQuarantine;
        InventDim                       inventDimSpecified;
        InventQuarantineUpdStartUp      startUp;
        InventParmQuarantineOrder       inventParmQuarantineOrder;
        InventTransType                 transType;
        InventLocation                  inventLocationQuarantineOrder;
        InventTrans                     inventTransRef;         // Quality order reference
        InventTrans                     inventTrans;
        InventTransOriginId             quarantineInventTransOriginId;

        if (_qty <= 0 || !_qualityOrder.RecId)
        {
            return '';
        }

        transType = InventQualityOrderTable::referenceType2TransType(_qualityOrder.ReferenceType);

        ttsbegin;
        inventQuarantineOrder.initValue();
        inventQuarantineOrder.ItemId            = _qualityOrder.ItemId;
        inventQuarantineOrder.initFromInventTable(InventTable::find(inventQuarantineOrder.ItemId));

        inventQuarantineOrder.DefaultDimension  = inventQuarantineOrder.copyDimension(_qualityOrder.DefaultDimension);

        inventQuarantineOrder.TransType                 = transType;
        inventQuarantineOrder.TransRefId                = _qualityOrder.InventRefId;
        inventQuarantineOrder.InventTransIdRef          = _qualityOrder.InventRefTransId;
        inventQuarantineOrder.RemainQty                 = _qty;
        inventQuarantineOrder.Qty                       = _qty;

        inventDimSpecified = InventDim::find(_inventDimId);

        inventDimQuarantine.data(inventDimSpecified);

        inventLocationQuarantineOrder = inventDimSpecified.inventLocation();
        if (inventLocationQuarantineOrder.InventLocationType == InventLocationType::Quarantine)
        {
            // Items already at quarantine warehouse
            inventDimQuarantine = _qualityOrder.inventDim();
            inventLocationQuarantineOrder = inventDimQuarantine.inventLocation();
            if (inventLocationQuarantineOrder.InventLocationType == InventLocationType::Standard)
            {
                // Quality order was created for a standard warehouse so expect items back at this warehouse
                inventQuarantineOrder.setInventDimId(inventDimQuarantine.InventDimId, inventDimQuarantine);
            }
            else if (_qualityOrder.InventRefTransId)
            {
                select firstonly InventDimId
                    from inventTransRef
                    where inventTransRef.InventTransOrigin  == InventTransOrigin::findByInventTransId(_qualityOrder.InventRefTransId).RecId;

                inventDimQuarantine = InventQuarantineOrder::getQuarantineInventDimWithWMSLocation(InventDim::find(inventTransRef.InventDimId), inventQuarantineOrder.ItemId);
                inventQuarantineOrder.setInventDimId(inventDimQuarantine.InventDimId, inventDimQuarantine);
            }
            else
            {
                // Use any warehouse which has this as quarantine.
                select firstonly inventLocationQuarantineOrder
                    where inventLocationQuarantineOrder.InventLocationIdQuarantine == inventDimQuarantine.InventLocationId;

                inventDimQuarantine.InventLocationId = inventLocationQuarantineOrder.InventLocationId;
                inventDimQuarantine = InventQuarantineOrder::getQuarantineInventDimWithWMSLocation(inventDimQuarantine, inventQuarantineOrder.ItemId);
                inventQuarantineOrder.setInventDimId(inventDimQuarantine.InventDimId, inventDimQuarantine);
            }
            inventQuarantineOrder.InventDimIdQuarantine = _inventDimId;
            inventQuarantineOrder.Status = InventQuarantineStatus::Started;
        }
        else
        {
            inventQuarantineOrder.setInventDimId(_inventDimId, inventDimSpecified);

            inventDimQuarantine.InventLocationId = inventLocationQuarantineOrder.InventLocationIdQuarantine;
            inventDimQuarantine = InventQuarantineOrder::getQuarantineInventDimWithWMSLocation(inventDimQuarantine, inventQuarantineOrder.ItemId);
            inventQuarantineOrder.InventDimIdQuarantine = inventDimQuarantine.InventDimId;
            inventQuarantineOrder.Status = InventQuarantineStatus::Created;
        }
        inventQuarantineOrder.TransType                 = transType;
        inventQuarantineOrder.TransRefId                = _qualityOrder.InventRefId;
        inventQuarantineOrder.InventTransIdRef          = _qualityOrder.InventRefTransId;
        inventQuarantineOrder.RemainQty                 = _qty;
        inventQuarantineOrder.Qty                       = _qty;
        inventQuarantineOrder.PdsCWRemainQty            = _cwQty;
        inventQuarantineOrder.PdsCWQty                  = _cwQty;

        if (WHSInventEnabled::exist(inventQuarantineOrder.ItemId)
            && inventQuarantineOrder.inventDim().inventLocation().WHSEnabled)
        {
            throw error(strFmt("@SYS4001370", inventQuarantineOrder.ItemId, inventQuarantineOrder.inventDim().InventLocationId));
        }

        inventQuarantineOrder.insert();
        ttscommit;
        quarantineInventTransOriginId = InventTransOriginQuarantineOrder::findInventTransOriginId(inventQuarantineOrder.DataAreaId, inventQuarantineOrder.QuarantineId);

        if (inventQuarantineOrder.Status == InventQuarantineStatus::Created)
        {
            inventParmQuarantineOrder.QuarantineId  = inventQuarantineOrder.QuarantineId;
            inventParmQuarantineOrder.TransDate     = inventQuarantineOrder.QuarantineDate;

            startUp = InventQuarantineUpdStartUp::newParmBuffer(inventParmQuarantineOrder);
            startUp.run();
        }

        InventTransOrigin inventTransOrigin;
        if (PurchTable::find(inventQuarantineOrder.TransRefId).ProjId)
        {
            select forupdate inventTrans
                exists join inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                        && inventTransOrigin.InventTransId == inventQuarantineOrder.InventTransIdRef
                        && inventTrans.MarkingRefInventTransOrigin == 0;
        }
        else
        {
            InventDim inventDimCriteria = InventDim::find(_inventDimId);
            InventDimParm inventDimParm = InventDimCriteria.toDimParm();
            InventDim inventDim;
            InventTransOriginBlockingIssue  inventTransOriginBlockingIssue;
            
            // Find related inventory transaction from related inventory blocking firslty
            if (InventBlockingRelatedTransactionInfoSingleton::instance().isCurrent()
            &&  !InventBlockingRelatedTransactionInfoSingleton::instance().inventBlockingRelatedTransRecIdSet().empty())
            {
                Set relatedBlockingInventTransSet = InventBlockingRelatedTransactionInfoSingleton::instance().inventBlockingRelatedTransRecIdSet();
                SetEnumerator se = relatedBlockingInventTransSet.getEnumerator();
                while (se.moveNext())
                {
                    select firstonly forupdate inventTrans
                        where inventTrans.RecId == se.current()
                    #inventDimExistsJoin(inventTrans.InventDimId, inventDim, inventDimCriteria, inventDimParm)
                    // Exclude inventory transaction which is blocked by the inventory blocking because multiple quality orders
                    // can link to the same inventory blocking
                    notexists join inventTransOriginBlockingIssue
                    where inventTransOriginBlockingIssue.InventTransOrigin  == inventTrans.MarkingRefInventTransOrigin;

                    if (!inventTrans.RecId)
                    {
                        continue;
                    }
                    else
                    {
                        // This inventTrans will be processed later, so need to remove it from set to avoid duplicate processing
                        InventBlockingRelatedTransactionInfoSingleton::instance().inventBlockingRelatedTransRecIdSet().remove(inventTrans.RecId);
                        break;
                    }
                }
            }

            if (!inventTrans.RecId)
            {
                select firstonly forupdate inventTrans
                exists join inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                       && inventTransOrigin.InventTransId == _qualityOrder.InventRefTransId
                #inventDimExistsJoin(inventTrans.InventDimId, inventDim, inventDimCriteria, inventDimParm)
                notexists join inventTransOriginBlockingIssue  // Exclude inventory transaction which is blocked by inventory blocking
                    where inventTransOriginBlockingIssue.InventTransOrigin  == inventTrans.MarkingRefInventTransOrigin;
            }
        }

        if (inventTrans.RecId)
        {
            inventQuarantineOrder.updateQuarantineOrderMarking(inventTrans, quarantineInventTransOriginId);
        }

        return inventQuarantineOrder.QuarantineId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static public boolean exist(InventQuarantineId _quarantineId)
    {
        return _quarantineId && (select firstonly inventQuarantineOrder
                    where inventQuarantineOrder.QuarantineId == _quarantineId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static public InventQuarantineOrder find(
        InventQuarantineId      _quarantineId,
        boolean                 _forUpdate = false)
    {
        InventQuarantineOrder inventQuarantineOrder;

        inventQuarantineOrder.selectForUpdate(_forUpdate);

        if (_quarantineId)
        {
            select firstonly inventQuarantineOrder
                where inventQuarantineOrder.QuarantineId == _quarantineId;
        }

        return inventQuarantineOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransIdRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a quarantine order for a referenced inventory transaction.
    /// </summary>
    /// <param name="_inventTransIdRef">
    ///    The inventory transaction reference that represents the original lot that was sent to quarantine.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    The record from the inventory quarantine table.
    /// </returns>
    public static InventQuarantineOrder findInventTransIdRef(
        InventTransId   _inventTransIdRef,
        boolean         _forUpdate          = false)
    {
        InventQuarantineOrder inventQuarantineOrder;

        inventQuarantineOrder.selectForUpdate(_forUpdate);

        if (_inventTransIdRef)
        {
            select firstonly inventQuarantineOrder
                where inventQuarantineOrder.InventTransIdRef == _inventTransIdRef;
        }
        return inventQuarantineOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuarantineInventDimWithWMSLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an <c>InventDim</c> record for the quarantine dimension with the <c>WMSLocationId</c> value set if possible.
    /// </summary>
    /// <param name="_inventDimQuarantine">
    /// An  buffer used to create the returned record from.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemId</c> ID for the quarantine order.
    /// </param>
    /// <returns>
    /// An <c>InventDim</c> record for the quarantine dimension with the <c>WMSLocationId</c> value set if possible.
    /// </returns>
    private static  InventDim getQuarantineInventDimWithWMSLocation(
        InventDim _inventDimQuarantine,
        ItemId    _itemId)
    {
        WMSLocation     defaultLocation;
        InventDim       inventDimLocal;

        //ensure that values and inventDimId match
        inventDimLocal = InventDim::findOrCreate(_inventDimQuarantine);
        defaultLocation = WMSLocation::defaultItemLocation(_itemId, InventDirection::Receipt, inventDimLocal);
        // if a default location has been configured for the item at the quarantine warehouse this should be used instead.
        if (defaultLocation.RecId)
        {
            inventDimLocal.wmsLocationId = defaultLocation.wmsLocationId;
            inventDimLocal = InventDim::findOrCreate(inventDimLocal);
        }

        return inventDimLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimArriveOrRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an <c>InventDim</c> record to use for the arrival and registration of items that are
    /// directly under quarantine management and on a quarantine warehouse.
    /// </summary>
    /// <param name="_inventdimArriveOrRegister">
    /// The <c>InventDim</c> record that is specified for arrival or registration.
    /// </param>
    /// <param name="_inventDimMovement">
    /// The <c>InventDim</c> table to use to determine the <c>Inventlocation</c> and <c>WMSLocation</c>
    /// values that are used for arrival or registration.
    /// </param>
    /// <param name="_itemId">
    /// The <c>itemId</c> field of the transactions to update.
    /// </param>
    /// <returns>
    /// An <c>InventDim</c> record that can be used for arrival and registration.
    /// </returns>
    /// <remarks>
    /// Use this method to get the correct <c>InventDim</c> record when the arrival or registration is
    /// performed directly on a quarantine warehouse.
    /// </remarks>
    public static InventDim inventDimArriveOrRegistration(
        InventDim           _inventdimArriveOrRegister,
        InventDim           _inventDimMovement,
        ItemId              _itemId)
    {
        InventDimGroupFieldSetup            inventDimGroupFieldSetup;
        InventDim                           inventDim;

        inventDim.data(_inventdimArriveOrRegister);

        if (_inventDimMovement.InventLocationId)
        {
            inventDim.InventLocationId    = _inventDimMovement.InventLocationId;
            inventDim.wmsLocationId       = _inventDimMovement.wmsLocationId;

            if (!inventDim.wmsLocationId)
            {
                inventDimGroupFieldSetup = EcoResDimensionGroupSetup::getFieldSetupForItem(_itemId, fieldNum(InventDim, wmsLocationId));
                if (inventDimGroupFieldSetup.isActive())
                {
                    if (inventDim.InventLocationId)
                    {
                        inventDim.wmsLocationId = InventItemLocation::findFixedWarehouse(_itemId,InventDim::findOrCreate(inventDim).InventDimId).wmsLocationIdDefaultReceipt;
                    }
                    if (!inventDim.wmsLocationId)
                    {
                        inventDim.wmsLocationId = inventDim.inventLocation().wmsLocationIdDefaultReceipt;
                    }
                    if (!inventDim.wmsLocationId && !inventDimGroupFieldSetup.isAllowBlankReceiptEnabled())
                    {
                        throw(error(strFmt("@SYS84668", _itemId, inventDim.InventLocationId)));
                    }
                }
            }

            inventDim.initFromInventLocation(inventDim.inventLocation());
        }

        return InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWMSReception</Name>
				<Source><![CDATA[
    static public void lookupWMSReception(FormStringControl _ctrl)
    {
        SysTableLookup              sysTableLookup = SysTableLookup::newParameters(tableNum(InventQuarantineOrder), _ctrl);
        Query                       query = new Query();
        QueryBuildDataSource        queryBuildDataSource;
        QueryBuildDataSource        queryBuildDataSource1;
        QueryBuildRange             queryBuildRange;

        sysTableLookup.addLookupfield(fieldNum(InventQuarantineOrder, QuarantineId));
        sysTableLookup.addLookupfield(fieldNum(InventQuarantineOrder, Name));
        sysTableLookup.addLookupfield(fieldNum(InventQuarantineOrder, Status));

        queryBuildDataSource = query.addDataSource(tableNum(InventQuarantineOrder));
        queryBuildDataSource.addSortField(fieldNum(InventQuarantineOrder, Status), SortOrder::Descending); // show reported as finished before created
        queryBuildDataSource.addSortField(fieldNum(InventQuarantineOrder, QuarantineId), SortOrder::Ascending);

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventQuarantineOrder, Status));
        queryBuildRange.value(queryRangeConcat(SysQuery::value(InventQuarantineStatus::Created), SysQuery::value(InventQuarantineStatus::ReportedFinished)));

        queryBuildDataSource1 = queryBuildDataSource.addDataSource(tableNum(InventTrans));
        queryBuildDataSource1.joinMode(JoinMode::ExistsJoin);
        queryBuildDataSource1.relations(true);

        queryBuildRange = queryBuildDataSource1.addRange(fieldNum(InventTrans, StatusReceipt));
        queryBuildRange.value(SysQuery::value(StatusReceipt::Ordered));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeq</Name>
				<Source><![CDATA[
    static public NumberSeq numberSeq(
        boolean _makeDecisionLater              = false,
        boolean _dontThrowOnMissingRefSetUp     = false)
    {
        return NumberSeq::newGetNum(
            InventParameters::numRefQuarantineId(),
            _makeDecisionLater,
            _dontThrowOnMissingRefSetUp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static public TxtNotExist txtNotExist()
    {
        return "@SYS58441";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuarantineOrderMarking</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updating marking between quarantine order and receipt order.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The <c>InventTrans</c> will be marking on the inventTrans of quarantine order.
    /// </param>
    /// <param name="_quarantineInventTransOriginId">
    ///    The ID of the quarantine inventory transactions originator.
    /// </param>
    /// <param name="_markSingleInventTrans">
    ///    True if only consider passed _inventTrans; otherwise loop all records by _inventTrans buffer iterator.
    /// </param>
    private void updateQuarantineOrderMarking(InventTrans _inventTrans, InventTransOriginId _quarantineInventTransOriginId, boolean _markSingleInventTrans = false)
    {
        InventDimParm                   inventDimParm;
        InventDimParm                   inventDimParmWarehouse;
        InventQty                       qtyRemain;
        InventMovement                  movementIssue;

        inventDimParm.initFromInventDim(_inventTrans.inventDim());
        inventDimParmWarehouse.InventLocationIdFlag = true;

        if (_inventTrans.MarkingRefInventTransOrigin)  // update marking - Example: purchase order -> quarantine order -> sales order
        {
            // Delete marking on reference - Example: sales order to purchase order
            qtyRemain = _inventTrans.Qty - InventTransOrigin::deleteMarking(_inventTrans.MarkingRefInventTransOrigin, _inventTrans.InventTransOrigin, -_inventTrans.Qty,false,_inventTrans.inventDim(),inventDimParm); // first matching dimension
            if (qtyRemain > 0)
            {
                // Marking not deleted - try without dimensions restrictions
                InventTransOrigin::deleteMarking(_inventTrans.MarkingRefInventTransOrigin, _inventTrans.InventTransOrigin,- qtyRemain);
            }

            //Make marking - Example: quarantine order to sales order.
            qtyRemain = this.Qty +
                        InventTransOrigin::updateMarking(_quarantineInventTransOriginId, _inventTrans.MarkingRefInventTransOrigin, this.Qty, '', SortOrder::Ascending, false, _inventTrans.inventDim(), inventDimParm);
            if (qtyRemain > 0)
            {
                InventTransOrigin::updateMarking(_quarantineInventTransOriginId, _inventTrans.MarkingRefInventTransOrigin, qtyRemain, '', SortOrder::Ascending, false, _inventTrans.inventDim(), inventDimParmWarehouse);
            }

            qtyRemain = this.Qty -
                        InventTransOrigin::updateMarking(_inventTrans.MarkingRefInventTransOrigin, _quarantineInventTransOriginId, - this.Qty, '', SortOrder::Ascending, false, _inventTrans.inventDim(), inventDimParm);
            if ( qtyRemain > 0)
            {
                InventTransOrigin::updateMarking(_inventTrans.MarkingRefInventTransOrigin, _quarantineInventTransOriginId, -qtyRemain);
            }

            movementIssue = InventTrans::findByInventTransOrigin(_inventTrans.MarkingRefInventTransOrigin).inventMovement(true);
            if (movementIssue)//deletion of marking will remove reservation, so we only need to look for OnOrder
            {
                InventUpd_Reservation::updateReserveRefTransIdOnOrder(movementIssue);  // reserve the issue according to marking.
            }
        }

        //Make marking - quarantine order to purchase order
        qtyRemain = this.Qty -
                    InventTransOrigin::updateMarking(_quarantineInventTransOriginId, _inventTrans.InventTransOrigin, -this.Qty, '', SortOrder::Ascending, false, _inventTrans.inventDim(), inventDimParm);
        if (qtyRemain > 0 )
        {
            InventTransOrigin::updateMarking(_quarantineInventTransOriginId, _inventTrans.InventTransOrigin, -qtyRemain, '', SortOrder::Ascending, false, _inventTrans.inventDim(), inventDimParmWarehouse);
        }

        //Make marking - purchase order to quarantine order.
        if (_inventTrans.RecId)
        {
            if (_inventTrans.selectForUpdate())
            {
                if (this.TransType == InventTransType::Purch && PurchLine::find(this.TransRefId).ProjId)
                {
                    InventTrans         inventTrans;
                    InventTransOrigin   inventTransOrigin;

                    select firstonly InventTransOrigin from inventTrans
                        where inventTrans.StatusIssue == StatusIssue::ReservOrdered
                           && inventTrans.ItemId == this.ItemId
                        exists join inventTransOrigin
                        where inventTransOrigin.RecId == inventTrans.MarkingRefInventTransOrigin
                           && inventTransOrigin.ReferenceId == this.TransRefId
                           && inventTransOrigin.InventTransId == this.InventTransIdRef
                           && inventTransOrigin.ReferenceCategory == InventTransType::Purch;
                    
                    if (_markSingleInventTrans)
                    {
                        if (inventTrans.InventTransOrigin)
                        {
                            _inventTrans.setMarking(inventTrans.InventTransOrigin);
                            _inventTrans.update();
                        }
                        else
                        {
                            _inventTrans.setMarking(_quarantineInventTransOriginId);
                            _inventTrans.update();
                        }
                    }
                    else
                    {
                        InventQty quarantineRemainQty = abs(this.Qty);
                        PdsCWInventQty quarantineCWRemainQty = abs(this.PdsCWQty);

                        while (inventTrans.InventTransOrigin
                            && _inventTrans.RecId
                            && quarantineRemainQty > 0
                            && (!this.PdsCWQty || quarantineCWRemainQty > 0))
                        {
                            if (_inventTrans.Qty > quarantineRemainQty &&
                            (!PdsGlobal::pdsIsCWItem(this.ItemId) || _inventTrans.PdsCWQty > quarantineCWRemainQty))
                            {
                                _inventTrans.updateSplit(quarantineRemainQty, quarantineCWRemainQty);
                            }

                            _inventTrans.setMarking(inventTrans.InventTransOrigin);
                            _inventTrans.update();
                            quarantineRemainQty -= _inventTrans.Qty;
                            quarantineCWRemainQty -= _inventTrans.PdsCWQty;
                            next _inventTrans;
                        }
                    }
                }
                else
                {
                    _inventTrans.setMarking(_quarantineInventTransOriginId);
                    _inventTrans.update();
                }
            }
            else
            {
                InventTransOrigin::updateMarking(_inventTrans.InventTransOrigin, _quarantineInventTransOriginId, _inventTrans.Qty, '', SortOrder::Ascending, false, _inventTrans.inventDim(), inventDimParm);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123956</DeveloperDocumentation>
	<Label>@SYS58429</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>QuarantineId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>QuarantineIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>QuarantineIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuarantineId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuarantineDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuarantineId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimIdQuarantine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWMain</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantity</Name>
			<Label>@SYS14578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QuarantineOrder</Name>
			<Label>@SYS58429</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuarantineDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Return</Name>
			<Label>@SYS104918</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>getReturnItemNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnDispositionCodeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimIdQuarantine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Label>@SYS58485</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteLinkedDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdRef</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Label>@SYS8567</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdInventoried</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQuarantineName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWRemainQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>QuarantineDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS58482</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QuarantineId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQuarantineId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS10197</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnDispositionCodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnDispositionCodeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventQuarantineStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<GroupPrompt>@SYS1201</GroupPrompt>
			<EnumType>InventTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QuantityThatHasSplitIntoOtherQuarantineOrders</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQuantityThatHasSplitIntoOtherQuarantineOrders</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>QuarantineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>QuarantineId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>QuarantineId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReferenceInventTransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransIdRef</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>BOM</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123851</EntityRelationshipRole>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BOM</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventQuarantineOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransType</Name>
					<Field>TransType</Field>
					<ValueStr>InventTransType::BOMMain</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BOMLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123852</EntityRelationshipRole>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BOMLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventQuarantineOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransType</Name>
					<Field>TransType</Field>
					<ValueStr>InventTransType::BOMLine</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefaultDimension_InventQuarantineOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventCounting</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123853</EntityRelationshipRole>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventCounting</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventQuarantineOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransType</Name>
					<Field>TransType</Field>
					<ValueStr>InventTransType::InventCounting</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventQuarantineOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventJournal</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123854</EntityRelationshipRole>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventJournal</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventQuarantineOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransType</Name>
					<Field>TransType</Field>
					<ValueStr>InventTransType::InventTransaction</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventJournalLossProfit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123855</EntityRelationshipRole>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventJournalLossProfit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventQuarantineOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransType</Name>
					<Field>TransType</Field>
					<ValueStr>InventTransType::InventLossProfit</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventQuarantineOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123840</EntityRelationshipRole>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProdTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventQuarantineOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransType</Name>
					<Field>TransType</Field>
					<ValueStr>InventTransType::Production</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdLineNum</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123864</EntityRelationshipRole>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProdLineNum</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventQuarantineOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransType</Name>
					<Field>TransType</Field>
					<ValueStr>InventTransType::ProdLine</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123518</EntityRelationshipRole>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransType</Name>
					<Field>TransType</Field>
					<ValueStr>InventTransType::Purch</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>QuarantineInventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>QuarantineInventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventQuarantineOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimIdQuarantine</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimIdQuarantine</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReferenceInventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReferenceInventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventQuarantineOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdRef</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransIdRef</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReturnDispositionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReturnDispositionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReturnDispositionCodeId</Name>
					<Field>ReturnDispositionCodeId</Field>
					<RelatedField>DispositionCodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DispositionCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123519</EntityRelationshipRole>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransType</Name>
					<Field>TransType</Field>
					<ValueStr>InventTransType::Sales</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Transfer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123858</EntityRelationshipRole>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Transfer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventQuarantineOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransType</Name>
					<Field>TransType</Field>
					<ValueStr>InventTransType::InventTransfer</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSOrderId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123874</EntityRelationshipRole>
			<RelatedTable>WMSOrder</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WMSOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventQuarantineOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>orderId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransType</Name>
					<Field>TransType</Field>
					<ValueStr>InventTransType::WMSOrder</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSOrderTransportId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123876</EntityRelationshipRole>
			<RelatedTable>WMSOrder</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WMSOrderTransport</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventQuarantineOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>orderId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransType</Name>
					<Field>TransType</Field>
					<ValueStr>InventTransType::WMSTransport</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>