<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Plan</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Plan extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkValidityPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the effective dates and expiration dates of the plan.
    /// </summary>
    /// <returns>
    /// true if the validation is successful; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkValidityPeriod()
    {
        Plan    plan;
        boolean result = true;

        while select VersionNum from plan
            where plan.PlanReference  == this.PlanReference
                && plan.Status        == PlanStatus::Active
                && plan.RecId         != this.RecId
                && (((plan.ValidFrom  <= this.ValidTo
                ||    !this.ValidTo)
                &&   (plan.ValidTo    >= this.ValidFrom
                ||    !plan.ValidTo))
                ||  (!this.ValidTo
                &&   plan.ValidTo     >= this.ValidFrom))
        {
            result = checkFailed(strFmt("@SYS341755",plan.VersionNum));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        PlanPlanActivity    planPlanActivity;
        PlanActivity        planActivity;

        ttsbegin;

        delete_from planPlanActivity
            where planPlanActivity.Plan                 == this.RecId
        exists join planActivity
            where planActivity.RecId                    == planPlanActivity.PlanActivity
                    && (planActivity.PlanActivityType   == PlanActivityType::Process
                    || planActivity.PlanActivityType    == PlanActivityType::Transfer);

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExpired</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>Plan</c> table exists.
    /// </summary>
    /// <returns>
    ///    true if the plan is expired; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isExpired()
    {
        return this.ValidTo && this.ValidTo < DateTimeUtil::getSystemDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>legalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>LegalEntity</c> value that is related to the current record.
    /// </summary>
    /// <returns>
    /// A <c>LegalEntity</c> type value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LegalEntity legalEntity()
    {
        return this.planReference().LegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>PlanReference</c> buffer of the current buffer.
    /// </summary>
    /// <returns>
    ///    A <c>PlanReference</c> buffer if the record is found; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanReference planReference()
    {
        return PlanReference::find(this.PlanReference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>previous</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the plan that was active before the current plan.
    /// </summary>
    /// <param name="_activePlanOnly">
    ///    A Boolean value that indicates if only active plans can be considered.
    /// </param>
    /// <returns>
    ///    A record in the <c>Plan</c> table; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Plan previous(boolean _activePlanOnly = true)
    {
        Plan plan;

        select firstonly plan
            order by plan.VersionNum desc
            where plan.PlanReference == this.PlanReference
               && (plan.Status       == PlanStatus::Active
               ||  !_activePlanOnly)
               && plan.VersionNum    <  this.VersionNum;

        return plan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        Plan origPlan = this.orig();

        super();

        // first the change should be propagated to database before notifying the engine
        if (origPlan.ValidFrom   != this.ValidFrom
            || origPlan.ValidTo  != this.ValidTo)
        {
            LeanRulesEngine::onPlanUpdated(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean     result;

        result = super();

        if (   result
            && !this.RecId
            && DateTimeUtil::date(this.ValidFrom) < DateTimeUtil::date(DateTimeUtil::getSystemDateTime()))
        {
            // New production flow versions cannot be created in the past
            result = checkFailed("@SYS134216");
        }

        if (   result
            && this.ValidFrom >  this.ValidTo
            && this.ValidTo   != DateTimeUtil::minValue())
        {
            // Valid from date must be before valid to date
            result = checkFailed("@SYS133516");
        }

        if (   result
            && this.Status == PlanStatus::Active)
        {
            // check period overlap with existing active version
            result = this.checkValidityPeriod();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new version of a plan
    /// </summary>
    /// <param name="_planReference">
    ///    The record ID of the production flow version.
    /// </param>
    /// <param name="_planToCopyFrom">
    ///    The record ID of the plan from which to copy.
    /// </param>
    /// <param name="_validFrom">
    ///    The date from which the production flow version is valid.
    /// </param>
    /// <param name="_validTo">
    ///    The date to which the production flow version is valid.
    /// </param>
    /// <param name="_duplicateKanbanRules">
    ///    A Boolean value that indicates whether the associated kanban rules should be copied to the new
    ///    version.
    /// </param>
    /// <returns>
    ///    The created record in the <c>Plan</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static Plan createNewVersion(RefRecId                _planReference,
                                        RefRecId                _planToCopyFrom,
                                        PlanValidFromDateTime   _validFrom,
                                        PlanValidToDateTime     _validTo,
                                        NoYes                   _duplicateKanbanRules)
    {
        Plan                            newPlan;
        Map                             changes = new Map(Types::Int64, Types::Int64);

        ttsbegin;

        // init the new plan
        newPlan.initValue();
        newPlan.VersionNum         = Plan::maxVersion(_planReference) + 1;
        newPlan.ValidFrom          = _validFrom;
        newPlan.ValidTo            = _validTo;
        newPlan.PlanReference      = _planReference;
        newPlan.Status             = PlanStatus::Draft;

        if (newPlan.validateWrite())
        {
            // create the plan record
            newPlan.insert();
        }

        ttscommit;

        return newPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>Plan</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>Plan</c> table to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(recId _recId)
    {
        return _recId &&
               (select firstonly RecId from plan
                    where plan.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>Plan</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record in the <c>Plan</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>Plan</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Plan find(recId _recId, boolean _forUpdate = false)
    {
        Plan    plan;

        if (_recId)
        {
            plan.selectForUpdate(_forUpdate);

            select firstonly plan
                where plan.RecId == _recId;
        }

        return plan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the active plan for a specified plan reference
    /// </summary>
    /// <param name="_planReference">
    ///    The record ID of the plan reference.
    /// </param>
    /// <param name="_dateTime">
    ///    The date and time for which to find the active version.
    /// </param>
    /// <returns>
    ///    A record in the <c>Plan</c> table; otherwise, an empty record.
    /// </returns>
    public static Plan findActive(
        PlanReferenceRefRecId _planReference,
        utcdatetime           _dateTime = DateTimeUtil::getSystemDateTime())
    {
        Plan    plan;

        select firstonly plan
            where plan.PlanReference == _planReference
               && plan.ValidFrom     <= _dateTime
               && (plan.ValidTo      >= _dateTime
               ||  !plan.ValidTo)
               && plan.Status        == PlanStatus::Active;

        return plan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVersionNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a plan with a specific version number for a specified plan reference.
    /// </summary>
    /// <param name="_planReference">
    ///    The record ID of the plan reference.
    /// </param>
    /// <param name="_versionNum">
    ///    The version number.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>Plan</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Plan findVersionNum(
        PlanReferenceRefRecId _planReference,
        PlanVersionNum        _versionNum, boolean _forUpdate = false)
    {
        Plan    plan;

        if (   _planReference
            && _versionNum)
        {
            plan.selectForUpdate(_forUpdate);

            select firstonly plan
                where plan.PlanReference == _planReference
                   && plan.VersionNum == _versionNum;
        }

        return plan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the maximum-existing version number for the specified <c>PlanReference</c> record.
    /// </summary>
    /// <param name="_planReference">
    ///    The <c>PlanReference</c> value of the record.
    /// </param>
    /// <returns>
    ///    The maximum version number for this <c>PlanReference</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanVersionNum maxVersion(PlanReferenceRefRecId _planReference)
    {
        Plan plan;

        if (_planReference != 0)
        {
            select maxof(VersionNum) from plan
                where plan.PlanReference == _planReference;
        }

        return plan.VersionNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS324190</DeveloperDocumentation>
	<FormRef>LeanProductionFlow</FormRef>
	<Label>@SYS152560</Label>
	<SingularLabel>@SYS152561</SingularLabel>
	<TableGroup>Main</TableGroup>
	<TitleField1>PlanReference</TitleField1>
	<TitleField2>VersionNum</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>PlanReferenceVersionNumIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LeanProductionFlow</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LeanProductionFlow</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VersionNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VersionNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Plan</Name>
			<Label>@SCM:PlanReferenceCaption</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VersionNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanReference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS152612</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Validity</Name>
			<Label>@SYS35164</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PlanReference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanReferenceRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PlanStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanValidFromDateTime</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanValidToDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>VersionNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanVersionNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PlanReferenceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanReference</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PlanReferenceVersionNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VersionNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PlanReference</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlanReference</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlanReference</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ReferenceToPlan</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Plan</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanReference</Name>
					<Field>PlanReference</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>