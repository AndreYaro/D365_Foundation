<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationMatchRuleLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankReconciliationMatchRuleLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAndAdjustCompareValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts a filled compare value that is determined by a field type.
    /// </summary>
    /// <param name="_type">
    /// The field type.
    /// </param>
    /// <param name="_value">
    /// The comparing value.
    /// </param>
    /// <returns>
    /// The adjusted value.
    /// </returns>
    private BankReconciliationMatchFieldValue checkAndAdjustCompareValue(
        Types _type,
        BankReconciliationMatchFieldValue _value)
    {
        BankReconciliationMatchFieldValue adjustedValue;
        DictField   dictField;
        DictEnum    dictEnum;

        adjustedValue = _value;
        switch (_type)
        {
            case Types::Date:
                if (!str2Date(_value, -1))
                {
                    adjustedValue = '';
                }
                break;

            case Types::Real:
                try
                {
                    System.Convert::ToDouble(_value);
                }
                catch
                {
                    adjustedValue = '';
                }
                break;

            case Types::Integer:
                try
                {
                    System.Convert::ToInt32(_value);
                }
                catch
                {
                    adjustedValue = '';
                }
                break;
            case Types::Enum:
                dictField = new DictField(this.getSourceTableId(), this.FieldId);
                dictEnum = new DictEnum(dictField.enumId());
                adjustedValue = dictEnum.value2Name(dictEnum.name2Value(_value));
                break;
        }

        return adjustedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCompareFieldLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits a comparing field label for a bank document.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to set field label value.
    /// </param>
    /// <param name="_value">
    /// A field label value.
    /// </param>
    /// <returns>
    /// The field label value.
    /// </returns>
    public edit FieldLabel editCompareFieldLabel(
        boolean _set,
        FieldLabel _value)
    {
        TableId     tableId;
        #define.FromCompareField(true)

        tableId = this.getSourceTableId(#FromCompareField);

        if (_set)
        {
            this.CompareFieldId = this.getFieldIdFromFieldLabel(tableId, _value);
            this.modifiedFieldValue(fieldStr(BankReconciliationMatchRuleLine, CompareFieldId));
        }

        return fieldId2pname(tableId, this.CompareFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editFieldLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits a field label for a bank statement line.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to set field label value.
    /// </param>
    /// <param name="_value">
    /// A field label value.
    /// </param>
    /// <returns>
    /// The field label value.
    /// </returns>
    public edit FieldLabel editFieldLabel(
        boolean _set,
        FieldLabel _value)
    {
        TableId     tableId;
        #define.FromField(false)

        tableId = this.getSourceTableId(#FromField);

        if (_set)
        {
            this.FieldId = this.getFieldIdFromFieldLabel(tableId, _value);
            this.modifiedFieldValue(fieldStr(BankReconciliationMatchRuleLine, FieldId));
        }

        return fieldId2pname(tableId, this.FieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIdFromFieldLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a field ID that is based on a specified table and field label either by using a look up
    /// list or the manual input.
    /// </summary>
    /// <param name="_tableId">
    /// The specified table ID.
    /// </param>
    /// <param name="_fieldLabel">
    /// The specified field label.
    /// </param>
    /// <returns>
    /// The field ID.
    /// </returns>
    /// <remarks>
    /// The assumption is that the field label is unique; otherwise, returns the first matched field Id.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// There is no field that has the specified field label.
    /// </exception>
    private FieldId getFieldIdFromFieldLabel(
        TableId     _tableId,
        FieldLabel  _fieldLabel)
    {
        DictTable   dictTable = new DictTable(_tableId);
        DictField   dictField;
        Counter     counter;
        FieldId     fieldId;

        if (_fieldLabel)
        {
            for (counter = 1; counter <= dictTable.fieldCnt(); counter++)
            {
                dictField = new DictField(_tableId, dictTable.fieldCnt2Id(counter));
                //prerequisite is the field label is unique
                if (dictField.label() == _fieldLabel)
                {
                    fieldId = dictTable.fieldCnt2Id(counter);
                    break;
                }
            }

            if (!fieldId)
            {
                throw error("@GLS222256");
            }
        }

        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the base type of a <c>FieldId</c> or <c>CompareFieldId</c> value.
    /// </summary>
    /// <param name="_isCompareField">
    /// Indicates whether to get the base type of <c>CompareFieldId</c> .
    /// </param>
    /// <returns>
    /// The base type.
    /// </returns>
    public Types getFieldType(boolean _isCompareField = false)
    {
        TableId     tableId;
        FieldId     fieldId;
        DictField   dictField;

        tableId = this.getSourceTableId(_isCompareField);

        if (_isCompareField)
        {
            fieldId = this.CompareFieldId;
        }
        else
        {
            fieldId = this.FieldId;
        }

        Debug::assert(fieldId);

        dictField = new DictField(tableId, fieldId);

        return dictField.baseType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for a field or comparing field.
    /// </summary>
    /// <param name="_isCompareFieldId">
    /// A Boolean value that indicates whether to retrieve the table ID for a comparing field; optional.
    /// </param>
    /// <returns>
    /// The table ID.
    /// </returns>
    public TableId getSourceTableId(boolean _isCompareFieldId = false)
    {
        TableId tableId;

        if (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()))
        {
            tableId = tableNum(BankReconciliationStatementOpenTmp);

            switch (this.LineType)
            {
                case BankReconciliationMatchRuleLineType::Document:
                if (!_isCompareFieldId)
                    {
                        tableId = tableNum(BankReconciliationDocumentOpenTmp);
                    }
                    break;

                case BankReconciliationMatchRuleLineType::OrigDocument:
                    tableId = tableNum(BankReconciliationDocumentOpenTmp);
                    break;

                case BankReconciliationMatchRuleLineType::SettleCustInvoice:
                case BankReconciliationMatchRuleLineType::MatchOpenClosedCustInvoice:
                    tableId = _isCompareFieldId? tableNum(BankReconciliationStatementOpenView) : tableNum(CustInvoiceForBankReconciliationView);
                    break;

                case BankReconciliationMatchRuleLineType::SettleStatement:
                case BankReconciliationMatchRuleLineType::GenerateCustPaym:
                case BankReconciliationMatchRuleLineType::GenerateVendPaym:
                case BankReconciliationMatchRuleLineType::GenerateVoucher:
                    tableId = tableNum(BankReconciliationStatementOpenView);
                    break;

                default:
                    break;
            }
        }
        else
        {
            if (this.LineType == BankReconciliationMatchRuleLineType::Document
                && !_isCompareFieldId)
            {
                tableId = tableNum(BankReconciliationDocumentOpenTmp);
            }
            else
            {
                tableId = tableNum(BankReconciliationStatementOpenTmp);
            }
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLineType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the type of the line.
    /// </summary>
    /// <param name="_lineType">
    /// The type of the line.
    /// </param>
    public void initializeLineType(BankReconciliationMatchRuleLineType _lineType)
    {
        this.LineType       = _lineType;
        this.SourceTableId  = this.getSourceTableId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOperatorForStringTypeOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an operator can be used for string type only.
    /// </summary>
    /// <returns>
    /// true if the operator is for string type only; otherwise, false.
    /// </returns>
    private boolean isOperatorForStringTypeOnly()
    {
        return (this.Operator == BankReconciliationMatchOperatorType::Contains
            || this.Operator  == BankReconciliationMatchOperatorType::BeginWith
            || this.Operator  == BankReconciliationMatchOperatorType::EndWith
            || this.Operator  == BankReconciliationMatchOperatorType::In);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean     isAdjustValueNeeded = false;

        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(BankReconciliationMatchRuleLine, Value):
                this.CompareFieldId = 0;
                isAdjustValueNeeded = true;
                break;

            case fieldStr(BankReconciliationMatchRuleLine, FieldId):
                isAdjustValueNeeded = true;
                break;

            case fieldStr(BankReconciliationMatchRuleLine, CompareFieldId):
                this.Value = '';
                break;
        }

        if (isAdjustValueNeeded)
        {
            if (this.FieldId)
            {
                //Ajust the format of the input value
                this.Value = this.checkAndAdjustCompareValue(this.getFieldType(), this.Value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && !this.FieldId)
        {
            ret = checkFailed("@GLS222257");
        }

        if (ret
            && this.getFieldType() != Types::String
            && this.isOperatorForStringTypeOnly())
        {
            ret = checkFailed("@GLS222287");
        }

        if (ret
            && this.CompareFieldId
            && this.getFieldType() != this.getFieldType(true))
        {
            ret = checkFailed(strFmt(
                "@GLS222301",
                fieldId2pname(this.getSourceTableId(), this.FieldId),
                fieldId2pname(this.getSourceTableId(true), this.CompareFieldId)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record exists in the <c>BankReconciliationMatchRuleLine</c> table;
    /// If not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BankReconciliationMatchRuleLine</c> record.
    /// </param>
    /// <returns>
    /// True if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;

        if (!BankReconciliationMatchRuleLine::exist(_recId))
        {
            isExisting = checkFailed(strFmt(BankReconciliationMatchRuleLine::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSystemGeneratedMatchRuleLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a system generated matching rule line.
    /// </summary>
    /// <param name="_matchRuleRecId">
    /// A matching rule ID.
    /// </param>
    /// <param name="_systemGeneratedType">
    /// A system generated type.
    /// </param>
    /// <param name="_lineType">
    /// A matching rule line type.
    /// </param>
    public static void createSystemGeneratedMatchRuleLines(
        BankReconciliationMatchRuleRefRecId     _matchRuleRecId,
        BankReconMatchRuleLineSysGeneratedType  _systemGeneratedType,
        BankReconciliationMatchRuleLineType     _lineType)
    {
        List                                listOfMatchRuleLineFields;
        ListEnumerator                      enumerator;

        FieldId                             fieldId;
        FieldId                             compareFieldId;
        BankReconciliationMatchOperatorType operatorType;
        BankReconciliationMatchFieldValue   value;
        BankReconciliationMatchFieldValue   compareFieldExpression;

        switch (_lineType)
        {
            case BankReconciliationMatchRuleLineType::Statement:
                listOfMatchRuleLineFields = BankReconciliationMatchRuleLine::getFieldsOfSysGenMatchRuleLineOfStmt(_systemGeneratedType);
                break;

            case BankReconciliationMatchRuleLineType::Document:
                listOfMatchRuleLineFields = BankReconciliationMatchRuleLine::getFieldsOfSysGenMatchRuleLineOfDoc(_systemGeneratedType);
                break;

            case BankReconciliationMatchRuleLineType::OrigStatement:
                listOfMatchRuleLineFields = BankReconciliationMatchRuleLine::getFieldsOfSysGenMatchRuleLineOfOrigStmt(_systemGeneratedType);
                break;

            case BankReconciliationMatchRuleLineType::OrigDocument:
                listOfMatchRuleLineFields = BankReconciliationMatchRuleLine::getFieldsOfSysGenMatchRuleLineOfOrigDocument(_systemGeneratedType);
                break;

            case BankReconciliationMatchRuleLineType::SettleCustInvoice:
                listOfMatchRuleLineFields = BankReconciliationMatchRuleLine::getFieldsOfSysGenMatchRuleLineOfSettleCustInvoice(_systemGeneratedType);
                break;

            default:
                break;
        }

        if (listOfMatchRuleLineFields)
        {
            enumerator = listOfMatchRuleLineFields.getEnumerator();
            while (enumerator.moveNext())
            {
                [fieldId, compareFieldId, operatorType, value, compareFieldExpression] = enumerator.current();
                BankReconciliationMatchRuleLine::newMatchRuleLine(
                    _matchRuleRecid,
                    _lineType,
                    _systemGeneratedType,
                    fieldId,
                    compareFieldId,
                    operatorType,
                    value,
                    compareFieldExpression);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>BankReconciliationMatchRuleLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BankReconciliationMatchRuleLine</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        BankReconciliationMatchRuleLine matchRuleLine;

        select firstOnly RecId from matchRuleLine
            where matchRuleLine.RecId == _recId;

        return matchRuleLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>BankReconciliationMatchRuleLine</c> record by using a specified record ID.
    /// </summary>
    /// <param name="_recId">
    /// The specified record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record can be updated.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A currency model.
    /// </param>
    /// <returns>
    /// A <c>BankReconciliationMatchRuleLine</c> record.
    /// </returns>
    public static BankReconciliationMatchRuleLine find(
        RecId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankReconciliationMatchRuleLine matchRuleLine;

        matchRuleLine.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            matchRuleLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly matchRuleLine
            where matchRuleLine.RecId == _recId;

        return matchRuleLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySysGeneratedType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>BankReconciliationMatchRuleLine</c> record by using a system generated type.
    /// </summary>
    /// <param name="_matchRuleRecId">
    /// A matching rule record ID.
    /// </param>
    /// <param name="_sysGeneratedType">
    /// A system generated type.
    /// </param>
    /// <param name="_lineType">
    /// A matching rule line type.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record can be updated.
    /// </param>
    /// <returns>
    /// A <c>BankReconciliationMatchRuleLine</c> record.
    /// </returns>
    public static BankReconciliationMatchRuleLine findBySysGeneratedType(
        BankReconciliationMatchRuleRefRecId     _matchRuleRecId,
        BankReconMatchRuleLineSysGeneratedType  _sysGeneratedType,
        BankReconciliationMatchRuleLineType     _lineType,
        boolean                                 _forUpdate = false)
    {
        BankReconciliationMatchRuleLine matchRuleLine;

        matchRuleLine.selectForUpdate(_forUpdate);

        select firstonly matchRuleLine
            where matchRuleLine.BankReconciliationMatchRule == _matchRuleRecId
                && matchRuleLine.SystemGeneratedType        == _sysGeneratedType
                && matchRuleLine.LineType                   == _lineType;

        return matchRuleLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLineTypeFieldId</Name>
				<Source><![CDATA[
    internal static BankReconciliationMatchRuleLine findByLineTypeFieldId(
        BankReconciliationMatchRuleRefRecId _matchRuleRecId,
        BankReconciliationMatchRuleLineType _lineType,
        FieldId _fieldId,
        boolean _forUpdate = false)
    {
        BankReconciliationMatchRuleLine matchRuleLine;
        matchRuleLine.selectForUpdate(_forUpdate);

        select firstonly matchRuleLine
            where matchRuleLine.BankReconciliationMatchRule == _matchRuleRecId
                && matchRuleLine.LineType == _lineType
                && matchRuleLine.FieldId == _fieldId;

        return matchRuleLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLineTypeComparedFieldId</Name>
				<Source><![CDATA[
    internal static BankReconciliationMatchRuleLine findByLineTypeComparedFieldId(
        BankReconciliationMatchRuleRefRecId _matchRuleRecId,
        BankReconciliationMatchRuleLineType _lineType,
        FieldId _fieldId,
        boolean _forUpdate = false)
    {
        BankReconciliationMatchRuleLine matchRuleLine;
        matchRuleLine.selectForUpdate(_forUpdate);

        select firstonly matchRuleLine
            where matchRuleLine.BankReconciliationMatchRule == _matchRuleRecId
                && matchRuleLine.LineType == _lineType
                && matchRuleLine.CompareFieldId == _fieldId;

        return matchRuleLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldsOfSysGenMatchRuleLineOfDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the field values for a system generated match line for a document.
    /// </summary>
    /// <param name="_systemGeneratedType">
    /// The system generated type.
    /// </param>
    /// <returns>
    /// A list of field values.
    /// </returns>
    protected static List getFieldsOfSysGenMatchRuleLineOfDoc(
        BankReconMatchRuleLineSysGeneratedType  _systemGeneratedType)
    {
        FieldId                             fieldId;
        FieldId                             compareFieldId;
        BankReconciliationMatchOperatorType operatorType;
        BankReconciliationMatchFieldValue   value;
        BankReconciliationMatchFieldValue   compareFieldExpression;

        List                                listOfMatchRuleLineFields;
        #BankReconciliationMatchRuleOperator
        #localmacro.addRuleLine
            listOfMatchRuleLineFields.addEnd([fieldId, compareFieldId, operatorType, value, compareFieldExpression])
        #endmacro

        listOfMatchRuleLineFields = new List(Types::Container);

        switch (_systemGeneratedType)
        {
            case BankReconMatchRuleLineSysGeneratedType::AllowedDateDifference:
                fieldId = BankReconciliationDocumentOpenTmp::getBankTransactionDateFieldId();
                compareFieldId = BankReconciliationStatementOpenTmp::getBankBookingDateFieldId();
                value = '';
                compareFieldExpression = '';
                //the upper limit
                operatorType = BankReconciliationMatchOperatorType::LessThanOrEquals;
                #addRuleLine;

                //the lower limit
                operatorType = BankReconciliationMatchOperatorType::GreaterThanOrEquals;
                #addRuleLine;
                break;

            case BankReconMatchRuleLineSysGeneratedType::Reversal:
                fieldId = BankReconciliationDocumentOpenTmp::getBankReversalFlagFieldId();
                compareFieldId = 0;
                operatorType = BankReconciliationMatchOperatorType::Equals;
                value = enum2str(NoYes::Yes);
                compareFieldExpression = '';
                #addRuleLine;
                break;

            case BankReconMatchRuleLineSysGeneratedType::AllowedAmountDifference:
                fieldId = BankReconciliationDocumentOpenTmp::getBankCurrencyAmountFieldId();
                compareFieldId = BankReconciliationStatementOpenTmp::getBankCurrencyAmountFieldId();
                value = '';
                compareFieldExpression = '';
                //the upper limit
                operatorType = BankReconciliationMatchOperatorType::LessThanOrEquals;
                #addRuleLine;

                //the lower limit
                operatorType = BankReconciliationMatchOperatorType::GreaterThanOrEquals;
                #addRuleLine;
                break;

            case BankReconMatchRuleLineSysGeneratedType::OppositeAmount:
                fieldId = BankReconciliationDocumentOpenTmp::getBankCurrencyAmountFieldId();
                compareFieldId = BankReconciliationStatementOpenTmp::getBankCurrencyAmountFieldId();
                operatorType = BankReconciliationMatchOperatorType::Equals;
                value = '';
                compareFieldExpression = #OppositeAmount;
                #addRuleLine;
                break;

            case BankReconMatchRuleLineSysGeneratedType::SameBankTransType:
                fieldId = BankReconciliationDocumentOpenTmp::getBankTransTypeFieldId();
                compareFieldId = BankReconciliationStatementOpenTmp::getBankTransTypeFieldId();
                operatorType = BankReconciliationMatchOperatorType::Equals;
                value = '';
                compareFieldExpression = '';
                #addRuleLine;
                break;

            case BankReconMatchRuleLineSysGeneratedType::SameDocumentNumber:
                fieldId = BankReconciliationDocumentOpenTmp::getBankDocumentNumFieldId();
                compareFieldId = BankReconciliationStatementOpenTmp::getBankDocumentNumberFieldId();
                operatorType = BankReconciliationMatchOperatorType::Equals;
                value = '';
                compareFieldExpression = '';
                #addRuleLine;
                break;

            case BankReconMatchRuleLineSysGeneratedType::SamePaymReference:
                fieldId = BankReconciliationDocumentOpenTmp::getBankPaymReferenceFieldId();
                compareFieldId = BankReconciliationStatementOpenTmp::getBankPaymReferenceFieldId();
                operatorType = BankReconciliationMatchOperatorType::Equals;
                value = '';
                compareFieldExpression = '';
                #addRuleLine;
                break;
        }

        return listOfMatchRuleLineFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldsOfSysGenMatchRuleLineOfOrigStmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the field values for a system generated match line for an original statement.
    /// </summary>
    /// <param name="_systemGeneratedType">
    /// The system generated type.
    /// </param>
    /// <returns>
    /// The list of field values.
    /// </returns>
    protected static List getFieldsOfSysGenMatchRuleLineOfOrigStmt(
        BankReconMatchRuleLineSysGeneratedType  _systemGeneratedType)
    {
        FieldId                             fieldId;
        FieldId                             compareFieldId;
        BankReconciliationMatchOperatorType operatorType;
        BankReconciliationMatchFieldValue   value;
        BankReconciliationMatchFieldValue   compareFieldExpression;

        List                                listOfMatchRuleLineFields;
        #BankReconciliationMatchRuleOperator
        #localmacro.addRuleLine
            listOfMatchRuleLineFields.addEnd([fieldId, compareFieldId, operatorType, value, compareFieldExpression])
        #endmacro

        listOfMatchRuleLineFields = new List(Types::Container);

        switch (_systemGeneratedType)
        {
            case BankReconMatchRuleLineSysGeneratedType::AllowedDateDifference:
                fieldId = BankReconciliationStatementOpenTmp::getBankBookingDateFieldId();
                compareFieldId = BankReconciliationStatementOpenTmp::getBankBookingDateFieldId();
                value = '';
                compareFieldExpression = '';
                //the upper limit
                operatorType = BankReconciliationMatchOperatorType::LessThanOrEquals;
                #addRuleLine;

                //the lower limit
                operatorType = BankReconciliationMatchOperatorType::GreaterThanOrEquals;
                #addRuleLine;
                break;

            case BankReconMatchRuleLineSysGeneratedType::OppositeAmount:
                fieldId = BankReconciliationStatementOpenTmp::getBankCurrencyAmountFieldId();
                compareFieldId = BankReconciliationStatementOpenTmp::getBankCurrencyAmountFieldId();
                operatorType = BankReconciliationMatchOperatorType::Equals;
                value = '';
                compareFieldExpression = #OppositeAmount;
                #addRuleLine;
                break;

            case BankReconMatchRuleLineSysGeneratedType::NotReversal:
                fieldId = BankReconciliationStatementOpenTmp::getBankReversalFlagFieldId();
                compareFieldId = 0;
                operatorType = BankReconciliationMatchOperatorType::Equals;
                value = enum2str(NoYes::No);
                compareFieldExpression = '';
                #addRuleLine;
                break;

            case BankReconMatchRuleLineSysGeneratedType::SameBankTransType:
                fieldId = BankReconciliationStatementOpenTmp::getBankStatementTransTypeFieldId();
                compareFieldId = BankReconciliationStatementOpenTmp::getBankStatementTransTypeFieldId();
                operatorType = BankReconciliationMatchOperatorType::Equals;
                value = '';
                compareFieldExpression = '';
                #addRuleLine;
                break;

            case BankReconMatchRuleLineSysGeneratedType::SameDocumentNumber:
                fieldId = BankReconciliationStatementOpenTmp::getBankDocumentNumberFieldId();
                compareFieldId = BankReconciliationStatementOpenTmp::getBankDocumentNumberFieldId();
                operatorType = BankReconciliationMatchOperatorType::Equals;
                value = '';
                compareFieldExpression = '';
                #addRuleLine;
                break;

            case BankReconMatchRuleLineSysGeneratedType::SamePaymReference:
                fieldId = BankReconciliationStatementOpenTmp::getBankPaymReferenceFieldId();
                compareFieldId = BankReconciliationStatementOpenTmp::getBankPaymReferenceFieldId();
                operatorType = BankReconciliationMatchOperatorType::Equals;
                value = '';
                compareFieldExpression = '';
                #addRuleLine;
                break;
        }

        return listOfMatchRuleLineFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldsOfSysGenMatchRuleLineOfOrigDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the field values for a system generated match line for an original document.
    /// </summary>
    /// <param name="_systemGeneratedType">
    /// The system generated type.
    /// </param>
    /// <returns>
    /// The list of field values.
    /// </returns>
    private static List getFieldsOfSysGenMatchRuleLineOfOrigDocument(
        BankReconMatchRuleLineSysGeneratedType  _systemGeneratedType)
    {
        FieldId fieldId;
        FieldId compareFieldId;
        BankReconciliationMatchOperatorType operatorType;
        BankReconciliationMatchFieldValue value = '';
        BankReconciliationMatchFieldValue compareFieldExpression;

        List listOfMatchRuleLineFields;
        #BankReconciliationMatchRuleOperator

        listOfMatchRuleLineFields = new List(Types::Container);

        switch (_systemGeneratedType)
        {
            case BankReconMatchRuleLineSysGeneratedType::AllowedDateDifference:
                fieldId = BankReconciliationDocumentOpenTmp::getBankTransactionDateFieldId();
                compareFieldId = BankReconciliationDocumentOpenTmp::getBankTransactionDateFieldId();
                compareFieldExpression = '';
                //the upper limit
                operatorType = BankReconciliationMatchOperatorType::LessThanOrEquals;
                listOfMatchRuleLineFields.addEnd([fieldId, compareFieldId, operatorType, value, compareFieldExpression]);

                //the lower limit
                operatorType = BankReconciliationMatchOperatorType::GreaterThanOrEquals;
                break;

            case BankReconMatchRuleLineSysGeneratedType::OppositeAmount:
                fieldId = BankReconciliationDocumentOpenTmp::getBankCurrencyAmountFieldId();
                compareFieldId = BankReconciliationDocumentOpenTmp::getBankCurrencyAmountFieldId();
                operatorType = BankReconciliationMatchOperatorType::Equals;
                compareFieldExpression = #OppositeAmount;
                break;

            case BankReconMatchRuleLineSysGeneratedType::SameBankTransType:
                fieldId = BankReconciliationDocumentOpenTmp::getBankTransTypeFieldId();
                compareFieldId = BankReconciliationDocumentOpenTmp::getBankTransTypeFieldId();
                operatorType = BankReconciliationMatchOperatorType::Equals;
                compareFieldExpression = '';
                break;

            case BankReconMatchRuleLineSysGeneratedType::SameDocumentNumber:
                fieldId = BankReconciliationDocumentOpenTmp::getBankDocumentNumFieldId();
                compareFieldId = BankReconciliationDocumentOpenTmp::getBankDocumentNumFieldId();
                operatorType = BankReconciliationMatchOperatorType::Equals;
                compareFieldExpression = '';
                break;

            case BankReconMatchRuleLineSysGeneratedType::SamePaymReference:
                fieldId = BankReconciliationDocumentOpenTmp::getBankPaymReferenceFieldId();
                compareFieldId = BankReconciliationDocumentOpenTmp::getBankPaymReferenceFieldId();
                operatorType = BankReconciliationMatchOperatorType::Equals;
                compareFieldExpression = '';
                break;

            case BankReconMatchRuleLineSysGeneratedType::SameDocumentType:
                fieldId = BankReconciliationDocumentOpenTmp::getBankDocumentTypeFieldId();
                compareFieldId = BankReconciliationDocumentOpenTmp::getBankDocumentTypeFieldId();
                operatorType = BankReconciliationMatchOperatorType::Equals;
                compareFieldExpression = '';
                break;

            case BankReconMatchRuleLineSysGeneratedType::SameRelatedPartyName:
                fieldId = BankReconciliationDocumentOpenTmp::getBankRelatedPartyNameFieldId();
                compareFieldId = BankReconciliationDocumentOpenTmp::getBankRelatedPartyNameFieldId();
                operatorType = BankReconciliationMatchOperatorType::Equals;
                compareFieldExpression = '';
                break;

            case BankReconMatchRuleLineSysGeneratedType::SameRelatedPartyType:
                fieldId = BankReconciliationDocumentOpenTmp::getBankRelatedPartyTypeFieldId();
                compareFieldId = BankReconciliationDocumentOpenTmp::getBankRelatedPartyTypeFieldId();
                operatorType = BankReconciliationMatchOperatorType::Equals;
                compareFieldExpression = '';
                break;

            default:
                return listOfMatchRuleLineFields;
        }

        listOfMatchRuleLineFields.addEnd([fieldId, compareFieldId, operatorType, value, compareFieldExpression]);

        return listOfMatchRuleLineFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldsOfSysGenMatchRuleLineOfStmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the field values for a system generated match line for a statement.
    /// </summary>
    /// <param name="_systemGeneratedType">
    /// The system generated type.
    /// </param>
    /// <returns>
    /// The list of field values.
    /// </returns>
    protected static List getFieldsOfSysGenMatchRuleLineOfStmt(
        BankReconMatchRuleLineSysGeneratedType  _systemGeneratedType)
    {
        List listOfMatchRuleLineFields = new List(Types::Container);
        
        BankReconciliationMatchRuleLine::addToListFieldsFromSysGenMatchRuleLineOfStmt(listOfMatchRuleLineFields, _systemGeneratedType);

        return listOfMatchRuleLineFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldsOfSysGenMatchRuleLineOfSettleCustInvoice</Name>
				<Source><![CDATA[
    /// <summary>Retrieves the field values for a system generated match line for a customer invoice.</summary>
    /// <param name="_systemGeneratedType">The system generated type.</param>
    /// <returns>The list of field values.</returns>
    private static List getFieldsOfSysGenMatchRuleLineOfSettleCustInvoice(BankReconMatchRuleLineSysGeneratedType _systemGeneratedType)
    {
        List listOfMatchRuleLineFields = new List(Types::Container);

        BankReconciliationMatchRuleLine::addToListFieldsFromSysGenMatchRuleLineOfSettleCustInvoice(listOfMatchRuleLineFields, _systemGeneratedType);

        return listOfMatchRuleLineFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToListFieldsFromSysGenMatchRuleLineOfStmt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the field values for a system generated match line for a statement.
    /// </summary>
    /// <param name = "_listOfMatchRuleLineFields">
    ///     An instance of <c>List</c> to hold the matched rule line fields.
    /// </param>
    /// <param name = "_systemGeneratedType">
    ///     The system generated type.
    /// </param>
    protected static void addToListFieldsFromSysGenMatchRuleLineOfStmt(List _listOfMatchRuleLineFields, BankReconMatchRuleLineSysGeneratedType _systemGeneratedType)
    {
        switch (_systemGeneratedType)
        {
            case BankReconMatchRuleLineSysGeneratedType::Reversal:
                _listOfMatchRuleLineFields.addEnd([BankReconciliationStatementOpenTmp::getBankReversalFlagFieldId(), 0, BankReconciliationMatchOperatorType::Equals, enum2str(NoYes::Yes), '']);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToListFieldsFromSysGenMatchRuleLineOfSettleCustInvoice</Name>
				<Source><![CDATA[
    /// <summary>Adds the field values for a system generated match line for a customer invoice.</summary>
    /// <param name = "_listOfMatchRuleLineFields">An instance of <c>List</c> to hold the matched rule line fields.</param>
    /// <param name = "_systemGeneratedType">The system generated type.</param>
    private static void addToListFieldsFromSysGenMatchRuleLineOfSettleCustInvoice(
        List _listOfMatchRuleLineFields,
        BankReconMatchRuleLineSysGeneratedType _systemGeneratedType)
    {
        if (_systemGeneratedType == BankReconMatchRuleLineSysGeneratedType::SameAmountDrCrIndicator)
        {
            _listOfMatchRuleLineFields.addEnd([fieldNum(CustInvoiceForBankReconciliationView, AmountCreditDebitIndicator),
                fieldNum(BankReconciliationStatementOpenView, AmountCreditDebitIndicator),
                BankReconciliationMatchOperatorType::Equals,
                enum2str(NoYes::Yes),
                '']);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMatchRuleLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new matching rule line.
    /// </summary>
    /// <param name="_matchRuleRecId">
    /// The record ID of a <c>BankReconciliationMatchRule</c> record.
    /// </param>
    /// <param name="_lineType">
    /// A line type.
    /// </param>
    /// <param name="_systemGeneratedType">
    /// A system generated type.
    /// </param>
    /// <param name="_fieldId">
    /// A field ID.
    /// </param>
    /// <param name="_compareFieldId">
    /// A comparing field ID.
    /// </param>
    /// <param name="_operatorType">
    /// An operator type.
    /// </param>
    /// <param name="_value">
    /// A specified value.
    /// </param>
    /// <param name="_compareFieldExpression">
    /// A specified compare field expression.
    /// </param>
    protected static void newMatchRuleLine(
        BankReconciliationMatchRuleRefRecId     _matchRuleRecId,
        BankReconciliationMatchRuleLineType     _lineType,
        BankReconMatchRuleLineSysGeneratedType  _systemGeneratedType,
        FieldId                                 _fieldId,
        FieldId                                 _compareFieldId,
        BankReconciliationMatchOperatorType     _operatorType,
        BankReconciliationMatchFieldValue       _value,
        BankReconciliationMatchFieldValue       _compareFieldExpression
        )
    {
        BankReconciliationMatchRuleLine matchRuleLine;

        matchRuleLine.initValue();
        matchRuleLine.BankReconciliationMatchRule = _matchRuleRecId;
        matchRuleLine.initializeLineType(_lineType);
        matchRuleLine.SystemGeneratedType         = _systemGeneratedType;
        matchRuleLine.FieldId                     = _fieldId;
        matchRuleLine.Operator                    = _operatorType;
        matchRuleLine.Value                       = _value;
        matchRuleLine.CompareFieldId              = _compareFieldId;
        matchRuleLine.CompareFieldExpression      = _compareFieldExpression;
        matchRuleLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>BankReconciliationMatchRuleLine</c> table does not exist.
    /// </summary>
    /// <returns>
    /// A message that states that a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.LineId = newGuid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (!this.LineId)
        {
            this.LineId = newGuid();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMatchRuleForDocumentGroupRuleLine</Name>
				<Source><![CDATA[
    internal static void deleteMatchRuleForDocumentGroupRuleLine(BankReconciliationMatchRule _matchRule, FieldId _fieldId)
    {
        BankReconciliationMatchRuleLine matchRuleLine;

        if (_matchRule && _fieldId)
        {
            ttsbegin;

            delete_from matchRuleLine
                where matchRuleLine.LineType == BankReconciliationMatchRuleLineType::Document
                    && matchRuleLine.FieldId == _fieldId
                    && matchRuleLine.BankReconciliationMatchRule == _matchRule.RecId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMatchRuleLineForStmtGroupRuleLine</Name>
				<Source><![CDATA[
    internal static void deleteMatchRuleLineForStmtGroupRuleLine(BankReconciliationMatchRule _matchRule, FieldId _fieldId)
    {
        BankReconciliationMatchRuleLine matchRuleLine;

        if (_matchRule && _fieldId)
        {
            ttsbegin;

            delete_from matchRuleLine
                where matchRuleLine.LineType == BankReconciliationMatchRuleLineType::Document
                    && matchRuleLine.CompareFieldId == _fieldId
                    && matchRuleLine.BankReconciliationMatchRule == _matchRule.RecId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<DeveloperDocumentation>@GLS222305</DeveloperDocumentation>
	<Label>@GLS222239</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>BankReconciliationMatchRule</TitleField1>
	<TitleField2>LineType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Bank</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankReconciliationMatchRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Operator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SystemGeneratedType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompareFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Criteria</Name>
			<Label>@SYS13128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompareFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Operator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SystemGeneratedType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Field</Name>
			<Label>@sys6419</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LineNum</Name>
			<Label>@SYS15682</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Rule</Name>
			<Label>@GLS222238</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankReconciliationMatchRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankReconciliationMatchRule</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankReconciliationMatchRuleRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompareFieldExpression</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankReconciliationMatchFieldValue</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CompareFieldId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefFieldId</ExtendedDataType>
			<RelatedTable>BankReconciliationStatementOpenTmp</RelatedTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FieldId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefFieldId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>BankReconciliationMatchRuleLineType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Operator</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>BankReconciliationMatchOperatorType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SystemGeneratedType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>BankReconMatchRuleLineSysGeneratedType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Value</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankReconciliationMatchFieldValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>LineId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysGuid</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BankReconciliationMatchRuleIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BankReconciliationMatchRule</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankReconciliationMatchRule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BankReconciliationMatchRule</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankReconciliationMatchRule</Name>
					<Field>BankReconciliationMatchRule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>