<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkCalendarDate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WorkCalendarDate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the base calendar ID.
    /// </summary>
    /// <returns>
    /// The base calendar ID.
    /// </returns>
    public display CalendarId calendar()
    {
        return WorkCalendar::defined(this.CalendarId,this.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calendarName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the calendar.
    /// </summary>
    /// <returns>
    /// The name of the calendar.
    /// </returns>
    public display CalendarName calendarName()
    {
        return WorkCalendarTable::find(this.CalendarId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanStateCache</Name>
				<Source><![CDATA[
    private void cleanStateCache()
    {
        this.cleanStateCacheCurrentCompany();

        this.writeCrossCompany(tableMethodStr(WorkCalendarDate, cleanStateCache));
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCleanStateCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method called when the work calendar date cache is cleared.
    /// </summary>
    delegate void onCleanStateCache()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanStateCacheCurrentCompany</Name>
				<Source><![CDATA[
    private void cleanStateCacheCurrentCompany()
    {
        SysGlobalCache cache = appl.globalCache();
        cache.clear(tableStr(WorkCalendarDate));

        WorkCalendarSched::invalidateGlobalCacheScope();
        WrkCtrWorkingTimes::invalidateGlobalCacheScope();
        WrkCtrWorkingTimesCache::invalidateCalendar(this.CalendarId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateDayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the weekday name.
    /// </summary>
    /// <returns>
    /// The weekday name.
    /// </returns>
    public display DateDayName dateDayName()
    {
        return dayName(dayOfWk(this.TransDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
        this.cleanStateCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        this.cleanStateCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldNum(WorkCalendarDate, ClosedForPickup),
                [
                    fieldNum(WorkCalendarDate, WorkTimeControl)
                ]
            ]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WorkCalendarDate, ClosedForPickup):
                if (this.isFieldSet(fieldNum(WorkCalendarDate, WorkTimeControl)))
                {
                    switch (this.WorkTimeControl)
                    {
                        case WorkTimeControl::Open :
                            this.ClosedForPickup = NoYes::No;
                            break;

                        case WorkTimeControl::Closed :
                            this.ClosedForPickup = NoYes::Yes;
                            break;

                        case WorkTimeControl::Holiday :
                            this.ClosedForPickup = NoYes::Yes;
                            break;

                        case WorkTimeControl::UseBasic :
                            this.ClosedForPickup = NoYes::No;
                            break;
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>monthName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the month name.
    /// </summary>
    /// <returns>
    /// The month name.
    /// </returns>
    public display MonthName monthName()
    {
        return mthName(mthOfYr(this.TransDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the symbol information to be displayed if the payroll earning code is defined.
    /// </summary>
    /// <returns>
    /// The packed symbol information to display when there is payroll earning code defined; otherwise, no icon.
    /// </returns>
    public display container statusIcon()
    {
        #PayrollConstants

        ImageReference statusImage;
        WorkCalendarDateLine workCalendarDateLine;
        PayrollWorkCalendarLine payrollWorkCalendarLine;

        if (isConfigurationkeyEnabled(configurationKeyNum(HRMAdministrationPayrollInfo)))
        {
            select count(RecId) from payrollWorkCalendarLine
            exists join workCalendarDateLine
                where workCalendarDateLine.RecId == payrollWorkCalendarLine.WorkCalendarDateLine
                    && workCalendarDateLine.CalendarId == WorkCalendar::defined(this.CalendarId, this.TransDate, false)
                    && workCalendarDateLine.TransDate == this.TransDate;

            if (payrollWorkCalendarLine.RecId > 0)
            {
                statusImage = ImageReference::constructForSymbol(#ImageInfoStatusECSelected);
            }
        }

        if (statusImage)
        {
            return statusImage.pack();
        }
        else
        {
            return connull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;

        WorkCalendarDate this_orig = this.orig();
        
        super();

        this.updateCurrentCompany(this_orig);
        
        this.writeCrossCompany(tableMethodStr(WorkCalendarDate, update), this_orig);

        ttscommit;

        this.cleanStateCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCurrentCompany</Name>
				<Source><![CDATA[
    private void updateCurrentCompany(WorkCalendarDate _orig)
    {
        WorkCalendarDateLine workCalendarDateLine;
        boolean deleteFromWorkCalendarDateLine = this.WorkTimeControl != WorkTimeControl::Open;
        
        deleteFromWorkCalendarDateLine = this.WorkTimeControl == WorkTimeControl::Closed;

        if (deleteFromWorkCalendarDateLine)
        {
            delete_from workCalendarDateLine
                where workCalendarDateLine.CalendarId   == this.CalendarId   &&
                      workCalendarDateLine.TransDate    == this.TransDate;
        }

        if (this.WorkTimeId && this.WorkTimeControl == WorkTimeControl::Open
            && (_orig.WorkTimeControl != this.WorkTimeControl
                || !ReqWorkCalendarStatusChangedUpdateLinesToggle::instance().isEnabled()))
        {
            WorkTimeLine workTimeLine;
            while select workTimeLine
                where workTimeLine.WorkTimeId == this.WorkTimeId &&
                    workTimeLine.WeekDay == dayofwk(this.TransDate)
            notexists join workCalendarDateLine
                where workCalendarDateLine.CalendarId == this.CalendarId &&
                    workCalendarDateLine.TransDate == this.TransDate &&
                    WorkCalendarDateLine.FromTime == workTimeLine.FromTime
            {
                this.createWorkCalendarDateLine(this, workTimeLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkCalendarDateLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create record in <c>WorkCalendarDateLine</c> table.
    /// </summary>
    /// <param name="_workCalendarDate">
    ///    The <c>WorkCalendarDate</c> table buffer used to initialize the fields.
    /// </param>
    /// <param name="_workTimeLine">
    ///    The <c>WorkTimeLine</c> table buffer used to initialize the fields.
    /// </param>
    internal void createWorkCalendarDateLine(WorkCalendarDate _workCalendarDate, WorkTimeLine _workTimeLine)
    {
        WorkCalendarDateLine workCalendarDateLine;
        workCalendarDateLine.initFromWorkCalendarDate(_workCalendarDate);
        workCalendarDateLine.initFromWorkTimeLine(_workTimeLine);
        workCalendarDateLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>week</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the week number.
    /// </summary>
    /// <returns>
    /// The week number.
    /// </returns>
    public display Week week()
    {
        return wkOfYr(this.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDefinedHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of working hours for the calendar date.
    /// </summary>
    /// <param name="_calendar">
    /// The ID of the calendar.
    /// </param>
    /// <param name="_transDate">
    /// The date for which to get the working hours.
    /// </param>
    /// <param name="_useEffectivity">
    /// A Boolean value that indicates whether to include the efficiency percentage in the calculation;
    /// optional.
    /// </param>
    /// <param name="_throwIfError">
    /// A Boolean value that indicates whether to throw an error if no calendar entry was found on the
    /// date; optional.
    /// </param>
    /// <param name="_calendarCompany">
    /// The calendar's company id.
    /// </param>
    /// <returns>
    /// The number of working hours for the calendar date.
    /// </returns>
    public static Hours calcDefinedHours(
        CalendarId    _calendar,
        TransDate     _transDate,
        boolean       _useEffectivity   = true,
        boolean       _throwIfError     = true,
        CompanyId     _calendarCompany  = curext()
        )
    {
        Hours               capacityHours;
        SysGlobalCache      cache   = appl.globalCache();
        str                 cacheKey;

        cacheKey = WorkCalendarDate::getCalcDefinedHoursCacheKey(_calendar, _transDate, _useEffectivity, _calendarCompany);

        if (cache.isSet(tableStr(WorkCalendarDate), cacheKey))
        {
            return cache.get(tableStr(WorkCalendarDate), cacheKey);
        }
        else
        {
            #TimeConstants

            if (_calendarCompany  == curext())
            {
                capacityHours = WorkCalendarDate::calcDefinedSeconds(_calendar, _transDate, 0, #secondsPerDay, _useEffectivity, _throwIfError) / #secondsPerHour;
            }
            else
            {
                changecompany(_calendarCompany)
                {
                    capacityHours = WorkCalendarDate::calcDefinedSeconds(_calendar, _transDate, 0, #secondsPerDay, _useEffectivity, _throwIfError) / #secondsPerHour;
                }
            }

            cache.set(tableStr(WorkCalendarDate), cacheKey, capacityHours);
        }

        return capacityHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDefinedSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of working hours, in seconds, for the calendar date.
    /// </summary>
    /// <param name="_calendar">
    /// The ID of the calendar.
    /// </param>
    /// <param name="_transDate">
    /// The date for which to get the working hours.
    /// </param>
    /// <param name="_fromTime">
    /// The start time to use to get the working hours; optional.
    /// </param>
    /// <param name="_toTime">
    /// The end time to use to get the working hours; optional.
    /// </param>
    /// <param name="_useEffectivity">
    /// A Boolean value that indicates whether to include the efficiency percentage in the calculation;
    /// optional.
    /// </param>
    /// <param name="_throwIfError">
    /// A Boolean value that indicates whether to throw an error if no calendar entry was found on the
    /// date; optional.
    /// </param>
    /// <returns>
    /// Gets the number of working hours, in seconds, for the calendar date.
    /// </returns>
    public static Seconds calcDefinedSeconds(
        CalendarId    _calendar,
        TransDate     _transDate,
        Seconds       _fromTime         = maxInt(),
        Seconds       _toTime           = 0,
        boolean       _useEffectivity   = true,
        boolean       _throwIfError     = true
        )
    {
        WorkCalendarDateLine    workCalendarDateLine;
        Seconds                 seconds;

        while select workCalendarDateLine
            where workCalendarDateLine.CalendarId   == WorkCalendar::defined(_calendar,_transDate,_throwIfError)
                && workCalendarDateLine.TransDate   == _transDate
        {
            workCalendarDateLine.FromTime  = workCalendarDateLine.FromTime < _fromTime
                ? _fromTime
                : workCalendarDateLine.FromTime;
            workCalendarDateLine.ToTime    = workCalendarDateLine.ToTime   > _toTime
                ? _toTime
                : workCalendarDateLine.ToTime;

            if (workCalendarDateLine.FromTime < workCalendarDateLine.ToTime)
            {
                seconds += real2int(workCalendarDateLine.capacity(100,_useEffectivity));
            }
        }

        return seconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(
        CalendarId _calendarId,
        TransDate  _transDate)
    {
        if (_calendarId && !WorkCalendarDate::exist(_calendarId,_transDate))
        {
            return checkFailed(strFmt(WorkCalendarDate::txtNotExist(),_calendarId, date2StrUsr(_transDate,DateFlags::FormatAll)));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if a transaction date exists in Calendar or not
    /// </summary>
    /// <param name="_calendarId">
    /// Id of Calendar
    /// </param>
    /// <param name="_transDate">
    /// Transaction date
    /// </param>
    /// <returns>
    /// return true if transaction date exists, otherwise false
    /// </returns>
    public static boolean exist(
        CalendarId _calendarId,
        TransDate  _transDate)
    {
        return _calendarId && (select workCalendarDate
                where workCalendarDate.CalendarId   == _calendarId &&
                      workCalendarDate.TransDate    == _transDate
                ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether specified record exists in the <c>WorkCalendarDate</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>WorkCalendarDate</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existRecId(RecId _recId)
    {
        return _recId &&
               (select firstonly RecId from workCalendarDate
                    where workCalendarDate.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WorkCalendarDate</c> table.
    /// </summary>
    /// <param name="_calendarId">
    /// The ID of the calendar to find.
    /// </param>
    /// <param name="_transDate">
    /// The date of the calendar entry to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in a <c>WorkCalendarDate</c> table; otherwise, an empty record.
    /// </returns>
    public static WorkCalendarDate find(
        CalendarId _calendarId,
        TransDate  _transDate,
        boolean    _forUpdate = false)
    {
        WorkCalendarDate workCalendarDate;

        if (_calendarId)
        {
            workCalendarDate.selectForUpdate(_forUpdate);

            select firstonly workCalendarDate
                where workCalendarDate.CalendarId   == _calendarId &&
                      workCalendarDate.TransDate    == _transDate;
        }

        return workCalendarDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>WorkCalendarDate</c> table by using the specified record ID.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>WorkCalendarDate</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>WorkCalendarDate</c> table; otherwise, an empty record.
    /// </returns>
    public static WorkCalendarDate findRecId(RecId _recId, boolean _forUpdate = false)
    {
        WorkCalendarDate workCalendarDate;

        if (_recId)
        {
            workCalendarDate.selectForUpdate(_forUpdate);

            select firstonly workCalendarDate
                where workCalendarDate.RecId == _recId;
        }

        return workCalendarDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalcDefinedHoursCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build cache key for calcDefinedHours method in WorkCalendarDate table.
    /// </summary>
    /// <param name="_calendar">
    /// The ID of the calendar.
    /// </param>
    /// <param name="_transDate">
    /// The date for which to get the working hours.
    /// </param>
    /// <param name="_useEffectivity">
    /// A Boolean value that indicates whether to include the efficiency percentage in the calculation.
    /// </param>
    /// <param name="_calendarCompany">
    /// The calendar's company id.
    /// </param>
    /// <returns>
    /// The cachekey in string.
    /// </returns>
    public static str getCalcDefinedHoursCacheKey(
        CalendarId    _calendar,
        TransDate     _transDate,
        boolean       _useEffectivity,
        CompanyId     _calendarCompany
        )
    {
        str     cacheKey;

        cacheKey = strFmt("%1-%2-%3-%4", _calendar,
                                         _transDate,
                                         _useEffectivity,
                                         _calendarCompany);

        return cacheKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDateOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the calendar date entry is open.
    /// </summary>
    /// <param name="_calendar">
    /// The ID of the calendar.
    /// </param>
    /// <param name="_transDate">
    /// The date to check.
    /// </param>
    /// <returns>
    /// true if the calendar date entry is open; otherwise, false.
    /// </returns>
    public static boolean isDateOpen(
        CalendarId _calendar,
        TransDate  _transDate)
    {
        WorkCalendar    workCalendar = new WorkCalendar(_calendar,_transDate);

        if (!workCalendar.isValid())
        {
            return true;
        }

        return workCalendar.workTimeControl() == WorkTimeControl::Open;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPickupDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the date in the parameter list is both an open date and is not closed for pickup
    /// in the specified calendar.
    /// </summary>
    /// <param name="_calendar">
    /// The calendar for which to check whether the date is open for pickup.
    /// </param>
    /// <param name="_transDate">
    /// The date of which to check if it is open for pickup.
    /// </param>
    /// <returns>
    /// true if the date is open for pickup in the calendar; otherwise, false.
    /// </returns>
    public static boolean isPickupDate(
        CalendarId _calendar,
        TransDate  _transDate)
    {
        WorkCalendar    workCalendar = new WorkCalendar(_calendar,_transDate);

        if (!workCalendar.isValid())
        {
            return true;
        }

        return workCalendar.workTimeControl() == WorkTimeControl::Open && workCalendar.closedForPickup() == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the base calendar.
    /// </summary>
    /// <param name="_calendarId">
    /// The ID of the calendar for which to get the name.
    /// </param>
    /// <param name="_transDate">
    /// The date for which to get the calendar name.
    /// </param>
    /// <returns>
    /// The name of the base calendar.
    /// </returns>
    public static Name name(
        CalendarId _calendarId,
        TransDate  _transDate)
    {
        return WorkCalendarDate::find(_calendarId,_transDate).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS28070";
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWorkTimeHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of working hours for the calendar date.
    /// </summary>
    /// <param name="_calendar">The ID of the calendar.</param>
    /// <param name="_transDate">The date for which to get the working hours.</param>
    /// <param name="_calendarCompany">The calendar's company id.</param>
    /// <param name="_throwIfError">
    /// A boolean value that indicates whether to throw an error if no calendar entry was found on the
    /// date; optional.
    /// </param>
    /// <returns>The number of working hours for the calendar date.</returns>
    public static Hours calcWorkTimeHours(
        CalendarId _calendar,
        TransDate  _transDate,
        CompanyId  _calendarCompany = curext(),
        boolean    _throwIfError = true)
    {
        #TimeConstants
        Hours workTimeHours;
        if (_calendarCompany  == curext())
        {
            workTimeHours = WorkCalendarDate::calcWorkTimeSeconds(_calendar, _transDate, 0, #secondsPerDay, _throwIfError) / #secondsPerHour;
        }
        else
        {
            changecompany (_calendarCompany)
            {
                workTimeHours = WorkCalendarDate::calcWorkTimeSeconds(_calendar, _transDate, 0, #secondsPerDay, _throwIfError) / #secondsPerHour;
            }
        }
        
        return workTimeHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWorkTimeSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total working time, in seconds, for the calendar date.
    /// </summary>
    /// <param name="_calendar">The ID of the calendar.</param>
    /// <param name="_transDate">The date for which to get the working hours.</param>
    /// <param name="_fromTime">The start time to use to get the working hours; optional.</param>
    /// <param name="_toTime">The end time to use to get the working hours; optional.</param>
    /// <param name="_throwIfError">
    /// A boolean value that indicates whether to throw an error if no calendar entry was found on the
    /// date; optional.
    /// </param>
    /// <returns>Gets the total working time, in seconds, for the calendar date.</returns>
    public static Seconds calcWorkTimeSeconds(
        CalendarId _calendar,
        TransDate  _transDate,
        Seconds    _fromTime = 0,
        Seconds    _toTime = maxInt(),
        boolean    _throwIfError = true)
    {
        WorkCalendarDateLine workCalendarDateLine;
        Seconds totalWorkTime;
        while select workCalendarDateLine
            where workCalendarDateLine.CalendarId == WorkCalendar::defined(_calendar, _transDate, _throwIfError)
                && workCalendarDateLine.TransDate == _transDate
        {
            workCalendarDateLine.FromTime = workCalendarDateLine.FromTime < _fromTime
                ? _fromTime
                : workCalendarDateLine.FromTime;
            workCalendarDateLine.ToTime = workCalendarDateLine.ToTime > _toTime
                ? _toTime
                : workCalendarDateLine.ToTime;
            if (workCalendarDateLine.FromTime < workCalendarDateLine.ToTime)
            {
                totalWorkTime += workCalendarDateLine.duration();
            }
        }
        return totalWorkTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTimeHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of working hours for the calendar date.
    /// </summary>
    /// <returns>The number of working hours.</returns>
    public display Hours workTimeHours()
    {
        return this.CalendarId ? WorkCalendarDate::calcWorkTimeHours(this.CalendarId, this.TransDate) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeCrossCompany</Name>
				<Source><![CDATA[
    private void writeCrossCompany(str _methodName, WorkCalendarDate _orig = null)
    {
        if (WorkCalendarDateDataSharingCrossCompanyFlight::instance().isEnabled())
        {
            SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
            if (policy.RecId && policy.IsEnabled)
            {
                Query    query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this.orig(), policy.RecId);
                QueryRun queryRun = new QueryRun(query);
        
                while (queryRun.Next())
                {
                    WorkCalendarDate companyWorkCalendarDate = queryRun.get(this.TableId);
                    DataAreaId company = companyWorkCalendarDate.DataAreaId;
                    if (companyWorkCalendarDate && company && company != curExt())
                    {
                        changecompany(company)
                        {
                            WorkCalendarDate workCalendarDate = WorkCalendarDate::find(companyWorkCalendarDate.CalendarId, companyWorkCalendarDate.TransDate);
                            if (workCalendarDate.RecId)
                            {
                                buf2Buf(this, workCalendarDate);

                                switch (_methodName)
                                {
                                    case tableMethodStr(WorkCalendarDate, update):
                                        if (_orig.RecId && !SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(company, tableStr(WorkCalendarDateLine)))
                                        {
                                            workCalendarDate.updateCurrentCompany(_orig);
                                        }
                                        break;
                                    case tableMethodStr(WorkCalendarDate, cleanStateCache):
                                        workCalendarDate.cleanStateCacheCurrentCompany();
                                        break;
                                    default:
                                        return;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS124211</DeveloperDocumentation>
	<FormRef>WorkCalendarDate</FormRef>
	<Label>@SYS7332</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CalendarId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>CalendarDateIdx</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>CalendarDateIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>WorkCalendarDateLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WorkCalendarDateLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTimeControl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedForPickup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calendar</Name>
			<Label>@SYS11839</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Control</Name>
			<Label>@SYS25627</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkTimeControl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedForPickup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateGroup</Name>
			<Label>@SYS7402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@SYS7399</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalendarId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CalendarId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ClosedForPickup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesClosedForPickup</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkTimeControl</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WorkTimeControl</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkTimeId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WorkTimeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS11965</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CalendarDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CalendarId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WorkCalendarTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124195</EntityRelationshipRole>
			<RelatedTable>WorkCalendarTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>WorkingCalendar</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WorkingTime</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalendarId</Name>
					<Field>CalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>