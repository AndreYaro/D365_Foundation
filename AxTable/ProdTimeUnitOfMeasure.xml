<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdTimeUnitOfMeasure</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdTimeUnitOfMeasure extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>unit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the unit of measure.
    /// </summary>
    /// <returns>
    ///    A <c>UnitOfMeasure</c> table buffer.
    /// </returns>
    public UnitOfMeasure unit()
    {
        UnitOfMeasure unitOfMeasure;

        if (this.UnitOfMeasure != 0)
        {
            unitOfMeasure = UnitOfMeasure::find(this.UnitOfMeasure);
        }

        return unitOfMeasure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertValueFromTimeUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a value from a selected time unit to a particular unit of measure by using the module
    /// parameters configuration.
    /// </summary>
    /// <param name="_fromTimeUnitType">
    /// The desired output time unit type.
    /// </param>
    /// <param name="_value">
    /// The value to be converted.
    /// </param>
    /// <param name="_toUnitOfMeasure">
    /// The source unit of measure.
    /// </param>
    /// <param name="_itemId">
    /// An item that is used for product-specific conversion, optional.
    /// </param>
    /// <param name="_inventDimId">
    /// The dimension ID for conversion.
    /// </param>
    /// <returns>
    /// A converted value if a conversion exists; otherwise, 0.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// A required unit of measure is not set up.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// A required unit of measure is not set up.
    /// </exception>
    public static real convertValueFromTimeUnit(
        ProdTimeUnitType _fromTimeUnitType,
        real             _value,
        RefRecId         _toUnitOfMeasure,
        ItemId           _itemId = '',
        InventDimId      _inventDimId = '')
    {
        if (!_toUnitOfMeasure)
        {
            throw error("@SYS311149");
        }

        ProdParameters        prodParameters        = ProdParameters::find();
        ProdTimeUnitOfMeasure prodTimeUnitOfMeasure = ProdTimeUnitOfMeasure::findByParametersUnitType(prodParameters.RecId, _fromTimeUnitType);

        if (!prodTimeUnitOfMeasure)
        {
            warning("@SYS311149");
            throw error("@SYS327430");
        }

        if (!_itemId && !_inventDimId)
        {
            return UnitOfMeasureConverter::convert(_value, prodTimeUnitOfMeasure.UnitOfMeasure, _toUnitOfMeasure, NoYes::No);
        }
        else
        {
            return EcoResProductUnitConverter::convertForReleasedProduct(_itemId,
                                                                         _inventDimId,
                                                                         _value,
                                                                         prodTimeUnitOfMeasure.UnitOfMeasure,
                                                                         _toUnitOfMeasure,
                                                                         NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertValueTimeUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a value from one time unit to another time unit by using the module parameters
    /// configuration.
    /// </summary>
    /// <param name="_fromTimeUnitType">
    /// The source unit type.
    /// </param>
    /// <param name="_value">
    /// The value to convert.
    /// </param>
    /// <param name="_toTimeUnitType">
    /// The desired output time unit type.
    /// </param>
    /// <param name="_itemId">
    /// An item used for product-specific conversion; optional.
    /// </param>
    /// <param name="_inventDimId">
    /// The dimension ID for conversions.
    /// </param>
    /// <returns>
    /// A converted value if a conversion exists; otherwise, 0.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// A required unit of measure is not set up.
    /// </exception>
    public static real convertValueTimeUnit(
        ProdTimeUnitType _fromTimeUnitType,
        real             _value,
        ProdTimeUnitType _toTimeUnitType,
        ItemId           _itemId = '',
        InventDimId      _inventDimId = '')
    {
        ProdParameters        prodParameters            = ProdParameters::find();
        ProdTimeUnitOfMeasure fromProdTimeUnitOfMeasure = ProdTimeUnitOfMeasure::findByParametersUnitType(prodParameters.RecId,_fromTimeUnitType);
        ProdTimeUnitOfMeasure toProdTimeUnitOfMeasure   = ProdTimeUnitOfMeasure::findByParametersUnitType(prodParameters.RecId,_toTimeUnitType);

        if (!fromProdTimeUnitOfMeasure
            || !toProdTimeUnitOfMeasure)
        {
            warning("@SYS311149");
            throw error("@SYS327430");
        }

        if (!_itemId && !_inventDimId)
        {
            return UnitOfMeasureConverter::convert(_value, fromProdTimeUnitOfMeasure.UnitOfMeasure, toProdTimeUnitOfMeasure.UnitOfMeasure, NoYes::No);
        }
        else
        {
            return EcoResProductUnitConverter::convertForReleasedProduct(_itemId,
                                                                         _inventDimId,
                                                                         _value,
                                                                         fromProdTimeUnitOfMeasure.UnitOfMeasure,
                                                                         toProdTimeUnitOfMeasure.UnitOfMeasure,
                                                                         NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertValueToTimeUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a value from a particular unit of measure to a selected time unit by using the module
    /// parameters configuration.
    /// </summary>
    /// <param name="_fromUnitOfMeasure">
    /// The source unit of measure.
    /// </param>
    /// <param name="_value">
    /// The value to convert.
    /// </param>
    /// <param name="_toTimeUnitType">
    /// The desired output time unit type.
    /// </param>
    /// <param name="_itemId">
    /// An item used for product-specific conversion, optional.
    /// </param>
    /// <param name="_inventDimId">
    /// The dimension ID for conversions.
    /// </param>
    /// <returns>
    /// A converted value if a conversion exists; otherwise, 0.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// A required unit of measure is not set up.
    /// </exception>
    public static real convertValueToTimeUnit(
        RefRecId         _fromUnitOfMeasure,
        real             _value,
        ProdTimeUnitType _toTimeUnitType,
        ItemId           _itemId = '',
        InventDimId      _inventDimId = '')
    {
        if (!_fromUnitOfMeasure)
        {
            throw error("@SYS311149");
        }

        ProdTimeUnitOfMeasure prodTimeUnitOfMeasure = ProdTimeUnitOfMeasure::findByParametersUnitType(ProdParameters::find().RecId, _toTimeUnitType);

        if (!prodTimeUnitOfMeasure)
        {
            warning("@SYS311149");
            throw error("@SYS327430");
        }

        if (!_itemId && !_inventDimId)
        {
            return UnitOfMeasureConverter::convert(_value, _fromUnitOfMeasure, prodTimeUnitOfMeasure.UnitOfMeasure, NoYes::No);
        }
        else
        {
            return EcoResProductUnitConverter::convertForReleasedProduct(_itemId,
                                                                         _inventDimId,
                                                                         _value,
                                                                         _fromUnitOfMeasure,
                                                                         prodTimeUnitOfMeasure.UnitOfMeasure,
                                                                         NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToTimeUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a value from a particular unit of measure to a selected time unit by using the module
    /// parameters configuration.
    /// </summary>
    /// <param name="_fromUnitOfMeasure">
    /// The source unit of measure.
    /// </param>
    /// <param name="_value">
    /// The value to convert.
    /// </param>
    /// <param name="_toTimeUnitType">
    /// The desired output time unit type.
    /// </param>
    /// <param name="_itemId">
    /// An item used for product-specific conversion, optional.
    /// </param>
    /// <returns>
    /// A converted value if a conversion exists; otherwise, 0.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// A required unit of measure is not set up.
    /// </exception>
    [SysObsolete('This method is deprecated use convertValueToTimeUnit instead.', false, 31\03\2019)]
    public static real convertToTimeUnit(
        RefRecId         _fromUnitOfMeasure,
        real             _value,
        ProdTimeUnitType _toTimeUnitType,
        ItemId           _itemId = '')
    {
        return ProdTimeUnitOfMeasure::convertValueToTimeUnit(_fromUnitOfMeasure, _value, _toTimeUnitType, _itemId, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToTimeUnitCalendarId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a value in a particular unit of measure to a selected time unit by using the specified
    /// calendar and module parameters configuration.
    /// </summary>
    /// <param name="_calendarId">
    /// The calendar to use.
    /// </param>
    /// <param name="_fromUnitOfMeasure">
    /// The source unit of measure.
    /// </param>
    /// <param name="_value">
    /// The value to convert.
    /// </param>
    /// <param name="_toTimeUnitType">
    /// The desired output time unit type.
    /// </param>
    /// <param name="_itemId">
    /// An item that is used for product-specific conversion; optional.
    /// </param>
    /// <returns>
    /// A converted value if a conversion exists; otherwise, 0.
    /// </returns>
    /// <remarks>
    /// A day is interpreted not as a 24 hour period, but as defined by the <c>StandardWorkDay</c> field of
    /// the <c>WorkCalendarTable</c> table.
    /// </remarks>
    public static real convertToTimeUnitCalendarId(
        CalendarId       _calendarId,
        RefRecId         _fromUnitOfMeasure,
        real             _value,
        ProdTimeUnitType _toTimeUnitType,
        ItemId           _itemId = '')
    {
        #TimeConstants
        WorkCalendarTable       workCalendarTable;
        UnitOfMeasureRecId      unitOfMeasureDays;
        UnitOfMeasureRecId      unitOfMeasureHours;
        UnitOfMeasureRecId      unitOfMeasureFrom = _fromUnitOfMeasure;
        real                    value = _value;
        real                    result;

        //when converting from days to another unit, substitute a day for StandardWorkDayHours.
        if (_calendarId)
        {
            workCalendarTable = WorkCalendarTable::find(_calendarId);
            if (   workCalendarTable.StandardWorkDayHours
                && workCalendarTable.StandardWorkDayHours != #hoursPerDay)
            {
                unitOfMeasureDays  = ProdTimeUnitOfMeasure::unitOfMeasureByType(ProdTimeUnitType::Days);
                unitOfMeasureHours = ProdTimeUnitOfMeasure::unitOfMeasureByType(ProdTimeUnitType::Hours);
                if (   unitOfMeasureDays
                    && unitOfMeasureHours
                    && unitOfMeasureFrom == unitOfMeasureDays
                    && _toTimeUnitType   != ProdTimeUnitType::Days)
                {
                    if (unitOfMeasureHours)
                    {
                        unitOfMeasureFrom = unitOfMeasureHours;
                        value             = _value * workCalendarTable.StandardWorkDayHours;
                    }
                }
            }
        }

        //call the regular conversion
        result = ProdTimeUnitOfMeasure::convertValueToTimeUnit(unitOfMeasureFrom, value, _toTimeUnitType, _itemId, '');

        //when converting to days from another unit, apply a second regular conversion since the first result
        //must be interpreted in StandardWorkDayHours
        if (   workCalendarTable
            && unitOfMeasureHours
            && unitOfMeasureDays
            && workCalendarTable.StandardWorkDayHours
            && workCalendarTable.StandardWorkDayHours != #hoursPerDay
            && _fromUnitOfMeasure                     != unitOfMeasureDays
            && _toTimeUnitType                        == ProdTimeUnitType::Days)
        {
            value  = result * #hoursPerDay/workCalendarTable.StandardWorkDayHours;
            result = ProdTimeUnitOfMeasure::convertValueToTimeUnit(unitOfMeasureDays, value, _toTimeUnitType, _itemId, '');
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProdTimeUnitOfMeasure</c> table.
    /// </summary>
    /// <param name="_refRecId">
    /// The record ID of the <c>ProdTimeUnitOfMeasure</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ProdTimeUnitOfMeasure</c> table; otherwise, an empty record.
    /// </returns>
    public static ProdTimeUnitOfMeasure find(
        RefRecId _refRecId,
        boolean  _forUpdate = false)
    {
        ProdTimeUnitOfMeasure prodTimeUnitOfMeasure;

        if (_refRecId)
        {
            prodTimeUnitOfMeasure.selectForUpdate(_forUpdate);

            select firstonly prodTimeUnitOfMeasure
                where prodTimeUnitOfMeasure.RecId == _refRecId;
        }

        return prodTimeUnitOfMeasure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByParametersUnitType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates a <c>ProdTimeUnitOfMeasure</c> record.
    /// </summary>
    /// <param name="_prodParameters">
    ///    The record ID of the <c>ProdTimeUnitOfMeasure</c> record to find.
    /// </param>
    /// <param name="_timeUnitType">
    ///    The time unit.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A <c>ProdTimeUnitOfMeasure</c> record.
    /// </returns>
    public static ProdTimeUnitOfMeasure findByParametersUnitType(
        RefRecId         _prodParameters,
        ProdTimeUnitType _timeUnitType,
        boolean          _forUpdate = false)
    {
        ProdTimeUnitOfMeasure prodTimeUnitOfMeasure;

        if (_prodParameters)
        {
            prodTimeUnitOfMeasure.selectForUpdate(_forUpdate);

            // if the unit of measure isn't specified, then we just filter by the time unit type
            select firstonly prodTimeUnitOfMeasure
                where prodTimeUnitOfMeasure.Parameters   == _prodParameters
                   && prodTimeUnitOfMeasure.TimeUnitType == _timeUnitType;
        }

        return prodTimeUnitOfMeasure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitOfMeasureByType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a unit of measure record ID for a particular time unit type.
    /// </summary>
    /// <param name="_prodTimeUnitType">
    ///    The time unit.
    /// </param>
    /// <returns>
    ///    A record ID for the specified unit type if found; otherwise, 0.
    /// </returns>
    public static UnitOfMeasureRecId unitOfMeasureByType(ProdTimeUnitType _prodTimeUnitType)
    {
        return ProdTimeUnitOfMeasure::findByParametersUnitType(ProdParameters::find().RecId, _prodTimeUnitType).UnitOfMeasure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTimeUnits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the existence of conversion methods between the time units.
    /// </summary>
    /// <param name = "_unitOfMeasureSeconds">The unit of measure for seconds.</param>
    /// <param name = "_unitOfMeasureMinutes">The unit of measure for minutes.</param>
    /// <param name = "_unitOfMeasureHours">The unit of measure for hours.</param>
    /// <param name = "_unitOfMeasureDays">The unit of measure for days.</param>
    /// <returns>true if the time units are valid; otherwise false.</returns>
    public static boolean validateTimeUnits(UnitOfMeasure _unitOfMeasureSeconds, UnitOfMeasure _unitOfMeasureMinutes, UnitOfMeasure _unitOfMeasureHours, UnitOfMeasure _unitOfMeasureDays)
    {
        boolean result = true;

        if (   _unitOfMeasureSeconds
            && _unitOfMeasureMinutes
            && !UnitOfMeasureConverter::canBeConverted(_unitOfMeasureSeconds.RecId, _unitOfMeasureMinutes.RecId))
        {
            result = checkFailed(strFmt("@SYS304044", _unitOfMeasureSeconds.Symbol, _unitOfMeasureMinutes.Symbol));
        }

        if (   _unitOfMeasureMinutes
            && _unitOfMeasureHours
            && !UnitOfMeasureConverter::canBeConverted(_unitOfMeasureMinutes.RecId, _unitOfMeasureHours.RecId))
        {
            result = checkFailed(strFmt("@SYS304044", _unitOfMeasureMinutes.Symbol, _unitOfMeasureHours.Symbol));
        }

        if (   _unitOfMeasureHours
            && _unitOfMeasureDays
            && !UnitOfMeasureConverter::canBeConverted(_unitOfMeasureHours.RecId, _unitOfMeasureDays.RecId))
        {
            result = checkFailed(strFmt("@SYS304044", _unitOfMeasureHours.Symbol, _unitOfMeasureDays.Symbol));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<DeveloperDocumentation>@SYS320529</DeveloperDocumentation>
	<Label>@SYS304043</Label>
	<SingularLabel>Time unit of measure</SingularLabel>
	<TableGroup>Parameter</TableGroup>
	<CacheLookup>Found</CacheLookup>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductionControl</Modules>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Parameters</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TimeUnitType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Parameters</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TimeUnitType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Unit</Name>
			<Label>@SYS190813</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TimeUnitType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Parameters</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Parameters</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS25861</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TimeUnitType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdTimeUnitType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UnitOfMeasure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>UnitOfMeasure</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Parameters</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TimeUnitType</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Parameters</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TimeUnitType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdParameters</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>ProdParameters</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProdParameters</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>TimeUnits</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Parameters</Name>
					<Field>Parameters</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TimeUnitsOfMeasure</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitOfMeasure</Name>
					<Field>UnitOfMeasure</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>