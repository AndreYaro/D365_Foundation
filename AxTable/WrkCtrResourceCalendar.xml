<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrResourceCalendar</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WrkCtrResourceCalendar extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findActiveForResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the active calendar assignment for a resource or resource group based on the <c>WrkCtrId</c> field.
    /// </summary>
    /// <param name = "_wrkCtrId">The ID of the resource for which to search.</param>
    /// <param name = "_dateToFindCalendarFor">The active date to search for; optional.</param>
    /// <param name = "_forUpdate">Specifies whether the found record should be selected for update.</param>
    /// <returns>The active calendar assignment for a resource.</returns>
    public static WrkCtrResourceCalendar findActiveForResource(WrkCtrIdBase _wrkCtrId,
                                                               date         _dateToFindAssignmentFor = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                               boolean      _forUpdate = false)
    {
        WrkCtrResourceCalendar wrkCtrResourceCalendar;

        if (_wrkCtrId)
        {
            wrkCtrResourceCalendar.selectForUpdate(_forUpdate);

            select firstonly validTimeState(_dateToFindAssignmentFor) wrkCtrResourceCalendar
                where wrkCtrResourceCalendar.WrkCtrId == _wrkCtrId;
        }

        return wrkCtrResourceCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveForResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the active calendar assignment for a resource group.
    /// </summary>
    /// <param name = "_resourceGroup">The ID of the resource group for which to search.</param>
    /// <param name = "_dateToFindCalendarFor">The active date to search for; optional.</param>
    /// <param name = "_forUpdate">Specifies whether the found record should be selected for update.</param>
    /// <returns>The active calendar assignment for a resource group.</returns>
    public static WrkCtrResourceCalendar findActiveForResourceGroup(WrkCtrResourceGroupRefRecId _resourceGroup,
                                                                    date                        _dateToFindAssignmentFor = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                    boolean                     _forUpdate = false)
    {
        WrkCtrResourceCalendar wrkCtrResourceCalendar;
        WrkCtrResourceGroup    wrkCtrResourceGroup;

        if (_resourceGroup)
        {
            wrkCtrResourceCalendar.selectForUpdate(_forUpdate);

            select firstonly validTimeState(_dateToFindAssignmentFor) wrkCtrResourceCalendar
                exists join wrkCtrResourceGroup
                    where wrkCtrResourceGroup.recId == _resourceGroup
                    &&    wrkCtrResourceCalendar.WrkCtrId == wrkCtrResourceGroup.WrkCtrId;
        }

        return wrkCtrResourceCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextActiveForResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WrkCtrResourceCalendar</c> table.
    /// </summary>
    /// <param name="_resourceGroup">
    /// The record ID of the resource group in which to find.
    /// </param>
    /// <param name="_date">
    /// A date value that holds the active date for which to search; optional.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WrkCtrResourceCalendar</c> table; otherwise, an empty record.
    /// </returns>
    public static WrkCtrResourceCalendar findNextActiveForResourceGroup(
        WrkCtrResourceGroupRefRecId _resourceGroup,
        date                        _date       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        boolean                     _forUpdate  = false)
    {
        WrkCtrResourceCalendar wrkCtrResourceCalendar;
        WrkCtrResourceGroup    wrkCtrResourceGroup;
        date minSearchDate = dateNull();
        date maxSearchDate = maxDate();

        if (_resourceGroup)
        {
            wrkCtrResourceCalendar.selectForUpdate(_forUpdate);

            select firstonly validtimestate(minSearchDate,maxSearchDate) wrkCtrResourceCalendar
                order by ValidFrom
                where wrkCtrResourceCalendar.ValidFrom > _date
                exists join wrkCtrResourceGroup
                    where wrkCtrResourceGroup.recId == _resourceGroup
                    &&    wrkCtrResourceCalendar.WrkCtrId == wrkCtrResourceGroup.WrkCtrId;
        }

        return wrkCtrResourceCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeResourceCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the calendar for a resource or resource group on a specific date by changing, splitting, or merging the
    /// existing <c>WrkCtrResourceCalendar</c> records.
    /// </summary>
    /// <param name="_wrkCtrId">
    /// The record ID of the resource for which to change the calendar.
    /// </param>
    /// <param name="_date">
    /// The date for which to change the calendar.
    /// </param>
    /// <param name="_newCalendarId">
    /// The ID of the new calendar to be applied.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// No existing record on the date could be found.
    /// </exception>
    public static void changeResourceCalendar(WrkCtrIdBase  _wrkCtrId,
                                              date          _date,
                                              CalendarId    _newCalendarId)
    {
        WrkCtrResourceCalendar wrkCtrResourceCalendar;
        WrkCtrResourceCalendar wrkCtrResourceCalendarPrevious;
        WrkCtrResourceCalendar wrkCtrResourceCalendarNext;
        date                   previousDate   = _date - 1;
        date                   nextDate       = _date + 1;

        // Select the record valid at the change date
        select forupdate firstonly validTimeState(_date) wrkCtrResourceCalendar
            where wrkCtrResourceCalendar.WrkCtrId == _wrkCtrId;

        if (!wrkCtrResourceCalendar.RecId)
        {
            throw error("@SYS301744");
        }

        if (wrkCtrResourceCalendar.CalendarId == _newCalendarId)
        {
            // Nothing to change
            return;
        }

        if (wrkCtrResourceCalendar.ValidFrom == _date)
        {
            // Find previous adjesant record where all fields match the current after the change of calendar
            select forupdate firstonly validTimeState(previousDate) wrkCtrResourceCalendarPrevious
                where wrkCtrResourceCalendarPrevious.WrkCtrId       == wrkCtrResourceCalendar.WrkCtrId
                   && wrkCtrResourceCalendarPrevious.CalendarId     == _newCalendarId
                   && wrkCtrResourceCalendarPrevious.ValidTo        == previousDate;
        }

        if (wrkCtrResourceCalendar.ValidTo == _date)
        {
            // Find next adjesant record where all fields match the current after the change of calendar
            select forupdate firstonly validTimeState(nextDate) wrkCtrResourceCalendarNext
                where wrkCtrResourceCalendarNext.WrkCtrId           == wrkCtrResourceCalendar.WrkCtrId
                   && wrkCtrResourceCalendarNext.CalendarId         == _newCalendarId
                   && wrkCtrResourceCalendarNext.ValidFrom          == nextDate;
        }

        wrkCtrResourceCalendar.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

        ttsbegin;

        if (wrkCtrResourceCalendarPrevious.RecId || wrkCtrResourceCalendarNext.RecId)
        {
            wrkCtrResourceCalendarPrevious.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
            wrkCtrResourceCalendarNext.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

            if (wrkCtrResourceCalendarPrevious.RecId && wrkCtrResourceCalendarNext.RecId)
            {
                // Merge all by deleting the current and next and adjusting the previous
                wrkCtrResourceCalendarPrevious.ValidTo = wrkCtrResourceCalendarNext.ValidTo;

                wrkCtrResourceCalendar.delete();
                wrkCtrResourceCalendarNext.delete();

                wrkCtrResourceCalendarPrevious.update();
            }
            else
            {
                if (wrkCtrResourceCalendarPrevious.RecId)
                {
                    // Adjust previous and current

                    if (wrkCtrResourceCalendar.ValidTo == _date)
                    {
                        // Remove current record if not needed anymore
                        wrkCtrResourceCalendar.delete();
                    }
                    else
                    {
                        wrkCtrResourceCalendar.ValidFrom = _date + 1;
                        wrkCtrResourceCalendar.update();
                    }

                    wrkCtrResourceCalendarPrevious.ValidTo = _date;
                    wrkCtrResourceCalendarPrevious.update();
                }
                else
                {
                    // Adjust current and next

                    if (wrkCtrResourceCalendar.ValidFrom == _date)
                    {
                        // Remove current record if not needed anymore
                        wrkCtrResourceCalendar.delete();
                    }
                    else
                    {
                        wrkCtrResourceCalendar.ValidTo = _date - 1;
                        wrkCtrResourceCalendar.update();
                    }

                    wrkCtrResourceCalendarNext.ValidFrom = _date;
                    wrkCtrResourceCalendarNext.update();
                }
            }
        }
        else
        {
            if (wrkCtrResourceCalendar.ValidFrom == _date && wrkCtrResourceCalendar.ValidTo == _date)
            {
                // Change the calendar only on the current record
                wrkCtrResourceCalendar.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                wrkCtrResourceCalendar.CalendarId = _newCalendarId;
                wrkCtrResourceCalendar.doUpdate();
            }
            else
            {
                // Split into two or three intervals
                WrkCtrResourceCalendar::splitAndChangeCalendar(wrkCtrResourceCalendar, _date, _date, _newCalendarId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitAndChangeCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits an existing <c>WrkCtrResourceCalendar</c> record into two or three date intervals and
    /// changes the <c>CalendarId</c> value on the middle interval.
    /// </summary>
    /// <param name="_wrkCtrResourceCalendar">
    /// The <c>WrkCtrResourceCalendar</c> record for which change the calendar.
    /// </param>
    /// <param name="_fromDate">
    /// The inclusive start date of the interval.
    /// </param>
    /// <param name="_toDate">
    /// The inclusive end date of the interval.
    /// </param>
    /// <param name="_calendarId">
    /// The <c>CalendarId</c> value to set for the interval.
    /// </param>
    public static void splitAndChangeCalendar(  WrkCtrResourceCalendar  _wrkCtrResourceCalendar,
                                                date                    _fromDate,
                                                date                    _toDate,
                                                CalendarId              _calendarId)
    {
        WrkCtrResourceCalendar      wrkCtrResourceCalendarPre;
        WrkCtrResourceCalendar      wrkCtrResourceCalendarPost;
        boolean                     insertPre = false;
        boolean                     insertPost = false;

        ttsbegin;

        if (_fromDate > _wrkCtrResourceCalendar.ValidFrom)
        {
            //Compose the record prior to the new interval
            //No insertion is done yet to avoid overlapping records
            wrkCtrResourceCalendarPre.data(_wrkCtrResourceCalendar);
            wrkCtrResourceCalendarPre.ValidTo = _fromDate - 1;
            insertPre = true;
        }

        if (_toDate < _wrkCtrResourceCalendar.ValidTo)
        {
            //Compose the record post the new interval
            //No insertion is done yet to avoid overlapping records
            wrkCtrResourceCalendarPost.data(_wrkCtrResourceCalendar);
            wrkCtrResourceCalendarPost.ValidFrom = _toDate + 1;
            insertPost = true;
        }

        //Update the ValidFrom of the found record and insert the pre-record
        _wrkCtrResourceCalendar.ValidFrom = _fromDate;
        _wrkCtrResourceCalendar.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
        _wrkCtrResourceCalendar.update();

        if (insertPre)
        {
            wrkCtrResourceCalendarPre.insert();
        }

        // Update the ValidTo of the found record and insert the post-record
        _wrkCtrResourceCalendar.ValidTo = _toDate;
        _wrkCtrResourceCalendar.CalendarId = _calendarId;
        _wrkCtrResourceCalendar.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
        _wrkCtrResourceCalendar.update();

        if (insertPost)
        {
            wrkCtrResourceCalendarPost.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>ValidFrom</c> date based on the <c>ValueTo</c> field of the previous found records having the same resource.
    /// </summary>
    public void initFromResource()
    {
        WrkCtrResourceCalendar  wrkCtrResourceCalendar;
        date                    minSearchDate = dateNull();
        date                    maxSearchDate = maxDate();
        date                    todaysDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (this.WrkCtrId)
        {
            select validtimestate(minSearchDate, maxSearchDate) maxof(ValidTo) from wrkCtrResourceCalendar
                where wrkCtrResourceCalendar.WrkCtrId == this.WrkCtrId;

            if (wrkCtrResourceCalendar.ValidTo >= todaysDate && wrkCtrResourceCalendar.ValidTo < maxDate())
            {
                this.ValidFrom = wrkCtrResourceCalendar.ValidTo + 1;
            }
            else
            {
                this.ValidFrom = todaysDate;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WrkCtr</ConfigurationKey>
	<DeveloperDocumentation>@SCM:ResourceCalendarAssignmentDevDoc</DeveloperDocumentation>
	<FormRef>WrkCtrResourceGroup</FormRef>
	<Label>@SCM:ResourceCalendarAssignment</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>WrkCtrId</TitleField1>
	<TitleField2>CalendarId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ResourceCalendarIdx</ClusteredIndex>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>ResourceCalendarIdx</ReplacementKey>
	<ValidTimeStateFieldType>Date</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calendar</Name>
			<Label>@SYS80390</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WrkCtrId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WrkCtrIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalendarId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CalendarId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ResourceCalendarIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<ValidTimeStateMode>Gap</ValidTimeStateMode>
			<Fields>
				<AxTableIndexField>
					<DataField>WrkCtrId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkCalendarTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CalendarId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Calendar</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS11839</EntityRelationshipRole>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WorkCalendarTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Calendar</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ResourceGroupCalendarAssociation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>CalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CalendarIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS10597</EntityRelationshipRole>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Resource</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ResourceCalendarAssociation</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>WrkCtrId</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>WrkCtrIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>