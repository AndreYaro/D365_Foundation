<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrResourceGroupResource</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WrkCtrResourceGroupResource extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>ValidFrom</c> date based on the <c>ValueTo</c> field of the previous records found
    ///    having the same resource.
    /// </summary>
    public void initFromResource()
    {
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;
        date                        minSearchDate = dateNull();
        date                        maxSearchDate = maxDate();
        date                        todaysDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (this.WrkCtrId)
        {
            select validtimestate(minSearchDate, maxSearchDate) maxof(ValidTo) from wrkCtrResourceGroupResource
                where wrkCtrResourceGroupResource.WrkCtrId              == this.WrkCtrId;

            if (wrkCtrResourceGroupResource.ValidTo >= todaysDate && wrkCtrResourceGroupResource.ValidTo < maxDate())
            {
                this.ValidFrom = wrkCtrResourceGroupResource.ValidTo + 1;
            }
            else
            {
                this.ValidFrom = todaysDate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inputInventLocationIdResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the input warehouse from the resource group.
    /// </summary>
    /// <returns>
    /// The Id of the input warehouse from the resource group.
    /// </returns>
    public display InventLocationIdInput inputInventLocationIdResourceGroup()
    {
        InventLocationIdInput   inventLocationId;

        if (this.ResourceGroup)
        {
            inventLocationId = WrkCtrResourceGroup::find(this.ResourceGroup).inputInventLocationIdFallback();
        }

        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputInventLocationIdResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the output warehouse from the resource group.
    /// </summary>
    /// <returns>The output warehouse for the resource group.</returns>
    public display InventLocationIdOutput outputInventLocationIdResourceGroup()
    {
        InventLocationIdOutput   inventLocationId;

        if (this.ResourceGroup)
        {
            inventLocationId = WrkCtrResourceGroup::find(this.ResourceGroup).outputInventLocationIdFallback();
        }

        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WrkCtrResourceGroupResource, ResourceGroup):
                this.InputInventLocationId  = '';
                this.InputWMSLocationId     = '';
                this.OutputInventLocationId = '';
                this.OutputWMSLocationId    = '';
                break;

            case fieldNum(WrkCtrResourceGroupResource, WrkCtrId):
                this.OutputInventLocationId = this.wrkCtrResourceGroup().OutputInventLocationId;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        if (FormDataUtil::isFormDataSource(this))
        {
            Box::infoOnce("@SYS133105","@SYS133106", FormDataUtil::getFormDataSource(this).formRun().name());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WrkCtrResourceGroupResource,ValidTo):
                if ( ret )
                {
                    ret = DateEffectivenessCheck::validateDateRangeRecord(this);
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean     callSuper   = true;
        boolean     ret         = true;

        // The WMS locations requires special validations as they should be validated against the
        // warehouse from resource group
        switch (_fieldName)
        {
            case fieldStr(WrkCtrResourceGroup, InputWMSLocationId):
                if (WMSLocation::exist(this.InputWMSLocationId, this.inputInventLocationIdResourceGroup()))
                {
                    callSuper = false;
                }
                break;
            
            case fieldStr(WrkCtrResourceGroupResource, OutputWMSLocationId):
                if (WMSLocation::exist(this.OutputWMSLocationId, this.outputInventLocationIdResourceGroup()))
                {
                    callSuper = false;
                }
                if (this.OutputInventLocationId != ''
                 && this.OutputWMSLocationId    != ''
                 && !WMSLocation::find(this.OutputWMSLocationId, this.OutputInventLocationId).checkAllowedAsOutputLocation())
                {
                    ret = false;
                }
                break;                
        }

        if (callSuper)
        {
            ret = super(_fieldName, _arrayIndex);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {

        boolean ret = super();

        InventSiteId groupSiteId = WrkCtrResourceGroup::find(this.ResourceGroup).SiteId;

        if (ret && this.InputInventLocationId)
        {
            if (InventLocation::find(this.InputInventLocationId).InventSiteId != groupSiteId)
            {
                ret = checkFailed("@SYS133107");
            }
        }

        if (ret && this.OutputInventLocationId)
        {
            if (InventLocation::find(this.OutputInventLocationId).InventSiteId != groupSiteId)
            {
                ret = checkFailed("@WAX:Error_ResourceMemberOutputLocationDoesNotMatchSite_Label");
            }
        }

        WrkCtrTable wrkCtrTableThis = WrkCtrTable::find(this.WrkCtrId);

        if (ret && (!this.RecId || this.WrkCtrId != this.orig().WrkCtrId))
        {
            // Validate that the resource group only contains resources with the same vendor

            WrkCtrResourceGroupResource wrkCtrResourceGroupResource;
            WrkCtrTable                 wrkCtrTableExisting;
            date                        fromDate    = this.ValidFrom;
            date                        toDate      = this.ValidTo;

            select firstonly validTimeState(fromDate, toDate) RecId, WrkCtrType, VendId
                    from wrkCtrTableExisting
                exists join wrkCtrResourceGroupResource
                    where wrkCtrResourceGroupResource.WrkCtrId      == wrkCtrTableExisting.WrkCtrId
                       && wrkCtrResourceGroupResource.ResourceGroup == this.ResourceGroup;

            if (wrkCtrTableExisting.RecId)
            {
                if (wrkCtrTableExisting.WrkCtrType == WrkCtrType::Vendor)
                {
                    if (wrkCtrTableThis.WrkCtrType == WrkCtrType::Vendor
                        && wrkCtrTableExisting.VendId != wrkCtrTableThis.VendId)
                    {
                        ret = checkFailed("@SYS314925");
                    }
                    else if (wrkCtrTableThis.WrkCtrType != WrkCtrType::Vendor)
                    {
                        ret = checkFailed("@SYS314926");
                    }
                }
                else
                {
                    if (wrkCtrTableThis.WrkCtrType == WrkCtrType::Vendor)
                    {
                        ret = checkFailed("@SYS314927");
                    }
                }
            }
        }

        if (ret && wrkCtrTableThis.WrkCtrType == WrkCtrType::Personnel
                && (!this.RecId || this.ValidFrom != this.orig().ValidFrom || this.ValidTo != this.orig().ValidTo)
                && (wrkCtrTableThis.Worker != 0))
        // a worker resource is associated
        {
            if (!HcmWorker::find(wrkCtrTableThis.Worker).isEmployedInPeriod(CompanyInfo::findDataArea(this.company()).RecId,
                                                                            this.validFromDateTime(),
                                                                            this.validToDateTime()))
            {
                ret = checkFailed("@SYS326775");
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>warnChangingOutputImpact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Warns the user if the output location or warehouse is changed.
    /// </summary>
    /// <param name = "_valid">Determines if the changed record is valid.</param>
    /// <param name = "_dataSourceName">The name of the data source that will own the warning.</param>
    public void warnChangingOutputImpact(
        boolean _valid,
        str     _dataSourceName)
    {
        if (_valid
         && (this.InputWMSLocationId     != this.orig().InputWMSlocationId
         ||  this.OutputWMSLocationId    != this.orig().OutputWMSLocationId))
        {
            Box::infoOnce("@WAX:Warning_ChangingOutputLocation_Label", "@WAX:Warning_SecondaryMessageChangingOutputLocation_Label", _dataSourceName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validFromDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the UTC value of a valid from date.
    /// </summary>
    /// <returns>
    /// The UTC value of a valid from date.
    /// </returns>
    private utcdatetime validFromDateTime()
    {
        if (this.ValidFrom == dateNull())
        {
            return DateTimeUtil::minValue();
        }
        else
        {
            return DateTimeUtil::newDateTime(this.ValidFrom, 0, this.wrkCtrResourceGroup().timeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validToDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the UTC value of a valid to date.
    /// </summary>
    /// <returns>
    /// The UTC value of a valid to date.
    /// </returns>
    private utcdatetime validToDateTime()
    {
        #TimeConstants
        if (this.ValidTo == maxDate())
        {
            return DateTimeUtil::maxValue();
        }
        else
        {
            return DateTimeUtil::newDateTime(this.ValidTo, #secondsPerDay - 1, this.wrkCtrResourceGroup().timeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrkCtrName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the resource.
    /// </summary>
    /// <returns>
    ///    The name of the resource.
    /// </returns>
    display WrkCtrName wrkCtrName()
    {
        return WrkCtrTable::find(this.WrkCtrId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrkCtrResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the resource group record to which a membership is associated.
    /// </summary>
    /// <returns>
    /// The resource group record to which the membership is associated.
    /// </returns>
    public WrkCtrResourceGroup wrkCtrResourceGroup()
    {
        WrkCtrResourceGroup wrkCtrResourceGroup;

        if (this.ResourceGroup)
        {
            wrkCtrResourceGroup = WrkCtrResourceGroup::find(this.ResourceGroup);
        }

        return wrkCtrResourceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExistingWrkCtrTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the resource referenced in the current resource group to resource relationship. Throws an error if the referenced resource does not exist.
    /// </summary>
    internal WrkCtrTable findExistingWrkCtrTable()
    {
        var wrkCtrTable = WrkCtrTable::find(this.WrkCtrId);
        
        if (!wrkCtrTable.WrkCtrId)
        {
            throw error(strFmt("@SCMPlanning:WrkCtrResourceGroupResourceReferencesNotExistingResourceError",
                this.wrkCtrResourceGroup().WrkCtrId,
                this.WrkCtrId));
        }

        return wrkCtrTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResourceGroupResourceNoThrow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns a resource to a resource group and catches any error that might occur in the validation or
    ///    insertion of the record.
    /// </summary>
    /// <param name="_wrkCtrId">
    ///    The ID of the resource for which to create a membership.
    /// </param>
    /// <param name="_wrkCtrResourceGroup">
    ///    The resource group record of which the resource is a member.
    /// </param>
    /// <param name="_validFrom">
    ///    The date at which the membership is effective.
    /// </param>
    /// <param name="_validTo">
    ///    The date at which the membership expires.
    /// </param>
    public static void addResourceGroupResourceNoThrow(WrkCtrId            _wrkCtrId,
                                                       WrkCtrResourceGroup _wrkCtrResourceGroup,
                                                       validFromDate       _validFrom,
                                                       validToDate         _validTo)
    {
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;

        setPrefix(strFmt("@SYS313239", _wrkCtrId, _wrkCtrResourceGroup.WrkCtrId));

        try
        {
            ttsbegin;

            wrkCtrResourceGroupResource.initValue();
            wrkCtrResourceGroupResource.WrkCtrId = _wrkCtrId;
            wrkCtrResourceGroupResource.ResourceGroup = _wrkCtrResourceGroup.RecId;
            wrkCtrResourceGroupResource.ValidFrom = _validFrom;
            wrkCtrResourceGroupResource.ValidTo = _validTo;

            if (wrkCtrResourceGroupResource.validateWrite())
            {
                wrkCtrResourceGroupResource.insert();
            }

            ttscommit;
        }
        catch
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceGroupMembers</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the record from the <c>WrkCtrResourceGroupResource</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>RecId</c> field of the resource group to find.
    /// </param>
    /// <param name="_fromDate">
    ///    The date to start from when the resource belongs to the resource group; optional.
    /// </param>
    /// <param name="_toDate">
    ///    The end date to when the resource belongs to the resource group; optional.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>WrkCtrResourceGroupResource</c> table; otherwise, an empty record.
    /// </returns>
    [SuppressBPWarningAttribute('BPErrorSelectUsingFirstOnly', 'The return type of the method of the method is a buffer containing multiple records')]
    public static WrkCtrResourceGroupResource resourceGroupMembers(
        recId       _recId,
        date        _fromDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        date        _toDate     = _fromDate,
        boolean     _forUpdate  = false)
    {
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;

        wrkCtrResourceGroupResource.selectForUpdate(_forUpdate);

        select validTimeState(_fromDate, _toDate) wrkCtrResourceGroupResource
        where            wrkCtrResourceGroupResource.ResourceGroup          == _recId;

        return wrkCtrResourceGroupResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
                [fieldNum(WrkCtrResourceGroupResource, InputInventLocationId), [fieldNum(WrkCtrResourceGroupResource, InputWMSLocationId)]],
                [fieldNum(WrkCtrResourceGroupResource, OutputInventLocationId), [fieldNum(WrkCtrResourceGroupResource, OutputWMSLocationId)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WrkCtrResourceGroupResource, InputInventLocationId):
                if (this.InputWMSLocationId == '')
                {
                    this.InputInventLocationId = '';
                }
                else
                {
                    this.InputInventLocationId = this.inputInventLocationIdResourceGroup();
                }
                break;

            case fieldNum(WrkCtrResourceGroupResource, OutputInventLocationId):
                if (this.OutputWMSLocationId == '')
                {
                    this.OutputInventLocationId = '';
                }
                else
                {
                    this.OutputInventLocationId = this.outputInventLocationIdResourceGroup();
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WrkCtr</ConfigurationKey>
	<DeveloperDocumentation>@SYS133269</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>WrkCtrResourceGroup</FormRef>
	<Label>@SYS133094</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>WrkCtrId</TitleField1>
	<TitleField2>ValidFrom</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>ResourceGroupResourceIdx</ReplacementKey>
	<ValidTimeStateFieldType>Date</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ResourceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InputInventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InputWMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutputInventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutputWMSLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Resource</Name>
			<Label>@SYS10597</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InputWMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutputWMSLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ResourceGroup</Name>
			<Label>@SYS15433</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ResourceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InputWMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutputWMSLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalendarId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>CalendarId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InputInventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationIdInput</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InputWMSLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationIdInput</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrResourceGroupRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WrkCtrId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WrkCtrId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OutputInventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationIdOutput</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS133102</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OutputWMSLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationIdOutput</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ResourceGroupResourceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<ValidTimeStateMode>Gap</ValidTimeStateMode>
			<Fields>
				<AxTableIndexField>
					<DataField>WrkCtrId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ResourceGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InputInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InputWarehouse</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ResourceGroupMembership</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InputInventLocationId</Name>
					<Field>InputInventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InputWMSLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InputLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ResourceGroupMembership</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InputWMSLocationId</Name>
					<Field>InputWMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InputInventLocationId</Name>
					<Field>InputInventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>LocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Resource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ResourceGroupMembership</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WrkCtrId</Name>
					<Field>WrkCtrId</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsIndividualResource_Extern</Name>
					<RelatedField>IsIndividualResource</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>WrkCtrIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ResourceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrResourceGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ResourceGroup</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ResourceGroupMembership</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceGroup</Name>
					<Field>ResourceGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OutputInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OutputWarehouse</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ResourceGroupMembership</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OutputInventLocationId</Name>
					<Field>OutputInventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OutputWMSLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OutputLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ResourceGroupMembership</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OutputWMSLocationId</Name>
					<Field>OutputWMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OutputInventLocationId</Name>
					<Field>OutputInventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>