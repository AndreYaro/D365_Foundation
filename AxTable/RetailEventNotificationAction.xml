<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEventNotificationAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

public class RetailEventNotificationAction extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>creditCardProcessCompletion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert payment process completion notification action.
    /// </summary>
    /// <param name="processSucceeded">
    /// Indicates if the process succeeded.
    /// </param>
    /// <param name="errors">
    /// Object of <c>CreditCardPaymentErrors</c>.
    /// </param>
    /// <param name="operation">
    /// Credit card process operation. 
    /// </param>
    /// <param name="isAuthOperation">
    /// Indicate if this is an Auth operation.
    /// </param>
    /// <param name="salesOrder">
    /// Object of <c>SalesTable</c>.
    /// </param>
    public static void creditCardProcessCompletion(
                            boolean processSucceeded,
                            CreditCardPaymentErrors errors,
                            CreditCardOperation operation,
                            boolean isAuthOperation,
                            SalesTable  salesOrder)
    {
        container   screenCodes;
        Set         setScreenCodes;
        int         i;

        // Send email notification if credit card auth failed and sales order is from retail.
        if (!processSucceeded && isAuthOperation)
        {
            if (errors.count() == 0)
            {
                // if no error code is provided, unconditionally send email notification of payment failure.
                RetailEventNotificationAction::insertRetailOENAction(RetailEventNotificationType::PaymentFailed, salesOrder.RecId, salesOrder);
            }
            else
            {
                // Initialize system error code list.
                screenCodes = [3, 1, 12, 20002, 22001, 22144, 24001, 24002, 24003, 24004, 24005, 24006, 24007, 24008, 25000];
                setScreenCodes = new Set(Types::Integer);

                setScreenCodes = Set::create(screenCodes);

                for (i = 1; i <= errors.count(); i++)
                {
                    if (!setScreenCodes.in(errors.getError(i).parmCode()))
                    {
                        // if there is any non-system error, send email notification.
                        RetailEventNotificationAction::insertRetailOENAction(RetailEventNotificationType::PaymentFailed, salesOrder.RecId, salesOrder);
                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRetailOENAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert any notification action.
    /// </summary>
    /// <param name="enType">
    /// email notification type.
    /// </param>
    /// <param name="refRecId">
    /// RecId of <c>Common</c>.
    /// </param>
    /// <param name="salesOrder">
    /// Object of <c>SalesTable</c>.
    /// </param>
    public static void insertRetailOENAction(RetailEventNotificationType enType, RefRecId refRecId, SalesTable salesOrder)
    {
        RetailEventNotificationAction actions;
        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
        boolean isInserted = false;

        if (RetailOENInfo::ShouldSendNotificationForSalesOrder(salesOrder)
            || (salesOrder.mcrIsCallCenter()
                && RetailOENInfo::mcrShouldSendNotificationForSalesOrder(salesOrder)
                && RetailEventNotificationAction::mcrIsRetailNotificationType(enType, salesOrder)))
        {
            if (enType == RetailEventNotificationType::OrderCancellation)
            {
                RetailEventNotificationAction retailEventNotificationAction;

                delete_from retailEventNotificationAction
                    where retailEventNotificationAction.RefRecId == refRecId;
            }

            if (!RetailEventNotificationInsertOnlyActiveFlight::instance().isEnabled() ||
                RetailEventNotificationAction::hasActiveSettingForNotificationType(enType))
            {
                actions.clear();
                actions.EventNotificationType = enType;
                actions.RefRecId = refRecId;
                actions.insert();
                isInserted = true;
            }
        }

        eventSource.EventWriteInsertOrderEmailNotificationAction(enType, refRecId, salesOrder.RecId, isInserted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRetailENAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert notification action.
    /// </summary>
    /// <param name="_enType">
    /// email notification type.
    /// </param>
    /// <param name="_refRecId">
    /// RecId of <c>Common</c>.
    /// </param>
    public static void insertRetailENAction(RetailEventNotificationType _enType, RefRecId _refRecId)
    {
        RetailEventNotificationAction   actions;
        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
        boolean isInserted = false;

        if (!RetailEventNotificationInsertOnlyActiveFlight::instance().isEnabled() ||
            RetailEventNotificationAction::hasActiveSettingForNotificationType(_enType))
        {
            actions.clear();
            actions.EventNotificationType = _enType;
            actions.RefRecId = _refRecId;
            actions.insert();
            isInserted = true;
        }

        eventSource.EventWriteInsertEmailNotificationAction(_enType, _refRecId, isInserted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsRetailNotificationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies a MCR <c>RetailEventNotificationType</c>.
    /// </summary>
    /// <param name="_enType">
    /// The event notification type.
    /// </param>
    /// <param name="_salesTable">
    /// The sales order for which the notification needs to be sent.
    /// </param>
    /// <returns>
    /// A true if the notification type is an MCR notification type; otherwise, false.
    /// </returns>
    public static boolean mcrIsRetailNotificationType(RetailEventNotificationType _enType,
                                                      SalesTable _salesTable)
    {
        switch (_enType)
        {
            case RetailEventNotificationType::MCRIssueGiftCard:
            case RetailEventNotificationType::MCRInstallmentBill:
            case RetailEventNotificationType::MCRInstallmentCharge:
            case RetailEventNotificationType::MCRContinuityBill:
            case RetailEventNotificationType::MCRContinuityCharge:
            case RetailEventNotificationType::MCRSalesOrderBill:
            case RetailEventNotificationType::MCRFTCFirstNotice:
            case RetailEventNotificationType::MCRFTCSecondNotice:
            case RetailEventNotificationType::MCRFTCCancellationNotice:
            case RetailEventNotificationType::OrderCreation:
            case RetailEventNotificationType::OrderConfirmation:
            case RetailEventNotificationType::OrderCancellation:
            case RetailEventNotificationType::OrderInvoiced:
            case RetailEventNotificationType::ReplacementOrderCreation:
            case RetailEventNotificationType::PickingComplete:
            case RetailEventNotificationType::PackingComplete:
                return true;
            case RetailEventNotificationType::PaymentFailed:
                return (MCRCustPaymTable::findByRefRecIDRefTableID(_salesTable.RecId, _salesTable.TableId).RecId > 0);
            case RetailEventNotificationType::PasswordReset:
            case RetailEventNotificationType::Shipment:
                return false;
            case RetailEventNotificationType::CustomerCreation:
                return RetailCreateCustomerEmailNotificationCheckToggle::instance().isEnabled();
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSettingLineSupportedForNotificationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies whether a <c>RetailEventNotificationType</c> supports <c>RetailEventNotificationSettingLine</c>.
    /// </summary>
    /// <param name = "_enType">The event notification type.</param>
    /// <returns>True if the type supports setting lines; otherwise false.</returns>
    public static boolean isSettingLineSupportedForNotificationType(RetailEventNotificationType _enType)
    {
        switch (_enType)
        {
            case RetailEventNotificationType::OrderCreation:
            case RetailEventNotificationType::OrderConfirmation:
            case RetailEventNotificationType::PickingComplete:
            case RetailEventNotificationType::PackingComplete:
            case RetailEventNotificationType::PaymentFailed:
            case RetailEventNotificationType::ReplacementOrderCreation:
            case RetailEventNotificationType::OrderCancellation:
            case RetailEventNotificationType::OrderInvoiced:
                return true;
            case RetailEventNotificationType::OrderReadyForPickup:
                return RetailMultiplePickupDeliveryModeFeatureExposure::isEnabled();
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingSlipCompletion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert packing slip completion notification action.
    /// </summary>
    /// <param name="packingSlipRecId">
    /// RecId of <c>CustPackingSlipJour</c>.
    /// </param>
    public static void packingSlipCompletion(CustPackingSlipJourRecId  packingSlipRecId)
    {
        if (RetailEventNotificationAction::shouldCreatePackingSlipCompletionNotification(packingSlipRecId))
        {
            RetailEventNotificationAction::insertRetailOENAction(
                        RetailEventNotificationType::PackingComplete,
                        packingSlipRecId,
                        SalesTable::find(CustPackingSlipJour::findRecId(packingSlipRecId).SalesId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickingListCompletion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert picking list completion notification action.
    /// </summary>
    /// <param name="wmsPickingRoute">
    /// Object of <c>WMSPickingRoute</c>.
    /// </param>
    public static void pickingListCompletion(WMSPickingRoute  wmsPickingRoute)
    {
        if (wmsPickingRoute.TransType == InventTransType::Sales &&
            wmsPickingRoute.ShipmentType == WMSShipmentType::OrderPick)
        {
            RetailEventNotificationAction::insertRetailOENAction(
                    RetailEventNotificationType::PickingComplete,
                    wmsPickingRoute.RecId,
                    SalesTable::find(wmsPickingRoute.TransRefId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerCreationCompletion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert customer creation completion notification action.
    /// </summary>
    /// <param name="_customerRecId">
    /// RecId of <c>CustTable</c>.
    /// </param>
    public static void customerCreationCompletion(RefRecId _customerRecId)
    {
        if (RetailCreateCustomerEmailNotificationCheckToggle::instance().isEnabled())
        {
            RetailEventNotificationAction::insertRetailENAction(
            RetailEventNotificationType::CustomerCreation,
                        _customerRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete records from RetailEventNotificationAction table related to the refRecId.
    /// </summary>
    /// <param name="refRecId">
    /// The recid of the <c>RefRecId</c>.
    /// </param>
    public static void deleteRecords(RefRecId refRecId)
    {
        RetailEventNotificationAction retailEventNotificationAction;

        ttsbegin;
        delete_from retailEventNotificationAction
            where retailEventNotificationAction.RefRecId == refRecId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the event notification action is for shipment.
    /// </summary>
    /// <returns>True if the event notification action is for shipment; otherwise, false.</returns>
    public boolean isForShipment()
    {
        return (this.EventNotificationType == RetailEventNotificationType::Shipment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreatePackingSlipCompletionNotification</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check whether packing slip completion notification should be created.
    /// </summary>
    /// <returns>
    ///     true if packing slip completion notification action can insert; otherwise, false.
    ///</returns>
    protected static boolean shouldCreatePackingSlipCompletionNotification(CustPackingSlipJourRecId packingSlipRecId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches the <c>RetailEventNotificationAction</c> table to find a record by the <c>RefRecId</c>.
    /// </summary>
    /// <param name="_refRecId">
    /// The RecId of the <c>RefRecId</c>.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// First record in the <c>RetailEventNotificationAction</c> table.
    /// </returns>
    public static RetailEventNotificationAction findByRefRecId(RefRecId _refRecId, boolean _forUpdate = false)
    {
        if (!_refRecId)
        {
            return null;
        }

        RetailEventNotificationAction rena;
        rena.selectForUpdate(_forUpdate);

        select firstonly RecId from rena
            where rena.RefRecId == _refRecId;

        return rena;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasActiveSettingForNotificationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the event notification type is enabled or not.
    /// </summary>
    /// <param name="_notificationType">
    /// The Email notification type.
    /// </param>
    /// <returns>True if the event notification action is enabled ; otherwise, false.</returns>
    private static boolean hasActiveSettingForNotificationType(RetailEventNotificationType _notificationType)
    {
        RetailEventNotificationSetting      notificationSetting;

        select firstOnly notificationSetting
                 where notificationSetting.EventNotificationType == _notificationType
                 && notificationSetting.Active;

        return notificationSetting ? true : false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@RET4160041</DeveloperDocumentation>
	<Label>@RET4160045</Label>
	<TitleField1>EventNotificationType</TitleField1>
	<TitleField2>RefRecId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>TransactionsAndOrders</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EventNotificationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@RET609</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EventNotificationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Processed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EventNotificationType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>RetailEventNotificationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Processed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProcessedIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Processed</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>EventNotificationType</Name>
					<Field>EventNotificationType</Field>
					<ValueStr>RetailEventNotificationType::OrderCreation</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>