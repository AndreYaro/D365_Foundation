<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjFundingRuleAllocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjFundingRuleAllocation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(fieldId _fieldIdToCheck)
    {
        ProjFundingSource   projFundingSource;
        boolean             ret = true;

        switch (_fieldIdToCheck)
        {
            case fieldNum(ProjFundingRuleAllocation, AllocationPercentage) :
                if (ret && (this.AllocationPercentage <= 0.00 || this.AllocationPercentage > 100.00))
                {
                   ret = checkFailed(strFmt("@SYS313378", 0.01, 100.0));
                }
                break;

            case fieldNum(ProjFundingRuleAllocation, FundingSource) :
                if (this.FundingSource && !(ProjFundingSource::existContractFundingSource(ProjFundingRule::find(this.FundingRule).ContractId, ProjFundingSource::find(this.FundingSource).FundingSourceId)))
                {
                    ret = checkFailed("@SYS135793");
                }

                // Funding source is of type On-Hold
                if (ret && this.FundingSource)
                {
                    projFundingSource = ProjFundingSource::find(this.FundingSource);
                    if (projFundingSource && projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource)
                    {
                        ret = checkFailed("@SYS319824");
                    }
                }
                break;
        }

        if (ret)
        {
            ret = super(_fieldIdToCheck);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean             ret;

        ret = super();

        if (ret && (this.AllocationPercentage <= 0.00 || this.AllocationPercentage > 100.00))
        {
          ret = checkFailed(strFmt("@SYS313378", 0.01, 100.0));
        }

        if (ret && !this.FundingRule)
        {
            ret = checkFailed("@SYS133255");
        }
        else
        {
            if (ret && !ProjFundingRule::exist(this.FundingRule))
            {
                ret = checkFailed("@SYS133256");
            }
        }

        if (ret && !this.FundingSource)
        {
            ret = checkFailed("@SYS133257");
        }
        else
        {
            // Funding source not associate to contract
            if (ret && !ProjFundingSource::exist(this.FundingSource))
            {
                ret = checkFailed("@SYS133258");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>ProjFundingRuleAllocation</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>ProjFundingRuleAllocation</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        if (_recId)
        {
            return (select projFundingRuleAllocation where projFundingRuleAllocation.RecId == _recId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>ProjFundingRuleAllocation</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>ProjFundingRuleAllocation</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>ProjFundingRuleAllocation</c> table; otherwise, an empty record.
    /// </returns>
    public static ProjFundingRuleAllocation find(recId _recId, boolean _forUpdate = false)
    {
        ProjFundingRuleAllocation   projFundingRuleAllocation = null;

        projFundingRuleAllocation.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select projFundingRuleAllocation where projFundingRuleAllocation.RecId == _recId;
        }

        return projFundingRuleAllocation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS133290</DeveloperDocumentation>
	<Label>@SYS133289</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>FundingRule</TitleField1>
	<TitleField2>FundingSource</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProjectManagementAndAccounting</Modules>
	<ReplacementKey>RuleAndFundingSourceIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundingRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundingSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocationPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocateRounding</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundingRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocateRounding</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundingSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocationPercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundingSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundingRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36443</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundingRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundingSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocationPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocateRounding</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllocateRounding</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS134466</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AllocationPercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjAllocationPercentage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FundingRule</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FundingSource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjFundingSourceRefId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RuleAndFundingSourceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FundingSource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FundingRule</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FundingRule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingRule</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjFundingRule</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjFundingRule_ProjFundingRuleAllocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FundingRule</Name>
					<Field>FundingRule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FundingSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjFundingSource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingSource_ProjFundingRuleAllocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FundingSource</Name>
					<Field>FundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>