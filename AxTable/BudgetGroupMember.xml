<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetGroupMember</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetGroupMember extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid = super();

        isValid = isValid && BudgetControlConfigurationManager::validateConfigurationEditPermitted(BudgetGroup::find(this.BudgetGroup).BudgetControlConfiguration);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = super();

        isValid = isValid && BudgetControlConfigurationManager::validateConfigurationEditPermitted(BudgetGroup::find(this.BudgetGroup).BudgetControlConfiguration);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record in the <c>BudgetGroupMember</c> table exists; if not, an error
    ///    message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetGroupMember</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!BudgetGroupMember::exist(_recId))
        {
            ret = checkFailed(strfmt(BudgetGroupMember::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>BudgetGroupMember</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetGroupMember</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly RecId from budgetGroupMember
                    where budgetGroupMember.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetGroupMember</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record Id of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetGroupMember</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetGroupMember find(
        RecId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetGroupMember budgetGroupMember;

        budgetGroupMember.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetGroupMember.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetGroupMember
            where budgetGroupMember.RecId == _recId;

        return budgetGroupMember;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBudgetControlConfigurationMemberName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetGroupMember</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetGroupMember</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetGroupMember findByBudgetControlConfigurationMemberName(
        BudgetControlConfigurationRecId _budgetControlConfigurationRecId,
        BudgetGroupMemberName           _memberName,
        boolean                         _forUpdate = false,
        ConcurrencyModel                _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetGroup budgetGroup;
        BudgetGroupMember budgetGroupMember;

        budgetGroupMember.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetGroupMember.concurrencyModel(_concurrencyModel);
        }

        if (_budgetControlConfigurationRecId && _memberName)
        {
            select firstonly budgetGroupMember
            where budgetGroupMember.Name == _memberName
            exists join budgetGroup
                where budgetGroup.RecId == budgetGroupMember.BudgetGroup
                    && budgetGroup.BudgetControlConfiguration == _budgetControlConfigurationRecId;
        }

        return budgetGroupMember;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTopBudgetGroupMember</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the top member of the specified budget group.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of budget group.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetGroupMember</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetGroupMember findTopBudgetGroupMember(
        RecId _budgetGroupRecId)
    {
        BudgetGroupMember budgetGroupMember;

        if (_budgetGroupRecId != 0)
        {
            container cachedResult = BudgetCache::getValue(BudgetCacheScope::TopBudgetGroupMember, [_budgetGroupRecId]);

            if (cachedResult == conNull())
            {
                select firstonly budgetGroupMember
                    where budgetGroupMember.BudgetGroup == _budgetGroupRecId &&
                          budgetGroupMember.ParentBudgetGroupMember == 0;

                BudgetCache::insertValue(BudgetCacheScope::TopBudgetGroupMember, [_budgetGroupRecId], [budgetGroupMember.RecId]);
            }
            else
            {
                recId cachedTopMemberRecId;

                [cachedTopMemberRecId] = cachedResult;

                // Perform the lookup by the top member that was cached for the budget group.
                // This will hit the kernel record cache and avoid a database read.
                select firstOnly budgetGroupMember
                    where budgetGroupMember.RecId == cachedTopMemberRecId;
            }
        }

        return budgetGroupMember;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isParentBudgetGroupMember</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified budget group member record is a parent budget group member.
    /// </summary>
    /// <param name="_budgetGroupMemberRecId">
    /// The record ID of the parent <c>BudgetGroupMember</c> record.
    /// </param>
    /// <returns>
    /// true if the specified budget group member is a parent budget group member; otherwise, false.
    /// </returns>
    public static boolean isParentBudgetGroupMember(RecId _budgetGroupMemberRecId)
    {
        boolean isParent;
        BudgetGroupMember childBudgetGroupMember;

        select firstonly RecId from childBudgetGroupMember
            where childBudgetGroupMember.ParentBudgetGroupMember == _budgetGroupMemberRecId;

        if (childBudgetGroupMember)
        {
            isParent = true;
        }

        return isParent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
	<DeveloperDocumentation>@SYS317155</DeveloperDocumentation>
	<FormRef>BudgetControlConfiguration</FormRef>
	<Label>@SYS314451</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Budget</Modules>
	<ReplacementKey>BudgetGroupNameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentBudgetGroupMember</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS35583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS139153</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@SYS321383</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetGroupMemberName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentBudgetGroupMember</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TemporaryBudgetGroupMember</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TemporaryBudgetGroupMemberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TemporaryBudgetGroupMember</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParentBudgetGroupMemberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParentBudgetGroupMember</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BudgetGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BudgetGroupNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BudgetGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetGroup_BudgetGroupMember</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetGroup</Name>
					<Field>BudgetGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ParentBudgetGroupMember</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetGroupMember</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ParentBudgetGroupMember</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ParentBudgetGroupMember_BudgetGroupMember</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentBudgetGroupMember</Name>
					<Field>ParentBudgetGroupMember</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TemporaryBudgetGroupMember</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetGroupMember</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TemporaryBudgetGroupMember</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TemporaryBudgetGroupMember_BudgetGroupMember</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TemporaryBudgetGroupMember</Name>
					<Field>TemporaryBudgetGroupMember</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>