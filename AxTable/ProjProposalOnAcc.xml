<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProposalOnAcc</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjProposalOnAcc extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ProjProposalOnAccDetail projProposalOnAccDetail;
        ProjOnAccTransSale      projOnAccTransSale;

        ttsbegin;

        while select RecId from projProposalOnAccDetail
            where projProposalOnAccDetail.ProposalRefRecId == this.RecId
                join forupdate projOnAccTransSale
                    where projOnAccTransSale.RecId == projProposalOnAccDetail.SaleRefRecId
                        &&   (projOnAccTransSale.TransStatus == ProjTransStatus::InvoiceProposal
                        ||    projOnAccTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
        {
			// Deletes the invoice proposal on-account record and registerd record and re-creates on-account record with sum of invoice proposal amount and registerd amount.
            PSAContractLineItems psaContractLineItems = PSAContractLineItems::find(this.psaContractLineNum);

            if (projOnAccTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
            {
                if (ProjInvoiceCancelProposalDeletion_BR_Flight::instance().isEnabled()
                    && TmpInvoiceCancel_BR::findByProposalId(this.ProposalId))
                {
                    projOnAccTransSale.TransStatus = ProjTransStatus::Invoiced;
                }
                else
                {
                    projOnAccTransSale.TransStatus = ProjTransStatus::MarkedCreditNote;
                }

                projOnAccTransSale.update();
            }
            else if (psaContractLineItems.LineType == PSAContractLineType::Progress)
            {
                AmountCur onAccountAmount = projOnAccTransSale.Amount;
                projOnAccTransSale.selectForUpdate(true);
                projOnAccTransSale.delete();

                ProjOnAccTrans projOnAccTrans;
				ProjOnAccTransSale projOnAccTransSaleLoc;
               
                select firstonly projOnAccTrans 
                    where projOnAccTrans.TransId == this.TransId
						notexists join projOnAccTransSaleLoc 
                            where projOnAccTransSaleLoc.TransId == projOnAccTrans.TransId;
				
				if (projOnAccTrans)
				{
                    PSAContractLineItemsServer::updateUnitsOrPercentProposal(projOnAccTrans.PSAContractLineNum, NoYes::No);
                    projOnAccTrans.selectForUpdate(true);
                    projOnAccTrans.delete();
				}

                ProjOnAccTrans projOnAccTransDelete;
                ProjOnAccTransSale projOnAccTransSaleDelete;

                select firstOnly projOnAccTransDelete
                    where projOnAccTransDelete.PSAContractLineNum == psaContractLineItems.ContractLineNum
                        exists join projOnAccTransSaleDelete
                            where projOnAccTransSaleDelete.TransId == projOnAccTransDelete.TransId
                                && projOnAccTransSaleDelete.TransStatus == ProjTransStatus::Registered;

                if (projOnAccTransDelete)
                {
                    projOnAccTransDelete.selectForUpdate(true);
                    onAccountAmount += projOnAccTransDelete.TotalSalesAmountCur;
                    projOnAccTransDelete.delete();
                }

                ProjOnAccTrans projOnAccTransCreate;
                projOnAccTransCreate.initFromBillingRule(psaContractLineItems);
                ProjOnAccTrans::createOnAccTrans(projOnAccTransCreate, onAccountAmount);
            }
            else
            {
                projOnAccTransSale = this.initProjTransStatus(projOnAccTransSale);

                PSAContractLineItemsServer::updateUnitsOrPercentProposal(this.PSAContractLineNum, NoYes::No);

                projOnAccTransSale.update();
            }
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.markCurrentTaxDocumentTaxStatusDirty(true);
        }
        // </GTE>

        super();

        ProjProposalTranSummariesRefresh::validateAndSetRecalculateTotalsStatusToRequiredIfAppropriate(this.ProposalId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjTransStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the project transaction status.
    /// </summary>
    /// <param name = "_projOnAccTransSale">
    ///     An instance of <c>ProjOnAccTransSale</c> table buffer.
    /// </param>
    /// <returns>
    ///     The initialized buffer of <c>ProjOnAccTransSale</c> table.
    /// </returns>
    protected ProjOnAccTransSale initProjTransStatus(ProjOnAccTransSale _projOnAccTransSale)
    {
        ProjOnAccTransSale projOnAccTransSale = _projOnAccTransSale;
        switch (_projOnAccTransSale.TransStatus)
        {
            case ProjTransStatus::InvoiceProposal    :   projOnAccTransSale.TransStatus = ProjTransStatus::Registered;break;
            case ProjTransStatus::CreditnoteProposal :   projOnAccTransSale.TransStatus = ProjTransStatus::MarkedCreditNote;break;
        }

        return projOnAccTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ProjOnAccTrans  projOnAccTrans = ProjOnAccTrans::find(this.TransId);

        ttsbegin;

        super();

        Docu::copy(projOnAccTrans, this);

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.markCurrentTaxDocumentTaxStatusDirty();
        }
        // </GTE>

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    display AmountCur lineAmount()
    {
        return ProjTrans::newProjProposalOnAcc(this).transTurnover();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark current tax status of <c> ProjProposalOnAcc </c> to dirty
    /// </summary>
    /// <param name="isDelete">
    /// the record is deleted or not
    /// </param>
    internal void markCurrentTaxDocumentTaxStatusDirty(boolean isDelete = false)
    {
        ProjProposalJour               projProposaljour = this.projProposalJour();
        TaxEngineProjOnAcctTransHeader transHeader      = TaxEngineProjOnAcctTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        TaxableDocumentDescriptor      descriptor       = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(transHeader);
        ITaxableDocument               taxableDocument  = TaxableDocumentObject::construct(descriptor);
        ProjProposalOnAcc              projProposalOnAccLoc;

        if (isDelete)
        {
            select firstOnly RecId from projProposalOnAccLoc where projProposaljour.ProposalId == projProposalOnAccLoc.ProposalId;
            if (projProposalOnAccLoc)
            {
                TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
            }
            else
            {
                TaxBusinessService::deleteTaxDocument(taxableDocument);
                TaxEngineProjOnAcctTransHeader::deleteByProjProposalJour(projProposaljour);
            }
        }
        else
        {
            TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTaxDocumentFromOriginalInvoice</Name>
				<Source><![CDATA[
    internal void copyTaxDocumentFromOriginalInvoice()
    {
        // Source
        ProjInvoiceOnAcc projInvoiceOnAcc = this.getLatestProjInvoiceOnAcc();
        ProjInvoiceJour projInvoiceJour = projInvoiceOnAcc.projInvoiceJour();
        TaxEngineProjOnAcctJourHeader headerSource = TaxEngineProjOnAcctJourHeader::findOrCreateByProjInvoiceJour(projInvoiceJour);
        ITaxDocument taxDocumentSource = TaxBusinessService::getTaxDocumentBySource(headerSource.TableId, headerSource.RecId);

        // Target
        ProjProposalJour projProposalJour = this.projProposalJour();
        TaxEngineProjOnAcctTransHeader headerTarget = TaxEngineProjOnAcctTransHeader::findOrCreateByProjProposalJour(projProposalJour);

        TaxBusinessService::copyTaxDocumentForProjectCreditNote(projInvoiceOnAcc, this, taxDocumentSource, headerTarget);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigProjInvoiceJourByProjProposalJourRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original <c>ProjInvoiceJour</c> record for the credit note <c>ProjProposalOnAcc</c> record in the invoice proposal.
    /// </summary>
    /// <param name = "_recId">The record id of <c>ProjProposalJour</c></param>
    /// <returns>The <c>ProjInvoiceJour</c> record.</returns>
    internal static ProjInvoiceJour getOrigProjInvoiceJourByProjProposalJourRecId(RecId _recId)
    {
        ProjInvoiceJour projInvoiceJour;
        ProjProposalJour projProposalJour;
        ProjProposalOnAcc projProposalOnAcc;
        ProjProposalOnAccDetail projProposalOnAccDetail;
        ProjOnAccTransSale projOnAccTransSale;

        // Finds the credit note entry in the invoice proposal.
        select firstonly projProposalOnAcc
            exists join projProposalJour
                where projProposalJour.RecId == _recId
                    && projProposalOnAcc.ProposalId == projProposalJour.ProposalId
            exists join projProposalOnAccDetail
                where projProposalOnAccDetail.ProposalRefRecId == projProposalOnAcc.RecId
            exists join projOnAccTransSale
                where projOnAccTransSale.RecId == projProposalOnAccDetail.SaleRefRecId
                    && projOnAccTransSale.TransStatus == ProjTransStatus::CreditnoteProposal
                    && projOnAccTransSale.TaxAsPerOriginalInvoice_IN == NoYes::Yes;
        if (projProposalOnAcc)
        {
            ProjInvoiceOnAcc projInvoiceOnAcc = projProposalOnAcc.getLatestProjInvoiceOnAcc();
            projInvoiceJour = projInvoiceOnAcc.projInvoiceJour();
        }
        return projInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestProjInvoiceOnAcc</Name>
				<Source><![CDATA[
    private ProjInvoiceOnAcc getLatestProjInvoiceOnAcc()
    {
        ProjProposalOnAcc projProposalOnAcc;
        ProjProposalOnAccDetail projProposalOnAccDetail;
        ProjInvoiceOnAcc projInvoiceOnAcc;
        ProjInvoiceOnAccDetail projInvoiceOnAccDetail;
        ProjOnAccTransSale projOnAccTransSale;
        ProjInvoiceJour projInvoiceJour;

        select firstonly ProjInvoiceId, InvoiceDate from projInvoiceJour
            order by RecId desc
            join projInvoiceOnAcc
                where projInvoiceOnAcc.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                    && projInvoiceOnAcc.InvoiceDate == projInvoiceJour.InvoiceDate
            exists join projInvoiceOnAccDetail
                where projInvoiceOnAccDetail.InvoiceRefRecId == projInvoiceOnAcc.RecId
            exists join projOnAccTransSale
                where projOnAccTransSale.RecId == projInvoiceOnAccDetail.SaleRefRecId
            exists join projProposalOnAccDetail
                where projProposalOnAccDetail.SaleRefRecId == projOnAccTransSale.RecId
            exists join projProposalOnAcc
                where projProposalOnAcc.RecId == projProposalOnAccDetail.ProposalRefRecId
                    && projProposalOnAcc.RecId == this.RecId;

        return ProjInvoiceOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projOnAccTrans</Name>
				<Source><![CDATA[
    public ProjOnAccTrans projOnAccTrans()
    {
        return (ProjOnAccTrans::find(this.TransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalJour</Name>
				<Source><![CDATA[
    public ProjProposalJour projProposalJour()
    {
        return ProjProposalJour::find(this.ProposalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the quantity for this transaction.
    /// </summary>
    /// <returns>
    ///    The quantity for this transaction.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display ProjQty qty()
    {
        return ProjTrans::newProjProposalOnAcc(this).qty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    ///    The sales price for this transaction.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display SalesPrice salesPrice()
    {
        return ProjTrans::newProjProposalOnAcc(this).salesPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    display ProjTransDate transDate()
    {
        return ProjOnAccTrans::find(this.TransId).TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjProposalOnAcc find(ProjOnAccTransId     _transId,
                                        ProjProposalId      _proposalId,
                                        boolean             _forUpdate      = false,
                                        boolean             _forDisplay     = false)
    {
        ProjProposalId      proposalId          = _proposalId;
        ProjProposalOnAcc    projProposalOnAcc    = null;

        projProposalOnAcc.selectForUpdate(_forUpdate);

        if (_transId && proposalId)
        {
            select projProposalOnAcc
                where projProposalOnAcc.TransId      == _transId &&
                      projProposalOnAcc.ProposalId   == proposalId;
        }

        return projProposalOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static ProjProposalOnAcc findRecId(RefRecId _recId, boolean _forUpdate = false)
    {
        ProjProposalOnAcc   projProposalOnAcc = null;

        projProposalOnAcc.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select projProposalOnAcc where projProposalOnAcc.RecId == _recId;
        }

        return projProposalOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProposaleFromTrans</Name>
				<Source><![CDATA[
    public static ProjProposalOnAcc initProposaleFromTrans(ProjOnAccTrans _projOnAccTrans)
    {
        ProjProposalOnAcc   projProposalOnAcc;

        projProposalOnAcc.TransId           = _projOnAccTrans.TransId;
        projProposalOnAcc.TaxGroupId        = _projOnAccTrans.TaxGroupId;
        projProposalOnAcc.TaxItemGroupId    = _projOnAccTrans.TaxItemGroupId;
        projProposalOnAcc.Txt               = _projOnAccTrans.Description;
        projProposalOnAcc.psaContractLineNum = _projOnAccTrans.psaContractLineNum;

        return projProposalOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            ret = ret && TaxGSTHelper_MY::validateProjProposalTransTableWrite(this);
        }
        // </GMY>

        // Validate item sales tax group can only be updated when
        // (1) Project operation integration feature is enabled &&
        // (2) Project invoice proposal status is open
        // (3) Tax calculation service is enabled for project
        // This will catch unqualified update on item sales group from integration bypass UI
        if (!Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Project)
            && (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled() ||
                ProjProposalJour::find(this.ProposalId).LineProperty != ProjLinePropertyCode::Open))
        {
            if (this.orig() && this.orig().TaxItemGroupId != this.TaxItemGroupId)
            {
                ret = checkFailed("@Proj:TaxItemGroupUpdateError");
            }
        }

        if (ret && ProjProposalTranSummariesRefresh::isRecalculateTotalsStatusInProcessState(this.ProposalId))
        {
            ret = checkFailed("@Proj:InvoiceLineWriteErrorDueToRecalculatesTotalStatusInProcess");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124960</DeveloperDocumentation>
	<Label>@SYS55263</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProposalId</TitleField1>
	<TitleField2>TransId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ProposalIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjProposalOnAccDetail</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjProposalOnAccDetail</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProposalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWriteCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice</Name>
			<Label>@SYS100769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EInvoiceAccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderLineReference_NO</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProposalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSAContractLine</Name>
			<Label>@PSA2823</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAContractLineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWriteCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludedTaxPercent_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>salesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SourceInvoice_MY</Name>
			<Label>@SYP4860693</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefInvoiceId_MY</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefInvoiceDate_MY</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice_MX</Name>
			<Label>@SYS341123</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SATProductCode_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EInvoiceAccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceAccountCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IncludedTaxPercent_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IncludedTaxPercent_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProposalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjProposalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAContractLineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAContractLineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupId</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupId</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWriteCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWriteCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjOnAccTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description255</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RefInvoiceDate_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MY</CountryRegionCodes>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYP4860674</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefInvoiceId_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MY</CountryRegionCodes>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<Label>@SYP4860676</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderLineReference_NO</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OrderLineReference_NO</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATProductCode_MX</Name>
			<ExtendedDataType>SATProductCode_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProposalId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProposalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProposalId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>ProjProposalMap_MY</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>RefInvoiceDate_MY</MapField>
					<MapFieldTo>RefInvoiceDate_MY</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RefInvoiceId_MY</MapField>
					<MapFieldTo>RefInvoiceId_MY</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverrideSalesTax</MapField>
					<MapFieldTo>OverrideSalesTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>projOnAccTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124961</EntityRelationshipRole>
			<RelatedTable>ProjOnAccTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransId</Name>
					<SourceEDT>ProjOnAccTransId</SourceEDT>
					<Field>TransId</Field>
					<RelatedField>TransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjProposalJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjProposalJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjProposalJour_1</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProjProposalOnAcc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProposalId</Name>
					<SourceEDT>ProjProposalId</SourceEDT>
					<Field>ProposalId</Field>
					<RelatedField>ProposalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProposalNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PSAContractLineItems</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PSAContractLineItems</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAContractLineNum</Name>
					<SourceEDT>PSAContractLineNum</SourceEDT>
					<Field>PSAContractLineNum</Field>
					<RelatedField>ContractLineNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContractLineNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalOnAcc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupId</Name>
					<SourceEDT>ProjTaxGroup</SourceEDT>
					<Field>TaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalOnAcc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupId</Name>
					<SourceEDT>ProjTaxItemGroup</SourceEDT>
					<Field>TaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxServiceTariff</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxServiceTariff</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxServiceTariff</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalOnAcc</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>ParentRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>ParentTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATProductCode_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ExtTableProductCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATProductCode_MX</Name>
					<Field>SATProductCode_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>