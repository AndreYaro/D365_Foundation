<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdUncommitted_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdUncommitted_IN extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromTaxWithholdTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method copies all of the fields from TaxWithholdTrans_IN to TaxWithholdUncommitted_IN.
    /// </summary>
    /// <param name="_taxWithholdTrans">
    ///    The buffer for TaxWithholdTrans_IN which has the record to be copied.
    /// </param>
    /// <param name="_factor">
    ///    The variable Factor is to reverse the sign of the taxAmount.
    /// </param>
    public void initFromTaxWithholdTrans(TaxWithholdTrans_IN _taxWithholdTrans, Factor _factor = 1)
    {
        if (_taxWithholdTrans.CustAccount)
        {
            this.AccountNumber = _taxWithholdTrans.CustAccount;
        }
        else if (_taxWithholdTrans.VendAccount)
        {
            this.AccountNumber = _taxWithholdTrans.VendAccount;
        }
        else if (_taxWithholdTrans.AccountId)
        {
            this.AccountNumber = _taxWithholdTrans.AccountId;
        }

        this.AdvancePayment                     = _taxWithholdTrans.AdvancePayment;
        this.AmountOriginMST                    = _taxWithholdTrans.AmountOriginMST * _factor;
        this.CalculationDate                    = _taxWithholdTrans.TransDate;
        this.Company                            = _taxWithholdTrans.dataAreaId;
        this.ExemptTax                          = _taxWithholdTrans.Exempt;
        this.LedgerDimensionDefaultAccount      = _taxWithholdTrans.LedgerDimension;
        this.RateOfDeduction                    = _taxWithholdTrans.RateOfDeduction;
        this.Source                             = _taxWithholdTrans.Source;
        this.SourceBaseAmountCur                = _taxWithholdTrans.TaxWithholdBaseAmountCur * _factor;
        this.SourceBaseAmountCurCalculated      = _taxWithholdTrans.TaxWithholdBaseAmountCur * _factor;
        this.SourceBaseAmountCurRaw             = _taxWithholdTrans.TaxWithholdBaseAmountCur * _factor;
        this.SourceTaxAmountCur                 = _taxWithholdTrans.TaxWithholdAmountCur * _factor;
        this.SourceRegulateAmountCur            = _taxWithholdTrans.TaxWithholdAmountCur * _factor;
        this.SourceBaseAmountCurRegulated       = _taxWithholdTrans.AdjustedBaseAmount * _factor;
        this.SourceRegulateAmountCur            = _taxWithholdTrans.AdjustedTaxWithholdAmount * _factor;
        this.TaxAmount                          = _taxWithholdTrans.TaxWithholdAmount * _factor;
        this.TaxBaseAmount                      = _taxWithholdTrans.WithholdBaseAmount * _factor;
        this.TaxAmountCur                       = _taxWithholdTrans.TaxTaxWithholdAmount * _factor;
        this.TaxBaseAmountCur                   = _taxWithholdTrans.TaxWithholdAmountOrigin * _factor;
        this.SourceCurrencyCOde                 = _taxWithholdTrans.CurrencyCode;
        this.TaxCurrencyCode                    = _taxWithholdTrans.TaxWithholdCurrency;
        this.TaxWithholdCode                    = _taxWithholdTrans.TaxWithholdCode;
        this.TaxWithholdGroup                   = _taxWithholdTrans.TaxWithholdGroup;
        this.TaxWithholdType                    = _taxWithholdTrans.TaxType;
        this.TaxWithholdValue                   = _taxWithholdTrans.TaxWithholdValue;
        this.IsPartOfTurnOver                   = _taxWithholdTrans.IsPartOfTurnOver;
        this.IsTaxCalculated                    = _taxWithholdTrans.TaxWithholdCalculated;
        this.OverlookThreshold                  = _taxWithholdTrans.OverlookThreshold;
        this.Reason                             = _taxWithholdTrans.Reason;
        this.ThresholdValidFrom                 = _taxWithholdTrans.ThresholdValidFrom;
        this.ThresholdValidTo                   = _taxWithholdTrans.ThresholdValidTo;
        this.CalcUncalcPostedTrans              = _taxWithholdTrans.CalcUncalcPostedTrans;
        this.TurnoverThreshold                  = _taxWithholdTrans.TurnoverThreshold;
        this.ConcessionCertificateNumber        = _taxWithholdTrans.ConcessionCertificateNumber;
        this.TaxApplicability                   = _taxWithholdTrans.TaxApplicability;
        this.AcknowledgermentNumber             = _taxWithholdTrans.AcknowledgermentNumber;
        this.NatureOfRemittance                 = _taxWithholdTrans.NatureOfRemittance;
        this.CountryRegionToRemittance          = _taxWithholdTrans.CountryRegionToRemittance;
        if (FeatureStateProvider::isFeatureEnabled(TaxWithholdCustomerThresholdBasedOnPaymentOnlyFeature::instance()))
        {
            this.IsTaxInterim = _taxWithholdTrans.isTaxInterim;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpTaxWithholdWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method copies all of the fields from TmpTaxWorkTrans (in-memory table) to TaxUncommitted.
    /// </summary>
    /// <param name="_tmpTaxWithholdWorkTrans">
    ///    The buffer for TmpTaxWithholdWorkTrans which has the record to be copied.
    /// </param>
    public void initFromTmpTaxWithholdWorkTrans(TmpTaxWithholdWorkTrans_IN  _tmpTaxWithholdWorkTrans)
    {
        int                 taxSign = 1;
        // Not credit note execute the code
        if (_tmpTaxWithholdWorkTrans.TaxBaseQty >= 0)
        {
            taxSign = TaxWithhold_IN::getTaxSign(_tmpTaxWithholdWorkTrans.HeadingTableId, _tmpTaxWithholdWorkTrans.SourceRecId, _tmpTaxWithholdWorkTrans.TaxWithholdCode);
        }

        this.HeadingRecId            = _tmpTaxWithholdWorkTrans.HeadingRecId;
        this.HeadingTableId          = _tmpTaxWithholdWorkTrans.HeadingTableId;
        this.Company                 = _tmpTaxWithholdWorkTrans.CompanyAccount;
        this.SourceCurrencyCOde      = _tmpTaxWithholdWorkTrans.SourceCurrencyCode;
        this.TaxWithholdCode         = _tmpTaxWithholdWorkTrans.TaxWithholdCode;
        this.SourceTableId           = _tmpTaxWithholdWorkTrans.SourceTableId;
        this.SourceRecId             = _tmpTaxWithholdWorkTrans.SourceRecId;
        this.ExchangeRate            = _tmpTaxWithholdWorkTrans.ExchangeRate;
        this.ExchRateSecond          = _tmpTaxWithholdWorkTrans.ExchRateSecond;
        this.TaxWithholdGroup        = _tmpTaxWithholdWorkTrans.TaxWithholdGroup;
        this.TaxWithholdValue        = _tmpTaxWithholdWorkTrans.TaxWithholdValue;
        this.AccountNumber           = _tmpTaxWithholdWorkTrans.AccountNumber;
        this.ExemptTax               = _tmpTaxWithholdWorkTrans.ExemptTax;
        this.RateOfDeduction         = _tmpTaxWithholdWorkTrans.RateOfDeduction;
        this.CalculationDate         = _tmpTaxWithholdWorkTrans.CalculationDate;
        this.Source                  = _tmpTaxWithholdWorkTrans.Source;
        this.TaxAmount               = _tmpTaxWithholdWorkTrans.TaxAmount * taxSign;
        this.TaxAmountCur            = _tmpTaxWithholdWorkTrans.TaxAmountCur * taxSign;
        this.TaxBaseAmount           = _tmpTaxWithholdWorkTrans.TaxBaseAmount;
        this.TaxBaseAmountCur        = _tmpTaxWithholdWorkTrans.TaxBaseAmountCur;
        this.SourceBaseAmountCur     = _tmpTaxWithholdWorkTrans.SourceBaseAmountCur;
        this.SourceRegulateAmountCur = _tmpTaxWithholdWorkTrans.SourceRegulateAmountCur * taxSign;
        this.SourceTaxAmountCur      = _tmpTaxWithholdWorkTrans.SourceTaxAmountCur * taxSign;
        this.SourceTaxAmountCurReal  = _tmpTaxWithholdWorkTrans.SourceTaxAmountCurReal * taxSign;
        this.TaxBaseAmountRaw        = _tmpTaxWithholdWorkTrans.TaxBaseAmountRaw;
        this.SourceBaseAmountCurRaw  = _tmpTaxWithholdWorkTrans.SourceBaseAmountCurRaw;
        this.SourceBaseAmountCurCalculated  = _tmpTaxWithholdWorkTrans.SourceBaseAmountCurCalculated;
        this.SourceBaseAmountCurRegulated   = _tmpTaxWithholdWorkTrans.SourceBaseAmountCurRegulated;

        this.SourceCurrencyCOde      = _tmpTaxWithholdWorkTrans.SourceCurrencyCode;
        this.TaxCurrencyCode         = _tmpTaxWithholdWorkTrans.TaxCurrencyCode;
        this.TaxAutogenerated        = _tmpTaxWithholdWorkTrans.TaxAutogenerated;
        this.TaxBaseQty              = _tmpTaxWithholdWorkTrans.TaxBaseQty;
        this.TaxWithholdType         = TaxWithhold_IN::TaxWithholdType2TaxWithholdCodeType(_tmpTaxWithholdWorkTrans.TaxWithholdType);
        this.IsTaxCalculated         = _tmpTaxWithholdWorkTrans.IsTaxCalculated;
        this.OverlookThreshold       = _tmpTaxWithholdWorkTrans.OverlookThreshold;
        this.IsPartOfTurnOver        = _tmpTaxWithholdWorkTrans.IsPartOfTurnOver;
        this.Reason                  = _tmpTaxWithholdWorkTrans.Reason;
        this.ThresholdValidFrom      = _tmpTaxWithholdWorkTrans.ThresholdValidFrom;
        this.ThresholdValidTo        = _tmpTaxWithholdWorkTrans.ThresholdValidTo;
        this.CalcUncalcPostedTrans   = _tmpTaxWithholdWorkTrans.CalcUncalcPostedTrans;
        this.TurnoverThreshold       = _tmpTaxWithholdWorkTrans.TurnoverThreshold;
        this.ConcessionCertificateNumber = _tmpTaxWithholdWorkTrans.ConcessionCertificateNumber;

        this.Voucher                 = _tmpTaxWithholdWorkTrans.Voucher;
        this.LedgerDimensionDefaultAccount = _tmpTaxWithholdWorkTrans.LedgerDimensionDefaultAccount;
        this.InvoiceId               = _tmpTaxWithholdWorkTrans.InvoiceId;
        // This field is required for threshold validation, grossAmount is stored in this field
        this.AmountOriginMST         =  _tmpTaxWithholdWorkTrans.AmountOriginMST;
        this.AdvancePayment          =  _tmpTaxWithholdWorkTrans.AdvancePayment;

        // Fields related to original cust/vend trans fields selected for adjustment.
        this.SourceTransDate         = _tmpTaxWithholdWorkTrans.SourceTransDate;
        this.SourceTransVoucher      = _tmpTaxWithholdWorkTrans.SourceTransVoucher;
        this.SourceTransTableId      = _tmpTaxWithholdWorkTrans.SourceTransTableId;
        this.SourceTransRecId        = _tmpTaxWithholdWorkTrans.SourceTransRecId;
        this.TransactionStatus       = _tmpTaxWithholdWorkTrans.TransactionStatus;
        this.CPOrigInvoiceRefRecId   = _tmpTaxWithholdWorkTrans.CPOrigInvoiceRefRecId;

        this.TaxApplicability           = _tmpTaxWithholdWorkTrans.TaxApplicability;
        this.AcknowledgermentNumber     = _tmpTaxWithholdWorkTrans.AcknowledgermentNumber;
        this.NatureOfRemittance         = _tmpTaxWithholdWorkTrans.NatureOfRemittance;
        this.CountryRegionToRemittance  = _tmpTaxWithholdWorkTrans.CountryRegionToRemittance;
        if (FeatureStateProvider::isFeatureEnabled(TaxWithholdCustomerThresholdBasedOnPaymentOnlyFeature::instance()))
        {
            this.IsTaxInterim = _tmpTaxWithholdWorkTrans.isTaxInterim;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate date parameter.
    /// </summary>
    /// <returns>
    /// The accounting date information.
    /// </returns>
    public AccountingDate parmExchangeRateDate()
    {
        return this.TaxWithholdMap_IN::parmExchangeRateDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parent source document line.
    /// </summary>
    /// <returns>
    /// The parent source document line.
    /// </returns>
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return this.TaxWithholdMap_IN::parmParentSourceDocumentLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enum name of the source document line type.
    /// </summary>
    /// <returns>
    /// The enum name of the source document line type.
    /// </returns>
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return this.TaxWithholdMap_IN::parmSourceDocLineTypeEnumName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enum value of the source document line type.
    /// </summary>
    /// <returns>
    /// The enum value of the source document line type.
    /// </returns>
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return this.TaxWithholdMap_IN::parmSourceDocLineTypeEnumValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document header.
    /// </summary>
    /// <returns>
    /// The source document header.
    /// </returns>
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        return this.TaxWithholdMap_IN::parmSourceDocumentHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax withhold direction.
    /// </summary>
    /// <returns>
    /// The tax withhold direction.
    /// </returns>
    public TaxWithholdDirection_IN parmTaxWithholdDirection()
    {
        return this.TaxWithholdMap_IN::parmTaxWithholdDirection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// submits the tax record to accounting distribution process and journalization
    /// process
    /// </summary>
    public void submitSourceDocumentLine()
    {
        SourceDocumentLine          sourceDocumentLine;
        SourceDocumentLineItem      sourceDocumentLineItem;
        
        if (this.SourceDocumentLine)
        {
            sourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine);
            sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(this);
        }
        
        if (this.SourceDocumentLine)
        {
            switch (sourceDocumentLine.AccountingStatus)
            {
                case SourceDocumentLineAccountingStatus::Completed :
                    if (sourceDocumentLineItem.hasAmountResolutionInputChanged() ||  sourceDocumentLineItem.hasMainAccDerivationInputChanged())
                    {
                        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, false, SourceDocumentLineAccountingStatus::FullyDistributed);
                    }
                    else
                    {
                        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, false);
                    }
                    break;
                
                case sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::None :
                    SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, false, SourceDocumentLineAccountingStatus::Draft);
                    break;
                
                default :
                    if (sourceDocumentLineItem.hasAmountResolutionInputChanged() || sourceDocumentLineItem.hasMainAccDerivationInputChanged())
                    {
                        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, false, SourceDocumentLineAccountingStatus::Draft);
                    }
                    else
                    {
                        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, false, sourceDocumentLine.AccountingStatus);
                    }
                    break;
            }
        }
        else
        {
            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, false, SourceDocumentLineAccountingStatus::Draft);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWithholdTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates the <c>TaxWithholdUncommitted_IN</c> records for transactions which do not use distributions.
    /// </summary>
    /// <param name="_taxWithholdCalculation">
    ///   The instance of the tax calculation class used to calculate taxes.
    /// </param>
    /// <param name="_skipNotExistsCheck">
    ///   true if the calling code has verified already that no tax uncommitted records exist and the query
    ///   to find them can be skipped; otherwise, false.
    /// </param>
    public static void createWithholdTaxUncommitted(TaxWithholdCalculation_IN _taxWithholdCalculation, boolean _skipNotExistsCheck = false)
    {
        TmpTaxWithholdWorkTrans_IN  tmpTaxWithholdWorkTrans;
        TaxWithholdUncommitted_IN   taxWithholdUncommitted;
        TaxWithholdUncommitted_IN   taxWithholdUncommittedVar;
        RecordInsertList            taxUnCommittedWHTList;

        void createTaxWHTUncommittedFromTmpTaxWHTWorkTrans()
        {
            taxWithholdUncommitted.clear();
            taxWithholdUncommitted.initFromTmpTaxWithholdWorkTrans(tmpTaxWithholdWorkTrans);

            if (!_taxWithholdCalculation.getMaintainExistingTaxUncommitted())
            {
                // if we aren't maintaining existing TaxUncommitted records then all the SDL's
                // were deleted so clear the RecId.
                taxWithholdUncommitted.SourceDocumentLine = 0;
            }

            if (_taxWithholdCalculation.useSubLedgerJournalLines() && tmpTaxWithholdWorkTrans.SourceRecId != 0)
            {
                switch (tmpTaxWithholdWorkTrans.SourceTableId)
                {
                    case tableNum(PurchLine) :
                    case tableNum(CustInvoiceLine) :
                    case tableNum(VendInvoiceInfoLine) :
                    case tableNum(ProjAdvancedJournalLine) :
                        taxWithholdUncommitted.submitSourceDocumentLine();
                        break;
                    default :
                        taxWithholdUncommitted.SourceDocumentLine = 0;
                        break;
                }
            }

            tmpTaxWithholdWorkTrans.SourceDocumentLine = taxWithholdUncommitted.SourceDocumentLine;
            tmpTaxWithholdWorkTrans.update();

            taxUnCommittedWHTList.add(taxWithholdUncommitted);
        }

        tmpTaxWithholdWorkTrans = _taxWithholdCalculation.tmpTaxWithholdWorkTrans();
        taxUnCommittedWHTList = new RecordInsertList(tableNum(TaxWithholdUncommitted_IN));

        if (_skipNotExistsCheck)
        {
            // loop through the memory table which holds all the tax lines, creating a
            // tax uncommitted record for each.
            while select *
            from tmpTaxWithholdWorkTrans
            where tmpTaxWithholdWorkTrans.HeadingRecId == _taxWithholdCalculation.parmHeadingRecID()  &&
                  tmpTaxWithholdWorkTrans.HeadingTableId == _taxWithholdCalculation.parmHeadingTableID()
            {
                createTaxWHTUncommittedFromTmpTaxWHTWorkTrans();
            }
        }
        else
        {
            // loop through the memory table which holds all the tax lines, creating a
            // tax uncommitted record for each.
            while select *
                from tmpTaxWithholdWorkTrans
                where tmpTaxWithholdWorkTrans.HeadingRecId == _taxWithholdCalculation.parmHeadingRecID() &&
                      tmpTaxWithholdWorkTrans.HeadingTableId == _taxWithholdCalculation.parmHeadingTableID()
                notexists join taxWithholdUncommittedVar
                    where tmpTaxWithholdWorkTrans.SourceTableId == taxWithholdUncommittedVar.SourceTableId &&
                          tmpTaxWithholdWorkTrans.SourceRecId == taxWithholdUncommittedVar.SourceRecId &&
                          tmpTaxWithholdWorkTrans.TaxWithholdCode == taxWithholdUncommittedVar.TaxWithholdCode
            {
                createTaxWHTUncommittedFromTmpTaxWHTWorkTrans();
            }
        }
        // insert new records
        taxUnCommittedWHTList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the current set of <c>TaxWithholdUncommitted_IN</c> records for the specified document.
    /// </summary>
    /// <param name="_documentTableId">
    /// The table Id for the transaction header.
    /// </param>
    /// <param name="_documentId">
    /// The record Id of the transaction header.
    /// </param>
    /// <param name="_deleteSourceDocumentLine">
    /// boolean value, if sourceDocumentLine has to be deleted.
    /// </param>
    /// <param name="_maintainExistingTaxUncommitted">
    /// A boolean value which indicates that Tax should merge the newly calculated taxes with
    /// existing records in TaxWithholdUncommitted_IN.
    /// </param>
    public static void deleteForDocumentHeader(RefTableId   _documentTableId,
                                                      RefRecId     _documentId,
                                                      boolean      _deleteSourceDocumentLine = true,
                                                      boolean      _maintainExistingTaxUncommitted = false)
    {
        TaxWithholdUncommitted_IN   taxUncommittedWHT;
        AccountingDistribution      accountingDistribution;
        SourceDocumentLine          sourceDocumentLine;

        if (!TaxWithholdUncommitted_IN::existByDocumentId(_documentTableId, _documentId))
        {
            return;
        }

        if (_maintainExistingTaxUncommitted)
        {
            // delete any existing TaxUnCommittedWHT_IN records which don't use SLJL feature.
            update_recordset taxUncommittedWHT
                setting
                    TaxAmount = 0,
                    TaxBaseAmount = 0,
                    TaxBaseAmountCur = 0,
                    SourceTaxAmountCur = 0,
                    TaxAmountCur = 0,
                    SourceBaseAmountCur = 0,
                    SourceRegulateAmountCur = 0,
                    SourceBaseAmountCurRegulated = 0,
                    SourceTaxAmountCurReal = 0,
                    SourceBaseAmountCurRaw = 0,
                    TaxBaseAmountRaw = 0
                where taxUncommittedWHT.HeadingRecId        == _documentId &&
                        taxUncommittedWHT.HeadingTableId    == _documentTableId;
        }
        else
        {
            if (_deleteSourceDocumentLine)
            {
                // delete distributions which are non-reversal and not posted to GL
                delete_from accountingDistribution
                    where accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing &&
                        accountingDistribution.AccountingEvent == 0
                    exists join taxUncommittedWHT
                        where taxUncommittedWHT.HeadingRecId       == _documentId &&
                                taxUncommittedWHT.HeadingTableId     == _documentTableId &&
                                taxUncommittedWHT.SourceDocumentLine == accountingDistribution.SourceDocumentLine;

                // delete source dcoument lines which have no distribution.
                delete_from sourceDocumentLine
                    exists join taxUncommittedWHT
                        where taxUncommittedWHT.HeadingRecId       == _documentId &&
                              taxUncommittedWHT.HeadingTableId     == _documentTableId &&
                              taxUncommittedWHT.SourceDocumentLine == sourceDocumentLine.RecId
                    notexists join accountingDistribution
                        where accountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId;

                // delete any existing TaxWithholdUncommitted_IN records which have no distribution.
                delete_from taxUncommittedWHT
                    where taxUncommittedWHT.HeadingRecId == _documentId &&
                          taxUncommittedWHT.HeadingTableId == _documentTableId
                    notexists join accountingDistribution
                        where accountingDistribution.SourceDocumentLine == taxUncommittedWHT.SourceDocumentLine;
            }
            else
            {
                // delete any existing TaxWithholdUncommitted_IN records which don't use SLJL feature.
                delete_from taxUncommittedWHT
                    where taxUncommittedWHT.HeadingRecId == _documentId &&
                            taxUncommittedWHT.HeadingTableId == _documentTableId &&
                            taxUncommittedWHT.Company == curext();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the current set of <c>TaxWithholdUncommitted_IN</c> records for the specified source line.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table Id for the transaction line.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record Id of the transaction line.
    /// </param>
    /// <param name="_deleteSourceDocumentLine">
    /// boolean value, to identify if SourceDocumentLine needs to be deleted.
    /// </param>
    /// <param name="_maintainExistingTaxUncommitted">
    /// A boolean value which indicates that Tax should merge the newly calculated taxes with
    /// existing records in TaxWithholdUncommitted_IN.
    /// </param>
    public static void deleteForDocumentLine(RefTableId _sourceTableId,
                                             RefRecId   _sourceRecId,
                                             boolean    _deleteSourceDocumentLine = true,
                                             boolean    _maintainExistingTaxUncommitted = false)
    {
        TaxWithholdUncommitted_IN   taxUncommittedWHT;
        AccountingDistribution      accountingDistribution;
        SourceDocumentLine          sourceDocumentLine;

        // It is generally not valid to delete taxes for a single line.  In most scenarios the use of this function will cause a bug.

        if (_maintainExistingTaxUncommitted)
        {
            // delete any existing TaxUncommitted records which don't use SLJL feature.
            update_recordset taxUncommittedWHT
                setting
                    TaxAmount = 0,
                    TaxBaseAmount = 0,
                    TaxBaseAmountCur = 0,
                    SourceTaxAmountCur = 0,
                    TaxAmountCur = 0,
                    SourceBaseAmountCur = 0,
                    SourceRegulateAmountCur = 0,
                    SourceBaseAmountCurRegulated = 0,
                    SourceTaxAmountCurReal = 0,
                    SourceBaseAmountCurRaw = 0,
                    TaxBaseAmountRaw = 0
                where taxUncommittedWHT.SourceRecId == _sourceRecId &&
                        taxUncommittedWHT.SourceTableId == _sourceTableId;
        }
        else
        {
            if (_deleteSourceDocumentLine)
            {
                // delete distributions which are non-reversal and not posted to GL
                delete_from accountingDistribution
                    where accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing &&
                        accountingDistribution.AccountingEvent == 0
                    exists join taxUncommittedWHT
                        where taxUncommittedWHT.SourceRecId        == _sourceRecId &&
                                taxUncommittedWHT.SourceTableId      == _sourceTableId &&
                                taxUncommittedWHT.SourceDocumentLine == accountingDistribution.SourceDocumentLine;

                // delete source dcoument lines which have no distribution.
                delete_from sourceDocumentLine
                    exists join taxUncommittedWHT
                        where taxUncommittedWHT.SourceRecId        == _sourceRecId &&
                                taxUncommittedWHT.SourceTableId      == _sourceTableId &&
                                taxUncommittedWHT.SourceDocumentLine == sourceDocumentLine.RecId
                    notexists join accountingDistribution
                        where accountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId;

                // delete any existing TaxWithholdUncommitted_IN records which have no distribution.
                delete_from taxUncommittedWHT
                    where taxUncommittedWHT.SourceRecId == _sourceRecId &&
                            taxUncommittedWHT.SourceTableId == _sourceTableId
                    notexists join accountingDistribution
                        where accountingDistribution.SourceDocumentLine == taxUncommittedWHT.SourceDocumentLine;
            }
            else
            {
                // delete any existing TaxWithholdUncommitted_IN records which don't use SLJL feature.
                delete_from taxUncommittedWHT
                    where taxUncommittedWHT.SourceRecId == _sourceRecId &&
                            taxUncommittedWHT.SourceTableId == _sourceTableId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>TaxWithholdUncommitted_IN</c> records for the invoice.
    /// </summary>
    /// <param name="_documentTableId">
    /// The document table ID.
    /// </param>
    /// <param name="_documentId">
    /// The document table ID.
    /// </param>
    /// <param name="_voucher">
    /// The specified voucher.
    /// </param>
    /// <param name="_invoiceId">
    /// The invoice ID.
    /// </param>
    static public void deleteForInvoice(RefTableId _documentTableId,
                                        RefRecId _documentId,
                                        Voucher _voucher,
                                        InvoiceId _invoiceId)
    {
        TaxWithholdUncommitted_IN   taxUncommittedWHT;

        // delete any existing TaxWithholdUncommitted_IN records as a set
        delete_from taxUncommittedWHT
        where taxUncommittedWHT.HeadingRecId == _documentId &&
              taxUncommittedWHT.HeadingTableId == _documentTableId &&
              taxUncommittedWHT.Voucher == _voucher &&
              taxUncommittedWHT.InvoiceId == _invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the TaxWithholdUncommitted_IN table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the TaxWithholdUncommitted_IN record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        TaxWithholdUncommitted_IN taxUncommittedWHT;

        select firstonly
            RecId
        from
            taxUncommittedWHT
        where
            taxUncommittedWHT.RecId == _recId;

        return taxUncommittedWHT != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByDocumentAndInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>TaxWithholdUncommitted_IN</c> table for a
    /// specified invoice.
    /// </summary>
    /// <param name="_documentTableId">
    /// A document table ID.
    /// </param>
    /// <param name="_documentId">
    /// A document ID.
    /// </param>
    /// <param name="_voucher">
    /// A voucher.
    /// </param>
    /// <param name="_invoiceId">
    /// An invoice ID.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    static public boolean existByDocumentAndInvoice(RefTableId _documentTableId,
                                      RefRecId _documentId,
                                      Voucher _voucher,
                                      InvoiceId _invoiceId)
    {
        TaxWithholdUncommitted_IN taxWithholdUncommitted;

        select firstonly
            RecId
        from
            taxWithholdUncommitted
        where
              taxWithholdUncommitted.HeadingRecId == _documentId &&
              taxWithholdUncommitted.HeadingTableId == _documentTableId &&
              taxWithholdUncommitted.Voucher == _voucher &&
              taxWithholdUncommitted.InvoiceId == _invoiceId;

        return taxWithholdUncommitted != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByDocumentAndVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>TaxWithholdUncommitted_IN</c> table exists for the specified
    /// voucher.
    /// </summary>
    /// <param name="_documentTableId">
    /// The document table ID.
    /// </param>
    /// <param name="_documentId">
    /// The document table ID.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    static public boolean existByDocumentAndVoucher(RefTableId _documentTableId,
                                      RefRecId _documentId,
                                      Voucher _voucher)
    {
        TaxWithholdUncommitted_IN taxWithholdUncommitted;

        select firstonly
            RecId
        from
            taxWithholdUncommitted
        where
              taxWithholdUncommitted.HeadingRecId == _documentId &&
              taxWithholdUncommitted.HeadingTableId == _documentTableId &&
              taxWithholdUncommitted.Voucher == _voucher;

        return taxWithholdUncommitted != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByDocumentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the TaxUnCommittedWHT_IN table exists for the given document id.
    /// </summary>
    /// <param name="_documentTableId">
    /// The table Id of the transaction header table.
    /// </param>
    /// <param name="_documentId">
    /// The Document ID for a transaction.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByDocumentId(RefTableId _documentTableId, RefRecId _documentId)
    {
        TaxWithholdUncommitted_IN taxUnCommittedWHT;

        select firstonly
            RecId
        from
            taxUnCommittedWHT
        where
            taxUnCommittedWHT.HeadingRecId      == _documentId &&
            taxUnCommittedWHT.HeadingTableId    == _documentTableId;

        return taxUnCommittedWHT != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBySourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the TaxUnCommittedWHT_IN table exists for the given document id.
    /// </summary>
    /// <param name="_documentTableId">
    /// The table Id of the transaction line table.
    /// </param>
    /// <param name="_documentId">
    /// The Document ID for a transaction.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existBySourceId(RefTableId _documentTableId, RefRecId _documentId)
    {
        TaxWithholdUncommitted_IN taxUnCommittedWHT;

        select firstonly
            RecId
        from
            taxUnCommittedWHT
        where
            taxUnCommittedWHT.SourceRecId      == _documentId &&
            taxUnCommittedWHT.SourceTableId    == _documentTableId;

        return taxUnCommittedWHT != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the TaxWithholdUncommitted_IN table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the TaxWithholdUncommitted_IN record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the TaxWithholdUncommitted_IN table; otherwise, an empty record.
    /// </returns>
    public static TaxWithholdUncommitted_IN find(
        RecId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdUncommitted_IN taxUncommittedWHT;

        taxUncommittedWHT.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxUncommittedWHT.concurrencyModel(_concurrencyModel);
        }

        select firstonly
                taxUncommittedWHT
            where
                taxUncommittedWHT.RecId == _recId;

        return taxUncommittedWHT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>TaxWithholdUncommitted_IN</c> table specified by a source document line.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The source document line reference record ID of the <c>TaxWithholdUncommitted_IN</c> record to find.
    /// </param>
    /// <returns>
    /// A record from the <c>TaxWithholdUncommitted_IN</c> table; otherwise, an empty record.
    /// </returns>
    static public TaxWithholdUncommitted_IN findBySourceDocumentLine(RefRecId _sourceDocumentLine)
    {
        TaxWithholdUncommitted_IN withholdingTax;

        select firstonly withholdingTax
            where withholdingTax.SourceDocumentLine == _sourceDocumentLine;
        return withholdingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualTaxAmountForCPVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets corrected withhold tax amount for centralized payment for specified HeadingTableId, HeadingRecId, voucher, inclusiveTax and not companyId.
    /// </summary>
    /// <param name="_documentTableId">
    /// The Heading tableId.
    /// </param>
    /// <param name="_documentId">
    /// The Heading recId.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <param name="_includeUseTax">
    /// priceInclusive tax is marked.
    /// </param>
    /// <param name="_companyId">
    /// The companyId.
    /// </param>
    /// <param name="_sourceRecId">
    /// The sourceRecId.
    /// </param>
    /// <returns>
    /// Gets corrected withhold tax amount for specified HeadingTableId, HeadingRecId, voucher, inclusiveTax and companyId.
    /// </returns>
    static public TaxAmountCur getActualTaxAmountForCPVoucher(
        RefTableId          _documentTableId,
        RefRecId            _documentId,
        Voucher             _voucher,
        boolean             _includeUseTax,
        SelectableDataArea  _companyId,
        RefRecId            _sourceRecId = 0)
    {
        TaxWithholdUncommitted_IN taxWithholdUncommitted;

        if (_sourceRecId == 0)
        {
            select sum(SourceRegulateAmountCur)
                from taxWithholdUncommitted
                    where taxWithholdUncommitted.HeadingTableId == _documentTableId
                        && taxWithholdUncommitted.HeadingRecId == _documentId
                        && taxWithholdUncommitted.Voucher == _voucher
                        && taxWithholdUncommitted.Company != _companyId;
        }
        else
        {
            select sum(SourceRegulateAmountCur)
            from taxWithholdUncommitted
                where taxWithholdUncommitted.HeadingTableId == _documentTableId
                    && taxWithholdUncommitted.HeadingRecId == _documentId
                    && taxWithholdUncommitted.Voucher == _voucher
                    && taxWithholdUncommitted.SourceRecId == _sourceRecId
                    && taxWithholdUncommitted.Company != _companyId;
        }

        return taxWithholdUncommitted.SourceRegulateAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualTaxAmountForVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets corrected withhold tax amount for specified HeadingTableId, HeadingRecId, voucher, inclusiveTax and companyId.
    /// </summary>
    /// <param name="_documentTableId">
    /// The Heading tableId.
    /// </param>
    /// <param name="_documentId">
    /// The Heading recId.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <param name="_includeUseTax">
    /// priceInclusive tax is marked.
    /// </param>
    /// <param name="_companyId">
    /// The companyId.
    /// </param>
    /// <param name="_sourceRecId">
    /// The sourceRecId.
    /// </param>
    /// <returns>
    /// Gets corrected withhold tax amount for specified HeadingTableId, HeadingRecId, voucher, inclusiveTax and companyId.
    /// </returns>
    static public TaxAmountCur getActualTaxAmountForVoucher(
        RefTableId          _documentTableId,
        RefRecId            _documentId,
        Voucher             _voucher,
        boolean             _includeUseTax,
        SelectableDataArea  _companyId = '',
        RefRecId            _sourceRecId = 0)
    {
        TaxWithholdUncommitted_IN taxWithholdUncommitted;

        if (_sourceRecId == 0)
        {
            select sum(SourceRegulateAmountCur)
            from taxWithholdUncommitted
                where taxWithholdUncommitted.HeadingTableId == _documentTableId &&
                        taxWithholdUncommitted.HeadingRecId == _documentId &&
                        taxWithholdUncommitted.Voucher == _voucher &&
                        (_companyId == '' || taxWithholdUncommitted.Company == _companyId);
        }
        else
        {
            select sum(SourceRegulateAmountCur)
            from taxWithholdUncommitted
                where taxWithholdUncommitted.HeadingTableId == _documentTableId
                    && taxWithholdUncommitted.HeadingRecId == _documentId
                    && taxWithholdUncommitted.Voucher == _voucher
                    && taxWithholdUncommitted.SourceRecId == _sourceRecId
                    && (_companyId == '' || taxWithholdUncommitted.Company == _companyId);
        }

        return taxWithholdUncommitted.SourceRegulateAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maintainTaxWithholdUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maintains tax withhold uncommitted.
    /// </summary>
    /// <param name="_taxWithholdCalculation">
    /// The tax withhold calculation.
    /// </param>
    public static void maintainTaxWithholdUncommitted(TaxWithholdCalculation_IN _taxWithholdCalculation)
    {
        TaxWithholdUncommitted_IN  taxWithholdUncommitted;
        TmpTaxWithholdWorkTrans_IN taxWithholdWorkTrans = _taxWithholdCalculation.tmpTaxWithholdWorkTrans();
        TmpTaxWithholdWorkTrans_IN taxWithholdWorkTrans2;

        taxWithholdWorkTrans2.setTmpData(taxWithholdWorkTrans);

        // Note this loops seperately over the results since TmpTaxWithholdWorkTrans_IN is an in-memory
        // temp table while TaxWithholdUncommitted_IN is a regular table. Doing a direct join will
        // result in pulling back *all* TaxWithholdUncommitted_IN records then comparing with the
        // in memory temp table, which is hugely expensive when TaxWithholdUncommitted_IN has thousands
        // of records.
        while select SourceTableId, SourceRecId from taxWithholdWorkTrans
                group by SourceTableId, SourceRecId
        {
            while select forupdate taxWithholdUncommitted where
                taxWithholdUncommitted.SourceTableId == taxWithholdWorkTrans.SourceTableId &&
                taxWithholdUncommitted.SourceRecId == taxWithholdWorkTrans.SourceRecId
            {
                select firstonly taxWithholdWorkTrans2 where
                    taxWithholdWorkTrans2.SourceTableId == taxWithholdUncommitted.SourceTableId &&
                    taxWithholdWorkTrans2.SourceRecId == taxWithholdUncommitted.SourceRecId &&
                    taxWithholdWorkTrans2.TaxWithholdCode == taxWithholdUncommitted.TaxWithholdCode;

                if (taxWithholdWorkTrans2)
                {
                    // Update all TaxWithholdUncommitted_IN records which have corresponding records in the memory table
                    taxWithholdUncommitted.initFromTmpTaxWithholdWorkTrans(taxWithholdWorkTrans2);
                    // clear cache the state data may have changed
                    SourceDocumentLineItem::removeFromCache(SourceDocumentLine::find(taxWithholdUncommitted.SourceDocumentLine));

                    taxWithholdUncommitted.submitSourceDocumentLine();
                }
                else
                {
                    // Soft delete all TaxWithholdUncommitted_IN records for those lines calculated by the tax engine
                    taxWithholdUncommitted.TaxAmount = 0;
                    taxWithholdUncommitted.TaxBaseAmount = 0;
                    taxWithholdUncommitted.TaxBaseAmountCur = 0;
                    taxWithholdUncommitted.SourceTaxAmountCur = 0;
                    taxWithholdUncommitted.TaxAmountCur = 0;
                    taxWithholdUncommitted.SourceBaseAmountCur = 0;
                    taxWithholdUncommitted.SourceRegulateAmountCur = 0;
                    taxWithholdUncommitted.SourceBaseAmountCurRegulated = 0;
                    taxWithholdUncommitted.SourceTaxAmountCurReal = 0;
                    taxWithholdUncommitted.SourceBaseAmountCurRaw = 0;
                    taxWithholdUncommitted.TaxBaseAmountRaw = 0;
                    taxWithholdUncommitted.submitSourceDocumentLine();
                }

                taxWithholdUncommitted.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAdjustmentForCP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the adjustment of tax withhold uncommitted data for company.
    /// </summary>
    /// <param name="_origLedgerJournalTrans">
    /// The original ledger journal transaction.
    /// </param>
    /// <param name="_newLedgerJournalTrans">
    /// The new ledger journal transaction.
    /// </param>
    public static void updateAdjustmentForCP(
        LedgerJournalTrans  _origLedgerJournalTrans,
        LedgerJournalTrans  _newLedgerJournalTrans)
    {
        TaxWithholdUncommitted_IN   taxWithholdUncommitted;
        TaxWithholdCode             taxWithholdCode;
        RefRecId                    origInvoiceRefRecId;

        List                        adjustedWithholdList = new List(Types::Container);
        container                   adjustedWithholdContainer;
        ListEnumerator              enumerator;

        changeCompany(_origLedgerJournalTrans.dataAreaId)
        {
            while select TaxWithholdCode, SourceRegulateAmountCur, CPOrigInvoiceRefRecId from taxWithholdUncommitted
                where taxWithholdUncommitted.SourceTableId == _origLedgerJournalTrans.TableId
                    && taxWithholdUncommitted.SourceRecId  == _origLedgerJournalTrans.RecId
                    && taxWithholdUncommitted.Company      == _newLedgerJournalTrans.Company
                    && taxWithholdUncommitted.Voucher      == _origLedgerJournalTrans.Voucher
            {
                adjustedWithholdContainer = [
                    taxWithholdUncommitted.TaxWithholdCode,
                    taxWithholdUncommitted.SourceRegulateAmountCur,
                    taxWithholdUncommitted.CPOrigInvoiceRefRecId];
                adjustedWithholdList.addEnd(adjustedWithholdContainer);
            }
        }

        taxWithholdUncommitted.clear();
        enumerator = adjustedWithholdList.getEnumerator();
        while (enumerator.moveNext())
        {
            adjustedWithholdContainer = enumerator.current();
            taxWithholdCode = conPeek(adjustedWithholdContainer, 1);
            origInvoiceRefRecId = conPeek(adjustedWithholdContainer, 3);

            select firstOnly forUpdate taxWithholdUncommitted
                where taxWithholdUncommitted.SourceTableId == _newLedgerJournalTrans.TableId
                    && taxWithholdUncommitted.SourceRecId  == _newLedgerJournalTrans.RecId
                    && taxWithholdUncommitted.Company      == _newLedgerJournalTrans.Company
                    && taxWithholdUncommitted.Voucher      == _newLedgerJournalTrans.Voucher
                    && taxWithholdUncommitted.TaxWithholdCode == taxWithholdCode
                    && taxWithholdUncommitted.CPOrigInvoiceRefRecId == origInvoiceRefRecId;
            if (taxWithholdUncommitted)
            {
                ttsBegin;
                taxWithholdUncommitted.SourceRegulateAmountCur = conPeek(adjustedWithholdContainer, 2);
                taxWithholdUncommitted.update();
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxUncommittedWHT</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method replaces all of the TaxWithholdUncommitted_IN records for the passed in document Id and table id
    ///    with the tax lines stored in the passed in TmpTaxWorkTrans buffer.
    /// </summary>
    /// <param name="_taxWithholdCalculation">
    ///   Tax instance which holds the Tax Lines which need to be inserted into TaxUncommitted.
    /// </param>
    static void updateTaxUncommittedWHT(TaxWithholdCalculation_IN _taxWithholdCalculation)
    {
        boolean skipNotExistsCheck = false;
        ttsbegin;
        if (_taxWithholdCalculation.getMaintainExistingTaxUncommitted())
        {
            TaxWithholdUncommitted_IN::maintainTaxWithholdUncommitted(_taxWithholdCalculation);
        }
        else
        {
            TaxWithholdUncommitted_IN::deleteForDocumentHeader(_taxWithholdCalculation.parmHeadingTableID(), _taxWithholdCalculation.parmHeadingRecID(), _taxWithholdCalculation.useSubLedgerJournalLines());
        }

        TaxWithholdUncommitted_IN::createWithholdTaxUncommitted(_taxWithholdCalculation, skipNotExistsCheck);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForWithholdTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>TaxWithholdUncommitted_IN</c> records for unposted transactions.
    /// </summary>
    /// <param name="_taxWithholdTrans">
    ///  Buffer of <c> TaxWithholdTrans_IN </c> table.
    /// </param>
    public static void deleteForWithholdTaxTrans(TaxWithholdTrans_IN _taxWithholdTrans)
    {
        TaxWithholdUncommitted_IN                   taxWithholdUncommitted;
        SourceDocumentLine                          sourceDocumentLine;
        AccountingDistribution                      accountingDistribution;
        RecId                                       sourceDocumentLineRecId;
        VendInvoiceJour                             vendInvoiceJour;
        PurchTable                                  purchTable;
        PurchTable                                  purchTablePR;
        LedgerJournalTable                          ledgerJournalTable;
        TaxWithholdWorkRegulation_IN                taxWithholdWorkRegulation;

        if (_taxWithholdTrans.HeadingTableId == tableNum(VendInvoiceJour))
        {
            vendInvoiceJour = VendInvoiceJour::findRecId(_taxWithholdTrans.HeadingRecId);
            purchTable  = vendInvoiceJour.purchTable();
        }

        sourceDocumentLineRecId = _taxWithholdTrans.SourceDocumentLine;

        /// delete distributions which are not journalizad.
        delete_from accountingDistribution
            exists join taxWithholdUncommitted
                where taxWithholdUncommitted.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                && (taxWithholdUncommitted.AccountNumber == _taxWithholdTrans.VendAccount
                  || taxWithholdUncommitted.AccountNumber == _taxWithholdTrans.CustAccount)
                  && taxWithholdUncommitted.dataAreaId == _taxWithholdTrans.dataAreaId
                  && !(taxWithholdUncommitted.HeadingTableId == _taxWithholdTrans.HeadingTableId
                        && taxWithholdUncommitted.HeadingRecId == _taxWithholdTrans.HeadingRecId)
                  && !(purchTable.RecId && taxWithholdUncommitted.HeadingTableId == purchTable.TableId //PurchaseOrder taxes corresponding to the PurchInvoice
                        && taxWithholdUncommitted.HeadingRecId == purchTable.RecId)
            exists join purchTablePR
                where purchTablePR.TableId == taxWithholdUncommitted.HeadingTableId
                    && purchTablePR.RecId  == taxWithholdUncommitted.HeadingRecId
                    && purchTablePR.PurchStatus == PurchStatus::Backorder
                    && purchTablePR.DocumentState == VersioningDocumentState::Draft;

        // delete source dcoument lines
        //For PurchTable
        delete_from sourceDocumentLine
            exists join taxWithholdUncommitted
                where taxWithholdUncommitted.SourceDocumentLine == sourceDocumentLine.RecId
                && (taxWithholdUncommitted.AccountNumber == _taxWithholdTrans.VendAccount
                  || taxWithholdUncommitted.AccountNumber == _taxWithholdTrans.CustAccount)
                  && taxWithholdUncommitted.dataAreaId == _taxWithholdTrans.dataAreaId
                  && !(taxWithholdUncommitted.HeadingTableId == _taxWithholdTrans.HeadingTableId
                        && taxWithholdUncommitted.HeadingRecId == _taxWithholdTrans.HeadingRecId)
                  && !(purchTable.RecId && taxWithholdUncommitted.HeadingTableId == purchTable.TableId //PurchaseOrder taxes corresponding to the PurchInvoice
                        && taxWithholdUncommitted.HeadingRecId == purchTable.RecId)
            exists join purchTablePR
                where purchTablePR.TableId == taxWithholdUncommitted.HeadingTableId
                    && purchTablePR.RecId  == taxWithholdUncommitted.HeadingRecId
                    && purchTablePR.PurchStatus == PurchStatus::Backorder
                    && purchTablePR.DocumentState == VersioningDocumentState::Draft
            notexists join accountingDistribution
                where accountingDistribution.SourceDocumentLine == taxWithholdUncommitted.SourceDocumentLine;

        // delete taxwitholdUncommitted
        //For PurchTable
        delete_from taxWithholdUncommitted
            where (taxWithholdUncommitted.AccountNumber == _taxWithholdTrans.VendAccount
                || taxWithholdUncommitted.AccountNumber == _taxWithholdTrans.CustAccount)
                && taxWithholdUncommitted.dataAreaId == _taxWithholdTrans.dataAreaId
                && !(taxWithholdUncommitted.HeadingTableId == _taxWithholdTrans.HeadingTableId
                        && taxWithholdUncommitted.HeadingRecId == _taxWithholdTrans.HeadingRecId)
                && !(purchTable.RecId && taxWithholdUncommitted.HeadingTableId == purchTable.TableId //PurchaseOrder taxes corresponding to the PurchInvoice
                        && taxWithholdUncommitted.HeadingRecId == purchTable.RecId)
            exists join purchTablePR
                where purchTablePR.TableId == taxWithholdUncommitted.HeadingTableId
                    && purchTablePR.RecId  == taxWithholdUncommitted.HeadingRecId
                    && purchTablePR.PurchStatus == PurchStatus::Backorder
                    && purchTablePR.DocumentState == VersioningDocumentState::Draft
            notexists join sourceDocumentLine
                where sourceDocumentLine.RecId == taxWithholdUncommitted.SourceDocumentLine;

        //Delete for taxWithholdUncommited for unlocked ledger journal table
        delete_from taxWithholdUncommitted
            where (taxWithholdUncommitted.AccountNumber == _taxWithholdTrans.VendAccount
                || taxWithholdUncommitted.AccountNumber == _taxWithholdTrans.CustAccount)
                && taxWithholdUncommitted.dataAreaId == _taxWithholdTrans.dataAreaId
            exists join ledgerJournalTable
                where ledgerJournalTable.TableId == taxWithholdUncommitted.HeadingTableId
                && ledgerJournalTable.RecId == taxWithholdUncommitted.HeadingRecId
                && ledgerJournalTable.TableId == _taxWithholdTrans.HeadingTableId
                && ledgerJournalTable.RecId != _taxWithholdTrans.HeadingRecId
                && ledgerJournalTable.SystemBlocked == NoYes::No
            notexists join taxWithholdWorkRegulation
                where taxWithholdWorkRegulation.SourceTableId == taxWithholdUncommitted.SourceTableId
                && taxWithholdWorkRegulation.SourceRecId == taxWithholdUncommitted.SourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>TaxWithholdUncommitted_IN</c> records for the voucher.
    /// </summary>
    /// <param name="_documentTableId">
    /// The document table ID.
    /// </param>
    /// <param name="_documentId">
    /// The document table ID.
    /// </param>
    /// <param name="_voucher">
    /// The specified voucher.
    /// </param>
    static public void deleteForVoucher(RefTableId _documentTableId,
                                        RefRecId _documentId,
                                        Voucher _voucher)
    {
        TaxWithholdUncommitted_IN   taxUncommittedWHT;

        // delete any existing TaxWithholdUncommitted_IN records as a set
        delete_from taxUncommittedWHT
        where taxUncommittedWHT.HeadingRecId == _documentId &&
              taxUncommittedWHT.HeadingTableId == _documentTableId &&
              taxUncommittedWHT.Voucher == _voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeAsNonTaxedRecordsInVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>TaxWithholdUncommitted_IN</c> records for the voucher
    /// </summary>
    /// <param name="_documentTableId">
    /// The document table ID.
    /// </param>
    /// <param name="_documentId">
    /// The document table ID.
    /// </param>
    /// <param name="_voucher">
    /// The specified voucher is set to empty if this record is not included in tax calculation as non-taxed transactions
    /// </param>
    public static void includeAsNonTaxedRecordsInVoucher(RefTableId    _documentTableId,
                                                         RefRecId      _documentId,
                                                         Voucher       _voucher)
    
    {
        TaxWithholdUncommitted_IN   taxUncommittedWHT;
    
        // Update previously included TaxWithholdUncommitted_IN records for tax calculation
        update_recordset taxUncommittedWHT
            setting TaxCalcAsNonTaxTransInVoucher = ""
            where taxUncommittedWHT.HeadingRecId == _documentId
                && taxUncommittedWHT.HeadingTableId == _documentTableId
                && taxUncommittedWHT.TaxCalcAsNonTaxTransInVoucher == _voucher;
    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64042</DeveloperDocumentation>
	<Label>@GLS64043</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TaxWithholdCode</TitleField1>
	<TitleField2>SourceDocumentLine</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>DocumentLIneIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Tax</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceCurrencyCOde</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConcessionCertificate</Name>
			<Label>@SYS4003652</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConcessionCertificateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TurnoverThreshold</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverlookThreshold</Name>
			<Label>@GLS5361</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OverlookThreshold</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reason</Name>
			<Label>@SYS4003411</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Reason</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTax</Name>
			<Label>@SYS7372</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AcknowledgermentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionToRemittance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NatureOfRemittance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxApplicability</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AccountNumber_IN</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AcknowledgermentNumber</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdAcknowledgementNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AdvancePayment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountOriginMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalculationDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcUncalcPostedTrans</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CalcUncalcPostedTrans_IN</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Company</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<Label>@SYS10499</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConcessionCertificateNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CertificateNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CountryRegionToRemittance</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdCountryToRemitRefRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CPOrigInvoiceRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchangeRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRateSecond</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchrateSecondary</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExemptTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdExempt_IN</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HeadingRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>HeadingTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPartOfTurnOver</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IsPartOfTurnOver_IN</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsTaxCalculated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimensionDefaultAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NatureOfRemittance</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWitholdNatureOfRemittanceRefRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverlookThreshold</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IsOverLook_IN</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RateOfDeduction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Reason</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdReasonCode_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Source</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SourceBaseAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBaseCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SourceBaseAmountCurCalculated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBaseCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SourceBaseAmountCurRaw</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBase</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SourceBaseAmountCurRegulated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBaseCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceCurrencyCOde</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SourceRegulateAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegulationAmountCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SourceTaxAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SourceTaxAmountCurReal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SourceTransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceTransRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceTransTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceTransVoucher</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxApplicability</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdTaxApplicability_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxAutogenerated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAutoGenerated</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBaseAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBase</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBaseAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBaseCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBaseAmountRaw</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBase</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBaseQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxQty</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdCode</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdGroup</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxWithholdType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxWithholdCodeType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdValue</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ThresholdValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValidFrom_IN</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ThresholdValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValidTo_IN</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransactionStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxWithholdTransactionstatus_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TurnoverThreshold</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TurnoverThreshold_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCalcAsNonTaxTransInVoucher</Name>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<HelpText>@TaxWithholdUncommitted_IN:VoucherTransBaseAmountWithCurVoucher</HelpText>
			<Label>@TaxWithholdUncommitted_IN:TaxCalcAsNonTaxTransInVoucher</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsTaxInterim</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DocumentLIneIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Company</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CPOrigInvoiceRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DocumentHeaderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HeadingTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HeadingRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Company</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxWithholdMap_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>SourceCurrencyCOde</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>SourceRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRegulateAmountCur</MapField>
					<MapFieldTo>SourceRegulateAmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>SourceTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTaxAmountCur</MapField>
					<MapFieldTo>SourceTaxAmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdCode</MapField>
					<MapFieldTo>TaxWithholdCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdGroup</MapField>
					<MapFieldTo>TaxWithholdGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdType</MapField>
					<MapFieldTo>TaxWithholdType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>CalculationDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>CPOrigCustTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CPOrigCustTrans_CustTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CPOrigCustTrans_TaxWithholdUncommitted_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CPOrigInvoiceRefRecId</Name>
					<Field>CPOrigInvoiceRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CPOrigVendTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CPOrigVendTrans_VendTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CPOrigVendTrans_TaxWithholdUncommitted_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CPOrigInvoiceRefRecId</Name>
					<Field>CPOrigInvoiceRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdUncommitted_IN</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRecId</Name>
					<Field>SourceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ParentRecIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdUncommitted_IN</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeadingRecId</Name>
					<Field>HeadingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTransRecId</Name>
					<Field>SourceTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimensionDefaultAccount</Name>
					<SourceEDT>LedgerDimensionDefaultAccount</SourceEDT>
					<Field>LedgerDimensionDefaultAccount</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceCurrencyCOde</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>SourceCurrencyCOde</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxCurrencyCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxCurrencyCode_Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxCurrencyCode_TaxWithholdUncommitted_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>TaxCurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdCountryRegionToRemittance_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdCountryRegionToRemittance_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegionToRemittance</Name>
					<Field>CountryRegionToRemittance</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdGroup</Name>
					<SourceEDT>TaxWithholdGroup</SourceEDT>
					<Field>TaxWithholdGroup</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdNatureOfRemittance_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdNatureOfRemittance_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NatureOfRemittance</Name>
					<Field>NatureOfRemittance</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdCode</Name>
					<SourceEDT>TaxWithholdCode</SourceEDT>
					<Field>TaxWithholdCode</Field>
					<RelatedField>TaxWithholdCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTransRecId</Name>
					<Field>SourceTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>