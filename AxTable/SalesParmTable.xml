<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesParmTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesParmTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addressLading_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns string containing lading postal address for current record
    /// </summary>
    /// <returns>
    /// String containing lading postal address for current record
    /// </returns>
    public display LogisticsAddressing addressLading_RU()
    {
        return LogisticsPostalAddress::findRecId(this.LadingPostalAddress_RU).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressUnlading_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns string containing unlading postal address for current record
    /// </summary>
    /// <returns>
    /// String containing unlading postal address for current record
    /// </returns>
    public display LogisticsAddressing addressUnlading_RU()
    {
        return LogisticsPostalAddress::findRecId(this.UnladingPostalAddress_RU).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDueDateOnAddressChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the due date of a <c>SalesParmTable</c> record to a valid business day if a third-party
    /// rule exists.
    /// </summary>
    /// <remarks>
    /// This method is run when the address for a document changes.
    /// </remarks>
    public void adjustDueDateOnAddressChange()
    {
        PaymTerm paymentTerms;
        PaymCalendarSourceSalesOrderParm paymCalendarSourceSalesOrderParm;
        PaymCalendarProcessor paymentCalendarProcessor;

        paymentTerms = PaymTerm::find(this.salesTable().Payment);

        if ((paymentTerms.CustomerUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
            && PaymCalendarRule::existActiveRuleForRuleType(
                PaymCalendarModuleType::Customer,
                PaymCalendarRuleType::ThirdPartyLocation))
        {
            paymCalendarSourceSalesOrderParm = PaymCalendarSourceSalesOrderParm::newCalendarSource(this);
            paymentCalendarProcessor = PaymCalendarProcessor::construct();

            this.FixedDueDate = paymentCalendarProcessor.adjustDate(
                this.FixedDueDate,
                paymentTerms.CustomerUpdateDueDate,
                paymCalendarSourceSalesOrderParm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCashDiscBaseDate</Name>
				<Source><![CDATA[
    public void calcCashDiscBaseDate()
    {
        TransDate tempDate;

        if (this.CashDiscBaseDate == dateNull() && this.CashDiscBaseDays != 0)
        {
            tempDate = this.DocumentDate ? this.DocumentDate : this.Transdate;
            this.CashDiscBaseDate = tempDate + this.CashDiscBaseDays;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfLines</Name>
				<Source><![CDATA[
    display container  checkIfLines()
    {
        container imgCon = conNull();

        if (!SalesParmLine::existTableRefId(this.ParmId, this.TableRefId))
        {
            imgCon = ImageReference::constructForSymbol(ImageReferenceSymbol::HighPriority).pack();
        }

        return imgCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfLines_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if lines for posting exist.
    /// </summary>
    /// <returns>
    ///    A <c>container</c> type with a warning symbol (exclamation mark) if there are not related lines to post.
    /// </returns>
    display container checkIfLines_RU()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
            SalesParmUpdate::find(this.ParmId).SplitInventOwnerId_RU)
        {
            if (this.inventOwnerIdCheckFailed_RU())
            {
                return ImageReference::constructForSymbol(ImageReferenceSymbol::HighPriority).pack();
            }
        }

        return this.checkIfLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoicePostingType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs check of invoice posting type specified
    /// </summary>
    /// <returns>
    /// True if check succeed; Otherwise false
    /// </returns>
    boolean checkInvoicePostingType_RU()
    {
        boolean         ok = true;
        SalesParmLine   salesParmLine;
        if (this.InvoicePostingType_RU == SalesInvoicePostingType_RU::GoodsInRoute)
        {
            while select salesParmLine
                group by OrigSalesId
                where salesParmLine.ParmId      == this.ParmId
                   && salesParmLine.TableRefId  == this.TableRefId
            {
                if (salesParmLine.salesTable().payment().Cash == NoYes::Yes)
                {
                    ok = checkFailed("@GLS114805");
                    break;
                }
            }

            ok = ok && InventProfile_RU::checkGITProfileType(this.InventProfileType_RU);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPaymentSched</Name>
				<Source><![CDATA[
    void  copyPaymentSched(CustInvoiceJour custInvoiceJour)
    {
        CustPaymSched       custPaymSched;
        CustVendPaymSched   custVendPaymSched;

        ttsbegin;

        select firstonly custPaymSched
        where custPaymSched.ExtTableId   == this.TableId &&
              custPaymSched.ExtRecId     == this.RecId;

        if (custPaymSched)
        {
            custVendPaymSched = CustVendPaymSched::construct(SysModule::Cust, custInvoiceJour);
            custVendPaymSched.copyCustVendPaymSched(custPaymSched);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdDateTime</Name>
				<Source><![CDATA[
    display CreatedDateTime createdDateTime()
    {
        CreatedDateTime createdDateTime;
        if (!this.isNonSO())
        {
            createdDateTime = this.salesTable().CreatedDateTime;
        }
        return createdDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentSched</Name>
				<Source><![CDATA[
    void  createPaymentSched()
    {
        CustVendPaymSched   custVendPaymSched;
        SalesTotals         salesTotals;
        PaymSched           paymSched  = PaymSched::find(this.paymentSchedule());

        salesTotals = SalesTotals::construct(this,SalesUpdate::All,AccountOrder::None,this.ParmId,'', this.Ordering);
        salesTotals.prepareTotalAmountCalculation();
        salesTotals.calcMarkupForTable(this.ParmId, this.SalesId);
        salesTotals.calc();

        custVendPaymSched = CustVendPaymSched::construct(SysModule::Cust,this);
        custVendPaymSched.setSalesTotals(salesTotals);
        custVendPaymSched.createPaymSched(paymSched);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        #OCCRetryCount
        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocumentsForHeader();
        }

        try
        {
            ttsbegin;
            SalesShippingStat salesShippingStat;

            delete_from salesShippingStat
                where salesShippingStat.ParmId == this.ParmId
                    && salesShippingStat.TableRefId == this.TableRefId
                    && !salesShippingStat.PackingSlipId;

            Microsoft.Dynamics.Ax.Xpp.PlatformExtensions.CommonExtensions::SetSqlUpdateIndexHint(salesShippingStat, indexStr(SalesShippingStat, ParmIdx));

            update_recordset salesShippingStat
                setting  ParmId = ''
                where  salesShippingStat.ParmId     == this.ParmId
                    && salesShippingStat.TableRefId == this.TableRefId
                    && salesShippingStat.PackingSlipId;
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }

        super();

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.postDelete_BR();
        }
        // </GBR>

    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    display LogisticsAddressing deliveryAddress()
    {
        return this.postalAddress().Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryLocation</Name>
				<Source><![CDATA[
    public LogisticsLocationRecId deliveryLocation()
    {
        return LogisticsPostalAddress::getLocation(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispVATRegistrationNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a customer VAT registration number.
    /// </summary>
    /// <returns>
    /// The customer VAT registration number to display.
    /// </returns>
    public display TaxRegistrationNumber dispVATRegistrationNum()
    {
        CompanyInfoExtension_CN companyInfoExtensionCN;

        companyInfoExtensionCN = CompanyInfoExtension_CN::findByCompany(CompanyInfo::current());

        if (companyInfoExtensionCN.TaxRegistrationType)
        {
            return TaxRegistration::getTaxRegistrationNumberFromCust(this.InvoiceAccount, this.Transdate, companyInfoExtensionCN.TaxRegistrationType);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDateTime</Name>
				<Source><![CDATA[
    TransDateTime documentDateTime()
    {
        return DateTimeUtil::newDateTime(this.DocumentDate, 0 , DateTimeUtil::getCompanyTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentId</Name>
				<Source><![CDATA[
    public Num documentId(SalesParmTable _salesParmTable)
    {
        SalesParmSubLine    salesParmSubLine;
        SalesParmLine       salesParmLine;
        Num                 documentId;
        NumberOfRecords     oneSubLines     = 1;
        NumberOfRecords     zeroSubLines    = 0;

        switch (SalesParmSubLine::subLinesTable(_salesParmTable))
        {
            case zeroSubLines:
                // <GEEU>
                if (this.PackingSlipIdForUpdate_W)
                {
                    documentId = "@SYS342615";
                }
                else
                {
                    // </GEEU>
                    documentId = '';
                    // <GEEU>
                }
                // </GEEU>
                break;

            case oneSubLines:
                select firstonly DocumentId from salesParmSubLine
                    exists join salesParmLine
                    where salesParmSubLine.LineRefRecId == salesParmLine.RecId
                       && salesParmLine.ParmId          == _salesParmTable.ParmId
                       && salesParmLine.TableRefId      == _salesParmTable.TableRefId;

                documentId = salesParmSubLine.DocumentId;
                break;

            default:
                documentId = "@SYS342615"; //More than one journal line attached to the parm line
                break;
        }

        return documentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public display SalesDocumentStatus documentStatus()
    {
        SalesDocumentStatus salesDocumentStatus;

        if (!this.isNonSO())
        {
            salesDocumentStatus = this.salesTable().DocumentStatus;
        }

        return salesDocumentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalEstablishment_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string containing the id of the fiscal establishment based on the invent site id that is linked to the sales parm table
    /// </summary>
    /// <returns>
    /// id of the fiscal establishment
    /// </returns>
    public display FiscalEstablishmentId_BR fiscalEstablishment_BR()
    {
        if (BrazilParameters::isEnabled())
        {
            return InventSite::find(this.InventSiteId).fiscalEstablishment().FiscalEstablishmentId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the exchange rate date based on the type of exchange rate date in a sales record.
    /// </summary>
    /// <param name="_date">
    /// The default return date.
    /// </param>
    /// <param name="_salesTable">
    /// A <c>SalesTable</c> record; optional.
    /// </param>
    /// <returns>
    /// The exchange rate date.
    /// </returns>
    public date getExchRateDate(date _date, SalesTable _salesTable = this.salesTable())
    {
        date exchRateDate;

        switch (SalesParameters::find().DateOfExchRate_W)
        {
            case DateOfExchRate_W::DateOfVATRegister:
                exchRateDate = this.VatDueDate_W;
                break;

            case DateOfExchRate_W::DocumentDate:
                exchRateDate = this.DocumentDate;
                break;

            case DateOfExchRate_W::DocumentDateEU:
                if (TaxGroupHeading::find(_salesTable.TaxGroup).euTrade_W)
                {
                    exchRateDate = this.DocumentDate;
                }
                break;

            case DateOfExchRate_W::Auto:
                exchRateDate = DateOfExchRateAutoDetermination_W::getDate(this);
                break;
        }

        if (!exchRateDate)
        {
            exchRateDate = _date;
        }

        return exchRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExportInvoiceDate_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds customs export invoice date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    display CustomsDate_IN getExportInvoiceDate_IN()
    {
        return CustInvoiceJour::findCustomsExportInvoiceDate_IN(this.SalesId, this.CustomsExportInvoiceId_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceive_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Export quantity for specified salesId and CustomsExportInvoiceId.
    /// </summary>
    /// <returns>
    /// Sum of Export order quantity for selected ExportOrder.
    /// </returns>
    display CustomsQty_IN getReceive_IN()
    {
        return CustomsExportOrderLine_IN::getReceive(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingQuantity_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the remaining quantity.
    /// </summary>
    /// <returns>
    /// Returns the remaining quantity.
    /// </returns>
    display CustomsQty_IN getRemainingQuantity_IN()
    {
        return(this.getReceive_IN() - this.getShippingBillQuantity_IN());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShippingBillQuantity_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets shippingBill quantity for specified SalesId and InvoiceId.
    /// </summary>
    /// <returns>
    /// The shippingBill quantity for given salesId and invoiceId.
    /// </returns>
    display CustomsQty_IN getShippingBillQuantity_IN()
    {
        return CustomsShippingBillTrans_IN::getShippingBillQuantityUpdated(this.SalesId, this.CustomsExportInvoiceId_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Aggregates line amounts for all lines of the sales order.
    /// </summary>
    /// <returns>
    /// Total amount of all lines.
    /// </returns>
    public Amount getTotalLineAmount()
    {
        SalesParmLine salesParmLine;

        select sum(LineAmount) from salesParmLine
            where salesParmLine.ParmId == this.ParmId &&
            salesParmLine.TableRefId == this.TableRefId;

        return salesParmLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransationEntity_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get entity of transaction based on logistics role type.
    /// </summary>
    /// <param name="_roleType">
    /// Logistics role type.
    /// </param>
    /// <returns>
    /// Buffer which represents the entity.
    /// </returns>

    public Common getTransationEntity_RU(LogisticsLocationRoleType _roleType)
    {
        boolean     isCreditNote    = false;
        SalesTable  salesTable      = this.salesTable();

        if ( salesTable )
        {
            return salesTable.getTransationEntity_RU(_roleType);
        }

        return CompanyInfo::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAddresses_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the lading and unlading to addresses.
    /// </summary>
    /// <remarks>
    /// A <c>LogisticsLocationRoleType::Lading_W</c> and <c>LogisticsLocationRoleType::Unlading_W</c> enumerations value is used to search for default
    /// locations.
    /// </remarks>
    public void initAddresses_RU()
    {
        boolean     isCreditNote = false;
        SalesTotals salesTotals;
        SalesTable  salesTable = this.salesTable();

        RecId getDefaultLogisticsLocation(Common _entity, LogisticsLocationRoleType _role)
        {
            LogisticsLocationDefault        defaults;
            LogisticsLocationRoleType       typeForFind;
            LogisticsLocation               logisticsLocation;

            defaults = LogisticsLocationDefault::construct(_entity);

            typeForFind = defaults.defaultExistsByType(_role) ?
                        _role :
                        LogisticsLocationRoleType::Delivery;

            logisticsLocation = LogisticsLocationDefault::findSimpleDefaultByRoleType(_entity, typeForFind);

            return LogisticsPostalAddress::findByLocation(logisticsLocation.RecId).RecId;
        }

        RecId getDefaultLadingLogisticsLocation(SalesTable _salesTable)
        {
            InventLocation                  inventLocation;
            SysGroup                        ladingLocationId;
            VendTable                       vendTable;
            RecId                           addressId;
            //warehouse
            if (_salesTable.InventLocationId)
            {
                inventLocation = InventLocation::find(_salesTable.InventLocationId);
                addressId = getDefaultLogisticsLocation(inventLocation, LogisticsLocationRoleType::Lading_W);
            }
            //shipment
            if (!addressId && _salesTable.salesTable_RU().ConsignorAccount_RU)
            {
                vendTable = VendTable::find(_salesTable.salesTable_RU().ConsignorAccount_RU);
                addressId = getDefaultLogisticsLocation(vendTable, LogisticsLocationRoleType::Lading_W);
            }
            //company
            if (!addressId)
            {
                addressId = getDefaultLogisticsLocation(CompanyInfo::find(), LogisticsLocationRoleType::Lading_W);
            }
            return addressId;
        }

        RecId getDefaultUnladingLogisticsLocation(SalesTable _salesTable)
        {
            LogisticsLocation               logisticsLocation;
            CustTable                       custTable;
            RecId                           addressId;
            //consignee
            if (_salesTable.salesTable_RU().ConsigneeAccount_RU)
            {
                custTable = CustTable::find(_salesTable.salesTable_RU().ConsigneeAccount_RU);
                addressId = getDefaultLogisticsLocation(custTable, LogisticsLocationRoleType::Unlading_W );
            }
            //consignor
            if (!addressId && _salesTable.CustAccount)
            {
                custTable = CustTable::find(_salesTable.CustAccount);
                addressId = getDefaultLogisticsLocation(custTable, LogisticsLocationRoleType::Unlading_W );
            }
            return addressId;
        }

        //check if credit note
        if ( salesTable && salesTable.CurrencyCode)
        {
            salesTotals = SalesTotals::construct(salesTable);
            isCreditNote = salesTotals.isCreditNote();
        }

        if (isCreditNote)
        {
            this.UnladingPostalAddress_RU   = getDefaultLadingLogisticsLocation(salesTable);
            this.LadingPostalAddress_RU     = getDefaultUnladingLogisticsLocation(salesTable);
        }
        else
        {
            this.LadingPostalAddress_RU     = getDefaultLadingLogisticsLocation(salesTable);
            this.UnladingPostalAddress_RU   = getDefaultUnladingLogisticsLocation(salesTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjProposalItem</Name>
				<Source><![CDATA[
    void  initFromProjProposalItem(ProjProposalItem  projProposalItem)
    {
        SalesTable localSalesTable = projProposalItem.salesTable();

        this.SalesId            = projProposalItem.SalesId;
        this.SalesName          = localSalesTable.SalesName;
        this.CustAccount        = projProposalItem.CustAccount;
        this.InvoiceAccount     = localSalesTable.InvoiceAccount;
        this.CurrencyCode       = localSalesTable.CurrencyCode;
        this.ProjId             = localSalesTable.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    void  initFromSalesTable(SalesTable  salesTable)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        #EECountryRegionCodes
        // </GEERU>
        // <GBR>
        SalesTable_BR salesTable_BR;
        // </GBR>
        SalesTable_W        salesTable_W;

        this.SalesId            = salesTable.SalesId;
        this.SalesName          = salesTable.SalesName;
        this.InventSiteId       = salesTable.InventSiteId;
        this.DeliveryName       = salesTable.DeliveryName;
        this.DeliveryPostalAddress = salesTable.DeliveryPostalAddress;
        this.DlvMode            = salesTable.DlvMode;
        this.DlvTerm            = salesTable.DlvTerm;
        this.CustAccount        = salesTable.CustAccount;
        this.InvoiceAccount     = salesTable.InvoiceAccount;
        this.CurrencyCode       = salesTable.CurrencyCode;
        this.FixedDueDate       = salesTable.FixedDueDate;
        this.ProjId             = salesTable.ProjId;
        this.ReturnItemNum      = salesTable.ReturnItemNum;
        this.ReturnStatus       = salesTable.ReturnStatus;
        this.ReturnDeadline     = salesTable.ReturnDeadline;
        this.ShipCarrierAccount = salesTable.ShipCarrierAccount;
        this.ShipCarrierId      = salesTable.ShipCarrierId;
        this.ShipCarrierPostalAddress = salesTable.ShipCarrierPostalAddress;
        this.CashDiscBaseDate   = salesTable.CashDiscBaseDate;
        this.CashDiscBaseDays   = salesTable.CashDiscBaseDays;
        this.TaxId              = salesTable.TaxId;
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.bolDeliveryDate_RU      = salesTable.deliveryDateDisplay();
            this.PostingProfile_RU       = salesTable.PostingProfile;
            this.InvoicePostingType_RU   = salesTable.salesTable_RU().InvoicePostingType_RU;
            this.TransportInvoiceType_RU = SalesParameters::find().TransportInvoiceType_RU;
            this.initAddresses_RU();
        }
        // </GEERU>

        if (IntrastatCountryRegionParameters::isInEUByIsoCode())
        {
            TransportationDocument::copy(salesTable, this);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX])
         && EInvoiceCFDIParameters_MX::find().CFDIVersion >= EInvoiceCFDIVersion_MX::V3_3)
        {
            this.CFDIEnabled_MX = CustTable::find(this.CustAccount).CFDIEnabled_MX;
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            salesTable_BR               = salesTable.salesTable_BR();
            this.FiscalDocumentType_BR  = salesTable_BR.FiscalDocumentType_BR;
        }
        // </GBR>

        // <GEEPL>
        this.TaxPeriodPaymentCode_PL    = salesTable.TaxPeriodPaymentCode_PL;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            this.SalesDate_W = this.getOriginalInvoiceDate_PL(salesTable.SalesId);
        }
        // </GEEPL>

        if (SalesTable_W::isLegalEntityInCountryRegion())
        {
            salesTable_W = salesTable.salesTable_W();
            this.EntryCertificateRequired_W  = salesTable_W.EntryCertificateRequired_W;
            this.IssueOwnEntryCertificate_W  = salesTable_W.IssueOwnEntryCertificate_W;
            // <GMY>
            if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
            {
                this.InvoiceType_MY = salesTable_W.InvoiceType_MY;
            }
            // </GMY>
        }

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.ProvisionalAssessment_IN = salesTable.salesTable_W().ProvisionalAssessment_IN;
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalInvoiceDate_PL</Name>
				<Source><![CDATA[
    private SalesDate_W getOriginalInvoiceDate_PL(SalesId _salesId)
    {
        SalesLine salesLine;
        CustInvoiceTrans custInvoiceTrans;
        CustInvoiceJour custInvoiceJour;
        CustInvoiceJour_W custInvoiceJour_W;

        select maxof(SalesDate_W) from custInvoiceJour_W
            exists join custInvoiceJour
                where custInvoiceJour.RecId == custInvoiceJour_W.CustInvoiceJour
            exists join custInvoiceTrans
                where custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId
            exists join salesLine
                where custInvoiceTrans.RecId == salesLine.RefReturnInvoiceTrans_W
                && salesLine.salesId == _salesId
                && salesLine.CreditNoteInternalRef_PL
                && salesLine.RefReturnInvoiceTrans_W;

        return custInvoiceJour_W.SalesDate_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // <GEERU>
        this.setInvoicePostingType_RU();
        // </GEERU>
        ttsbegin;

        if (!this.TableRefId)
            this.TableRefId = formletterParmData::getNewTableRefId();

        super();

        SalesParmSubTable::createFromSalesParmTable(this);

        ttscommit;

        // <GEEPL>
        PlInventPackageParm::updateFromSalesParmTable(this);
        // </GEEPL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventOwnerIdCheckFailed_RU</Name>
				<Source><![CDATA[
    boolean inventOwnerIdCheckFailed_RU()
    {
        SalesParmLine                    salesParmLine;
        EcoResTrackingDimensionGroupItem ecoResTrackingDimensionGroupItem;
        InventDim                        inventDim;
        InventProfile_RU                 inventProfile;
        boolean                          checkFailed;

        while select TrackingDimensionGroup from ecoResTrackingDimensionGroupItem
            group by TrackingDimensionGroup
                where ecoResTrackingDimensionGroupItem.ItemDataAreaId == this.DataAreaId
            exists join salesParmLine
                where salesParmLine.ItemId                          == ecoResTrackingDimensionGroupItem.ItemId
                   && salesParmLine.ParmId                          == this.ParmId
                   && salesParmLine.TableRefId                      == this.TableRefId
                   && salesParmLine.InventOwnerId_RU                == ''
            exists join inventDim
                where inventDim.InventDimId                         == salesParmLine.InventDimId
            exists join inventProfile
                where inventProfile.InventProfileId                 == inventDim.InventProfileId_RU
                   && inventProfile.InventOwnerIdSplitSalesInvoice  == NoYes::Yes
        {
            if (EcoResTrackingDimGroupSetup::newDimensionGroup(
                        ecoResTrackingDimensionGroupItem.TrackingDimensionGroup).getFieldSetup(
                            fieldNum(InventDim, InventOwnerId_RU)).isActive())
            {
                checkFailed = true;
                break;
            }
        }

        return checkFailed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonSO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an invoice is associated with a sales order.
    /// </summary>
    /// <returns>
    /// true if the invoice is not associated with a sales order; otherwise, false.
    /// </returns>
    public boolean isNonSO()
    {
        return !this.SalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDocumentDate_W</Name>
				<Source><![CDATA[
    public void modifiedDocumentDate_W(boolean _triggerDateChange = true)
    {
        SalesTable      tmpSalesTable;
        TaxGroupHeading tmpTaxGroupHeading;

        if (! isConfigurationkeyEnabled(configurationKeyNum(TradeDates_W)))
            return;

        tmpSalesTable      = this.salesTable();
        tmpTaxGroupHeading = TaxGroupHeading::find(tmpSalesTable.TaxGroup);

        if (   (!this.VatDueDate_W || VatDueDateFeature::isEnabled())
            && TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            switch (tmpTaxGroupHeading.FillVATDueDate_W)
            {
                case FillVATDueDate_W::Manually     :
                case FillVATDueDate_W::SalesDate    :
                case FillVATDueDate_W::PostingDate  :
                case FillVATDueDate_W::LastDeliveryDate :
                    // do nothing
                    break;
                case FillVATDueDate_W::DocumentDate :
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00030, funcName());
                    this.VatDueDate_W = this.DocumentDate;
                    if (_triggerDateChange)
                    {
                        this.modifiedVATDueDate_W(false);
                    }
                    break;
                case FillVATDueDate_W::Customized :
                    if (TaxVATDueDateUtility::isVATDueDateDocumentDateCustomized(tmpTaxGroupHeading))
                    {
                        this.VatDueDate_W = TaxVATDueDateUtility::calculateVATDueDateBasedOnDocumentDate(tmpTaxGroupHeading, this.DocumentDate);
                        if (_triggerDateChange)
                        {
                            this.modifiedVATDueDate_W(false);
                        }
                    }
                    break;
                default                             :
                    throw error(strFmt("@SYS73815", tmpTaxGroupHeading.FillVATDueDate_W));
            }
        }

        if (! this.SalesDate_W)
        {
            switch (tmpTaxGroupHeading.FillSalesDate_W)
            {
                case FillSalesDate_W::Manually         :
                case FillSalesDate_W::VATDueDate       :
                case FillSalesDate_W::PostingDate      :
                case FillSalesDate_W::LastDeliveryDate :
                    // do nothing
                    break;
                case FillSalesDate_W::DocumentDate     :
                    this.SalesDate_W = this.DocumentDate;
                    if (_triggerDateChange)
                    {
                        this.modifiedSalesDate_W(false);
                    }
                    break;
                default                                :
                    throw error(strFmt("@SYS73815", tmpTaxGroupHeading.FillSalesDate_W));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(SalesParmTable, SalesId):
                this.Ordering = this.salesTable().DocumentStatus;
                this.BankLCExportLine = 0;
                // <GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    this.InvoicePostingType_RU = this.salesTable_RU().InvoicePostingType_RU;
                }
                // </GEERU>
                break;
            //<GEERU>
            case fieldNum(SalesParmTable, TransportationPayerType_RU):
                this.TransportationPayer_RU = '';
                break;
            //</GEERU>
            // <GEEU>
            case fieldNum(SalesParmTable, FixedDueDate):
                this.modifiedVATDueDate_W();
                break;
            case fieldNum(SalesParmTable, VatDueDate_W):
                this.modifiedVATDueDate_W();
                break;
            // </GEEU>
            case fieldNum(SalesParmTable, CustBankAccountId):
            case fieldNum(SalesParmTable, DeliveryPostalAddress):
                if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
                {
                    this.adjustDueDateOnAddressChange();
                }
                break;
            case fieldNum(SalesParmTable, Transdate):
            case fieldNum(SalesParmTable, DocumentDate):
                this.transOfDocumentDateModified();
                // <GTE>
                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                {
                    this.markCurrentTaxDocumentTaxStatusDirty();
                }
                // </GTE>
                break;

            // <GBR>
            case fieldNum(SalesParmTable, FiscalDocumentAccessKey_BR):
                this.FiscalDocumentAccessKey_BR = strKeep(this.FiscalDocumentAccessKey_BR, '0123456789');
                this.FiscalDocumentNumber_BR = EFDocAccessKeyBase_BR::getInvoiceNumber(this.FiscalDocumentAccessKey_BR);
                this.FiscalDocumentSeries_BR = EFDocAccessKeyBase_BR::getInvoiceSeries(this.FiscalDocumentAccessKey_BR);
                break;

            case fieldNum(SalesParmTable, FiscalDocumentModel_BR):
                this.FiscalDocumentNumber_BR = "";
                this.FiscalDocumentSeries_BR = "";
                this.FiscalDocumentAccessKey_BR = "";
            case fieldnum(SalesParmTable, EntryCertificateRequired_W) :
                if (this.EntryCertificateRequired_W == NoYes::No)
                {
                    this.IssueOwnEntryCertificate_W = NoYes::No;
                }
                break;
            // </GBR>

            default: break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedSalesDate_W</Name>
				<Source><![CDATA[
    public void modifiedSalesDate_W(boolean _triggerDateChange = true)
    {
        SalesTable      salesTable;
        TaxGroupHeading taxGroupHeading;

        SalesParmLine   salesParmLine;
        InventTrans     inventTrans;

        InventTransOrigin inventTransOrigin;

        if (! isConfigurationkeyEnabled(configurationKeyNum(TradeDates_W)))
            return;

        salesTable      = this.salesTable();
        taxGroupHeading = TaxGroupHeading::find(salesTable.TaxGroup);

        if (! this.SalesDate_W && ! this.orig().SalesDate_W)
        {
            switch (taxGroupHeading.FillSalesDate_W)
            {
                case FillSalesDate_W::Manually     :
                    // do nothing
                    break;
                case FillSalesDate_W::DocumentDate :
                    this.SalesDate_W = this.DocumentDate;
                    break;
                case FillSalesDate_W::PostingDate  :
                    this.SalesDate_W = this.Transdate;
                    break;
                case FillSalesDate_W::VATDueDate   :
                    this.SalesDate_W = this.VatDueDate_W;
                    break;
                case FillSalesDate_W::LastDeliveryDate  :
                    TransDate lastDeliveryDate = this.getLastDeliveryDate();
                    this.SalesDate_W = lastDeliveryDate ? lastDeliveryDate : this.Transdate;
                    break;
                default                             :
                    throw error(strFmt("@SYS73815", taxGroupHeading.FillSalesDate_W));
            }
        }

        if (   (!this.VatDueDate_W || VatDueDateFeature::isEnabled())
            && TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            switch (taxGroupHeading.FillVATDueDate_W)
            {
                case FillVATDueDate_W::Manually     :
                case FillVATDueDate_W::DocumentDate :
                case FillVATDueDate_W::PostingDate  :
                case FillVATDueDate_W::Customized :
                    // do nothing
                    break;
                case FillVATDueDate_W::SalesDate    :
                    this.VatDueDate_W = this.SalesDate_W;
                    if (_triggerDateChange)
                    {
                        this.modifiedVATDueDate_W(false);
                    }
                    break;
                case FillVATDueDate_W::LastDeliveryDate :
                    TransDate lastDeliveryDate = this.getLastDeliveryDate();
                    this.VatDueDate_W = lastDeliveryDate ? lastDeliveryDate : this.Transdate;
                    if (_triggerDateChange)
                    {
                        this.modifiedVATDueDate_W(false);
                    }
                    break;
                default                             :
                    throw error(strFmt("@SYS73815", taxGroupHeading.FillVATDueDate_W));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedTransDate_W</Name>
				<Source><![CDATA[
    public void modifiedTransDate_W(boolean _triggerDateChange = true)
    {
        SalesTable      tmpSalesTable;
        TaxGroupHeading tmpTaxGroupHeading;
        boolean         triggerDateChange  = _triggerDateChange && ! this.VatDueDate_W;

        if (! isConfigurationkeyEnabled(configurationKeyNum(TradeDates_W)))
            return;

        tmpSalesTable      = this.salesTable();
        tmpTaxGroupHeading = TaxGroupHeading::find(tmpSalesTable.TaxGroup);

        // exception in bahavior: DVR is always filled
        if (TaxVATDueDateUtility::isVATDueDateBasedOnPostingDate(tmpTaxGroupHeading)
            && TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            this.VatDueDate_W = TaxVATDueDateUtility::calculateVATDueDateBasedOnPostingDate(tmpTaxGroupHeading, this.Transdate);
            if (triggerDateChange)
            {
                this.modifiedVATDueDate_W(false);
            }
        }

        if (! this.SalesDate_W && tmpTaxGroupHeading.FillSalesDate_W == FillSalesDate_W::PostingDate)
        {
            this.SalesDate_W = this.Transdate;
            if (_triggerDateChange)
            {
                this.modifiedSalesDate_W(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedVATDueDate_W</Name>
				<Source><![CDATA[
    public void modifiedVATDueDate_W(boolean _triggerDateChange = true)
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(TradeDates_W)))
            return;

        SalesTable tmpSalesTable = this.salesTable();
        TaxGroupHeading tmpTaxGroupHeading = TaxGroupHeading::find(tmpSalesTable.TaxGroup);

        if (!this.VatDueDate_W && !this.orig().VatDueDate_W && TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            switch (tmpTaxGroupHeading.FillVATDueDate_W)
            {
                case FillVATDueDate_W::Manually:
                    // do nothing
                    break;
                case FillVATDueDate_W::SalesDate:
                    this.VatDueDate_W = this.SalesDate_W;
                    break;
                case FillVATDueDate_W::DocumentDate:
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00030, funcName());
                    this.VatDueDate_W = this.DocumentDate;
                    break;
                case FillVATDueDate_W::PostingDate:
                    this.VatDueDate_W = this.Transdate;
                    break;
                case FillVATDueDate_W::LastDeliveryDate:
                    TransDate lastDeliveryDate = this.getLastDeliveryDate();
                    this.VatDueDate_W = lastDeliveryDate ? lastDeliveryDate : this.Transdate;
                    break;
                case FillVATDueDate_W::Customized:
                    this.VatDueDate_W = TaxVATDueDateUtility::calculateVATDueDateCustomized(
                        tmpTaxGroupHeading,
                        this.Transdate,
                        this.DocumentDate);
                    break;
                default:
                    throw error(strFmt("@SYS73815", tmpTaxGroupHeading.FillVATDueDate_W));
            }
        }

        if (!this.SalesDate_W)
        {
            switch (tmpTaxGroupHeading.FillSalesDate_W)
            {
                case FillSalesDate_W::Manually:
                case FillSalesDate_W::DocumentDate:
                case FillSalesDate_W::PostingDate:
                case FillSalesDate_W::LastDeliveryDate:
                    // do nothing
                    break;
                case FillSalesDate_W::VATDueDate:
                    this.SalesDate_W = this.VatDueDate_W;
                    if (_triggerDateChange)
                    {
                        this.modifiedSalesDate_W(false);
                    }
                    break;
                default:
                    throw error(strFmt("@SYS73815", tmpTaxGroupHeading.FillSalesDate_W));
            }
        }
        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::Sales))
        {
            if (this.VatDueDate_W)
            {
                TaxSpecificExchangeRate::updateOrDeleteByVATDueDate(tmpSalesTable.TableId, tmpSalesTable.RecId, this.VatDueDate_W);
            }
        }
        // <GEEU>
        else if (TaxParameters::isBankExchRateEnabled_W())
        {
            SalesTaxTransactionExchangeRate salesTaxTransactionExchangeRate = SalesTaxTransactionExchangeRate::findBySourceRecord(tmpSalesTable.TableId, tmpSalesTable.RecId);

            if (!salesTaxTransactionExchangeRate || this.VatDueDate_W != salesTaxTransactionExchangeRate.DateOfVATRegister)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00009, funcName());
                SalesTaxExchangeRateHelper::maintainSalesTaxTransactionExchangeRate(
                    tmpSalesTable, this.CurrencyCode, TransactionType::Sales, this.VatDueDate_W);
            }
        }
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfLines</Name>
				<Source><![CDATA[
    display Lines  numberOfLines()
    {
        SalesParmLine  salesParmLine;

        select count(RecId) from salesParmLine
            where salesParmLine.ParmId      == this.ParmId  &&
                  salesParmLine.TableRefId  == this.TableRefId;

        return any2int(salesParmLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfTables</Name>
				<Source><![CDATA[
    Counter  numberOfTables()
    {
        SalesParmSubTable   salesParmSubTable;

        select count(RecId) from salesParmSubTable
            where salesParmSubTable.ParmId      ==  this.ParmId     &&
                  salesParmSubTable.OrigSalesId ==  this.SalesId;

        return any2int(salesParmSubTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingSlipId</Name>
				<Source><![CDATA[
    public display PackingSlipId packingSlipId(SalesParmTable _salesParmTable)
    {
        return this.documentId(_salesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postalAddress</Name>
				<Source><![CDATA[
    LogisticsPostalAddress postalAddress()
    {
        return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>needUpdateSiblingLinesInSameJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if update to sibling lines is needed within same journal. This is required if multiple <c>SalesParmLine</c> records
    /// reference the same <c>SalesLine</c>.
    /// </summary>
    /// <returns>true if sibling lines exist which must be updated; otherwise false</returns>
    public boolean needUpdateSiblingLinesInSameJournal()
    {
        SalesParmLine salesParmLineLocal;
        SalesParmLine salesParmLineAnother;
        
        select firstOnly RecId from salesParmLineLocal
            where salesParmLineLocal.ParmId        == this.ParmId
               && salesParmLineLocal.TableRefId    == this.TableRefId
            exists join salesParmLineAnother
                where salesParmLineAnother.RecId           != salesParmLineLocal.RecId
                   && salesParmLineAnother.InventTransId   == salesParmLineLocal.InventTransId
                   && salesParmLineAnother.ParmId          == this.ParmId
                   && salesParmLineAnother.TableRefId      == this.TableRefId;
        
        return salesParmLineLocal.RecId != 0;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDelete_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the related fiscal reference <c>FiscalReferenceParm_BR</c> record.
    /// </summary>
    public void postDelete_BR()
    {
        FiscalReferenceParm_BR::deleteBySource(this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postValidateWrite_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>SalesParmTable</c> current record.
    /// </summary>
    /// <param name="_ok">
    /// The result of the <c>validateWrite</c> method.
    /// </param>
    /// <returns>
    /// True if it is valid; otherwise, false.
    /// </returns>
    public boolean postValidateWrite_BR(boolean _ok)
    {
        boolean ok = _ok;

        if (!this.salesTable().hasIssueFiscalDocument_BR()
            && this.documentStatus() == DocumentStatus::PackingSlip
            && FiscalDocModel_BR::find(this.FiscalDocumentModel_BR).IsForNFeFederal
            && !this.FiscalDocumentAccessKey_BR)
        {
            ok = checkFailed("@SYS4110579");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingTime</Name>
				<Source><![CDATA[
    display SysInt64 processingTime()
    {
        return DateTimeUtil::getDifference(this.EndDateTime, this.StartDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySalesParmLine</Name>
				<Source><![CDATA[
    Query querySalesParmLine(boolean _forupdate = false)
    {
        Query                 query = SysQuery::queryFromTableRelation(this, tableNum(SalesParmLine), _forupdate);
        QueryBuildDataSource  queryParmLineDS = query.dataSourceTable(tableNum(SalesParmLine));
        boolean               skipZeroParmLines = queryParmLineDS && !this.CustPackingSlipJour;

        // <GEEU>
        if (skipZeroParmLines &&
            !this.salesTable().isCreditNote_PL())
        // </GEEU>
        {
            queryParmLineDS.addRange(fieldNum(SalesParmLine, DeliverNow)).value(queryValue('!0'));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query object that iterates related sales order records.
    /// </summary>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to select the records; optional.
    /// </param>
    /// <returns>
    /// A query object that iterates related sales order records.
    /// </returns>
    public Query querySalesTable(boolean _forupdate = false)
    {
        Query                 query                            = new Query();
        QueryBuildDataSource  queryDataSourceSalesTable        = SysQuery::findOrCreateDataSource(query, tableNum(SalesTable));
        QueryBuildDataSource  queryDataSourceSalesParmSubTable = SysQuery::findOrCreateDataSource(query, tableNum(SalesParmSubTable), tableNum(SalesTable));

        queryDataSourceSalesParmSubTable.addLink(fieldNum(SalesTable, SalesId), fieldNum(SalesParmSubTable, OrigSalesId));
        queryDataSourceSalesParmSubTable.joinMode(JoinMode::ExistsJoin);
        SysQuery::findOrCreateRange(queryDataSourceSalesParmSubTable, fieldNum(SalesParmSubTable, ParmId)).value(queryValue(this.ParmId));
        SysQuery::findOrCreateRange(queryDataSourceSalesParmSubTable, fieldNum(SalesParmSubTable, TableRefId)).value(queryValue(this.TableRefId));

        queryDataSourceSalesTable.update(_forupdate);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesDeadline</Name>
				<Source><![CDATA[
    public display SalesDeadline salesDeadline()
    {
        SalesDeadline   salesDeadline;

        if (!this.isNonSO())
        {
            salesDeadline = this.salesTable().Deadline;
        }
        return salesDeadline;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales order payment schedule.
    /// </summary>
    /// <returns>The sales order payment schedule.</returns>
    public PaymSchedId paymentSchedule()
    {
        return this.salesTable().PaymentSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesParmUpdate</Name>
				<Source><![CDATA[
    SalesParmUpdate salesParmUpdate(boolean  _forUpdate = false)
    {
        return SalesParmUpdate::find(this.ParmId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable</Name>
				<Source><![CDATA[
    public SalesTable salesTable(boolean  _forUpdate = false)
    {
        SalesTable  salesTable;

        if (!this.isNonSO())
        {
            salesTable = SalesTable::find(this.SalesId, _forUpdate);
        }
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable_RU</Name>
				<Source><![CDATA[
    private SalesTable_RU salesTable_RU(boolean _forUpdate = false)
    {
        SalesTable_RU salesTableRU;

        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && !this.isNonSO())
        {
            salesTableRU = SalesTable_RU::findBySalesId(this.SalesId, _forUpdate);
        }

        return salesTableRU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableSalesName</Name>
				<Source><![CDATA[
    public display SalesName  salesTableSalesName()
    {
        SalesName   salesName;

        if (!this.isNonSO())
        {
            salesName = this.salesTable().SalesName;
        }
        return salesName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoicePostingType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if current <c>InventProfileType_RU</c> is not compatible with invoice posting type
    /// and sets invoice posting type to Standard if not
    /// </summary>
    void setInvoicePostingType_RU()
    {
        if (this.InvoicePostingType_RU == SalesInvoicePostingType_RU::GoodsInRoute)
        {
            if (this.salesTable().payment().Cash == NoYes::Yes)
            {
                this.InvoicePostingType_RU = SalesInvoicePostingType_RU::Standard;
                warning(strFmt("@SYS76498",
                               "@GLS114805",
                               strFmt("@GLS114806", SalesInvoicePostingType_RU::Standard)));
            }

            if (! InventProfile_RU::checkGITProfileType(this.InventProfileType_RU))
            {
                this.InvoicePostingType_RU = SalesInvoicePostingType_RU::Standard;
                warning(strFmt("@SYS76498",
                               strFmt("@GLS114807", this.InventProfileType_RU),
                               strFmt("@GLS114806", SalesInvoicePostingType_RU::Standard)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipCarrierLocation</Name>
				<Source><![CDATA[
    public LogisticsLocationRecId shipCarrierLocation()
    {
        LogisticsPostalAddress address;
        select firstonly Location from address where address.RecId == this.ShipCarrierPostalAddress;
        return address.Location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transOfDocumentDateModified</Name>
				<Source><![CDATA[
    public void transOfDocumentDateModified()
    {
        TransDate tempDate;
        // <GEERU>
        #isoCountryRegionCodes
        // </GEERU>

        tempDate = this.DocumentDate ? this.DocumentDate : this.Transdate;

        if (this.CashDiscBaseDays)
        {
            this.CashDiscBaseDate = tempDate + this.CashDiscBaseDays;
        }
        else
        {
            this.CashDiscBaseDate = dateNull();
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.updateAlcoholLicenseSeriesNum_RU(tempDate);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAlcoholLicenseSeriesNum_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates sales parm lines re-initializing Alcohol licenses.
    /// </summary>
    /// <param name="_documentDate">
    ///    Date which is used to find the appropriate licenses.
    /// </param>

    void updateAlcoholLicenseSeriesNum_RU(DocumentDate   _documentDate)
    {
        SalesParmLine       salesParmLine;

        ttsBegin;

        while select forupdate salesParmLine
            where salesParmLine.ParmId      == this.ParmId
               && salesParmLine.TableRefId  == this.TableRefId
        {
            salesParmLine.setAlcoholLicenseSeriesNum_RU(_documentDate);
            salesParmLine.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchSalesOrderAutoCharges</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void researchSalesOrderAutoCharges()
    {
        if (this
            && (this.Ordering == DocumentStatus::Confirmation 
            ||  this.Ordering == DocumentStatus::Invoice)
            && AutoChargesSetupSequenceCompoundFeature::instance().isEnabled()
            && SalesParameters::find().IsMarkupResearchPriorPostingEnabled)
        {
            SalesParmSubTable salesParmSubTable;

            ttsbegin;

            while select * from salesParmSubTable
                where salesParmSubTable.ParmId == this.ParmId
                    && salesParmSubTable.TableRefId == this.TableRefId
                    && salesParmSubTable.OrigSalesId
            {
                SalesTable salesTableInternal = salesParmSubTable.salesTable();

                salesTableInternal.createMarkupTrans(true, false); // Research auto charges.
                salesTableInternal.createMarkupTrans(false, true); // Calculate tiered charges. Tiered charges are determined upon order basis in summary update scenario.
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmJobStatusContainErrors</Name>
				<Source><![CDATA[
    void  updateParmJobStatusContainErrors()
    {
        this.ParmJobStatus = ParmJobStatus::ContainErrors;
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmJobStatusExecuted</Name>
				<Source><![CDATA[
    void  updateParmJobStatusExecuted()
    {
        this.ParmJobStatus = ParmJobStatus::Executed;
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                // <GIN>
                case fieldNum(SalesParmTable, CustomsShippingBillNumberTable_IN):
                    if (this.CustomsShippingBillNumberTable_IN)
                    {
                        if (!CustomsShippingBillNumberTable_IN::checkShippingBillNumber(CustomsShippingBillNumberTable_IN::find(this.CustomsShippingBillNumberTable_IN).ShippingBillNumber))
                        {
                            ret = checkFailed(strFmt("@GLS5779",CustomsShippingBillNumberTable_IN::find(this.CustomsShippingBillNumberTable_IN).ShippingBillNumber));
                        }
                    }
                    break;
                case fieldNum(SalesParmTable, SalesId) :
                    if (this.SalesId && SalesTable::find(this.SalesId).CustomsExportOrder_IN == NoYes::Yes)
                    {
                        if (!SalesTable::checkCustomsExportOrder_IN(this.SalesId))
                        {
                            ret = checkFailed(strFmt("@GLS5772",this.SalesId));
                        }
                    }
                    break;
                case fieldNum(SalesParmTable, CustomsExportInvoiceId_IN) :
                    if (this.SalesId)
                    {
                        if (!CustInvoiceJour::checkExportInvoiceId_IN(this.SalesId, this.CustomsExportInvoiceId_IN))
                        {
                            ret = checkFailed(strFmt("@GLS5749",this.CustomsExportInvoiceId_IN));
                        }
                    }
                    break;
                // </GIN>
                // <GBR>
                case fieldNum(SalesParmTable, FiscalDocumentAccessKey_BR) :
                    if (FiscalDocModel_BR::find(this.FiscalDocumentModel_BR).IsForNFeFederal)
                    {
                        if (!EFDocAccessKeyBase_BR::validate(this.FiscalDocumentAccessKey_BR))
                        {
                            ret = checkFailed("@SYS4110579");
                        }
                    }
                    break;
                // </GBR>
                default:
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        boolean ok = super();

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (this.RecId)
            {
                ok = ok && this.checkInvoicePostingType_RU();
            }
            else
            {
                this.checkInvoicePostingType_RU();
            }
        }
        // </GEERU>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            return this.postValidateWrite_BR(ok);
        }
        // </GBR>

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkActivePerSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the current sales order is selected for posting of any kind.
    /// </summary>
    /// <param name="_salesId">
    ///    The sales order ID to verify for posting.
    /// </param>
    /// <returns>
    ///    true if the sales order is selected for posting; otherwise, false.
    /// </returns>
    static boolean checkActivePerSalesId(SalesId _salesId)
    {
        SalesParmTable      salesParmTable;
        SalesParmSubTable   salesParmSubTable;

        select firstonly RecId
        from   salesParmTable
        where  salesParmTable.ParmJobStatus == ParmJobStatus::Waiting &&
               salesParmTable.Ordering      != DocumentStatus::None
        exists join salesParmSubTable
        where  salesParmSubTable.OrigSalesId == _salesId
        &&     salesParmSubTable.ParmId      == salesParmTable.ParmId
        &&     salesParmSubTable.TableRefId  == salesParmTable.TableRefId;

        return (salesParmTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicateInvoiceId_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if same invoice id is selected in the Shipping bill, SalesEditLines form, Overview tab. If so stop parmline creation.
    /// </summary>
    /// <param name="_customsExportInvoiceid">
    /// The customer export invoice id is used to find record.
    /// </param>
    /// <param name="_salesId">
    /// The sales id is used to find record.
    /// </param>
    /// <param name="_parmId">
    /// The parm id is used to find record.
    /// </param>
    /// <returns>
    /// Returns true, if exist record; otherwise, false.
    /// </returns>
    public static boolean  checkDuplicateInvoiceId_IN(ExportInvoiceId_IN    _customsExportInvoiceid,
                                                      SalesIdBase           _salesId,
                                                      ParmId                _parmId)
    {
        if (_customsExportInvoiceid && _salesId)
        {
            return (select firstonly RecId from salesParmTable
                        where   salesParmTable.SalesId                          == _salesId                  &&
                                salesParmTable.CustomsExportInvoiceId_IN        == _customsExportInvoiceid   &&
                                salesParmTable.ParmId                           == _parmId).RecId !=0;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWithoutUpdate</Name>
				<Source><![CDATA[
    static void  deleteWithoutUpdate(ParmId  parmId)
    {
        SalesParmTable  salesParmTable;

        ttsbegin;

        delete_from salesParmTable
            index hint ParmIdSalesIdIdx
            where salesParmTable.ParmId == parmId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean  exist(ParmId          parmId,
                          TradeLineRefId  tableRefId)
    {
        if (parmId  &&  tableRefId)
        {
            return (select firstonly RecId from salesParmTable
                        where salesParmTable.ParmId     == parmId &&
                              salesParmTable.TableRefId == tableRefId
                   ).RecId != 0;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDeliveryInformation</Name>
				<Source><![CDATA[
    static boolean existDeliveryInformation(ParmId        _parmId,
                                            SalesId       _salesId,
                                            InventSiteId  _inventSiteId,
                                            CustName      _deliveryName,
                                            LogisticsPostalAddressRecId _deliveryAddress,
                                            CustDlvModeId _dlvMode,
                                            ShipCarrierId _carrierId,
                                            ShipCarrierAccount _carrierAccount,
                                            LogisticsPostalAddressRecId    _thirdPartyAddress
                                            ,CustPostingProfile         _postingProfile_RU   = SalesTable::find(_salesId).PostingProfile,
                                            InventProfileType_RU       _inventProfileType_RU = InventProfileType_RU::General
                                            )

    {
        // <GEERU>
        #ISOCountryRegionCodes
        boolean                 countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        return (select firstonly RecId from salesParmTable
                    index hint ParmIdSalesIdIdx
                    where salesParmTable.ParmId             == _parmId
                       && salesParmTable.SalesId            == _salesId
                       && salesParmTable.InventSiteId       == _inventSiteId
                       && salesParmTable.DeliveryName       == _deliveryName
                       && salesParmTable.DeliveryPostalAddress == _deliveryAddress
                       && salesParmTable.DlvMode            == _dlvMode
                       && salesParmTable.ShipCarrierId      == _carrierId
                       && salesParmTable.ShipCarrierAccount == _carrierAccount
                       && salesParmTable.ShipCarrierPostalAddress == _thirdPartyAddress
        // <GEERU>
        && (! countryRegion_RU ||
                            (salesParmTable.PostingProfile_RU    == _postingProfile_RU &&
                             salesParmTable.InventProfileType_RU == _inventProfileType_RU))
        // </GEERU>
        ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existParmIdJobWaiting</Name>
				<Source><![CDATA[
    static boolean  existParmIdJobWaiting(ParmId          parmId)
    {
        if (parmId)
        {
            return (select firstonly RecId from salesParmTable
                        where salesParmTable.ParmId         == parmId &&
                              salesParmTable.ParmJobStatus  == ParmJobStatus::Waiting
                   ).RecId != 0;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static SalesParmTable  find(ParmId            parmId,
                                TradeLineRefId    tableRef,
                                boolean    _forUpdate = false)
    {
        SalesParmTable  salesParmTable;

        if (parmId  &&  tableRef)
        {
            if (_forUpdate)
                salesParmTable.selectForUpdate(_forUpdate);

            select firstonly salesParmTable
                index hint ParmTableRefIdx
                where salesParmTable.ParmId     == parmId
                   && salesParmTable.TableRefId == tableRef;
        }

        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDeliveryInformation</Name>
				<Source><![CDATA[
    static SalesParmTable findDeliveryInformation(ParmId        _parmId,
                                                  SalesId       _salesId,
                                                  InventSiteId  _inventSiteId,
                                                  CustName      _deliveryName,
                                                  LogisticsPostalAddressRecId _deliveryAddress,
                                                  CustDlvModeId _dlvMode,
                                                  ShipCarrierId _carrierId,
                                                  ShipCarrierAccount _carrierAccount,
                                                  LogisticsPostalAddressRecId _thirdPartyLocation,
                                                  boolean       update = false,
                                                  CustPostingProfile         _postingProfile_RU    = SalesTable::find(_salesId).PostingProfile,
                                                  InventProfileType_RU       _inventProfileType_RU = InventProfileType_RU::General)
    {
        SalesParmTable  salesParmTable;
        // <GEERU>
        #ISOCountryRegionCodes
        boolean                 countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        if (_parmId && _salesId)
        {
            if (update)
                salesParmTable.selectForUpdate(update);

            select firstonly salesParmTable
                index hint ParmIdSalesIdIdx
                where salesParmTable.ParmId             == _parmId
                   && salesParmTable.SalesId            == _salesId
                   && salesParmTable.InventSiteId       == _inventSiteId
                   && salesParmTable.DeliveryName       == _deliveryName
                   && salesParmTable.DeliveryPostalAddress == _deliveryAddress
                   && salesParmTable.DlvMode            == _dlvMode
                   && salesParmTable.ShipCarrierId      == _carrierId
                   && salesParmTable.ShipCarrierAccount == _carrierAccount
        // <GEERU>
        && (! countryRegion_RU ||
                        (salesParmTable.PostingProfile_RU    == _postingProfile_RU &&
                         salesParmTable.InventProfileType_RU == _inventProfileType_RU))
        // </GEERU>
        && salesParmTable.ShipCarrierPostalAddress == _thirdPartyLocation;
        }

        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDeliveryInformation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>SalesParmTable</c> table.
    /// </summary>
    /// <param name="_parmId">
    /// The parm id is used to find record.
    /// </param>
    /// <param name="_salesId">
    /// The sales id is used to find record.
    /// </param>
    /// <param name="_invoiceId">
    /// The invoice id is used to find record.
    /// </param>
    /// <param name="_deliveryName">
    /// The deliver name is used to find record.
    /// </param>
    /// <param name="_deliveryAddress">
    /// The deliver address is used to find record.
    /// </param>
    /// <param name="_dlvMode">
    /// The delive mode is used to find record.
    /// </param>
    /// <param name="_update">
    /// A boolean vale is used to decide whether update record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>SalesParmTable</c> table.
    /// </returns>
    public static SalesParmTable findDeliveryInformation_IN(
        ParmId                      _parmId,
        SalesId                     _salesId,
        ExportInvoiceId_IN          _invoiceId,
        CustName                    _deliveryName,
        LogisticsPostalAddressRecId _deliveryAddress,
        CustDlvModeId               _dlvMode,
        boolean                     _update = false)
    {
        SalesParmTable  salesParmTable;

        if (_parmId && _salesId)
        {
            if (_update)
            {
                salesParmTable.selectForUpdate(_update);
            }

            select firstonly salesParmTable
                where salesParmTable.ParmId                 == _parmId
                   && salesParmTable.SalesId                == _salesId
                   && salesParmTable.CustomsExportInvoiceId_IN    == _invoiceId
                   && salesParmTable.DeliveryName           == _deliveryName
                   && salesParmTable.DeliveryPostalAddress  == _deliveryAddress
                   && salesParmTable.DlvMode                == _dlvMode;
        }

        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDeliveryInformationSplitLines_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>SalesParmTable</c> table.
    /// </summary>
    /// <param name="_parmId">
    /// The parm id is used to find record.
    /// </param>
    /// <param name="_salesId">
    /// The sales id is used to find record.
    /// </param>
    /// <param name="_inventSiteId">
    /// The invent site id is used to find record.
    /// </param>
    /// <param name="_deliveryName">
    /// The deliver name is used to find record.
    /// </param>
    /// <param name="_deliveryAddress">
    /// The deliver address is used to find record.
    /// </param>
    /// <param name="_dlvMode">
    /// The delive mode is used to find record.
    /// </param>
    /// <param name="_eccNumber">
    /// The tax registration number; optional.
    /// </param>
    /// <param name="_serviceTaxNumber">
    /// The seviece tax number; optional.
    /// </param>
    /// <param name="_iecNumber">
    /// The tax registration number; optional.
    /// </param>
    /// <param name="_taxInformation">
    /// The tax infomation; optional.
    /// </param>
    /// <param name="_update">
    /// A boolean vale is used to decide whether update record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>SalesParmTable</c> table.
    /// </returns>
    public static SalesParmTable findDeliveryInformationSplitLines_IN(
        ParmId                      _parmId,
        SalesId                     _salesId,
        InventSiteId                _inventSiteId,
        CustName                    _deliveryName,
        LogisticsPostalAddressRecId _deliveryAddress,
        CustDlvModeId               _dlvMode,
        TaxRegistrationNumber_IN    _eccNumber = '',
        TaxRegistrationNumber_IN    _serviceTaxNumber   = '',
        TaxRegistrationNumber_IN    _iecNumber          = '',
        TaxRegistrationNumberRecId_IN   _taxInformation = 0,
        boolean                     _update = false)
    {
        SalesParmTable  salesParmTable;

        if (_parmId && _salesId)
        {
            if (_update)
            {
                salesParmTable.selectForUpdate(_update);
            }

            select firstonly salesParmTable
                where salesParmTable.ParmId                         == _parmId
                   && salesParmTable.SalesId                        == _salesId
                   && salesParmTable.InventSiteId                   == _inventSiteId
                   && salesParmTable.DeliveryName                   == _deliveryName
                   && salesParmTable.DeliveryPostalAddress          == _deliveryAddress
                   && salesParmTable.DlvMode                        == _dlvMode
                   && salesParmTable.TaxInformation_IN              == _taxInformation;
        }

        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId_W</Name>
				<Source><![CDATA[
    static SalesParmTable findRecId_W(RecId _recId, boolean _forUpdate = false)
    {
        SalesParmTable  salesParmTable;

        if (_recId)
        {
            if (_forUpdate)
                salesParmTable.selectForUpdate(_forUpdate);

            select firstonly salesParmTable
                index hint recId
                where salesParmTable.RecId == _recId;
        }

        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesId</Name>
				<Source><![CDATA[
    static SalesParmTable  findSalesId(SalesId     salesId,
                                       ParmId      parmId,
                                       boolean    _forUpdate = false)
    {
        SalesParmTable  salesParmTable;

        if (salesId  &&  parmId)
        {
            if (_forUpdate)
                salesParmTable.selectForUpdate(_forUpdate);

            select firstonly salesParmTable
                index hint ParmIdSalesIdIdx
                where salesParmTable.ParmId    == parmId  &&
                      salesParmTable.SalesId   == salesId;
        }

        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefForInvoiceId_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and runs one form <c>CustInvoiceJournal</c>.
    /// </summary>
    public static void jumpRefForInvoiceId_IN()
    {
        Args    args = new Args();

        new MenuFunction(menuitemDisplayStr(CustInvoiceJournal), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupParmId</Name>
				<Source><![CDATA[
    static void  lookupParmId(FormStringControl  _ctrl,
                                     Num                _parmNum)
    {
        Args        args;
        Object      formRun;

        args = new Args();
        args.name(formStr(SalesParmIdLookup));
        args.caller(_ctrl);
        args.lookupField(fieldNum(SalesParmTable, SalesId));
        args.lookupValue(_ctrl.text());

        formRun = classfactory.formRunClass(args);
        formRun.parmNum(_parmNum);
        formRun.init();

        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark current tax status of <c> SalesParmTable </c> to dirty
    /// </summary>
    public void markCurrentTaxDocumentTaxStatusDirty()
    {
        TaxableDocumentDescriptor descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this);
        ITaxableDocument taxableDocument = TaxableDocumentObject::construct(descriptor);
        TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymSchedTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the total of the <c>CustPaymSched</c> against the total of
    /// <c>SalesParmTable</c> document
    /// </summary>
    /// <param name="_custPaymSched">
    /// <c>CustPaymSched</c> to check against, if null retreives the <c>CustPaymSched</c>
    /// related to this <c>SalesParmTable</c> record
    /// </param>
    /// <returns>
    /// true if the totals match or if no <c>CustPaymSched</c> is found; otherwise false
    /// </returns>
    public boolean validatePaymSchedTotals(CustPaymSched _custPaymSched = null)
    {
        AmountCur totalAmount;
        boolean valid = true;

        CustPaymSched custPaymSched = (_custPaymSched ? _custPaymSched : CustPaymSched::find(this.TableId, this.RecId));

        if (custPaymSched)
        {
            SalesTotals salesTotals = SalesTotals::construct(this, SalesUpdate::All, AccountOrder::None, this.ParmId, '', this.Ordering);
            salesTotals.prepareTotalAmountCalculation();
            salesTotals.calcMarkupForTable(this.ParmId, this.SalesId);
            salesTotals.calc();

            //<GIN>
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                if (TaxWithholdEnableIncludeTCSInTotalFeatureToggle::includeTCSInInvoiceAmount(salesTotals.taxWithhold_IN()))
                {
                    totalAmount = salesTotals.totalAmount() + CurrencyExchange::roundWithRuleType(
                        salesTotals.parmTaxWithholdAmount_IN(),
                        this.CurrencyCode,
                        CurrencyRoundingRuleType::SalesOrder);
                }
                else
                {
                    totalAmount = salesTotals.totalAmount() + salesTotals.parmTaxWithholdAmount_IN();
                }
            }
            //</GIN>
            //<GBR>
            else if (BrazilParameters::isEnabled())
            {
                totalAmount = salesTotals.totalAmount() - salesTotals.totalTaxAmountRetained_BR();
            }
            //<GBR>
            else
            {
                totalAmount = salesTotals.totalAmount();
            }

            if (!totalAmount)
            {
                valid = true;
            }
            else
            {
                valid = (totalAmount == custPaymSched.paymScheduleAmount());
            }
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPaymSchedDueDate</Name>
				<Source><![CDATA[
    public display SalesFixedDueDate displayPaymSchedDueDate()
    {
        DueDate dueDate;
        boolean isCopyPrecisely;
        CustPaymSched custPaymSched = CustPaymSched::find(this.TableId, this.RecId);

        if (!custPaymSched && this.salesTable())
        {
            custPaymSched = CustPaymSched::find(this.salesTable().TableId, this.salesTable().RecId);
            isCopyPrecisely = true;
        }

        if (custPaymSched && (!isCopyPrecisely || (isCopyPrecisely && custPaymSched.CopyPreciselyToInvoice)))
        {
            CustPaymSchedLine custPaymSchedLine;

            select firstOnly DueDate from custPaymSchedLine
                order by DueDate asc
                where custPaymSchedLine.ParentRecID == custPaymSched.RecId;

            dueDate = custPaymSchedLine.DueDate;
        }
        else
        {
            dueDate = PaymTerm::find(this.salesTable().Payment).due(this.Transdate, this.salesTable().paymDayId());
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editFixedDueDate</Name>
				<Source><![CDATA[
    public edit SalesFixedDueDate editFixedDueDate(boolean _set, SalesFixedDueDate _fixedDueDate)
    {
        SalesFixedDueDate originalFixedDueDate;
      
        if (_set)
        {
            originalFixedDueDate = this.FixedDueDate;
            this.FixedDueDate = _fixedDueDate;

            if (!this.validateField(fieldNum(VendInvoiceInfoTable, FixedDueDate)))
            {
                this.FixedDueDate = originalFixedDueDate;
            }
        }

        if (this.paymentSchedule() == '')
        {
            if (this.FixedDueDate)
            {
                return this.FixedDueDate;
            }
            else
            {
                return this.getFixedDueDate();
            }
        }

        return this.displayPaymSchedDueDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultTradeDates_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes trade dates with default values.
    /// </summary>
    /// <param name="_salesParmUpdate">
    /// The <c>SalesParmUpdate</c> record.
    /// </param>
    public static void initDefaultTradeDates_W(SalesParmUpdate _salesParmUpdate)
    {
        #ISOCountryRegionCodes
        #EECountryRegionCodes

        SalesParmTable salesParmTable;

        boolean salesDateEnabled = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) ||
                        (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll) &&
                         isConfigurationkeyEnabled(configurationKeyNum(TradeDates_W)));

        if (!salesDateEnabled)
        {
            return;
        }

        ttsBegin;

        update_recordset salesParmTable
        setting SalesDate_W = salesParmTable.TransDate
        where
            salesParmTable.ParmId      == _salesParmUpdate.parmId &&
            salesParmTable.SalesDate_W == dateNull();

        update_recordset salesParmTable
        setting VatDueDate_W = salesParmTable.TransDate
        where
            salesParmTable.ParmId      == _salesParmUpdate.parmId &&
            salesParmTable.VatDueDate_W == dateNull();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets last delivery date for invoice.
    /// </summary>
    /// <returns>
    /// Date of physical posting.
    /// </returns>
    protected TransDate getLastDeliveryDate()
    {
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        SalesParmLine salesParmLine;

        select RecId, InventTransId, OrigSalesId from salesParmLine
            where salesParmLine.ParmId == this.ParmId
                && salesParmLine.OrigSalesId == this.SalesId
        outer join InventTransId, RecId from inventTransOrigin
            where inventTransOrigin.InventTransId == salesParmLine.InventTransId
        outer join maxof (DatePhysical) from inventTrans
            where !inventTrans.DateFinancial
                && inventTrans.InventTransOrigin == inventTransOrigin.RecId;

        return inventTrans.DatePhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFixedDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform payment term due data update policy to
    /// determines the due date for invoice.
    /// </summary>
    /// <returns>Invoice due date</returns>
    public SalesFixedDueDate getFixedDueDate()
    {
        PaymTerm paymentTerms = PaymTerm::find(this.salesTable().Payment);

        TransDate paymentTermsDueDate = (SalesEditLinesCalcDueDateFromDocuDateFlight::instance().isEnabled() && this.DocumentDate) ? this.DocumentDate : this.Transdate;

        if (this.paymentTermsCustomerDueDateUpdatePolicyApplies(paymentTerms))
        {
            PaymCalendarSourceSalesOrderParm paymentCalendarSourceSalesOrderParm =
                                                        PaymCalendarSourceSalesOrderParm::newCalendarSource(this);
            PaymCalendarProcessor            paymentCalendarProcessor            = PaymCalendarProcessor::construct();
                     
            return paymentCalendarProcessor.adjustDate(paymentTerms.due(paymentTermsDueDate, this.salesTable().paymDayId()),
                                                            paymentTerms.customerUpdateDueDate,
                                                            paymentCalendarSourceSalesOrderParm);
        }
               
        return paymentTerms.due(paymentTermsDueDate, this.salesTable().paymDayId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentTermsCustomerDueDateUpdatePolicyApplies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if due date update policy appies
    /// </summary>
    /// <param name = "_paymentTerms">PaymTerm</param>
    /// <returns>when true, update due date policy applies</returns>
    public boolean paymentTermsCustomerDueDateUpdatePolicyApplies(PaymTerm _paymentTerms)
    {
        return isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar))
                && _paymentTerms.customerUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate
                && PaymCalendarRule::existActiveRuleForRuleType(PaymCalendarModuleType::Customer, PaymCalendarRuleType::Specific);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124482</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS55235</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>SalesId</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ParmTableRefIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>ParmTableRefIdx</PrimaryIndex>
	<ReplacementKey>ParmTableRefIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustPaymSched</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustPaymSched</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SalesParmSubTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SalesParmSubTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmJobStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableRefId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountsReceivable</Name>
			<Label>@SYS25196</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Address_RU</Name>
			<Label>@SYS7566</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LadingPostalAddress_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnladingPostalAddress_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Ordering</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchAdministration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmJobStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Log</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffSessionId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffReportType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxServiceCodeId_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentType_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankLCExportGroup</Name>
			<Label>@SYS316286</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankLCExportLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankManagement</Name>
			<Label>@SYS25339</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustBankAccountId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOLLicenseCard_RU</Name>
			<Label>@GLS111069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOLLicenseCardType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOLLicenseCardRegNum_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOLLicenseCardSeries_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOLLicenseCardNum_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOLTransportation_RU</Name>
			<Label>@GLS111070</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOLCarrierType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOLCarrierCode_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOLDeliveryDate_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOLVehicleModel_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOLVehiclePlateNum_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOLWaybillNum_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOLDriverName_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOLDrivingLicenseNum_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DriverContact_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOLTransportationType_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Carrier_RU</Name>
			<Label>@SYS50733</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CarrierType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierCode_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CashDiscBaseDate</Name>
			<Label>@SYS61119</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscBaseDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Correction_RU</Name>
			<Label>@SYS13069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Correct_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedInvoiceId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedInvoiceDate_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedFactureExternalId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedFactureDate_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedPeriod_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectionType_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customs_IN</Name>
			<Label>@GLS5007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomsShippingBillNumberTable_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>deliveryAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryPostalAddress</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Document</Name>
			<Label>@SYS101280</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EntryCertificate_W</Name>
			<Label>@SYS4004104</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EntryCertificateRequired_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssueOwnEntryCertificate_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GoodsReceived_RU</Name>
			<Label>@GLS100836</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttorneyId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttorneyDate_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttorneyIssuedName_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventOwner_RU</Name>
			<Label>@GLS115561</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventOwnerId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventProfile_RU</Name>
			<Label>@GLS113769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProfileType_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LetExportDateTime</Name>
			<Label>@GLS61776</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EximExportDateTime_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRPackingBoxName</Name>
			<Label>@MCR23715</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRPackingBoxName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc_IN</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomsExportInvoiceId_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Storno</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedDueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesDate_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting_RU</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoicePostingType_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PostponeVAT</Name>
			<Label>@GLS111972</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostponeVAT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Print_FR</Name>
			<Label>@SYS8813</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrintOverdueFineTxt_FR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProcessingTime</Name>
			<Label>@SYS28567</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>processingTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>numberOfLines</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS4534</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableRefId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Return</Name>
			<Label>@SYS16512</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnDeadline</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnItemNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReturnPackingSlip</Name>
			<Label>@SYS117832</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnPackingSlipId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesInvoiceIdEditing_W</Name>
			<Label>@GLS110637</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Num_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesOrderTable</Name>
			<Label>@SYS12847</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesReturn_BR</Name>
			<Label>@GLS220586</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentModel_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentAccessKey_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentNumber_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentSeries_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentSpecie_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ShipCarrier</Name>
			<Label>@SYS50697</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Site</Name>
			<Label>@SYS103211</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StateNumbering</Name>
			<Label>@GLS112826</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackingSlipIdForUpdate_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintBlankDate_LT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxInformation_IN</Name>
			<Label>@SYS33550</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxInformation_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransportationPayer_RU</Name>
			<Label>@GLS100924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransportationPayerType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportationPayer_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransportInvoice_RU</Name>
			<Label>@GLS221922</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransportInvoiceType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CargoDescription_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CargoPacking_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VatDueDate_W</Name>
			<Label>@GLS110652</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VatDueDate_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VATOnPayment_RU</Name>
			<Label>@GLS106909</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATOnPayment_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceType_MY</Name>
			<Label>@SYS33553</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceType_MY</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProvisionalAssessment_IN</Name>
			<Label>@TaxGST:ProvisionalAssessment</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProvisionalAssessment_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice_MX</Name>
			<Label>@SYS341123</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CFDIEnabled_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Facture_RU</Name>
			<Label>@GLS221914</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseOriginalDocumentAsFacture_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AttorneyDate_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttorneyDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AttorneyId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttorneyId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AttorneyIssuedName_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttorneyIssuedName_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankLCExportLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCLineRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BatchAdministration</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BatchAdministration</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BatchType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesBatchType</ExtendedDataType>
			<EnumType>SalesBatch</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOLCarrierCode_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CarrierCode_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOLCarrierType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CarrierType_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>BOLDeliveryDate_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>DlvDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOLDriverName_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DriverName_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOLDrivingLicenseNum_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DrivingLicenseNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOLLicenseCardNum_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LicenseCardNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOLLicenseCardRegNum_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LicenseCardRegNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOLLicenseCardSeries_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LicenseCardSeries_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOLLicenseCardType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LicenseCardType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOLTransportationType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransportationType_RU</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOLVehicleModel_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VehicleModel_W</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOLVehiclePlateNum_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VehiclePlateNum_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOLWaybillNum_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WaybillNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CargoDescription_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>CargoDescription_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CargoPacking_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>CargoPacking_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierCode_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>CarrierCode_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CarrierType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<EnumType>CarrierType_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CashDiscBaseDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscBaseDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CashDiscBaseDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscBaseDays</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Correct_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Correct_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CorrectedFactureDate_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureDate_RU</ExtendedDataType>
			<Label>@GLS104542</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrectedFactureExternalId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureExternalId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CorrectedInvoiceDate_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CorrectedInvoiceDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrectedInvoiceId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CorrectedInvoiceId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CorrectedPeriod_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS111794</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CorrectionType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>FactureCorrectionType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustBankAccountId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustBankAccountId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomsExportInvoiceId_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExportInvoiceId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsShippingBillNumberTable_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS36260</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustPackingSlipJour</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPackingSlipJourRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsDeliveryName</ExtendedDataType>
			<GroupPrompt>@SYS7399</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvModeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesDlvTermId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentStornoId_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>Num</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DriverContact_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DriverContact_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EndDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EndDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EntryCertificateRequired_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EntryCertificateRequired_W</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EximExportDateTime_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@GLS61776</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalDocumentAccessKey_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EFDocAccessKey_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalDocumentModel_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalDocumentModel_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalDocumentNumber_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<Label>@GLS64164</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalDocumentSeries_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalDocumentSeries_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FiscalDocumentSpecie_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>FiscalDocumentSpecie_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalDocumentType_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalDocumentTypeRecID_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FixedDueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesFixedDueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GoodsInRouteId_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>GoodsInRouteId_RU</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventOwnerId_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventOwnerId_RU</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventProfileType_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventProfileType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInvoiceAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoicePostingType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesInvoicePostingType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IssueOwnEntryCertificate_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IssueOwnEntryCertificate_W</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LadingPostalAddress_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
			<Label>@GLS116002</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Log</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRPackingBoxName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRPackingBoxName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NeedTransIDTransit_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Num_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT,LV,EE,PL,HU,CZ</CountryRegionCodes>
			<ExtendedDataType>Num</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OffReportType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>OffReportType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OffSessionId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OffSessionId_RU</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Ordering</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS2934</Label>
			<EnumType>DocumentStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackingSlipIdForUpdate_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PackingSlipIdForUpdate_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ParmJobStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ParmJobStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostponeVAT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasicVatDueDate_W</ConfigurationKey>
			<CountryRegionCodes>CZ</CountryRegionCodes>
			<ExtendedDataType>CzPostponeVAT</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintBlankDate_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LtPrintBlankDate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintOverdueFineTxt_FR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PrintOverdueFineTxt_FR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReturnDeadline</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnDeadline</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnItemNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnItemNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnPackingSlipId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnPackingSlipId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReturnStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReturnStatusHeader</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SalesDate_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesDate_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SalesName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipCarrierAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ShipCarrier</ConfigurationKey>
			<ExtendedDataType>ShipCarrierAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipCarrierId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ShipCarrier</ConfigurationKey>
			<ExtendedDataType>ShipCarrierId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ShipCarrierPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>StartDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Storno</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS6054</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TableRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineRefId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxInformation_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxInformationRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPeriodPaymentCode_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlTaxPeriodPaymentCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxServiceCodeId_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxServiceCodeId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Transdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS16686</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransportationPayer_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TransportationPayer_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransportationPayerType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<EnumType>TransportationPayerType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransportInvoiceType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<EnumType>TransportInvoiceType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UnladingPostalAddress_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
			<Label>@GLS115977</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>VatDueDate_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VatDueDate_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATOnPayment_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATOnPayment_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceType_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InvoiceType_MY</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransportationDocument</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransportationDocumentRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocAutoNumbering_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>LtInvoiceAutoNumbering</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProvisionalAssessment_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@TaxGST:HelpTextOfProvisionalAssessment</HelpText>
			<Label>@TaxGST:ProvisionalAssessment</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CFDIEnabled_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CFDIPackingSlipEnabled_MX</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseOriginalDocumentAsFacture_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UseOriginalDocumentAsFacture_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowLineLevelTaxAdjustments</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesAllowLineLevelTaxAdjusments</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSimulatePosting</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<FeatureClass>SalesFastPrintSalesOrderFeature</FeatureClass>
			<IsObsolete>Yes</IsObsolete>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceJourRecId</Name>
			<ExtendedDataType>CustInvoiceJourRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PreallocatedPackingSlipId</Name>
			<ExtendedDataType>WHSPreallocatedPackingSlipId</ExtendedDataType>
			<FeatureClass>WHSPopulatePackingSlipIdFromShipmentFlight</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParmIdSalesIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParmTableRefIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableRefId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxInformation_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxInformation_IN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustomsShippingBillNumberTable_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomsShippingBillNumberTable_IN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FiscalDocumentType_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>FiscalDocumentType_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PlTaxDueTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeliveryPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>FormletterJournal</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>OrderId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>TableRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InternalJournalId</MapField>
					<MapFieldTo>TableRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>Transdate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchrateSecondary</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Triangulation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundOff</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>FormletterParmTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TableRefId</MapField>
					<MapFieldTo>TableRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmJobStatus</MapField>
					<MapFieldTo>ParmJobStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Log</MapField>
					<MapFieldTo>Log</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StartDateTime</MapField>
					<MapFieldTo>StartDateTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDateTime</MapField>
					<MapFieldTo>EndDateTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Hold</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankLCLine</MapField>
					<MapFieldTo>BankLCExportLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate_W</MapField>
					<MapFieldTo>Transdate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate_W</MapField>
					<MapFieldTo>DocumentDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRPackingBoxName</MapField>
					<MapFieldTo>MCRPackingBoxName</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxIntgrExportDocSourcePostingMap_CN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CustBankAccountId</MapField>
					<MapFieldTo>CustBankAccountId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATInvoiceDescTable</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Posted</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankLCExportLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankLCExportLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankLCExportLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankLCExportLine_SalesParmTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankLCExportLine</Name>
					<Field>BankLCExportLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Carrier_Cust_RU</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>BOLCarrierType_RU</Name>
					<Field>BOLCarrierType_RU</Field>
					<ValueStr>CarrierType_W::Customer</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOLCarrierCode_RU</Name>
					<SourceEDT>CarrierCode_W</SourceEDT>
					<Field>BOLCarrierCode_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Carrier_Vend_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Carrier_Vend_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Carrier_Vend_RU_SalesParmTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>BOLCarrierType_RU</Name>
					<Field>BOLCarrierType_RU</Field>
					<ValueStr>CarrierType_W::Vendor</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOLCarrierCode_RU</Name>
					<Field>BOLCarrierCode_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustBankAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustBankAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustBankAccountId</Name>
					<Field>CustBankAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<Field>InvoiceAccount</Field>
					<RelatedField>CustAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomsShippingBillNumberTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomsShippingBillNumberTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustomsShippingBillNumberTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustomsShippingBillNumberTable_IN_SalesParmTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomsShippingBillNumberTable_IN</Name>
					<Field>CustomsShippingBillNumberTable_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustPackingSlipJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustPackingSlipJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustPackingSlipJour</Name>
					<Field>CustPackingSlipJour</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_SalesParmTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvMode</Name>
					<Field>DlvMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTerm</Name>
					<Field>DlvTerm</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FiscalDocModel_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalDocModel_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalDocumentModel_BR</Name>
					<Field>FiscalDocumentModel_BR</Field>
					<RelatedField>Model</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalDocumentType_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalDocumentType_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalDocumentType_BR</Name>
					<Field>FiscalDocumentType_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>GoodsInRouteJour_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>GoodsInRouteJour_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GoodsInRouteId_RU</Name>
					<Field>GoodsInRouteId_RU</Field>
					<RelatedField>GoodsInRouteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventOwner_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventOwner_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventOwnerId_RU</Name>
					<Field>InventOwnerId_RU</Field>
					<RelatedField>InventOwnerId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InvoiceCustomer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InvoiceCustomer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesParmTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<SourceEDT>CustInvoiceAccount</SourceEDT>
					<Field>InvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LadingPostalAddress_RU</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LadingPostalAddress_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesParmTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LadingPostalAddress_RU</Name>
					<Field>LadingPostalAddress_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRPackingBoxTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>MCRPackingBoxTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRPackingBoxName</Name>
					<SourceEDT>MCRPackingBoxName</SourceEDT>
					<Field>MCRPackingBoxName</Field>
					<RelatedField>PackingBoxName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OfficialsTrans_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>OfficialsTrans_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffSessionId_RU</Name>
					<Field>OffSessionId_RU</Field>
					<RelatedField>OffSessionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OrderCustomer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OrderCustomer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesParmTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Payer_CustTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesParmTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Payer_CustTable_RU</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransportationPayerType_RU</Name>
					<Field>TransportationPayerType_RU</Field>
					<ValueStr>TransportationPayerType_RU::ThirdParty</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportationPayer_RU</Name>
					<SourceEDT>TransportationPayer_RU</SourceEDT>
					<Field>TransportationPayer_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlTaxDueTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlTaxDueTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PlTaxDueTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesParmTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriodPaymentCode_PL</Name>
					<Field>TaxPeriodPaymentCode_PL</Field>
					<RelatedField>TaxPeriodPaymentCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxPeriodPaymentCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PostingProfile_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile_RU</Name>
					<Field>PostingProfile_RU</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>salesParmTable</Name>
			<RelatedTable>SalesParmTable</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRefId</Name>
					<Field>TableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesParmUpdate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesParmUpdate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ShipCarrierPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_1_SalesParmTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipCarrierPostalAddress</Name>
					<Field>ShipCarrierPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ShipCarrierTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ShipCarrierTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipCarrierId</Name>
					<Field>ShipCarrierId</Field>
					<RelatedField>CarrierId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>IdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxInformation_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxInformation_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxInformation_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxInformation_IN_SalesParmTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxInformation_IN</Name>
					<Field>TaxInformation_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TransportationTypeTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TransportationTypeTable_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOLTransportationType_RU</Name>
					<Field>BOLTransportationType_RU</Field>
					<RelatedField>Type</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnladingPostalAddress_RU</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnladingPostalAddress_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesParmTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnladingPostalAddress_RU</Name>
					<Field>UnladingPostalAddress_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VehicleModelTable_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VehicleModelTable_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOLVehicleModel_RU</Name>
					<Field>BOLVehicleModel_RU</Field>
					<RelatedField>VehicleModel</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransportationDocument</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TransportationDocument</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportationDocument</Name>
					<Field>TransportationDocument</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceJour</Name>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceJourRecId</Name>
					<Field>CustInvoiceJourRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>