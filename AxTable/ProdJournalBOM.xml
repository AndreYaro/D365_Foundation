<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalBOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdJournalBOM extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProdBOMRemain</Name>
				<Source><![CDATA[
    public void addProdBOMRemain(
        ProdBOM         _prodBOM,
        InventQty       _addQty         = ProdJournalBOM::maxQty(this),
        UnitQty         _addQtyBOM      = ProdJournalBOM::maxQtyBOM(this),
        PdsCWInventQty  _cwAddQty       = ProdJournalBOM::pdsCWMaxQty(this),
        boolean         _endJob         = false)
    {
        InventQty           freeQty;
        UnitQty             freeQtyBOM;
        PdsCWInventQty      cwFreeQty;

        [freeQty,freeQtyBOM, cwFreeQty] = this.freeRemainQtyInventBOM(_prodBOM);

        if (   _prodBOM.RemainInventPhysical >= 0
            && _addQty >= 0)
        {
            if (freeQty < _addQty)
            {
                _prodBOM.RemainInventPhysical += _addQty - freeQty;
            }

            if (freeQtyBOM < _addQtyBOM)
            {
                _prodBOM.RemainBOMPhysical    += _addQtyBOM - freeQtyBOM;
            }

            if (cwFreeQty < _cwAddQty)
            {
                _prodBOM.PdsCWRemainPhysical += _cwAddQty - cwFreeQty;
            }

            if (!cwFreeQty && _cwAddQty < 0)
            {
                _prodBOM.PdsCWRemainPhysical += _cwAddQty;
            }
        }
        else
        {
            if (freeQty > _addQty)
            {
                _prodBOM.RemainInventPhysical += _addQty - freeQty;
            }

            if (freeQtyBOM > _addQtyBOM)
            {
                _prodBOM.RemainBOMPhysical    += _addQtyBOM - freeQtyBOM;
            }
            if (cwFreeQty > _cwAddQty)
            {
                _prodBOM.PdsCWRemainPhysical += _cwAddQty - cwFreeQty;
            }
        }

        if (_prodBOM.RemainInventPhysical != _prodBOM.orig().RemainInventPhysical
            || _prodBOM.PdsCWRemainPhysical != _prodBOM.orig().PdsCWRemainPhysical)
        {
            _prodBOM.update();

            // Quantity to be reserved against any available on hand inventory
            InventQty reserveQty = _addQty - freeQty;

            if (_endJob
                && reserveQty > 0
                && ProdParameters::find().BOMJournalReducePhysical
                && _prodBOM.whsEnabled())
            {
                this.updateReservation(_prodBOM, reserveQty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenReservedRecord</Name>
				<Source><![CDATA[
	/// <summary>
    /// Checks for an unposted picking list line for the <c>InventTransId</c>.
    /// </summary>
    /// <param name = "_inventTransId">The transaction ID.</param>
    /// <param name = "_inventDimId">The dimension set ID.</param>
    /// <returns>true if an unposted picking list line is found; otherwise, false</returns>
	public static boolean hasOpenReservedRecord(
		InventTransId	_inventTransId,
		InventDimId		_inventDimId)
    {
        ProdJournalBom journalBOM;

		if (_inventTransId
		&&	_inventDimId)
        {
			ProdJournalTable	journalTable;
            InventTransOrigin	journalTransOrigin;		
            InventTrans			journalTrans; 

            select firstonly RecId from journalBOM
                where journalBOM.InventTransId			== _inventTransId
                &&	  journalBOM.InventDimId			== _inventDimId
                &&	  journalBOM.InventTransChildType	== InventTransChildType::ProdJournalBOM
                exists join journalTable
                    where journalTable.JournalId == journalBOM.JournalId
                    &&	  journalTable.Posted	 == NoYes::No
				exists join journalTransOrigin
					where journalTransOrigin.InventTransId == journalBOM.InventTransId
				exists join journalTrans
					where journalTrans.InventTransOrigin == journalTransOrigin.RecId
					&&	  journalTrans.TransChildRefId	 == journalBOM.InventTransChildRefId
                    &&	  journalTrans.StatusIssue		 == StatusIssue::ReservPhysical;
        }

        return journalBOM.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLicensePlateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the license plate can be used.
    /// </summary>
    /// <param name="_licensePlateId">
    /// The license plate to check.
    /// </param>
    /// <returns>
    // Returns true if the license plate can be used; otherwise, false.
    /// </returns>
    public boolean checkLicensePlateId(WHSLicensePlateId _licensePlateId = this.inventDim().LicensePlateId)
    {
        boolean             ret = true;
        
        if (_licensePlateId)
        {
            WHSWorkTable workTable = WHSWorkTable::findByLicensePlate(_licensePlateId);
            if (workTable)
            {
                ret = checkFailed(strFmt("@SCM:InventoryIsTiedToWork", _licensePlateId, workTable.WorkId));
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRemainBOMPhysical</Name>
				<Source><![CDATA[
    public UnitQty calcRemainBOMPhysical(ProdBOM _prodBOM)
    {
        UnitQty         bomRemain;

        if (!_prodBOM.RecId)
        {
            _prodBOM  = ProdBOM::findTransId(this.InventTransId);
        }

        if (!this.InventReturnFlag)
        {
            bomRemain   = _prodBOM.RemainBOMPhysical  - this.bomConsump;

            if (bomRemain * _prodBOM.RemainBOMPhysical <= 0)
            {
                bomRemain = 0;
            }
        }
        else
        {
            bomRemain = 0;

            if (!_prodBOM.isReportedAsFinished() || this.bomConsump < 0)
            {
                if (_prodBOM.QtyBOMCalc)
                {
                    if (abs(_prodBOM.RemainBOMFinancial + this.bomConsump) < abs(_prodBOM.maxQtyCalcStUpBOM()))
                    {
                        bomRemain = _prodBOM.maxQtyCalcStUpBOM() - _prodBOM.RemainBOMFinancial - this.bomConsump;
                    }
                }
                // ensure physical remainder is considered when reversing pick list
                if (abs(bomRemain) < abs(_prodBOM.RemainBOMPhysical))
                {
                    bomRemain = _prodBOM.RemainBOMPhysical;
                }
            }
        }

        return bomRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRemainInventPhysical</Name>
				<Source><![CDATA[
    public InventQty calcRemainInventPhysical(ProdBOM _prodBOM)
    {
        InventQty   inventRemain;
        InventQty   remainInventFinancial;

        if (!_prodBOM.RecId)
        {
            _prodBOM = ProdBOM::findTransId(this.InventTransId);
        }

        if (!this.InventReturnFlag)
        {
            inventRemain = _prodBOM.RemainInventPhysical - this.InventConsump;

            if  (inventRemain * _prodBOM.RemainInventPhysical <= 0)
            {
                inventRemain = 0;
            }
        }
        else
        {
            inventRemain = 0;

            if (!_prodBOM.isReportedAsFinished() || this.InventConsump < 0)
            {
                if (_prodBOM.QtyInventCalc)
                {
                    remainInventFinancial = _prodBOM.remainInventFinancial();
                    if (abs(remainInventFinancial + this.InventConsump) < abs(_prodBOM.maxQtyCalcStUpInvent()))
                    {
                        inventRemain = _prodBOM.maxQtyCalcStUpInvent() - remainInventFinancial - this.InventConsump;
                    }
                }
                // ensure physical remainder is considered when reversing pick list
                if (abs(inventRemain) < abs(_prodBOM.RemainInventPhysical))
                {
                    inventRemain = _prodBOM.RemainInventPhysical;
                }
            }
        }

        return inventRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMConsump_RU</Name>
				<Source><![CDATA[
    public boolean checkBOMConsump_RU()
    {
        boolean ret = true;

        if (this.prodTable().calculatingWIP_RU())
        {
            if (this.bomConsump < 0 && !this.InventTransId)
            {
                ret = checkFailed("@SYS50830");
            }

            if (ret && (ProdBOM::findTransId(this.InventTransId).RemainBOMFinancial + this.bomConsump) < 0)
            {
                ret = checkFailed("@GLS115906");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventReturnFlag</Name>
				<Source><![CDATA[
    public boolean checkInventReturnFlag(ProdBOM _prodBOM)
    {
        ProdJournalBOM tmpJournalBOM;

        tmpJournalBOM.data(this);
        tmpJournalBOM.setInventReturnFlag(_prodBOM);

        if (this.InventReturnFlag != tmpJournalBOM.InventReturnFlag)
        {
            return checkFailed("@SYS60663");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReqActivity</Name>
				<Source><![CDATA[
    public boolean checkReqActivity()
    {
        return ProjActivity::checkReqActivity(this.ProjId, this.ActivityNumber, tableNum(ProjItemTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set that should be applied to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously created by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdBOM</Name>
				<Source><![CDATA[
    public void createProdBOM()
    {
        ProdBOM prodBOM;

        prodBOM.initFromProdJournalBOM(this);
        prodBOM.LineNum = ProdBOM::lastLineNum(prodBOM.ProdId) + 1;

        prodBOM.insert();

        this.InventTransId  = prodBOM.InventTransId;
        this.setInventDimId(prodBOM.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        InventMovement              inventMovement;
        InventUpd_ChildReference    childReference;
        ProdBOM                     prodBOM;

        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        ttsbegin;

        if (!this.isPosted())
        {
            if (!prodBOM.RecId)
            {
                prodBOM = this.prodBOM(true);
            }

            if (prodBOM.RecId && this.mustUpdateProdBOM())
            {
                if (this.mustDeleteChildReferences())
                {
                    inventMovement = InventMovement::construct(prodBOM,InventMovSubType::None,this);
                    InventDim prodBOMDim = InventDim::find(prodBOM.InventDimId);

                    InventUpd_ChangeDimension::updateForceInventTrans(inventMovement,
                                                                      prodBOMDim,
                                                                      false,
                                                                      true,
                                                                      prodBOMDim,
                                                                      prodBOM.whsEnabled());

                    childReference = InventUpd_ChildReference::newParameters(inventMovement,
                                                                             ProdJournalBOM::maxQty(this.orig()),
                                                                             ProdJournalBOM::maxQtyBOM(this.orig()),
                                                                             false,
                                                                             '');
                    childReference.updateNow();
                }

                if (!this.InventReturnFlag)
                {
                    this.orig().subProdBOMRemain(prodBOM);
                }
            }

            if (this.Voucher)
            {
                if (this.numOfVoucherLines() == 0)
                {
                    JournalError::deleteVoucher(tableNum(ProdJournalTable),this.JournalId,this.Voucher);
                }
            }

            if (BOMParameters::find().EnableTrackedComponents)
            {
                ProdAsBuiltBOMComponentLotAssociation::clearProdPickListJournalLine(this);
            }
        }
        else
        {
            // Delete transactions data used for report printing
            InventReportDimHistory::deleteFromProdJournalBOM(this);
        }

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForProdId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a <c>ProdJournalBOM</c> record exists for the given production ID.
    /// </summary>
    /// <param name = "_prodId">The production ID to check for <c>ProdJournalBOM</c> records.</param>
    /// <returns>true if a record exists for the given production ID; otherwise, false</returns>
    public static boolean existsForProdId(ProdId _prodId)
    {
        return (select firstonly RecId from ProdJournalBOM
                    where ProdJournalBOM.ProdId == _prodId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOtherTransIdNotPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an unposted line in another journal exists for the current <c>InventTransId</c>
    /// journal.
    /// </summary>
    /// <returns>
    /// true if an unposted line exists in another journal; otherwise, false.
    /// </returns>
    public boolean existsOtherTransIdNotPosted()
    {
        ProdJournalBOM      prodJournalBOM;
        ProdJournalTable    prodJournalTable;

        select firstonly forceplaceholders RecId from prodJournalBOM
            where prodJournalBOM.InventTransId == this.InventTransId
               && prodJournalBOM.RecId         != this.RecId
            exists join prodJournalTable
                where prodJournalTable.JournalId == prodJournalBOM.JournalId
                   && prodJournalTable.JournalId != this.JournalId
                   && prodJournalTable.Posted    == NoYes::No;

        return (prodJournalBOM.RecId ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>freeRemainQtyInventBOM</Name>
				<Source><![CDATA[
    public container freeRemainQtyInventBOM(ProdBOM _prodBOM)
    {
        ProdJournalBOM      tmpJournalBOM;
        ProdJournalTable    prodJournalTable;

        InventQty       qty     = _prodBOM.RemainInventPhysical;
        UnitQty         bomQty  = _prodBOM.RemainBOMPhysical;
        PdsCWInventQty  cwQty   = _prodBOM.PdsCWRemainPhysical;

        tmpJournalBOM.selectLocked(false);

        while select forceplaceholders tmpJournalBOM
            index hint TransIdIdx
            where tmpJournalBOM.InventTransId       == _prodBOM.InventTransId   &&
                  tmpJournalBOM.InventReturnFlag    == NoYes::No
            join TableId from prodJournalTable
                index hint JournalIdx
                where prodJournalTable.JournalId    == tmpJournalBOM.JournalId  &&
                      prodJournalTable.Posted       == NoYes::No
        {
            qty     -= ProdJournalBOM::maxQty(tmpJournalBOM);
            bomQty  -= ProdJournalBOM::maxQtyBOM(tmpJournalBOM);
            cwQty   -= ProdJournalBOM::pdsCWMaxQty(tmpJournalBOM);
        }

        return [qty,bomQty,cwQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(InventTable _inventTable)
    {
        this.initReleasedProductSpecificDefaulting(_inventTable);
        this.initDimensionsSpecificDefaulting(_inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReleasedProductSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes settings that are based on the released product.
    /// </summary>
    /// <param name = "_inventTable">The item record.</param>
    public void initReleasedProductSpecificDefaulting(InventTable _inventTable)
    {
        this.ItemId             = _inventTable.ItemId;
        this.bomUnitId          = _inventTable.bomUnitId;
        this.DefaultDimension   = this.mergeDimension(this.prodTable().DefaultDimension, _inventTable.DefaultDimension);

        InventDim inventDim = this.inventDim();
        inventDim.initProductDimensionsFromInventTable(_inventTable, inventDim);
        this.setInventDimIdFromInventDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalInventConsump</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the sum of all the quantity for a specific transaction ID on a journal.
    /// </summary>
    /// <param name = "_inventTransId">
    /// The transaction ID used to sum the quantity.
    /// </param>
    /// <returns>
    /// The sum of the transaction quantity.
    /// </returns>
    public static InventQty getTotalInventConsump(InventTransId _inventTransId)
    {
        ProdJournalBOM journalBOM;

        select sum(InventConsump) from journalBOM
            where journalBOM.InventTransId == _inventTransId;

        return journalBOM.InventConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes dimension dependent fields.
    /// </summary>
    /// <param name = "_inventTable">The item record.</param>
    public void initDimensionsSpecificDefaulting(InventTable _inventTable = this.inventTable())
    {
        InventDim inventDim = InventDim::find(this.InventDimId);

        if (!InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, inventDim))
        {
            return;
        }

        //Limit to the same site as the parent production order
        inventDim.InventSiteId = this.prodTable().inventDim().InventSiteId;

        inventDim.initFromInventTable(_inventTable, InventItemOrderSetupType::Invent, inventDim);

        inventDim = InventDim::findOrCreate(inventDim);

        this.setInventDimIdFromInventDim(inventDim);

        if (this.isProjMethodConsumed())
        {
            ProjInventJournalTransMapForm::construct(this).initFromInventTable(_inventTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles reinitialization if needed when an associated <c>InventDim</c> buffer is changed.
    /// </summary>
    /// <param name = "_inventDim">The <c>InventDim</c> buffer.</param>
    /// <param name = "_inventDimFieldId">The field that was changed.</param>
    public void modifiedInventDim(InventDim _inventDim, FieldId _inventDimFieldId)
    {
        boolean isFieldProductOrSiteDimension = _inventDim.siteOrProductDimFieldModified(_inventDimFieldId);
        this.InventDimId = _inventDim.inventDimId;

        if (isFieldProductOrSiteDimension)
        {
            this.initDimensionsSpecificDefaulting();
        }

        _inventDim.refreshFormDataSource(this.inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdBOM</Name>
				<Source><![CDATA[
    public void initFromProdBOM(ProdBOM _prodBOM)
    {
        this.ProdId             = _prodBOM.ProdId ;
        this.ItemId             = _prodBOM.ItemId;
        this.setInventDimId(_prodBOM.InventDimId);
        this.InventTransId      = _prodBOM.InventTransId;
        this.Position           = _prodBOM.Position;
        this.OprNum             = _prodBOM.OprNum;
        this.bomUnitId          = _prodBOM.UnitId;
        this.DefaultDimension   = this.copyDimension(_prodBOM.DefaultDimension);

        ProjInventJournalTransMapForm::construct(this).initFromProdBOM(_prodBOM);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventoryReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and updates the inventory references.
    /// </summary>
    /// <param name = "_prodBOM">The <c>ProdBOM</c> buffer.</param>
    /// <param name = "_mustInitializeChildReferences">Determines if the inventory child references must be initialized, or not.</param>
    protected void initInventoryReferences(ProdBOM _prodBOM, boolean _mustInitializeChildReferences)
    {
        if (_mustInitializeChildReferences)
        {
            InventQty       qty     = ProdJournalBOM::maxQty(this);
            UnitQty         qtyBOM  = ProdJournalBOM::maxQtyBOM(this);
            PdsCWInventQty  cwQty   = ProdJournalBOM::pdsCWMaxQty(this);

            this.InventTransChildType   = InventTransChildType::ProdJournalBOM;
            this.InventTransChildRefId  = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();

            if (qty || qtyBOM)
            {
                InventMovement movement = InventMovement::construct(_prodBOM, InventMovSubType::None, this);

                InventUpd_ChildReference childReference = InventUpd_ChildReference::newParameters(movement, -qty, -qtyBOM, false, this.InventDimId, -cwQty);

                childReference.updateNow();

                InventUpd_ChangeDimension::updateForceInventTrans(movement, InventDim::find(this.InventDimId), true, true);
            }
        }
        else
        {
            if (! this.InventDimId)
            {
                this.setInventDimId(InventDim::inventDimIdBlank());
            }

            this.InventTransChildType   = InventTransChildType::None;
            this.InventTransChildRefId  = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateProdBOM</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean mustUpdateProdBOM()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        ttsbegin;

        if (! this.LineNum)
        {
            this.LineNum = ProdJournalBOM::lastLineNum(this.JournalId) + 1;
        }

        if (this.mustUpdateProdBOM())
        {
            if (!this.InventTransId)
            {
                this.createProdBOM();
            }

            ProdBOM prodBOM = this.prodBOM(true);

            this.setInventReturnFlag(prodBOM);

            InventTransOriginId inventTransOriginId = InventTransOriginProdBOM::findInventTransOriginId(prodBOM.DataAreaId, prodBOM.InventTransId);
            using (RecordViewCache viewCacheInventTrans = new RecordViewCache(InventTrans::viewCacheBufferFromInventTransOriginId(inventTransOriginId, true)))
            {
                if (! this.InventReturnFlag)
                {
                    this.addProdBOMRemain(prodBOM);
                }

                this.initInventoryReferences(prodBOM, this.mustHandleChildReferences());

                if (this.isProjMethodConsumed())
                {
                    ProjInventJournalTransMapForm::construct(this).insertPost();
                }

                super();
                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    this.SysExtensionSerializerMap::postInsert();
                }
                // </GIN>
            }
        }
        else
        {
            super();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJournalCreate</Name>
				<Source><![CDATA[
    public void insertJournalCreate(
        ProdJournalTransData    _prodJournalTransData,
        ProdBOM                 _prodBOM,
        boolean                 _endJob = false,
        InventDimId             _inventDimId = '')
    {
        InventUpd_ChildReference    childReference;
        InventMovement              movement;

        InventQty                   qty;
        UnitQty                     qtyBOM;
        PdsCWInventQty              cwQty;
        boolean                     cwItem = PdsGlobal::pdsIsCWItem(_prodBOM.ItemId);
        InventTrans                 inventTrans;
        InventQty                   transQty;
        UnitQty                     transQtyUnit;
        PdsCWInventQty              cwTransQty;
        ProjInventJournalTransMapForm   projInventJournalTransMapForm;
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        ttsbegin;

        if (_prodBOM.isProjMethodConsumed())
        {
            projInventJournalTransMapForm = ProjInventJournalTransMapForm::construct(this);
            projInventJournalTransMapForm.fieldModifiedQtyPost();
            if (!projInventJournalTransMapForm.validateWritePost())
            {
                throw error("@SYS21628");
            }
        }

        this.setInventReturnFlag(_prodBOM);

        InventTransOriginId inventTransOriginId = InventTransOriginProdBOM::findInventTransOriginId(_prodBOM.DataAreaId, _prodBOM.InventTransId);
        using (var viewCacheInventTrans = new RecordViewCache(InventTrans::viewCacheBufferFromInventTransOriginId(inventTransOriginId, true)))
        {
            if (! this.InventReturnFlag)
            {
                this.addProdBOMRemain(_prodBOM,
                                      ProdJournalBOM::maxQty(this),
                                      ProdJournalBOM::maxQtyBOM(this),
                                      ProdJournalBOM::pdsCWMaxQty(this),
                                      _endJob);
            }

            if (!this.mustHandleChildReferences())
            {
                if (! this.InventDimId)
                {
                    this.setInventDimId(InventDim::inventDimIdBlank());
                }

                _prodJournalTransData.create(true);
            }
            else
            {
                qty     = ProdJournalBOM::maxQty(this);
                qtyBOM  = ProdJournalBOM::maxQtyBOM(this);

                boolean physicalReductionAndEndJobEnabled = _endJob
                                                            && ProdParameters::find().BOMJournalReducePhysical
                                                            && _prodBOM.whsEnabled();

                // Update journal quantities to not include 'On order' lines since these will be cleaned up with 'Physical reduction' parameter checked
                if (physicalReductionAndEndJobEnabled)
                {
                    [qty, qtyBOM] = this.calculatePickedOrReservedQuantities(_prodBOM, qty, qtyBOM);
                }

                cwQty   = ProdJournalBOM::pdsCWMaxQty(this);

                this.InventTransChildType   = InventTransChildType::ProdJournalBOM;
                this.InventTransChildRefId  = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();

                if (!cwItem && (qty || qtyBOM))
                {
                    movement = InventMovement::construct(_prodBOM,InventMovSubType::None,this);

                    childReference = this.initChildReferenceInventUpdate(
                        _prodJournalTransData,
                        _inventDimId,
                        movement,
                        qty,
                        qtyBOM,
                        physicalReductionAndEndJobEnabled);

                    childReference.updateNow();
                }
                else if (cwItem && cwQty)
                {
                    movement = InventMovement::construct(_prodBOM,InventMovSubType::None,this);

                    while select sum(PdsCWQty), sum(Qty), InventDimId from inventTrans
                        group by InventDimId
                        where  inventTrans.InventTransOrigin    == movement.inventTransOriginId()
                            && inventTrans.TransChildType       == InventTransChildType::None
                            && inventTrans.StatusIssue          >= StatusIssue::Picked
                            && inventTrans.StatusIssue          <= StatusIssue::OnOrder
                            && inventTrans.StatusReceipt        == StatusReceipt::None
                    {
                        if (inventTrans.PdsCWQty == 0)
                        {
                            continue;
                        }

                        transQty = min(qty, -inventTrans.Qty);
                        transQtyUnit = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(movement.itemId(),
																											 movement.inventDimId(),
																											 transQty,
																											 movement.inventTable().inventUnitId(),
																											 _prodBOM.UnitId,
																											 NoYes::No);
                        cwTransQty = min(cwQty, -inventTrans.PdsCWQty);
                        qty -= transQty;
                        qtyBOM -= transQtyUnit;
                        cwQty -= cwTransQty;

                        childReference = InventUpd_ChildReference::newProdJournalCreate(
                                            movement,
                                            -transQty,
                                            -transQtyUnit,
                                            _prodJournalTransData,
                                            -cwTransQty,
                                            inventTrans.InventDimId);

                        childReference.updateNow();
                    }
                }
                else
                {
                    _prodJournalTransData.create(true);
                }
            }

            // <GIN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && this.RecId)
            {
                this.SysExtensionSerializerMap::postInsert();
            }
            // </GIN>
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initChildReferenceInventUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>InventUpd_ChildReference</c> class for the insert journal scenario.
    /// </summary>
    /// <param name = "_prodJournalTransData">A journal line data.</param>
    /// <param name = "_inventDimId">An inventory dimension id.</param>
    /// <param name = "_movement">An inventory movement.</param>
    /// <param name = "_qty">A quantity.</param>
    /// <param name = "_qtyBOM">A BOM quantity.</param>
    /// <param name = "_checkInventTransPhysicalDimensions">Specifies if should perform a check on physical dimensions.</param>
    /// <returns>An initialized instance of the <c>InventUpd_ChildReference</c> class.</returns>
    protected InventUpd_ChildReference initChildReferenceInventUpdate(
        ProdJournalTransData    _prodJournalTransData,
        InventDimId             _inventDimId,
        InventMovement          _movement,
        InventQty               _qty,
        UnitQty                 _qtyBOM,
        boolean                 _checkInventTransPhysicalDimensions)
    {
        InventUpd_ChildReference childReference = InventUpd_ChildReference::newProdJournalCreate(
            _movement, 
            -_qty, 
            -_qtyBOM, 
            _prodJournalTransData, 
            0, 
            _inventDimId);

        // When the physical reduction and end production order parameters are set while reporting warehouse items as finished, only transactions with inventory dimensions that have a location should
        // be included when creating a picking list journal so that validation will pass.
        childReference.parmCheckInventTransPhysicalDimensions(_checkInventTransPhysicalDimensions);

        return childReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventDim</c> record that is related to the current item.
    /// </summary>
    /// <param name="_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A <c>InventDim</c> record; otherwise, an empty buffer.</returns>
    public InventDim inventDim(boolean _update = false)
    {
        return InventDim::find(this.InventDimId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovementChild</Name>
				<Source><![CDATA[
    public InventMovement inventMovementChild(Common _buffer)
    {
        #ISOCountryRegionCodes
        if ((! this.InventReturnFlag || ! SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ])) && _buffer.TableId == tableNum(ProdBOM))
        {
            return InventMov_ProdLine_JournalBOM::newFromProdTable(_buffer as ProdBOM, this);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>InventTable</c> record that is related to the current <c>ProdJournalBOM</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A <c>InventTable</c> record; otherwise, an empty table buffer.
    /// </returns>
    public InventTable inventTable(boolean _forUpdate = false)
    {
        InventTable inventTable;

        if (this.ItemId)
        {
            inventTable = InventTable::find(this.ItemId,_forUpdate);
        }
        else
        {
            if (this.InventTransId)
            {
                inventTable = InventTable::find(InventTransOrigin::findByInventTransId(this.InventTransId).ItemId,_forUpdate);
            }
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnit</Name>
				<Source><![CDATA[
    public display InventUnitId inventUnit()
    {
        return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPosted</Name>
				<Source><![CDATA[
    public display NoYes isPosted()
    {
        return ProdJournalTable::isPosted(this.JournalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjMethodConsumed</Name>
				<Source><![CDATA[
    public boolean isProjMethodConsumed()
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return false;
        }

        return (this.prodTable().isProjMethodConsumed() ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    public display ItemNameDisplay itemName()
    {
        return this.inventTable().itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mandatoryPick</Name>
				<Source><![CDATA[
    public boolean mandatoryPick()
    {
        InventModelGroup inventModelGroup = InventTable::find(this.ItemId).modelGroup();
        return inventModelGroup.MandatoryPick && !this.inventDim().inventLocation().VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleChildReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if child references must be handled.
    /// </summary>
    /// <returns>true if child references must be handled; otherwise, false.</returns>
    protected boolean mustHandleChildReferences()
    {
        return !this.InventReturnFlag && !this.mandatoryPick();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDeleteChildReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if child references must be deleted.
    /// </summary>
    /// <returns>true if child references must be deleted; otherwise, false.</returns>
    protected boolean mustDeleteChildReferences()
    {
        // cleanup a reference based on initial creating conditions, not volatile parameters
        return this.InventTransChildRefId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfVoucherLines</Name>
				<Source><![CDATA[
    public Integer numOfVoucherLines()
    {
        return any2int((select count(RecId) from prodJournalBOM
                           where prodJournalBOM.JournalId == this.JournalId &&
                                 prodJournalBOM.Voucher   == this.Voucher).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcRemainPhysical</Name>
				<Source><![CDATA[
    public PdsCWInventQty  pdsCWCalcRemainPhysical(ProdBOM  _prodBOM)
    {
        PdsCWInventQty inventRemain;
        PdsCWInventQty remainInventFinancial;

        if (!PdsGlobal::pdsIsCWItem(_prodBOM.ItemId))
        {
            return 0;
        }

        if (!_prodBOM.RecId)
        {
            _prodBOM = ProdBOM::findTransId(this.InventTransId);
        }

        if (!this.InventReturnFlag)
        {
            inventRemain = _prodBOM.PdsCWRemainPhysical - this.PdsCWInventConsump;

            if (inventRemain * _prodBOM.PdsCWRemainPhysical <= 0)
            {
                inventRemain = 0;
            }
        }
        else
        {
            inventRemain = 0;

            if (_prodBOM.PdsCWInventCalc && !_prodBOM.isReportedAsFinished())
            {
                remainInventFinancial = _prodBOM.pdsCWRemainInventFinancial();
                if (abs(remainInventFinancial + this.PdsCWInventConsump)
                    < abs(_prodBOM.pdsCWMaxQtyCalcStUpInvent()))
                {
                    inventRemain = _prodBOM.pdsCWMaxQtyCalcStUpInvent()
                                    - remainInventFinancial
                                    - this.PdsCWInventConsump;
                    if (abs(inventRemain) < abs(_prodBOM.PdsCWRemainPhysical))
                    {
                        inventRemain = _prodBOM.PdsCWRemainPhysical;
                    }
                }
            }
        }

        return inventRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDispositionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the batch disposition code associated with the <c>ProdJournalBOM</c> record.
    /// </summary>
    /// <returns>
    /// The disposition code associated with the <c>ProdJournalBOM</c> record.
    /// </returns>
    display PdsBatchDispositionCode pdsDispositionCode()
    {
        InventDim               inventDim;
        PdsBatchDispositionCode dispositionCode = '';

        if (hasFieldAccess(tableNum(InventBatch),
                    fieldNum(InventBatch,PdsDispositionCode),
                    AccessType::View))
        {
            inventDim = this.inventDim();
            if (inventDim.InventBatchId)
            {
                dispositionCode = InventBatch::find(
                                    inventDim.InventBatchId,
                                    this.ItemId).PdsDispositionCode;
            }
        }

        return dispositionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDispositionStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the batch disposition status associated with the <c>ProdJournalBOM</c> record.
    /// </summary>
    /// <returns>
    /// The disposition status associated with the <c>ProdJournalBOM</c> record.
    /// </returns>
    display PdsBatchDispositionStatus pdsDispositionStatus()
    {
        InventDim                   inventDim;
        PdsBatchDispositionStatus   status = PdsStatus::NotApplicable;

        inventDim = this.inventDim();
        if (inventDim.InventBatchId)
        {
            status = InventBatch::find(
                        inventDim.InventBatchId,
                        this.ItemId).pdsDispositionStatus();
        }

        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodBOM</Name>
				<Source><![CDATA[
    public ProdBOM  prodBOM(boolean _forUpdate = false)
    {
        return ProdBOM::findTransId(this.InventTransId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTable</Name>
				<Source><![CDATA[
    public ProdTable prodTable(boolean _forUpdate = false)
    {
        return ProdTable::find(this.ProdId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    public ProjTable projTable(boolean _forUpdate = false)
    {
        return ProjTable::find(this.ProjId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the <c>InventDimId</c> parameter to the <c>ProdJournalBOM.inventDimId</c> field and applies
    ///    default values that are based on the new inventory dimensions.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> value that should be applied to the <c>ProdJournalBOM.InventDimId</c> field.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record buffer related to the <c>InventDimId</c> parameters; optional.
    /// </param>
    public void setInventDimId(
        InventDimId _inventDimId,
        InventDim   _inventDim = InventDim::find(_inventDimId))
    {
        InventDim   currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();

        this.InventDimId = _inventDimId;
        _inventDim.setInventSiteFromParentIfModified(this, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates an <c>InventDimId</c> value for the <c>InventDim</c> parameter and applies the
    ///    found <c>InventDimId</c> to the <c>ProdJournalBOM.inventDimId</c> field.
    /// </summary>
    /// <param name="_inventDim">
    ///    An <c>InventDim</c> record buffer that should be referenced by the current <c>ProdJournalBOM</c>
    ///    record buffer.
    /// </param>
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim   inventDim;

        inventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventReturnFlag</Name>
				<Source><![CDATA[
    public void setInventReturnFlag(ProdBOM _prodBOM)
    {
        Qty maxQty = ProdJournalBOM::maxQtyBOM(this);

        if  (maxQty * _prodBOM.RemainBOMFinancial < 0 ||
             maxQty * _prodBOM.RemainBOMPhysical  < 0 ||
            (maxQty * _prodBOM.inventReleased()   < 0 && _prodBOM.RemainBOMFinancial == 0 && _prodBOM.RemainBOMPhysical == 0))
        {
            this.InventReturnFlag = NoYes::Yes;
        }
        else
        {
            this.InventReturnFlag = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subProdBOMRemain</Name>
				<Source><![CDATA[
    public void subProdBOMRemain(
        ProdBOM                     _prodBOM,
        InventQty                   _subQty          = -ProdJournalBOM::maxQty(this),
        UnitQty                     _subQtyBOM       = -ProdJournalBOM::maxQtyBOM(this),
        ProdInventControlProposal   _inventControl   = false,
        PdsCWInventQty              _cwSubQty        = -ProdJournalBOM::pdsCWMaxQty(this)
        )
    {
        boolean cwItem = PdsGlobal::pdsIsCWItem(_prodBOM.ItemId);
        _prodBOM.RemainInventPhysical    += _subQty;
        _prodBOM.RemainBOMPhysical       += _subQtyBOM;
        _prodBOM.PdsCWRemainPhysical     += _cwSubQty;

        if (!_prodBOM.isReportedAsFinished())
        {
            if (_prodBOM.EndConsump && !this.existsOtherTransIdNotPosted() && !_inventControl)
            {
                if (_prodBOM.RemainInventPhysical != 0 || _prodBOM.RemainBOMPhysical != 0)
                {
                    _prodBOM.RemainInventPhysical = 0;
                    _prodBOM.RemainBOMPhysical    = 0;
                    _prodBOM.PdsCWRemainPhysical  = 0;
                }
            }
            else
            {
                if (_prodBOM.QtyInventCalc > 0)
                {
                    if (_prodBOM.maxQtyCalcStUpInvent() - _prodBOM.remainInventFinancial() > _prodBOM.RemainInventPhysical)
                    {
                        _prodBOM.RemainInventPhysical =  _prodBOM.maxQtyCalcStUpInvent() - _prodBOM.remainInventFinancial();
                    }

                    if (_prodBOM.maxQtyCalcStUpBOM() - _prodBOM.RemainBOMFinancial > _prodBOM.RemainBOMPhysical)
                    {
                        _prodBOM.RemainBOMPhysical = _prodBOM.maxQtyCalcStUpBOM() - _prodBOM.RemainBOMFinancial;
                    }

                    if (cwItem
                        && (_prodBOM.pdsCWMaxQtyCalcStUpInvent()
                            - _prodBOM.pdsCWRemainInventFinancial()
                                > _prodBOM.PdsCWRemainPhysical))
                    {
                        _prodBOM.PdsCWRemainPhysical =
                            _prodBOM.pdsCWMaxQtyCalcStUpInvent()
                                - _prodBOM.pdsCWRemainInventFinancial();
                    }
                }
                else
                if (_prodBOM.QtyInventCalc < 0)
                {
                    if (_prodBOM.maxQtyCalcStUpInvent() - _prodBOM.remainInventFinancial() < _prodBOM.RemainInventPhysical)
                    {
                        _prodBOM.RemainInventPhysical =  _prodBOM.maxQtyCalcStUpInvent() - _prodBOM.remainInventFinancial();
                    }

                    if (_prodBOM.maxQtyCalcStUpBOM() - _prodBOM.RemainBOMFinancial < _prodBOM.RemainBOMPhysical)
                    {
                        _prodBOM.RemainBOMPhysical = _prodBOM.maxQtyCalcStUpBOM() - _prodBOM.RemainBOMFinancial;
                    }

                    if (cwItem
                        && (_prodBOM.pdsCWMaxQtyCalcStUpInvent()
                            - _prodBOM.pdsCWRemainInventFinancial()
                                < _prodBOM.PdsCWRemainPhysical))
                    {
                        _prodBOM.PdsCWRemainPhysical =
                            _prodBOM.pdsCWMaxQtyCalcStUpInvent()
                                - _prodBOM.pdsCWRemainInventFinancial();
                    }
                }
            }
        }

        if (_prodBOM.RemainInventPhysical != _prodBOM.orig().RemainInventPhysical || _prodBOM.PdsCWRemainPhysical != _prodBOM.orig().PdsCWRemainPhysical)
        {
            _prodBOM.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean allowEdit()
    {
        return !this.isPosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePickingLine</Name>
				<Source><![CDATA[
    private ProdBOM validatePickingLine(InventQty qty, PdsCWInventQty cwQty)
    {
        if (qty == 0 && cwQty != 0)
        {
            if (this.existsOtherTransIdNotPosted())
            {
                throw error(strFmt("@SCM:ProdPickingListCatchWeightNominalUpdateOtherOpenPicksExist", this.InventTransId));
            }
        }
        if (cwQty < 0 && qty > 0)
        {
            if (this.existsOtherTransIdNotPosted())
            {
                throw error(strFmt("@SCM:ProdPickingListCatchWeightNominalUpdateOtherOpenPicksExist", this.InventTransId));
            }
        }
        if (cwQty > 0 && qty < 0)
        {
            throw error("@SCM:ProdPickingListCatchWeightIncreaseNominalDecrease");
        }

        if (this.ProdId     != this.orig().ProdId)
        {
            throw error("@SYS23662");
        }

        if (!this.allowEdit())
        {
            throw error("@SYS77041");
        }

        if (! this.LineNum)
        {
            this.LineNum = ProdJournalBOM::lastLineNum(this.JournalId) + 1;
        }

        ProdBOM prodBOM = this.prodBOM(true);

        if (! this.checkInventReturnFlag(prodBOM))
        {
            throw error("@SYS18447");
        }

        return prodBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetOriginalChildReference</Name>
				<Source><![CDATA[
    private void resetOriginalChildReference(ProdBOM _prodBOM)
    {
        InventMovement prodBOMMovement = InventMovement::construct(_prodBOM,InventMovSubType::None,this);
        InventUpd_ChildReference::newParameters(prodBOMMovement,ProdJournalBOM::maxQty(this.orig()),ProdJournalBOM::maxQtyBOM(this.orig()),false,this.orig().InventDimId, ProdJournalBOM::pdsCWMaxQty(this.orig())).updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustReEstimateActualCatchWeightConsumption</Name>
				<Source><![CDATA[
    private boolean mustReEstimateActualCatchWeightConsumption(InventQty qty, PdsCWInventQty cwQty)
    {
        return ((qty == 0 && cwQty != 0) || (qty > 0 && cwQty < 0)) && this.mustHandleChildReferences();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        InventQty                   qty         = ProdJournalBOM::maxQty(this)     -  ProdJournalBOM::maxQty(this.orig());
        UnitQty                     qtyBOM      = ProdJournalBOM::maxQtyBOM(this)  -  ProdJournalBOM::maxQtyBOM(this.orig());
        PdsCWInventQty              cwQty       = ProdJournalBOM::pdsCWMaxQty(this)- ProdJournalBOM::pdsCWMaxQty(this.orig());

        ttsbegin;
        ProdBOM prodBOM = this.validatePickingLine(qty, cwQty);

        if (!this.mustUpdateProdBOM())
        {
            super();
            ttscommit;
            return;
        }

        InventTransOriginId inventTransOriginId = InventTransOriginProdBOM::findInventTransOriginId(prodBOM.DataAreaId, prodBOM.InventTransId);

        using (var viewCacheInventTrans = new RecordViewCache(InventTrans::viewCacheBufferFromInventTransOriginId(inventTransOriginId, true)))
        {
            boolean moreQty;
            boolean reEstimateActualCwConsumption = this.mustReEstimateActualCatchWeightConsumption(qty, cwQty);

            if (! this.InventReturnFlag)
            {
                if (reEstimateActualCwConsumption)
                {
                    this.resetOriginalChildReference(prodBOM);
                }

                if ((qty > 0 && ProdJournalBOM::maxQty(this.orig()) >= 0) ||
                    (qty < 0 && ProdJournalBOM::maxQty(this.orig()) <= 0) ||
                    reEstimateActualCwConsumption)
                {
                    this.addProdBOMRemain(prodBOM,qty,qtyBOM, cwQty);
                    moreQty = (qty > 0 || cwQty > 0);
                }
            }

            InventMovement movement = InventMovement::construct(prodBOM,InventMovSubType::None,this);

            if (reEstimateActualCwConsumption)
            {
                InventUpd_ChildReference::newParameters(movement, -ProdJournalBOM::maxQty(this), -ProdJournalBOM::maxQtyBOM(this), false, this.InventDimId, -ProdJournalBOM::pdsCWMaxQty(this)).updateNow();
            }
            else if ((qty || qtyBOM) && this.mustHandleChildReferences())
            {
                // Note: The original inventDimId is used in order to avoid an unnecessary split if both the InventDimId and the quantity has been changed
                InventUpd_ChildReference childReference = InventUpd_ChildReference::newParameters(movement,-qty,-qtyBOM,false,this.orig().InventDimId, -cwQty);
                if (prodBOM.ProdLineType == BOMType::Vendor && qtyBOM < 0)
                {
                    childReference.parmPreferredNoMarking(true);
                }

                childReference.updateNow();
            }

            if (! this.InventReturnFlag)
            {
                if ((qty < 0 && ProdJournalBOM::maxQty(this.orig()) > 0) ||
                    (qty > 0 && ProdJournalBOM::maxQty(this.orig()) < 0))
                {
                    this.subProdBOMRemain(prodBOM,qty,qtyBOM,NoYes::Yes, cwQty);
                }
            }

            if (this.InventTransChildType == InventTransChildType::ProdJournalBOM)
            {
                this.updateForceInventTransDim(movement, prodBOM, qty, cwQty, moreQty);
            }

            super();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForceInventTransDim</Name>
				<Source><![CDATA[
    private void updateForceInventTransDim(InventMovement movement, ProdBOM prodBOM, InventQty qty, PdsCWInventQty cwQty, boolean moreQty)
    {
        InventDim inventDimOrig = InventDim::find(this.orig().InventDimId);

        if (moreQty || this.InventDimId != inventDimOrig.inventDimId)
        {
            InventUpd_ChangeDimension::updateForceInventTrans(movement, InventDim::find(this.InventDimId), true, true, inventDimOrig);
        }

        if (!moreQty && (qty || cwQty))
        {
            InventDim prodBOMDim = InventDim::find(prodBOM.InventDimId);
            InventUpd_ChangeDimension::updateForceInventTrans(InventMovement::construct(prodBOM), prodBOMDim, false, true, prodBOMDim, prodBOM.whsEnabled());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(
        FieldName _fieldName,
        int       _arrayIndex = 1)
    {
        boolean result;

        result = super(_fieldName, _arrayIndex);

        if (   result
            && _fieldName == fieldStr(ProdJournalBOM,ItemId)
            && !this.inventTable().isStocked())
        {
            if (this.prodTable().ProdType == ProdType::Process)
            {
                result = checkFailed("@PDS1439");
            }
            else
            {
                result =checkFailed("@SYS183557");
            }
        }

        if (   result
            && this.isProjMethodConsumed())
        {
            result = ProjInventJournalTransMapForm::construct(this).validateFieldPost(_fieldName, _arrayIndex);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && this.isProjMethodConsumed())
        {
            ret = ProjInventJournalTransMapForm::construct(this).validateWritePost();
        }

        if (this.prodTable().inventDim().InventSiteId != this.inventDim().InventSiteId)
        {
            ret = checkFailed("@SYS117929");
        }

        // <GEERU>
        if (ret && !this.checkBOMConsump_RU())
        {
            ret = false;
        }
        // </GEERU>

        if (ret && #PmfEnabled)
        {
            ret = this.inventTable()
                    .pmfInventProductType().validateInventUpd();
        }

        if (ret
            && !this.InventTransId
            && this.InventConsump < 0
            && FeatureStateProvider::isFeatureEnabled(ProdPickListReversePreventNewLotIDToggle::instance()))
        {
            ret = checkFailed("@SCM:ProdPickListReversePreventNewLotID");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotMissingPosting</Name>
				<Source><![CDATA[
    public static boolean checkNotMissingPosting(ProdId _prodId)
    {
        ProdJournalTable    prodJournalTable;
        ProdJournalBOM      prodJournalBOM;

        boolean             ok = true;

        while select forceplaceholders prodJournalBOM
            index hint ProdIdx
            group by ProdId,JournalId
            where prodJournalBOM.ProdId     == _prodId
        join TableId from prodJournalTable
            index hint PostedJournalIdx
            where prodJournalTable.JournalId    == prodJournalBOM.JournalId         &&
                  prodJournalTable.Posted       == NoYes::No
        {
            ok = checkFailed(strFmt("@SYS69105",ProdJournalType::Picklist,prodJournalBOM.JournalId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventTransId</Name>
				<Source><![CDATA[
    public static void deleteInventTransId(InventTransId _inventTransId)
    {
        ProdJournalTableData        prodJournalTableData;
        ProdJournalTable            prodJournalTable;

        ProdJournalBOM              prodJournalBOM;
        ProdJournalTransDataBOM     prodJournalTransData;
        ttsbegin;

        while select forupdate prodJournalBOM
            index hint TransIdIdx
            where prodJournalBOM.InventTransId == _inventTransId
            join forUpdate prodJournalTable
                where prodJournalBOM.JournalId == prodJournalTable.JournalId
                    && prodJournalTable.Posted == NoYes::No
        {
            prodJournalTableData = JournalTableData::newTable(prodJournalTable);
            prodJournalTransData = prodJournalTableData.journalStatic().newJournalTransData(prodJournalBOM,prodJournalTableData);

            prodJournalTransData.delete();

            if (prodJournalTable.RecId)
            {
                if (prodJournalTable.NumOfLines)
                {
                    prodJournalTable.update();
                }
                else
                {
                    prodJournalTable.delete();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProdIdLines</Name>
				<Source><![CDATA[
    public static void deleteProdIdLines(ProdId _prodId)
    {
        ProdJournalTable        prodJournalTable;
        ProdJournalTableData    prodJournalTableData = JournalTableData::newTable(prodJournalTable);

        ProdJournalBOM          prodJournalBOM;
        ProdJournalTransData    prodJournalTransData;

        ttsbegin;

        while select forupdate forceplaceholders prodJournalBOM
            index hint ProdIdx
            where prodJournalBOM.ProdId == _prodId
        join forupdate prodJournalTable
            index hint JournalIdx
            where prodJournalTable.JournalId    == prodJournalBOM.JournalId         &&
                  prodJournalTable.Posted       == NoYes::No
        {
            if (! prodJournalTransData)
            {
                prodJournalTransData = prodJournalTableData.journalStatic().newJournalTransData(prodJournalBOM,prodJournalTableData);
            }

            prodJournalTransData.delete();
            prodJournalTableData.journalTable().update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>ProdJournalBOM</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>ProdJournalBOM</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value hat indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>ProdJournalBOM</c> table; otherwise, an empty record.
    /// </returns>
    public static ProdJournalBOM findRecId(
        RefRecId _recId,
        boolean  _forUpdate = false)
    {
        ProdJournalBOM  prodJournalBOM;

        if (_recId)
        {
            prodJournalBOM.selectForUpdate(_forUpdate);

            select firstonly prodJournalBOM
                where prodJournalBOM.RecId == _recId;
        }

        return prodJournalBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineCount</Name>
				<Source><![CDATA[
    public static Counter journalLineCount(ProdJournalId _prodJournalId)
    {
        return any2int((select count(RecId) from prodJournalBOM
                               index hint LineIdx
                               where prodJournalBOM.JournalId == _prodJournalId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    public static LineNum lastLineNum(ProdJournalId _journalId)
    {
        return (select maxof(LineNum) from prodJournalBom
                    where prodJournalBom.JournalId == _journalId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Opens a lookup form to select an inventory transaction related to the production order specified by <paramRef name="_prodId"/> parameter.
    /// </summary>
    /// <param name = "_ctrl">A control which opens a lookup form.</param>
    /// <param name = "_prodId">A production order Id.</param>
    /// <param name = "_company">A company of the production order.</param>
    public static void lookupTransId(
        FormStringControl   _ctrl,
        ProdId              _prodId,
        CompanyId           _company = curext()
        )
    {
        changecompany(_company)
        {
            Args args = ProdJournalBOM::lookupTransIdArgs(_ctrl, _prodId);
            FormRun formRun = classfactory.formRunClass(args);
            formRun.init();
            _ctrl.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTransIdArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of the <c>Args</c> class for a lookup form to select an inventory transaction related to the production order specified by <paramRef name="_prodId"/> parameter.
    /// </summary>
    /// <param name = "_ctrl">A control which opens a lookup form.</param>
    /// <param name = "_prodId">A production order Id.</param>
    protected static Args lookupTransIdArgs(
        FormStringControl   _ctrl,
        ProdId              _prodId)
    {
        Args args = new Args();
        args.name(formStr(ProdJournalBOMLookUp));
        args.parm(_prodId);
        args.caller(_ctrl);

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxQty</Name>
				<Source><![CDATA[
    public static Qty maxQty(ProdJournalBOM _prodJournalBOM)
    {
        if (_prodJournalBOM.InventControlProposal)
        {
            if (_prodJournalBOM.InventProposal >= 0 && _prodJournalBOM.InventConsump >= 0)
            {
                return max(_prodJournalBOM.InventProposal,_prodJournalBOM.InventConsump);
            }

            return min(_prodJournalBOM.InventProposal,_prodJournalBOM.InventConsump);
        }

        return _prodJournalBOM.InventConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxQtyBOM</Name>
				<Source><![CDATA[
    public static Qty maxQtyBOM(ProdJournalBOM _prodJournalBOM)
    {
        if (_prodJournalBOM.InventControlProposal)
        {
            if (_prodJournalBOM.bomProposal >= 0 && _prodJournalBOM.bomConsump >= 0)
            {
                return max(_prodJournalBOM.bomProposal,_prodJournalBOM.bomConsump);
            }

            return min(_prodJournalBOM.bomProposal,_prodJournalBOM.bomConsump);
        }

        return _prodJournalBOM.bomConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWMaxQty</Name>
				<Source><![CDATA[
    public static PdsCWInventQty pdsCWMaxQty(ProdJournalBOM _prodJournalBOM)
    {
        if (!PdsGlobal::pdsIsCWItem(_prodJournalBOM.ItemId))
        {
            return 0;
        }

        if (_prodJournalBOM.InventControlProposal)
        {
            if (_prodJournalBOM.PdsCWInventProposal >= 0
                && _prodJournalBOM.PdsCWInventConsump >= 0)
            {
                return max(_prodJournalBOM.PdsCWInventProposal,
                    _prodJournalBOM.PdsCWInventConsump);
            }

            return min(_prodJournalBOM.PdsCWInventProposal,
                _prodJournalBOM.PdsCWInventConsump);
        }

        return _prodJournalBOM.PdsCWInventConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventoryConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default value for inventory consumption.
    /// </summary>
    public void defaultInventoryConsumption()
    {
        this.populateInventoryConsumption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInventoryConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a value for inventory consumption.
    /// </summary>
    public void populateInventoryConsumption()
    {
        var inventTable = InventTable::find(this.ItemId);

        this.InventConsump = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTable.ItemId,
																								   this.InventDimId,
																								   this.bomConsump,
																								   this.bomUnitId,
                                                                                                   inventTable.inventUnitId(),
																								   NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packProdJournalBOM_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>ProdJournalBOM_IN</c> table
    /// </summary>
    /// <param name="_prodJournalBOM_IN">
    /// ProdJournalBOM_IN is packed.
    /// </param>
    public void packProdJournalBOM_IN(ProdJournalBOM_IN _prodJournalBOM_IN)
    {
        _prodJournalBOM_IN.ProdJournalBOM = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_prodJournalBOM_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodJournalBOM_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>ProdJournalBOM_IN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>ProdJournalBOM_IN</c> associated with the current record.
    /// </returns>
    public ProdJournalBOM_IN prodJournalBOM_IN()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(ProdJournalBOM_IN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalBOMSerialRegisteredAtConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirm that the quantity of registered serial numbers for the current pick list journal and the quantity being consumed are the same.
    /// </summary>
    /// <returns>
    /// Returns true if consumed quantity equals the number of serials or if the item is not serialized; false otherwise.
    /// </returns>
    public boolean checkJournalBOMSerialRegisteredAtConsumption()
    {
        return ProdJournalBOM::checkSerialRegisteredAtConsumption(this.ItemId, this.InventTransId, this.BOMConsump);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSerialRegisteredAtConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirm that the quantity of registered serial numbers for a pick list journal and the quantity being consumed are the same.
    /// </summary>
    /// <param name="_itemId">
    /// The item being checked.
    /// </param>
    /// <param name="_inventTransId">
    /// The inventory transaction Id associated with the item.
    /// </param>
    /// <param name="_inventQty">
    /// The total number of inventory that requires a serial.
    /// </param>
    /// <returns>
    /// Returns true if consumed quantity is the same as the number of serials or if the item is not serialized; false otherwise.
    /// </returns>
    public static boolean checkSerialRegisteredAtConsumption(
        ItemId         _itemId,
        InventTransId  _inventTransId,
        InventQty      _inventQty)
    {
        boolean ret = true;

        if (InventTable::find(_itemId).isItemSerialNumberActivated()
            && EcoResTrackingDimensionGroupItem::isItemActiveSerialAtConsumption(_itemId))
        {
            InventTransOriginId inventTransOriginId = InventTransOrigin::findByInventTransId(_inventTransId).RecId;

            if (!InventTrackingRegisterTrans::existsForInventTransOrigin(inventTransOriginId))
            {
                ret = checkFailed(strFmt("@SCM:RegisteredSerialConsumptionCheckMessage", _itemId));
            }
            else if (-InventTrackingRegisterTrans::qtyPhysicalIssue(inventTransOriginId) < _inventQty)
            {
                ret = checkFailed(strFmt("@SCM:ConsumedQtyRegisteredSerialsQtyNotMatchMessage", _itemId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePickedOrReservedQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///  When the 'Physical reduction' parameter is checked, journal lines should only be created for the quantity that will be deducted instead of the quantity
    ///     reported as finished since this has the potential to include 'On order' lines that break journal validation.
    /// </summary>
    /// <param name="_prodBOM">
    ///  A <c>ProdBOM</c> table buffer
    /// </param>
    /// <param name="_qty">
    ///  Quantity based upon <c>ProdJournalBOM::maxQty()</c>
    /// </param>
    /// <param name="_qtyBOM">
    ///  Quantity based upon <c>ProdJournalBOM::maxQtyBOM()</c>
    /// </param>
    /// <returns>
    ///  A container with the minimum quantity for reporting on the picking list.
    /// </returns>
    private container calculatePickedOrReservedQuantities(
                                ProdBOM     _prodBOM,
                                InventQty   _qty,
                                UnitQty     _qtyBOM)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventDim           inventDim;

        // Get the quantity picked or reserved
        select sum(Qty) from inventTrans
        where (inventTrans.StatusIssue == StatusIssue::ReservPhysical
                || inventTrans.StatusIssue == StatusIssue::Picked)
                && inventTrans.StatusReceipt == StatusReceipt::None
        join WMSLocationId from inventDim
            where inventDim.inventDimId == inventTrans.inventDimId
                && inventDim.wMSLocationId
        join RecId from inventTransOrigin
            where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
                && inventTransOrigin.InventTransId   == _prodBOM.InventTransId;

        // If we are overproducing, we only want to return the quantity that has currently been picked or reserved at the input location.
        InventQty qty     = min(-inventTrans.Qty, _qty);
        UnitQty qtyBOM;
        
        Qty inventQtyInBOMUnit = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_prodBOM.ItemId,
                                                                                                        _prodBOM.InventDimId,
                                                                                                        -inventTrans.Qty,
                                                                                                        _prodBOM.inventUnit(),
                                                                                                        _prodBOM.UnitId,
                                                                                                        NoYes::Yes,
                                                                                                        NoYes::Yes);

        qtyBOM = min(inventQtyInBOMUnit, _qtyBOM);

        return [qty, qtyBOM];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Try and reserve overproduction quantity at production input location for 'On order' transactions.
    /// </summary>
    /// <param name="_prodBOM">
    ///  A <c>ProdBOM</c> table buffer
    /// </param>
    /// <param name="_remainingQty">
    ///  Overproduction quantity
    /// </param>
    private void updateReservation(ProdBOM _prodBOM, Qty _remainingQty)
    {
        InventTrans                 inventTrans;
        InventTransOrigin           inventTransOrigin;

        WMSLocationId workCenterInputLocationId = WHSProdTable::getWorkCenterLocationFromProdId(_prodBOM.ProdId, _prodBOM.OprNum, _prodBOM.InventDimId);

        // Retrieve inventory dimensions tied to existing transactions
        select firstOnly InventDimId from inventTrans
        where (inventTrans.StatusIssue == StatusIssue::ReservPhysical
                || inventTrans.StatusIssue == StatusIssue::Picked
                || inventTrans.StatusIssue == StatusIssue::Deducted)
                && inventTrans.StatusReceipt == StatusReceipt::None
        exists join RecId from inventTransOrigin
            where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
                && inventTransOrigin.InventTransId   == _prodBOM.InventTransId;

        inventDim inventDimTo = InventDim::find(inventTrans.InventDimId);

        // If the location id does not exist or match current transactions
        if (inventDimTo.wMSLocationId != workCenterInputLocationId)
        {
            // Update location
            inventDimTo.wMSLocationId = workCenterInputLocationId;
            inventDimTo = InventDim::findOrCreate(inventDimTo);
        }

        // Get on-hand quantity for location we are trying to reserve against
        Qty workCenterAvailQty = WHSInventOnHand::getPhysicalAvailQty(_prodBOM.ItemId, inventDimTo);

        // If there is nothing to reserve against, do not try to reserve
        if (workCenterAvailQty <= 0)
        {
            return;
        }

        // Reserve either the full overproduction quantity or the on-hand quantity
        Qty reserveQty = _remainingQty <= workCenterAvailQty ? _remainingQty : workCenterAvailQty;

        // Inventory dimensions for 'On order' transactions
        InventDim inventDimFrom = InventDim::find(_prodBOM.InventDimId);

        // Create movement for the reservation
        InventMovement movement = InventMovement::construct(_prodBOM);

        // Match on all fields
        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(movement.inventdim());

        // Create reservation class
        InventUpd_Reservation reservation = InventUpd_Reservation::newParameters(movement,
                                                       inventDimFrom,
                                                       inventDimParm,
                                                       InventDimFixedClass::inventDimParm2InventDimFixed(inventDimParm),
                                                       -reserveQty,
                                                       false);
        // Set inventory dimension criteria to reserve against at the input location
        reservation.parmInventDimOnHandSelectionCriteria(inventDimTo);
        reservation.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heard table.
    /// </summary>
    /// <returns>The record for prodJournalTable.</returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        return ProdJournalTable::find(this.JournalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOppositeQtyTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an unposted line with opposite quantity sign in the same journal exists for the current <c>InventTransId</c>
    /// </summary>
    /// <returns>
    /// true if an unposted line exists in the same journal with opposite quantity sign; otherwise, false.
    /// </returns>
    public boolean existsOppositeQtyTransId()
    {
        ProdJournalBOM  prodJournalBOMSameLot;
     
        select firstonly RecId, BOMConsump from prodJournalBOMSameLot
            where prodJournalBOMSameLot.JournalId       == this.JournalId
               && prodJournalBOMSameLot.ProdId          == this.ProdId
               && prodJournalBOMSameLot.InventTransId   == this.InventTransId
               && prodJournalBOMSameLot.ItemId          == this.ItemId
               && prodJournalBOMSameLot.RecId           != this.RecId;

        if (prodJournalBOMSameLot.RecId && sign(prodJournalBOMSameLot.BOMConsump) != sign(this.BOMConsump))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickMaterialFromWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Picks warehouse enabled <c>ProdBOM</c> material for derived or backflushed, auto-posted picking lists
    /// </summary>
    /// <param name="_prodBOM">
    /// The <c>_prodBOM</c> non-reverse material to pick
    /// </param>
    /// <param name="_flushingPrinciple">
    /// The <c>ProdFlushingPrincipBOM</c> material flushing principle to follow, defaulted from <c>_prodBOM</c>
    /// </param>
    [Hookable(false)]
    internal void pickMaterialFromWarehouse(ProdBOM _prodBOM, ProdFlushingPrincipBOM _flushingPrinciple = _prodBOM.ProdFlushingPrincip)
    {
        if (this.canPickMaterialFromWarehouse())
        {
            InventQty qtyToPick = this.InventConsump;

            if (ProdAutoPickSubproductionFlight::instance().isEnabled())
            {
                InventMovement   movement = InventMovement::construct(_prodBOM);
                InventTransIdSum inventTransIdSum = InventTransIdSum::newTransIdNoChildType(movement.inventTransOriginId());

                qtyToPick += inventTransIdSum.picked();
                if (qtyToPick <= 0 || !_prodBOM.canPickSubProductionDemand(qtyToPick))
                {
                    return;
                }
            }
            WHSProdTable::adjustMaterialDemandForOverpick(_prodBOM, qtyToPick);

            if (ProdAutoPickMaterialsCreateJournalFlight::instance().isEnabled())
            {
                WHSProdTable::pickMaterial(_prodBOM.prodTable(), _prodBOM, qtyToPick, _flushingPrinciple, false);
            }
            else
            {
                WHSProdTable::pickMaterial(_prodBOM.prodTable(), _prodBOM, qtyToPick, _flushingPrinciple);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPickMaterialFromWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to pick the material from warehouse for derived or backflushed, auto-posted picking list or not.
    /// </summary>
    /// <returns>
    /// true if the material should be picked from warehouse; otherwise, false.
    /// </returns>
    public boolean canPickMaterialFromWarehouse()
    {
        return FeatureStateProvider::isFeatureEnabled(ProdAutoPickMaterialsFromWarehouseFeature::instance()) &&
            InventTable::find(this.ItemId).whsItemIsWHSControlled() &&
            this.InventConsump > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProdJournalBOMWithEmptyConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes lines with 0 consumption for the unposted picking list journal.
    /// </summary>
    /// <param name = "_prodJournalId">The ID of the journal whose lines should be checked and deleted.</param>
    /// <returns>
    /// The number of deleted <c>ProdJournalBOM</c> lines.
    /// </returns>
    [Hookable(false)]
    internal static int deleteProdJournalBOMWithEmptyConsumption(ProdJournalId _prodJournalId)
    {
        ProdJournalBOM prodJournalBOM;
        int numberOfDeletedProdJournalBOM = 0;

        while select forupdate prodJournalBOM
                where prodJournalBOM.JournalId          == _prodJournalId
                    && prodJournalBOM.BOMConsump         == 0
                    && prodJournalBOM.PdsCWInventConsump == 0
                    && prodJournalBOM.InventConsump      == 0
        {
            prodJournalBOM.delete();

            numberOfDeletedProdJournalBOM++;
        }

        return numberOfDeletedProdJournalBOM;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<DeveloperDocumentation>@SYS124154</DeveloperDocumentation>
	<Label>@SYS21332</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>Voucher</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>LineIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>LineIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JournalError</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JournalError</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMConsump</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndConsump</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOM</Name>
			<Label>@SYS7916</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOMQuantity</Name>
			<Label>@SYS22164</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMProposal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMConsump</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EndReporting</Name>
			<Label>@SYS55040</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EndConsump</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventReturnFlag</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryQuantity</Name>
			<Label>@SYS21676</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProposal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventConsump</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>JournalLine</Name>
			<Label>@SYS23949</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWQty</Name>
			<Label>@PDS83</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventProposal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventConsump</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting_RU</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StornoPhysical_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectCostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventConsump</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCostAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectIdentification</Name>
			<Label>@SYS89920</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjSalesCurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectTransaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransChildType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransChildRefId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Scrap</Name>
			<Label>@SYS1032</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMScrap</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorCause</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventControlProposal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmActivityNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BOMConsump</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitQty</ExtendedDataType>
			<Label>@SYS853</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BOMProposal</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitQty</ExtendedDataType>
			<Label>@SYS26457</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BOMScrap</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitQty</ExtendedDataType>
			<Label>@SYS1032</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMUnitId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteLinkedDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndConsump</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS14401</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ErrorCause</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS14862</Label>
			<EnumType>ProdErrorCause</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventConsump</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS22656</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventControlProposal</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdInventControlProposal</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventProposal</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS22655</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventReturnFlag</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventReturnFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransChildRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransChildRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventTransChildType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTransChildType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdInventoried</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdJournalIdBOM</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OprNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OprNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWInventConsump</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS154</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWInventProposal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS152</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Position</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMPosition</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjCostAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjCostPrice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemCostPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjLinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesCurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjSalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjItemTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StornoPhysical_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Storno_RU</ExtendedDataType>
			<Label>@GLS114774</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdJournalVoucherId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjTransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ActivityNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>JournalTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>JournalId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>ProjInventJournalTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
					<MapFieldTo>ActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BudgetReservationLine_PSN</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EcoResCategory</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>ProjCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostAmount</MapField>
					<MapFieldTo>ProjCostAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostMarkup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostPrice</MapField>
					<MapFieldTo>ProjCostPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjLinePropertyId</MapField>
					<MapFieldTo>ProjLinePropertyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjPriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesCurrencyId</MapField>
					<MapFieldTo>ProjSalesCurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesPrice</MapField>
					<MapFieldTo>ProjSalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesUnitId</MapField>
					<MapFieldTo>BOMUnitId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxGroupId</MapField>
					<MapFieldTo>ProjTaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxItemGroupId</MapField>
					<MapFieldTo>ProjTaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTransId</MapField>
					<MapFieldTo>ProjTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>InventConsump</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
					<MapFieldTo>BOMUnitId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>BOMUnitId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Unit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BOMJournal</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMUnitId</Name>
					<Field>BOMUnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BOMJournal</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JournalError</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EntityRelationshipRole>@SYS124155</EntityRelationshipRole>
			<RelatedTable>JournalError</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Error</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BOMJournal</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineNum</Name>
					<Field>LineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>RefTableId_Extern</Name>
					<RelatedField>RefTableId</RelatedField>
					<Value>243</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdBOM</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124156</EntityRelationshipRole>
			<RelatedTable>ProdBOM</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionBom</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BOMJournal</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>JournalType_Extern</Name>
					<RelatedField>JournalType</RelatedField>
					<ValueStr>ProdJournalType::Picklist</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectSalesCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesCurrencyId</Name>
					<Field>ProjSalesCurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectTaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxGroupId</Name>
					<Field>ProjTaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectTaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxItemGroupId</Name>
					<Field>ProjTaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjItemTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjItemTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<Field>ProjTransId</Field>
					<RelatedField>ProjTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLinePropertyId</Name>
					<Field>ProjLinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>