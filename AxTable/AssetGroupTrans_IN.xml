<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetGroupTrans_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetGroupTrans_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayAssetId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the asset ID value of the asset group trans record, based on the TransType.
    /// </summary>
    /// <returns>
    /// return the asset ID value blank if TransType is "Depreciation" or "DepreciationAdj", else return current Asset ID value.
    /// </returns>
    display AssetId displayAssetId()
    {
        AssetGroupInformation_IN assetGroupInformation = AssetGroupInformation_IN::find(this.AssetGroupInformation);

        if (assetGroupInformation.TransType == AssetTransType::Depreciation
           || assetGroupInformation.TransType == AssetTransType::DepreciationAdj)
        {
            return '';
        }

        return this.AssetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if transaction has been reversed.
    /// </summary>
    /// <returns>
    /// Returns true if transaction has been reversed.
    /// </returns>
    display boolean reversed()
    {
        return TransactionReversalTrans::findTransactionReversalTrans(tablenum(AssetGroupTrans_IN),
                                                                      this.RecId).Reversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sum amount of all Acquisition, Adjustments and capital reserve.
    /// </summary>
    /// <param name="_assetId">
    /// Assetid to search for.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date to search for.
    /// </param>
    /// <param name="_assetBookId">
    /// Book id to search for.
    /// </param>
    /// <returns>
    /// Returns sum amount of all Acquisition, Adjustments and capital reserve.
    /// </returns>
    public static AssetAmount acquisitionAmount(AssetId         _assetId,
                                                TransDate       _transDate,
                                                AssetBookId     _assetBookId)
    {
        return AssetTrans::amountMSTPerDateTranstype(_assetId, _transDate, _assetBookId, AssetTransType::Acquisition) +
               AssetTrans::amountMSTPerDateTranstype(_assetId, _transDate, _assetBookId, AssetTransType::AcquisitionAdj) +
               AssetTrans::amountMSTPerDateTranstype(_assetId, _transDate, _assetBookId, AssetTransType::CapitalReserveTransfer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTPerDateTranstype</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sum of all amount for an asset.
    /// </summary>
    /// <param name="assetGroupId">
    /// AssetGroupid to search for.
    /// </param>
    /// <param name="transDate">
    /// Transaction date to search for.
    /// </param>
    /// <param name="assetBookId">
    /// Bookid to search for.
    /// </param>
    /// <param name="assetTransType">
    /// Transaction type of the asset.
    /// </param>
    /// <param name="assetId">
    /// Assetid to search for.
    /// </param>
    /// <returns>
    /// Sum of all amount for an asset.
    /// </returns>
    public static AmountMST amountMSTPerDateTranstype(AssetGroupId    assetGroupId,
                                                      TransDate       transDate,
                                                      AssetBookId     assetBookId,
                                                      AssetTransType  assetTransType,
                                                      AssetId         assetId)
    {
        AssetGroupInformation_IN    assetGroupInformation;
        AssetGroupTrans_IN          assetGroupTrans;

        if (AssetBook::find(assetId, assetBookId).DepreciationStartDate <= transDate)
        {
            select sum(AmountMst) from assetGroupInformation
                where  assetGroupInformation.AssetGroup     == assetGroupId
                    && assetGroupInformation.TransDate      <= transDate
                    && assetGroupInformation.TransType      == assetTransType
            exists join AssetGroupInformation from assetGroupTrans
                where  assetGroupTrans.BookId                == assetBookId
                    && assetGroupTrans.AssetGroupInformation == assetGroupInformation.RecId;

            return assetGroupInformation.AmountMst;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToDepreciate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sum of all Acquisition, Adjustments, write down and capital reserve.
    /// </summary>
    /// <param name="assetGroupId">
    /// assetGroupId to search for
    /// </param>
    /// <param name="transDate">
    /// Transaction date to search for.
    /// </param>
    /// <param name="assetBookId">
    /// Book id to search for.
    /// </param>
    /// <param name="assetId">
    /// Asset id to search for.
    /// </param>
    /// <returns>
    /// Sum of all Acquisition, Adjustments, write down and capital reserve.
    /// </returns>
    public static AssetAmount amountToDepreciate(AssetGroupId   assetGroupId,
                                                 TransDate      transDate,
                                                 AssetBookId    assetBookId,
                                                 AssetId        assetId)
    {
        return AssetGroupTrans_IN::amountMSTPerDateTranstype(assetGroupId, transDate, assetBookId, AssetTransType::Acquisition, assetId) +
               AssetGroupTrans_IN::amountMSTPerDateTranstype(assetGroupId, transDate, assetBookId, AssetTransType::AcquisitionAdj, assetId) +
               AssetGroupTrans_IN::amountMSTPerDateTranstype(assetGroupId, transDate, assetBookId, AssetTransType::CapitalReserveTransfer, assetId) +
               AssetGroupTrans_IN::amountMSTPerDateTranstype(assetGroupId, transDate, assetBookId, AssetTransType::Revaluation, assetId) +
               AssetGroupTrans_IN::amountMSTPerDateTranstype(assetGroupId, transDate, assetBookId, AssetTransType::WriteDownAdj, assetId) +
               AssetGroupTrans_IN::amountMSTPerDateTranstype(assetGroupId, transDate, assetBookId, AssetTransType::WriteUpAdj, assetId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if transaction can be reversed.
    /// </summary>
    /// <param name="_assetGroupTrans">
    /// The <c>AssetGroupTrans_IN</c> buffer to check for reversal.
    /// </param>
    /// <returns>
    /// Returns true if it can be reversed.
    /// </returns>
    public static boolean checkReversal(AssetGroupTrans_IN    _assetGroupTrans)
    {
        AssetGroupInformation_IN    assetGroupInformation;
        boolean                     isValid = false;

        assetGroupInformation = AssetGroupInformation_IN::find(_assetGroupTrans.AssetGroupInformation);

        if (assetGroupInformation.TransType == AssetTransType::Acquisition                  ||
            assetGroupInformation.TransType == AssetTransType::AcquisitionAdj               ||
            assetGroupInformation.TransType == AssetTransType::BonusDepreciation            ||
            assetGroupInformation.TransType == AssetTransType::CapitalReserve               ||
            assetGroupInformation.TransType == AssetTransType::CapitalReserveTransfer       ||
            assetGroupInformation.TransType == AssetTransType::Depreciation                 ||
            assetGroupInformation.TransType == AssetTransType::DepreciationAdj              ||
            assetGroupInformation.TransType == AssetTransType::DisposalSale                 ||
            assetGroupInformation.TransType == AssetTransType::DisposalScrap                ||
            assetGroupInformation.TransType == AssetTransType::ExtraordinaryDepreciation    ||
            assetGroupInformation.TransType == AssetTransType::Revaluation                  ||
            assetGroupInformation.TransType == AssetTransType::DerogatoryDecrease           ||
            assetGroupInformation.TransType == AssetTransType::DerogatoryIncrease           ||
            assetGroupInformation.TransType == AssetTransType::WriteDownAdj                 ||
            assetGroupInformation.TransType == AssetTransType::WriteUpAdj)
        {
            isValid = true;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationAcctCurrencyAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sum accounting currency amount of all Depreciation and Depreciation adjustment.
    /// </summary>
    /// <param name="_assetGroupId">
    /// assetGroupId to search for
    /// </param>
    /// <param name="_transDate">
    /// Transaction date to search for.
    /// </param>
    /// <param name="_assetBookId">
    /// Book id to search for.
    /// </param>
    /// <param name="_assetId">
    /// Asset id to search for.
    /// </param>
    /// <returns>
    /// Returns accounting currency sum amount of all Depreciation and Depreciation adjustment.
    /// </returns>
    public static AssetAmount depreciationAcctCurrencyAmt(
        AssetGroupId   _assetGroupId,
        TransDate      _transDate,
        AssetBookId    _assetBookId,
        AssetId        _assetId)
    {
        return - (AssetGroupTrans_IN::amountMSTPerDateTranstype(_assetGroupId, _transDate, _assetBookId, AssetTransType::Depreciation, _assetId) +
                  AssetGroupTrans_IN::amountMSTPerDateTranstype(_assetGroupId, _transDate, _assetBookId, AssetTransType::DepreciationAdj, _assetId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the asset group exists by RecId.
    /// </summary>
    /// <param name="_recId">
    /// The RecId.
    /// </param>
    /// <returns>
    /// Returns true if the asset group exists.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        return (select firstonly RecId from assetTrans
                    where assetTrans.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAssetGroupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the asset group transaction exists.
    /// </summary>
    /// <param name="_assetGroup">
    /// The asset group.
    /// </param>
    /// <param name="_bookId">
    /// The book id.
    /// </param>
    /// <returns>
    /// Returns true if the asset group transaction exists.
    /// </returns>
    public static boolean existAssetGroupTrans(AssetGroupId     _assetGroup,
                                               AssetBookId      _bookId)
    {
        AssetGroupInformation_IN    assetGroupInformation;
        AssetGroupTrans_IN          assetGroupTrans;

        if (_assetGroup && _bookId)
        {
            select firstonly AssetGroup, TransType, RecId from assetGroupInformation
                where assetGroupInformation.AssetGroup    == _assetGroup
                   && (assetGroupInformation.TransType    == AssetTransType::Depreciation
                   || assetGroupInformation.TransType     == AssetTransType::DepreciationAdj)
            join AssetGroupInformation from assetGroupTrans
                where assetGroupTrans.BookId              == _bookId;
        }
        return  assetGroupInformation.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBonusDepreciationTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the bonus depreciation exists for asset dep book.
    /// </summary>
    /// <param name="_assetGroup">
    /// Asset group id to find.
    /// </param>
    /// <param name="_bookId">
    /// Asset Book id to find.
    /// </param>
    /// <param name="_periodStart">
    /// Start date of the period.
    /// </param>
    /// <param name="_periodEnd">
    /// End date of the period.
    /// </param>
    /// <param name="_assetId">
    /// Asset id to find.
    /// </param>
    /// <returns>
    /// Returns true if bonus depreciation exists for asset dep book.
    /// </returns>
    public static boolean existBonusDepreciationTrans(AssetGroupId _assetGroup,
                                                      AssetBookId  _bookId,
                                                      date         _periodStart,
                                                      date         _periodEnd,
                                                      AssetId      _assetId)
    {
        AssetGroupSetupBonus     assetGroupSetupBonus;
        AssetGroupInformation_IN    assetGroupInformation;
        AssetGroupTrans_IN          assetGroupTrans;
        TransactionReversalTrans    transactionReversalTransLocal;

        if (_assetGroup && _bookId)
        {
            select firstonly AssetGroup, BonusId, TransDate, RecId from assetGroupInformation
                where  assetGroupInformation.AssetGroup  == _assetGroup
                    && assetGroupInformation.TransDate   >= _periodStart
                    && assetGroupInformation.TransDate   <= _periodEnd
            join BonusId from assetGroupSetupBonus
                where assetGroupSetupBonus.AssetGroupId == _assetGroup
                    && assetGroupSetupBonus.BookId       == _bookId
                    && assetGroupInformation.BonusId     == assetGroupSetupBonus.BonusId
            join AssetGroupInformation from assetGroupTrans
                where  assetGroupTrans.AssetId           == _assetId
                    && assetGroupTrans.BookId            == _bookId
                    && assetGroupTrans.AssetGroupInformation == assetGroupInformation.RecId
            notExists join RefRecId from transactionReversalTransLocal
                where  assetGroupInformation.recid == transactionReversalTransLocal.refrecid
                    && assetGroupInformation.TableId == transactionReversalTransLocal.RefTableId;
        }

        if (assetGroupInformation)
            return true;
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extraAmountToDepriciate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sum of all Acquisition, Acquisition Adj, Capital Reserve Transfer,Revaluation, Write Down Adj and Bonus Depreciation amout to depreciation.
    /// </summary>
    /// <param name="assetId">
    /// Asset id of the transacation
    /// </param>
    /// <param name="assetGroupId">
    /// Asset group to check for
    /// </param>
    /// <param name="assetBookId">
    /// Asset Book id of the transaction
    /// </param>
    /// <param name="startTransDate">
    /// Start date of the transaction
    /// </param>
    /// <param name="endTransDate">
    /// End date of the transaction
    /// </param>
    /// <returns>
    /// Return sum of all Acquisition, Acquisition Adj, Capital Reserve Transfer,Revaluation, Write Down Adj and Bonus Depreciation amout to depreciation.
    /// </returns>
    public static AmountMST extraAmountToDepriciate(AssetId      assetId,
                                                    AssetGroupId assetGroupId,
                                                    AssetBookId  assetBookId,
                                                    TransDate    startTransDate,
                                                    TransDate    endTransDate)
    {
        AssetGroupInformation_IN    assetGroupInformation;
        AssetGroupTrans_IN          assetGroupTrans;

        select sum(AmountMST) from assetGroupInformation
            where  assetGroupInformation.AssetGroup == assetGroupId
                && assetGroupInformation.TransDate >= startTransDate
                && assetGroupInformation.TransDate <= endTransDate
                && (assetGroupInformation.TransType == AssetTransType::Acquisition
                    || assetGroupInformation.TransType == AssetTransType::AcquisitionAdj
                    || assetGroupInformation.TransType == AssetTransType::CapitalReserveTransfer
                    || assetGroupInformation.TransType == AssetTransType::Revaluation
                    || assetGroupInformation.TransType == AssetTransType::WriteDownAdj
                    || assetGroupInformation.TransType == AssetTransType::WriteUpAdj)
         exists join assetGroupInformation from assetGroupTrans
             where assetGroupTrans.AssetId == assetId
                 && assetGroupTrans.BookId == assetBookId
                 && assetGroupTrans.AssetGroupInformation == assetGroupInformation.RecId;

        return assetGroupInformation.AmountMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>AssetGroupTrans_IN</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>AssetGroupTrans_IN</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetGroupTrans_IN</c> table; otherwise, an empty record.
    /// </returns>
    static AssetGroupTrans_IN find(recId             _recId,
                                   boolean           _forupdate          = false,
                                   ConcurrencyModel  _concurrencyModel   = ConcurrencyModel::Auto)
    {
        AssetGroupTrans_IN  assetGroupTrans;

        assetGroupTrans.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetGroupTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly assetGroupTrans
            where assetGroupTrans.RecId == _recId;

        return assetGroupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAssetId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds asset group transaction by asset id.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_assetGroupId">
    /// The asset group id.
    /// </param>
    /// <param name="_bookId">
    /// The book id.
    /// </param>
    /// <param name="_assetTransType">
    /// The asset transaction type.
    /// </param>
    /// <param name="_forupdate">
    /// The forupdate flag.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model.
    /// </param>
    /// <returns>
    /// The instance of the <c>AssetGroupTrans_IN</c> class.
    /// </returns>
    public static AssetGroupTrans_IN findByAssetId(AssetId                  _assetId,
                                                   AssetGroupId             _assetGroupId,
                                                   AssetBookId              _bookId,
                                                   AssetTransType           _assetTransType,
                                                   boolean                  _forupdate         = false,
                                                   ConcurrencyModel         _concurrencyModel  = ConcurrencyModel::Auto)
    {
        AssetGroupInformation_IN    assetGroupInformation;
        AssetGroupTrans_IN          assetGroupTrans;

        assetGroupTrans.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetGroupTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly assetGroupTrans
            where  assetGroupTrans.BookId           == _bookId
                && assetGroupTrans.AssetId          == _assetId
        join RecId from assetGroupInformation
            where  assetGroupInformation.AssetGroup == _assetGroupId
                && assetGroupInformation.TransType  == _assetTransType
                && assetGroupInformation.RecId      == assetGroupTrans.AssetGroupInformation;

        return assetGroupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>AssetGroupTrans_IN</c> table by the specified asset.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>AssetGroupTrans_IN</c> table record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>AssetGroupTrans_IN</c> table; otherwise, an empty record.
    /// </returns>
    static AssetGroupTrans_IN findByRecId(recId             _recId,
                                          boolean           _forupdate          = false,
                                          ConcurrencyModel  _concurrencyModel   = ConcurrencyModel::Auto)
    {
        AssetGroupTrans_IN assetGroupTrans;

        assetGroupTrans.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetGroupTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly assetGroupTrans
            where assetGroupTrans.RecId == _recId;

        return assetGroupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds asset group transaction by voucher.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The instance of the <c>AssetGroupTrans_IN</c> class.
    /// </returns>
    public static AssetGroupTrans_IN findByVoucher(Voucher          _voucher,
                                                   TransDate        _transDate)
    {
        AssetGroupInformation_IN    assetGroupInformation;
        AssetGroupTrans_IN          assetGroupTrans;

        assetGroupTrans.selectLocked(false);

        select firstonly assetGroupTrans
            where assetGroupTrans.Voucher         == _voucher
        join RecId from assetGroupInformation
            where assetGroupInformation.TransDate == _transDate;

        return assetGroupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netBookValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Net book value of an asset group.
    /// </summary>
    /// <param name="assetGroupId">
    /// assetGroupId to search for
    /// </param>
    /// <param name="transDate">
    /// Transaction date to search for.
    /// </param>
    /// <param name="assetBookId">
    /// Book id to search for.
    /// </param>
    /// <param name="assetId">
    /// Asset id to search for.
    /// </param>
    /// <returns>
    /// Net book value of an asset group.
    /// </returns>
    public static AssetAmount netBookValue(AssetGroupId   assetGroupId,
                                                 TransDate      transDate,
                                                 AssetBookId    assetBookId,
                                                 AssetId        assetId)
    {
        return AssetGroupTrans_IN::amountToDepreciate(assetGroupId, transDate, assetBookId, assetId)
            + AssetGroupTrans_IN::amountMSTPerDateTransType(assetGroupId, transDate, assetBookId, AssetTransType::Depreciation, assetId)
            + AssetGroupTrans_IN::amountMSTPerDateTransType(assetGroupId, transDate, assetBookId, AssetTransType::DepreciationAdj, assetId)
            + AssetGroupTrans_IN::amountMSTPerDateTransType(assetGroupId, transDate, assetBookId, AssetTransType::ExtraordinaryDepreciation, assetId)
            + AssetGroupTrans_IN::amountMSTPerDateTransType(assetGroupId, transDate, assetBookId, AssetTransType::BonusDepreciation, assetId)
            + AssetGroupTrans_IN::amountMSTPerDateTransType(assetGroupId, transDate, assetBookId, AssetTransType::DisposalSale, assetId)
            + AssetGroupTrans_IN::amountMSTPerDateTransType(assetGroupId, transDate, assetBookId, AssetTransType::DisposalScrap, assetId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTPerAssetGroupDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sum of all amount for an asset.
    /// </summary>
    /// <param name="_assetGroupId">
    /// AssetGroupid to search for.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date to search for.
    /// </param>
    /// <param name="_assetBookId">
    /// Bookid to search for.
    /// </param>
    /// <param name="_assetTransType">
    /// Transaction type of the asset.
    /// </param>
    /// <returns>
    /// Sum of all amount for an asset.
    /// </returns>
    public static AmountMST amountMSTPerAssetGroupDate(AssetGroupId    _assetGroupId,
                                                           TransDate       _transDate,
                                                           AssetBookId     _assetBookId,
                                                           AssetTransType  _assetTransType)
    {
        AssetGroupInformation_IN    assetGroupInformation;
        AssetGroupTrans_IN          assetGroupTrans;

        select sum(AmountMst) from assetGroupInformation
                where  assetGroupInformation.AssetGroup     == _assetGroupId
                    && assetGroupInformation.TransDate      <= _transDate
                    && assetGroupInformation.TransType      == _assetTransType
            exists join AssetGroupInformation from assetGroupTrans
                where  assetGroupTrans.BookId                == _assetBookId
                    && assetGroupTrans.AssetGroupInformation == assetGroupInformation.RecId;

        return assetGroupInformation.AmountMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTPerAssetIdDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sum of all amount for an asset id.
    /// </summary>
    /// <param name = "_assetGroupId">
    /// AssetGroupid to search for.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date to search for.
    /// </param>
    /// <param name="_assetBookId">
    /// Bookid to search for.
    /// </param>
    /// <param name="_assetTransType">
    /// Transaction type of the asset.
    /// </param>
    /// <param name = "_assetId">
    /// AssetId to search for
    /// </param>
    /// <returns>
    /// Sum of all amount for an asset id.
    /// </returns>
    public static AmountMST amountMSTPerAssetIdDate(AssetGroupId    _assetGroupId,
                                                           TransDate       _transDate,
                                                           AssetBookId     _assetBookId,
                                                           AssetTransType  _assetTransType,
                                                           AssetId         _assetId)
    {
        AssetGroupInformation_IN    assetGroupInformation;
        AssetGroupTrans_IN          assetGroupTrans;

        select sum(AmountMst) from assetGroupInformation
                where  assetGroupInformation.AssetGroup     == _assetGroupId
                    && assetGroupInformation.TransDate      <= _transDate
                    && assetGroupInformation.TransType      == _assetTransType
            exists join AssetGroupInformation from assetGroupTrans
                where  assetGroupTrans.AssetId               == _assetId
                    && assetGroupTrans.BookId                == _assetBookId
                    && assetGroupTrans.AssetGroupInformation == assetGroupInformation.RecId;

        return assetGroupInformation.AmountMst;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63732</DeveloperDocumentation>
	<FormRef>AssetTrans</FormRef>
	<Label>@SYS67422</Label>
	<SingularLabel>Fixed asset transaction</SingularLabel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Voucher</TitleField1>
	<TitleField2>AssetId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetGroupInformation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Accounts</Name>
			<Label>@SYS11800</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Approve</Name>
			<Label>@SYS38598</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS80374</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Section179WriteOff</Name>
			<Label>@SYS71209</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Approver</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>HcmApprover</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetGroupInformation</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReserveTransId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RevaluedTransID</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VoucherDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AssetGroupInformation_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetGroupInformation</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueSetIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AssetBookIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AssetLedgerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PostingProfile</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Approver</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>AssetGroupDepTransMap_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AssetBookId</MapField>
					<MapFieldTo>BookId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetGroupInformation</MapField>
					<MapFieldTo>AssetGroupInformation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetId</MapField>
					<MapFieldTo>AssetId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>LedgerTransactionVoucher_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountingDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBook_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetBook</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetBook</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetBook_AssetGroupTrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AssetBookIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<SourceEDT>AssetBookId</SourceEDT>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BookIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetGroupInformation_IN_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetGroupInformation_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetGroupInformation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetGroupTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetGroupInformation</Name>
					<Field>AssetGroupInformation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetGroupTrans_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetGroupTrans_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RevaluedTransID</Name>
					<Field>RevaluedTransID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReserveTransId</Name>
					<Field>ReserveTransId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetLedger_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetLedger</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetLedger_AssetGroupTrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>AssetPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetGroupTrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Approver</Name>
					<Field>Approver</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>