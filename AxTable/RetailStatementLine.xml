<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStatementLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailStatementLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDifferenceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the difference amounts of the statement line.
    /// </summary>
    void calcDifferenceAmount()
    {
        this.DifferenceAmount       = this.CountedAmount      + this.BankedAmount      + this.SafeAmount      - this.TransAmount        - this.OrderInvoiceAmount;
        this.DifferenceAmountMST    = this.CountedAmountMST   + this.BankedAmountMST   + this.SafeAmountMST   - this.TransAmountMST     - this.OrderInvoiceAmountMST;
        this.DifferenceAmountStore  = this.CountedAmountStore + this.BankedAmountStore + this.SafeAmountStore - this.TransAmountStore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cardTypeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of card type of the current record in the <c>RetailStoreTenderTypeCardTable</c> table
    /// </summary>
    /// <returns>
    /// The name of the card type; otherwise, an empty string.
    /// </returns>
    display RetailCardTypeName cardTypeName()
    {
        return RetailStoreTenderTypeCardTable::find(RetailStoreTable::find(this.StoreId).RecId,this.TenderTypeId,this.CardTypeId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromStatementTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the statement and store fields by using values of the <c>RetailStatementTable</c> table.
    /// </summary>
    /// <param name="_statementTable">
    /// The <c>RetailStatementTable</c> table.
    /// </param>
    public void initFromStatementTable(RetailStatementTable _statementTable)
    {
        this.StatementId = _statementTable.StatementId;
        this.StoreId = _statementTable.StoreId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes the storeID value and sets the statement code.
    /// </summary>
    public void initValue()
    {
        this.StoreId = RetailStatementTable::find(this.StatementId).StoreId;
        this.setStatementCode();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the difference amount and inserts the dimensions into the current record.
    /// </summary>
    /// <remarks>
    /// The <c>insert</c> method uses <c>calcDifferenceAmount</c> method to calculate the difference amount.
    /// </remarks>
    public void insert()
    {
        this.calcDifferenceAmount();

        this.InsertDimensions();

        this.lineNum = RetailStatementLine::lastLineNum(this.statementId) + 1.0;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the default dimension value into the record.
    /// </summary>
    void insertDimensions()
    {
    ////LIS.SO.17.08.06
    //Dimensions aretaken from employee table, Terminaltable , StoreTendertypeTable or RetailStatementTable.
        RetailStatementTable   rboStatementTable;
        ;
        rboStatementTable = RetailStatementTable::find(this.StatementId);

        if (rboStatementTable.StatementMethod == RetailStaffTerminalTotal::Staff)
            this.DefaultDimension = rboStatementTable.DefaultDimension;
        else if (rboStatementTable.StatementMethod == RetailStaffTerminalTotal::Terminal)
            this.DefaultDimension = RetailTerminalTable::find(this.TerminalId).DefaultDimension;
        else if (rboStatementTable.StatementMethod == RetailStaffTerminalTotal::Total)
            this.DefaultDimension = RetailStoreTenderTypeTable::find(RetailStoreTable::find(this.StoreId).RecId,this.TenderTypeId).DefaultDimension;

        if (!this.DefaultDimension)
            this.DefaultDimension = rboStatementTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the user input on whether they would want the rename the record , if renamed it could cause problems with rename data exchange.
    /// </summary>
    /// <remarks>
    /// If the users selects no to the box then the record is not renamed;otherwise the record is renamed.
    /// </remarks>
    public void renamePrimaryKey()
    {
        if (Box::yesNo("@RET4036",DialogButton::No,"@RET4037","@RET4038") == DialogButton::No)
        {
            info("@RET4039");
            return;
        }
        else
            super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatementCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the statement code for the selected statement line.
    /// </summary>
    void setStatementCode()
    {
        switch (RetailStatementTable::find(this.StatementId).StatementMethod)
        {
            case RetailStaffTerminalTotal::Staff :
                this.StatementCode = this.StaffId;
                break;
            case RetailStaffTerminalTotal::Terminal :
                this.StatementCode = this.TerminalId;
                break;
            case RetailStaffTerminalTotal::Shift :
                this.StatementCode = this.uniqueShiftId;
                break;
            case RetailStaffTerminalTotal::Total :
                this.StatementCode = "";
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tenderTypeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tender type name of the record.
    /// </summary>
    /// <returns>
    /// The name of tender type card; otherwise empty string.
    /// </returns>
    display RetailTenderTypeName tenderTypeName()
    {
        RetailStoreTenderTypeTable tenderTypeTable;
        RetailStoreTenderTypeCardTable tenderTypeCardTable;
        RetailTenderTypeCardTable tenderCardTable;

        str ret;

        if (this.CardTypeId)
        {
            tenderTypeCardTable = RetailStoreTenderTypeCardTable::find(RetailStoreTable::find(this.StoreId).RecId, this.TenderTypeId, this.CardTypeId);
            if (tenderTypeCardTable)
            {
                if (tenderTypeCardTable.Name)
                {
                    ret = tenderTypeCardTable.Name;
                }
                else
                {
                    tenderCardTable = RetailTenderTypeCardTable::find(tenderTypeCardTable.cardTypeId);
                    if (tenderCardTable)
                    {
                        ret = tenderCardTable.name;
                    }
                    else
                    {
                        ret = "@RET4040";
                    }
                }
            }
            else
            {
                ret = "@RET4040";
            }
        }
        else
        {
            tenderTypeTable = RetailStoreTenderTypeTable::find(RetailStoreTable::find(this.StoreId).RecId,this.TenderTypeId);
            if (tenderTypeTable)
            {
                ret = tenderTypeTable.Name;
            }
            else
            {
                ret = "@RET4041";
            }
        }

        if (this.Currency)
        {
            ret += " " + this.Currency;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the difference amount and updates the current record in the <c>RetailStatementLine</c> table.
    /// </summary>
    public void update()
    {
        this.calcDifferenceAmount();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>bankedAmount</c> field value of the record.
    /// </summary>
    void validateBankedAmount()
    {
        if (this.BankedAmount != 0)
        {
            this.BankedAmountStore = CurrencyExchange::round(this.BankedAmount * this.StoreExchRate / 100, this.currency);
            this.BankedAmountMST = CurrencyExchange::round(this.BankedAmount * this.RealExchRate / 100, this.currency);
        }
        else
        {
            this.BankedAmountMST = 0;
            this.BankedAmountStore = 0;
        }

        this.calcDifferenceAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCountedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the counted amount value and updates the related field values.
    /// </summary>
    void validateCountedAmount()
    {
        RetailCashDeclaration  cashDeclaration,cashDeclaration2;
        real total;

        select sum(TotalAmount) from cashDeclaration
        where   cashDeclaration.StatementId == this.StatementId
        &&      cashDeclaration.LineNum == this.LineNum
        &&      cashDeclaration.TotalLine == false;

        total = cashDeclaration.TotalAmount;

        if (this.CountedAmount != 0)
        {
            if (this.CountedAmount != total)
            {
                delete_from cashDeclaration2
                where cashDeclaration2.StatementId == this.StatementId
                &&    cashDeclaration2.LineNum == this.LineNum;

                this.CountedAmountStore = CurrencyExchange::round(this.CountedAmount * this.StoreExchRate / 100, this.currency);
                this.CountedAmountMST   = CurrencyExchange::round(this.CountedAmount * this.RealExchRate / 100, this.currency);
            }
        }
        else
        {
            delete_from cashDeclaration2
            where cashDeclaration2.StatementId == this.StatementId
            &&    cashDeclaration2.LineNum == this.LineNum;

            this.CountedAmountMST = 0;
            this.CountedAmountStore = 0;
        }

        this.calcDifferenceAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (fieldExt2Id(_fieldIdToCheck))
        {
            case fieldNum(RetailStatementLine, CountedAmount):
                this.validateCountedAmount();
                break;
            case fieldNum(RetailStatementLine, StaffId):
                this.validateStaffId();
                break;
            case fieldNum(RetailStatementLine, TerminalId):
                this.validateTerminalId();
                break;
            case fieldNum(RetailStatementLine, BankedAmount):
                this.validateBankedAmount();
                break;
            case fieldNum(RetailStatementLine, SafeAmount):
                this.validateSafeAmount();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSafeAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>safeAmount</c> field value of the record.
    /// </summary>
    void validateSafeAmount()
    {
    ;
        if (this.SafeAmount != 0)
        {
            this.SafeAmountStore = CurrencyExchange::round(this.SafeAmount * this.StoreExchRate / 100, this.currency);
            this.SafeAmountMST   = CurrencyExchange::round(this.SafeAmount * this.RealExchRate / 100, this.currency);
        }
        else
        {
            this.SafeAmountMST = 0;
            this.SafeAmountStore = 0;
        }

        this.calcDifferenceAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStaffId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the statement code value to staffID value for the selected statement line.
    /// </summary>
    void validateStaffId()
    {
        this.setStatementCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTerminalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the statement code with the terminalID value for the selected statement line.
    /// </summary>
    void validateTerminalId()
    {
        this.setStatementCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>RetailStatementLine</c> table exists.
    /// </summary>
    /// <param name="_statementId">
    /// The statement ID of the statement line to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    static boolean exist(RetailStatementId _statementId)
    {
        return _statementId && (select retailStatementLine
                                index hint statementLineIdx
                                where retailStatementLine.StatementId == _statementId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parse <c>RetailUniqueShiftId</c> object and return <c>RetailPosBatchID</c> object.
    /// </summary>
    /// <param name="uniqueShiftId">
    /// Retail unique shift id.
    /// </param>
    /// <returns>
    /// Retail POS batch id.
    /// </returns>
    public static RetailPosBatchID getBatchId(RetailUniqueShiftId uniqueShiftId)
    {
        return any2int64(conPeek(str2con(uniqueShiftId, ":"), 2));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchTerminalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parse <c>RetailUniqueShiftId</c> and return <c>RetailTerminalId</c>.
    /// </summary>
    /// <param name="uniqueShiftId">
    /// Retail unique shift id.
    /// </param>
    /// <returns>
    /// Retail terminal id.
    /// </returns>
    public static RetailTerminalId getBatchTerminalId(RetailUniqueShiftId uniqueShiftId)
    {
        str     s = "";
        int     pos;
        int     len = strLen(uniqueShiftId);

        pos = strFind(uniqueShiftId, ":", len, -len);
        if (pos > 1 && pos < len)
        {
            s = subStr(uniqueShiftId, 0, pos - 1);
        }

        return s;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBankedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the banked amount values for staff and terminal.
    /// </summary>
    /// <param name="_statementLine">
    /// A <c>RetailStatementLine</c> record.
    /// </param>
    static void initBankedAmount(RetailStatementLine _statementLine)
    {
        RetailTransactionBankedTenderTrans transactionBankedTenderTrans;
        AmountCur                       totalBankedAmount; //totalBankedAmountCur;
        AmountCur                       totalBankedAmountStore; //totalBankedAmountTendered;
        AmountCur                       totalBankedAmountMST;

        switch (RetailStatementTable::find(_statementLine.StatementId).StatementMethod)
        {
            case RetailStaffTerminalTotal::Staff       :

                select sum(AmountCur),sum(AmountTendered),sum(AmountMST),count(RecId) from transactionBankedTenderTrans
                    where transactionBankedTenderTrans.TenderType   == _statementLine.TenderTypeId
                        && transactionBankedTenderTrans.Currency    == _statementLine.Currency
                        && transactionBankedTenderTrans.StatementId == _statementLine.StatementId
                        && transactionBankedTenderTrans.Staff       == _statementLine.StaffId
                        && transactionBankedTenderTrans.Store       == _statementLine.storeId;
                break;

            case RetailStaffTerminalTotal::Terminal    :

                select sum(AmountCur),sum(AmountTendered),sum(AmountMST),count(RecId) from transactionBankedTenderTrans
                    where transactionBankedTenderTrans.TenderType   == _statementLine.TenderTypeId
                        && transactionBankedTenderTrans.Currency    == _statementLine.Currency
                        && transactionBankedTenderTrans.StatementId == _statementLine.StatementId
                        && transactionBankedTenderTrans.Terminal    == _statementLine.TerminalId
                        && transactionBankedTenderTrans.Store       == _statementLine.storeId;

                break;

            case RetailStaffTerminalTotal::Shift:

                select sum(AmountCur),sum(AmountTendered),sum(AmountMST),count(RecId) from transactionBankedTenderTrans
                    where transactionBankedTenderTrans.TenderType       == _statementLine.TenderTypeId
                        && transactionBankedTenderTrans.Currency        == _statementLine.Currency
                        && transactionBankedTenderTrans.StatementId     == _statementLine.StatementId
                        && transactionBankedTenderTrans.StatementCode   == _statementLine.statementCode
                        && transactionBankedTenderTrans.Store           == _statementLine.storeId;

                break;

            case RetailStaffTerminalTotal::Total       :

                select sum(AmountCur),sum(AmountTendered),sum(AmountMST),count(RecId) from transactionBankedTenderTrans
                    where transactionBankedTenderTrans.TenderType   == _statementLine.TenderTypeId
                        && transactionBankedTenderTrans.Currency    == _statementLine.Currency
                        && transactionBankedTenderTrans.StatementId == _statementLine.StatementId
                        && transactionBankedTenderTrans.Store       == _statementLine.storeId;

                break;

            default                                     :   throw error(Error::wrongUseOfFunction(funcName()));
        }

        totalBankedAmount       = transactionBankedTenderTrans.AmountCur;
        totalBankedAmountStore  = transactionBankedTenderTrans.AmountTendered;
        totalBankedAmountMST    = transactionBankedTenderTrans.AmountMST;

        _statementLine.BankedAmount      = totalBankedAmount;
        _statementLine.BankedAmountStore = totalBankedAmountStore;
        _statementLine.BankedAmountMST   = totalBankedAmountMST;

        _statementLine.calcDifferenceAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSafeAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes the safe amounts of statement methods with the field values of <c>RetailTransactionSafeTenderTrans</c> table.
    /// </summary>
    /// <param name="_statementLine">
    /// The curent instance of <c>RetailStatementLine</c> table.
    /// </param>
    /// <exception cref="Exception::Error">
    /// throws an error if none of the statement methods matches.
    /// </exception>

    static void initSafeAmount(RetailStatementLine _statementLine)
    {
        RetailTransactionSafeTenderTrans   transactionSafeTenderTrans;
        AmountCur                       totalSafeAmount;
        AmountCur                       totalSafeAmountStore;
        AmountCur                       totalSafeAmountMST;

    ;
        switch (RetailStatementTable::find(_statementLine.StatementId).StatementMethod)
        {
            case RetailStaffTerminalTotal::Staff       :

            select sum(AmountCur),sum(AmountTendered),sum(AmountMST),count(RecId) from transactionSafeTenderTrans
                where transactionSafeTenderTrans.TenderType   == _statementLine.TenderTypeId
                    && transactionSafeTenderTrans.Currency    == _statementLine.Currency
                    && transactionSafeTenderTrans.StatementId == _statementLine.StatementId
                    && transactionSafeTenderTrans.Staff       == _statementLine.StaffId
                    && transactionSafeTenderTrans.Store       == _statementLine.storeId;

            break;

            case RetailStaffTerminalTotal::Terminal    :

            select sum(AmountCur),sum(AmountTendered),sum(AmountMST),count(RecId) from transactionSafeTenderTrans
                where transactionSafeTenderTrans.TenderType   == _statementLine.TenderTypeId
                    && transactionSafeTenderTrans.Currency    == _statementLine.Currency
                    && transactionSafeTenderTrans.StatementId == _statementLine.StatementId
                    && transactionSafeTenderTrans.Terminal    == _statementLine.TerminalId
                    && transactionSafeTenderTrans.Store       == _statementLine.storeId;

            break;

            case RetailStaffTerminalTotal::Shift:
                select sum(AmountCur),sum(AmountTendered),sum(AmountMST),count(RecId) from transactionSafeTenderTrans
                    where transactionSafeTenderTrans.TenderType     == _statementLine.TenderTypeId
                        && transactionSafeTenderTrans.Currency      == _statementLine.Currency
                        && transactionSafeTenderTrans.StatementId   == _statementLine.StatementId
                        && transactionSafeTenderTrans.StatementCode == _statementLine.statementCode
                        && transactionSafeTenderTrans.Store         == _statementLine.storeId;
                break;

            case RetailStaffTerminalTotal::Total       :

            select sum(AmountCur),sum(AmountTendered),sum(AmountMST),count(RecId) from transactionSafeTenderTrans
                where transactionSafeTenderTrans.TenderType   == _statementLine.TenderTypeId
                    && transactionSafeTenderTrans.Currency    == _statementLine.Currency
                    && transactionSafeTenderTrans.StatementId == _statementLine.StatementId
                    && transactionSafeTenderTrans.Store       == _statementLine.storeId;

            break;

            default                                 :   throw error(Error::wrongUseOfFunction(funcName()));
        }

        totalSafeAmount       = transactionSafeTenderTrans.AmountCur;
        totalSafeAmountStore  = transactionSafeTenderTrans.AmountTendered;
        totalSafeAmountMST    = transactionSafeTenderTrans.AmountMST;

        _statementLine.SafeAmount      = totalSafeAmount;
        _statementLine.SafeAmountStore = totalSafeAmountStore;
        _statementLine.SafeAmountMST   = totalSafeAmountMST;

        _statementLine.calcDifferenceAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last record in the <c>RetailStatementLine</c> table.
    /// </summary>
    /// <param name="_statementId">
    /// The statement ID value of the selected statement line.
    /// </param>
    /// <returns>
    /// The line number value of the last record.
    /// </returns>
    static LineNum  lastLineNum(RetailStatementId _statementId)
    {
        return (select maxof(LineNum) from retailStatementLine
                    index hint statementLineIdx
                    where retailStatementLine.StatementId == _statementId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeUniqueShiftId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate <c>RetailUniqueShiftId</c> based on retail terminal id and retail batch id.
    /// </summary>
    /// <param name="batchTerminalId">
    /// Retail batch terminal id.
    /// </param>
    /// <param name="batchId">
    /// Retail batch id.
    /// </param>
    /// <returns>
    /// Retail unique shift id.
    /// </returns>
    public static RetailUniqueShiftId makeUniqueShiftId(RetailTerminalId batchTerminalId, RetailPosBatchID batchId )
    {
        return con2Str([batchTerminalId, batchId], ":");
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDifferenceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of all the <c>differenceAmountStore</c> values of the <c>RetailStatementLine</c>
    /// table with specified statement ID value.
    /// </summary>
    /// <param name="_statementId">
    /// The statement ID value of the statement lines to be filtered.
    /// </param>
    /// <returns>
    /// The total difference amount value.
    /// </returns>
    public static Amount totalDifferenceAmount(RetailStatementId _statementId)
    {
        RetailStatementLine statementLine;

        if (_statementId)
        {
            select sum(DifferenceAmountStore) from statementLine
            where   statementLine.StatementId == _statementId;
        }

        return statementLine.DifferenceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDifferenceAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of all the <c>differenceAmountMST</c> field values of the
    /// <c>RetailStatementLine</c> table with specified statement ID value.
    /// </summary>
    /// <param name="_statementId">
    /// The statement ID value of the statement lines to be filtered.
    /// </param>
    /// <returns>
    /// The total difference amount MST value; otherwise <c>0</c>.
    /// </returns>
    public static RetailDifferenceAmountMST totalDifferenceAmountMST(RetailStatementId _statementId)
    {
        RetailStatementLine statementLine;

        if (_statementId)
        {
            select sum(DifferenceAmountMST) from statementLine
            where   statementLine.StatementId == _statementId;
        }

        return statementLine.DifferenceAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDifferenceAmountStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of all the <c>differenceAmountMST</c> field values of the
    /// <c>RetailStatementLine</c> table with specified statement ID value.
    /// </summary>
    /// <param name="_statementId">
    /// The statement ID value of the statement lines to be filtered.
    /// </param>
    /// <returns>
    /// The total difference amount store value; otherwise <c>0</c>.
    /// </returns>
    public static RetailDifferenceAmountStore totalDifferenceAmountStore(RetailStatementId _statementId)
    {
        RetailStatementLine statementLine;

        if (_statementId)
        {
            select sum(DifferenceAmountStore) from statementLine
            where   statementLine.StatementId == _statementId;
        }

        return statementLine.DifferenceAmountStore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Statement line changes should not be saved once statement status is payments posted. 
    /// </summary>
    /// <returns> Returns false if the validations fails; otherwise, true</returns>
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
        
        if ((RetailstatementTable::find(this.StatementId)).PostingStatus >= RetailEodTransactionPostingStatus::PaymentsPosted)
        {
            return checkFailed("@Retail:StatementCountedAmountCannotBeChangedOncePaymentsPosted");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET6118</DeveloperDocumentation>
	<Label>@RET3192</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>statementId</TitleField1>
	<TitleField2>lineNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>statementLineIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>TransactionsAndOrders</Modules>
	<PrimaryIndex>statementLineIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RetailCashDeclaration</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCashDeclaration</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>statementId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>lineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>statementCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Label>@SYS22123</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>realExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>cardFeeAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankedAmount</Name>
			<Label>@RET4419</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>bankedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>bankedAmountStore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>bankedAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Change</Name>
			<Label>@RET3194</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>changeTender</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CountedAmount</Name>
			<Label>@RET3195</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>countedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>countedAmountStore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>countedAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@RET3072</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>storeExchRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DifferenceAmount</Name>
			<Label>@RET3196</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>differenceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>differenceAmountStore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>differenceAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS5951</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DisbursementSlipAmount_RU</Name>
			<Label>@SYS4007530</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashLaterReturnedAmountCur_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DrawerAmounts</Name>
			<Label>@RET3197</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>addedToDrawer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>removedFromDrawer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GeneratedFrom</Name>
			<Label>@RET3198</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>storeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>terminalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>staffId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>uniqueShiftId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@RET3040</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>statementId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NotUsed</Name>
			<Label>@RET4833</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>lineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>statementCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>postedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>tenderDeclaration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>countingRequired</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>replicationCounter</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OrderInvoiceAmount</Name>
			<Label>@RET4834</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>orderInvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>orderInvoiceAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SafeAmount</Name>
			<Label>@RET4835</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>safeAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>safeAmountStore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>safeAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPerson</Name>
			<Label>@RET3199</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tender</Name>
			<Label>@RET3200</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>tenderTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>tenderTypeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>cardTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>cardTypeName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransAmount</Name>
			<Label>@RET3191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>transAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transAmountStore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>addedToDrawer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAddedToDrawerAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>bankedAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBankedAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>bankedAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBankedAmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>bankedAmountStore</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBankedAmountStore</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>cardFeeAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCardFeeAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>cardTypeId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCardTypeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashLaterReturnedAmountCur_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYS4007531</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashLaterReturnedAmountMST_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashLaterReturnedAmountStore_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>changeTender</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailChangeTenderAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>countedAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCountedAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>countedAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCountedAmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>countedAmountStore</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCountedAmountStore</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>countingRequired</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCountingRequired</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>currency</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>differenceAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDifferenceAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>differenceAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDifferenceAmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>differenceAmountStore</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDifferenceAmountStore</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>lineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>orderInvoiceAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailOrderInvoiceAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>orderInvoiceAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailOrderInvoiceAmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>postedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@RET3193</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>realExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>removedFromDrawer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailRemovedFromDrawerAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>replicationCounter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailReplicationCounter</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>safeAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailSafeAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>safeAmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailSafeAmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>safeAmountStore</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailSafeAmountStore</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>staffId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailStaffId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>statementCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStatementCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>statementId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStatementId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>storeExchRate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>storeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>tenderDeclaration</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTenderDeclaration</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>tenderTypeId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTenderTypeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>terminalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTerminalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>transAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTransAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>transAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTransAmountInMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>transAmountStore</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTransAmountStore</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>uniqueShiftId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailUniqueShiftId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>statementLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>statementId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>lineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>lookupStatCalcIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>replicationCounter</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PaymentMethodIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>statementId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>currency</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>tenderTypeId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>cardTypeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>currency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DimensionAttributeValueSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailCashDeclaration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailCashDeclaration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>lineNum</Name>
					<Field>lineNum</Field>
					<RelatedField>lineNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>statementId</Name>
					<Field>statementId</Field>
					<RelatedField>statementId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStatementTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStatementTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>statementId</Name>
					<SourceEDT>RetailStatementId</SourceEDT>
					<Field>statementId</Field>
					<RelatedField>statementId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>statementIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStoreTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>storeId</Name>
					<SourceEDT>RetailStoreId</SourceEDT>
					<Field>storeId</Field>
					<RelatedField>StoreNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StoreNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailTenderTypeCardTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailTenderTypeCardTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>cardTypeId</Name>
					<SourceEDT>RetailCardTypeId</SourceEDT>
					<Field>cardTypeId</Field>
					<RelatedField>cardTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailTenderTypeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailTenderTypeTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>tenderTypeId</Name>
					<SourceEDT>RetailTenderTypeId</SourceEDT>
					<Field>tenderTypeId</Field>
					<RelatedField>tenderTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailTerminalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailTerminalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>terminalId</Name>
					<SourceEDT>RetailTerminalId</SourceEDT>
					<Field>terminalId</Field>
					<RelatedField>terminalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>