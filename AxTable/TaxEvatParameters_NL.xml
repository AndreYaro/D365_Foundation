<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxEvatParameters_NL</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxEvatParameters_NL extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        throw error("@SYS23721");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        const int defaultServiceTimeOut = 30;
        this.ServiceTimeOut = defaultServiceTimeOut;

        this.setContactInfoBasedOnContactType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        if (_fieldId == fieldNum(TaxEvatParameters_NL, ContactPersonType)
            || _fieldId == fieldNum(TaxEvatParameters_NL, ContactPersonTypeICL))
        {
            this.setContactInfoBasedOnContactType();
        }

        if (_fieldId == fieldNum(TaxEvatParameters_NL, PartOfFiscalGroup))
        {
            if (this.PartOfFiscalGroup)
            {
                if (!this.FiscalGroup)
                {
                    info("@SYS107067");
                    this.PartOfFiscalGroup = NoYes::No;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContactInfoBasedOnContactType</Name>
				<Source><![CDATA[
    private void setContactInfoBasedOnContactType()
    {
        if (this.ContactPersonType == this.ContactPersonTypeICL)
        {
            switch (this.ContactPersonType)
            {
                case ContactPersonType::BPL:
                    CompanyInfo companyInfo = CompanyInfo::find();
                    this.ContactId = companyInfo.CoRegNum;
                    this.ContactName = companyInfo.name();
                    break;
                case ContactPersonType::NT:
                    this.ContactId = CompanyInfo::find().getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID);
                    this.ContactName = '';
                    break;
                default:
                    break;
            }
        }
        else
        {
            this.ContactId = '';
            this.ContactName = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();
        flush TaxEvatParameters_NL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (_fieldIdToCheck == fieldNum(TaxEvatParameters_NL, ContactId))
        {
            if (this.ContactPersonType == ContactPersonType::BPL && this.ContactPersonTypeICL == ContactPersonType::BPL)
            {
                ret = TaxEvatParameters_NL::checkVat(this.ContactId);
            }
            if (this.ContactPersonType == ContactPersonType::NT && this.ContactPersonTypeICL == ContactPersonType::NT)
            {
                ret = TaxEvatParameters_NL::checkBecon(this.ContactId);
            }
            if ((this.ContactPersonType == ContactPersonType::BPL && this.ContactPersonTypeICL == ContactPersonType::NT)
                || (this.ContactPersonType == ContactPersonType::NT && this.ContactPersonTypeICL == ContactPersonType::BPL))
            {
                if (strLen(this.ContactId) == 6)
                {
                    ret = TaxEvatParameters_NL::checkBecon(this.ContactId);
                }
                else
                    if (strLen(this.ContactId) == 12)
                {
                    ret = TaxEvatParameters_NL::checkVat(this.ContactId);
                }
                else
                {
                    ret = false;
                    error ("@SYS96791");
                    error(strFmt("@SYS96797", '6'));
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        LogisticsPostalAddress postalAddress;

        ret = super();
        if (this.RecId)
        {
            ret = ret & this.validateField(fieldNum(TaxEvatParameters_NL, ContactId));

            if (this.ContactPersonType == ContactPersonType::BPL
                || this.ContactPersonType == ContactPersonType::NT
                || this.ContactPersonTypeICL == ContactPersonType::BPL
                || this.ContactPersonTypeICL == ContactPersonType::NT)
            {
                if (this.ContactName == '')
                {
                    ret = checkFailed(strFmt("@SYS26332","@SYS7399"));
                }
                if (this.ContactPhone == '')
                {
                    ret = checkFailed(strFmt("@SYS26332","@SYS7869"));
                }
                if (this.ContactPrefix == '')
                {
                    ret = checkFailed(strFmt("@SYS26332","@GeneralLedger:ContactPrefix"));
                }
                if (this.ContactInitials == '')
                {
                    ret = checkFailed(strFmt("@SYS26332","@GeneralLedger:ContactInitials"));
                }
            }
            if (this.ContactPersonType == ContactPersonType::NT
                || this.ContactPersonTypeICL == ContactPersonType::BPL
                || this.ContactPersonTypeICL == ContactPersonType::NT)
            {
                if (this.ContactId == '')
                {
                    ret = checkFailed(strFmt("@SYS26332","@SYS14142"));
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBecon</Name>
				<Source><![CDATA[
    public static boolean checkBecon(str _beconNr)
    {
        boolean ret = true;
        int x1, x2, x3, x4, x5, x6;
        int summod;

        ret = (strLen(_beconNr) == 6);
        if (!ret)
        {
            error(strFmt("@SYS96797", '6'));
        }
        else
        {
            //Digits 1 to 5 are sequence numbers
            x1 = str2int(subStr(_beconNr, 1, 1)) * 6;
            x2 = str2int(subStr(_beconNr, 2, 1)) * 5;
            x3 = str2int(subStr(_beconNr, 3, 1)) * 4;
            x4 = str2int(subStr(_beconNr, 4, 1)) * 3;
            x5 = str2int(subStr(_beconNr, 5, 1)) * 2;

            //Digit 6 is the controle digit
            x6 = str2int(subStr(_beconNr, 6, 1));

            //sum and mod the digits
            summod = ((x1 + x2 + x3 + x4 + x5) mod 11);
            if (summod == 10)
            {
                ret = (x6 == 0);
            }
            else
            {
                ret = (summod == x6);
            }

            if (!ret)
            {
                error(strFmt("@SYS54163", _beconNr));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCurrency</Name>
				<Source><![CDATA[
    public static boolean checkCurrency(CurrencyCode _currencyCode)
    {
        boolean ret = _currencyCode != '';

        if (ret && _currencyCode != ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::EUR))
        {
            ret = checkFailed("@SYS96799");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVat</Name>
				<Source><![CDATA[
    public static boolean checkVat(VATNum _vatNum)
    {
        const str numbers = '1234567890';
        const str letterB = 'B';
        const str zero = '0';
        const str doubleZero = '00';

        boolean ret = true;
        str     vatNum = strKeep(_vatNum, numbers + letterB);
        str     firstNine;
        int     x1, x2, x3, x4, x5, x6, x7, x8, x9;
        int     summod;

        VATNum vatNumLocal;

        //Stripping VatNum based on TaxCountryRegionParamters sales tax code.
        vatNumLocal = TaxVATNumTable::stripVATNumSimple(_vatNum);

        if (strLen(vatNumLocal) != 12)
        {
            ret = checkFailed("@SYS96791");
        }

        if (strScan(vatNum,'.',1 , 12) > 0 || strScan(vatNum, ' ', 1, 12) > 0)
        {
            ret = checkFailed("@SYS96800");
        }

        firstNine = subStr(vatNum, 1, 9);
        if (strRem(firstNine, numbers) != '')
        {
            ret = checkFailed("@SYS75090");
        }
        else
        {
            if (subStr(vatNumLocal, 10, 1) != letterB)
            {
                ret = checkFailed(strFmt("@SYS96803", letterB));
            }

            if (strLen(strKeep(subStr(vatNum,strLen(vatNum)-1 , 2), numbers)) != 2)
            {
                ret = checkFailed("@SYS96804");
            }

            if (subStr(vatNum, strLen(vatNum) - 1 , 2) == doubleZero)
            {
                ret = checkFailed(strFmt("@SYS96805", doubleZero));
            }

            /* The Sofi-nummer modulus-11 check */
            x1 = str2int(subStr(firstNine,1,1)) * 9;
            x2 = str2int(subStr(firstNine,2,1)) * 8;
            x3 = str2int(subStr(firstNine,3,1)) * 7;
            x4 = str2int(subStr(firstNine,4,1)) * 6;
            x5 = str2int(subStr(firstNine,5,1)) * 5;
            x6 = str2int(subStr(firstNine,6,1)) * 4;
            x7 = str2int(subStr(firstNine,7,1)) * 3;
            x8 = str2int(subStr(firstNine,8,1)) * 2;

            //Check digit
            x9 = str2int(subStr(firstNine, 9, 1));
            summod = (x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8) mod 11;
            if (summod != x9 || summod == 10)
            {
                ret = checkFailed(strFmt("@SYS54163", vatNum));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateServiceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that parameters for working with web services are filled in.
    /// </summary>
    /// <returns><c>true</c> if parameters are correct, otherwise <c>false</c>.</returns>
    public static boolean validateServiceParameters()
    {
        boolean ret = true;

        setPrefix("@SYS96714");

        var parameters = TaxEvatParameters_NL::find();

        if (SystemParameters::find().UseAdvCertificateStore)
        {
            if (!parameters.KeyVaultCertificateAuth)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldPName(TaxEvatParameters_NL, KeyVaultCertificateAuth)));
            }

            if (!parameters.KeyVaultCertificateCA)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldPName(TaxEvatParameters_NL, KeyVaultCertificateCA)));
            }
        }
        else
        {
            if (!parameters.CertificateAuth)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldPName(TaxEvatParameters_NL, CertificateAuth)));
            }

            if (!parameters.CertificateCA)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldPName(TaxEvatParameters_NL, CertificateCA)));
            }
        }

        if (!parameters.AuthorizationAddress)
        {
            ret = checkFailed(strFmt("@SYS26332", fieldPName(TaxEvatParameters_NL, AuthorizationAddress)));
        }

        if (!parameters.SubmitServiceURL)
        {
            ret = checkFailed(strFmt("@SYS26332", fieldPName(TaxEvatParameters_NL, SubmitServiceURL)));
        }

        if (!parameters.StatusServiceURL)
        {
            ret = checkFailed(strFmt("@SYS26332", fieldPName(TaxEvatParameters_NL, StatusServiceURL)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TaxEvatParameters_NL find(boolean _forUpdate = false)
    {
        TaxEvatParameters_NL parameter;

        parameter.selectForUpdate(_forUpdate);

        select firstonly parameter
            index KeyIdx
            where parameter.Key == 0;

        if (!parameter && !parameter.isTmp())
        {
            Company::createParameter(parameter);
        }

        return parameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefTaxErrorId</Name>
				<Source><![CDATA[
    public static NumberSequenceReference numRefTaxErrorId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(TaxErrorId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefTaxIntraCommId</Name>
				<Source><![CDATA[
    public static NumberSequenceReference numRefTaxIntraCommId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(TaxIntraCommId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefTaxTurnOverId</Name>
				<Source><![CDATA[
    public static NumberSequenceReference numRefTaxTurnOverId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(TaxTurnOverID));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<DeveloperDocumentation>@SYS123490</DeveloperDocumentation>
	<FormRef>TaxEvatParameters_NL</FormRef>
	<Label>@SYS96714</Label>
	<TableGroup>Parameter</TableGroup>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>KeyIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPersonType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonTypeICL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPhone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceTimeOut</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CACertificate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuthCertificate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPrefix</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactInitials</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubmitServiceURL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Key</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceTimeOut</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubmitServiceURL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusServiceURL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuthorizationAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Certificate</Name>
			<Label>@SYS32377</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>KeyVaultCertificateCA</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyVaultCertificateAuth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateCA</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateAuth</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ContactInformation</Name>
			<Label>@SYS36902</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPersonType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonTypeICL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactInitials</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPrefix</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPhone</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalGroup</Name>
			<Label>@SYS107058</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PartOfFiscalGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ElectronicReporting</Name>
			<Label>@ElectronicReporting:ElectronicReporting</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ERFormatMappingId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AuthCertificate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAuthCertificate</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ServiceTimeOut</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBapiTimeOut</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CACertificate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxCACertificate</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxContactId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ContactPersonType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS96938</Label>
			<EnumType>ContactPersonType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ContactPersonTypeICL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS96784</Label>
			<EnumType>ContactPersonType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPhone</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Phone</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATNum</ExtendedDataType>
			<Label>@SYS107058</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Key</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParametersKey</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PartOfFiscalGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS107060</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactInitials</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ContactInitials_NL</ExtendedDataType>
			<Label>@GeneralLedger:ContactInitials</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPrefix</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ContactPrefix_NL</ExtendedDataType>
			<Label>@GeneralLedger:ContactPrefix</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ERFormatMappingId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ERFormatMappingId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubmitServiceURL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>URL</ExtendedDataType>
			<Label>@GeneralLedger:DigipoortDeliveryUrl</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatusServiceURL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>URL</ExtendedDataType>
			<Label>@GeneralLedger:DigipoortStatusUrl</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AuthorizationAddress</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>URL</ExtendedDataType>
			<Label>@GeneralLedger:AuthorizationAddress</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>KeyVaultCertificateCA</Name>
			<ExtendedDataType>KeyVaultCertificateRef</ExtendedDataType>
			<Label>@CliServ_Certificates_NL:Digipoort_Public_KeyVault</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>KeyVaultCertificateAuth</Name>
			<ExtendedDataType>KeyVaultCertificateRef</ExtendedDataType>
			<Label>@CliServ_Certificates_NL:Digipoort_Private_KeyVault</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateAuth</Name>
			<ExtendedDataType>DigitalCertificateSubject</ExtendedDataType>
			<Label>@CliServ_Certificates_NL:Digipoort_Private_Local</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateCA</Name>
			<ExtendedDataType>DigitalCertificateSubject</ExtendedDataType>
			<Label>@CliServ_Certificates_NL:Digipoort_Public_Local</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>KeyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Key</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>FiscalGroup</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EntityRelationshipRole>@SYS123491</EntityRelationshipRole>
			<RelatedTable>TaxVATNumTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxVATNumTable_VATNum</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxEvatParameters_NL_FiscalGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalGroup</Name>
					<Field>FiscalGroup</Field>
					<RelatedField>VATNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ERFormatMappingTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ERFormatMappingTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ERFormatMappingId</Name>
					<Field>ERFormatMappingId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KeyVaultCertificateTableCA</Name>
			<RelatedTable>KeyVaultCertificateTable</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KeyVaultCertificateCA</Name>
					<Field>KeyVaultCertificateCA</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KeyVaultCertificateTableAuthRel</Name>
			<RelatedTable>KeyVaultCertificateTable</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KeyVaultCertificateAuth</Name>
					<Field>KeyVaultCertificateAuth</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>