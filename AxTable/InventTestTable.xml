<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTestTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTestTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canHaveOutcome</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the test can have an outcome.
    /// </summary>
    /// <returns>
    ///    true if test can have an outcome; otherwise false.
    /// </returns>
    public boolean canHaveOutcome()
    {
        return this.TestType == InventTestType::Option;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the test unit based on the test instrument and test type.
    /// </summary>
    void setUnit()
    {
        boolean testTypeCanHaveUnit = InventTestTable::testTypeCanHaveUnit(this.TestType);

        if (this.TestUnitId && !testTypeCanHaveUnit)
        {
            this.TestUnitId = '';
        }

        if (this.TestInstrumentId && testTypeCanHaveUnit)
        {
            this.TestUnitId = InventTestInstrument::find(this.TestInstrumentId).Unit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && !this.TestUnitId && InventTestTable::testTypeMustHaveUnit(this.TestType))
        {
            ret = checkFailed(strFmt("@SYS26332", fieldPName(InventTestTable, TestUnitId)));
        }

        if (ret && this.TestUnitId && !InventTestTable::testTypeCanHaveUnit(this.TestType))
        {
            ret = checkFailed(strFmt("@SCM:InventTestUnitMustBeBlankForTestType", this.TestType));
        }

        if (ret && this.TestUnitId && this.TestInstrumentId)
        {
            UnitOfMeasureSymbol instrumentUnitSymbol = InventTestInstrument::find(this.TestInstrumentId).Unit;

            if (instrumentUnitSymbol != this.TestUnitId)
            {
                ret = checkFailed(strFmt("@SCM:InventQualityTestUnitNotSameAsInstrumentUnit", this.TestUnitId, this.TestInstrumentId, instrumentUnitSymbol));
            }
        }

        if (ret)
        {
            switch (this.TestType)
            {
                case InventTestType::Integer:
                    UnitOfMeasure unitOfMeasure = UnitOfMeasure::find(UnitOfMeasure::unitOfMeasureIdBySymbol(this.TestUnitId));
                    if (!unitOfMeasure.RecId || unitOfMeasure.DecimalPrecision != 0)
                    {
                        ret = checkFailed("@SYS113730");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>InventTestTable</c> table exists.
    /// </summary>
    /// <param name="_inventTestId">
    ///    The test ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    static boolean exist(InventTestId _inventTestId)
    {
        return _inventTestId &&
            (select firstonly RecId from InventTestTable
                where InventTestTable.TestId == _inventTestId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>InventTestTable</c> table.
    /// </summary>
    /// <param name="_inventTestId">
    ///    The test ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>InventTestTable</c> table; otherwise, an empty record.
    /// </returns>
    static InventTestTable find(InventTestId _inventTestId, boolean _forUpdate = false)
    {
        InventTestTable inventTestTable;

        inventTestTable.selectForUpdate(_forUpdate);

        if (_inventTestId)
        {
            select firstonly inventTestTable
                where inventTestTable.TestId == _inventTestId;
        }

        return inventTestTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testTypeCanHaveUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The <c>testTypeCanHaveUnit</c> method is used to determine if a test unit ID can be specified for the specified type of test.
    /// </summary>
    /// <param name="_testType">
    ///    The type of test to use when determining if test unit ID is allowed.
    /// </param>
    /// <returns>
    ///    NoYes::Yes if test unit ID is allowed; otherwise, NoYes::No
    /// </returns>
    public static NoYes testTypeCanHaveUnit(InventTestType _testType)
    {
        switch (_testType)
        {
            case InventTestType::Option:
                return NoYes::No;
        }
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testTypeMustHaveUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// The <c>testTypeMustHaveUnit</c> method is used to determine if a test unit id is required for the specified type of test.
    /// </summary>
    /// <param name="_testType">
    /// The type of test to use when determining if test unit id is required.
    /// </param>
    /// <returns>
    /// NoYes::Yes if test unit id is required; otherwise, NoYes::No
    /// </returns>
    public static NoYes testTypeMustHaveUnit(InventTestType _testType)
    {
        switch (_testType)
        {
            case InventTestType::Option:
                return NoYes::No;
        }
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userCanChangeUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The <c>userCanChangeUnit</c> method is used to determine if a user can change the test unit ID for
    ///    the specified type of test and the specified test instrument.
    /// </summary>
    /// <param name="_testType">
    ///    The type of test to use when determining if test unit ID is allowed.
    /// </param>
    /// <param name="_inventTestInstrumentId">
    ///    The test instrument specified for the test.
    /// </param>
    /// <returns>
    ///    NoYes::Yes if test unit ID can be changed; otherwise, NoYes::No
    /// </returns>
    public static NoYes userCanChangeUnit(InventTestType _testType, InventTestInstrumentId _inventTestInstrumentId)
    {
        if (!InventTestTable::testTypeCanHaveUnit(_testType))
        {
            return NoYes::No;
        }

        if (_inventTestInstrumentId)
        {
            return NoYes::No;
        }

        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return
        [
            // [field that needs defaulting,
            //      [fields that affect the default value]]
            [fieldNum(InventTestTable, TestUnitId),
                [fieldNum(InventTestTable, TestInstrumentId), fieldNum(InventTestTable, TestType)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventTestTable, TestUnitId):
                this.setUnit();
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>InventQualityManagement</ConfigurationKey>
	<DeveloperDocumentation>@SYS124040</DeveloperDocumentation>
	<FormRef>InventTestTable</FormRef>
	<Label>@SYS67945</Label>
	<SingularLabel>@SYS67945</SingularLabel>
	<TableGroup>Main</TableGroup>
	<TitleField1>TestId</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>TestIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>TestIdIdx</PrimaryIndex>
	<ReplacementKey>TestIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventTestGroupMember</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventTestGroupMember</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestInstrumentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestInstrumentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS8811</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestInstrumentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TestInstrument</Name>
			<Label>@SYS113673</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestInstrumentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TestType</Name>
			<Label>@SYS113729</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TestUnitId</Name>
			<Label>@SYS96151</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTestId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestInstrumentId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTestInstrumentId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TestType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>InventTestType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestUnitId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TestIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TestId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTestInstrument</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTestInstrument</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestInstrumentId</Name>
					<Field>TestInstrumentId</Field>
					<RelatedField>TestInstrumentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TestInstrumentIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestUnitId</Name>
					<Field>TestUnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>