<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ForecastModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ForecastModel extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkOpen</Name>
				<Source><![CDATA[
    boolean checkOpen()
    {
        return this.Blocked
            ? checkFailed(strFmt("@SYS25923",this.ModelId,this.Blocked))
            : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ForecastModel   forecastModel;

        ttsbegin;

            if (this.Type == HeadingSub::Heading) //then delete specified sub models (deleteAction cannot be used because of the datamodel)
            {
                delete_from forecastModel
                    where forecastModel.ModelId == this.ModelId         &&
                          forecastModel.Type    == HeadingSub::SubModel   ;
            }

            super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.Type    = HeadingSub::Heading;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modelName</Name>
				<Source><![CDATA[
    display ForecastName modelName()
    {
        return ForecastModel::find(HeadingSub::Heading,this.ModelId).Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            // [field that needs defaulting,
            //  [fields that the default values depends on]]
            [fieldNum(ForecastModel, ProjHourReduction),
                [fieldNum(ForecastModel, ProjBudgetType)]],
            [fieldNum(ForecastModel, ProjCheckHourBudget),
                [fieldNum(ForecastModel, ProjBudgetType)]],
            [fieldNum(ForecastModel, ProjExpenseReduction),
                [fieldNum(ForecastModel, ProjBudgetType)]],
            [fieldNum(ForecastModel, ProjCheckExpenseBudget),
                [fieldNum(ForecastModel, ProjBudgetType)]],
            [fieldNum(ForecastModel, ProjItemReduction),
                [fieldNum(ForecastModel, ProjBudgetType)]],
            [fieldNum(ForecastModel, ProjCheckItemBudget),
                [fieldNum(ForecastModel, ProjBudgetType)]],
            [fieldNum(ForecastModel, Blocked),
                [fieldNum(ForecastModel, ProjBudgetType)]],
            [fieldNum(ForecastModel, SubModelId),
                [fieldNum(ForecastModel, Type),fieldNum(ForecastModel, ModelId)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ForecastModel, ProjHourReduction):
                if (this.ProjBudgetType != ProjBudgetType::None)
                {
                    this.ProjHourReduction = false;
                }
                break;

            case fieldNum(ForecastModel, ProjCheckHourBudget):
                if (this.ProjBudgetType != ProjBudgetType::None)
                {
                    this.ProjCheckHourBudget = false;
                }
                break;

            case fieldNum(ForecastModel, ProjExpenseReduction):
                if (this.ProjBudgetType != ProjBudgetType::None)
                {
                    this.ProjExpenseReduction = false;
                }
                break;

            case fieldNum(ForecastModel, ProjCheckExpenseBudget):
                if (this.ProjBudgetType != ProjBudgetType::None)
                {
                    this.ProjCheckExpenseBudget = false;
                }
                break;

            case fieldNum(ForecastModel, ProjItemReduction):
                if (this.ProjBudgetType != ProjBudgetType::None)
                {
                    this.ProjItemReduction = false;
                }
                break;

            case fieldNum(ForecastModel, ProjCheckItemBudget):
                if (this.ProjBudgetType != ProjBudgetType::None)
                {
                    this.ProjCheckItemBudget = false;
                }
                break;

            case fieldNum(ForecastModel, Blocked):
                if (this.ProjBudgetType != ProjBudgetType::None)
                {
                    this.Blocked = true;
                }
                break;

            case fieldNum(ForecastModel, SubModelId):
                if (this.Type == HeadingSub::Heading)
                {
                    this.SubModelId = this.ModelId;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subModelName</Name>
				<Source><![CDATA[
    display ForecastName subModelName()
    {
        return ForecastModel::find(HeadingSub::Heading,this.SubModelId).Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean             ret;
        ForecastModel       forecastModel;
        ForecastPurch       forecastPurch;
        ForecastSales       forecastSales;
        ProjForecastCost    projForecastCost;
        ProjForecastEmpl    projForecastEmpl;
        ProjForecastRevenue projForecastRevenue;

        ret = super();

        if (this.Type == HeadingSub::Heading)
        {
            select firstonly RecId from  forecastModel
                where forecastModel.SubModelId == this.ModelId &&
                      forecastModel.Type       == HeadingSub::SubModel;

            if (forecastModel.RecId)
                ret = checkFailed("@SYS79463");

            select firstonly forecastPurch
                where forecastPurch.ModelId == this.ModelId;

            if (forecastPurch)
                ret = checkFailed(strFmt("@SYS75284",tableId2pname(tableNum(ForecastPurch))));

            select firstonly forecastSales
                where forecastSales.ModelId == this.ModelId;

            if (forecastSales)
                ret = checkFailed(strFmt("@SYS75284",tableId2pname(tableNum(ForecastSales))));

            select firstonly projForecastCost
                where projForecastCost.ModelId == this.ModelId;

            if (projForecastCost)
                ret = checkFailed(strFmt("@SYS75284",tableId2pname(tableNum(ProjForecastCost))));

            select firstonly projForecastEmpl
                where projForecastEmpl.ModelId == this.ModelId;

            if (projForecastEmpl)
                ret = checkFailed(strFmt("@SYS75284",tableId2pname(tableNum(ProjForecastEmpl))));

            select firstonly projForecastRevenue
                where projForecastRevenue.ModelId == this.ModelId;

            if (projForecastRevenue)
                ret = checkFailed(strFmt("@SYS75284",tableId2pname(tableNum(ProjForecastRevenue))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean         ret;
        boolean         existsCarryForwardModel;
        BudgetModelId   headingModelId;

        ret = super();

        if (this.Type == HeadingSub::SubModel)
        {
            if (ForecastModel::find(HeadingSub::SubModel,this.SubModelId))
                return checkFailed(strFmt("@SYS26796",this.SubModelId));

            if (this.SubModelId == this.ModelId)
                return checkFailed("@SYS26795");

            headingModelId  = (select forecastModel
                                  where forecastModel.SubModelId == this.ModelId  &&
                                        forecastModel.Type       == HeadingSub::SubModel).ModelId;

            if (ForecastModel::find(HeadingSub::Heading,this.SubModelId).ProjBudgetType != ProjBudgetType::None)
                return checkFailed("@SYS191074");

            if (headingModelId)
                return checkFailed(strFmt("@SYS25920",this.ModelId,headingModelId));
        }

        if (this.ProjBudgetType == ProjBudgetType::CarryForward)
        {
            existsCarryForwardModel  = (select firstonly RecId from forecastModel
                                            where forecastModel.ProjBudgetType == ProjBudgetType::CarryForward
                                                && forecastModel.RecId != this.RecId).RecId != 0;

            if (existsCarryForwardModel)
            {
                ret = checkFailed("@SYS327592");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkModel</Name>
				<Source><![CDATA[
    static boolean checkModel(ForecastModelId modelId)
    {
        ForecastModel   forecastModel = ForecastModel::find(
            HeadingSub::Heading,
            modelId);

        if (! forecastModel)
            return checkFailed(strFmt("@SYS25942",modelId));

        if (forecastModel.Blocked)
            return checkFailed(strFmt("@SYS25943",forecastModel.ModelId));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReduceForecast</Name>
				<Source><![CDATA[
    static boolean checkReduceForecast(ForecastModelId modelId, ProjTransType transType)
    {
        ForecastModel  forecastModel;
        forecastModel= ForecastModel::find(HeadingSub::Heading, modelId);
        if (!forecastModel.Blocked)
        {
            switch (transType)
            {
                case ProjTransType::Hour:
                    return forecastModel.ProjHourReduction;
                case ProjTransType::Cost:
                    return forecastModel.ProjExpenseReduction;
                case ProjTransType::Item:
                    return forecastModel.ProjItemReduction;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRemainingBudget</Name>
				<Source><![CDATA[
    static boolean checkRemainingBudget(ForecastModelId modelId, ProjTransType transType)
    {
        ForecastModel  forecastModel;
        forecastModel= ForecastModel::find(HeadingSub::Heading, modelId);
        if (!forecastModel.Blocked)
        {
            switch (transType)
            {
                case ProjTransType::Hour:
                    return forecastModel.ProjCheckHourBudget;
                case ProjTransType::Cost:
                    return forecastModel.ProjCheckExpenseBudget;
                case ProjTransType::Item:
                    return forecastModel.ProjCheckItemBudget;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cov</Name>
				<Source><![CDATA[
    static NoYes cov(ForecastModelId model)
    {
        ForecastModel forecastModel = ForecastModel::find(HeadingSub::Heading,model);

        return forecastModel.Cov;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified record in the <c>ForecastModel</c> table exists.
    /// </summary>
    /// <param name="_type">
    /// The <c>HeadingSub</c> enumeration value of the model to check.
    /// </param>
    /// <param name="_model">
    /// The <c>ForecastModelId</c> String value of the model to check.
    /// </param>
    /// <param name="_subModel">
    /// The <c>ForecastModelSubId</c> String value of the model to check; optional.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(
        HeadingSub         _type,
        ForecastModelId    _model,
        ForecastModelSubId _subModel)
    {
        return (select firstonly forecastModel
                    where forecastModel.Type       == _type
                       && forecastModel.ModelId    == _model
                       && forecastModel.SubModelId == _subModel).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>ForecastModel</c> table.
    /// </summary>
    /// <param name="_type">
    ///    The <c>HeadingSub</c> enumeration value of the model to find.
    /// </param>
    /// <param name="_model">
    ///    The <c>ForecastModelId</c> string value of the model to find.
    /// </param>
    /// <param name="_subModel">
    ///    The <c>ForecastModelSubId</c> string value of the model to find; optional.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>ForecastModel</c> table; otherwise, an empty record.
    /// </returns>
    public static ForecastModel find(
        HeadingSub         _type,
        ForecastModelId    _model,
        ForecastModelSubId _subModel  = '',
        boolean            _forUpdate = false)
    {
        ForecastModel forecastModel;

        if (_model)
        {
            forecastModel.selectForUpdate(_forUpdate);

            // Split query to enable use of 'Found' cache property on table when not using sub model
            if (_subModel)
            {
                select firstonly forecastModel
                    where forecastModel.Type        == _type
                    && forecastModel.ModelId        == _model
                    && forecastModel.SubModelId     == _subModel;
            }
            else
            {
                // If the sub model is not specified, we are looking for a header model
                // where modelId and submodelId are the same.
                select firstonly forecastModel
                    where forecastModel.Type        == _type
                    && forecastModel.ModelId        == _model
                    && forecastModel.SubModelId     == _model;
            }
        }

        return forecastModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForecastModelByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ForecastModel</c> table.
    /// </summary>
    /// <param name="_forecastModelId">
    /// The ID of the <c>ForecastModel</c> table to find.
    /// </param>
    /// <returns>
    /// A record of the <c>ForecastModel</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static ForecastModel findForecastModelByName(ForecastModelId _forecastModelId)
    {
        ForecastModel forecastModel;

        if (!_forecastModelId)
        {
            return forecastModel;
        }
        else
        {
            select firstonly forecastModel where forecastModel.ModelId == _forecastModelId;
            return forecastModel;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupOpenModels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a custom lookup that includes only open forecast models.
    /// </summary>
    /// <param name="_fieldCtrl">
    /// The field control to bind this lookup.
    /// </param>
    public static void lookupOpenModels(FormStringControl _fieldCtrl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ForecastModel), _fieldCtrl);

        Query                   query;
        QueryBuildDataSource    qbds;

        sysTableLookup.addLookupfield(fieldNum(ForecastModel, ModelId), true);
        sysTableLookup.addLookupfield(fieldNum(ForecastModel, Txt));
        sysTableLookup.addLookupfield(fieldNum(ForecastModel, SubModelId));

        query   = new Query();
        qbds    = query.addDataSource(tableNum(ForecastModel));

        qbds.addRange(fieldNum(ForecastModel, Blocked)).value(queryValue(NoYes::No));
        qbds.addRange(fieldNum(ForecastModel, Type)).value(queryValue(HeadingSub::Heading));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.Type == HeadingSub::Heading)
            this.SubModelId = this.ModelId;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (this.Type == HeadingSub::Heading)
            this.SubModelId = this.ModelId;

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124100</DeveloperDocumentation>
	<FormRef>ForecastModel</FormRef>
	<Label>@SYS25894</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ModelId</TitleField1>
	<TitleField2>Txt</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ModelIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>ModelIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Blocked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Cov</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Blocked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Cov</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubModelId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjAutoCostReduction</Name>
			<Label>@SYS107319</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjHourReduction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjExpenseReduction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjItemReduction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCheckHourBudget</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCheckExpenseBudget</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCheckItemBudget</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjBudgetType</Name>
			<Label>@SYS153332</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectEstimate</Name>
			<Label>@SYS89360</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjForecastWIPTimeMaterial</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjForecastWIPFixedPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjForecastWIPInvestment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectInvoiceDate</Name>
			<Label>@SYS89362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseProjectDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Blocked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@sys13688</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Cov</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerAppropriation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastModelId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjBudgetType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjBudgetType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjCheckExpenseBudget</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS78349</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjCheckHourBudget</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS5269</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjCheckItemBudget</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS14428</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjExpenseReduction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS78349</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjForecastWIPFixedPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>ProjForecastWIPFixedPrice</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjForecastWIPInvestment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>ProjForecastWIPInvestment</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjForecastWIPTimeMaterial</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>ProjForecastWIPTimeMaterial</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjHourReduction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS5269</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjItemReduction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS14428</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubModelId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastModelSubId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>HeadingSub</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseProjectDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS89343</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TypeIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Type</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModelId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SubModelId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ModelIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ModelId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SubModelId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>BudgetModelMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ModelId</MapField>
					<MapFieldTo>ModelId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SubModelId</MapField>
					<MapFieldTo>SubModelId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>SubForecastModel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ForecastModel</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SubForecastModel</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ForecastModel</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SubModelId</Name>
					<SourceEDT>ForecastModelSubId</SourceEDT>
					<Field>SubModelId</Field>
					<RelatedField>ModelId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>ForecastModelSubId</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>HeadingSub::Heading</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>