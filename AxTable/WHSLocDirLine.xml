<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocDirLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSLocDirLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }     
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortingNoArrange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change <c>WHSLocDirLine</c> line numbers with adjacent line numbers based on up or down button click
    /// </summary>
    /// <param name="_up">
    /// Boolean used to determine if the up button or down button was pressed
    /// </param>
    /// <returns>
    /// An instance of <c>WHSLocDirLine</c> that represents the line that was moved
    /// </returns>
    [SysObsolete('Use WHSSequenceNumberMoverForm for Move up/down buttons logic', false, 13\09\2022)]
    public WHSLocDirLine sortingNoArrange(boolean _up)
    {
        WHSLocDirLine   locDirLineNew;
        WHSLocDirLine   locDirLineOld;
        WHSLocDirLine   cursor;
        int             change;
        WHSLocSeqNum    oldLocSeqNum;

        cursor = this;

        if (cursor.validateWrite())
        {
            ttsbegin;

            cursor.write();

            locDirLineNew.data(this);
            locDirLineOld.data(this);

            if (_up == true)
            {
                if (cursor.LocSeqNum > 1)
                {
                    change--;
                }
            }
            else
            {
                if (cursor.LocSeqNum < WHSLocDirTable::getMaxLineLocSeqNum(cursor.RefRecId)
                &&  cursor.LocSeqNum != 0)
                {
                    change++;
                }
            }

            if (change)
            {
                select forupdate locDirLineNew
                    where locDirLineNew.RecId == cursor.RecId;

                if (locDirLineNew)
                {
                    oldLocSeqNum = locDirLineNew.LocSeqNum;
                    locDirLineNew.LocSeqNum += change;

                    select forupdate firstonly locDirLineOld
                        where locDirLineOld.LocSeqNum == locDirLineNew.LocSeqNum
                            && locDirLineOld.RefRecId == locDirLineNew.RefRecId
                            && locDirLineOld.RecId    != locDirLineNew.RecId;

                    if (locDirLineOld && change)
                    {
                        locDirLineOld.LocSeqNum = maxInt(); // Update index conflict during switch of sequence
                        locDirLineOld.update();
                    }

                    locDirLineNew.update();

                    if (locDirLineOld && change)
                    {
                        locDirLineOld.LocSeqNum = oldLocSeqNum;
                        locDirLineOld.update();
                    }
                }
            }

            ttscommit;
        }
        else
        {
            locDirLineNew = cursor;
        }

        return locDirLineNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a specific <c>whsLocDirLine</c> record exists.
    /// </summary>
    /// <param name="_locSeqNum">
    /// Location sequence number of the record.
    /// </param>
    /// <param name="_refRecId">
    /// Referenced record id.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(WHSLocSeqNum    _locSeqNum,
                                RefRecId        _refRecId)
    {
        return (_locSeqNum && _refRecId) &&
               (select firstonly RecId from whsLocDirLine
                where whsLocDirLine.LocSeqNum == _locSeqNum &&
                      whsLocDirLine.RefRecId == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSLocDirLine</c> record with given parameters.
    /// </summary>
    /// <param name="_locSeqNum">
    /// Location sequence number of the record.
    /// </param>
    /// <param name="_refRecId">
    /// Referenced record id.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSLocDirLine find(WHSLocSeqNum   _locSeqNum,
                                     RefRecId       _refRecId,
                                     boolean        _forupdate = false)
    {
        WHSLocDirLine    locDirLine;

        if (_locSeqNum && _refRecId)
        {
            locDirLine.selectForUpdate(_forupdate);

            select firstonly locDirLine
                where locDirLine.LocSeqNum == _locSeqNum &&
                      locDirLine.RefRecId == _refRecId;
        }

        return locDirLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the WHSLocDirLine table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the location directive line record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// Does not vary.
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the WHSLocDirLine table; otherwise, an empty record.
    /// </returns>
    public static WHSLocDirLine findByRecId(RecId _recId, boolean _forUpdate = false)
    {
        WHSLocDirLine   locDirLine;

        if (_recId)
        {
            locDirLine.selectForUpdate(_forUpdate);

            select firstonly locDirLine
                where locDirLine.RecId  == _recId;
        }

        return locDirLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllowSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the Allow split value is allowed for the current configuration
    /// </summary>
    /// <returns>
    /// True if the value is allowed for the current configuration; otherwise, false
    /// </returns>
    private boolean validateAllowSplit()
    {
        boolean         ret = true;
        WHSLocDirAction whsLocDirAction;

        if (!this.AllowSplit)
        {
            select firstonly RecId from whsLocDirAction where
                whsLocDirAction.RefRecId == this.RecId &&
                whsLocDirAction.LocDirStrategy == WHSLocDirStrategy::GuidedLPLocate;

            if (whsLocDirAction.RecId)
            {
                ret = checkFailed("@SYP4986029");
            }
        }
        else
        {
            ret = this.validateLocDirTableWorkTransTypeIsNotPackedContainerPicking(fieldNum(WHSLocDirLine, AllowSplit));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRoundUpToHandlingUnit</Name>
				<Source><![CDATA[
    private boolean validateRoundUpToHandlingUnit()
    {
        boolean ret = true;

        if (this.RoundUpToHandlingUnit == NoYes::Yes)
        {
            if (this.RestrictByUOM == NoYes::No)
            {
                ret = checkFailed(strFmt("@WAX:ErrorMessageFieldCannotBeSetIfOtherFieldIsNotSet", fieldPName(WHSLocDirLine, RoundUpToHandlingUnit), fieldPName(WHSLocDirLine, RestrictByUOM)));
            }

            if (this.RefRecId && !WHSLocDirTable::findByRecId(this.RefRecId).isRestrictingUnitQuantityCalculationRoundUpAllowed())
            {
                ret = checkFailed(strFmt("@WAX:ErrorMessageWrongLocationDirectiveForSettingOfField", fieldPName(WHSLocDirLine, RoundUpToHandlingUnit)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocDirTableWorkTransTypeIsNotPackedContainerPicking</Name>
				<Source><![CDATA[
    private boolean validateLocDirTableWorkTransTypeIsNotPackedContainerPicking(FieldId _fieldId)
    {
        boolean ret = true;

        if (this.RefRecId
            && WHSLocDirTable::findByRecId(this.RefRecId).WorkTransType == WHSWorkTransType::PackedContainerPicking)
        {
            ret = checkFailed(strFmt("@WAX:ErrorMessageWrongLocationDirectiveForSettingOfField",
                              fieldId2PName(tableNum(WHSLocDirLine), _fieldId)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocateQtyField</Name>
				<Source><![CDATA[
    private boolean validateLocateQtyField()
    {
        boolean ret = true;

        if (this.RefRecId)
        {
            switch (this.LocateQty)
            {
                case WHSLocateQty::LicensePlateQty: 
                    ret = WhsLocationDirective::isLocatingWholeLPSupported(WHSLocDirTable::findByRecId(this.RefRecId).WorkTransType);                    
                    break;

                default:
                    //fallthrough
            }

            if (ret 
                && this.LocateQty != WHSLocateQty::None
                && WHSLocDirTable::findByRecId(this.RefRecId).WorkTransType == WHSWorkTransType::PackedContainerPicking)
            {
                ret = false;
            }
        }

        if (!ret)
        {
            ret = checkFailed(strFmt("@WAX:ErrorMessageWrongLocationDirectiveForSettingOfField",
                              fieldId2PName(tableNum(WHSLocDirLine), fieldNum(WHSLocDirLine, LocateQty))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(WHSLocDirLine, AllowSplit):
                    ret = this.validateAllowSplit();
                    break;

                case fieldnum(WHSLocDirLine, RoundUpToHandlingUnit):
                    ret = this.validateRoundUpToHandlingUnit();
                    break;

                case fieldNum(WHSLocDirLine, LocateQty):
                    ret = this.validateLocateQtyField();
                    break;

                case fieldNum(WHSLocDirLine, RestrictByUOM):
                    ret = this.RestrictByUOM ? this.validateLocDirTableWorkTransTypeIsNotPackedContainerPicking(_fieldIdToCheck) : true;
                    break;

                case fieldNum(WHSLocDirLine, LocatePackingQty):
                    ret = this.LocatePackingQty ? this.validateLocDirTableWorkTransTypeIsNotPackedContainerPicking(_fieldIdToCheck) : true;
                    break;

                case fieldNum(WHSLocDirLine, ImmediateReplenishmentTemplateId):
                    ret = this.validateImmediateReplenishmentTemplateId();
                    break;

                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateImmediateReplenishmentTemplateId</Name>
				<Source><![CDATA[
    protected boolean validateImmediateReplenishmentTemplateId()
    {
        boolean ret = true;

        if (this.ImmediateReplenishmentTemplateId)
        {
            WHSLocDirTable locDirTable = WHSLocDirTable::findByRecId(this.RefRecId);

            if (locDirTable.WorkType != WHSWorkType::Pick
            ||  (locDirTable.WorkTransType != WHSWorkTransType::Sales
            &&   locDirTable.WorkTransType != WHSWorkTransType::TransferIssue
            &&   locDirTable.WorkTransType != WHSWorkTransType::ProdPick
            &&   locDirTable.WorkTransType != WHSWorkTransType::KanbanPick))
            {
                ret = checkFailed("@WAX:LocDirLineImmedReplenPickWorkTypeValidateError");
            }

            if (ret)
            {
                WHSLocDirLineUOM locDirLineUOM;

                select count(RecId) from locDirLineUOM
                    where locDirLineUOM.RefRecId == this.RecId;

                if (locDirLineUOM.RecId > 1)
                {
                    ret = checkFailed("@WAX:LocDirLineImmedReplenValidateError");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && this.RestrictByUOM && this.LocatePackingQty)
        {
            ret = checkFailed("@WAX:LocationDirectiveLineRestrictByUOMLocationPackingQtyError");
        }

        ret = ret && this.validateRoundUpToHandlingUnit();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return [
            [fieldnum(WHSLocDirLine, RoundUpToHandlingUnit),
                [fieldnum(WHSLocDirLine, RestrictByUOM)]]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(WHSLocDirLine, RoundUpToHandlingUnit):
                if (this.RestrictByUOM == NoYes::No)
                {
                    this.RoundUpToHandlingUnit = NoYes::No;
                }
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicableForQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the location directive line is applicable for a given quantity.
    /// </summary>
    /// <param name = "_qty">The quantity, in same unit of measure as the location directive line.</param>
    /// <returns>true if applicable; otherwise, false.</returns>     
    public boolean isApplicableForQuantity(Qty _qty)
    {
        return _qty >= this.FromQty
            && _qty <= this.ToQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4401</DeveloperDocumentation>
	<FormRef>WHSLocDirTable</FormRef>
	<Label>@WAX398</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>LocSeqNum</TitleField1>
	<TitleField2>RestrictByUOM</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RefRecIdLocSeqNumIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<ReplacementKey>RefRecIdLocSeqNumIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LocSeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RestrictByUOM</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowSplit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocatePackingQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocateQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocSeqNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LocSeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RestrictByUOM</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowSplit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocatePackingQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocateQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundUpToHandlingUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowSplit</Name>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>WHSAllowSplit</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FromQty</Name>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>WHSFromQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LocatePackingQty</Name>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>WHSLocatePackingQty</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LocateQty</Name>
			<AssetClassification>OII</AssetClassification>
			<EnumType>WHSLocateQty</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LocSeqNum</Name>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>WHSLocSeqNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RestrictByUOM</Name>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>WHSRestrictByUOM</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ToQty</Name>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>WHSToQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RoundUpToHandlingUnit</Name>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>WHSRoundUpToHandlingUnit</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ImmediateReplenishmentTemplateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSImmediateReplenishTemplateId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefRecIdLocSeqNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LocSeqNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitID</Name>
					<Field>UnitID</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLocDirTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLocDirTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSReplenishmentTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSReplenishmentTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ImmediateReplenishmentTemplateId</Name>
					<Field>ImmediateReplenishmentTemplateId</Field>
					<RelatedField>ReplenishTemplateId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>ReplenishmentType</Name>
					<RelatedField>ReplenishmentType</RelatedField>
					<ValueStr>WHSReplenishmentType::WaveDemand</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>