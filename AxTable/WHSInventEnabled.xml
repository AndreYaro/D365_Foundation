<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventEnabled</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSInventEnabled extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record in the <c>WHSInventEnabled</c> table and in the <c>WHSInventTable</c> table
    /// </summary>
    public void delete()
    {
        WHSInventTable whsInventTable;
        super();

        delete_from whsInventTable
            where whsInventTable.ItemId == this.ItemId;

        this.clearCacheAcrossAOSes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record to the <c>WHSInventEnabled</c> table
    /// </summary>
    public void insert()
    {
        ttsbegin;

        super();

        TMSInventEnabled::addItem(this.ItemId);
        WHSInventTable::createFromItemId(this.ItemId);

        ttscommit;

        this.clearCacheAcrossAOSes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        EcoResTrackingDimensionGroupItem trackingDimGroupItem = EcoResTrackingDimensionGroupItem::findByItem(this.DataAreaId, this.ItemId);

        if (ret && trackingDimGroupItem.RecId != 0)
        {
            EcoResStorageDimensionGroupRecId storageDimensionGroupRecId = InventTable::find(this.ItemId).storageDimensionGroup();

            // When WHS enabling an item, ensure its InventBatchId tracking dimension setup is valid
            ret = ret && WHSInvent::checkBatchBlankIssueReceipt(storageDimensionGroupRecId, trackingDimGroupItem.TrackingDimensionGroup);
            // Ensure all tracking dimensions are physical dimensions
            ret = ret && WHSInvent::checkNonPhysicalDims(storageDimensionGroupRecId, trackingDimGroupItem.TrackingDimensionGroup);
        }

        if (ret)
        {
            // Check Item Model Group settings if one is assigned, prevent FIFO date control
            InventModelGroupItem inventModelGroupItem = InventModelGroupItem::findByItemIdLegalEntity(this.ItemId, appl.company().dataArea(tableNum(InventTable)));

            if (inventModelGroupItem.RecId != 0
            &&  inventModelGroupItem.modelGroup().ReserveByDate)
            {
                ret = checkFailed("@WAX5373");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a record to the <c>WHSInventEnabled</c> table with the specified item ID if the record doesn't already exist.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the <c>InventTable</c> to add.
    /// </param>
    public static void addItem(ItemId _itemId)
    {
        WHSInventEnabled        inventEnabled;

        if (!WHSInventEnabled::exist(_itemId))
        {
            ttsbegin;
            inventEnabled.ItemId = _itemId;
            
            if (!inventEnabled.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSInventEnabled)));
            }
            else
            {
                inventEnabled.insert();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheKey</Name>
				<Source><![CDATA[
    private container cacheKey()
    {
        return [this.DataAreaId, this.ItemId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheScope</Name>
				<Source><![CDATA[
    private static str cacheScope()
    {
        return tableStr(WHSInventEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCacheAcrossAOSes</Name>
				<Source><![CDATA[
    private void clearCacheAcrossAOSes()
    {
        if (WHSInventEnabledCacheFlight::instance().isEnabled())
        {
            // Ensure cache is populated to ensure data is removed on all AOSes
            WHSInventEnabled::exist(this.ItemId);

            SysGlobalObjectCache cache = classFactory.globalObjectCache();
            cache.remove(WHSInventEnabled::cacheScope(), this.cacheKey());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>WHSInventEnabled</c> table exists.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the <c>InventTable</c> to find.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(ItemId  _itemId)
    {
        if (_itemId &&
            isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            if (WHSInventEnabledCacheFlight::instance().isEnabled())
            {
                SysGlobalObjectCache cache = classFactory.globalObjectCache();
                container key = [curExt(), _itemId];
                str scope = WHSInventEnabled::cacheScope();

                container result = cache.find(scope, key);
                if (!result)
                {
                    result = [WHSInventEnabled::existInternal(_itemId)];
                    cache.insert(scope, key, result);
                }
                return conPeek(result, 1);
            }
            return WHSInventEnabled::existInternal(_itemId); 
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInternal</Name>
				<Source><![CDATA[
    private static boolean existInternal(ItemId _itemId)
    {
        return (select firstonly RecId from whsInventEnabled
                where whsInventEnabled.ItemId == _itemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WHSInventEnabled</c> table.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the <c>InventTable</c> to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WHSInventEnabled</c> table; otherwise, an empty record.
    /// </returns>
    public static WHSInventEnabled find(ItemId  _itemId,
                                        boolean _forupdate = false)
    {
        WHSInventEnabled    whsInventEnabled;

        if (_itemId && isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            whsInventEnabled.selectForUpdate(_forupdate);

            select firstonly whsInventEnabled
                where whsInventEnabled.ItemId == _itemId;
        }

        return whsInventEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a record from the <c>WHSInventEnabled</c> table with the specified item ID if the record exists.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the <c>InventTable</c> to remove.
    /// </param>
    public static void removeItem(ItemId _itemId)
    {
        WHSInventEnabled        inventEnabled;

        ttsbegin;
        delete_from inventEnabled
            where inventEnabled.ItemId == _itemId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the record to the <c>WHSInventEnabled</c> table with the specified item ID if we want to enable the item for WHS
    /// Removes the record from the <c>WHSInventEnabled</c> table with the specified item ID if we want to disable the item for WHS
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the <c>InventTable</c> to update.
    /// </param>
    /// <param name="_whsEnabled">
    /// true if we want to enable item for WHS; otherwise, false.
    /// </param>
    public static void updateItem(ItemId _itemId, boolean _whsEnabled)
    {
        if (_whsEnabled)
        {
            WHSInventEnabled::addItem(_itemId);
        }
        else
        {
            WHSInventEnabled::removeItem(_itemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4364</DeveloperDocumentation>
	<Label>@WAX1265</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ItemId</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ItemId</PrimaryIndex>
	<ReplacementKey>ItemId</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>