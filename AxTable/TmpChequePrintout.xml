<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpChequePrintout</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

public class TmpChequePrintout extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayMICRLine</Name>
				<Source><![CDATA[
    display BankMICRLine displayMICRLine()
    {
        BankChequeLayout    layout = BankChequeLayout::find(this.AccountId);
        BankMICRLine        micrChequeNum;
        BankMICRLine        bankMICRLine;
        Counter             chequeLen;
        Counter             i;
        BankMICRLine        filler;
        Counter             chequeNumPos;
        ;

        filler = '';
        if (layout.Micr)
        {
            chequeLen = strLen(this.ChequeNum);
            for (i = chequeLen; i < layout.MicrNum; i++)
            {
                if (layout.MicrZero)
                    filler = filler + '0';
                else
                    filler = filler + ' ';
            }
            micrChequeNum = filler + this.ChequeNum;

            chequeNumPos = strFind(this.micrLine,'%',1,strLen(this.micrLine));
            if (chequeNumPos && strLen(this.micrLine) > chequeNumPos+1)
            {
                bankMICRLine = strIns(this.micrLine,';',chequeNumPos+2);
                bankMICRLine = strFmt(bankMICRLine,micrChequeNum);
                bankMICRLine = strDel(bankMICRLine,strFind(bankMICRLine,';',1,strLen(bankMICRLine)),1);
            }
            else
                bankMICRLine = strFmt(this.micrLine,micrChequeNum);
        }
        return bankMICRLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>micrAuxOnUS</Name>
				<Source><![CDATA[
    display BankMICRSectionAuxOnUs micrAuxOnUS()
    {
        #characters

        BankChequeLayout    layout = BankChequeLayout::find(this.AccountId);
        ;
        if (layout.Micr)
        {
            if (layout.MicrZero && (layout.MicrNum > strLen(this.ChequeNum)))
            {
                return #capitalC + num2Str0(str2num(this.ChequeNum), layout.MicrNum)+ #capitalC;
            }
            else
            {
                return #capitalC + this.ChequeNum + #capitalC;
            }
        }
        else
        {
            return ' ';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>micrOnUS</Name>
				<Source><![CDATA[
    display BankMICRSectionOnUs micrOnUS()
    {
        #characters

        if (BankChequeLayout::find(this.AccountId).Micr)
        {
            return this.AccountNum + #CapitalC;
        }
        else
        {
            return ' ';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>micrTransit</Name>
				<Source><![CDATA[
    display BankMICRSectionTransit micrTransit()
    {
        #characters

        BankChequeLayout bankChequeLayout;
        ;
        bankChequeLayout= BankChequeLayout::find(this.AccountId);

        if (bankChequeLayout.Micr)
        {
            return #CapitalA + bankChequeLayout.aCode+bankChequeLayout.bCode+bankChequeLayout.cCode + #CapitalA;
        }
        else
        {
            return ' ';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChequeAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>AmountTxt</c> field of this table by the format of the non-negotiable check.
    /// </summary>
    /// <param name="_amountCur">
    ///    A <c>AmountCur</c> value that determines the check amount.
    /// </param>
    /// <param name="_chequeFormType">
    ///    A <c>ChequeFormType</c> value that contains the layout of the check.
    /// </param>
    /// <param name="_currency">
    ///    A <c>CurrencyCode</c> table buffer that contains the currency information.
    /// </param>
    /// <param name="_bankChequeLayout">
    ///    A <c>BankChequeLayout</c> table buffer that contains layout information about checks.
    /// </param>
    /// <param name="_vendTable">
    ///    A <c>VendTable</c> table buffer that contains vendor information.
    /// </param>
    /// <param name="_custTable">
    ///    A <c>CustTable</c> table buffer that contains customer information.
    /// </param>
    public void setChequeAmount(AmountCur _amountCur, ChequeFormType _chequeFormType,
                                Currency  _currency, BankChequeLayout _bankChequeLayout,
                                VendTable _vendTable,CustTable _custTable)
    {
        LanguageId              chequeLanguage;
        // <GBR>
        #define.TotalCharsForLine_BR(85)
        str line1_BR;
        str line2_BR;
        int spacePosition_BR;
        // </GBR>

        switch (_chequeFormType)
        {
            case ChequeFormType::ESStyle :
                this.AmountTxt         = strFmt('***%1***',num2str(_amountCur,1,2,2,1));
                this.Numerals2Letter   = _amountCur != 0 ?
                                                      numeralsToTxt_ES(_amountCur,
                                                                        CurrencyGender::findByCurrencyCode(_currency.CurrencyCode).Gender,
                                                                        true,
                                                                        _currency.CurrencyCodeISO ) : '';
                break;
            case ChequeFormType::USStyle :

                if (_bankChequeLayout.AmountPrefix)
                {
                    this.AmountTxt     = strFmt('%1 %2***',_bankChequeLayout.AmountPrefix, _amountCur);
                }
                else
                {
                    this.AmountTxt     = strFmt('%1***', _amountCur);
                }
                break;

            case ChequeFormType::DKStyle :

                this.AmountTxt         = strFmt('***%1***',_amountCur);
                break;

            case ChequeFormType::MXStyle :
                this.setChequeAmountMxStyle(_amountCur, _currency, _bankChequeLayout);
                break;

            case ChequeFormType::CAStyle:

                if (_bankChequeLayout.OtherCurrencies)
                {
                    this.CurrencyCode = _currency.CurrencyCode;
                    this.CurrencyTxt = _currency.Txt;
                }

                if (_vendTable)
                {
                    chequeLanguage = DirPartyTable::findRec(_vendTable.Party).LanguageId;

                    if (subStr(chequeLanguage, 1, 2) != 'fr' && subStr(chequeLanguage, 1, 2) != 'en')
                    {
                        // If it is not French and not English, get the user's language
                        chequeLanguage = xUserInfo::find().Language;
                    }
                }
                else if (_custTable)
                {
                    chequeLanguage = DirPartyTable::findRec(_custTable.Party).LanguageId;

                    if (subStr(chequeLanguage, 1, 2) != 'fr' && subStr(chequeLanguage, 1, 2) != 'en')
                    {
                        // If it is not French and not English, get the user's language
                        chequeLanguage = xUserInfo::find().Language;
                    }
                }
                else
                {
                    chequeLanguage = xUserInfo::find().Language;
                }

                switch (subStr(chequeLanguage, 1, 2))
                {
                    case 'fr':

                        // Currency symbol goes after amount in numbers
                        this.AmountTxt = strFmt('*****%1%2', _amountCur, _currency.Symbol ? _currency.Symbol : '$');

                        // Convert amount in text to French
                        this.Numerals2Letter = _amountCur != 0 ? GlobalEx::numeralsToTxt_FR(_amountCur) : '';

                        // Embed currency word in Numerals2Letter
                        this.Numerals2Letter = strIns(this.Numerals2Letter, ' ' + this.CurrencyTxt,
                            strScan(this.Numerals2Letter, ' et ', strLen(this.Numerals2Letter) - 7, -3));

                        break;

                    default:

                        // Currency symbol goes before asterisks amount in numbers
                        this.AmountTxt = strFmt('%1*****%2', _currency.Symbol ? _currency.Symbol : '$', _amountCur);

                        // Convert amount in text to English hard coded to avoid labels that would be translated for a French install
                        this.Numerals2Letter = _amountCur != 0 ? numeralsToTxt_EN(_amountCur) : '';

                        this.Numerals2Letter = strIns(this.Numerals2Letter,
                            ' ' + this.CurrencyTxt,
                            strScan(this.Numerals2Letter, ' and ', strLen(this.Numerals2Letter) - 7, -4));

                        break;
                }
                // Need 2 more asterisks before amount in text
                this.Numerals2Letter = '**' + this.Numerals2Letter;

                break;

            case ChequeFormType::FRStyle :

                if (_bankChequeLayout.AmountPrefix)
                {
                    this.AmountTxt     = strFmt('*%1 %2*',_bankChequeLayout.AmountPrefix, _amountCur);
                }
                else
                {
                    this.AmountTxt     = strFmt('*%1*', _amountCur);
                }
                this.Numerals2Letter   = GlobalEx::numeralsToTxt_FR(_amountCur, true);

                break;

            // <GBR>
            case ChequeFormType::BRStyle:
                this.AmountTxt          = strFmt('#%1#', this.AmountCur);
                this.Numerals2Letter    = strFmt('***%1***', Global::numeralsToTxt_BR(this.AmountCur));

                if (strLen(this.Numerals2Letter) > #TotalCharsForLine_BR)
                {
                    spacePosition_BR = strFind(subStr(this.Numerals2Letter, 0, #TotalCharsForLine_BR), " ", #TotalCharsForLine_BR, -#TotalCharsForLine_BR);

                    if (spacePosition_BR)
                    {
                        line1_BR = subStr(this.Numerals2Letter, 0, spacePosition_BR);
                        line1_BR = strFmt('%1%2', line1_BR, strRep(' ', #TotalCharsForLine_BR - strLen(line1_BR) - 1));
                        line2_BR = subStr(this.Numerals2Letter, spacePosition_BR + 1, strLen(this.Numerals2Letter));
                    }
                }
                else
                {
                    line1_BR = strFmt('%1%2', this.Numerals2Letter, strRep('*', #TotalCharsForLine_BR - strLen(this.Numerals2Letter) - 1));
                    line2_BR = '';
                }

                this.Numerals2Letter    = strFmt('%1%2%3',
                                            line1_BR,
                                            line2_BR,
                                            strRep('*', #TotalCharsForLine_BR - strLen(line2_BR)));
                break;
            // </GBR>

            default :

                this.AmountTxt         = strFmt('%1 %2***',_currency.CurrencyCode, _amountCur);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendToGER</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends cheques to electronic reporting using the format defined on the provided cheque layout.
    /// </summary>
    /// <param name = "_layout">The cheque layout for the cheques to send to electronic reporting.</param>
    /// <param name = "_tmpChequePrintout">The temporary table buffer containing the checks to send to electronic reporting.</param>
    public static void sendToGER(BankChequeLayout _layout, TmpChequePrintout _tmpChequePrintout)
    {
        ERFormatMappingTable formatMapping = ERFormatMappingTable::find(_layout.GERFormatMapping);

        if (!formatMapping)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ERIModelDefinitionParamsAction parameters = new ERModelDefinitionParamsUIActionComposite()
            .add(new ERModelDefinitionDatabaseContext()
                .addTemporaryTable(_tmpChequePrintout)
                .addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curext())
                .addValue(tableNum(BankChequeLayout), fieldNum(BankChequeLayout, AccountId), _tmpChequePrintout.AccountId));

        ERIFormatMappingRun formatMappingRun = ERObjectsFactory::createFormatMappingRunByFormatMappingId(formatMapping.RecId);
        formatMappingRun.withParameter(parameters);

        formatMappingRun.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChequeAmountMxStyle</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>AmountTxt</c> field of this table by the format of the non-negotiable check for <c>ChequeFormType::MXStyle</c>.
    /// </summary>
    /// <param name="_amountCur">
    ///    A <c>AmountCur</c> value that determines the check amount.
    /// </param>
    /// <param name="_currency">
    ///    A <c>CurrencyCode</c> table buffer that contains the currency information.
    /// </param>
    /// <param name="_bankChequeLayout">
    ///    A <c>BankChequeLayout</c> table buffer that contains layout information about checks.
    /// </param>
    private void setChequeAmountMxStyle(
        AmountCur _amountCur,
        Currency _currency,
        BankChequeLayout _bankChequeLayout)
    {
        const str Pesos = 'pesos';
        const str Dollars = 'dólares americanos';
        const str MexNationalCurrency = 'M.N.';
        const str CurrencyCodeISO_USD = 'USD';

        this.CurrencyTxt = (_currency.CurrencyCodeISO != CurrencyCodeISO_USD) ? MexNationalCurrency : '';
        
        if (_bankChequeLayout.AmountPrefix)
        {
            this.AmountTxt = strFmt('%1 %2***',_bankChequeLayout.AmountPrefix, _amountCur);
        }
        else
        {
            this.AmountTxt = strFmt('%1***', _amountCur);
        }

        if (_amountCur != 0) 
        {
            this.Numerals2Letter = numeralsToTxt_ES(
                _amountCur, 
                CurrencyGender::findByCurrencyCode(_currency.CurrencyCode).Gender,
                true,
                _currency.CurrencyCodeISO,
                true,
                true);

            if (_currency.CurrencyCodeISO == CurrencyCodeISO_USD)
            {
                this.Numerals2Letter = strReplace(this.Numerals2Letter, Pesos, Dollars);
            }
        }
        else
        {
            this.Numerals2Letter = '';
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BankCheque</ConfigurationKey>
	<Label>@SYS15425</Label>
	<TitleField1>County</TitleField1>
	<ClusteredIndex></ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex></PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Address</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Addressing</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AmountTxt</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS76462</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCopyCustomWatermark</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankCopyCustomWatermark</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCopySignatureText</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankCopySignatureText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankName</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ChequeFormType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>ChequeFormType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ChequeNum</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankChequeNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ChequeTop</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReportPosition</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ChequeTopDrop</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ChequeSlipTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>City</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressCity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyCity</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CompanyCity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Copy</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@SYS6896</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryRegionId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressCountryRegionId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>County</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressCountyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyTxt</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsNonNegotiableCheque</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@SYS132243</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>MaturityDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PDCMaturityDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MICRLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankMICRLine</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Numerals2Letter</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TempStr</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumOfSlips</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Counter</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RecipientName</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankNegInstRecipientName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RegistrationNum</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankRegNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RowNumberPerPage</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Counter</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Signature1</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@SYS76013</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Signature2</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@SYS76014</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SlipHeight</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReportPosition</ExtendedDataType>
			<Label>@CashManagement:SlipHeight</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SlipTop1</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReportPosition</ExtendedDataType>
			<Label>@SYS76507</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SlipTop2</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReportPosition</ExtendedDataType>
			<Label>@SYS76506</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SlipTxt</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ChequeSlipTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>State</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Street</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressStreet</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransactionRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Void</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@SYS6127</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsTestCheque</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>EmptyContainer</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Bitmap</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankAccountTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountId</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>AccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegionId</Name>
					<SourceEDT>AddressCountryRegionId</SourceEDT>
					<Field>CountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>