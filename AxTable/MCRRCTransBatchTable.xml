<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRRCTransBatchTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRRCTransBatchTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBatchTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the total amount of the refund check batch.
    /// </summary>
    /// <returns>
    /// The total amount being refunded in the batch.
    /// </returns>
    public display Amount checkBatchTotal()
    {
        MCRRCSettlementTable rcSettlementTable;

        select sum(mcrSettlementAmount) from rcSettlementTable
            where rcSettlementTable.mcrrcTransBatchID == this.mcrrcTransBatchID;

        return rcSettlementTable.mcrSettlementAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the currency of the refund check batch amount.
    /// </summary>
    /// <returns>
    /// The currency of the amount being refunded in the batch.
    /// </returns>
    public display CurrencyCodeTransaction displayTransactionCurrency()
    {
        LedgerJournalTable ledgerJournalTable;

        ledgerJournalTable = this.findLedgerJournalTable();

        return ledgerJournalTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds and returns <c>LedgerJournalTable</c> record that is associated to the record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>LedgerJournalTable</c> record that is associated to the record.
    /// </returns>
    LedgerJournalTable findLedgerJournalTable(boolean _forUpdate = false)
    {
        LedgerJournalTable  ledgerJournalTable;
        ledgerJournalTable.selectForUpdate(_forUpdate);

        select ledgerJournalTable
            where ledgerJournalTable.JournalNum == this.LedgerJournalId;

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the refund check transaction batch ID from the
    ///     next number in the number sequence.
    ///     Sets the initial status to MCRRCTransBatchStatus::InProcess.
    /// </summary>
    public void initValue()
    {
        NumberSeq           numberSeq;
        str                 rcTransBatchID;

        numberSeq = NumberSeq::newGetNum(MCROrderParameters::numRefRefundCheckBatchPrint(), false, true);
        rcTransBatchID = numberSeq.num();
        if (strLen(rcTransBatchID) > 8)
        {
            throw error("@MCR36460");
        }

        this.mcrrcTransBatchID = rcTransBatchID;
        this.mcrrcTransBatchStatus = MCRRCTransBatchStatus::InProcess;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBatchID</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds and returns the refund check batch record with the
    ///     specified refund check transaction batch ID.
    /// </summary>
    /// <param name="_mcrrcTransBatchID">
    /// The refund check transaction batch ID to use to find the refund batch record.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The refund batch record with the specified refund check transaction batch ID.
    /// </returns>
    public static MCRRCTransBatchTable findByBatchID(MCRRCTransBatchID _mcrrcTransBatchID,
                                             boolean _forUpdate = false)
    {
        MCRRCTransBatchTable rcTransBatchTable;

        rcTransBatchTable.selectForUpdate(_forUpdate);

        select rcTransBatchTable
            where rcTransBatchTable.mcrrcTransBatchID == _mcrrcTransBatchID;

        return rcTransBatchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds and returns the refund check settlement record with the
    ///     specified journal ID.
    /// </summary>
    /// <param name="_ledgerJournalId">
    /// The ledger journal ID of the refund batch record that should be found.
    /// </param>
    /// <param name="_selectForUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The refund batch record with the <c>LedgerJournalId</c> specified.
    /// </returns>
    public static MCRRCTransBatchTable findByLedgerJournalId(LedgerJournalId _ledgerJournalId, boolean _selectForUpdate = false)
    {
        MCRRCTransBatchTable rcTransBatchTable;
        rcTransBatchTable.selectForUpdate(_selectForUpdate);

        select rcTransBatchTable
            where rcTransBatchTable.LedgerJournalId == _ledgerJournalId;

        return rcTransBatchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenBatchFromTenderTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds and returns an open batch record.
    /// </summary>
    /// <param name="_tenderTypeId">
    /// The tender type id of the batches related mcrCustPaymTable.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_mcrClaimRefundCheck">
    /// The batch record found should have a <c>MCRClaimRefundCheck</c> set to the specified value.
    /// </param>
    /// <returns>
    /// The batch record given the specified payment mode.
    /// </returns>
    public static MCRRCTransBatchTable findOpenBatchFromTenderTypeId(MCRRetailStoreTenderTypeId           _tenderTypeId,
                                                                     boolean            _forUpdate = false,
                                                                     MCRClaimRefundCheck _mcrClaimRefundCheck = NoYes::No)
    {
        MCRRCTransBatchTable rcTransBatchTable;
        MCRRCTransBatchTable rcTransBatchTableReturn;
        MCRCustPaymTable     mcrCustPaymTable;

        MCRRCSettlementTable rcSettlementTable;
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalName   ledgerJournalName;
        LedgerJournalTrans  ledgerJournalTrans;
        rcTransBatchTable.selectForUpdate(_forUpdate);

        // seperate the batches for claim refund checks
        while select rcTransBatchTable
            where rcTransBatchTable.mcrrcTransBatchStatus   == MCRRCTransBatchStatus::InProcess
            &&    rcTransBatchTable.mcrClaimRefundCheck     == _mcrClaimRefundCheck
        {
            ledgerJournalTable = rcTransBatchTable.findLedgerJournalTable();
            ledgerJournalName = LedgerJournalName::find(ledgerJournalTable.JournalName);

            select firstonly RecId from ledgerJournalTrans
                join mcrCustPaymTable
                where mcrCustPaymTable.RecId == ledgerJournalTrans.MCRRefPaymID
                    && mcrCustPaymTable.TenderTypeID != _tenderTypeId
                    && ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum;

            // If record exists move on to the next batch because the current one
            // is not for the RC payment method passed (don't allow different
            // payment methods in a batch because they may have a different check
            // format).
            if (ledgerJournalTrans)
            {
                continue;
            }

            select count(RecId) from rcSettlementTable
                where rcSettlementTable.mcrrcTransBatchID == rcTransBatchTable.mcrrcTransBatchID;

            // Check if the the line limit on the journal has already been meet and verify
            // the journal has not been posted.  The journal should not be posted if the
            // batch status is at InProcess but its possible a user has bypassed the refund
            // check processing app and posted the batch.
            if (LedgerJournalForcedJournalSplitFeature::isEnabled()
                && LedgerJournalTable::journalTypeAllowsSplitting(ledgerJournalTable.JournalType))
            {
                if (rcSettlementTable.RecId < LedgerJournalMaxLineLimit::getMaxLineLimit()
                    && !ledgerJournalTable.Posted)
                {
                    rcTransBatchTableReturn = rcTransBatchTable;
                    break;
                }
                else
                {
                    continue;
                }
            }
            else
            {
                if ((rcSettlementTable.RecId < ledgerJournalName.LinesLimitBeforeDistribution ||
                    ledgerJournalName.LinesLimitBeforeDistribution == 0 ) &&
                   !ledgerJournalTable.Posted)
                {
                    rcTransBatchTableReturn = rcTransBatchTable;
                    break;
                }
                else
                {
                    continue;
                }
            }
        }

        return rcTransBatchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRCTransBatchInProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns true if at least one refund check transaction batch has a status
    ///     The query is performed across all companies, not just the current company.
    /// </summary>
    /// <returns>
    /// true if at least one refund check transaction batch has a status of in process; false otherwise.
    /// </returns>
    public static boolean isRCTransBatchInProcess()
    {
        MCRRCTransBatchTable rcTransBatchTable;

        select firstonly RecId from rcTransBatchTable
            where rcTransBatchTable.mcrrcTransBatchStatus == MCRRCTransBatchStatus::InProcess;

        if (rcTransBatchTable)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MCRPayment</ConfigurationKey>
	<DeveloperDocumentation>@MCR23536</DeveloperDocumentation>
	<Label>@MCR23536</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>MCRRCTransBatchID</TitleField1>
	<TitleField2>MCRRCTransBatchStatus</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>LedgerJournalId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>Payments</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRRCTransBatchID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRRCTransBatchStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RCTransBatchTable</Name>
			<Label>@MCR23536</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRRCTransBatchID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRRCTransBatchStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRClaimRefundCheck</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerJournalId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRClaimRefundCheck</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRClaimRefundCheck</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRRCTransBatchID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRRCTransBatchID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRRCTransBatchStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>MCRRCTransBatchStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RCTransBatchID</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>MCRRCTransBatchID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerJournalId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerJournalId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>LedgerJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalId</Name>
					<SourceEDT>LedgerJournalId</SourceEDT>
					<Field>LedgerJournalId</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>