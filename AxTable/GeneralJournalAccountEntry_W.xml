<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GeneralJournalAccountEntry_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class GeneralJournalAccountEntry_W extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bondedLine_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>GeneralJournalAccountEntry</c> record bonded to current record.
    /// </summary>
    /// <returns>
    /// The <c>GeneralJournalAccountEntry</c> record bonded to current record.
    /// </returns>
    public GeneralJournalAccountEntry bondedLine_RU()
    {
        GeneralJournalAccountEntry      generalJournalAccountEntry;
        GeneralJournalAccountEntry_W    generalJournalAccountEntryW;

        if (this.hasBond_RU())
        {
            select firstOnly * from generalJournalAccountEntry
            exists join generalJournalAccountEntryW
                where generalJournalAccountEntryW.GeneralJournalAccountEntry    == generalJournalAccountEntry.RecId
                   && generalJournalAccountEntryW.GeneralJournalEntry           == this.GeneralJournalEntry
                   && generalJournalAccountEntryW.BondBatchTrans_RU             == this.BondBatchTrans_RU
                   && GeneralJournalAccountEntryW.GeneralJournalAccountEntry    != this.GeneralJournalAccountEntry;
        }

        return generalJournalAccountEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBond_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a Boolean value that indicates whether the current transaction is bonded.
    /// </summary>
    /// <returns>
    /// true if the current transaction is bonded; otherwise, false.
    /// </returns>
    public boolean hasBond_RU()
    {
        return this.BondBatchTrans_RU != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionCorr_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger dimension of the linked correction.
    /// </summary>
    /// <returns>
    /// The ledger dimension of the linked correction.
    /// </returns>
    public display LedgerDimensionAccountCorr_RU ledgerDimensionCorr_RU()
    {
        return this.bondedLine_RU().LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionCorrDisplay_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger account of the linked correction.
    /// </summary>
    /// <returns>
    /// The ledger account of the linked correction.
    /// </returns>
    public display DimensionDisplayValueCorr_RU ledgerDimensionCorrDisplay_RU()
    {
        return LedgerDimensionFacade::getDisplayValueForLedgerDimension(this.ledgerDimensionCorr_RU());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionMainAccountCorr_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account ID of the linked correction.
    /// </summary>
    /// <returns>
    /// The main account ID of the linked correction.
    /// </returns>
    public display LedgerAccount ledgerDimensionMainAccountCorr_RU()
    {
        return LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(this.ledgerDimensionCorr_RU());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainAccountNameCorr_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account description of the linked correction.
    /// </summary>
    /// <returns>
    /// The main account description of the linked correction.
    /// </returns>
    public display AccountName mainAccountNameCorr_RU()
    {
        return LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.bondedLine_RU().LedgerDimension).localizedName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCorr_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posting type of the linked correction.
    /// </summary>
    /// <returns>
    /// The posting type of the linked correction.
    /// </returns>
    public display LedgerPostingType postingTypeCorr_RU()
    {
        return this.bondedLine_RU().PostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtCorr_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the text of the linked correction.
    /// </summary>
    /// <returns>
    /// The text of the linked correction.
    /// </returns>
    public display TransTxt txtCorr_RU()
    {
        return this.bondedLine_RU().Text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a data source for the <c>GeneralJournalAccountEntry_W</c> table.
    /// </summary>
    /// <param name="_parentDataSource">
    /// The data source for the <c>GeneralJournalAccountEntry</c> table.
    /// </param>
    /// <param name="_joinMode">
    /// The join mode for the new data source; optional.
    /// </param>
    /// <returns>
    /// The data source added for the <c>GeneralJournalAccountEntry_W</c> table.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The parent data source is null or is not for the <c>GeneralJournalAccountEntry</c>
    /// table.
    /// </exception>
    public static QueryBuildDataSource addDataSource(QueryBuildDataSource _parentDataSource, JoinMode _joinMode = JoinMode::InnerJoin)
    {
        QueryBuildDataSource ds;

        if (_parentDataSource == null || _parentDataSource.table() != tableNum(GeneralJournalAccountEntry))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ds = _parentDataSource.addDataSource(tableNum(GeneralJournalAccountEntry_W));
        ds.addLink(fieldNum(GeneralJournalAccountEntry, RecId), fieldNum(GeneralJournalAccountEntry_W, GeneralJournalAccountEntry));
        ds.fetchMode(QueryFetchMode::One2One);
        ds.joinMode(_joinMode);

        return ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataSourceForBondBatchTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds data sources to support the <c>BondBatchTrans_RU</c> field in the
    /// <c>GeneralJournalAccountEntry_W</c> table.
    /// </summary>
    /// <param name="_parentDataSource">
    /// The data source for the <c>GeneralJournalAccountEntry</c> table.
    /// </param>
    /// <param name="_dsNameGeneralJournalAccountEntry_W">
    /// The name for the added <c>GeneralJournalAccountEntry_W</c> data source.
    /// </param>
    /// <param name="_joinMode">
    /// The join mode for the new data sources; optional.
    /// </param>
    /// <returns>
    /// The data source added for the <c>GeneralJournalAccountEntry</c> table.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The parent data source is null or is not for the <c>GeneralJournalAccountEntry</c>
    /// table.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// A data source name is an empty string or the two data source names are the same.
    /// </exception>
    public static QueryBuildDataSource addDataSourceForBondBatchTrans_RU(
        QueryBuildDataSource _parentDataSource,
        str _dsNameGeneralJournalAccountEntry_W,
        JoinMode _joinMode = JoinMode::InnerJoin)
    {
        QueryBuildDataSource dsGJAE;
        QueryBuildDataSource dsW1;
        QueryBuildDataSource dsW2;
        Range rangeValue;

        if (_parentDataSource == null || _parentDataSource.table() != tableNum(GeneralJournalAccountEntry))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (_dsNameGeneralJournalAccountEntry_W == '')
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        dsW1 = _parentDataSource.addDataSource(tableNum(GeneralJournalAccountEntry_W), _dsNameGeneralJournalAccountEntry_W);
        dsW1.addLink(fieldNum(GeneralJournalAccountEntry, RecId), fieldNum(GeneralJournalAccountEntry_W, GeneralJournalAccountEntry));
        dsW1.fetchMode(QueryFetchMode::One2One);
        dsW1.joinMode(_joinMode);

        dsW2 = dsW1.addDataSource(tableNum(GeneralJournalAccountEntry_W));
        dsW2.addLink(fieldNum(GeneralJournalAccountEntry_W, BondBatchTrans_RU), fieldNum(GeneralJournalAccountEntry_W, BondBatchTrans_RU));
        dsW2.fetchMode(QueryFetchMode::One2One);
        dsW2.joinMode(_joinMode);

        dsGJAE = dsW2.addDataSource(tableNum(GeneralJournalAccountEntry));
        dsGJAE.addLink(fieldNum(GeneralJournalAccountEntry_W, GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, RecId));
        dsGJAE.fetchMode(QueryFetchMode::One2One);
        dsGJAE.joinMode(_joinMode);

        rangeValue = strFmt(
            '(\%1.\%2 \%3 \%4.\%5)',
            _parentDataSource.name(),
            fieldId2name(tableNum(GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, IsCredit)),
            '!=',
            dsGJAE.name(),
            fieldId2name(tableNum(GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, IsCredit)));

        dsGJAE.addRange(fieldNum(GeneralJournalAccountEntry, IsCredit)).value(rangeValue);

        rangeValue = strFmt(
            '(\%1.\%2 \%3 \%4.\%5)',
            _parentDataSource.name(),
            fieldId2name(tableNum(GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry)),
            '==',
            dsGJAE.name(),
            fieldId2name(tableNum(GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry)));

        dsGJAE.addRange(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry)).value(rangeValue);

        // this range removes the duplicate records from the query results
        rangeValue = strFmt(
            '(\%1.\%2 \%3 \%4.\%5)',
            _parentDataSource.name(),
            fieldId2name(tableNum(GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, RecId)),
            '!=',
            dsGJAE.name(),
            fieldId2name(tableNum(GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, RecId)));

        dsGJAE.addRange(fieldNum(GeneralJournalAccountEntry, RecId)).value(rangeValue);

        return dsGJAE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForAcctDatePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>GeneralJournalAccountEntry_W</c> records with the specified
    /// accounting date and fiscal calendar period.
    /// </summary>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <param name="_fiscalCalendarPeriodRecId">
    /// The fiscal calendar period.
    /// </param>
    /// <remarks>
    /// The <c>deleteForAcctDatePeriod</c>
    /// method on the <c>GeneralJournalAccountEntry</c> table is for general use
    /// and cascades to related tables.
    /// </remarks>
    public static void deleteForAcctDatePeriod(
        TransDate _accountingDate,
        FiscalCalendarPeriodRecId _fiscalCalendarPeriodRecId)
    {
        GeneralJournalAccountEntry_W generalJournalAccountEntry_W;
        GeneralJournalEntry generalJournalEntry;

        generalJournalAccountEntry_W.skipDeleteActions(true);
        generalJournalAccountEntry_W.skipDataMethods(true);
        generalJournalAccountEntry_W.skipEvents(true);

        delete_from generalJournalAccountEntry_W
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry_W.GeneralJournalEntry
                    && generalJournalEntry.AccountingDate == _accountingDate
                    && generalJournalEntry.FiscalCalendarPeriod == _fiscalCalendarPeriodRecId
                    && generalJournalEntry.Ledger == Ledger::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForAcctDatePeriodExclPostType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>GeneralJournalAccountEntry_W</c> records with the specified
    /// accounting date and fiscal calendar period, excluding records with
    /// specified posting type.
    /// </summary>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <param name="_fiscalCalendarPeriodRecId">
    /// The fiscal calendar period.
    /// </param>
    /// <param name="_postingTypeToExclude">
    /// The posting type to exclude.
    /// </param>
    /// <remarks>
    /// The <c>deleteForAcctDatePeriodExclPostType</c>
    /// method on the <c>GeneralJournalAccountEntry</c> table is for general use
    /// and cascades to related tables.
    /// </remarks>
    public static void deleteForAcctDatePeriodExclPostType(
        TransDate _accountingDate,
        FiscalCalendarPeriodRecId _fiscalCalendarPeriodRecId,
        LedgerPostingType _postingTypeToExclude)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalAccountEntry_W generalJournalAccountEntry_W;
        GeneralJournalEntry generalJournalEntry;

        generalJournalAccountEntry_W.skipDeleteActions(true);
        generalJournalAccountEntry_W.skipDataMethods(true);
        generalJournalAccountEntry_W.skipEvents(true);

        delete_from generalJournalAccountEntry_W
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == generalJournalAccountEntry_W.GeneralJournalAccountEntry
                    && generalJournalAccountEntry.PostingType != _postingTypeToExclude
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.AccountingDate == _accountingDate
                    && generalJournalEntry.FiscalCalendarPeriod == _fiscalCalendarPeriodRecId
                    && generalJournalEntry.Ledger == Ledger::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForAcctDatePeriodPostType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>GeneralJournalAccountEntry_W</c> records that have the
    /// specified accounting date, fiscal calendar period, and posting type.
    /// </summary>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <param name="_fiscalCalendarPeriodRecId">
    /// The fiscal calendar period.
    /// </param>
    /// <param name="_postingType">
    /// The posting type.
    /// </param>
    /// <remarks>
    /// The <c>deleteForAcctDatePeriodPostType</c>
    /// method on the <c>GeneralJournalAccountEntry</c> table is for general use
    /// and cascades to related tables.
    /// </remarks>
    public static void deleteForAcctDatePeriodPostType(
        TransDate _accountingDate,
        FiscalCalendarPeriodRecId _fiscalCalendarPeriodRecId,
        LedgerPostingType _postingType)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalAccountEntry_W generalJournalAccountEntry_W;
        GeneralJournalEntry generalJournalEntry;

        generalJournalAccountEntry_W.skipDeleteActions(true);
        generalJournalAccountEntry_W.skipDataMethods(true);
        generalJournalAccountEntry_W.skipEvents(true);

        delete_from generalJournalAccountEntry_W
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == generalJournalAccountEntry_W.GeneralJournalAccountEntry
                    && generalJournalAccountEntry.PostingType == _postingType
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.AccountingDate == _accountingDate
                    && generalJournalEntry.FiscalCalendarPeriod == _fiscalCalendarPeriodRecId
                    && generalJournalEntry.Ledger == Ledger::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForFundAcctDatePeriodPostType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>GeneralJournalAccountEntry_W</c> records with the specified
    /// accounting date, range of funds and fiscal calendar period, excluding
    /// records with specified posting type.
    /// </summary>
    /// <param name="_fromFund">
    /// The start fund number.
    /// </param>
    /// <param name="_toFund">
    /// The end fund number.
    /// </param>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <param name="_fiscalCalendarPeriodRecId">
    /// The fiscal calendar period.
    /// </param>
    /// <param name="_postingType">
    /// The posting type.
    /// </param>
    /// <remarks>
    /// The <c>deleteForFundAcctDatePeriodPostType</c>
    /// method on the <c>GeneralJournalAccountEntry</c> table is for general use
    /// and cascades to related tables.
    /// </remarks>
    public static void deleteForFundAcctDatePeriodPostType(
        FundNumber                  _fromFund,
        FundNumber                  _toFund,
        TransDate                   _accountingDate,
        FiscalCalendarPeriodRecId   _fiscalCalendarPeriodRecId,
        LedgerPostingType           _postingType)
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalAccountEntry_W        generalJournalAccountEntry_W;
        GeneralJournalEntry                 generalJournalEntry;
        DimensionAttributeLevelValueAllView dimensionAttributeLevelValueAllView;
        DimensionAttribute                  dimensionAttribute;
    
        generalJournalAccountEntry_W.skipDeleteActions(true);
        generalJournalAccountEntry_W.skipDataMethods(true);
        generalJournalAccountEntry_W.skipEvents(true);
    
        delete_from generalJournalAccountEntry_W
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == generalJournalAccountEntry_W.GeneralJournalAccountEntry
                    && generalJournalAccountEntry.PostingType == _postingType
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.AccountingDate == _accountingDate
                    && generalJournalEntry.FiscalCalendarPeriod == _fiscalCalendarPeriodRecId
                    && generalJournalEntry.Ledger == Ledger::current()
            exists join dimensionAttributeLevelValueAllView
                where dimensionAttributeLevelValueAllView.ValueCombinationRecID == generalJournalAccountEntry.LedgerDimension
                    && dimensionAttributeLevelValueAllView.DisplayValue >= _fromFund
                    && dimensionAttributeLevelValueAllView.DisplayValue <= _toFund
            exists join dimensionAttribute
                where dimensionAttribute.RecId == dimensionAttributeLevelValueAllView.DimensionAttribute
                    && dimensionAttribute.BackingEntityType == tablenum(DimAttributeLedgerFund_PSN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForPostType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>GeneralJournalAccountEntry_W</c> records with either of the
    /// specified posting types.
    /// </summary>
    /// <param name="_firstPostingType">
    /// The first posting type.
    /// </param>
    /// <param name="_secondPostingType">
    /// The second posting type.
    /// </param>
    /// <remarks>
    /// The <c>deleteForPostType</c>
    /// method on the <c>GeneralJournalAccountEntry</c> table is for general use
    /// and cascades to related tables.
    /// </remarks>
    public static void deleteForPostType(LedgerPostingType _firstPostingType, LedgerPostingType _secondPostingType)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalAccountEntry_W generalJournalAccountEntry_W;
        GeneralJournalEntry generalJournalEntry;

        generalJournalAccountEntry_W.skipDeleteActions(true);
        generalJournalAccountEntry_W.skipDataMethods(true);
        generalJournalAccountEntry_W.skipEvents(true);

        delete_from generalJournalAccountEntry_W
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == generalJournalAccountEntry_W.GeneralJournalAccountEntry
                    && (generalJournalAccountEntry.PostingType == _firstPostingType
                    || generalJournalAccountEntry.PostingType == _secondPostingType)
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForTransferId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>GeneralJournalAccountEntry_W</c> records for the specified transfer ID.
    /// </summary>
    /// <param name="_transferId">
    /// The transfer ID.
    /// </param>
    /// <remarks>
    /// The <c>deleteForTransferId</c>
    /// method on the <c>GeneralJournalAccountEntry</c> table is for general use
    /// and cascades to related tables.
    /// </remarks>
    public static void deleteForTransferId(SubledgerJournalTransferId _transferId)
    {
        GeneralJournalAccountEntry_W generalJournalAccountEntryW;
        GeneralJournalEntry generalJournalEntry;

        generalJournalAccountEntryW.skipDeleteActions(true);
        generalJournalAccountEntryW.skipDataMethods(true);
        generalJournalAccountEntryW.skipEvents(true);

        delete_from generalJournalAccountEntryW
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntryW.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
                    && generalJournalEntry.TransferId == _transferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFundAcctDatePeriodExclPostType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>GeneralJournalAccountEntry_W</c> records with the specified
    /// accounting date, range of funds and fiscal calendar period, excluding
    /// records with specified posting type.
    /// </summary>
    /// <param name="_fromFund">
    /// The start fund number.
    /// </param>
    /// <param name="_toFund">
    /// The end fund number.
    /// </param>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <param name="_fiscalCalendarPeriodRecId">
    /// The fiscal calendar period.
    /// </param>
    /// <param name="_postingTypeToExclude">
    /// The posting type to exclude.
    /// </param>
    /// <remarks>
    /// The <c>deleteFundAcctDatePeriodExclPostType</c>
    /// method on the <c>GeneralJournalAccountEntry</c> table is for general use
    /// and cascades to related tables.
    /// </remarks>
    public static void deleteFundAcctDatePeriodExclPostType(
        FundNumber                  _fromFund,
        FundNumber                  _toFund,
        TransDate                   _accountingDate,
        FiscalCalendarPeriodRecId   _fiscalCalendarPeriodRecId,
        LedgerPostingType           _postingTypeToExclude)
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalAccountEntry_W        generalJournalAccountEntry_W;
        GeneralJournalEntry                 generalJournalEntry;
        DimensionAttributeLevelValueAllView dimensionAttributeLevelValueAllView;
        DimensionAttribute                  dimensionAttribute;
    
        generalJournalAccountEntry_W.skipDeleteActions(true);
        generalJournalAccountEntry_W.skipDataMethods(true);
        generalJournalAccountEntry_W.skipEvents(true);
    
        delete_from generalJournalAccountEntry_W
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == generalJournalAccountEntry_W.GeneralJournalAccountEntry
                    && generalJournalAccountEntry.PostingType != _postingTypeToExclude
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.AccountingDate == _accountingDate
                    && generalJournalEntry.FiscalCalendarPeriod == _fiscalCalendarPeriodRecId
                    && generalJournalEntry.Ledger == Ledger::current()
            exists join dimensionAttributeLevelValueAllView
                where dimensionAttributeLevelValueAllView.ValueCombinationRecID == generalJournalAccountEntry.LedgerDimension
                    && dimensionAttributeLevelValueAllView.DisplayValue >= _fromFund
                    && dimensionAttributeLevelValueAllView.DisplayValue <= _toFund
            exists join dimensionAttribute
                where dimensionAttribute.RecId == dimensionAttributeLevelValueAllView.DimensionAttribute
                    && dimensionAttribute.BackingEntityType == tablenum(DimAttributeLedgerFund_PSN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>entryHasBondedTransactions_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets a Boolean value that indicates whether the general journal entry has bonded transactions.
    /// </summary>
    /// <param name="_entry">
    /// A <c>GeneralJournalEntry</c> table record ID.
    /// </param>
    /// <returns>
    /// true if the general journal entry has bonded transactions; otherwise, false.
    /// </returns>
    public static boolean entryHasBondedTransactions_RU(GeneralJournalEntryRecId _entry)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalAccountEntry_W generalJournalAccountEntry_W;

        select firstonly RecId from generalJournalAccountEntry
            where generalJournalAccountEntry.GeneralJournalEntry == _entry
        exists join generalJournalAccountEntry_W
            where generalJournalAccountEntry_W.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                && generalJournalAccountEntry_W.BondBatchTrans_RU != 0;

        return generalJournalAccountEntry != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>entryIsBondedCompletely_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether the general journal entry is bonded completely.
    /// </summary>
    /// <param name="_entry">
    /// A <c>GeneralJournalEntry</c> table record ID.
    /// </param>
    /// <returns>
    /// true if the general journal entry is bonded completely; otherwise, false.
    /// </returns>
    public static boolean entryIsBondedCompletely_RU(GeneralJournalEntryRecId _entry)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalAccountEntry_W generalJournalAccountEntry_W;

        select firstonly RecId from generalJournalAccountEntry
            where generalJournalAccountEntry.GeneralJournalEntry == _entry
        exists join generalJournalAccountEntry_W
            where generalJournalAccountEntry_W.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                && generalJournalAccountEntry_W.BondBatchTrans_RU == 0;

        return generalJournalAccountEntry == null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the GeneralJournalAccountEntry_W table.
    /// </summary>
    /// <param name="_generalJournalAccountEntryRecId">
    /// The record ID of the GeneralJournalAccountEntry record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the GeneralJournalAccountEntry_W table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// This utility method should not be used for updates.
    /// </remarks>
    public static GeneralJournalAccountEntry_W findByGeneralJournalAccountEntry(RecId _generalJournalAccountEntryRecId, boolean _forUpdate = false)
    {
        GeneralJournalAccountEntry_W generalJournalAccountEntryW;

        generalJournalAccountEntryW.selectForUpdate(_forUpdate);

        if (_generalJournalAccountEntryRecId != 0)
        {
            select firstonly * from generalJournalAccountEntryW
                where generalJournalAccountEntryW.GeneralJournalAccountEntry == _generalJournalAccountEntryRecId;
        }

        return generalJournalAccountEntryW;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLegalEntityInCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a Boolean value that indicates whether a country suported by the
    /// <c>GeneralJournalAccountEntry_W</c> table is currently in scope.
    /// </summary>
    /// <returns>
    /// A Boolean value that indicates whether a country suported by the
    /// <c>GeneralJournalAccountEntry_W</c> table is currently in scope.
    /// </returns>
    public static boolean isLegalEntityInCountryRegion()
    {
        #IsoCountryRegionCodes

        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR, #isoRU, #isoMX]);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>BR,RU,MX</CountryRegionCodes>
	<DeveloperDocumentation>@GLS223635</DeveloperDocumentation>
	<Label>@GLS223634</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>GeneralJournalAccountEntry</TitleField1>
	<TitleField2>BondBatchTrans_RU</TitleField2>
	<AllowArchival>Yes</AllowArchival>
	<AllowRetention>Yes</AllowRetention>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>GeneralJournalAccountEntryIdx</ClusteredIndex>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>Ledger</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BondBatchTrans_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsolidatedRefRecId_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsolidatedVoucher_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GeneralJournalAccountEntry</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Consolidation_BR</Name>
			<Label>@SYS106495</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConsolidatedRefRecId_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsolidatedVoucher_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Correspondence_RU</Name>
			<Label>@GLS100945</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BondBatchTrans_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GeneralJournalEntry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GeneralJournalAccountEntry</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BondBatchTrans_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerBondBatchTransNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ConsolidatedRefRecId_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS220724</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConsolidatedVoucher_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Label>@GLS220723</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>GeneralJournalAccountEntry</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>GeneralJournalAccountEntryRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>GeneralJournalEntry</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>GeneralJournalEntryRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAccountingClosing_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GeneralJournalAccountEntryIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>GeneralJournalAccountEntry</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>GeneralJournalEntryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>GeneralJournalEntry</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BondBatchTrans_RU</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GeneralJournalAccountEntry</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ConsolidatedRefRecIdBRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ConsolidatedRefRecId_BR</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ConsolidatedGenJrnAcctEnt</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>GeneralJournalAccountEntry</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Consolidated</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConsolidatedRefRecId_BR</Name>
					<Field>ConsolidatedRefRecId_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>GeneralJournalAccountEntry</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>GeneralJournalAccountEntry</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GeneralJournalAccountEntry</Name>
					<Field>GeneralJournalAccountEntry</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>GeneralJournalEntry</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>GeneralJournalEntry</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GeneralJournalEntry</Name>
					<Field>GeneralJournalEntry</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>