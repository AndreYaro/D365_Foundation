<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkException</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkException extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldNum(WHSWorkException, DefaultAdjustmentTypeCode),
                [fieldNum(WHSWorkException, ExceptionType),
                fieldNum(WHSWorkException, AdjustInventory)]
            ],
            [fieldNum(WHSWorkException, AdjustInventory),
                [fieldNum(WHSWorkException, ExceptionType)]
            ],
            [fieldNum(WHSWorkException, AutoCreateCycleCount),
                [fieldNum(WHSWorkException, ExceptionType)]
            ],
            [fieldNum(WHSWorkException, ItemReallocation),
                [fieldNum(WHSWorkException, ExceptionType)]
            ],
            [fieldNum(WHSWorkException, WaveLabelReprint),
                [fieldNum(WHSWorkException, ExceptionType)]
            ]
            ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch(_fieldId)
        {            
            case fieldNum(WHSWorkException, AdjustInventory):
                if (this.isFieldSet(fieldNum(WHSWorkException, ExceptionType)))
                {
                    if (this.ExceptionType != WHSExceptionType::ShortPick)
                    {
                        this.AdjustInventory = false;
                    }
                }
                break;
            case fieldNum(WHSWorkException, DefaultAdjustmentTypeCode):
                if (this.isFieldSet(fieldNum(WHSWorkException, ExceptionType))
                    || this.isFieldSet(fieldNum(WHSWorkException, AdjustInventory)))
                {
                    if (this.ExceptionType != WHSExceptionType::ShortPick 
                        || !this.AdjustInventory)
                    {
                        this.DefaultAdjustmentTypeCode = '';
                    }
                }
                break;
            case fieldNum(WHSWorkException, AutoCreateCycleCount):
                if (this.isFieldSet(fieldNum(WHSWorkException, ExceptionType)))
                {
                    if (this.ExceptionType != WHSExceptionType::Work   &&
                        this.ExceptionType != WHSExceptionType::ShortPick)
                    {
                        this.AutoCreateCycleCount = false;
                    }
                }
                break;
            case fieldNum(WHSWorkException, ItemReallocation):
                if (this.isFieldSet(fieldNum(WHSWorkException, ExceptionType)))
                {
                    if (this.ExceptionType != WHSExceptionType::ShortPick)
                    {
                        this.ItemReallocation = WHSItemReallocation::None;
                    }
                }
                break;
            case fieldNum(WHSWorkException, WaveLabelReprint):
                if (this.isFieldSet(fieldNum(WHSWorkException, ExceptionType)))
                {
                    if (this.ExceptionType != WHSExceptionType::ShortPick)
                    {
                        this.WaveLabelReprint = false;
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.AdjustInventory && !this.DefaultAdjustmentTypeCode)
            {
                ret = checkFailed(strFmt("@SYS50104", fieldPName(WHSWorkException, DefaultAdjustmentTypeCode)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if a specific <c>WHSWorkException</c> record exists.
	/// </summary>
	/// <param name="_exceptionCode">
	/// Exception code of the record.
	/// </param>
	/// <param name="_exceptionType">
	/// Exception type of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(WHSWorkExceptionCode _exceptionCode, WHSExceptionType _exceptionType)
    {
        return _exceptionCode && (select firstOnly RecId from WHSWorkException
                 where WHSWorkException.WorkExceptionCode == _exceptionCode &&
                       WHSWorkException.ExceptionType     == _exceptionType).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSWorkException</c> record with given parameters.
	/// </summary>
	/// <param name="_exceptionCode">
	/// Exception code of the record.
	/// </param>
	/// <param name="_exceptionType">
	/// Exception type of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSWorkException find(WHSWorkExceptionCode    _exceptionCode,
                                        WHSExceptionType        _exceptionType,
                                        boolean                 _forupdate = false)
    {
        WHSWorkException    workException;

        if (_exceptionCode)
        {
            workException.selectForUpdate(_forupdate);

            select firstonly workException
                where workException.WorkExceptionCode == _exceptionCode &&
                      workException.ExceptionType     == _exceptionType;
        }

        return workException;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDescriptionAndType</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSWorkException</c> record by description and exception type.
	/// </summary>
	/// <param name="_exceptionDesc">
	/// Exception description of the record.
	/// </param>
	/// <param name="_exceptionType">
	/// Exception type of the record.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSWorkException findByDescriptionAndType(WHSWorkExceptionDesc _exceptionDesc, WHSExceptionType _exceptionType)
    {
        WHSWorkException    workException;

        if (_exceptionDesc)
        {
            select firstonly workException
                where workException.WorkExceptionDesc == _exceptionDesc &&
                      workException.ExceptionType     == _exceptionType;
        }

        return workException;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupExceptionCodesByType</Name>
				<Source><![CDATA[
	/// <summary>
	/// Performs form lookup on <c>WHSWorkException</c> by exception type.
	/// </summary>
	/// <param name="_ctrl">
	/// Form control that lookup belongs to.
	/// </param>
	/// <param name="_exceptionType">
	/// Exception type to be defined in query range.
	/// </param>
    public static void lookupExceptionCodesByType(FormStringControl _ctrl, WHSExceptionType _exceptionType)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        sysTableLookup          = SysTableLookup::newParameters(tablenum(WHSWorkException), _ctrl);
        query                   = new Query();
        queryBuildDataSource    = query.addDataSource(tablenum(WHsWorkException));

        sysTableLookup.addLookupfield(fieldnum(WHSWorkException, WorkExceptionCode));
        sysTableLookup.addLookupfield(fieldnum(WHSWorkException, WorkExceptionDesc));
        queryBuildDataSource.addRange(fieldnum(WHSWorkException, ExceptionType)).value(SysQuery::value(_exceptionType));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAutomaticallyReallocateItem</Name>
				<Source><![CDATA[
    private boolean validateAutomaticallyReallocateItem()
    {
        boolean ret = true;

        if (this.ItemReallocation != WHSItemReallocation::None && this.ExceptionType != WHSExceptionType::ShortPick)
        {
            ret = checkFailed("@WAX:ReallocateItemOnlyWithShortPick");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(WHSWorkException, ItemReallocation):
                    ret = this.validateAutomaticallyReallocateItem();
                    break;

                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineItemReallocationForWorkUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the item reallocation process that has been specified on the current work exception record
    /// for which the work user has the rights to use.
    /// </summary>
    /// <param name = "_workUser">The current work user</param>
    /// <returns>The item reallocation process to be used from the current work user</returns>
    public WHSItemReallocation determineItemReallocationForWorkUser(WHSWorkUser _workUser)
    {
        switch (this.ItemReallocation)
        {
            case WHSItemReallocation::None:
                return WHSItemReallocation::None;
            case WHSItemReallocation::Automatic:
                return WHSItemReallocation::Automatic;
            case WHSItemReallocation::Manual:
                if (_workUser.AllowManualItemReallocation)
                {
                    return WHSItemReallocation::Manual;
                }
                return WHSItemReallocation::None;
            case WHSItemReallocation::AutomaticAndManual:
                if (_workUser.AllowManualItemReallocation)
                {
                    return WHSItemReallocation::AutomaticAndManual;
                }
                return WHSItemReallocation::None;
            default:
                return WHSItemReallocation::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSupportedItemReallocationForWorkOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the item reallocation process that has been specified on the current work exception record
    /// which is supported by the specified work order type.
    /// </summary>
    /// <param name = "_workOrderType">The work order type</param>
    /// <returns>The item reallocation process supported for the specified work order type</returns>
    public WHSItemReallocation determineSupportedItemReallocationForWorkOrderType(WHSWorkTransType _workOrderType)
    {
        switch (this.ItemReallocation)
        {
            case WHSItemReallocation::None:
                return WHSItemReallocation::None;
            case WHSItemReallocation::Automatic:
                if (WHSWorkLineReallocationValidator::canCreateReallocatorForWorkOrderType(_workOrderType))
                {
                    return WHSItemReallocation::Automatic;
                }
                return WHSItemReallocation::None;
            case WHSItemReallocation::Manual:
                if (WHSWorkLineManualReallocationValidator::canCreateReallocatorForWorkOrderType(_workOrderType))
                {
                    return WHSItemReallocation::Manual;
                }
                return WHSItemReallocation::None;
            case WHSItemReallocation::AutomaticAndManual:
                if (WHSWorkLineManualReallocationValidator::canCreateReallocatorForWorkOrderType(_workOrderType))
                {
                    return WHSItemReallocation::AutomaticAndManual;
                }
                return WHSItemReallocation::None;
            default:
                return WHSItemReallocation::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4490</DeveloperDocumentation>
	<Label>@WAX639</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>WorkExceptionCode</TitleField1>
	<TitleField2>WorkExceptionDesc</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>WorkExceptionCodeIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>WorkExceptionCodeIdx</PrimaryIndex>
	<ReplacementKey>WorkExceptionCodeIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkExceptionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkExceptionDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoCreateCycleCount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustInventory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExceptionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultAdjustmentTypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoDecrementShipment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemReallocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkExceptionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExceptionType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkExceptionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkExceptionDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoCreateCycleCount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustInventory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExceptionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultAdjustmentTypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoDecrementShipment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AdjustInventory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAdjustInventory</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoCreateCycleCount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAutoCreateCycleCount</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoDecrementShipment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAutoDecrementShipment</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemReallocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSItemReallocation</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultAdjustmentTypeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDefaultAdjustmentTypeCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExceptionType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSExceptionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkExceptionCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkExceptionCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkExceptionDesc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkExceptionDesc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WaveLabelReprint</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWaveLabelReprint</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkExceptionCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkExceptionCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ExceptionType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSAdjustmentType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSAdjustmentType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultAdjustmentTypeCode</Name>
					<SourceEDT>WHSDefaultAdjustmentTypeCode</SourceEDT>
					<Field>DefaultAdjustmentTypeCode</Field>
					<RelatedField>AdjustmentTypeCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>