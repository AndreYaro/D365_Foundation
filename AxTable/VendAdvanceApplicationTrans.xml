<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendAdvanceApplicationTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendAdvanceApplicationTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteApplicationTransForPostedOrReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes application transaction records which are unmarked from the <c>VendAdvanceApplication</c>
    /// and <c>VendApplicationReversal</c> forms.
    /// </summary>
    /// <param name = "_params">The object containing the query parameters</param>
    public static void deleteApplicationTransForPostedOrReversal(VendAdvanceApplicationTransQueryParameters _params)
    {
        VendAdvanceApplicationTransQueryBuilder qBuilder = VendAdvanceApplicationTransQueryBuilder::newFromVendAdvanceParams(_params);
        
        Query::delete_from(qBuilder.buildQuery(false, false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    [SysObsolete('Use the existForPostedOrReversal instead', true, 30\6\2020)]
    public static boolean exist(RecId advanceInvoiceId, RecId invoiceId)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForPostedOrReversal</Name>
				<Source><![CDATA[
   /// <summary>
   /// Checks that a <c>VendAdvanceApplicationTrans</c> exists for the advanced invoice and invoice.
   /// </summary>
   /// <param name = "_params">The object containing the query parameters.</param>
   /// <returns>true if the record exists; otherwise, false.</returns>
    public static boolean existForPostedOrReversal(VendAdvanceApplicationTransQueryParameters _params)
    {
        VendAdvanceApplicationTransQueryBuilder qBuilder = VendAdvanceApplicationTransQueryBuilder::newFromVendAdvanceParams(_params);

        QueryRun qr = new QueryRun(qBuilder.buildQuery());
        qr.next();

        boolean doesExist = qr.get(tableNum(VendAdvanceApplicationTrans)).RecId != 0;
  
        return doesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>VendAdvanceApplicationTrans</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>VendAdvanceApplicationTrans</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <returns>
    /// A record in the <c>VendAdvanceApplicationTrans</c> table; otherwise, an empty record.
    /// </returns>
    static VendAdvanceApplicationTrans find(recId _recId, boolean _forUpdate = false)
    {
        VendAdvanceApplicationTrans vendAdvanceApplicationTrans;

        vendAdvanceApplicationTrans.selectForUpdate(_forUpdate);

        select vendAdvanceApplicationTrans
            where vendAdvanceApplicationTrans.RecId == _recId;

        return vendAdvanceApplicationTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAdvanceApplicationLineId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>VendAdvanceApplicationTrans</c> table.
    /// </summary>
    /// <param name="_appliedAdvanceLineId">
    /// The applied advance line ID of the <c>VendAdvanceApplicationTrans</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>VendAdvanceApplicationTrans</c> table; otherwise, an empty record.
    /// </returns>
    static VendAdvanceApplicationTrans findAdvanceApplicationLineId(RecId _appliedAdvanceLineId, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendAdvanceApplicationTrans vendAdvanceApplicationTrans;

        if (_appliedAdvanceLineId)
        {
            if (_forUpdate)
            {
                vendAdvanceApplicationTrans.selectForUpdate(_forUpdate);
                vendAdvanceApplicationTrans.selectLocked(_forUpdate);

                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    vendAdvanceApplicationTrans.concurrencyModel(_concurrencyModel);
                }
            }

            select firstonly vendAdvanceApplicationTrans
                where vendAdvanceApplicationTrans.AdvanceApplicationId == _appliedAdvanceLineId;
        }

        return vendAdvanceApplicationTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>VendAdvanceApplicationTrans</c> table.
    /// </summary>
    /// <param name="_appliedAdvanceInvoiceID">
    /// The applied advance invoice ID of the <c>VendAdvanceApplicationTrans</c> record to find.
    /// </param>
    /// <param name="_standardInvoiceID">
    /// The standard advance invoice ID of the <c>VendAdvanceApplicationTrans</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>VendAdvanceApplicationTrans</c> table; otherwise, an empty record.
    /// </returns>
    [SysObsolete('Use the findInvoiceIdByPostedOrReversal instead', false, 30\6\2020)]
    static VendAdvanceApplicationTrans findInvoiceId(RecId _appliedAdvanceInvoiceID, RecId _standardInvoiceID, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendAdvanceApplicationTrans vendAdvanceApplicationTrans;

        if (_appliedAdvanceInvoiceID && _standardInvoiceID)
        {
            if (_forUpdate)
            {
                vendAdvanceApplicationTrans.selectForUpdate(_forUpdate);
                vendAdvanceApplicationTrans.selectLocked(_forUpdate);

                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    vendAdvanceApplicationTrans.concurrencyModel(_concurrencyModel);
                }
            }

            select firstonly forupdate vendAdvanceApplicationTrans
                where vendAdvanceApplicationTrans.AdvanceInvoiceId == _appliedAdvanceInvoiceID
                && vendAdvanceApplicationTrans.InvoiceId == _standardInvoiceID;
        }

        return vendAdvanceApplicationTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceIdByPostedOrReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>VendAdvanceApplicationTrans</c> table.
    /// </summary>
    /// <param name = "_params">The query parameters.</param>
    /// <param name = "_forUpdate">If the record is to be selected for updates.</param>
    /// <param name = "_concurrencyModel">The concurency model used to select the record.</param>
    /// <returns>A <c>VendAvancedApplicationTrans</c> record; otherwise, empty buffer.</returns>
    public static VendAdvanceApplicationTrans findInvoiceIdByPostedOrReversal(VendAdvanceApplicationTransQueryParameters _params,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendAdvanceApplicationTransQueryBuilder qBuilder = VendAdvanceApplicationTransQueryBuilder::newFromVendAdvanceParams(_params);

        QueryRun qr = new QueryRun(qBuilder.buildQuery(_forUpdate, true, _concurrencyModel));
        qr.next();

        VendAdvanceApplicationTrans vendAdvanceApplicationTrans = qr.get(tableNum(VendAdvanceApplicationTrans));

        // This is for legacy support.
        VendAdvanceApplicationTrans vendAdvanceApplicationTransLegacy = VendAdvanceApplicationTrans::findInvoiceId(_params.advancedInvoiceRecId, _params.standardInvoiceRecId, _forUpdate, _concurrencyModel);

        return vendAdvanceApplicationTrans ? vendAdvanceApplicationTrans : vendAdvanceApplicationTransLegacy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS19286";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAdvanceAppliedAmount</Name>
				<Source><![CDATA[
    [SysObsolete('Use updateAdvanceAppliedAmountForPostedOrReversal instead', false, 30\6\2020)]
    public static void updateAdvanceAppliedAmount(RecId _appliedAdvanceInvoice, RecId _standardInvoice, AmountCur _appliedAmount)
    {
        VendAdvanceApplicationTrans vendAdvanceApplicationTrans;

        select firstonly forupdate vendAdvanceApplicationTrans
            where vendAdvanceApplicationTrans.AdvanceInvoiceId == _appliedAdvanceInvoice
                && vendAdvanceApplicationTrans.InvoiceId == _standardInvoice;

        if (vendAdvanceApplicationTrans)
        {
            vendAdvanceApplicationTrans.AppliedAmount = _appliedAmount;
            vendAdvanceApplicationTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAdvanceAppliedAmountForPostedOrReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the applied amount.
    /// </summary>
    /// <param name = "_params">The param used </param>
    public static void updateAdvanceAppliedAmountForPostedOrReversal(AmountCur _appliedAmount, VendAdvanceApplicationTransQueryParameters _params)
    {
        VendAdvanceApplicationTransQueryBuilder qBuilder = VendAdvanceApplicationTransQueryBuilder::newFromVendAdvanceParams(_params);

        QueryRun qr = new QueryRun(qBuilder.buildQuery(true));
        qr.next();

        VendAdvanceApplicationTrans vendAdvanceApplicationTrans = qr.get(tableNum(VendAdvanceApplicationTrans));

        if (vendAdvanceApplicationTrans)
        {
            vendAdvanceApplicationTrans.AppliedAmount = _appliedAmount;
            vendAdvanceApplicationTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAdvanceAppliedAmount</Name>
				<Source><![CDATA[
    [SysObsolete('Use totalAdvanceAppliedAmountForInvoice instead', true, 30\6\2020)]
    public static AmountCur totalAdvanceAppliedAmount(RecId _appliedInvoice)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAdvanceAppliedAmountForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of the amount applied to an invoice.
    /// </summary>
    /// <param name = "_appliedInvoice">The invoice on which the amount is applied.</param>
    /// <param name = "_isPosted">Is the invoice posted.</param>
    /// <returns>The amount applied to the invoice.</returns>
    public static AmountCur totalAdvanceAppliedAmountForInvoice(RecId _appliedInvoice, boolean _isPosted)
    { 
        AmountCur appliedAmount = 0;
        if (_appliedInvoice)
        {
            VendAdvanceApplicationTransQueryBuilder qb = VendAdvanceApplicationTransQueryBuilder::construct();
            qb.parmInvoiceRecId(_appliedInvoice);
            qb.parmIsPosted(_isPosted);

            Query q = qb.buildQuery(false, false);

            QueryBuildDataSource qbds = q.dataSourceTable(tableNum(VendAdvanceApplicationTrans));
            qbds.fields().clearFieldList();
            qbds.addSelectionField(fieldNum(VendAdvanceApplicationTrans, AppliedAmount), SelectionField::Sum);

            QueryRun qr = new QueryRun(q);
            qr.next();

            VendAdvanceApplicationTrans applicationTrans = qr.get(tableNum(VendAdvanceApplicationTrans));

            appliedAmount = applicationTrans.AppliedAmount;
        }

        return appliedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvancedInvoiceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID for the advance invoice.
    /// </summary>
    /// <param name = "_isReversal">flag to determine if the process is reversing the application transaction.</param>
    /// <returns>The record id of the advanced invoice.</returns>
    internal RecId getAdvancedInvoiceRecId(boolean _isReversal)
    {
        RecId advancedInvoiceRecId = _isReversal ? this.AdvancedInvoiceLineRecId :  this.AdvancedInvoiceHeaderRecId;


        return advancedInvoiceRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS338892</DeveloperDocumentation>
	<Label>@SYS315389</Label>
	<TitleField1>InvoiceId</TitleField1>
	<TitleField2>AdvanceInvoiceId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>AccountsPayable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AppliedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdvanceInvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AdvanceApplication</Name>
			<Label>@SYS315389</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AdvanceInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdvanceApplicationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ApplicationAmount</Name>
			<Label>@SYS6928</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AppliedAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AdvanceApplicationId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AdvanceInvoiceId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AppliedAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InvoiceId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SettlementPostingDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS114020</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PostedInvoiceRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendInvoiceJourRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UnpostedInvoiceRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendInvoiceInfoTableRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AdvancedInvoiceHeaderRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendInvoiceJourRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AdvancedInvoiceLineRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendInvoiceTransRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>SessionId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysGuid</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendInvoiceInfoLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AdvanceApplicationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendInvoiceJourIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AdvanceInvoiceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UnpostedApplication</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>UnpostedInvoiceRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AdvancedInvoiceHeaderRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PostedApplication</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PostedInvoiceRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AdvancedInvoiceHeaderRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReverseApplication</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PostedInvoiceRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AdvancedInvoiceLineRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AdvanceInvoiceId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AdvanceInvoiceId_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendAdvanceApplicationTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdvanceInvoiceId</Name>
					<SourceEDT>RefRecId</SourceEDT>
					<Field>AdvanceInvoiceId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ApplicationId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>VendInvoiceInfoLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdvanceApplicationId</Name>
					<Field>AdvanceApplicationId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TableRefIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InvoiceId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InvoiceId_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendAdvanceApplicationTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceId</Name>
					<Field>InvoiceId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PostedInvoiceRecId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostedInvoiceRecId</Name>
					<Field>PostedInvoiceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnpostedInvoiceRecId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceInfoTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnpostedInvoiceRecId</Name>
					<Field>UnpostedInvoiceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AdvancedInvoiceHeaderRecId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdvancedInvoiceHeaderRecId</Name>
					<Field>AdvancedInvoiceHeaderRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AdvancedInvoiceLineRecId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdvancedInvoiceLineRecId</Name>
					<Field>AdvancedInvoiceLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>