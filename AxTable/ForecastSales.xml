<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ForecastSales</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ForecastSales extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountClearingLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountClearingLedgerDimension()
    {
        // <GEERU>
        #isoCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && this.postingProfile_RU())
        {
            return CustLedgerAccounts::clearingLedgerDimension(this.invoiceAccount(), this.postingProfile_RU());
        }
        // </GEERU>
        return CustLedgerAccounts::clearingLedgerDimension(this.invoiceAccount(),
                                                           CustParameters::find().PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ForecastSales</c> record based on the given <c>RecId</c>.
    /// </summary>
    /// <param name = "_recId">A <c>RecId</c> value.</param>
    /// <param name = "_forUpdate">A <c>boolean</c> value specifying whether the record should be selected for update.</param>
    /// <returns>A <c>ForecastSales</c> record.</returns>
    static ForecastSales findRecId(
        RecId           _recId,
        boolean         _forUpdate = false)
    {
        ForecastSales    forecastSales;

        if (_recId)
        {
            forecastSales.selectForUpdate(_forUpdate);

            select forecastSales
                where forecastSales.RecId == _recId;
        }

        return forecastSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForecastEntryNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ForecastSales</c> record based on the given <c>ForecastEntryNumber</c>.
    /// </summary>
    /// <param name = "_forecastEntryNumber">A <c>ForecastEntryNumber</c> value.</param>
    /// <param name = "_forUpdate">A <c>boolean</c> value specifying whether the record should be selected for update.</param>
    /// <returns>A <c>ForecastSales</c> record.</returns>
    public static ForecastSales findForecastEntryNumber(
        ForecastDemandForecastNumSeq    _forecastEntryNumber,
        boolean                         _forUpdate = false)
    {
        ForecastSales    forecastSales;

        if (_forecastEntryNumber)
        {
            forecastSales.selectForUpdate(_forUpdate);

            select firstonly forecastSales
                where forecastSales.ForecastEntryNumber == _forecastEntryNumber;
        }

        return forecastSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountItemLedgerDimensionParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>InventPostingAccountItemLedgerDimensionParameters</c> instance which is used for retrieving the ledger dimension.
    /// </summary>
    /// <returns>An <c>InventPostingAccountItemLedgerDimensionParameters</c> instance.</returns>
    protected InventPostingAccountItemLedgerDimensionParameters accountItemLedgerDimensionParameters(InventAccountType _inventAccountType)
    {
        InventPostingAccountItemLedgerDimensionParameters parameters = InventPostingAccountItemLedgerDimensionParameters::construct();

        parameters.AccountType = _inventAccountType;
        parameters.ItemId = this.ItemId;
        parameters.ItemGroup = this.ItemGroupId;
        parameters.ItemCategory = 0; // If a category relation is added to the table it can be supplied here
        parameters.AccountNum = this.CustAccountId;
        parameters.AccountGroup = this.CustGroupId;
        parameters.TaxGroup = this.TaxGroupId;

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountFromInventAccountType</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount accountFromInventAccountType(InventAccountType _inventAccountType)
    {
        InventPostingAccountItemLedgerDimensionParameters parameters = this.accountItemLedgerDimensionParameters(_inventAccountType);
 
        // <GEERU>
        #isoCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            parameters.InventDim_RU = this.inventDim();
        }
        // </GEERU>

        return  InventPosting::accountItemLedgerDimensionFromParameters(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default account for the sales order consumption from the inventory posting profile.
    /// </summary>
    /// <returns>
    /// The default account.
    /// </returns>
    LedgerDimensionDefaultAccount accountConsumption()
    {
        return this.accountFromInventAccountType(InventAccountType::SalesConsump);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountConsumptionLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default account for the sales order consumption from the inventory posting profile.
    /// </summary>
    /// <returns>
    /// The default account.
    /// </returns>
    public LedgerDimensionDefaultAccount accountConsumptionLedgerDimension()
    {
        return this.accountConsumption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountCustLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountCustLedgerDimension(TransStatusCode postingProfile  ='')
    {
        // <GEERU>
        #isoCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && this.postingProfile_RU())
        {
            return CustLedgerAccounts::summaryLedgerDimension(this.invoiceAccount(), this.postingProfile_RU());
        }
        // </GEERU>
        return CustLedgerAccounts::summaryLedgerDimension(this.invoiceAccount(),postingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountDisc</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountDisc()
    {
        return this.accountFromInventAccountType(InventAccountType::SalesDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountDiscLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default account for the sales order discount from the inventory posting profile.
    /// </summary>
    /// <returns>
    /// The default account.
    /// </returns>
    public LedgerDimensionDefaultAccount accountDiscLedgerDimension()
    {
        return this.accountDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountIssue</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountIssue()
    {
        // <GCN>
        if (InventPostingExtendParm_CN::checkExtendParmEnabled())
        {
            InventPostingAccountItemLedgerDimensionParameters searchParameter = this.accountItemLedgerDimensionParameters(InventAccountType::SalesIssue);
            searchParameter.SiteRelation = InventPostingExtendParm_CN::constructInventDim(this.inventDim()).parmInventSiteId();

            return InventPosting::accountItemExtendParmFromParameter_CN(searchParameter);
        }
        // </GCN>

        return this.accountFromInventAccountType(InventAccountType::SalesIssue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountSales</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountSales()
    {
        return this.accountFromInventAccountType(InventAccountType::SalesRevenue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountSalesLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default account for the sales order revenue from the inventory posting profile.
    /// </summary>
    /// <returns>
    /// The default account.
    /// </returns>
    public LedgerDimensionDefaultAccount accountSalesLedgerDimension()
    {
        return this.accountFromInventAccountType(InventAccountType::SalesRevenue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>blankDateFields</Name>
				<Source><![CDATA[
    private void blankDateFields()
    {
        this.ProjForecastInvoiceDate        = dateNull();
        this.ProjForecastEliminationDate    = dateNull();
        this.ProjForecastCostPaymDate       = dateNull();
        this.ProjForecastSalesPaymDate      = dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public Amount calcGrossAmount(Qty    qty   = this.SalesQty)
    {
        return this.salesPurchLineInterface().calcGrossAmount(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public Amount calcLineAmount(Qty    qty   = this.SalesQty)
    {
        return this.salesPurchLineInterface().calcLineAmount(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDisc</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public DiscAmount calcLineDisc(Qty    qty   = realMin())
    {
        return this.salesPurchLineInterface().calcLineDisc(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPrice2LineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcPrice2LineAmount(Qty _qty, boolean _forceLineAmountCalculation)
    {
        return this.salesPurchLineInterface().calcPrice2LineAmount(_qty, _forceLineAmountCalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyOrdered</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public InventQty calcQtyOrdered(Qty    salesQty  = this.SalesQty)
    {
        return this.salesPurchLineInterface().calcQtyOrdered(salesQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditDisc</Name>
				<Source><![CDATA[
    // This method is called when setting disc fields
    boolean canEditDisc()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the activity specified for the item forecast.
    /// </summary>
    /// <returns>
    ///    true if the activity used in item forecast is valid; otherwise, false.
    /// </returns>
    private boolean checkActivity()
    {
        boolean ret = true;

        if (this.ActivityNumber)
        {
			//Disable checking for activity to be closed to allow ForecastSales
			//to be created/updated/deleted of closed activities
            ret = ProjActivityHelper::validateProjActivityParentLinkV2(this.ProjId, this.ActivityNumber, false);

            if (ret && !ProjParameters::allowParentActivitySelection(this.ActivityNumber))
            {
                ret = checkFailed("@Proj:ParentActivityError");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventDimCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the inventory dimension combination is correct.
    /// </summary>
    /// <returns>
    /// true if the combination is correct; otherwise, false.
    /// </returns>
    public boolean checkInventDimCombination()
    {
        if (this.ItemId)
        {
            return this.inventDim().validateWriteInventDimCombination(this.ItemId);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the specified inventory status dimension value is valid.
    /// </summary>
    /// <returns>
    ///    true if the specified inventory status dimension value is valid; otherwise, false.
    /// </returns>
    public boolean checkInventStatus()
    {
        return WHSInventStatus::allowCreateForecast(this.inventDim().InventStatusId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkModel</Name>
				<Source><![CDATA[
    boolean checkModel()
    {
        return ForecastModel::checkModel(this.ModelId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks all the product dimensions.
    /// </summary>
    /// <returns>
    /// true if the product dimensions are correct; otherwise, false.
    /// </returns>
    boolean checkProductDim()
    {
        boolean ok = true;

        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            ok = ok && this.checkProductDimension(enum.current());
        }

        ok = ok && this.checkInventDimCombination();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductDimension</Name>
				<Source><![CDATA[
    private boolean checkProductDimension(InventProductDimension _productDimension)
    {
        if (this.ItemId)
        {
            InventTable inventTable = this.inventTable();
            if (_productDimension.isActiveForItem(inventTable))
            {
                InventDim inventDim = InventDim::find(this.InventDimId);
                anytype value = inventDim.(_productDimension.parmInventDimFieldId());
                if (value)
                {
                    return _productDimension.checkValueForItem(inventTable, value);
                }

                if (! this.ItemAllocateId)
                {
                    return checkFailed(strFmt("@SYS73929", _productDimension.label()));
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProject</Name>
				<Source><![CDATA[
    boolean checkProject()
    {
        ProjValCheckTrans   projValCheckTrans   = new ProjValCheckTrans();
        boolean             ret = true;
        ForecastModel       forecastModel;

        if (this.ProjId)
        {
            ret = ProjTable::find(this.ProjId).status().validateWriteBudgetItem()   && ret;
            ret = ProjForecastPost::newPostForecastItem(this).runCheck() && ret;

            if (this.ProjId)
                ret  = projValCheckTrans.validateMandatory(this) && ret;

            if (this.ProjForecastInvoiceDate != dateNull())
            {
                if (this.ProjForecastInvoiceDate < this.StartDate)
                {
                    ret = checkFailed("@SYS96098") && ret;
                }
            }
            if (this.ProjForecastEliminationDate != dateNull())
            {
                if (this.ModelId)
                {
                    forecastModel = ForecastModel::find(HeadingSub::Heading,this.ModelId);
                    if (forecastModel)
                    {
                        ProjTable projTableLocal = ProjTable::find(this.ProjId);

                        //Check WIP is being used by model
                        switch (projTableLocal.Type)
                        {
                            case ProjType::FixedPrice :
                                if (forecastModel.ProjForecastWIPFixedPrice)
                                {
                                    if (this.ProjForecastEliminationDate < this.StartDate)
                                    {
                                        ret = checkFailed("@SYS96097") && ret;
                                    }
                                }
                                break;

                            case ProjType::TimeMaterial :
                                if (forecastModel.ProjForecastWIPTimeMaterial)
                                {
                                    if (this.ProjForecastEliminationDate < this.StartDate)
                                    {
                                        ret = checkFailed("@SYS96097") && ret;
                                    }
                                }
                                break;

                            case ProjType::Investment :
                                if (forecastModel.ProjForecastWIPInvestment)
                                {
                                    if (this.ProjForecastEliminationDate < this.StartDate)
                                    {
                                        ret = checkFailed("@SYS96097") && ret;
                                    }
                                }
                                break;

                            case ProjType::None:
                                if (forecastModel.ProjForecastWIPFixedPrice &&
                                    this.ProjForecastEliminationDate < this.StartDate &&
                                    ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, ProjTransType::Item, ProjContractBillingMethod::FixedPrice))
                                {
                                    ret = checkFailed("@SYS96097") && ret;
                                }
                                else if (forecastModel.ProjForecastWIPTimeMaterial &&
                                    this.ProjForecastEliminationDate < this.StartDate &&
                                    ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, ProjTransType::Item, ProjContractBillingMethod::TimeMaterial))
                                {
                                    ret = checkFailed("@SYS96097") && ret;
                                }

                                break;

                            default :
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReqActivity</Name>
				<Source><![CDATA[
    public boolean checkReqActivity(ForecastSales   forecastSales)
    {
        RequireActivity             requireActivity;
        boolean                     ret = true;

        requireActivity = ProjTable::checkRequireActivity(forecastSales.ProjId,tableNum(ForecastSales));
        if (requireActivity && (!forecastSales.ActivityNumber))
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingPeriod</Name>
				<Source><![CDATA[
    ClearingPeriod clearingPeriod()
    {
        CustTable       custTable;
        CustGroup       custGroup;

        if (this.CustAccountId)
        {
            custTable= this.custTable();

            return custTable.clearingPeriod();
        }

        if (this.CustGroupId)
        {
            custGroup = this.custGroup();

            return custGroup.clearingPeriod();
        }

        return CustParameters::find().Due2Payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionMarginMST</Name>
				<Source><![CDATA[
    ContributionMargin contributionMarginMST()
    {
        return this.BudgetMap::amountMST() - this.costValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously instantiated by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this, CompanyInfo::findDataArea(curext()).RecId)
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// It does the unit conversion from SalesQty unit to InventQty unit. Then calculate final cost amount by multiplying the InventQty unit with cost price.
    /// </summary>
    /// <returns>
    /// Returns the final cost amount.
    /// </returns>
    display ProjCostAmount costAmount()
    {
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
																					 this.InventDimId,
																					 this.SalesQty,
																					 this.SalesUnitId,
																					 this.inventTable().inventUnitId(),
																					 NoYes::Yes) * this.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValue</Name>
				<Source><![CDATA[
    public CostAmount costValue()
    {
        return this.CostPrice * this.InventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custGroup</Name>
				<Source><![CDATA[
    CustGroup custGroup()
    {
        return CustGroup::find(this.CustGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable</Name>
				<Source><![CDATA[
    CustTable custTable()
    {
        return CustTable::find(this.CustAccountId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defBudget</Name>
				<Source><![CDATA[
    ForecastSales defBudget()
    {
        ForecastSales forecastSales;

        return forecastSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        this.BudgetMap::deleting();

        super();

        this.BudgetMap::deleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>derived</Name>
				<Source><![CDATA[
    display ForecastDerived derived()
    {
        return (this.ExpandId ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    DiscAmount discAmount()
    {
        return this.DiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    DiscPct  discPercent()
    {
        return this.DiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastModel</Name>
				<Source><![CDATA[
    ForecastModel forecastModel()
    {
        return ForecastModel::find(HeadingSub::Heading,this.ModelId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>grossAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public edit ForecastGrossAmount grossAmount(boolean set = false, AmountCur grossAmount = 0)
    {
        return this.salesPurchLineInterface().grossAmount(set, grossAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean inclTax()
    {
        return this.salesPurchLineInterface().inclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustGroup</Name>
				<Source><![CDATA[
    void initFromCustGroup()
    {
        CustGroup custGroup = CustGroup::find(this.CustGroupId);

        if (! custGroup)
            return;

        if (this.CustAccountId != '' && this.CustGroupId != CustTable::find(this.CustAccountId).CustGroup)
        {
            this.CustAccountId = '';
        }

        this.Comment = custGroup.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    void initFromCustTable()
    {
        CustTable custTable= this.custTable();

        if (! custTable)
            return;

        InventTable inventTable = InventTable::find(this.ItemId);

        this.initCustGroupIdFromCustTable(custTable);
        this.initTaxGroupIdFromCustTable(custTable);
        this.initCommentFromCustAndInventTable(custTable, inventTable);
        this.initCurrencyFromCustTable(custTable);
        this.initDefaultDimensionFromCustAndInventTable(custTable, this.custGroup(), inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromForecastModel</Name>
				<Source><![CDATA[
    void initFromForecastModel()
    {
        ForecastModel   forecastModel = ForecastModel::find(HeadingSub::Heading,this.ModelId);

        if (! forecastModel)
            return;

        this.Cov          = forecastModel.Cov;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    void initFromInventTable()
    {
        InventTable         inventTable         = InventTable::find(this.ItemId);
        InventTableModule   inventTableModule   = this.inventTableModule();
        InventDim           inventDim;
        ProjTable           projTable           = ProjTable::find(this.ProjId);

        if (!inventTable)
        {
            return;
        }

        this.ItemGroupId        = inventTable.itemGroupId();

        // Don't override SalesUnitId when init sales unit from excel via OData import
        if (!this.SalesUnitId)
        {
            this.SalesUnitId        = inventTableModule.UnitId;
        }

        this.TaxItemGroupId     = inventTableModule.TaxItemGroupId;
        this.Comment            = inventTable.defaultProductName();
        this.ProjCategoryId     = inventTable.ProjCategoryId;

        this.DefaultDimension  = this.copyDimension(projTable.DefaultDimension);

        this.DefaultDimension = this.mergeDimension(this.DefaultDimension, CustTable::find(this.CustAccountId).DefaultDimension);
        if( ForecastSalesUseCustomerGroupFinanciaDimensions::instance().isEnabled())
        {
            this.DefaultDimension = this.mergeDimension(this.DefaultDimension, CustGroup::find(this.CustGroupId).DefaultDimension);
        }
        this.DefaultDimension = this.mergeDimension(this.DefaultDimension, inventTable.DefaultDimension);

        this.initDataFromItemModified();
        this.initDataFromInventDimModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromItemGroup</Name>
				<Source><![CDATA[
    void initFromItemGroup()
    {
        InventItemGroup itemGroup   = InventItemGroup::find(this.ItemGroupId);

        if (! itemGroup)
            return;

        if (this.ItemGroupId != InventTable::find(this.ItemId).itemGroupId())
        {
            this.ItemId = '';
        }

        this.ItemAllocateId = itemGroup.StandardItemAllocateId;
        this.Comment        = itemGroup.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceDisc</Name>
				<Source><![CDATA[
    void initFromPriceDisc(PriceDisc_Price priceDisc, PriceDiscPolicyCheckPolicy _checkPolicy = null, boolean _initDateFields = true)
    {
        this.SalesPrice         = priceDisc.price();
        this.PriceUnit          = priceDisc.priceUnit();
        this.SalesMarkup        = priceDisc.priceMarkup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the category of the journal line with the default category of the project activity passed in as a parameter.
    /// </summary>
    /// <param name="_projActivity">
    ///    The project activity used to initialize the category of the journal line.
    /// </param>
    public void initFromProjActivity(ProjActivity _projActivity)
    {
        if (!_projActivity || !_projActivity.CategoryDefault ||
                ProjCategory::find(_projActivity.CategoryDefault).CategoryType != ProjCategoryType::Item)
        {
            return;
        }

        this.ProjCategoryId = _projActivity.CategoryDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceDate</Name>
				<Source><![CDATA[
    void initFromProjInvoiceDate()
    {
        PaymTermId          paymentTermsID;
        ProjFundingSource    projFundingSource;
        ProjTable           projTable       = this.projTable();
        ProjParameters      projParameters  = ProjParameters::find();

        // sales payment date
        if (projTable && ProjMultipleContractLinesForProjectFeatureHelper::isTimeMaterialBillingMethodForContractLine(projTable, this.ContractLineId, ProjTransType::Item))
        {
            if (this.ProjFundingSource)
            {
                paymentTermsID = ProjFundingSource::find(this.ProjFundingSource).PaymentTermsId;
            }
            else
            {
                if (ProjFundingSource::numberOfFundingSources(projTable.ProjInvoiceProjId) == 1)
                {
                    select firstonly PaymentTermsId from projFundingSource
                        where projFundingSource.ContractId == projTable.ProjInvoiceProjId &&
                              projFundingSource.FundingType == ProjFundingType::Customer;

                    paymentTermsID = projFundingSource.PaymentTermsId;
                }
            }

            if (paymentTermsID)
            {
                this.ProjForecastSalesPaymDate = PaymTerm::advanceDate(paymentTermsID, this.ProjForecastInvoiceDate) + projParameters.ForecastBufferDays;
            }
            else
            {
                this.ProjForecastSalesPaymDate  = this.ProjForecastInvoiceDate+ projParameters.ForecastBufferDays;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    void initFromProjTable(ProjTable   projTable)
    {
        InventDim inventDim;
        InventTable         inventTable         = InventTable::find(this.ItemId);

        if (!projTable)
        {
            return;
        }

        this.ProjId                 = projTable.ProjId;
        this.CustAccountId          = projTable.CustAccount;
        this.initFromCustTable();

        this.TaxGroupId             = projTable.TaxGroupId;
        this.Comment                = projTable.Name;
        this.Currency               = projTable.currencyId();

        this.SalesPrice = 0;
        this.SalesMarkup= 0;
        this.salesPurchLineInterface().setPriceAgreement(inventDim);

        if (!this.ModelId)
        {
            this.ModelId                = ProjTable::modelId(this.ProjId);
            this.initFromForecastModel();
        }

        DimensionDefault defaultDimensionBasedOnPriority;

        if (ProjFeatureStateHelper::isProjDefaultDimensionRuleFeatureEnabled())
        {          
            defaultDimensionBasedOnPriority = ProjDefaultDimensionRule::getDefaultDimension(this.ProjId, this.ContractLineId);
        }
        else
        {
            defaultDimensionBasedOnPriority = projTable.DefaultDimension;
        }

        this.DefaultDimension  = this.copyDimension(defaultDimensionBasedOnPriority);

        this.DefaultDimension = this.mergeDimension(this.DefaultDimension, CustTable::find(this.CustAccountId).DefaultDimension);
        if( ForecastSalesUseCustomerGroupFinanciaDimensions::instance().isEnabled())
        {
            this.DefaultDimension = this.mergeDimension(this.DefaultDimension, CustGroup::find(this.CustGroupId).DefaultDimension);
        }
        this.DefaultDimension = this.mergeDimension(this.DefaultDimension, inventTable.DefaultDimension);

        if (!ProjValProjCategorySetUp::checkProjCategory(this.ProjId,this.ProjCategoryId))
        {
            this.ProjCategoryId = '';
        }

        this.ProjLinePropertyId     = ProjLinePropertySetup::findLinePropertyId(this.ProjId, this.ProjCategoryId);
        this.StartDate              = projTable.returnForecastDate();

        this.initFromTransDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationLine</Name>
				<Source><![CDATA[
    void initFromSalesQuotationLine(SalesQuotationLine      _salesQuotationLine)
    {
        InventTableModule       inventTableModule;
        InventPriceMarkup       inventPriceMarkup;
        InventQty               transQty;

        this.ProjId             = _salesQuotationLine.salesQuotationTable().ProjIdRef;
        this.initFromProjTable(ProjTable::find(this.ProjId));

        this.Active             = NoYes::Yes;

        this.ModelId            = _salesQuotationLine.salesQuotationTable().ModelId;

        if (_salesQuotationLine.ItemId)
        {
            this.ItemId             = _salesQuotationLine.ItemId;
            this.initFromInventTable();
        }
        else
        {
            this.ItemAllocateId     = ProjParameters::find().DefaultForecastItemAllocation;
            if (!this.ItemAllocateId)
            {
                throw error ("@SYS334837");
            }

            this.TaxGroupId         = _salesQuotationLine.TaxGroup;
            this.SalesUnitId        = _salesQuotationLine.SalesUnit;
            this.TaxItemGroupId     = _salesQuotationLine.TaxItemGroup;
            this.Comment            = '';
        }

        this.setInventDimId(_salesQuotationLine.InventDimId);
        this.ProjCategoryId     = _salesQuotationLine.ProjCategoryId;
        this.ProjLinePropertyId = _salesQuotationLine.LinePropertyId;

        this.InventQty          = _salesQuotationLine.SalesQty;
        this.SalesQty           = _salesQuotationLine.SalesQty;

        this.DefaultDimension  = this.copyDimension(_salesQuotationLine.DefaultDimension);

        this.StartDate          = _salesQuotationLine.TransDate ? _salesQuotationLine.TransDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.EndDate            = _salesQuotationLine.EndDate;
        this.Description        = _salesQuotationLine.ProjDescription;

        if (_salesQuotationLine.isStocked())
        {
            inventTableModule   = InventTableModule::find(_salesQuotationLine.ItemId, ModuleInventPurchSales::Invent);
            inventPriceMarkup   = inventTableModule.AllocateMarkup ? 0 : inventTableModule.Markup * sign(this.InventQty);
            transQty            = _salesQuotationLine.QtyOrdered; //can be a decimal values if sales and purchase units are different. Example: Sales unit: each, Purchase unit: dozen or vice versa
            CostPrice costTotal      = _salesQuotationLine.CostPrice + inventPriceMarkup;

            if (ProjForecastSalesStockedCostPriceCalculationFlight::instance().isEnabled())
            {
                this.CostPrice = costTotal;

                if (transQty && transQty != 0 && this.InventQty != 0)
                {
                    this.CostPrice = (transQty / this.InventQty) * costTotal;
                }
            }
            else 
            {
                if (!transQty)
                {
                    transQty = this.InventQty;
                }

                if (transQty != 0)
                {
                    this.CostPrice = ((costTotal) / transQty) * this.InventQty;
                }
            }
        }

        if (this.CostPrice == 0 && _salesQuotationLine.CostPrice != 0)
        {
            this.CostPrice = _salesQuotationLine.CostPrice;
        }

        this.Currency           = _salesQuotationLine.CurrencyCode;
        this.PriceUnit          = _salesQuotationLine.PriceUnit;

        this.initFromTransDate();
        if (!_salesQuotationLine.SalesPrice && _salesQuotationLine.LineAmount && _salesQuotationLine.SalesQty)
        this.SalesPrice     = _salesQuotationLine.LineAmount / _salesQuotationLine.SalesQty;
        else
        this.SalesPrice     = _salesQuotationLine.SalesPrice;

        this.Amount         = _salesQuotationLine.LineAmount;
        this.DiscPercent = _salesQuotationLine.LinePercent;
        this.DiscAmount = _salesQuotationLine.LineDisc;

        //BOM/route
        this.ItemBOMId      = _salesQuotationLine.ItemBOMId;
        this.ItemRouteId    = _salesQuotationLine.ItemRouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTransDate</Name>
				<Source><![CDATA[
    void initFromTransDate(boolean _calledFromAOS = false)
    {
        ProjTable       projTable       = this.projTable();
        ProjParameters  projParameters  = ProjParameters::find();

        boolean isTM = ProjMultipleContractLinesForProjectFeatureHelper::isTimeMaterialBillingMethodForContractLine(projTable, this.ContractLineId, ProjTransType::Item);
        boolean isFixedPrice = ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethodForContractLine(projTable, this.ContractLineId, ProjTransType::Item);

        //  invoice date
        if (isTM)
        {
            if (projTable.projInvoice().ForecastInvoiceFrequency)
            {
                this.ProjForecastInvoiceDate    = ProjInvoiceTable::forecastInvoiceDate(this.StartDate,this.ProjId, _calledFromAOS);
            }
            else
            {
                this.ProjForecastInvoiceDate    = this.StartDate;
            }
        }
        else if (isFixedPrice || projTable.Type == ProjType::Investment)
        {
            // Project forecast invoice date is not used for Fixed price or Investment projects
            this.ProjForecastInvoiceDate = dateNull();
        }

        this.initFromProjInvoiceDate();

        //  elimination date
        if (isFixedPrice ||   projTable.Type   == ProjType::Investment)
        {
            if (ProjTable::exist(projTable.wipProject))
            {
                this.ProjForecastEliminationDate = ProjTable::find(projTable.wipProject).EndDate;
            }
            else
            {
                this.ProjForecastEliminationDate = projTable.EndDate;
            }

            if (!this.ProjForecastEliminationDate)
            {
                this.ProjForecastEliminationDate = this.StartDate;
            }
        }

        // cost payment date
        if (projTable.Type   != ProjType::Time)
        {
            if (projParameters.ForecastPaymItem)
            {
                this.ProjForecastCostPaymDate   = PaymTerm::advanceDate(projParameters.ForecastPaymItem,this.StartDate, _calledFromAOS);
            }
            else
            {
                this.ProjForecastCostPaymDate   = this.StartDate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataFromItemModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the demand forecast item specific data.
    /// </summary>
    public void initDataFromItemModified()
    {
        if (this.ItemId)
        {        
            InventDim inventDimLocal = this.inventDim();
            inventDimLocal.initProductDimensionsFromInventTable(InventTable::find(this.ItemId), inventDimLocal);
            this.InventDimId = InventDim::findOrCreate(inventDimLocal).InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataFromInventDimModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes demand forecasting dimension specific data.
    /// </summary>
    public void initDataFromInventDimModified()
    {
        if (!this.ItemId || !InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, this.inventDim()))
        {
            return;
        }

        InventDim inventDim;
        if (this.InventDimId)
        {
            inventDim = InventDim::find(this.InventDimId);
        }
        else
        {
            inventDim = InventDim::findOrCreateBlank();
        }
        InventTable inventTable = this.inventTable(this.ItemId);

        inventDim.initFromInventTable(inventTable, InventItemOrderSetupType::Sales, inventDim);

        inventDim = InventDim::findOrCreate(inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);

        this.CostPrice = inventTable.costPcsPrice(this.InventDimId, inventDim, null, this.StartDate);

        if (EcoResProductVariantItemSalesTaxGroupFeature::isFeatureEnabled())
        {
            this.TaxItemGroupId = InventTable::getTaxItemGroupId(ModuleInventPurchSales::Sales, this.ItemId, this.InventDimId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        super();
        this.BudgetMap::initBudgetValues();

        this.initFromInventTable();
        this.initFromItemGroup();
        this.initFromCustTable();
        this.initFromCustGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert()
    {
        ttsbegin;
        
        if (!this.RecId && !this.ForecastEntryNumber)
        {
            this.ForecastEntryNumber = NumberSeq::newGetNum(ReqParameters::numRefForecastDemandForecast()).num();
        }
        else if (this.RecId)
        {
            this.ForecastEntryNumber = NumberSeq::newGetNum(ReqParameters::numRefForecastDemandForecast()).num();
		}

        if (this.ProjId)
        {
            if (!this.ProjTransId)
            {
                this.ProjTransId = NumberSeq::newGetNum(ProjParameters::numRefProjTransIdBase()).num();
            }
            else if (ForecastSales::existProjTransId(this.ProjTransId))
            {
                throw error("@Proj:TransactionIdAlreadyExists");
            }
        }

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            this.kittingInsert_delegate(this);
        }

        this.BudgetMap::inserting();
        super();
        this.BudgetMap::inserted();

        if (this.ProjId)
        {
            ProjForecastPost::newPostForecastItem(this).run();
        }
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    InventDim inventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.InventDimId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileType_RU</Name>
				<Source><![CDATA[
    InventProfileType_RU inventProfileType_RU()
    {
        InventProfileType_RU inventProfileType;
        inventProfileType = this.inventDim().inventProfile_RU().InventProfileType;
        if (inventProfileType == InventProfileType_RU::NotSpecified)
        {
            inventProfileType = InventProfileType_RU::General;
        }
        return inventProfileType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    InventTable inventTable(
        ItemId  _itemId = this.ItemId,
        boolean _forUpdate = false)
    {
        return InventTable::find(_itemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModule</Name>
				<Source><![CDATA[
    InventTableModule inventTableModule()
    {
        return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Sales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    CustAccount invoiceAccount()
    {
        return this.custTable().InvoiceAccount ? this.custTable().InvoiceAccount : this.CustAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the order line is category-based.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// Category does not apply for forecast lines.
    /// </remarks>
    [Hookable(false), Wrappable(false)]
    public boolean isCategoryBased()
    {
        return this.salesPurchLineInterface().isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjForecastReduced</Name>
				<Source><![CDATA[
    private boolean isProjForecastReduced()
    {
        return ProjForecastReductionHistory::existProjForecastTransId(this.ProjTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjLumpSum</Name>
				<Source><![CDATA[
    boolean isProjLumpSum()
    {
        ProjParameters      projParameters=ProjParameters::find(false);

        if (this.ProjId && this.ItemAllocateId && this.ItemAllocateId == projParameters.ItemLumpSumAllocationKey)
            return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLineDisc</Name>
				<Source><![CDATA[
    LineDiscCode itemLineDisc()
    {
        return this.inventTable().salesLineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    display ItemName itemName()
    {
        return InventTable::find(this.ItemId).itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDisc</Name>
				<Source><![CDATA[
    LineDiscCode lineDisc()
    {
        return this.custTable().LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides default <c>ForecastSales.dimension</c> values, depending on the <c>InventDim</c> record
    ///    buffer values.
    /// </summary>
    /// <param name="_newInventDim">
    ///    The <c>InventDim</c> record buffer linked to the current <c>ForecastSales</c> record buffer.
    /// </param>
    /// <param name="_oldInventDim">
    ///    The <c>InventDim</c> record buffer that was previously linked to the current <c>ForecastSales</c>
    ///    record buffer.
    /// </param>
    public void linkInventDim2Dimension(InventDim _newInventDim, InventDim _oldInventDim)
    {
        _newInventDim.setInventSiteFromParentIfModified(this, _oldInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the specified dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the specified dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        InventDim inventDim;
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ForecastSales, ProjCategoryId):
                this.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(this.ProjId,this.ProjCategoryId);
                break;

            case fieldNum(ForecastSales, ProjId):
                this.initFromProjTable(ProjTable::find(this.ProjId));
                // blank and reinitialize the Project Forecast date fields
                this.blankDateFields();
                if (this.ProjId)
                {
                    this.initFromTransDate();
                }
                break;

            case fieldNum(ForecastSales, AllocateMethod):
                this.BudgetMap::setAfterAllocateMethod();
                break;

            case fieldNum(ForecastSales, ModelId):
                this.initFromForecastModel();
                break;

            case fieldNum(ForecastSales, Amount):
                this.salesPurchLineInterface().lineAmountModified();
                break;

            case fieldNum(ForecastSales, Currency):
                this.SalesPrice = 0;
                this.SalesMarkup = 0;
                break;

            case fieldNum(ForecastSales, ItemGroupId):
                this.initFromItemGroup();
                break;

            case fieldNum(ForecastSales, StartDate):
                this.salesPurchLineInterface().setPriceAgreement(this.inventDim());
                
                if (this.ProjId)
                    this.initFromTransDate();
                break;

            case fieldNum(ForecastSales, ProjForecastInvoiceDate):
                this.initFromProjInvoiceDate();
                break;

            case fieldNum(ForecastSales, ProjFundingSource):
                if (this.ProjFundingSource)
                {
                    this.CustAccountId = ProjFundingSource::find(this.ProjFundingSource).CustAccount;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedProductDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the price and discount by using the agreements, if it is required.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record to use to find price agreements.
    /// </param>
    /// <param name="_dimFieldId">
    /// A <c>fieldId</c> value of an <c>InventDim</c> field to use to determine whether price agreements
    /// must be used.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    /// An instance of the <c>InventDimGroupSetup</c> class that provides information about dimension setup.
    /// </param>
    /// <returns>
    /// true if the line was updated; otherwise, false.
    /// </returns>
    public boolean modifiedProductDim(
        InventDim                           _inventDim,
        FieldId                             _dimFieldId,
        InventDimGroupSetup                 _inventDimGroupSetup)
    {
        if (InventDim::mustUseFieldSalesPriceDisc(_dimFieldId, _inventDimGroupSetup))
        {
            this.salesPurchLineInterface().setPriceAgreement(_inventDim);
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeCovPlanned</Name>
				<Source><![CDATA[
    boolean mustBeCovPlanned()
    {
        return this.Report      &&
               this.Active      &&
               this.Cov         &&
               ForecastModel::cov(this.ModelId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    CustVendAC orderAccount()
    {
        return this.CustAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payment</Name>
				<Source><![CDATA[
    PaymTermId payment()
    {
        PaymTermId  payment;

        if (this.CustAccountId)
        {
            payment  = CustTable::find(this.CustAccountId).PaymTermId;
        }

        if (! payment  && this.CustGroupId)
        {
            payment  = CustGroup::find(this.CustGroupId).PaymTermId;
        }

        if (! payment)
        {
            payment  = CustParameters::find().Invoice2Due;
        }

        return payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfile_RU</Name>
				<Source><![CDATA[
    CustPostingProfile postingProfile_RU()
    {
        CustPostingProfile          postingProfile;

        if (EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventProfileId_RU)))
        {
            postingProfile = InventProfileCustVendLedger_RU::custPostingProfile(this.inventDim().InventProfileId_RU);
        }

        if (! postingProfile)
        {
            postingProfile = CustParameters::find().PostingProfile;
        }

        return postingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the date for which a price must be calculated.
    /// </summary>
    /// <returns>
    /// The date for which to calculate a price.
    /// </returns>
    public PriceDate priceDate()
    {
        return this.StartDate ? this.StartDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceGroupId</Name>
				<Source><![CDATA[
    PriceGroupId priceGroupId()
    {
        PriceGroupID ProjPriceGroup;

        if (this.ProjId)
        {
            ProjPriceGroup = this.projTable().ProjPriceGroup;
        }
        return ProjPriceGroup ? ProjPriceGroup : this.custTable().PriceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceUnit</Name>
				<Source><![CDATA[
    PriceUnit priceUnit()
    {
        return this.PriceUnit ? this.PriceUnit : 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCostGroupId</Name>
				<Source><![CDATA[
    ProjCostGroupId projCostGroupId()
    {
        ProjCostGroupId projCostGroupId;

        if (this.ProjId)
            if (ProjWIPTable::find(this.ProjId).ControlId)
                projCostGroupId    = ProjControlCategory::findCategoryGroup(ProjWIPTable::find(this.ProjId).ControlId,this.ProjCategoryId);

        return projCostGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    ProjTable projTable()
    {
        return ProjTable::find(this.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAcontribution</Name>
				<Source><![CDATA[
    display Amount psAcontribution()
    {
        return this.Amount - this.costValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAdispcostValue</Name>
				<Source><![CDATA[
    display CostAmount psAdispcostValue()
    {
        return this.CostPrice * this.InventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAeditActivityPurpose</Name>
				<Source><![CDATA[
    public edit smmActivityPurpose psAeditActivityPurpose(boolean _set, ProjActivityNumber _activityNumber)
    {
        smmActivities smmActivities;
        str           name;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if (_set)
            {
                this.ActivityNumber = _activityNumber;
                this.initFromProjActivity(ProjActivity::find(_activityNumber));
            }
            else
            {
                smmActivities = smmActivities::find(this.ActivityNumber);
                name = smmActivities.Purpose;
            }
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    display ProjSalesAmount salesAmount()
    {
        return this.SalesQty * this.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the <c>InventDimId</c> parameter to the <c>ForecastSales.inventDimId</c> field and provides
    ///    default values, depending on the new inventory dimensions.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> value that should be applied to the <c>ForecastSales.InventDimId</c> field.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record buffer related to the <c>InventDimId</c> parameters; optional.
    /// </param>
    public void setInventDimId(InventDimId _inventDimId, InventDim _inventDim = InventDim::find(_inventDimId))
    {
        InventDim   currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();
        this.InventDimId = _inventDimId;
        this.linkInventDim2Dimension(_inventDim, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates an <c>InventDimId</c> value for the <c>InventDim</c> parameter and applies the
    ///    found <c>InventDimId</c> value to the <c>ForecastSales.inventDimId</c> field.
    /// </summary>
    /// <param name="_inventDim">
    ///    An <c>InventDim</c> record buffer that should be referenced by the current <c>ForecastSales</c>
    ///    record buffer.
    /// </param>
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim   inventDim;
        inventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doLedgerPreviewDataUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the ledger preview data needs to be updated.
    /// </summary>
    /// <returns>
    /// true, if the ledger preview data needs to be update; otherwise, false.
    /// </returns>
    protected boolean doLedgerPreviewDataUpdate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ForecastSales this_Orig = this.orig();

        ttsbegin;

        if (this.ProjId && ! this.ProjTransId)
        {
            NumberSeq numberSeq = NumberSeq::newGetNum(ProjParameters::numRefProjTransIdBase()); 
            this.ProjTransId = numberSeq.num();
        }

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            this.kittingUpdate_delegate(this);
        }

        if(this.doLedgerPreviewDataUpdate())
        {
            ProjForecastPost::newPostForecastItem(this).deleteTransBudget();

            this.BudgetMap::updating();
        }

        super();

        if(this.doLedgerPreviewDataUpdate())
        {
            this.BudgetMap::updated(this_Orig);
        }

        if (this.ProjId)
        {
            if (ProjParameters::find().ItemDeleteZero
                && ((this.isProjLumpSum() && this.CostPrice <= 0)
                    || (!this.isProjLumpSum() && this.SalesQty <= 0)))
            {
                this.delete();
                if (FormDataUtil::isFormDataSource(this))
                {
                    // refresh and reread forecastSales datasource if exists in form
                    FormRun formRun = FormDataUtil::getFormDataSource(this).formRun();
                    FormObjectSet formObjSet;
                    for (int i = 1; i <= formRun.dataSourceCount(); i++)
                    {
                        if (formRun.dataSource(i).cursor().TableId == tableNum(ForecastSales))
                        {
                            formObjSet = formRun.dataSource(i);
                            break;
                        }
                    }
                    if (formObjSet)
                    {
                        formObjSet.refresh();
                        formObjSet.reread();
                    }
                }
            }
            else
            {
                ProjForecastPost::newPostForecastItem(this).run();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCov</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates cash flow forecasts for the <c>ForecastSales</c> record.
    /// </summary>
    /// <param name = "_ledgerCoverage">The cash flow forecasting calculations.</param>
    void updateLedgerCov(LedgerCoverage _ledgerCoverage)
    {
        LedgerCoverage      cov = _ledgerCoverage;
        AmountCur           invoiceAmount;
        AmountCur           lineValue;
        AmountCur           discValue;
        AmountMST           costValue;
        TaxBudget           taxBudget;
        TaxAmountCur        taxAmountCur;
        ForecastSales       forecastSalesExpansion;
        // <GEERU>
        #isoCountryRegionCodes
        // </GEERU>

        cov.init(this);
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            cov.parmPostingProfile_RU(this.postingProfile_RU());
            cov.parmInventProfileType_RU(this.inventProfileType_RU());
        }
        // </GEERU>

        if (this.mustBeCovPlanned())
        {
            cov.setRemainPercent(this.StartDate,CustParameters::find().BudgetSettle);

            lineValue  = this.calcLineAmount();

            if (this.accountDisc())
            {
                discValue       = this.calcLineDisc(this.SalesQty);
                lineValue       = lineValue  + discValue;
            }

            costValue = CurrencyExchangeHelper::amount(this.InventQty * this.CostPrice, '');

            if (this.TaxGroupId)
            {
                taxBudget   = new TaxBudget(
                    NoYes::Yes,
                    this,
                    cov);

                // pass null because it doesn't actually post to GL
                taxAmountCur = taxBudget.calcAndPost(null);
            }
            else
                taxAmountCur = 0;

            if (lineValue)
            {
                cov.updateSum(
                    this.StartDate,
                    LedgerPostingType::SalesRevenue,
                    LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.accountSales()).RecId,
                    this.DefaultDimension,
                    this.Currency,
                    -lineValue
                    );
                invoiceAmount -= cov.lastAmount();
            }

            if (discValue)
            {
                cov.updateSum(
                    this.StartDate,
                    LedgerPostingType::SalesDisc,
                    LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.accountDisc()).RecId,
                    this.DefaultDimension,
                    this.Currency,
                    discValue
                    );

                invoiceAmount -= cov.lastAmount();
            }

            if (costValue)
            {
                cov.updateSum(
                    this.StartDate,
                     LedgerPostingType::InventIssue,
                     LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.accountIssue()).RecId,
                     this.DefaultDimension,
                     CompanyInfoHelper::standardCurrency(),
                     -costValue
                     );

                cov.updateSum(
                    this.StartDate,
                    LedgerPostingType::SalesConsump,
                    LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.accountConsumption()).RecId,
                    this.DefaultDimension,
                    CompanyInfoHelper::standardCurrency(),
                    costValue
                    );
            }

            if (invoiceAmount)
            {
                CustTable custTable = CustTable::find(this.CustAccountId);

                TransDate dueDate = cov.determineDueDate(this.StartDate, this.payment(), custTable.PaymDayId);

                this.updateLedgerCovForInvoiceAndPayment(cov, this.StartDate, dueDate, invoiceAmount - taxAmountCur);

            }
        }

        cov.endCov();

        if (this.BudgetMap::expansion().mustBeExploded())
        {
            while select forupdate forecastSalesExpansion
                where forecastSalesExpansion.ExpandId == this.RecId
            {
                forecastSalesExpansion.updateLedgerCov(cov);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCovForInvoiceAndPayment</Name>
				<Source><![CDATA[
    private void updateLedgerCovForInvoiceAndPayment(
        LedgerCoverage _ledgerCoverage,
        TransDate _invoiceDate,
        DueDate _dueDate,
        AmountCur _invoiceAmount)
    {
        CustTable custTable = CustTable::find(this.CustAccountId);

        //Invoice
        _ledgerCoverage.updateSum(
            _invoiceDate,
            LedgerPostingType::CustBalance,
            LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.accountCustLedgerDimension()).RecId,
            this.DefaultDimension,
            this.Currency,
            _invoiceAmount,
            0);

        TransDate paymentDueDate = _ledgerCoverage.determinePaymentDueDateWithAverages(LedgerCovAvgAverageDaysSelector::CustAverageDaysFromInvoiceToPayment,
            custTable.AccountNum,
            _dueDate,
            this.clearingPeriod());
        
        //Payment summary
        _ledgerCoverage.updateSum(
            paymentDueDate,
            LedgerPostingType::CustBalance,
            LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.accountCustLedgerDimension()).RecId,
            custTable.DefaultDimension,
            this.Currency,
            -_invoiceAmount,
            0);

        //Payment clearing
        _ledgerCoverage.updateSum(
            paymentDueDate,
            LedgerPostingType::CustBalance,
            LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.accountClearingLedgerDimension()).RecId,
            custTable.DefaultDimension,
            this.Currency,
            _invoiceAmount,
            0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean validateDelete()
    {
        boolean ret;

        ret = this.BudgetMap::validateDelete();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId p1)
    {
        ForecastModel   forecastModel;

        boolean ret;

        ret = super(p1);

        switch (p1)
        {
            case fieldNum(ForecastSales,ProjCategoryId):
                if (this.ProjCategoryId)
                {
                    if (ProjCategory::find(this.ProjCategoryId).CategoryType    != ProjCategoryType::Item)
                        ret = checkFailed(strFmt("@SYS54897",this.ProjCategoryId));
                }
                break;
            case fieldNum(ForecastSales,ModelId):
                if (this.ModelId != this.orig().ModelId)
                {
                    forecastModel  = ForecastModel::find(HeadingSub::Heading,this.orig().ModelId);
                    if (forecastModel.Blocked)
                        ret = checkFailed(strFmt("@SYS25943",forecastModel.ModelId));
                    else
                    {
                        forecastModel  = ForecastModel::find(HeadingSub::Heading,this.ModelId);
                        if (forecastModel.Blocked)
                            ret = checkFailed(strFmt("@SYS25943",forecastModel.ModelId));
                    }
                }
                break;
            case fieldNum(ForecastSales,SalesQty):
                if (this.SalesQty < 0)
                    ret = checkFailed("@SYS50502");
                break;

            case fieldNum(ForecastSales, ActivityNumber):
                ret = this.checkActivity();

                break;
            case fieldNum(ForecastSales, PdsCWQty):
                if (this.PdsCWQty && !PdsCatchWeightItem::exist(this.ItemId))
                {
                    ret = checkFailed(strFmt("@SCM:InventInventoryJournalCatchWeightQuantity", this.ItemId));
                }

                break;
            case fieldNum(ForecastSales, PdsCWUnitId):
                if (this.PdsCWUnitId && !PdsCatchWeightItem::exist(this.ItemId))
                {
                    ret = checkFailed("@PDS1048");
                }

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemInfo</Name>
				<Source><![CDATA[
    boolean validateItemInfo()
    {
        // Validate item allocation key information etc

        if (this.ItemId)
        {
            if (!InventTable::exist(this.ItemId))
                return false; // error message given elsewhere

            if (this.ItemAllocateId && !ForecastItemAllocationLine::existItem(this.ItemAllocateId, this.ItemId))
                warning(strFmt("@SYS85028", this.ItemAllocateId, this.ItemId));
            return true;
        }

        if (this.ItemGroupId)
        {
            if (!this.ItemAllocateId)
                return checkFailed("@SYS85029");

            if (!ForecastItemAllocationLine::existItemGroup(this.ItemAllocateId, this.ItemGroupId))
                warning(strFmt("@SYS85031", this.ItemAllocateId, this.ItemGroupId));
            return true;
        }

        if (!this.ItemAllocateId)
            return checkFailed("@SYS85030");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ok = true;
        boolean isProjForecastReduced;
        isProjForecastReduced=this.ProjId!='' && this.isProjForecastReduced();

        setPrefix(strFmt("@SYS14077", this.ItemId));

        if (this.isProjLumpSum())
        {
            if ( this.SalesQty!=1)
                ok = checkFailed("@SYS107838");

            if ( this.ItemId!='' )
                ok = checkFailed("@SYS108570");
        }

        if (isProjForecastReduced)
        {
            if (this.orig().ProjId != this.ProjId)
                ok= checkFailed(strFmt("@SYS113137",fieldStr(ForecastSales, ProjId)));
            if (this.orig().ProjCategoryId != this.ProjCategoryId)
                ok= checkFailed(strFmt("@SYS113137",fieldStr(ForecastSales, ProjCategoryId)));
            if (this.orig().ActivityNumber != this.ActivityNumber)
                ok= checkFailed(strFmt("@SYS113137",fieldStr(ForecastSales, ActivityNumber)));
            if (this.orig().ItemId != this.ItemId)
                ok= checkFailed(strFmt("@SYS113137",fieldStr(ForecastSales, ItemId)));
            if (this.orig().ModelId != this.ModelId)
                ok= checkFailed(strFmt("@SYS113137",fieldStr(ForecastSales, ModelId)));
        }

        if (this.ProjId && !this.ProjCategoryId)
            ok = checkFailed("@SYS12362");

        if (this.ItemId && !InventTable::exist(this.ItemId))
            ok = checkFailed(strFmt("@SYS5307", this.ItemId));

        if (this.SalesQty < 0)
            ok = checkFailed("@SYS50502");

        if (!this.isProjLumpSum() && this.ProjForecastBudgetType == ProjForecastBudgetType::None)
        {
            ok = ok && this.validateItemInfo();
        }

        ok = ok && this.checkProductDim();
        ok = ok && this.checkProject();
        ok = ok && this.checkActivity();
        ok = ok && this.BudgetMap::validateWrite();
        ok = ok && this.checkInventStatus();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimateInGroup</Name>
				<Source><![CDATA[
    static boolean estimateInGroup(ProjId           _projId,
                                   ForecastModelId  _modelId,
                                   ProjCostGroupId  _costGroupId,
                                   ProjControlId    _projControlId = "")
    {
        ForecastSales       forecastSales;
        ProjControlCategory projControlCategory;

        if (!_projControlId)
        {
            _projControlId = ProjWIPTable::find(ProjTable::find(_projId).wipProject).ControlId;
        }

        select count(RecId) from forecastSales
            where forecastSales.ProjId     == _projId  &&
                  forecastSales.ModelId    == _modelId
            join CategoryId from projControlCategory
                where projControlCategory.ControlId     == _projControlId                       &&
                      projControlCategory.CostGroupId   == _costGroupId                         &&
                      projControlCategory.CategoryId    == forecastSales.ProjCategoryId;

        if (forecastSales.RecId > 0)
            return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existProjLumpSumAllocation</Name>
				<Source><![CDATA[
    static boolean existProjLumpSumAllocation(ForecastItemAllocationId _allocateId)
    {
        ForecastSales   forecastSales;
        select firstonly forecastSales
        where forecastSales.ItemAllocateId == _allocateId &&
              forecastSales.ProjId != '';

        if (forecastSales)
            return true;
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existProjTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified record in the <c>ForecastSales</c> table exists.
    /// </summary>
    /// <param name="_projTransId">
    /// The <c>ProjTransIdBase</c> transactionId record of the table to check
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existProjTransId(ProjTransIdBase _projTransId)
    {
        ForecastSales   forecastSales;
        select firstonly RecId from forecastSales
            where forecastSales.ProjTransId == _projTransId;

        if (forecastSales.RecId)
            return true;
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjectBudgetForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ForecastSales</c> table.
    /// </summary>
    /// <param name="_projId">
    /// A <c>ProjId</c> value that specifies the project ID of the record to find.
    /// </param>
    /// <param name="_categoryId">
    /// A <c>CategoryId</c> value that specifies the category ID of the record to find.
    /// </param>
    /// <param name="_activityNumber">
    /// A <c>Activity Number</c> value that specifies the activity number of the record to find.
    /// </param>
    /// <param name="_projForecastBudgetType">
    /// A <c>CategoryId</c> value that specifies the forecast budget type of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>ForecastSales</c> table buffer that contains the budget forecast row.
    /// </returns>
    public static ForecastSales findProjectBudgetForecast(  ProjId _projId, CategoryId _categoryId,
                                                            ProjActivityNumber _activityNumber,
                                                            ProjForecastBudgetType _projForecastBudgetType,
                                                            boolean _forUpdate = false)
    {
        ForecastSales forecastSales;

        if (_projId && _categoryId && _projForecastBudgetType)
        {
            forecastSales.selectForUpdate(_forUpdate);

            select firstonly forecastSales
            where forecastSales.ProjId == _projId
            &&  forecastSales.ProjCategoryId == _categoryId
            &&  forecastSales.ActivityNumber == _activityNumber
            &&  forecastSales.ProjForecastBudgetType == _projForecastBudgetType;
        }

        return forecastSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjTransId</Name>
				<Source><![CDATA[
    static ForecastSales findProjTransId(
        ProjEmplTransId _transId,
        boolean         _forUpdate = false)
    {
        ForecastSales    forecastSales;
        forecastSales.selectForUpdate(_forUpdate);

        if (_transId)
            select forecastSales
                where forecastSales.ProjTransId == _transId;

        return forecastSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustGroupId</Name>
				<Source><![CDATA[
    static void setCustGroupId(
        CustAccount     accountNum,
        CustGroupId     orig_Group,
        CustGroupId     newGroup)

    {
        ForecastSales forecastSales;

        ttsbegin;
        while select forupdate forecastSales
            where forecastSales.CustAccountId   == accountNum   &&
                  forecastSales.CustGroupId     == orig_Group   &&
                  forecastSales.ExpandId        == 0
        {
            forecastSales.CustGroupId = newGroup;
            forecastSales.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAmount</Name>
				<Source><![CDATA[
    public void updateAmount()
    {
        this.Amount = this.calcPrice2LineAmount(this.SalesQty, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ForecastSales, Amount):
                if (this.isFieldSet(fieldNum(ForecastSales, SalesQty)) ||
                    this.isFieldSet(fieldNum(ForecastSales, SalesPrice)))
                {
                    this.updateAmount();
                }
                break;
            case fieldNum(ForecastSales, ItemGroupId):
                if (this.isFieldSet(fieldNum(ForecastSales, ItemId)))
                {
                    this.defaultItemGroupId();
                }
                break;
            case fieldNum(ForecastSales, SalesPrice):
                if (this.isFieldSet(fieldNum(ForecastSales, ItemId)) ||
                    this.isFieldSet(fieldNum(ForecastSales, ItemGroupId)) ||
                    this.isFieldSet(fieldNum(ForecastSales, SalesUnitId)) ||
                    this.isFieldSet(fieldNum(ForecastSales, InventDimId)) ||
                    this.isFieldSet(fieldNum(ForecastSales, Currency)))
                {
                    this.defaultSalesPrice();
                }
                break;
            case fieldNum(ForecastSales, SalesUnitId):
                if (this.isFieldSet(fieldNum(ForecastSales, ItemId)))
                {
                    this.SalesUnitId = this.inventTableModule().UnitId;
                }
                break;
            case fieldNum(ForecastSales, InventQty):
                if (this.isFieldSet(fieldNum(ForecastSales, SalesQty)) ||
                    this.isFieldSet(fieldNum(ForecastSales, SalesUnitId)))
                {
                    this.InventQty = this.calcQtyOrdered();
                }
                break;
            case fieldNum(ForecastSales, Currency):
                if (this.isFieldSet(fieldNum(ForecastSales, CustAccountId)))
                {
                    this.defaultCurrency();
                }
                break;
            case fieldNum(ForecastSales, CustGroupId):
                if (this.isFieldSet(fieldNum(ForecastSales, CustAccountId)))
                {
                    this.defaultCustGroupId();
                }
                break;
            case fieldNum(ForecastSales, TaxGroupId):
                if (this.isFieldSet(fieldNum(ForecastSales, CustAccountId)))
                {
                    this.defaultTaxGroupId();
                }
                break;
            case fieldNum(ForecastSales, Comment):
                if (this.isFieldSet(fieldNum(ForecastSales, ItemId)) ||
                    this.isFieldSet(fieldNum(ForecastSales, CustAccountId)))
                {
                    this.defaultComment();
                }
                break;
            case fieldNum(ForecastSales, DefaultDimension):
                if (this.isFieldSet(fieldNum(ForecastSales, ItemId)) ||
                    this.isFieldSet(fieldNum(ForecastSales, CustAccountId)))
                {
                    this.defaultDefaultDimension();
                }
                break;
            case fieldNum(ForecastSales, CustAccountId):
                if (this.isCustAccountOrCustGroupSet() &&
                    this.isFieldSet(fieldNum(ForecastSales, CustGroupId)))
                {
                    this.initFromCustGroup();
                }
                break;
            case fieldNum(ForecastSales, PdsCWUnitId):
                if (PdsCatchWeightItem::exist(this.ItemId) &&
                    this.isFieldSet(fieldNum(ForecastSales, ItemId)))
                {
                    this.PdsCWUnitId = PdsCatchWeightItem::pdsCWUnitId(this.ItemId);
                }
                break;
            case fieldNum(ForecastSales, SalesQty):
                if (!this.SalesQty && this.PdsCWQty && this.PdsCWUnitId && this.SalesUnitId && this.InventDimId &&
                    (this.isFieldSet(fieldNum(ForecastSales, ItemId)) ||
                     this.isFieldSet(fieldNum(ForecastSales, SalesUnitId)) ||
                     this.isFieldSet(fieldNum(ForecastSales, PdsCWUnitId)) ||
                     this.isFieldSet(fieldNum(ForecastSales, PdsCWQty)) ||
                     this.isFieldSet(fieldNum(ForecastSales, InventDimId)) ||
                     this.isFieldSet(fieldNum(ForecastSales, ItemGroupId))))
                {
                    this.SalesQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(  this.ItemId,
                                                                                                            this.InventDimId,
                                                                                                            this.PdsCWQty,
                                                                                                            this.PdsCWUnitId,
                                                                                                            this.SalesUnitId,
                                                                                                            NoYes::Yes);
                }
                break;
            case fieldNum(ForecastSales, Cov):
                if (this.isFieldSet(fieldNum(ForecastSales, ModelId)))
                {
                    this.initFromForecastModel();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCustGroupId</Name>
				<Source><![CDATA[
    private void defaultCustGroupId()
    {
        if (this.isFieldSet(fieldNum(ForecastSales, CustAccountId)))
        {
            this.initCustGroupIdFromCustTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxGroupId</Name>
				<Source><![CDATA[
    private void defaultTaxGroupId()
    {
        if (this.isFieldSet(fieldNum(ForecastSales, CustAccountId)))
        {
            this.initTaxGroupIdFromCustTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultComment</Name>
				<Source><![CDATA[
    private void defaultComment()
    {
        if (this.isFieldSet(fieldNum(ForecastSales, CustAccountId))
            || this.isFieldSet(fieldNum(ForecastSales, ItemId)))
        {
            this.initCommentFromCustAndInventTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustAccountOrCustGroupSet</Name>
				<Source><![CDATA[
    private boolean isCustAccountOrCustGroupSet()
    {
        boolean ret = false;

        if (this.isFieldSet(fieldNum(ForecastSales, CustAccountId))
            || this.isFieldSet(fieldNum(ForecastSales, CustGroupId)))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCurrency</Name>
				<Source><![CDATA[
    private void defaultCurrency()
    {
        if (this.isFieldSet(fieldNum(ForecastSales, CustAccountId)))
        {
            this.initCurrencyFromCustTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDefaultDimension</Name>
				<Source><![CDATA[
    private void defaultDefaultDimension()
    {
        if (this.isFieldSet(fieldNum(ForecastSales, CustAccountId)) 
            || this.isFieldSet(fieldNum(ForecastSales, CustGroupId))
            || this.isFieldSet(fieldNum(ForecastSales, ItemId)))
        {
            this.initDefaultDimensionFromCustAndInventTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSalesPrice</Name>
				<Source><![CDATA[
    private void defaultSalesPrice()
    {
        InventDim inventDim = InventDim::find(this.InventDimId);

        if(!this.isFieldSet(fieldNum(ForecastSales, SalesPrice)) &&
            !this.isFieldSet(fieldNum(ForecastSales, PriceUnit)) &&
            !this.isFieldSet(fieldNum(ForecastSales, SalesMarkup)))
        {
            this.salesPurchLineInterface().setPriceAgreement(inventDim, true);
        }

        PriceDisc_Price priceDisc = this.salesPurchLineInterface().priceDisc_PriceCache(inventDim, true);
        this.SalesPrice = priceDisc.price();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This actually defaults more than the ItemGroupId, but that is one trigger point after
    /// the itemId has changed or been set.
    /// </summary>
    private void defaultItemGroupId()
    {
        if (this.isFieldSet(fieldNum(ForecastSales, ItemId)) &&
            (!this.orig().ItemId || this.ItemId != this.orig().ItemId))
        {
            if (!this.isProjLumpSum())
            {
                this.initFromInventTable();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustGroupIdFromCustTable</Name>
				<Source><![CDATA[
    private void initCustGroupIdFromCustTable(CustTable _custTable = this.custTable())
    {
        if (this.CustAccountId)
        {
            this.CustGroupId = _custTable.CustGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxGroupIdFromCustTable</Name>
				<Source><![CDATA[
    private void initTaxGroupIdFromCustTable(CustTable _custTable = this.custTable())
    {
        this.TaxGroupId = _custTable.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCommentFromCustAndInventTable</Name>
				<Source><![CDATA[
    private void initCommentFromCustAndInventTable(
        CustTable _custTable = this.custTable(),
        InventTable _inventTable = this.inventTable())
    {
        this.Comment = _custTable.name();
        this.Comment = this.Comment ? this.Comment : _inventTable.defaultProductName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCurrencyFromCustTable</Name>
				<Source><![CDATA[
    private void initCurrencyFromCustTable(CustTable _custTable = this.custTable())
    {
        this.Currency = _custTable.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultDimensionFromCustAndInventTable</Name>
				<Source><![CDATA[
    private void initDefaultDimensionFromCustAndInventTable(
        CustTable _custTable = this.custTable(),
        CustGroup _custGroup = this.custGroup(),
        InventTable _inventTable = this.inventTable())
    {
        if( ForecastSalesUseCustomerGroupFinanciaDimensions::instance().isEnabled())
        {
            this.DefaultDimension = this.mergeDimension(_custTable.DefaultDimension, _custGroup.DefaultDimension);
            this.DefaultDimension = this.mergeDimension(this.DefaultDimension, _inventTable.DefaultDimension);
        }
        else if(_custTable || _inventTable)
        {
            this.DefaultDimension = this.mergeDimension(_custTable.DefaultDimension, _inventTable.DefaultDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContractLineItems</Name>
				<Source><![CDATA[
    public PSAContractLineItems getContractLineItems()
    {
        return ProjMultipleContractLinesForProjectFeatureHelper::getContractLineItems(this.ProjId, this.ContractLineId, ProjTransType::Item);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldNum(ForecastSales, ItemGroupId),
                [
                    fieldNum(ForecastSales, ItemId)
                ]
            ],
            [fieldNum(ForecastSales, SalesUnitId),
                [
                    fieldNum(ForecastSales, ItemId)
                ]
            ],
            [fieldNum(ForecastSales, SalesPrice),
                [
                    fieldNum(ForecastSales, ItemGroupId),
                    fieldNum(ForecastSales, ItemId),
                    fieldNum(ForecastSales, SalesUnitId),
                    fieldNum(ForecastSales, Currency),
                    fieldNum(ForecastSales, InventDimId)
                ]
            ],
            [fieldNum(ForecastSales, CostPrice),
                [
                    fieldNum(ForecastSales, ItemId)
                ]
            ],
            [fieldNum(ForecastSales, Amount),
                [
                    fieldNum(ForecastSales, SalesQty),
                    fieldNum(ForecastSales, SalesPrice)
                ]
            ],
            [fieldNum(ForecastSales, InventQty),
                [
                    fieldNum(ForecastSales, SalesUnitId),
                    fieldNum(ForecastSales, SalesQty)
                ]
            ],
            [fieldNum(ForecastSales, Currency),
                [
                    fieldNum(ForecastSales, CustAccountId)
                ]
            ],
            [fieldNum(ForecastSales, CustAccountId),
                [
                    fieldNum(ForecastSales, CustGroupId)
                ]
            ],
            [fieldNum(ForecastSales, CustGroupId),
                [
                    fieldNum(ForecastSales, CustAccountId)
                ]
            ],
            [fieldNum(ForecastSales, TaxGroupId),
                [
                    fieldNum(ForecastSales, CustAccountId)
                ]
            ],
            [fieldNum(ForecastSales, TaxItemGroupId),
                [
                    fieldNum(ForecastSales, ItemId)
                ]
            ],
            [fieldNum(ForecastSales, Comment),
                [
                    fieldNum(ForecastSales, CustAccountId),
                    fieldNum(ForecastSales, ItemId)
                ]
            ],
            [fieldNum(ForecastSales, DefaultDimension),
                [
                    fieldNum(ForecastSales, CustAccountId),
                    fieldNum(ForecastSales, ItemId)
                ]
            ],
            [fieldNum(ForecastSales, ProjCategoryId),
                [
                    fieldNum(ForecastSales, ItemId)
                ]
            ],
            [fieldNum(ForecastSales, PdsCWUnitId),
                [
                    fieldNum(ForecastSales, ItemId)
                ]
            ],
            [fieldNum(ForecastSales, SalesQty),
                [
                    fieldNum(ForecastSales, ItemId),
                    fieldNum(ForecastSales, SalesUnitId),
                    fieldNum(ForecastSales, PdsCWUnitId),
                    fieldNum(ForecastSales, PdsCWQty),
                    fieldNum(ForecastSales, InventDimId),
                    fieldNum(ForecastSales, ItemGroupId)
                ]
            ],
            [fieldNum(ForecastSales, PlanningPriority),
                [
                    fieldNum(ForecastSales, ItemId),
                    fieldNum(ForecastSales, InventDimId)
                ]
            ],
            [fieldNum(ForecastSales, Cov),
                [
                    fieldNum(ForecastSales, ModelId)
                ]
            ]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesPurchLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchLineInterface</c> object.
    /// </returns>
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return this.SalesPurchLine::salesPurchLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateTransBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ForecastSales</c> table that has expand id and allocate method fields set.
    /// </summary>
    /// <param name = "_forecastSales">A <c>ForecastSales</c> buffer.</param>
    /// <returns>true if the value is set;false otherwise.</returns>
    public static boolean canCreateTransBudget(ForecastSales _forecastSales)
    {
        boolean ret = false;

        if ((_forecastSales.ExpandId == 0 && _forecastSales.AllocateMethod == BudgetAllocateMethod::None) ||
            (_forecastSales.ExpandId != 0))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForProjIdAndModelId</Name>
				<Source><![CDATA[
    public void deleteForProjIdAndModelId(ProjId _projId, ForecastModelHeadId _modelId)
    {
        if(ProjBudgetManagementFeatureHelper::isFeatureEnabled())
        {
            ForecastSales forecastSales;
            ttsBegin;
            delete_from forecastSales
                where forecastSales.ProjId == _projId
                && forecastSales.ModelId == _modelId;
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingInsert_delegate</Name>
				<Source><![CDATA[
    delegate void kittingInsert_delegate(ForecastSales _forecastSales)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingUpdate_delegate</Name>
				<Source><![CDATA[
    delegate void kittingUpdate_delegate(ForecastSales _forecastSales)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetMapDeleteExpansion</Name>
				<Source><![CDATA[
    internal void budgetMapDeleteExpansion()
    {
        ForecastSales forecastSales;
        
        while select forupdate forecastSales 
            index ExpandIdx
            where forecastSales.ExpandId == this.RecId
        {
            forecastSales.delete();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Forecast</ConfigurationKey>
	<DeveloperDocumentation>@SYS124107</DeveloperDocumentation>
	<FormRef>ForecastSales</FormRef>
	<Label>@SYS15056</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ModelId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ProjTransBudget</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjTransBudget</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocateMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Freq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreqCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemAllocateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Allocation</Name>
			<Label>@SYS12895</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllocateMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Freq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreqCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemAllocateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS6928</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOMRoute</Name>
			<Label>@SYS22227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemBOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRouteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetRevision</Name>
			<Label>@PSA2281</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetType</Name>
			<Label>@SYS153332</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjForecastBudgetType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dates</Name>
			<Label>@SYS80293</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjForecastInvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjForecastEliminationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjForecastCostPaymDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjForecastSalesPaymDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@SYS11829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DiscAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Report</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryQuantity</Name>
			<Label>@SYS21676</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCatchWeight</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesMarkup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS4534</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSARefPurchLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectAdministration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>modifiedBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectCostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectIdentification</Name>
			<Label>@SYS89920</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractLineId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjFundingSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectTransaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSA</Name>
			<Label>@PSA43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>psAdispcostValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>psAcontribution</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSAOriginalBudgetInventory</Name>
			<Label>@PSA2522</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRouteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSAOriginalBudgetPrice</Name>
			<Label>@PSA2570</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesForecast</Name>
			<Label>@SYS15056</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Cov</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesQuantity</Name>
			<Label>@SYS11990</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Service</Name>
			<Label>@SYS25500</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Sys14584</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllocateMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BudgetAllocateMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS12227</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Comment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Cov</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerAppropriation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CovStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CovStatus</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccountId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteLinkedDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitDiscountAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EndDate</ExtendedDataType>
			<Label>@SYS101261</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExpandId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastSalesRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@Sys21776</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Freq</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Periods</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FreqCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PeriodUnit</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS21676</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemAllocateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastItemAllocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemBOMId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBOMId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemRouteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemRouteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KeyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerAllocateKeyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastModelHeadId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsCWUnitId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWUnitId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjForecastBudgetType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjForecastBudgetType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProjForecastCostPaymDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjForecastCostPaymDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProjForecastEliminationDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjForecastEliminationDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProjForecastInvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjForecastInvoiceDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProjForecastSalesPaymDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjForecastSalesPaymDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjFundingSource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjFundingSourceRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjLinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PSARefPurchLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAPurchRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Report</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Sys16399</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
			<Label>@SYS3987</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Label>@SYS7402</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ForecastEntryNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastDemandForecastNumSeq</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransTxt</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PlanningPriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanningPriority</ExtendedDataType>
			<FeatureClass>ReqPriorityBasedPlanningFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemDescription</Name>
			<ExtendedDataType>EcoResDescription</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsIntegrationToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractLineId</Name>
			<ExtendedDataType>PSAContractLineNum</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsIntegrationToggle</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModelId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StartDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ModelIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ModelId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CustAccountId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModelId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StartDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModelId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StartDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccounGrouptIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CustGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustAccountId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModelId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StartDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ExpandIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ExpandId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CovIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CovStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjCategoryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModelId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjFundingSourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjFundingSource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PSARefPurchRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PSARefPurchLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ForecastEntryNumberIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ForecastEntryNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>BudgetMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Active</MapField>
					<MapFieldTo>Active</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AllocateMethod</MapField>
					<MapFieldTo>AllocateMethod</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AllocationId</MapField>
					<MapFieldTo>ItemAllocateId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Amount</MapField>
					<MapFieldTo>Amount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Comment</MapField>
					<MapFieldTo>Comment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostPaymDate</MapField>
					<MapFieldTo>ProjForecastCostPaymDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CovStatus</MapField>
					<MapFieldTo>CovStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Currency</MapField>
					<MapFieldTo>Currency</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>defaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscAmount</MapField>
					<MapFieldTo>DiscAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DiscPercent</MapField>
					<MapFieldTo>DiscPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EliminationDate</MapField>
					<MapFieldTo>ProjForecastEliminationDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDate</MapField>
					<MapFieldTo>EndDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExpandId</MapField>
					<MapFieldTo>ExpandId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Freq</MapField>
					<MapFieldTo>Freq</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FreqCode</MapField>
					<MapFieldTo>FreqCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventQty</MapField>
					<MapFieldTo>InventQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceDate</MapField>
					<MapFieldTo>ProjForecastInvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemGroupId</MapField>
					<MapFieldTo>ItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Key</MapField>
					<MapFieldTo>KeyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePropertyId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>SalesMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ModelNum</MapField>
					<MapFieldTo>ModelId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWQty</MapField>
					<MapFieldTo>PdsCWQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>SalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>SalesQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Report</MapField>
					<MapFieldTo>Report</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Resource</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPaymDate</MapField>
					<MapFieldTo>ProjForecastSalesPaymDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StartDate</MapField>
					<MapFieldTo>StartDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransId</MapField>
					<MapFieldTo>ProjTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitId</MapField>
					<MapFieldTo>SalesUnitId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PSAProjBudgetTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
					<MapFieldTo>ActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>ProjCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostPrice</MapField>
					<MapFieldTo>CostPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyId</MapField>
					<MapFieldTo>Currency</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ModelId</MapField>
					<MapFieldTo>ModelId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>SalesQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPrice</MapField>
					<MapFieldTo>SalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StartDate</MapField>
					<MapFieldTo>StartDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Txt</MapField>
					<MapFieldTo>Comment</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustVendAC</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrderLine2PriceHistoryRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCalculationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchSalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequiredDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariantId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustGroupId</Name>
					<Field>CustGroupId</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccountId</Name>
					<Field>CustAccountId</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesForecast</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ExpandForecastSales</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ForecastSales</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExpandId</Name>
					<Field>ExpandId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ExpandIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ForecastItemAllocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ForecastItemAllocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemAllocateId</Name>
					<Field>ItemAllocateId</Field>
					<RelatedField>AllocateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AllocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ForecastModel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ForecastModel</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModelId</Name>
					<Field>ModelId</Field>
					<RelatedField>ModelId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>HeadingSub::Heading</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemGroupId</Name>
					<Field>ItemGroupId</Field>
					<RelatedField>ItemGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerAllocateKey</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerAllocateKey</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KeyId</Name>
					<Field>KeyId</Field>
					<RelatedField>Key</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>KeyIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjFundingSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjFundingSource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingSource_ForecastSales</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjFundingSource</Name>
					<Field>ProjFundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLinePropertyId</Name>
					<Field>ProjLinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSARefPurchLine</Name>
					<SourceEDT>PSAPurchRefRecId</SourceEDT>
					<Field>PSARefPurchLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRouteId</Name>
					<Field>ItemRouteId</Field>
					<RelatedField>RouteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesUnitId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Unit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DemandForecast</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesUnitId</Name>
					<Field>SalesUnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SubBOMTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemBOMId</Name>
					<Field>ItemBOMId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupId</Name>
					<Field>TaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupId</Name>
					<Field>TaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WbsEstimates</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjWBSEstimatesView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WbsActivities</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>