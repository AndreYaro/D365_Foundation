<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfCoByProdCalcTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PmfCoByProdCalcTrans extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>consumptionPcs</Name>
				<Source><![CDATA[
    public display InventQtyConsumptionPcs consumptionPcs()
    {
        InventQtyConsumptionPcs inventQtyConsumptionPcs;

        if (hasFieldAccess(tablenum(PmfCoByProdCalcTrans),
                        fieldnum(PmfCoByProdCalcTrans,Qty),
                        AccessType::View))
        {
            inventQtyConsumptionPcs = (this.consumptionSum()) / (this.Qty ? this.Qty : 1);
        }

        return inventQtyConsumptionPcs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumptionSum</Name>
				<Source><![CDATA[
    public display InventQtyConsumption consumptionSum()
    {
        InventQtyConsumption    consumption = 0;

        if (hasFieldAccess(tablenum(PmfCoByProdCalcTrans),
                        fieldnum(PmfCoByProdCalcTrans,ConsumpVariable),
                        AccessType::View)
            && hasFieldAccess(tablenum(PmfCoByProdCalcTrans),
                        fieldnum(PmfCoByProdCalcTrans,ConsumpConstant),
                        AccessType::View))
        {
            consumption = this.ConsumpVariable + this.ConsumpConstant;
        }

        return consumption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPricePcs</Name>
				<Source><![CDATA[
    public display CostPricePcs costPricePcs()
    {
        CostPricePcs costPricePcs;

        if (hasFieldAccess(tablenum(PmfCoByProdCalcTrans),
                        fieldnum(PmfCoByProdCalcTrans,Qty),
                        AccessType::View))
        {
            costPricePcs = this.costPriceSum() / (this.Qty ? this.Qty : 1);
        }

        return costPricePcs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPriceSum</Name>
				<Source><![CDATA[
    public display CostPriceQtyTotal costPriceSum()
    {
        CostPriceQtyTotal   costPrice = 0;

        if (hasFieldAccess(tablenum(PmfCoByProdCalcTrans),
                        fieldnum(PmfCoByProdCalcTrans,CostAmount),
                        AccessType::View)
            && hasFieldAccess(tablenum(PmfCoByProdCalcTrans),
                        fieldnum(PmfCoByProdCalcTrans,CostAmount),
                        AccessType::View))
        {
            costPrice = this.CostAmount + this.CostMarkup;
        }

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a unit of measures for the current record.
    /// </summary>
    /// <returns>Returns unit of measure symbol.</returns>
    display UnitOfMeasureSymbol displayUnitId()
    {
        return this.BOMCalcTransMap::displayUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRealQty</Name>
				<Source><![CDATA[
    public display ProdReportedGood getRealQty()
    {
        PmfCoByProdCalcTrans    pmfCoByProdCalcTrans;
        ProdReportedGood        qty = 0;

        if (hasFieldAccess(tablenum(PmfCoByProdCalcTrans),
                           fieldnum(PmfCoByProdCalcTrans,RealQty),
                           AccessType::View))
        {
            if (this.CalcType == ItemCalcType::Production)
            {
                qty = this.RealQty;
            }
            else
            {
                select firstonly RealQty
                    from   pmfCoByProdCalcTrans
                    where  pmfCoByProdCalcTrans.TransRefId        == this.TransRefId
                        && pmfCoByProdCalcTrans.TransRefType      == this.TransRefType
                        && pmfCoByProdCalcTrans.CollectRefLevel   == this.CollectRefLevel - 1
                        && pmfCoByProdCalcTrans.CalcType          == ItemCalcType::Production
                        && pmfCoByProdCalcTrans.PmfIdRefCoByRecId == this.PmfIdRefCoByRecId;

                qty = pmfCoByProdCalcTrans.RealQty;
            }
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCostBreakdown</Name>
				<Source><![CDATA[
    public void initCostBreakdown(PmfCoByProdCalcTrans _prodCalcTrans)
    {
        this.CollectRefProdId   = _prodCalcTrans.CollectRefProdId;
        this.CollectRefLevel    = _prodCalcTrans.CollectRefLevel + 1;
        this.DerivedReference   = _prodCalcTrans.DerivedReference;
        this.DerivedRefNum      = _prodCalcTrans.DerivedRefNum;
        this.TransRefId         = _prodCalcTrans.TransRefId;
        this.TransRefType       = _prodCalcTrans.TransRefType;
        this.IdRefTableId       = _prodCalcTrans.IdRefTableId;
        this.IdRefRecId         = _prodCalcTrans.IdRefRecId;
        this.Qty                = _prodCalcTrans.Qty;
        this.TransDate          = _prodCalcTrans.TransDate;
        this.CalcGroupId        = _prodCalcTrans.CalcGroupId;

        this.CalcType           = ItemCalcType::CostGroup;
        this.CostPriceModelUsed = BOMCalcCostPriceUsed::None;

        this.Production         = NoYes::No;
        this.bom                = NoYes::No;

        this.Resource           = _prodCalcTrans.Resource;
        this.UnitId             = '';
        this.OprId              = '';
        this.InventDimStr       = '';

        this.PmfIdRefCoByRecId  = _prodCalcTrans.PmfIdRefCoByRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPmfProdCoByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PmfCoByProdCalcTrans</c> record from a <c>PmfProdCoBy</c> record.
    /// </summary>
    /// <param name="_coBy">
    /// The <c>PmfProdCoBy</c> record used for initialization.
    /// </param>
    public void initFromPmfProdCoByProduct(PmfProdCoBy _coBy)
    {
        this.IdRefTableId     = _coBy.TableId;
        this.IdRefRecId       = _coBy.RecId;
        this.DerivedReference = _coBy.InventRefType;
        this.DerivedRefNum    = _coBy.InventRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdBOM</Name>
				<Source><![CDATA[
    public void initFromProdBOM(ProdBOM _prodBOM)
    {
        this.IdRefTableId     = _prodBOM.TableId;
        this.IdRefRecId       = _prodBOM.RecId;
        this.DerivedReference = _prodBOM.InventRefType;
        this.DerivedRefNum    = _prodBOM.InventRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdRoute</Name>
				<Source><![CDATA[
    public void initFromProdRoute(ProdRoute _prodRoute)
    {
        this.IdRefTableId    = _prodRoute.TableId;
        this.IdRefRecId      = _prodRoute.RecId;

        this.Resource        = _prodRoute.getResource(true,
                                                     true,
                                                     dateNull(),
                                                     maxdate(),
                                                     ProdTable::find(_prodRoute.ProdId).inventDim().InventSiteId,
                                                     true).WrkCtrId;
        this.OprId           = _prodRoute.OprId;
        this.OprNum          = _prodRoute.OprNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    public void initFromProdTable(ProdTable _prodTable, ItemCalcType _calcType)
    {
        this.CollectRefProdId = _prodTable.CollectRefProdId;
        this.CollectRefLevel  = _prodTable.CollectRefLevel + 1;
        this.TransRefId       = _prodTable.ProdId;
        this.TransRefType     = ProdTransRefType::Production;
        this.CalcType         = _calcType;

        if (this.CalcType == ItemCalcType::Production)
        {
            this.CollectRefLevel = _prodTable.CollectRefLevel;
            this.IdRefTableId    = _prodTable.TableId;
            this.IdRefRecId      = _prodTable.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemResourceName</Name>
				<Source><![CDATA[
    public display ItemName itemResourceName()
    {
        WrkCtrTable     wrkCtrTable;

        switch (this.CalcType)
        {
            case ItemCalcType::Production:
            case ItemCalcType::Item:
            case ItemCalcType::BOM:
            case ItemCalcType::Service:
            case ItemCalcType::Burden:
                return InventTable::find(this.Resource).defaultProductName();
            case ItemCalcType::Setup:
            case ItemCalcType::Process:
            case ItemCalcType::Qty:
                select firstonly Name
                    from wrkCtrTable
                    where wrkCtrTable.WrkCtrId == this.Resource;
                return wrkCtrTable.Name;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>realConsumptionTotal</Name>
				<Source><![CDATA[
    public display ProductQuantity realConsumptionTotal()
    {
        Qty  qty = 0;

        if (hasFieldAccess(tablenum(PmfCoByProdCalcTrans),
                        fieldnum(PmfCoByProdCalcTrans,ConsumpVariable),
                        AccessType::View))
        {
            qty = this.RealConsump + this.RealQty;
        }
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>realCostAmountTotal</Name>
				<Source><![CDATA[
    public display CostAmount realCostAmountTotal()
    {
        CostAmount  amount = 0;

        if (hasFieldAccess(tablenum(PmfCoByProdCalcTrans),
                        fieldnum(PmfCoByProdCalcTrans,RealCostAmount),
                        AccessType::View)
            && hasFieldAccess(tablenum(PmfCoByProdCalcTrans),
                        fieldnum(PmfCoByProdCalcTrans,RealCostAdjustment),
                        AccessType::View))
        {
            amount = (this.RealCostAmount + this.RealCostAdjustment);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>realCostPricePcs</Name>
				<Source><![CDATA[
    public display CostPriceHistorical realCostPricePcs()
    {
        ProdReportedGood    qty = this.getRealQty();

        return this.realCostAmountTotal() / (qty ? qty : 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPricePcs</Name>
				<Source><![CDATA[
    public display InventSalesPricePcs salesPricePcs()
    {
        InventSalesPricePcs inventSalesPricePcs;

        if (hasFieldAccess(tablenum(PmfCoByProdCalcTrans),
                        fieldnum(PmfCoByProdCalcTrans,Qty),
                        AccessType::View))
        {
            inventSalesPricePcs = this.salesPriceSum() / (this.Qty  ? this.Qty : 1);
        }

        return inventSalesPricePcs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPriceSum</Name>
				<Source><![CDATA[
    public display InventSalesPrice salesPriceSum()
    {
        InventSalesPrice    price = 0;

        if (hasFieldAccess(tablenum(PmfCoByProdCalcTrans),
                        fieldnum(PmfCoByProdCalcTrans,SalesAmount),
                        AccessType::View)
            && hasFieldAccess(tablenum(PmfCoByProdCalcTrans),
                        fieldnum(PmfCoByProdCalcTrans,SalesMarkup),
                        AccessType::View))
        {
            price = this.SalesAmount + this.SalesMarkup;
        }

        return price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the bom flag in the prodCalcTrans record
    /// </summary>
    /// <param name="_canHaveBom">
    /// True if this item can have a bom; otherwise false
    /// </param>
    /// <param name="_stdCostBased">
    /// True if this item is running on standard cost; otherwise false
    /// </param>

    public void setBom(
        boolean      _canHaveBom,
        boolean      _stdCostBased
        )
    {
        if (_stdCostBased && InventParameters::isCostBreakdownActivated())
        {
            this.bom           = _canHaveBom;
        }
        else
        {
            this.bom           = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHourUnit</Name>
				<Source><![CDATA[
    public static KeyValue calcHourUnit()
    {
        return BOMCalcTransMap::calcHourUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRealCostAmountByResourceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total realized amount for all co-products for a specific resource and type.
    /// </summary>
    /// <param name="_prodId">
    /// A string value that holds the production ID.
    /// </param>
    /// <param name="_resource">
    /// A string value that represents an item ID, an cost group ID or an operation.
    /// </param>
    /// <param name="_calcType">
    /// An enumeration value that represents the calculation type.
    /// </param>
    /// <returns>
    /// A real value that holds the total realized amount for all co-products for a specific resource and type.
    /// </returns>
    public static Amount calcRealCostAmountByResourceType(
        ProdId          _prodId,
        BOMCalcResource _resource,
        ItemCalcType    _calcType)
    {
        PmfProdCoBy             coBy;
        PmfCoByProdCalcTrans    pmfCoByProdCalcTrans;

        select sum(RealCostAmount), sum(RealCostAdjustment) from pmfCoByProdCalcTrans
            where pmfCoByProdCalcTrans.CalcType  == _calcType
               && pmfCoByProdCalcTrans.Resource == _resource
            exists join coBy
                where coBy.RecId        == pmfCoByProdCalcTrans.PmfIdRefCoByRecId
                   && coBy.ProdId       == _prodId
                   && coBy.ProductType  == PmfProductType::Co_Product;

        return pmfCoByProdCalcTrans.RealCostAmount + pmfCoByProdCalcTrans.RealCostAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
        ProdCollectRefProdId _collectRefProdId,
        ProdCollectRefLevel _collectRefLevel,
        LineNum _lineNum,
        RecId _recId)
    {
        return _collectRefProdId
            && (select pmfCoByProdCalcTrans
                    where pmfCoByProdCalcTrans.CollectRefProdId == _collectRefProdId
                        && pmfCoByProdCalcTrans.CollectRefLevel == _collectRefLevel
                        && pmfCoByProdCalcTrans.LineNum == _lineNum
                        && pmfCoByProdCalcTrans.RecId == _recId
            ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PmfCoByProdCalcTrans find(
        ProdCollectRefProdId _collectRefProdId,
        ProdCollectRefLevel _collectRefLevel,
        LineNum _lineNum,
        RecId _recId,
        boolean _forUpdate = false)
    {
        PmfCoByProdCalcTrans pmfCoByProdCalcTrans;

        pmfCoByProdCalcTrans.selectForUpdate(_forUpdate);

        select firstonly pmfCoByProdCalcTrans
            where pmfCoByProdCalcTrans.CollectRefProdId == _collectRefProdId
                && pmfCoByProdCalcTrans.CollectRefLevel == _collectRefLevel
                && pmfCoByProdCalcTrans.LineNum == _lineNum
                && pmfCoByProdCalcTrans.RecId == _recId;

        return pmfCoByProdCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findIdRef</Name>
				<Source><![CDATA[
    public static PmfCoByProdCalcTrans findIdRef(
        tableId _tableId,
        RecId   _recId,
        RecId   _coProductRecId,
        boolean _forUpdate = false)
    {
        PmfCoByProdCalcTrans prodCalcTrans;

        prodCalcTrans.selectForUpdate(_forUpdate);

        select firstonly prodCalcTrans
            where prodCalcTrans.IdRefTableId        == _tableId
                && prodCalcTrans.IdRefRecId         == _recId
                && prodCalcTrans.PmfIdRefCoByRecId  == _coProductRecId
                && prodCalcTrans.CalcType           != ItemCalcType::CostGroup;

        return prodCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findIdRefCalcType</Name>
				<Source><![CDATA[
    public static PmfCoByProdCalcTrans findIdRefCalcType(
        tableId      _tableId,
        RecId        _recId,
        RecId        _coProductRecId,
        ItemCalcType _itemCalcType,
        boolean      _forUpdate = false,
        KeyValue     _resource = '',
        KeyValue     _oprId = '',
        OprNum       _oprNum = 0,
        CostGroupId  _costGroupId = '')
    {
        PmfCoByProdCalcTrans prodCalcTrans;

        prodCalcTrans.selectForUpdate(_forUpdate);

        select firstonly prodCalcTrans
            where prodCalcTrans.IdRefTableId    == _tableId
                && prodCalcTrans.IdRefRecId     == _recId
                && prodCalcTrans.PmfIdRefCoByRecId == _coProductRecId
                && prodCalcTrans.CalcType       == _itemCalcType
                && (prodCalcTrans.Resource      == _resource     || !_resource)
                && (prodCalcTrans.OprId         == _oprId        || !_oprId)
                && (prodCalcTrans.OprNum        == _oprNum       || !_oprNum)
                && (prodCalcTrans.CostGroupId   == _costGroupId  || !_costGroupId);

        return prodCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    public static LineNum lastLineNum(RecId _pmfCoByRecId)
    {
        return (select maxof(LineNum) from pmfCoByProdCalcTrans
                    where pmfCoByProdCalcTrans.PmfIdRefCoByRecId == _pmfCoByRecId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRealCalcBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the prodCalcTrans records belonging to a prodBOM.
    /// </summary>
    /// <param name="_prodTable">
    /// The production order record for which the prodCalcTrans records should be updated.
    /// </param>
    /// <param name="_prodBOM">
    /// The prodBOM record for which the prodCalcTrans records should be updated.
    /// </param>
    /// <param name="_priceDate">
    /// The date, which should be used to find the inventItemPrice.
    /// </param>
    /// <param name="_inventItemPrice">
    /// The inventItemPrice record that should be used to calculated the further broken down
    /// cost for a standard cost item.
    /// </param>
    /// <param name="_updateBreakdown">
    ///    A boolean flag indicating if the cost breakdown must be updated; optional.
    /// </param>
    /// <remarks>
    /// If no priceDate is specified, the maxDate() will be used. The passing of the
    /// inventItemprice record is done for performance reasons. It will only be used
    /// for standard cost items.
    /// </remarks>
    public static void updateRealCalcBOM(ProdTable       _prodTable,
                                         ProdBOM         _prodBOM,
                                         TransDate       _priceDate = maxDate(),
                                         InventItemPrice _inventItemPrice = null,
                                         boolean         _updateBreakdown = true)
    {
        PmfCoByProdCalcTrans                    prodCalcTrans;
        InventTable                             inventTableChild;
        InventItemType                          inventItemType;
        ItemCalcType                            calcType;
        BOMCalcGroup                            bomCalcGroup;
        InventQty                               qty;
        CostAmount                              value;
        InventQty                               qtyBOM;
        CostAmount                              valueBOM;
        InventItemPrice                         inventItemPrice;
        CostGroupId                             costGroupId;
        boolean                                 stdCostBased;
        PmfProdCoBy                             pmfProdCoBy;
        PmfRecycledBpConsumptionCalc_ProdReal   pmfRecycledBpConsumptionCalc;

        if (_prodTable.ProdType != ProdType::Process  || !_prodBOM.RecId)
        {
            return;
        }

        // For std cost item, find the itemprice that needs to be applied
        inventTableChild = _prodBOM.inventTable();
        stdCostBased = inventTableChild.modelGroup().inventModelType().stdCostBased();

        if (stdCostBased)
        {
            if (_inventItemPrice)
            {
                inventItemPrice = _inventItemPrice;
            }
            else
            {
                inventItemPrice = _prodBOM.getInventItemPrice();
            }

            if (!inventItemPrice)
            {
                return;
            }

            // Now get the costGroup from the inventItemCostGroupRollup table
            costGroupId = inventItemPrice.costGroupId();
        }
        else
        {
            costGroupId = inventTableChild.costGroup();
        }

        if (_prodTable.ProdStatus != ProdStatus::Completed)
        {
            [qtyBOM, valueBOM] = _prodBOM.calcRealCostAmount();
        }
        else
        {
            [qtyBOM, valueBOM] = _prodBOM.calcFinancialCostAmount();
        }

        if (_prodTable.ProdType == ProdType::Process)
        {
            pmfRecycledBpConsumptionCalc = PmfRecycledBpConsumptionCalc_ProdReal::construct();
            pmfRecycledBpConsumptionCalc.parmProdTable(_prodTable);
            pmfRecycledBpConsumptionCalc.parmProdBom(_prodBOM);
            pmfRecycledBpConsumptionCalc.parmBomLineQty(qtyBOM );

            pmfRecycledBpConsumptionCalc.calc();
            qtyBOM = pmfRecycledBpConsumptionCalc.parmReducedQty();
        }

        while select recId, CostAllocationPct from pmfProdCoBy
            where pmfProdCoBy.ProdId == _prodTable.ProdId
               && pmfProdCoBy.ProductType == PmfProductType::Co_Product
            outer join forupdate prodCalcTrans
                where prodCalcTrans.IdRefTableId        == _prodBOM.TableId
                    && prodCalcTrans.IdRefRecId         == _prodBOM.RecId
                    && prodCalcTrans.PmfIdRefCoByRecId  == pmfProdCoBy.RecId
                    && prodCalcTrans.CalcType           != ItemCalcType::CostGroup
        {
            if (!prodCalcTrans.RecId)
            {
                inventItemType      = inventTableChild.inventItemType();
                calcType            = inventItemType.calculationType();
                bomCalcGroup        = inventTableChild.bomCalcGroup();

                prodCalcTrans.initFromProdTable(_prodTable, calcType);
                prodCalcTrans.initFromProdBOM(_prodBOM);

                prodCalcTrans.Production    = NoYes::No;
                prodCalcTrans.BOM           = NoYes::No;

                prodCalcTrans.Resource          = _prodBOM.ItemId;
                prodCalcTrans.UnitId            = inventTableChild.inventTableModuleInvent().UnitId;
                prodCalcTrans.OprId             = '';
                prodCalcTrans.BOMCalcTransMap::setInventDimStr(_prodBOM.InventDimId);
                prodCalcTrans.InventDimId       = _prodBOM.InventDimId;

                prodCalcTrans.CalcGroupId   = bomCalcGroup.CalcGroupId;
                prodCalcTrans.CostGroupId   = costGroupId;

                prodCalcTrans.OprNum        = _prodBOM.OprNum;

                prodCalcTrans.LineNum       =  PmfCoByProdCalcTrans::lastLineNum(pmfProdCoBy.RecId)+1;
                prodCalcTrans.PmfIdRefCoByRecId = pmfProdCoBy.RecId;
            }

            qty = qtyBOM * pmfProdCoBy.CostAllocationPct /100;
            value = valueBOM * pmfProdCoBy.CostAllocationPct /100;

            prodCalcTrans.RealConsump    = qty;

            if (stdCostBased)
            {
                // To avoid rounding issues, use the std cost price unrounded
                prodCalcTrans.RealCostAmount = qty == 0 ? 0 : inventItemPrice.pcsPrice() * qty;
            }
            else
            {
                prodCalcTrans.RealCostAmount = qty == 0 ? 0 : value;
            }

            // Always update the costGroupId
            prodCalcTrans.CostGroupId    = costGroupId;

            prodCalcTrans.write();

            if (_updateBreakdown)
            {
                PmfCoByProdCalcTrans::updateRealCalcCostBreakdown(prodCalcTrans, _prodBOM, inventItemPrice);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRealCalcCostBreakdown</Name>
				<Source><![CDATA[
    public static void updateRealCalcCostBreakdown(
        PmfCoByProdCalcTrans    _prodCalcTrans,
        ProdBOM                 _prodBOM,
        InventItemPrice         _inventItemPrice
        )
    {
        PmfCoByProdCalcTrans        prodCalcTransCostBreakdown;
        InventItemCostGroupRollup   inventItemCostGroupRollup;
        CostAmount                  proportionalRealCostAmount;
        CostAmount                  proportionalEstimatedCostAmount;
        Qty                         realConsumption;
        Qty                         estimatedConsumption = 0;
        LineNum                     lineNumBreakdown;
        InventTable                 inventTable = InventTable::find(_prodCalcTrans.Resource);
        CostBreakdownInsertionRule  costBreakdownInsertionRule = CostBreakdownInsertionRule::construct();

        costBreakdownInsertionRule.parmInventTable(inventTable);
        if (!costBreakdownInsertionRule.mustInsertCostBreakdown())
        {
            return;
        }

        // Calculate the real consumption
        EcoResProductUnitConverter	ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(_prodCalcTrans.Resource,
																																   _prodCalcTrans.InventDimId,
																																   _prodBOM.UnitId,
																																   _inventItemPrice.UnitID,
																																   NoYes::Yes,
																																   NoYes::No);
        realConsumption = ecoResProductUnitConverter.convertValue(_prodCalcTrans.realConsumptionTotal());

        select maxof(LineNum) from prodCalcTransCostBreakdown
            where prodCalcTransCostBreakdown.PmfIdRefCoByRecId == _prodCalcTrans.PmfIdRefCoByRecId
               && prodCalcTransCostBreakdown.Resource          == _prodCalcTrans.Resource
               && prodCalcTransCostBreakdown.IdRefTableId      == _prodCalcTrans.IdRefTableId
               && prodCalcTransCostBreakdown.IdRefRecId        == _prodCalcTrans.IdRefRecId
               && (prodCalcTransCostBreakdown.CalcType         == ItemCalcType::CostGroup ||
                   prodCalcTransCostBreakdown.CalcType         == ItemCalcType::BOM);

        lineNumBreakdown = prodCalcTransCostBreakdown.LineNum;

        // I need to reset the values
        update_recordset prodCalcTransCostBreakdown
            setting RealCostAmount = 0
            where prodCalcTransCostBreakdown.PmfIdRefCoByRecId  == _prodCalcTrans.PmfIdRefCoByRecId
               && prodCalcTransCostBreakdown.Resource           == _prodCalcTrans.Resource
               && prodCalcTransCostBreakdown.IdRefTableId       == _prodCalcTrans.IdRefTableId
               && prodCalcTransCostBreakdown.IdRefRecId         == _prodCalcTrans.IdRefRecId
               && prodCalcTransCostBreakdown.CollectRefProdId   == _prodCalcTrans.CollectRefProdId
               && prodCalcTransCostBreakdown.CollectRefLevel    == _prodCalcTrans.CollectRefLevel + 1
               && prodCalcTransCostBreakdown.CalcType           == ItemCalcType::CostGroup
               && prodCalcTransCostBreakdown.LineNum            >  _prodCalcTrans.LineNum
               && prodCalcTransCostBreakdown.LineNum            <  _prodCalcTrans.LineNum + 1;

        while select * from inventItemCostGroupRollup
            where inventItemCostGroupRollup.InventItemPriceRefRecId == _inventItemPrice.RecId
               && inventItemCostGroupRollup.CostLevel                > InventCostLevel::Total
               && inventItemCostGroupRollup.Split                   == NoYes::No                // Only decomposed cost groups
        {
            if (inventItemCostGroupRollup.Qty)
            {
                proportionalRealCostAmount = (inventItemCostGroupRollup.CostAmountStd * (realConsumption / inventItemCostGroupRollup.Qty));
            }
            else
            {
                proportionalRealCostAmount = 0;
            }

            // Records will be inserted with split NO and only ONE level below
            select firstonly forupdate prodCalcTransCostBreakdown
                where prodCalcTransCostBreakdown.PmfIdRefCoByRecId  == _prodCalcTrans.PmfIdRefCoByRecId
                   && prodCalcTransCostBreakdown.Resource           == _prodCalcTrans.Resource
                   && prodCalcTransCostBreakdown.IdRefTableId       == _prodCalcTrans.IdRefTableId
                   && prodCalcTransCostBreakdown.IdRefRecId         == _prodCalcTrans.IdRefRecId
                   && prodCalcTransCostBreakdown.CalcType           == ItemCalcType::CostGroup
                   && prodCalcTransCostBreakdown.CostGroupId        == inventItemCostGroupRollup.CostGroupId
                   && prodCalcTransCostBreakdown.CollectRefLevel    == _prodCalcTrans.CollectRefLevel + 1;

            if (!prodCalcTransCostBreakdown)
            {
                lineNumBreakdown += 0.00001;

                prodCalcTransCostBreakdown.initCostBreakdown(_prodCalcTrans);
                prodCalcTransCostBreakdown.LineNum      = lineNumBreakdown;
                prodCalcTransCostBreakdown.CostGroupId  = inventItemCostGroupRollup.CostGroupId;

                // Consumption should be only converted once, because
                // it stays the same for all the breakdown records
                if (!estimatedConsumption)
                {
                    ecoResProductUnitConverter.parmApplyRounding(NoYes::Yes);
                    estimatedConsumption = EcoResProductUnitConverter.convertValue(_prodCalcTrans.consumptionSum());																							
                }

                if (inventItemCostGroupRollup.Qty)
                {
                    proportionalEstimatedCostAmount = (inventItemCostGroupRollup.CostAmountStd * (estimatedConsumption / inventItemCostGroupRollup.Qty));
                }
                else
                {
                    proportionalEstimatedCostAmount = 0;
                }

                prodCalcTransCostBreakdown.CostAmount   = proportionalEstimatedCostAmount;
            }
            prodCalcTransCostBreakdown.RealCostAmount += proportionalRealCostAmount;

            // For the cost Rollup assign the qty of the parent record
            prodCalcTransCostBreakdown.RealConsump = _prodCalcTrans.RealConsump;

            prodCalcTransCostBreakdown.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRealCalcIndirect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the cost sheet of the co-products for a specified production order and updates records in <c>PmfCoByProdCalcTrans</c> table accordingly.
    /// </summary>
    /// <param name="_prodTable">A record in <c>ProdTable</c> table that represents the production order.</param>
    /// <param name="_transDate">The date of the financial update; optional. Must be specified if <c>_updateProdIndirectTrans</c> is true.</param>
    /// <param name="_voucher">The financial voucher; optional. Must be specified if <c>_updateProdIndirectTrans</c> is true.</param>
    /// <remarks>This code is similar to the primary loops of the <c>ProdCalcTrans.updateRealCalcIndirect</c> method.</remarks>
    static void updateRealCalcIndirect(
        ProdTable   _prodTable,
        TransDate   _transDate,
        Voucher     _voucher
        )
    {
        PmfProdCoBy pmfProdCoBy;

        select firstonly RecId
            from pmfProdCoBy
            where pmfProdCoBy.ProdId       == _prodTable.ProdId
                && pmfProdCoBy.BurdenType  == PmfBurdenType::Recycled
                && pmfProdCoBy.ProductType == PmfProductType::By_Product;

        boolean calculateRecycledByProducts = pmfProdCoBy.RecId != 0;

        while select pmfProdCoBy
            where pmfProdCoBy.ProdId == _prodTable.ProdId
               && pmfProdCoBy.ProductType == PmfProductType::Co_Product
        {
            CostTmpCalcCode2ProdCalcTrans costTmpCalcCode2ProdCalcTrans = null;

            // Create data object for the co-product
            CostCalcTransData costCalcTransData = CostCalcTransData::newFromPmfProdCoBy(pmfProdCoBy, _prodTable.CollectRefLevel + 1, pmfProdCoBy.inventDim().InventSiteId);
            costCalcTransData.parmCalculateRecycledByProducts(calculateRecycledByProducts);

            PmfCoByProdCalcTrans prodCalcTrans;

            // Fill CostCalcTransData object
            while select prodCalcTrans
                where prodCalcTrans.TransRefId == pmfProdCoBy.ProdId
                   && prodCalcTrans.TransRefType == ProdTransRefType::Production
                   && prodCalcTrans.PmfIdRefCoByRecId == pmfProdCoBy.RecId
                   && prodCalcTrans.CalcType != ItemCalcType::Production
            {
                if (prodCalcTrans.mustUseForIndirectCostCalculation())
                {
                    prodCalcTrans.fillCostCalcTransDataForIndirectRealCostCalculation(costCalcTransData, costTmpCalcCode2ProdCalcTrans);
                }
            }

            // Calculate and update realized indirect costs
            CostSheet costSheet = CostSheetFactory::construct().createCostSheet(CostSheetModeStrategyCalculate::newParameter(CostPriceType::COGM, costCalcTransData));
            boolean costSheetCalculated = costSheet.calc(costCalcTransData);

            if (costSheetCalculated)
            {
                ListEnumerator calculationNodeEnumerator = costSheet.getNodeEnumerator(CostSheetNodeListType::IndirectCalculation);
                while (calculationNodeEnumerator.moveNext())
                {
                    CostSheetNodeCalculation calculationNode = calculationNodeEnumerator.current();
                    AmountMST realAmount = calculationNode.getCostCalcTransData().getCostTotal();

                    if (CostTmpCalcCode2ProdCalcTrans::exist(costTmpCalcCode2ProdCalcTrans, calculationNode.getCode()))
                    {
                        CostTmpCalcCode2ProdCalcTrans costTmpCalcCode2ProdCalcTransRecord = CostTmpCalcCode2ProdCalcTrans::find(costTmpCalcCode2ProdCalcTrans, calculationNode.getCode());

                        PmfCoByProdCalcTrans indirectProdCalcTrans;

                        select forupdate firstonly indirectProdCalcTrans
                            where indirectProdCalcTrans.RecId == costTmpCalcCode2ProdCalcTransRecord.RefRecId;

                        // Instead of the estimated values, use the qty that has been reported as finished.
                        // if this is not availiable, use the calcQty
                        indirectProdCalcTrans.RealConsump = calculationNode.getCostCalcTransData().getConsumptionConstant() + calculationNode.getCostCalcTransData().getConsumptionVariable();
                        indirectProdCalcTrans.RealCostAmount = realAmount;
                        indirectProdCalcTrans.update();

                        // add Calculations to CostCalcTransData
                        costCalcTransData.addProdCalcTrans(indirectProdCalcTrans, CostSheetProdCalcMode::Costing);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCostCalcTransDataForIndirectRealCostCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a co-product data object with estimated cost data.
    /// </summary>
    /// <param name = "_costCalcTransData">An instance that is an input for further costing sheet calculation.</param>
    /// <param name = "_costTmpCalcCode2ProdCalcTrans">An in-memory table instance used to save cost calculations intermediately.</param>
    protected void fillCostCalcTransDataForIndirectRealCostCalculation(CostCalcTransData _costCalcTransData, CostTmpCalcCode2ProdCalcTrans _costTmpCalcCode2ProdCalcTrans)
    {
        switch (this.CalcType)
        {
            case ItemCalcType::IndirectSurcharge:
            case ItemCalcType::IndirectRate:
            case ItemCalcType::IndirectInUnitBased:
            case ItemCalcType::IndirectOutUnitBased:

                // remember which PmfCoByProdCalcTrans records correspond to Calculation nodes in the sheet
                // don't add Calculations to CostCalcTransData at this stage
                _costTmpCalcCode2ProdCalcTrans.clear();

                _costTmpCalcCode2ProdCalcTrans.initFromPmfProdCalcTransMap(this);

                _costTmpCalcCode2ProdCalcTrans.insert();
                break;

            default:
                this.fillCostCalcTransDataWithNonCalculatedCalcTypeRecord(_costCalcTransData, _costTmpCalcCode2ProdCalcTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCostCalcTransDataWithNonCalculatedCalcTypeRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a co-product calculation data object with estimated non calculated cost data.
    /// </summary>
    /// <param name = "_costCalcTransData">An instance that is an input for further costing sheet calculation.</param>
    /// <param name = "_costTmpCalcCode2ProdCalcTrans">An in-memory table instance used to save cost calculations intermediately.</param>
    [Replaceable]
    protected void fillCostCalcTransDataWithNonCalculatedCalcTypeRecord(CostCalcTransData _costCalcTransData, CostTmpCalcCode2ProdCalcTrans _costTmpCalcCode2ProdCalcTrans)
    {
        if (_costCalcTransData.parmCalculateRecycledByProducts())
        {
            PmfRecycledBpConsumptionCalc_ProdReal::construct().updateCalcTransForCostSheetCalc(this, 0);
        }

        if (!(this.bom == NoYes::Yes && InventParameters::isCostBreakdownActivated()))
        {
            _costCalcTransData.addProdCalcTrans(this, CostSheetProdCalcMode::Costing);
        }
        else
        {
            PmfCoByProdCalcTrans breakdownProdCalcTrans;

            breakdownProdCalcTrans.data(this);
            _costCalcTransData.addCostingBreakdownProdCalcTrans(breakdownProdCalcTrans, CostSheetProdCalcMode::Costing);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseForIndirectCostCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current estimated cost record must be used for indirect cost calculations.
    /// </summary>
    /// <returns>true if the estimated cost record must be used for indirect cost calculations; otherwise, false.</returns>
    protected boolean mustUseForIndirectCostCalculation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRealCalcProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the cost for a specified production order and updates records in <c>PmfCoByProdCalcTrans</c> table accordingly.
    /// </summary>
    /// <param name="_prodTable">A record in <c>ProdTable</c> table that represents the production order.</param>
    public static void updateRealCalcProduction(ProdTable _prodTable)
    {
        PmfCoByProdCalcTrans  prodCalcTrans;
        PmfCoByProdCalcTrans  prodCalcTransTotal;
        ItemCalcType    calcType;
        PmfProdCoBy     coBy;

        calcType = ItemCalcType::Production;

        while select coBy
            where coBy.ProdId == _prodTable.ProdId
        outer join forupdate prodCalcTrans
            where prodCalcTrans.IdRefTableId        == _prodTable.TableId
                && prodCalcTrans.IdRefRecId         == _prodTable.RecId
                && prodCalcTrans.PmfIdRefCoByRecId  == coBy.RecId
                && prodCalcTrans.CalcType           != ItemCalcType::CostGroup
        {
            if (! prodCalcTrans.RecId)
            {
                prodCalcTrans.initFromProdTable(_prodTable, calcType);
                prodCalcTrans.bom               = NoYes::Yes;
                prodCalcTrans.Production        = NoYes::Yes;
                prodCalcTrans.Resource          = coBy.ItemId;
                prodCalcTrans.UnitId            = InventTableModule::find(coBy.ItemId,ModuleInventPurchSales::Invent).UnitId;
                prodCalcTrans.OprId             = '';
                prodCalcTrans.BOMCalcTransMap::setInventDimStr(coBy.InventDimId);
                prodCalcTrans.InventDimId       = coBy.InventDimId;

                // Production should be positioned before its sub-components
                prodCalcTrans.LineNum = (select minof(LineNum)
                                            from pmfCoByProdCalcTrans
                                            where pmfCoByProdCalcTrans.TransRefId == _prodTable.ProdId
                                               && pmfCoByProdCalcTrans.TransRefType == ProdTransRefType::Production).LineNum
                                        - 0.0001;

                prodCalcTrans.CostGroupId       = coBy.inventTable().costGroup();
                prodCalcTrans.PmfIdRefCoByRecId = coBy.RecId;
            }

            select sum(RealCostAmount)
                from prodCalcTransTotal
                where prodCalcTransTotal.TransRefId == _prodTable.ProdId
                   && prodCalcTransTotal.TransRefType == ProdTransRefType::Production
                   && prodCalcTransTotal.Production == NoYes::No
                   && prodCalcTransTotal.PmfIdRefCoByRecId == coBy.RecId
                   && prodCalcTransTotal.CalcType   != ItemCalcType::CostGroup;   // Cost Group records are from decomposition only. Dont include

            prodCalcTrans.RealCostAmount = prodCalcTransTotal.RealCostAmount;

            prodCalcTrans.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>InventTransId</c> related to the record.
    /// </summary>
    /// <returns>The <c>InventTransId</c> related to the record.</returns>
    internal InventTransId inventTransId()
    {
        InventTransId inventTransId;

        switch (this.IdRefTableId)
        {
            case tableNum(ProdTable):
                inventTransId = ProdTable::find(this.TransRefId).InventTransId;
                break;

            case tableNum(PmfProdCoBy):
                inventTransId = PmfProdCoBy::find(this.TransRefId, this.IdRefRecId).InventTransId;
                break;
            default:
                throw(error(Error::wrongUseOfFunction(funcName())));
        }
        return inventTransId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PMF</ConfigurationKey>
	<DeveloperDocumentation>@PDS1100</DeveloperDocumentation>
	<Label>@SYS7895</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TransRefId</TitleField1>
	<TitleField2>Resource</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<ClusteredIndex>RefNumIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RefNumIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CollectRefLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsumpVariable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsumpConstant</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostMarkup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Production</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOM</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimStr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@SYS7895</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsumpVariable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsumpConstant</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealConsump</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealCostAdjustment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumOfSeries</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Formula</Name>
			<Label>@PRO1115</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesPriceModelUsed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceDiscQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPriceModelUsed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfOverheadPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfCostAllocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectRefProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PriceSummation</Name>
			<Label>@PDS563</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Procost</Name>
			<Label>@SYS6893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PmfCostAllocationPct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConsumpType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimStr</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRefType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOM</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcBOMConsumption</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalcGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ItemCalcType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CollectRefLevel</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdCollectRefLevel</ExtendedDataType>
			<Label>@SYS14422</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CollectRefProdId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdCollectRefProdId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConsumpConstant</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostQuantity</ExtendedDataType>
			<Label>@SYS8939</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConsumpType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMConsumpType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConsumpVariable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostQuantity</ExtendedDataType>
			<Label>@SYS12468</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS3058</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcCostMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostPriceModelUsed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMCalcCostPriceUsed</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DerivedReference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DerivedRefNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IdRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>IdRefTableId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimStr</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcInventDimStr</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NumOfSeries</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS7720</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OprId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OprNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OprNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfCostAllocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfCostAllocationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PmfCostAllocationPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfCostAllocationPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PmfIdRefCoByRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PmfIdRefCoByRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PmfOverheadPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfOverheadPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceDiscQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcPriceDiscQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Production</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS4398</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RealConsump</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostQuantity</ExtendedDataType>
			<Label>@SYS853</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RealCostAdjustment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountNonMonetary</ExtendedDataType>
			<Label>@SYS596</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RealCostAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountNonMonetary</ExtendedDataType>
			<Label>@SYS22990</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RealQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdQty</ExtendedDataType>
			<Label>@SYS14578</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Resource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcResource</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS13754</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcSalesMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesPriceModelUsed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMCalcSalesPriceUsed</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransRefId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostTransRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransRefType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdTransRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefNumIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>CollectRefProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CollectRefLevel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>IdRefIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>IdRefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IdRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PmfIdRefCoByRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CalcType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProdCollectIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TransRefType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CollectRefLevel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Production</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PmfIdRefCoByRecId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PmfIdRefCoByRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>BOMCalcTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CostGroupId</MapField>
					<MapFieldTo>CostGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Level</MapField>
					<MapFieldTo>CollectRefLevel</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimStr</MapField>
					<MapFieldTo>InventDimStr</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CalcGroupId</MapField>
					<MapFieldTo>CalcGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprId</MapField>
					<MapFieldTo>OprId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Resource</MapField>
					<MapFieldTo>Resource</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CalcType</MapField>
					<MapFieldTo>CalcType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprNum</MapField>
					<MapFieldTo>OprNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOM</MapField>
					<MapFieldTo>BOM</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitId</MapField>
					<MapFieldTo>UnitId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PmfProdCalcTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventDimStr</MapField>
					<MapFieldTo>InventDimStr</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Resource</MapField>
					<MapFieldTo>Resource</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitId</MapField>
					<MapFieldTo>UnitId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprId</MapField>
					<MapFieldTo>OprId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransRefId</MapField>
					<MapFieldTo>TransRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransRefType</MapField>
					<MapFieldTo>TransRefType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CollectRefProdId</MapField>
					<MapFieldTo>CollectRefProdId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CollectRefLevel</MapField>
					<MapFieldTo>CollectRefLevel</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CalcType</MapField>
					<MapFieldTo>CalcType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IdRefTableId</MapField>
					<MapFieldTo>IdRefTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IdRefRecId</MapField>
					<MapFieldTo>IdRefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOM</MapField>
					<MapFieldTo>BOM</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostGroupId</MapField>
					<MapFieldTo>CostGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostAmount</MapField>
					<MapFieldTo>CostAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostMarkup</MapField>
					<MapFieldTo>CostMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesAmount</MapField>
					<MapFieldTo>SalesAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesMarkup</MapField>
					<MapFieldTo>SalesMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsumpVariable</MapField>
					<MapFieldTo>ConsumpVariable</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsumpConstant</MapField>
					<MapFieldTo>ConsumpConstant</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RealQty</MapField>
					<MapFieldTo>RealQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RealConsump</MapField>
					<MapFieldTo>RealConsump</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RealCostAmount</MapField>
					<MapFieldTo>RealCostAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RealCostAdjustment</MapField>
					<MapFieldTo>RealCostAdjustment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPriceModelUsed</MapField>
					<MapFieldTo>SalesPriceModelUsed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Production</MapField>
					<MapFieldTo>Production</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprNum</MapField>
					<MapFieldTo>OprNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DerivedReference</MapField>
					<MapFieldTo>DerivedReference</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DerivedRefNum</MapField>
					<MapFieldTo>DerivedRefNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendId</MapField>
					<MapFieldTo>VendId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsumpType</MapField>
					<MapFieldTo>ConsumpType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceDiscQty</MapField>
					<MapFieldTo>PriceDiscQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostPriceModelUsed</MapField>
					<MapFieldTo>CostPriceModelUsed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CalcGroupId</MapField>
					<MapFieldTo>CalcGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfCostAllocation</MapField>
					<MapFieldTo>PmfCostAllocation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfCostAllocationPct</MapField>
					<MapFieldTo>PmfCostAllocationPct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfIdRefCoByRecId</MapField>
					<MapFieldTo>PmfIdRefCoByRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfOverheadAmt</MapField>
					<MapFieldTo>PmfOverheadPct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfOverheadPct</MapField>
					<MapFieldTo>PmfOverheadPct</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>BOMCalcGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMCalcGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BOMCalcGroup_BOMCalcGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BOMCalcGroup_Coby</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalcGroupId</Name>
					<SourceEDT>BOMCalcGroupId</SourceEDT>
					<Field>CalcGroupId</Field>
					<RelatedField>CalcGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BOMCostGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMCostGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BOMCostGroup_BOMCostGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CostGroupId</Name>
					<SourceEDT>CostGroupId</SourceEDT>
					<Field>CostGroupId</Field>
					<RelatedField>CostGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CollectRefProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CollectRefProdTable_CollectRefProdTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CollectRefProdId</Name>
					<SourceEDT>ProdCollectRefProdId</SourceEDT>
					<Field>CollectRefProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Common</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Common</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Common_Common</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IdRefRecId</Name>
					<Field>IdRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IdRefTableId</Name>
					<Field>IdRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim_InventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTableBOM</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BomItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Calculation</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::BOM</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTableItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventoryItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Calculation</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Item</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTableProd</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Calculation</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Production</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTableService</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ServiceItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Calculation</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Service</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PmfProdCoByProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PmfProdCoBy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PmfProdCoByProduct_PmfProdCoByProduct</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PmfIdRefCoByRecId</Name>
					<Field>PmfIdRefCoByRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdBOM</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdBOM</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProdBOM_ProdBOM</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IdRefTableId</Name>
					<Field>IdRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IdRefRecId</Name>
					<Field>IdRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProdTable_ProdTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransRefType</Name>
					<Field>TransRefType</Field>
					<ValueStr>ProdTransRefType::Production</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteOprTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RouteOprTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OprId</Name>
					<SourceEDT>RouteOprId</SourceEDT>
					<Field>OprId</Field>
					<RelatedField>OprId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>OprIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Unit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Unit_Unit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitId</Name>
					<Field>UnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable_VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendId</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendId</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WrkCtrTableProcess</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WrkCtrTableProcess_WrkCtrTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Process</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WrkCtrTableQty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WrkCtrTableQty_WrkCtrTableQty</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Qty</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WrkCtrTableSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124092</EntityRelationshipRole>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WrkCtrTableSetup_WrkCtrTableSetup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CalcType</Name>
					<Field>CalcType</Field>
					<ValueStr>ItemCalcType::Setup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>