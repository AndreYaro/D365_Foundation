<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupTmpTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MarkupTmpTotals extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildSummary</Name>
				<Source><![CDATA[
    private void buildSummary(VendInvoiceInfoTable _vendInvoiceInfoTable, MarkupTmpDetails _markupTmpDetails)
    {
        MarkupVariancePercent tolerancePercentage;
        TransTxt txt;

        while select sum(PurchCalculatedAmount), sum(PurchParmCalculatedAmount) from _markupTmpDetails
            group by PurchParmMarkupCode
        {
            tolerancePercentage = VendInvoiceInfoMarkupMatchingTolerance::find(_vendInvoiceInfoTable.ParmId,_vendInvoiceInfoTable.TableRefId, _markupTmpDetails.PurchParmMarkupCode).TolerancePercentage;
            txt = MarkupTable::find(MarkupModuleType::Vend, _markupTmpDetails.PurchParmMarkupCode).Txt;

            this.clear();
            this.PurchCalculatedAmount = _markupTmpDetails.PurchCalculatedAmount;
            this.PurchParmCalculatedAmount = _markupTmpDetails.PurchParmCalculatedAmount;
            this.PurchParmMarkupCode = _markupTmpDetails.PurchParmMarkupCode;
            this.MarkupTolerancePercentage = tolerancePercentage;
            this.Txt = txt;
            this.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTemp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Consolidates the <c>MarkupTrans</c> records for a given invoice into temporary tables for easier
    ///    viewing and variance identification.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    ///    The invoice to consolidate.
    /// </param>
    /// <param name="_markupTmpTotals">
    ///    A reference to the <c>MarkupTmpTotals</c> table.
    /// </param>
    /// <param name="_markupTmpDetails">
    ///    A reference to the <c>MarkupTmpDetailsls</c> table.
    /// </param>
    /// <param name="_includePOTotals">
    ///    A <c>NoYes</c> enumeration value that indicates whether invoice miscellaneous charges should be
    ///    compared to purchase order miscellaneous charges.
    /// </param>
    /// <remarks>
    ///    This method groups the <c>MarkupTrans</c> records by the <c>MarkupCode</c> value of the
    ///    <c>PurchParmTable</c> record, the <c>PurchParmSubTable</c> record, and the <c>PurchParmLine</c>
    ///    record.
    /// </remarks>
    public void buildTemp(VendInvoiceInfoTable _vendInvoiceInfoTable, MarkupTmpTotals _markupTmpTotals, MarkupTmpDetails _markupTmpDetails, NoYes _includePOTotals)
    {
        delete_from _markupTmpTotals;
        delete_from _markupTmpDetails;

        this.totalVendInvoiceInfoTable(_markupTmpDetails, _vendInvoiceInfoTable, _includePOTotals);
        this.buildSummary(_vendInvoiceInfoTable, _markupTmpDetails);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfMatched</Name>
				<Source><![CDATA[
    private boolean checkIfMatched()
    {
        if (VendParameters::find().DisplayMiscChargeToleranceIcon == DisplayInvoiceMiscChargeMatchOption::GreaterThan)
        {
            if (this.variancePercent() > this.MarkupTolerancePercentage)
            {
                return false;
            }
        }
        else
        {
            if (abs(this.variancePercent()) > this.MarkupTolerancePercentage)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfMatchedIcon</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the variance percent is greater than the tolerated variance percent.
    /// </summary>
    /// <returns>
    ///    The warning icon if the invoice has a miscellaneous charge variance; otherwise, the OK icon.
    /// </returns>
    public display LastMatchVarianceOptions checkIfMatchedIcon()
    {
        if (this.checkIfMatched())
        {
            return LastMatchVarianceOptions::OK;
        }
        return LastMatchVarianceOptions::Warning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    private container totalVendInvoiceInfoLine(Tax _tax, MarkupTmpDetails _details, VendInvoiceInfoLine _vendInvoiceInfoLine, NoYes _includePOTotals)
    {
        Markup markup = new Markup(_vendInvoiceInfoLine.CurrencyCode);
        VendInvoiceInfoMarkupMatchingTolerance  vendInvoiceInfoMarkupMatchingTolerance;
        PurchLine purchLine = _vendInvoiceInfoLine.purchLine();
        MarkupTrans markupTrans;
        MarkupTable markupTable;
        PurchQty qty;
        AmountCur amount, intercompanyAmount, invoiceAmount, purchAmount;
        MarkupMatchingTrans markupMatchingTrans;
        MarkupCode purchMarkupCode;
        MarkupCurrencyConverted purchCurrencyConverted;

        qty = _vendInvoiceInfoLine.ReceiveNow;
        amount = _vendInvoiceInfoLine.lineAmountExclTax(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), _tax);
        intercompanyAmount = purchLine.interCompanyLineAmount(qty, purchLine.DeliveryDate, _tax);

        while select markupTrans
            where markupTrans.TransTableId == _vendInvoiceInfoLine.TableId &&
                  markupTrans.TransRecId == _vendInvoiceInfoLine.RecId &&
                 !markupTrans.IsDeleted
            exists join markupTable
                where markupTable.ModuleType == markupTrans.ModuleType
                    && markupTable.MarkupCode == markupTrans.MarkupCode
                    && (markupTable.CustType == MarkupType::CustVend || MarkupTable.VendType == MarkupType::CustVend)
                    && (markupTable.UseInMatching == _includePOTotals || markupTable.UseInMatching == NoYes::Yes)
        {
            if (VendParameters::find().UseMiscChargeMatching == NoYes::Yes
                && !VendInvoiceInfoMarkupMatchingTolerance::find(_vendInvoiceInfoLine.ParmId, _vendInvoiceInfoLine.TableRefId, markupTrans.MarkupCode))
            {
                continue;
            }

            invoiceAmount = Markup::calcMarkupAmount(markupTrans, qty, amount, intercompanyAmount, markup.isInclTax(_vendInvoiceInfoLine), NoYes::Yes);

            if (_includePOTotals)
            {
                select ExpectedMarkupCode, ExpectedMarkup, CurrencyConverted from markupMatchingTrans
                    where markupMatchingTrans.TransTableId  == markupTrans.TransTableId
                       && markupMatchingTrans.TransRecId    == markupTrans.TransRecId
                       && markupMatchingTrans.LineNum       == markupTrans.LineNum;

                purchAmount = 0;
                purchMarkupCode = '';
                if (markupMatchingTrans)
                {
                    purchAmount = markupMatchingTrans.ExpectedMarkup;
                    purchMarkupCode = markupMatchingTrans.ExpectedMarkupCode;
                    purchCurrencyConverted = markupMatchingTrans.CurrencyConverted;
                }
            }
            if (_includePOTotals == NoYes::No && invoiceAmount == 0)
            {
                _details.clear();
            }
            else
            {
                _details.writeDetail(MarkupTransactionType::InvoiceLine, invoiceAmount, markupTrans.MarkupCode, purchAmount,
                    purchMarkupCode, _vendInvoiceInfoLine.OrigPurchId, _vendInvoiceInfoLine.ItemId, _vendInvoiceInfoLine.LineNum, _vendInvoiceInfoLine.ParmId,
                    _vendInvoiceInfoLine.TableRefId, _vendInvoiceInfoLine.RecId, purchCurrencyConverted);
            }
        }

        return [qty, amount, intercompanyAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalVendInvoiceInfoSubTable</Name>
				<Source><![CDATA[
    private container totalVendInvoiceInfoSubTable(Tax _tax, MarkupTmpDetails _details, VendInvoiceInfoSubTable _vendInvoiceInfoSubTable, CurrencyCode _currencyCode, NoYes _includePOTotals)
    {
        Markup markup = new Markup(_currencyCode);
        VendInvoiceInfoMarkupMatchingTolerance  vendInvoiceInfoMarkupMatchingTolerance;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        MarkupTrans markupTrans;
        MarkupTable markupTable;
        PurchQty qty, totalQty = 0;
        AmountCur amount, totalAmount, invoiceAmount, purchAmount = 0;
        MarkupMatchingTrans markupMatchingTrans;
        AmountCur interCompanyAmount, totalIntercompanyAmount = 0;
        MarkupCode purchMarkupCode;
        MarkupCurrencyConverted purchCurrencyConverted;

        while select vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == _vendInvoiceInfoSubTable.ParmId &&
                  vendInvoiceInfoLine.TableRefId == _vendInvoiceInfoSubTable.TableRefId &&
                  vendInvoiceInfoLine.OrigPurchId == _vendInvoiceInfoSubTable.OrigPurchId &&
                  vendInvoiceInfoLine.ReceiveNow != 0
        {
            [qty, amount, interCompanyAmount] = this.totalVendInvoiceInfoLine(_tax, _details, vendInvoiceInfoLine, _includePOTotals);
            totalQty += qty;
            totalAmount += amount;
            totalIntercompanyAmount += interCompanyAmount;
        }

        while select markupTrans
            where markupTrans.TransTableId == _vendInvoiceInfoSubTable.TableId &&
                  markupTrans.TransRecId == _vendInvoiceInfoSubTable.RecId &&
                 !markupTrans.IsDeleted
            exists join markupTable
                where markupTable.ModuleType == markupTrans.ModuleType
                    && markupTable.MarkupCode == markupTrans.MarkupCode
                    && (markupTable.CustType == MarkupType::CustVend || MarkupTable.VendType == MarkupType::CustVend)
                    && (markupTable.UseInMatching == _includePOTotals || markupTable.UseInMatching == NoYes::Yes)
        {
            if (VendParameters::find().UseMiscChargeMatching == NoYes::Yes
                && !VendInvoiceInfoMarkupMatchingTolerance::find(_vendInvoiceInfoSubTable.ParmId, _vendInvoiceInfoSubTable.TableRefId, markupTrans.MarkupCode))
            {
                continue;
            }

            invoiceAmount = Markup::calcMarkupAmount(markupTrans, totalQty, totalAmount, totalIntercompanyAmount, markup.isInclTax(_vendInvoiceInfoSubTable), NoYes::Yes);
            if (_includePOTotals)
            {
                select ExpectedMarkupCode, ExpectedMarkup, CurrencyConverted from markupMatchingTrans
                     where markupMatchingTrans.TransTableId == markupTrans.TransTableId
                        && markupMatchingTrans.TransRecId   == markupTrans.TransRecId
                        && markupMatchingTrans.LineNum      == markupTrans.LineNum;

                purchAmount = 0;
                purchMarkupCode = '';
                if (markupMatchingTrans)
                {
                    purchAmount = markupMatchingTrans.ExpectedMarkup;
                    purchMarkupCode = markupMatchingTrans.ExpectedMarkupCode;
                    purchCurrencyConverted = markupMatchingTrans.CurrencyConverted;
                }
            }

            if (_includePOTotals == NoYes::No && invoiceAmount == 0)
            {
                _details.clear();
            }
            else
            {
                _details.writeDetail(MarkupTransactionType::InvoiceHeader, invoiceAmount, markupTrans.MarkupCode, purchAmount, purchMarkupCode,
                    _vendInvoiceInfoSubTable.OrigPurchId, '', 0, _vendInvoiceInfoSubTable.ParmId, _vendInvoiceInfoSubTable.TableRefId, 0, purchCurrencyConverted );
            }
        }

        return [totalQty, totalAmount, totalIntercompanyAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    private container totalVendInvoiceInfoTable(MarkupTmpDetails _details, VendInvoiceInfoTable _vendInvoiceInfoTable, NoYes _includePOTotals)
    {
        Markup markup = new Markup(_vendInvoiceInfoTable.CurrencyCode);
        VendInvoiceInfoMarkupMatchingTolerance vendInvoiceInfoMarkupMatchingTolerance;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        MarkupTrans markupTrans;
        MarkupTable markupTable;
        PurchQty qty, totalQty = 0;
        AmountCur amount, totalAmount, invoiceAmount = 0;
        AmountCur intercompanyAmount, totalIntercompanyAmount = 0;
        PurchTotals purchTotals;
        Tax tax;

        if (_vendInvoiceInfoTable.InclTax)
        {
            // totals are only needed if price includes tax
            purchTotals = PurchTotals::newParmTable(
                _vendInvoiceInfoTable,
                PurchUpdate::All,
                _vendInvoiceInfoTable.ParmId,
                _vendInvoiceInfoTable.PurchId,
                _vendInvoiceInfoTable.Ordering);

            purchTotals.calc(false, false, true);
            tax = purchTotals.tax();
        }

        while select vendInvoiceInfoSubTable
            where vendInvoiceInfoSubTable.ParmId == _vendInvoiceInfoTable.ParmId
                && vendInvoiceInfoSubTable.TableRefId == _vendInvoiceInfoTable.TableRefId
                && (_includePOTotals == NoYes::No || vendInvoiceInfoSubTable.OrigPurchId != '')
        {
            [qty, amount, intercompanyAmount] = this.totalVendInvoiceInfoSubTable(tax, _details, vendInvoiceInfoSubTable, _vendInvoiceInfoTable.CurrencyCode, _includePOTotals);
            totalQty += qty;
            totalAmount += amount;
            totalIntercompanyAmount += intercompanyAmount;
        }

        if (_includePOTotals == NoYes::Yes && _vendInvoiceInfoTable.isNonPO())
        {
            return [0, 0, 0];
        }

        while select markupTrans
            where markupTrans.TransTableId == _vendInvoiceInfoTable.TableId
                && markupTrans.TransRecId == _vendInvoiceInfoTable.RecId
                && !markupTrans.IsDeleted
            exists join markupTable
                where markupTable.ModuleType == markupTrans.ModuleType
                    && markupTable.MarkupCode == markupTrans.MarkupCode
                    && (markupTable.CustType == MarkupType::CustVend || MarkupTable.VendType == MarkupType::CustVend)
                    && (markupTable.UseInMatching == _includePOTotals || markupTable.UseInMatching == NoYes::Yes)
        {
            if (VendParameters::find().UseMiscChargeMatching == NoYes::Yes
                && !VendInvoiceInfoMarkupMatchingTolerance::find(_vendInvoiceInfoTable.ParmId, _vendInvoiceInfoTable.TableRefId, markupTrans.MarkupCode))
            {
                continue;
            }

            invoiceAmount = Markup::calcMarkupAmount(markupTrans, totalQty, totalAmount, totalIntercompanyAmount, markup.isInclTax(_vendInvoiceInfoTable), NoYes::Yes);

            // Arranged misc charges can not be connected to purchase orders, so we only pass invoice information.
            if (_includePOTotals == NoYes::No && invoiceAmount == 0 )
            {
                _details.clear();
            }
            else
            {
                _details.writeDetail(
                    MarkupTransactionType::ArrangedInvoiceHeader,
                    invoiceAmount,
                    markupTrans.MarkupCode,
                    0,
                    '',
                    _vendInvoiceInfoTable.PurchId,
                    '',
                    0,
                    _vendInvoiceInfoTable.ParmId,
                    _vendInvoiceInfoTable.TableRefId,
                    0,
                    NoYes::No);
            }
        }

        return [totalQty, totalAmount, totalIntercompanyAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>varianceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the difference between the sum of the invoice line miscellaneous charges and
    /// the purchase order line miscellaneous charges.
    /// </summary>
    /// <returns>
    /// The difference between the sum of the invoice line miscellaneous charges and the purchase order
    /// line miscellaneous charges.
    /// </returns>
    /// <remarks>
    /// Equivalent miscellaneous charges on the invoice line and purchase order line data are consolidated.
    /// </remarks>
    public display AmountCur varianceAmount()
    {
        return this.PurchParmCalculatedAmount - this.PurchCalculatedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>variancePercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the difference between the invoice miscellaneous charges and the purchase
    /// order miscellaneous charges expressed as a percentage.
    /// </summary>
    /// <returns>
    /// The difference between the invoice miscellaneous charges and the purchase order miscellaneous
    /// charges.
    /// </returns>
    /// <remarks>
    /// Equivalent miscellaneous charges on the invoice line and purchase order line data are consolidated.
    /// </remarks>
    public display Percent variancePercent()
    {
        if (this.PurchCalculatedAmount < 0)
        {
            return percent(this.PurchCalculatedAmount - this.PurchParmCalculatedAmount,this.PurchCalculatedAmount);
        }

        if (this.PurchCalculatedAmount == 0 && this.PurchParmCalculatedAmount < 0)
        {
            return -maxUIPercent();
        }

        if (this.PurchCalculatedAmount > 0)
        {
            return percent(this.PurchParmCalculatedAmount - this.PurchCalculatedAmount, this.PurchCalculatedAmount);
        }

        if (this.PurchCalculatedAmount == 0 && this.PurchParmCalculatedAmount > 0)
        {
            return maxUIPercent();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalInvoiceMatchingInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the invoice total miscellaneous charge is within tolerance.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    ///    The invoice to consolidate.
    /// </param>
    /// <param name="_includePOTotals">
    ///    A <c>NoYes</c> enumeration value that indicates whether the invoice miscellaneous charges should be
    ///    compared to purchase order miscellaneous charges.
    /// </param>
    /// <returns>
    ///    A container with a Boolean value that identifies whether the invoice is within all miscellaneous
    ///    charge code tolerances, a warning icon, the total invoice miscellaneous charge, and the total
    ///    connected purchase order miscellaneous charge.
    /// </returns>
    public static container totalInvoiceMatchingInfo(VendInvoiceInfoTable _vendInvoiceInfoTable, NoYes _includePOTotals)
    {
        MarkupTmpTotals markupTmpTotals;
        MarkupTmpDetails markupTmpDetails;
        AmountCur totalPurchParmCalculatedAmount;
        AmountCur totalPurchCalculatedAmount;
        boolean isMatched = true;
        LastMatchVarianceOptions matchStatus = LastMatchVarianceOptions::OK;
        VendParameters vendParameters = VendParameters::find();

        if (vendParameters.UseMiscChargeMatching == NoYes::Yes)
        {
            markupTmpTotals.buildTemp(_vendInvoiceInfoTable, markupTmpTotals, markupTmpDetails, _includePOTotals);
            while select markupTmpTotals
            {
                totalPurchCalculatedAmount += markupTmpTotals.PurchCalculatedAmount;
                totalPurchParmCalculatedAmount += markupTmpTotals.PurchParmCalculatedAmount;
                if (_includePOTotals == NoYes::Yes && markupTmpTotals.checkIfMatched() == false)
                {
                    isMatched = false;
                    matchStatus = LastMatchVarianceOptions::Warning;
                }
            }
        }

        return [isMatched, matchStatus, totalPurchParmCalculatedAmount, totalPurchCalculatedAmount];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Markup</ConfigurationKey>
	<Label>@SYS119042</Label>
	<ClusteredIndex>MarkupCode</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex>MarkupCode</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchParmMarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupTolerancePercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchCalculatedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchParmCalculatedAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MarkupTolerancePercentage</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MarkupVariancePercent</ExtendedDataType>
			<Label>@SYS134932</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchCalculatedAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS134717</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchParmCalculatedAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS134716</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchParmMarkupCode</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MarkupCode</ExtendedDataType>
			<Label>@SYS134739</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransTxt</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>MarkupCode</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchParmMarkupCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>MarkupTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>MarkupTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchParmMarkupCode</Name>
					<Field>PurchParmMarkupCode</Field>
					<RelatedField>MarkupCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>ModuleType_Extern</Name>
					<RelatedField>ModuleType</RelatedField>
					<ValueStr>MarkupModuleType::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>