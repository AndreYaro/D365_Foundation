<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTestCertOfAnalysisTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTestCertOfAnalysisTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAccountRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the value in the <c>AccountRelation</c> field is valid.
    /// </summary>
    /// <returns>
    ///    true if the value is valid; otherwise, false.
    /// </returns>
    boolean checkAccountRelation()
    {
        if (!this.AccountRelation)
        {
            return true;
        }

        switch (this.ReferenceType)
        {
            case InventTestReferenceType::Sales:
                if (!CustTable::exist(this.AccountRelation))
                {
                    return false;
                }
                break;
            case InventTestReferenceType::Purch:
                if (!VendTable::exist(this.AccountRelation))
                {
                    return false;
                }
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkContactPerson</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the value in the contact person field is valid.
    /// </summary>
    /// <param name="_showError">
    ///    A Boolean value that indicates whether errors should be shown in the Infolog if they exist;
    ///    optional.
    /// </param>
    /// <returns>
    ///    true if the value is valid; otherwise, false.
    /// </returns>
    boolean checkContactPerson(boolean _showError = true)
    {
        ContactPerson   contactPerson;

        if (this.ContactPersonId)
        {
            if (!this.AccountRelation)
            {
                if (_showError)
                {
                    return checkFailed("@SYS114309");
                }
                return false;
            }

            contactPerson = ContactPerson::find(this.ContactPersonId);
            switch (this.ReferenceType)
            {
                case InventTestReferenceType::Sales:
                    if (!contactPerson || contactPerson.getCustAccount() != this.AccountRelation)
                    {
                        if (_showError)
                        {
                            return checkFailed(strFmt("@SYS92800",this.ContactPersonId,contactPerson.personName(),this.AccountRelation));
                        }
                        return false;
                    }
                    break;
                case InventTestReferenceType::Purch:
                    if (!contactPerson || contactPerson.getVendAccount() != this.AccountRelation)
                    {
                        if (_showError)
                        {
                            return checkFailed(strFmt("@SYS114308",this.ContactPersonId,contactPerson.personName(),this.AccountRelation));
                        }
                        return false;
                    }
                    break;
                default:
                    if (_showError)
                    {
                        return checkFailed("@SYS114309");
                    }
                    return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates lines and result lines for this record.
    /// </summary>
    void createLineResults()
    {
        DocuRef                             docuRef;
        InventTestCertOfAnalysisLineResults inventTestCertOfAnalysisLineResults;
        InventQualityOrderLineResults       inventQualityOrderLineResults;
        InventTestCertOfAnalysisLine        inventTestCertOfAnalysisLine;
        InventQualityOrderLine              inventQualityOrderLine;
        InventCertificateOfAnalysisId       inventCertificateOfAnalysisId = this.InventCertificateOfAnalysisId;

        insert_recordset  inventTestCertOfAnalysisLine
        (
            InventCertificateOfAnalysisId, TestId, TestSequence,
            TestResult, StandardValue, LowerLimit, UpperLimit, UpperTolerance, LowerTolerance,
            VariableOutcomeIdStandard, TestUnitId
        )
        select
            inventCertificateOfAnalysisId, TestId, TestSequence,
            TestResult, StandardValue, LowerLimit, UpperLimit, UpperTolerance, LowerTolerance,
            VariableOutcomeIdStandard, TestUnitId
            from inventQualityOrderLine
                where inventQualityOrderLine.QualityOrderId                 == this.QualityOrderId
                   && inventQualityOrderLine.CertificateOfAnalysisReport    == NoYes::Yes;

        insert_recordset  inventTestCertOfAnalysisLineResults
        (
            InventCertificateOfAnalysisId, TestId, TestSequence, LineNum,
            TestResultValueOutcome, TestResultValueReal, TestResult, TestResultQuantity
        )
        select
            inventCertificateOfAnalysisId, TestId, TestSequence, LineNum,
            TestResultValueOutcome, TestResultValueReal, TestResult, TestResultQuantity
            from inventQualityOrderLineResults
                where inventQualityOrderLineResults.QualityOrderId  == this.QualityOrderId
                exists join inventQualityOrderLine
                    where inventQualityOrderLine.QualityOrderId                 == this.QualityOrderId
                       && inventQualityOrderLine.TestSequence                   == inventQualityOrderLineResults.TestSequence
                       && inventQualityOrderLine.CertificateOfAnalysisReport    == NoYes::Yes;

        // Copy notes for both order line and results
        while select docuRef
            join RecId, TestSequence, TestId from inventQualityOrderLine
            where docuRef.RefTableId == tableNum(InventQualityOrderLine)
               && inventQualityOrderLine.QualityOrderId                 == this.QualityOrderId
               && inventQualityOrderLine.CertificateOfAnalysisReport    == NoYes::Yes
               && inventQualityOrderLine.RecId                          == docuRef.RefRecId
        {
            inventTestCertOfAnalysisLine = InventTestCertOfAnalysisLine::find(this.InventCertificateOfAnalysisId,
                                                                              inventQualityOrderLine.TestSequence,
                                                                              inventQualityOrderLine.TestId);
            DocuRef::createFromDocuRef(docuRef, inventTestCertOfAnalysisLine.RecId, tableNum(InventTestCertOfAnalysisLine));
        }

        while select docuRef
            join RecId, TestSequence, TestId from inventQualityOrderLineResults
            where docuRef.RefTableId == tableNum(InventQualityOrderLineResults)
               && inventQualityOrderLineResults.QualityOrderId                   == this.QualityOrderId
               && inventQualityOrderLineResults.RecId                            == docuRef.RefRecId
                exists join inventQualityOrderLine
                    where inventQualityOrderLine.QualityOrderId                 == this.QualityOrderId
                       && inventQualityOrderLine.TestSequence                   == inventQualityOrderLineResults.TestSequence
                       && inventQualityOrderLine.CertificateOfAnalysisReport    == NoYes::Yes
        {
            inventTestCertOfAnalysisLineResults = InventTestCertOfAnalysisLineResults::find(this.InventCertificateOfAnalysisId,
                                                                                            inventQualityOrderLineResults.TestSequence,
                                                                                            inventQualityOrderLineResults.TestId);
            DocuRef::createFromDocuRef(docuRef, inventTestCertOfAnalysisLineResults.RecId, tableNum(InventTestCertOfAnalysisLineResults));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the email address for the specified customer or vendor.
    /// </summary>
    /// <returns>
    /// The email address; otherwise, an empty string.
    /// </returns>

    display Email custVendEmail()
    {
        CustVendTable   custVendTable   = this.custVendTable();

        if (!custVendTable.RecId)
        {
            return '';
        }

        return custVendTable.CustVendTable::email();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the name of the specified customer or vendor.
    /// </summary>
    /// <returns>
    ///    The costumer or vendor name; otherwise, an empty string.
    /// </returns>

    display CustVendName custVendName()
    {
        CustVendTable   custVendTable   = this.custVendTable();

        if (!custVendTable.RecId)
        {
            return '';
        }

        return custVendTable.CustVendTable::name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendPhone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the phone number for the specified customer or vendor.
    /// </summary>
    /// <returns>
    /// The costumer or vendor phone number; otherwise, an empty string.
    /// </returns>

    display Phone custVendPhone()
    {
        CustVendTable   custVendTable   = this.custVendTable();

        if (!custVendTable.RecId)
        {
            return '';
        }

        return custVendTable.CustVendTable::phone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>CustVendTable</c> map that matches this record.
    /// </summary>
    /// <returns>
    ///    The <c>CustVendTable</c> map; otherwise an empty map.
    /// </returns>
    CustVendTable custVendTable()
    {
        CustTable   custTableNull;

        if (!this.AccountRelation)
        {
            return custTableNull;
        }

        if (hasFieldAccess( tableNum(InventTestCertOfAnalysisTable),
                            fieldNum(InventTestCertOfAnalysisTable, AccountRelation),
                            AccessType::View))
        {
            switch (this.ReferenceType)
            {
                case InventTestReferenceType::Sales:
                    return CustTable::find(this.AccountRelation);
                case InventTestReferenceType::Purch:
                    return VendTable::find(this.AccountRelation);
            }
        }
        return custTableNull;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTeleFax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fax number for the specified customer or vendor.
    /// </summary>
    /// <returns>
    /// The costumer or vendor fax number; otherwise, an empty string.
    /// </returns>

    display TeleFax custVendTeleFax()
    {
        CustVendTable   custVendTable   = this.custVendTable();

        if (!custVendTable.RecId)
        {
            return '';
        }

        return custVendTable.CustVendTable::telefax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides of standard delete method and ensures that lines and results are deleted too.
    /// </summary>
    public void delete()
    {
        InventTestCertOfAnalysisLine        inventTestCertOfAnalysisLine;
        InventTestCertOfAnalysisLineResults inventTestCertOfAnalysisLineResults;

        ttsbegin;

        delete_from inventTestCertOfAnalysisLine
            where inventTestCertOfAnalysisLine.InventCertificateOfAnalysisId        == this.InventCertificateOfAnalysisId;

        delete_from inventTestCertOfAnalysisLineResults
            where inventTestCertOfAnalysisLineResults.InventCertificateOfAnalysisId == this.InventCertificateOfAnalysisId;

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editContactPersonName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the contact person ID field.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that determines whether the contact person ID is set.
    /// </param>
    /// <param name="_name">
    ///    The name of the contact person.
    /// </param>
    /// <returns>
    ///    The new contact person name when <paramref name="_set" /> is true.
    /// </returns>

    [SysClientCacheDataMethodAttribute]
    edit ContactPersonName  editContactPersonName(boolean _set, ContactPersonName _name)
    {
        ContactPersonName   name = _name;
        ContactPerson       contactPerson;
        ContactPersonId     contactPersonId;

        if (_set)
        {
            if (name)
            {
                contactPersonId = this.ContactPersonId;
                contactPerson = ContactPerson::find(_name);
                this.ContactPersonId = contactPerson.ContactPersonId;

                if (this.ContactPersonId)
                {
                    name = contactPerson.personName();
                }
                else
                {
                    contactPerson = this.getContactPersonFromName(name);
                    if (contactPerson)
                    {
                        this.ContactPersonId=contactPerson.ContactPersonId;
                        name=contactPerson.personName();
                    }
                    else
                    {
                        name = '';
                    }
                }

                if (contactPersonId != this.ContactPersonId)
                {
                    if (this.checkContactPerson())
                    {
                        if (FormDataUtil::getFormDataSource(this))
                        {
                            FormDataUtil::getFormDataSource(this).refresh();
                        }
                    }
                    else
                    {
                        this.ContactPersonId = contactPersonId;
                    }
                }
            }
            else
            {
                this.ContactPersonId='';
            }
        }
        else
        {
            name = ContactPerson::name(this.ContactPersonId);
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContactPersonFromName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>ContactPerson</c> record based on the contact person name.
    /// </summary>
    /// <param name="_name">
    ///    The contact person name.
    /// </param>
    /// <returns>
    ///    A record in the <c>ContactPerson</c> table; otherwise, an empty record.
    /// </returns>
    ContactPerson getContactPersonFromName(ContactPersonName _name)
    {
        ContactPerson   contactPerson;
        DirPartyTable   partyTable;

        switch (this.ReferenceType)
        {
            case InventTestReferenceType::Sales:
                CustTable       custTable;

                select contactPerson
                    exists join custTable
                        where custTable.AccountNum == this.AccountRelation &&
                                custTable.Party == contactPerson.ContactForParty
                    exists join partyTable
                          where partyTable.RecId == contactPerson.Party &&
                                partyTable.Name        like _name;
                break;
            case InventTestReferenceType::Purch:
                VendTable       vendTable;

                select contactPerson
                    exists join vendTable
                        where vendTable.AccountNum == this.AccountRelation &&
                                vendTable.Party == contactPerson.ContactForParty
                    exists join partyTable
                          where partyTable.RecId == contactPerson.Party &&
                                partyTable.Name        like _name;
                break;
        }
        return contactPerson;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initContactPersonId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the contact person ID based on the <c>AccountRelation</c> field.
    /// </summary>
    void initContactPersonId()
    {
        switch (this.ReferenceType)
        {
            case InventTestReferenceType::Sales:
                this.ContactPersonId    = CustTable::find(this.AccountRelation).ContactPersonId;
                break;
            case InventTestReferenceType::Purch:
                this.ContactPersonId    = VendTable::find(this.AccountRelation).ContactPersonId;
                break;
            default:
                this.ContactPersonId    = '';
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the record based on the specified reference record.
    /// </summary>
    /// <param name="_callerBuffer">
    ///    The reference record from which to initialize.
    /// </param>
    void initFromCaller(Common _callerBuffer)
    {
        switch (_callerBuffer.TableId)
        {
            case (tableNum(InventQualityOrderTable))   :
                this.initFromInventQualityOrderTable(_callerBuffer as InventQualityOrderTable);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventQualityOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the record based on the specified <c>InventQualityOrderTable</c> record.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    ///    The <c>InventQualityOrderTable</c> record from which to initialize.
    /// </param>
    void initFromInventQualityOrderTable(InventQualityOrderTable    _inventQualityOrderTable)
    {
        if (!_inventQualityOrderTable)
        {
            warning("@SYS114306");
            return;
        }

        this.QualityOrderId         = _inventQualityOrderTable.QualityOrderId;
        this.ItemId                 = _inventQualityOrderTable.ItemId;
        this.InventDimId            = _inventQualityOrderTable.InventDimId;
        this.RouteId                = _inventQualityOrderTable.RouteId;
        this.InventRefTransId       = _inventQualityOrderTable.InventRefTransId;
        this.InventRefId            = _inventQualityOrderTable.InventRefId;
        this.ReferenceType          = _inventQualityOrderTable.ReferenceType;
        this.AccountRelation        = _inventQualityOrderTable.AccountRelation;
        this.initContactPersonId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the standard insert method.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The certificate of analysis ID is missing.
    /// </exception>
    public void insert()
    {
        if (!this.InventCertificateOfAnalysisId)
        {
            throw error("@SYS114355");
        }

        ttsbegin;

        if (!this.InventDimId)
        {
            this.InventDimId    = InventDim::inventDimIdBlank();
        }

        super();

        this.createLineResults();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTable</c> record that is related to this record.
    /// </summary>
    /// <returns>
    ///    An <c>InventTable</c> record; otherwise, an empty record.
    /// </returns>
    InventTable inventTable()
    {
        return InventTable::find(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the item name for the item that is associated with this record.
    /// </summary>
    /// <returns>
    ///    An item name; otherwise, an empty string.
    /// </returns>

    display ItemName itemName()
    {
        if (hasFieldAccess( tableNum(InventTestCertOfAnalysisTable),
                            fieldNum(InventTestCertOfAnalysisTable, ItemId),
                            AccessType::View))
        {
            return this.inventTable().itemName();
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the standard <c>modifiedField</c> method and performs additional initialization.
    /// </summary>
    /// <param name="_fieldId">
    ///    The ID of the field that has been modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        boolean anyChangesMade = false;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventTestCertOfAnalysisTable, ReferenceType):
                if (!this.checkAccountRelation())
                {
                    this.AccountRelation = '';
                    anyChangesMade = true;
                }

                if (!this.checkContactPerson(false))
                {
                    this.ContactPersonId    = '';
                    anyChangesMade = true;
                }
                break;
            case fieldNum(InventTestCertOfAnalysisTable, AccountRelation):
                if (!this.checkContactPerson(false))
                {
                    this.ContactPersonId    = '';
                    anyChangesMade = true;
                }
                break;
            case fieldNum(InventTestCertOfAnalysisTable, QualityOrderId):
                this.initFromInventQualityOrderTable(InventQualityOrderTable::find(this.QualityOrderId));
                anyChangesMade = true;
                if (!this.checkContactPerson(false))
                {
                    this.ContactPersonId    = '';
                }
                break;
        }

        if (anyChangesMade && FormDataUtil::isFormDataSource(this))
        {
            FormDataUtil::getFormDataSource(this).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>InventTestCertOfAnalysisTable</c> table exists.
    /// </summary>
    /// <param name="_inventCertificateOfAnalysisId">
    ///    The certificate of analysis ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    static boolean exist(InventCertificateOfAnalysisId _inventCertificateOfAnalysisId)
    {
        return _inventCertificateOfAnalysisId &&
            (select  firstonly   inventTestCertOfAnalysisTable
             where  inventTestCertOfAnalysisTable.InventCertificateOfAnalysisId == _inventCertificateOfAnalysisId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>InventTestCertOfAnalysisTable</c> table.
    /// </summary>
    /// <param name="_inventCertificateOfAnalysisId">
    ///    The certificate of analysis ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>InventTestArea</c> table; otherwise, an empty record.
    /// </returns>
    static InventTestCertOfAnalysisTable find(
        InventCertificateOfAnalysisId   _inventCertificateOfAnalysisId,
        boolean                         _forUpdate = false)
    {
        InventTestCertOfAnalysisTable   inventTestCertOfAnalysisTable;

        inventTestCertOfAnalysisTable.selectForUpdate(_forUpdate);

        if (_inventCertificateOfAnalysisId)
        {
            select firstonly    inventTestCertOfAnalysisTable
            where   inventTestCertOfAnalysisTable.InventCertificateOfAnalysisId == _inventCertificateOfAnalysisId;
        }

        return inventTestCertOfAnalysisTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>InventQualityManagement</ConfigurationKey>
	<DeveloperDocumentation>@SYS124065</DeveloperDocumentation>
	<Label>@SYS113621</Label>
	<SingularLabel>@SYS113621</SingularLabel>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>InventCertificateOfAnalysisId</TitleField1>
	<TitleField2>QualityOrderId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>CertificateOfAnalysisIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>CertificateOfAnalysisIdIdx</PrimaryIndex>
	<ReplacementKey>CertificateOfAnalysisIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventTestCertOfAnalysisLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventTestCertOfAnalysisLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventCertificateOfAnalysisId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QualityOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReferenceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventCertificateOfAnalysisId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccounSelection</Name>
			<Label>@SYS2355</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editContactPersonName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventCertificateOfAnalysisId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventCertificateOfAnalysisId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QualityOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QualityOrder</Name>
			<Label>@SYS113617</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QualityOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReferenceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReportAccount</Name>
			<Label>@SYS265</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>custVendName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editContactPersonName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>custVendPhone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>custVendTeleFax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>custVendEmail</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReportItem</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountRelation</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTestAccountRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventCertificateOfAnalysisId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventCertificateOfAnalysisId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventRefTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QualityOrderId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventQualityOrderId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReferenceType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>InventTestReferenceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RouteId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RouteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CertificateOfAnalysisIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventCertificateOfAnalysisId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>QualityOrderIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>QualityOrderId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ReferenceType</Name>
					<Field>ReferenceType</Field>
					<ValueStr>InventTestReferenceType::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountRelation</Name>
					<Field>AccountRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventQualityOrderTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventQualityOrderTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QualityOrderId</Name>
					<Field>QualityOrderId</Field>
					<RelatedField>QualityOrderId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>QualityOrderIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteId</Name>
					<Field>RouteId</Field>
					<RelatedField>RouteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123843</EntityRelationshipRole>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ReferenceType</Name>
					<Field>ReferenceType</Field>
					<ValueStr>InventTestReferenceType::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefTransId</Name>
					<Field>InventRefTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123519</EntityRelationshipRole>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ReferenceType</Name>
					<Field>ReferenceType</Field>
					<ValueStr>InventTestReferenceType::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ReferenceType</Name>
					<Field>ReferenceType</Field>
					<ValueStr>InventTestReferenceType::Purch</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountRelation</Name>
					<Field>AccountRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>