<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalControlHeader</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalControlHeader extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the current record from the <c>LedgerJournalControlHeader</c> table.
    /// </summary>
    public void delete()
    {
        LedgerJournalControlDetail  journalControlDetail;

        // delete the associated detail records prior to deletion of this record
        delete_from
            journalControlDetail
        where
            journalControlDetail.LedgerJournalControl == this.RecId;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCompanyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the company ID.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set the company ID.
    /// </param>
    /// <param name="_dataAreaId">
    ///    The new company ID when the <paramref name="_set" /> parameter is true.
    /// </param>
    /// <returns>
    ///    The current company ID that corresponds to the record ID of the <c>JournalLegalEntity</c> record
    ///    from the <c>LedgerJournalControlHeader</c> table.
    /// </returns>
    public edit CompanyIdAll editCompanyId(boolean _set, CompanyIdAll _dataAreaId)
    {
        CompanyIdAll  dataAreaId = _dataAreaId;
        CompanyInfo companyInfo;

        if (_set)
        {
            if (_dataAreaId == "@SYS307001")    // <All>
            {
                this.JournalLegalEntity = 0;
            }
            else
            {
                select firstonly RecId from companyInfo
                    where companyInfo.DataArea == _dataAreaId;

                this.JournalLegalEntity = companyInfo.RecId;
            }
        }
        else
        {
            select firstonly DataArea, RecId from companyInfo
                where companyInfo.RecId == this.JournalLegalEntity;

            if (companyInfo.RecId != 0)
            {
                dataAreaId = companyInfo.DataArea;
            }
            else
            {
                dataAreaId = "@SYS307001";    // <All>
            }
        }

        return dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>LedgerJournalControlHeader</c> table; if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>LedgerJournalControlHeader</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean isExisiting = true;

        if (!LedgerJournalControlHeader::exist(_recId))
        {
            isExisiting = checkFailed(strFmt(LedgerJournalControlHeader::txtNotExist(), _recId));
        }

        return isExisiting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the <c>LedgerJournalControlHeader</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>LedgerJournalControlHeader</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        return _recId && (select firstonly RecId from ledgerJournalControlHeader
                    where ledgerJournalControlHeader.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>LedgerJournalControlHeader</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>LedgerJournalControlHeader</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>LedgerJournalControlHeader</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerJournalControlHeader find(
        recId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerJournalControlHeader ledgerJournalControlHeader;

        ledgerJournalControlHeader.selectForUpdate(_forUpdate);
        if (_forUpdate && (_concurrencyModel != ConcurrencyModel::Auto))
        {
            ledgerJournalControlHeader.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerJournalControlHeader
             where ledgerJournalControlHeader.RecId == _recId;

        return ledgerJournalControlHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByJournalNameCompanyAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LedgerJournalControlHeader</c> table by using unique key
    /// values.
    /// </summary>
    /// <param name="_journalName">
    /// The record ID of a <c>LedgerJournalName</c> record.
    /// </param>
    /// <param name="_journalLegalEntity">
    /// The record ID of a <c>CompanyInfo</c> record.
    /// </param>
    /// <param name="_accountType">
    /// A <c>LedgerJournalACTypeAll</c> value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerJournalControlHeader</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerJournalControlHeader findByJournalNameCompanyAccountType(
        LedgerJournalNameId     _journalName,
        RefRecId                _journalLegalEntity,
        LedgerJournalACTypeAll  _accountType,
        boolean                 _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerJournalControlHeader ledgerJournalControlHeader;

        ledgerJournalControlHeader.selectForUpdate(_forUpdate);
        if (_forUpdate && (_concurrencyModel != ConcurrencyModel::Auto))
        {
            ledgerJournalControlHeader.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerJournalControlHeader
            order by ledgerJournalControlHeader.JournalLegalEntity desc, ledgerJournalControlHeader.AccountType asc
            where
                ledgerJournalControlHeader.JournalName == _journalName &&
                (ledgerJournalControlHeader.AccountType == LedgerJournalACTypeAll::All ||
                    ledgerJournalControlHeader.AccountType == _accountType) &&
                (ledgerJournalControlHeader.JournalLegalEntity == 0 ||
                    ledgerJournalControlHeader.JournalLegalEntity == _journalLegalEntity);

        return ledgerJournalControlHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the specified combination for journal control restrictions.
    /// </summary>
    /// <param name="_ledgerLegalEntity">
    ///    The legal entity of the combination to validate.
    /// </param>
    /// <param name="_accountType">
    ///    The account type of the dynamic ledger dimension.
    /// </param>
    /// <param name="_ledgerDimension">
    ///    The record ID of the combination to validate.
    /// </param>
    /// <param name="_ledgerJournalNameId">
    ///    The natural key of the <c>LedgerJournalName</c> record that partially specifies the journal control.
    /// </param>
    /// <param name="_displayValidationMessage">
    ///    true to display warning messages on validation failures; otherwise, false.
    /// </param>
    /// <returns>
    ///    true if the combination passes journal control validation; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The ledger dimension is only validated when the account type is ledger. When an empty ledger
    ///    dimension is used, the detailed validation is bypassed and true returned.The <c>validateByTree</c>
    ///    method should be called first to detect structure changes.
    /// </remarks>
    static public boolean validate(
            CompanyId               _ledgerLegalEntity,
            LedgerJournalACType     _accountType,
            recId                   _ledgerDimension,
            LedgerJournalNameId     _ledgerJournalNameId,
            boolean                 _displayValidationMessage = false)
    {
        LedgerJournalControlHeader      ledgerJournalControlHeader;
        CompanyInfo                     companyInfo;
        LedgerJournalACTypeAll          accountTypeAll;
        recId                           ledgerLegalEntityId;

        // Validate input parameters
        if (!_ledgerLegalEntity || !_ledgerJournalNameId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // Check if any journal control header exists for the journal name
        select firstonly RecId from ledgerJournalControlHeader where ledgerJournalControlHeader.JournalName == _ledgerJournalNameId;
        if (ledgerJournalControlHeader.RecId == 0)
        {
            // No journal control restrictions for journal name: everything is valid
            return true;
        }

        // Lookup ledgal entity ID
        companyInfo = CompanyInfo::findDataArea(_ledgerLegalEntity);
        Debug::assert(companyInfo.RecId);
        ledgerLegalEntityId = companyInfo.RecId;

        // Cast to TypeAll (Note: All has value of 250, which is larger than all of the other values)
        accountTypeAll = enum2int(_accountType);

        // Find the most specific header record
        // (the order desc/asc by picks a specific legal entity before All (i.e. 0) and a specific account type before All)
        select firstonly RecId from ledgerJournalControlHeader
                order by ledgerJournalControlHeader.JournalLegalEntity desc, ledgerJournalControlHeader.AccountType asc
                where (ledgerJournalControlHeader.JournalName == _ledgerJournalNameId) &&
                    ((ledgerJournalControlHeader.JournalLegalEntity == 0) || (ledgerJournalControlHeader.JournalLegalEntity == ledgerLegalEntityId)) &&
                    ((ledgerJournalControlHeader.AccountType == LedgerJournalACTypeAll::All) || (ledgerJournalControlHeader.AccountType == accountTypeAll));

        // Validate the journal control restrictions
        if (ledgerJournalControlHeader.RecId == 0)
        {
            // A matching journal control was not found: invalid
            if (_displayValidationMessage)
            {
                // The ledger account combination %1 is not valid.  The journal control setup for the ledger account posting type does not match the ledger account.
                warning(strFmt("@SYS138933", LedgerDimensionFacade::getDisplayValueForLedgerDimension(_ledgerDimension)));
            }
            return false;
        }
        else
        {
            if (_accountType == LedgerJournalACType::Ledger)
            {
                if (_ledgerDimension == 0)
                {
                    // This is actually invalid, but validation at a higher level is expected to report this error.
                    return true;
                }
                else
                {
                    return DimensionValidationHelper::validateByJournalName(ledgerLegalEntityId, _ledgerDimension, _ledgerJournalNameId, ledgerJournalControlHeader.RecId, _displayValidationMessage);
                }
            }
            else
            {
                // Non-ledger accounts types have no further restrictions
                return true;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS306996</DeveloperDocumentation>
	<Label>@SYS23095</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>JournalName</TitleField1>
	<TitleField2>AccountType</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>AccountingFoundation</Modules>
	<ReplacementKey>JournalNameCompanyAccountType</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalLegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalLegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>LedgerJournalACTypeAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>JournalLegalEntity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalNameId</ExtendedDataType>
			<Label>@SYS35283</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalNameCompanyAccountType</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalLegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalName</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerJournalName</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalName</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>LedgerJournalControlHeader</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalName</Name>
					<SourceEDT>LedgerJournalNameId</SourceEDT>
					<Field>JournalName</Field>
					<RelatedField>JournalName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalNameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LegalEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalControlHeader</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalLegalEntity</Name>
					<Field>JournalLegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalControlDetail</Name>
			<RelatedTable>LedgerJournalControlDetail</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>LedgerJournalControl</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>