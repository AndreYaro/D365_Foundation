<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResCategoryHierarchyRole</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
public class EcoResCategoryHierarchyRole extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkForAttributeConversion</Name>
				<Source><![CDATA[
    private void checkForAttributeConversion()
    {
        if (EcoResCategoryHierarchyRole::isRetailRole(this.NamedCategoryHierarchyRole))
        {
            EcoResCategoryHierarchy::convertCategoryAttributesToGroups(this.CategoryHierarchy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailRole</Name>
				<Source><![CDATA[
    private static boolean isRetailRole(EcoResCategoryNamedHierarchyRole _role)
    {
        return isConfigurationkeyEnabled(configurationKeyNum(Retail))
            && (_role == EcoResCategoryNamedHierarchyRole::Retail
             || _role == EcoResCategoryNamedHierarchyRole::RetailSpecialGroup
             || _role == EcoResCategoryNamedHierarchyRole::RetailChannelNavigation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeRetailCategoryContainmentLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// If category hierarchy changed sync category lookup table.
    /// </summary>
    /// <param name="_originalRole">
    /// The category role in the <c>EcoResCategoryNamedHierarchyRole</c> table.
    /// </param>
    private void synchronizeRetailCategoryContainmentLookup(EcoResCategoryNamedHierarchyRole _originalRole = 0)
    {
        // Sync lookup table if current record is in Retail role.
        boolean isRetailHierarchyRole = EcoResCategoryHierarchyRole::isRetailRole(this.NamedCategoryHierarchyRole);

        // For update check if role was changed from Retail role to something else.
        if (!isRetailHierarchyRole && _originalRole != 0)
        {
            isRetailHierarchyRole = EcoResCategoryHierarchyRole::isRetailRole(_originalRole);
        }

        if (isRetailHierarchyRole)
        {
            RetailCategoryContainmentLookup::synchronizeCategoriesLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        this.checkForAttributeConversion();
        this.synchronizeRetailCategoryContainmentLookup();

    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        EcoResCategoryNamedHierarchyRole originalRole = this.orig().NamedCategoryHierarchyRole;
        super();
        this.checkForAttributeConversion();
        this.synchronizeRetailCategoryContainmentLookup(originalRole);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override for delete.
    /// Synchronizes Retail categories lookup table.
    /// </summary>
    public void delete()
    {
        super();
        this.synchronizeRetailCategoryContainmentLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean         canDelete;
        DialogButton    dialogButton = DialogButton::Yes;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && this.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Financials)
        {
            dialogButton = Box::yesNo(strfmt("@SPS1019",EcoResCategoryHierarchy::find(this.CategoryHierarchy).Name),
                            DialogButton::Yes, "@SPS2261");

            if (dialogButton == DialogButton::Yes)
            {
                LedgerDerivedFinHierarchyLegalEntities::deleteAllRelatedRecords(this.CategoryHierarchy);
                LedgerDerivedFinHierarchyLegalEntities::deleteAllAssociationRecords(this.CategoryHierarchy);
                canDelete = true;
            }

            else
            {
                canDelete = false;
            }
        }
        else if (EcoResCategoryHierarchyRole::isRetailRole(this.NamedCategoryHierarchyRole))
        {
            // Launches a dialog box that asks for confirmation of deleting retail hierarchy role
            canDelete = this.confirmRetailRoleDeletion(this.NamedCategoryHierarchyRole, this.CategoryHierarchy);
        }
        else
        {
            canDelete = super();
        }

        return canDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        EcoResCategoryHierarchyRole    ecoResCategoryHierarchyRole = null;
        EcoResCategoryHierarchyRole    oldEcoResCategoryHierarchyRole;
        boolean                        ret;
        EcoResCategoryNamedHierarchyRole conflictingRole;

        oldEcoResCategoryHierarchyRole = this.orig();

        ret = super();

        //hierarchy or role is being updated and the role doesn't support it.
        if (    ret
                && oldEcoResCategoryHierarchyRole.RecId != 0
                && !EcoResCategoryHierarchyRole::canChangeHierarchyRole(oldEcoResCategoryHierarchyRole.NamedCategoryHierarchyRole)
                && (oldEcoResCategoryHierarchyRole.CategoryHierarchy != this.CategoryHierarchy
                        ||  oldEcoResCategoryHierarchyRole.NamedCategoryHierarchyRole != this.NamedCategoryHierarchyRole) )
        {
            ret = checkFailed("@SYS301576");
        }

        //multiple hierarchies are getting assigned to a single role, and the role doesn't support it.
        if (ret && !EcoResCategoryHierarchyRole::canSupportMultipleHierarchies(this.NamedCategoryHierarchyRole))
        {
            select firstonly ecoResCategoryHierarchyRole
                where ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == this.NamedCategoryHierarchyRole
                    && ecoResCategoryHierarchyRole.RecId != this.RecId;

            if (ecoResCategoryHierarchyRole.RecId != 0
                    && (ecoResCategoryHierarchyRole.CategoryHierarchy != this.CategoryHierarchy) )
            {
                ret = checkFailed("@SYS318964");
            }
        }

        //hierarchy is being assigned to role which conflicts with existing role
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
            && ret)
        {
            if ((this.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Retail
                && EcoResCategoryHierarchyRole::existRoleHierarchyPair(EcoResCategoryNamedHierarchyRole::RetailChannelNavigation, this.CategoryHierarchy))
                || (this.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::RetailChannelNavigation
                && EcoResCategoryHierarchyRole::existRoleHierarchyPair(EcoResCategoryNamedHierarchyRole::Retail, this.CategoryHierarchy)))
            {
                warning(strFmt("@Retail:BothRetailAndChannelNavigationHierarchyRolesAssignedWarning", EcoResCategoryHierarchy::find(this.CategoryHierarchy).Name));
            }

            ret = this.validateConflictingRole();
        }

        // Launches a dialog box that asks for confirmation while modifying category hierarchy associated with retail role
        // or modifying retail role associated with category hierarchy
        if (ret && EcoResCategoryHierarchyRole::isRetailRole(oldEcoResCategoryHierarchyRole.NamedCategoryHierarchyRole)
                && (oldEcoResCategoryHierarchyRole.CategoryHierarchy != this.CategoryHierarchy
                || oldEcoResCategoryHierarchyRole.NamedCategoryHierarchyRole != this.NamedCategoryHierarchyRole))
        {
            ret = this.confirmRetailRoleDeletion(oldEcoResCategoryHierarchyRole.NamedCategoryHierarchyRole, oldEcoResCategoryHierarchyRole.CategoryHierarchy);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canChangeHierarchyRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a hierarchy that has a specified hierarchy role can be changed to another role.
    /// </summary>
    /// <param name="_ecoResNamedCategoryHierarchyRole">
    /// The category role in the <c>EcoResCategoryHierarchyRole</c> table.
    /// </param>
    /// <returns>
    /// true if the specified role can be changed; otherwise, false.
    /// </returns>
    public static boolean canChangeHierarchyRole(EcoResCategoryNamedHierarchyRole _ecoResNamedCategoryHierarchyRole)
    {
        boolean ret;

        switch (_ecoResNamedCategoryHierarchyRole)
        {
            case EcoResCategoryNamedHierarchyRole::Procurement:
            case EcoResCategoryNamedHierarchyRole::Sales:
            case EcoResCategoryNamedHierarchyRole::Financials:
                ret = false;
                break;
            default:
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSupportMultipleHierarchies</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether multiple hierarchies can be assigned to the specified role in the
    ///    <c>EcoResCategoryHierarchyRole</c> table.
    /// </summary>
    /// <param name="_ecoResNamedCategoryHierarchyRole">
    ///    The category role in the <c>EcoResCategoryHierarchyRole</c> table.
    /// </param>
    /// <returns>
    ///    true if the specified role can be assigned to multiple hierarchies; otherwise, false.
    /// </returns>
    public static boolean canSupportMultipleHierarchies(EcoResCategoryNamedHierarchyRole _ecoResNamedCategoryHierarchyRole)
    {
        boolean ret;

        switch (_ecoResNamedCategoryHierarchyRole)
        {
            case EcoResCategoryNamedHierarchyRole::Procurement,
                EcoResCategoryNamedHierarchyRole::Sales,
                EcoResCategoryNamedHierarchyRole::CommonDataService:
                    ret = false;
                    break;

            case EcoResCategoryNamedHierarchyRole::Retail:
                    if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                    {
                        ret = false;
                    }
                    break;

            case EcoResCategoryNamedHierarchyRole::PackingMaterials_W:
                    ret = false;
                    break;

            default:
                    ret = true;
                    break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified category exists in the <c>EcoResCategoryHierarchyRole</c> table; if
    ///    not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The ID of the <c>EcoResCategoryHierarchyRole</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false, and an error message is displayed.
    /// </returns>
    public static boolean checkExistByRecId(RefRecId _recId)
    {
        if (_recId && EcoResCategoryHierarchyRole::existByRecId(_recId))
        {
            return true;
        }

        return checkFailed(strfmt(EcoResCategoryHierarchyRole::txtNotExist(), _recId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistRole</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified category exists in the <c>EcoResCategoryHierarchyRole</c> table; if
    ///    not, an error message is displayed.
    /// </summary>
    /// <param name="_ecoResNamedCategoryHierarchyRole">
    ///    The category role in the <c>EcoResCategoryHierarchyRole</c> table to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false, and an error message is displayed.
    /// </returns>
    public static boolean checkExistRole(EcoResCategoryNamedHierarchyRole _ecoResNamedCategoryHierarchyRole)
    {
        if (_ecoResNamedCategoryHierarchyRole && EcoResCategoryHierarchyRole::existRole(_ecoResNamedCategoryHierarchyRole))
        {
            return true;
        }

        return checkFailed(strfmt(EcoResCategoryHierarchyRole::txtNotExist(), _ecoResNamedCategoryHierarchyRole));
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the <c>EcoResCategoryHierarchyRole</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The ID of the <c>EcoResCategoryHierarchyRole</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByRecId(RefRecId _recId)
    {
        return _recId &&
            (select ecoResCategoryHierarchyRole
                where ecoResCategoryHierarchyRole.RecId == _recId
            ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRole</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified category role exists in the <c>EcoResCategoryHierarchyRole</c>
    ///    table.
    /// </summary>
    /// <param name="_ecoResNamedCategoryHierarchyRole">
    ///    The category role in the <c>EcoResCategoryHierarchyRole</c> table to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existRole(EcoResCategoryNamedHierarchyRole _ecoResNamedCategoryHierarchyRole)
    {
        return _ecoResNamedCategoryHierarchyRole &&
            (select firstonly ecoResCategoryHierarchyRole
                where ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == _ecoResNamedCategoryHierarchyRole
            ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRoleHierarchyPair</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified category hierarchy and role pair exists in the
    ///    <c>EcoResCategoryHierarchyRole</c> table.
    /// </summary>
    /// <param name="_ecoResNamedCategoryHierarchyRole">
    ///    The category role in the <c>EcoResCategoryHierarchyRole</c> table to check for existence.
    /// </param>
    /// <param name="_ecoResCategoryHierarchyId">
    ///    The category role and category hierarchy ID in the <c>EcoResCategoryHierarchy</c> table to check
    ///    for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existRoleHierarchyPair(EcoResCategoryNamedHierarchyRole _ecoResNamedCategoryHierarchyRole, EcoResCategoryHierarchyId _ecoResCategoryHierarchyId)
    {
        return _ecoResNamedCategoryHierarchyRole && _ecoResCategoryHierarchyId &&
            (select ecoResCategoryHierarchyRole
                where ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == _ecoResNamedCategoryHierarchyRole &&
                      ecoResCategoryHierarchyRole.CategoryHierarchy == _ecoResCategoryHierarchyId
            ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResCategoryHierarchyRole</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The category role in the <c>EcoResCategoryHierarchyRole</c> table to retrieve.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record from the <c>EcoResCategoryHierarchyRole</c> table, if found; otherwise, an empty buffer.
    /// </returns>
    public static EcoResCategoryHierarchyRole findByRecId(RefRecId _recId, boolean _forUpdate = false)
    {
        EcoResCategoryHierarchyRole    ecoResCategoryHierarchyRole = null;

        if (_recId)
        {
            ecoResCategoryHierarchyRole.selectForUpdate(_forUpdate);
            select firstonly ecoResCategoryHierarchyRole where ecoResCategoryHierarchyRole.RecId == _recId;
        }

        return ecoResCategoryHierarchyRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConflictingRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates for conflicting role types for the hierarchy role association.
    /// </summary>
    /// <returns>
    /// true if valid; otherwise, false.
    /// </returns>
    private boolean validateConflictingRole()
    {
        // pairs of conflicting role types
        container exclusivePairs = [[EcoResCategoryNamedHierarchyRole::Retail,
                                     EcoResCategoryNamedHierarchyRole::RetailSpecialGroup]];

        EcoResCategoryHierarchyRole existingRole;
        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

        container findConflict(EcoResCategoryNamedHierarchyRole _existing, EcoResCategoryNamedHierarchyRole _proposed)
        {
            int i;
            container pair;
            for (i=1; i <= conLen(exclusivePairs); i++)
            {
                pair = conPeek(exclusivePairs,i);
                if ((_existing == conPeek(pair, 1) && _proposed == conPeek(pair, 2))
                    || (_existing == conPeek(pair, 2) && _proposed == conPeek(pair, 1)))
                {
                    return [true, _existing];
                }
            }
            return [false];
        }

        while select CategoryHierarchy, NamedCategoryHierarchyRole from existingRole
            where existingRole.CategoryHierarchy == this.CategoryHierarchy
        {
            boolean conflictFound;
            EcoResCategoryNamedHierarchyRole conflictingRole;

            [conflictFound, conflictingRole] = findConflict(existingRole.NamedCategoryHierarchyRole,
                                            this.NamedCategoryHierarchyRole);
            if (conflictFound)
            {
                eventSource.EventWriteCategoryHierarchyRoleConflictsWithAnotherRole('Category hierarchy', funcName(), strFmt('Role %1 conflicts with role %2', this.NamedCategoryHierarchyRole, conflictingRole));

                return checkFailed(strFmt("@RET5773", this.NamedCategoryHierarchyRole, conflictingRole));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRoleHierarchyPair</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified hierarchy and role pair in the <c>EcoResCategoryHierarchyRole</c> table.
    /// </summary>
    /// <param name="_ecoResNamedCategoryHierarchyRole">
    ///    The category role in the <c>EcoResCategoryHierarchyRole</c> table to check for existence.
    /// </param>
    /// <param name="_ecoResCategoryHierarchyId">
    ///    The category role and category hierarchy ID in the <c>EcoResCategoryHierarchy</c> table to check
    ///    for existence.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record from the <c>EcoResCategoryHierarchyRole</c> table, if found; otherwise, an empty buffer.
    /// </returns>
    public static EcoResCategoryHierarchyRole findRoleHierarchyPair(EcoResCategoryNamedHierarchyRole _ecoResNamedCategoryHierarchyRole,
                                                    EcoResCategoryHierarchyId _ecoResCategoryHierarchyId,
                                                    boolean _forUpdate = false)
    {
        EcoResCategoryHierarchyRole    ecoResCategoryHierarchyRole = null;

        if (_ecoResCategoryHierarchyId)
        {
            ecoResCategoryHierarchyRole.selectForUpdate(_forUpdate);
            select firstonly ecoResCategoryHierarchyRole
                        where ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == _ecoResNamedCategoryHierarchyRole &&
                                ecoResCategoryHierarchyRole.CategoryHierarchy == _ecoResCategoryHierarchyId;
        }

        return ecoResCategoryHierarchyRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchiesByRole</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the hierarchies that are associated with the specified role in the
    ///    <c>EcoResCategoryHierarchyRole</c> table.
    /// </summary>
    /// <param name="_ecoResNamedCategoryHierarchyRole">
    ///    The category role in the <c>EcoResCategoryHierarchyRole</c> table to retrieve.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    All records from the <c>EcoResCategoryHierarchyRole</c> table that are associated with the
    ///    specified role, if found; otherwise, an empty buffer.
    /// </returns>
    public static EcoResCategoryHierarchyRole getHierarchiesByRole(EcoResCategoryNamedHierarchyRole _ecoResNamedCategoryHierarchyRole, boolean _forUpdate = false)
    {
        EcoResCategoryHierarchyRole    ecoResCategoryHierarchyRole = null;

        if (_ecoResNamedCategoryHierarchyRole)
        {
            ecoResCategoryHierarchyRole.selectForUpdate(_forUpdate);
            select firstonly ecoResCategoryHierarchyRole where ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == _ecoResNamedCategoryHierarchyRole;
        }

        return ecoResCategoryHierarchyRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a record was not found error message.
    /// </summary>
    /// <returns>
    ///    A <c>TxtNotExist</c> data type with an error message indicating a record was not found.
    /// </returns>
    public static str txtNotExist()
    {
        return "@SYS130836";
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmRetailRoleDeletion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches confirmation dialog box with respective warning message while user trying to remove/modify any retail hierarchy role and perform data clean up on confirmation
    /// </summary>
    /// <param name="_categoryHierarchyRole">
    /// The category role in the <c>EcoResCategoryHierarchyRole</c> table.
    /// </param>
    /// <param name="_categoryHierarchy">
    /// The category hierarchy in the <c>EcoResCategoryHierarchyRole</c> table.
    /// </param>
    /// <returns>True if user confirms to delete; otherwise false.</returns>
    private boolean confirmRetailRoleDeletion(EcoResCategoryNamedHierarchyRole _categoryHierarchyRole, EcoResCategoryHierarchyId _categoryHierarchy)
    {
        DialogButton dialogButton;
        boolean canDelete;

        switch (_categoryHierarchyRole)
        {
            case EcoResCategoryNamedHierarchyRole::Retail : 
                dialogButton = Box::yesNo("@Retail:RemoveCommerceProductHierarchyRoleWarning", DialogButton::No);
                canDelete = (dialogButton == DialogButton::Yes);
                break;

            case EcoResCategoryNamedHierarchyRole::RetailSpecialGroup :
                dialogButton = Box::yesNo("@Retail:RemoveCommerceProductHierarchyRoleWarning", DialogButton::No);
                canDelete = (dialogButton == DialogButton::Yes);
                break;

            case EcoResCategoryNamedHierarchyRole::RetailChannelNavigation:
                dialogButton = Box::yesNo("@Retail:RemoveNavigationHierarchyRoleWarning", DialogButton::No);

                if (dialogButton == DialogButton::Yes)
                {
                    // Removes the navigation hierarchy from all channels where it was associated through 'Channel Categories and product attributes' form
                    RetailInternalOrganization::RemoveCategoryHierarchyFromChannels(_categoryHierarchy);
                    canDelete = true;
                }
                else
                {
                    canDelete = false;
                }
                break;
        }

        if (canDelete && RetailClearProductAttributesOnRemovingRetailRoleFlight::instance().isEnabled())
        {
            EcoResCategoryHierarchyRole ecoResCategoryHierarchyRoleLocal;
            select firstonly ecoResCategoryHierarchyRoleLocal
                where ecoResCategoryHierarchyRoleLocal.CategoryHierarchy == _categoryHierarchy
                      && ecoResCategoryHierarchyRoleLocal.NamedCategoryHierarchyRole != _categoryHierarchyRole
                      && (ecoResCategoryHierarchyRoleLocal.NamedCategoryHierarchyRole != EcoResCategoryNamedHierarchyRole::Retail
                      || ecoResCategoryHierarchyRoleLocal.NamedCategoryHierarchyRole != EcoResCategoryNamedHierarchyRole::RetailSpecialGroup
                      || ecoResCategoryHierarchyRoleLocal.NamedCategoryHierarchyRole != EcoResCategoryNamedHierarchyRole::RetailChannelNavigation);

            // Removes the product attributes associated with removed category hierarchy only if same category hierarchy is not associated with any other retail role
            // and if they were only associated with product based on their association to the category in hierarchy mapped to removed role.
            if (!ecoResCategoryHierarchyRoleLocal)
            {
                EcoResProductCategory::cleanProductAttributesInACategoryHierarchy(_categoryHierarchy);
            }
        }

        return canDelete;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS317565</DeveloperDocumentation>
	<FormRef>EcoResCategoryHierarchyRole</FormRef>
	<Label>@SYS130839</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>NamedCategoryHierarchyRole</TitleField1>
	<TitleField2>CategoryHierarchy</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>NamedCategoryHierarchyRoleIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NamedCategoryHierarchyRole</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NamedCategoryHierarchyRole</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NamedCategoryHierarchyRole</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS134267</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NamedCategoryHierarchyRole</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CategoryHierarchy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryHierarchyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NamedCategoryHierarchyRole</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>EcoResCategoryNamedHierarchyRole</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NamedCategoryHierarchyRoleIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>NamedCategoryHierarchyRole</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategoryHierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategoryHierarchy</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategoryHierarchy</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EcoResCategoryHierarchy_EcoResCategoryHierarchyRole</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryHierarchy</Name>
					<Field>CategoryHierarchy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>