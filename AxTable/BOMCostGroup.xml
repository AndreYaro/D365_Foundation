<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMCostGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BOMCostGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;

        super();

        CostSheetFactory::construct().clearCachedData();
        
        this.clearCachedDataCrossCompany();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;

        super();

        CostSheetFactory::construct().clearCachedData();
        
        this.clearCachedDataCrossCompany();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCachedDataCrossCompany</Name>
				<Source><![CDATA[
    private void clearCachedDataCrossCompany()
    {
        SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
        if (policy.RecId && policy.IsEnabled)
        {
            Query       query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this.orig(), policy.RecId);
            QueryRun    queryRun = new QueryRun(query);
        
            while (queryRun.Next())
            {
                BOMCostGroup companyBOMCostGroup = queryRun.get(this.TableId);
                DataAreaId company = companyBOMCostGroup.DataAreaId;

                if (companyBOMCostGroup && company && company != curExt())
                {
                    changecompany(company)
                    {
                        CostSheetFactory::construct().clearCachedData();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Renames foreign keys in other tables according to the change of the corresponding primary key value
    ///    in this table.
    /// </summary>
    /// <remarks>
    ///    <c>InventTable.CostGroupId</c> and <c>RouteCostCategory.CostGroupId</c> fields use EDTs that extend
    ///    <c>CostGroupId</c> EDT and override relations.
    ///    These two tables are therefore updated explicitly.
    /// </remarks>
    public void renamePrimaryKey()
    {
        CostGroupId oldCostGroupId = this.orig().CostGroupId;
        CostGroupId newCostGroupId = this.CostGroupId;

        ttsbegin;

        super();
        
        InventTable inventTable;
        update_recordset inventTable
            setting CostGroupId = newCostGroupId
                where inventTable.CostGroupId == oldCostGroupId;
        
        RouteCostCategory routeCostCategory;
        update_recordset routeCostCategory
            setting CostGroupId = newCostGroupId
                where routeCostCategory.CostGroupId == oldCostGroupId;

        this.renamePrimaryKeyCrossCompany(oldCostGroupId, newCostGroupId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKeyCrossCompany</Name>
				<Source><![CDATA[
    private void renamePrimaryKeyCrossCompany(CostGroupId _origCostGroupId, CostGroupId _newCostGroupId)
    {
        SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
        if (policy.RecId && policy.IsEnabled)
        {
            Query       query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this.orig(), policy.RecId);
            QueryRun    queryRun = new QueryRun(query);
        
            while (queryRun.Next())
            {
                BOMCostGroup companyBOMCostGroup = queryRun.get(this.TableId);
                DataAreaId company = companyBOMCostGroup.DataAreaId;

                if (companyBOMCostGroup && company && company != curExt())
                {
                    changecompany(company)
                    {
                        if (!SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(company, tableStr(InventTable)))
                        {
                            InventTable inventTable;
                            update_recordset inventTable
                                setting CostGroupId = _newCostGroupId
                                where inventTable.CostGroupId == _origCostGroupId;
                        }
                        
                        if (!SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(company, tableStr(RouteCostCategory)))
                        {
                            RouteCostCategory routeCostCategory;
                            update_recordset routeCostCategory
                            setting CostGroupId = _newCostGroupId
                            where routeCostCategory.CostGroupId == _origCostGroupId;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;

        super();

        CostSheetFactory::construct().clearCachedData();

        this.clearCachedDataCrossCompany();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        CostGroupId defaultCostGroupId;
        boolean     ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(BOMCostGroup, TypeDefault) :
                defaultCostGroupId = BOMCostGroup::defaultCostGroupId(this.CostGroupType);
                if (defaultCostGroupId && this.TypeDefault && defaultCostGroupId != this.CostGroupId)
                {
                    ret = checkFailed(strfmt("@SYS103366", defaultCostGroupId, this.CostGroupType));
                }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(CostGroupId  _costGroup)
    {
        if (_costGroup  && ! BOMCostGroup::exist(_costGroup))
            return checkFailed(strfmt(BOMCostGroup::txtNotExist(),_costGroup));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistDefault</Name>
				<Source><![CDATA[
    public static boolean checkExistDefault(
        CostGroupType     _costGroupType)
    {
        boolean ret = true;
        if (!BOMCostGroup::defaultCostGroupId(_costGroupType, true))
        {
            ret = checkFailed(strfmt("@SYS103365", _costGroupType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMandatoryDefaults</Name>
				<Source><![CDATA[
    public static boolean checkMandatoryDefaults()
    {
        BOMCostGroup    bomCostGroup;
        DictEnum        dictEnum;
        Counter         counter;
        boolean         ret = true;

        if (!InventParameters::isCostBreakdownActivated())
            return true;

        dictEnum = new DictEnum(enumnum(CostGroupType));

        for (counter = 0; counter < dictEnum.values(); counter++)
        {
            select firstonly RecId from bomCostGroup
                where bomCostGroup.CostGroupType == dictEnum.index2Value(counter);

            if (bomCostGroup && !BOMCostGroup::defaultCostGroupId(dictEnum.index2Value(counter), true))
            {
                ret = checkFailed(strfmt("@SYS103365", dictEnum.index2Label(counter)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costGroupId</Name>
				<Source><![CDATA[
    public static CostGroupId costGroupId(
        CostGroupType   _costGroupType,
        CostGroupId     _costGroupId = '')
    {
        return(_costGroupId ? _costGroupId : BOMCostGroup::defaultCostGroupId(_costGroupType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCostGroupId</Name>
				<Source><![CDATA[
    public static CostGroupId defaultCostGroupId(
        CostGroupType   _costGroupType,
        boolean         _exact = true)
    {
        BOMCostGroup    bomCostGroup;
        CostGroupId     defaultCostGroupId;

        select firstonly CostGroupId from bomCostGroup
            where bomCostGroup.TypeDefault      == NoYes::Yes
               && bomCostGroup.CostGroupType    == _costGroupType;

        defaultCostGroupId = bomCostGroup.CostGroupId;

        if (!defaultCostGroupId && !_exact)
        {
            select firstonly CostGroupId from bomCostGroup
                where bomCostGroup.TypeDefault      == NoYes::Yes
                   && bomCostGroup.CostGroupType    == CostGroupType::Undefined;

            defaultCostGroupId = bomCostGroup.CostGroupId;
        }

        return defaultCostGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>directManTypes</Name>
				<Source><![CDATA[
    static public Set directManTypes(
        boolean _includeUndefined = true)
    {
        Set set = new Set(Types::Enum);

        if (_includeUndefined)
            set.add(CostGroupType::Undefined);

        set.add(CostGroupType::DirectManufacturing);

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>directMatTypes</Name>
				<Source><![CDATA[
    static public Set directMatTypes(boolean _includeUndefined = true)
    {
        Set set = new Set(Types::Enum);

        if (_includeUndefined)
            set.add(CostGroupType::Undefined);

        set.add(CostGroupType::DirectMaterials);

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(CostGroupId  _costGroup)
    {
        return _costGroup && (select bomCostGroup
                    where bomCostGroup.CostGroupId  == _costGroup
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static BOMCostGroup find(
        CostGroupId     _costGroup,
        boolean         _forUpdate = false)
    {
        BOMCostGroup bomCostGroup;

        bomCostGroup.selectForUpdate(_forUpdate);

        if (_costGroup)
        {
            select firstonly bomCostGroup
                where bomCostGroup.CostGroupId  == _costGroup;
        }

        return bomCostGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    public static Name name(CostGroupId  _costGroup)
    {
        return BOMCostGroup::find(_costGroup).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryValueDirectMan</Name>
				<Source><![CDATA[
    public static str queryValueDirectMan(boolean _includeUndefined = true)

    {
        return BOMCostGroup::queryValueTypes(BOMCostGroup::directManTypes(_includeUndefined));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryValueDirectMat</Name>
				<Source><![CDATA[
    public static str queryValueDirectMat(boolean _includeUndefined = true)
    {
        return BOMCostGroup::queryValueTypes(BOMCostGroup::directMatTypes(_includeUndefined));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryValueTypes</Name>
				<Source><![CDATA[
    private static str queryValueTypes(Set _types)
    {
        str             queryValueStr = '';
        SetEnumerator   enumerator;

        enumerator = _types.getEnumerator();

        while (enumerator.moveNext())
        {
            if (queryValueStr != '')
                queryValueStr += ', ';

            queryValueStr += enumerator.current();
        }

        return queryValueStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS17179";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BOM</ConfigurationKey>
	<DeveloperDocumentation>@SYS124108</DeveloperDocumentation>
	<FormRef>BOMCostGroup</FormRef>
	<Label>@SYS15318</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CostGroupId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>CostGroupIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>Inventory</Modules>
	<PrimaryIndex>CostGroupIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>BOMCalcGroup</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>BOMCalcGroup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>BOMCostProfit</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BOMCostProfit</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventItemCostGroupRollup</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventItemCostGroupRollup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventTableModule</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventTableModule</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostGroupType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostControl</Name>
			<Label>@SYS103369</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostGroupType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostGroupBehavior</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TypeDefault</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostGroupBehavior</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CostGroupBehavior</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostGroupType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CostGroupType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TypeDefault</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>BOMCostBreakdown</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS26467</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CostGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CostGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CostGroupDefaultIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>BOMCostBreakdown</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TypeDefault</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CostGroupType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CostGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>