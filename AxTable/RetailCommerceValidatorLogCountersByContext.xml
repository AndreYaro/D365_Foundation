<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorLogCountersByContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCommerceValidatorLogCountersByContext extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateCounters</Name>
				<Source><![CDATA[
    internal static void calculateCounters(
        RetailCommerceValidator _validator,
        RetailCommerceValidatorLogContext _logContext,
        RetailCommerceValidatorLogType _logType)
    {
        //Standalone or master products.
        if (_logContext.ProductRefRecId != 0 && _logContext.VariantRefRecId == 0 && _logContext.KitRefRecId == 0)
        {
            RetailCommerceValidatorLogCountersByContext::insertCounters(_validator,_logType, _logContext.ProductRefRecId, RetailCommerceValidatorTestStage::Products);
        }
        // Only variants
        if (_logContext.ProductRefRecId != 0 && _logContext.VariantRefRecId != 0 && _logContext.KitRefRecId == 0)
        {
            // Note: Variant RecId is stored in ProductRefRecId field if it is a variant.
            RetailCommerceValidatorLogCountersByContext::insertCounters(_validator,_logType, _logContext.ProductRefRecId, RetailCommerceValidatorTestStage::ProductVariants);
        }
        // Only kits
        if (_logContext.ProductRefRecId != 0 && _logContext.KitRefRecId != 0 && _logContext.VariantRefRecId == 0)
        {
            // Note: Kit products RecId is stored in ProductRefRecId field.
            RetailCommerceValidatorLogCountersByContext::insertCounters(_validator,_logType, _logContext.ProductRefRecId, RetailCommerceValidatorTestStage::ProductKits);
        }
        if (_logContext.CatalogRefRecId != 0)
        {
            RetailCommerceValidatorLogCountersByContext::insertCounters(_validator,_logType, _logContext.CatalogRefRecId, RetailCommerceValidatorTestStage::CommerceCatalogs);
        }
        if (_logContext.CategoryRefRecId != 0)
        {
            RetailCommerceValidatorLogCountersByContext::insertCounters(_validator,_logType, _logContext.CategoryRefRecId, RetailCommerceValidatorTestStage::CommerceCategories);
        }
        if (_logContext.CategoryHierarchyRefRecId != 0)
        {
            RetailCommerceValidatorLogCountersByContext::insertCounters(_validator,_logType, _logContext.CategoryHierarchyRefRecId, RetailCommerceValidatorTestStage::CategoryHierarchies);
        }
        if (_logContext.AttributeRefRecId != 0)
        {
            RetailCommerceValidatorLogCountersByContext::insertCounters(_validator,_logType, _logContext.AttributeRefRecId, RetailCommerceValidatorTestStage::CommerceAttributes);
        }
        if (_logContext.AttributeGroupRefRecId != 0)
        {
            RetailCommerceValidatorLogCountersByContext::insertCounters(_validator,_logType, _logContext.AttributeGroupRefRecId, RetailCommerceValidatorTestStage::CommerceAttributeGroups);
        }
        if (_logContext.OMOperatingUnitId != 0)
        {
            RetailCommerceValidatorLogCountersByContext::insertCounters(_validator,_logType, _logContext.OMOperatingUnitId, RetailCommerceValidatorTestStage::CommerceChannels);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCounters</Name>
				<Source><![CDATA[
    private static void insertCounters(
        RetailCommerceValidator _validator,
        RetailCommerceValidatorLogType _logType,
        RefRecId _entityRecId,
        RetailCommerceValidatorTestStage _entityType)
    {
        System.Exception exception;
        RetailCommerceValidatorLogCountersByContext logCountersByContext;
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();

        if(_logType == RetailCommerceValidatorLogType::Error)
        {
            logCountersByContext.ErrorCount = 1;
        }
        else if(_logType == RetailCommerceValidatorLogType::Warning)
        {
            logCountersByContext.WarningCount = 1;
        }
        else if(_logType == RetailCommerceValidatorLogType::Info)
        {
            logCountersByContext.MessageCount = 1;
        }

        try
        {
            logCountersByContext.ValidationId = _validator.ValidationId;
            logCountersByContext.BatchJobId = _validator.CurrentBatchJobId;
            logCountersByContext.EntityRefRecId = _entityRecId;
            logCountersByContext.EntityType = _entityType;
            logCountersByContext.IsTemp = NoYes::Yes;

            logCountersByContext.insert();
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry(_validator.ValidationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogCountersByContext), 'insertCounters'), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry(_validator.ValidationId, strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorLogCountersByContext), 'insertCounters'), xSession::currentRetryCount(), true, exception);
                retry;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@Retail:RetailCommerceValidatorLogCountersByContextDevDocs</DeveloperDocumentation>
	<Label>@Retail:RetailCommerceValidatorLogCountersByContextLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ValidationId</Name>
			<ExtendedDataType>RetailCommerceValidatorId</ExtendedDataType>
			<Label>@Retail:RetailCommerceValidatorIdLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BatchJobId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@Retail:RetailCommerceValidatorBatchJobId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EntityRefRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ErrorCount</Name>
			<ExtendedDataType>RetailCommerceValidatorRulesTotalError</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MessageCount</Name>
			<ExtendedDataType>RetailCommerceValidatorRulesTotalInfo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WarningCount</Name>
			<ExtendedDataType>RetailCommerceValidatorRulesTotalWarning</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EntityType</Name>
			<EnumType>RetailCommerceValidatorTestStage</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsTemp</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ValidationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ValidationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BatchJobId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EntityIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ValidationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BatchJobId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EntityRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailCommerceValidator</Name>
			<RelatedTable>RetailCommerceValidator</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ValidationId</Name>
					<Field>ValidationId</Field>
					<RelatedField>ValidationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ValidationIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>