<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcTasksBundle</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqCalcTasksBundle extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateBundleSize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the size of the bundle.
    /// </summary>
    /// <param name="_totalTasks">
    ///     The total number of tasks.
    /// </param>
    /// <param name="_threads">
    ///     The total number of available threads.
    /// </param>
    /// <returns>
    ///     The size of the bundle.
    /// </returns>
    public static int calculateBundleSize(int _totalTasks, int _threads)
    {
        int defaultSize = ReqParameters::setDefaultBundleSize();
        int numBundles;
        int size;

        if (defaultSize != 0 && _threads != 0)
        {
            numBundles = real2int(_totalTasks / defaultSize);

            if (numBundles < _threads)
            {
                size = real2int(_totalTasks / _threads);
            }
            else
            {
                size = defaultSize;
            }
        }

        if (size == 0)
        {
            size = 1;
        }

        return size;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBundle</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts the record into the database.
    /// </summary>
    /// <param name="_proccessId">
    ///     The process ID.
    /// </param>
    /// <param name="_status">
    ///     The status.
    /// </param>
    /// <param name="_level">
    ///     The BOM level.
    /// </param>
    /// <param name="_levelState">
    ///     The level state.
    /// </param>
    /// <param name="_listNum">
    ///     The list ID.
    /// </param>
    /// <returns>
    ///     The inserted record.
    /// </returns>
    public static ReqCalcTasksBundle saveBundle(
        ReqProcessId          _proccessId,
        ReqProcessStatus      _status,
        BOMLevel              _level      = 0,
        ReqLevelState         _levelState = ReqLevelState::NotApplicable,
        ReqProcessListNum     _listNum = -1)
    {
        ReqCalcTasksBundle reqCalcTasksBundle = ReqCalcTasksBundle::initBundle(_proccessId, _status, _level,  _levelState, _listNum);

        reqCalcTasksBundle.insert();

        return reqCalcTasksBundle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBundle</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the record into the database.
    /// </summary>
    /// <param name="_proccessId">
    ///     The process ID.
    /// </param>
    /// <param name="_status">
    ///     The status.
    /// </param>
    /// <param name="_level">
    ///     The BOM level.
    /// </param>
    /// <param name="_levelState">
    ///     The level state.
    /// </param>
    /// <param name="_listNum">
    ///     The list ID.
    /// </param>
    /// <returns>
    ///     The initialized record.
    /// </returns>
    public static ReqCalcTasksBundle initBundle(
                                  ReqProcessId          _proccessId,
                                  ReqProcessStatus      _status,
                                  BOMLevel              _level      = 0,
                                  ReqLevelState         _levelState = ReqLevelState::NotApplicable,
                                  ReqProcessListNum     _listNum = -1)
    {
        ReqCalcTasksBundle reqCalcTasksBundle;

        reqCalcTasksBundle.ProcessId = _proccessId;
        reqCalcTasksBundle.ProcessDataAreaId = curext();
        reqCalcTasksBundle.Status = _status;
        reqCalcTasksBundle.Level = _level;
        reqCalcTasksBundle.LevelState = _levelState;
        reqCalcTasksBundle.ProcessingState = ReqCalcTaskState::Waiting;
        reqCalcTasksBundle.ListNum = _listNum;

        return reqCalcTasksBundle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up all records related to a single master planning run.
    /// </summary>
    /// <param name = "_processId">The Process ID of the master planning run.</param>
    internal static void cleanUpProcess(ReqProcessId _processId)
    {
        var instrumentationLogger = ReqInstrumentationLogger::createLogger(classStr(ReqCalcTaskController));
        
        using (var activityContext = instrumentationLogger.calcTaskController().taskBundleCleanupProcess())
        {
            var maximumRetryNumber = ReqCalcTaskController::resolveAssignedNotCompletedBundlesMaximumRetries();

            try
            {
                ReqCalcTasksBundle reqCalcTasksBundle;

                reqCalcTasksBundle.skipDeleteActions(true);
                reqCalcTasksBundle.skipDataMethods(true);

                delete_from reqCalcTasksBundle
                    where reqCalcTasksBundle.ProcessId           == _processId
                        && reqCalcTasksBundle.ProcessDataAreaId  == curExt();

            }
            catch(Exception::Break)
            {
                throw;
            }
            catch
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError(maximumRetryNumber))
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GLS170003</DeveloperDocumentation>
	<Label>@GLS170002</Label>
	<TitleField1>ProcessDataAreaId</TitleField1>
	<TitleField2>ProcessId</TitleField2>
	<ClusteredIndex>TaskBundleIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>MasterPlanning</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EndTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Level</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LevelState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessingState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThreadId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaskBundle</Name>
			<Label>@SYS320453</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EndTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Level</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LevelState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessingState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThreadId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EndTime</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>EndDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Level</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BOMLevel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LevelState</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>ReqLevelState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ListNum</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReqProcessListNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProcessDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS177726</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProcessId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReqProcessId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProcessingState</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>ReqCalcTaskState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>StartTime</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>StartDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>ReqProcessStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ThreadId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReqProcessThreadId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaskBundleIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ProcessDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProcessId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProcessingState</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Level</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LevelState</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ListNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>