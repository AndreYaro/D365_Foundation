<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdCertificateTrans_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdCertificateTrans_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// To find the <c> AccountName </c> of corresponding party.
    /// </summary>
    /// <param name="_custVendACType">
    /// Account Type,It may be Cutomer,Vendor or Ledger.
    /// </param>
    /// <param name="_account">
    /// Account value is used to find the party name.
    /// </param>
    /// <returns>
    /// Account name for given account number.
    /// </returns>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AccountName getAccountName(
        TaxWithholdACType_IN _custVendACType,
        AccountNum           _account)
    {
        AccountName accountName;

        switch (_custVendACType)
        {
            case TaxWithholdACType_IN::Cust:
                accountName =  DirPartyTable::findRec(CustTable::find(_account, false).Party).Name;
                break;

            case TaxWithholdACType_IN::Vend:
                accountName =  DirPartyTable::findRec(VendTable::find(_account, false).Party).Name;
                break;

            case TaxWithholdACType_IN::Ledger:
               accountName = MainAccount::findByLedgerDimension(LedgerDefaultAccountHelper::getDefaultAccountFromMainAccountId(_account)).localizedName();
               break;

            default:
                accountName = '';
                break;
        }
        return accountName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCertificateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c> TaxWithholdCertificateTrans_IN </c> record from the <c> TmpTaxWithholdCertificateLine_IN </c> buffer.
    /// </summary>
    /// <param name="_certificateNum">
    /// Certificate number is used  to update the <c> TmpTaxWithholdCertificateLine_IN </c> record.
    /// </param>
    /// <param name="_certificateDate">
    ///  Certificate date is used to update the <c> TmpTaxWithholdCertificateLine_IN </c> record.
    /// </param>
    /// <param name="_custVendACType">
    /// Account type is used to get the account name.
    /// </param>
    /// <param name="_account">
    ///  Account number is used to get the account name.
    /// </param>
    /// <param name="_tmpTaxWithholdCertificateLine">
    ///  <c>TmpTaxWithholdCertificateLine_IN</c> buffer is used to initialize the record.
    /// </param>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromCertificateLine(
        TaxWithholdCertificateNumber_IN     _certificateNum,
        TransDate                           _certificateDate,
        TaxWithholdACType_IN                _custVendACType,
        AccountNum                          _account,
        TmpTaxWithholdCertificateLine_IN    _tmpTaxWithholdCertificateLine)

    {
        AccountName                          accountName;
        TmpTaxWithholdCertificateLine_IN     tmpTaxWithholdCertificateLine;
        TaxWithholdCertificateTrans_IN       taxWithholdCertificateTrans;
        TaxWithholdTrans_IN                  taxWithholdTrans;

        ttsbegin;
        if (_tmpTaxWithholdCertificateLine)
        {
            tmpTaxWithholdCertificateLine.updateCertificate(_tmpTaxWithholdCertificateLine, _certificateNum, _certificateDate);
            accountName = this.getAccountName(_custVendACType, _account);
            while select _tmpTaxWithholdCertificateLine
            {
                select  taxWithholdCertificateTrans
                    where taxWithholdCertificateTrans.Account              == _account
                       && taxWithholdCertificateTrans.TaxType              == _tmpTaxWithholdCertificateLine.TaxType
                       && taxWithholdCertificateTrans.CertificateNumber    == _tmpTaxWithholdCertificateLine.CertificateNumber
                       && taxWithholdCertificateTrans.Voucher              == _tmpTaxWithholdCertificateLine.Voucher;

                if (!taxWithholdCertificateTrans)
                {
                    this.Account                = _account;
                    this.Name                   = accountName;
                    this.CertificateDate        = _certificateDate;
                    this.CertificateNumber      = _certificateNum;
                    this.Voucher                = _tmpTaxWithholdCertificateLine.Voucher;
                    this.Source                 = _tmpTaxWithholdCertificateLine.Source;
                    this.Amount                 = _tmpTaxWithholdCertificateLine.Amount;
                    this.TaxAmount              = _tmpTaxWithholdCertificateLine.TaxAmount;
                    this.TaxType                = _tmpTaxWithholdCertificateLine.TaxType;
                    this.TransDate              = _tmpTaxWithholdCertificateLine.TransDate;
                    this.doInsert();

                    update_recordset taxWithholdTrans
                        setting certificateReceivedDate     = _certificateDate,
                                RecoverableCertificateNum   = _certificateNum
                            where (taxWithholdTrans.CustAccount == _account
                              || taxWithholdTrans.VendAccount   == _account)
                              && taxWithholdTrans.TransDate          == _tmpTaxWithholdCertificateLine.TransDate
                              && taxWithholdTrans.TaxType            == _tmpTaxWithholdCertificateLine.TaxType
                              && taxWithholdTrans.RecoverableAccount == true
                              && taxWithholdTrans.Voucher            == _tmpTaxWithholdCertificateLine.Voucher;
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c> TaxWithholdCertificateTrans_IN </c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_certificateNumber">
    ///  Withhold tax certificate number is used to find the record.
    /// </param>
    /// <returns>
    /// Return true if record exists otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(TaxWithholdCertificateNumber_IN   _certificateNumber)
    {
        return _certificateNumber &&
            (select taxWithholdCertificateTrans_IN
                where taxWithholdCertificateTrans_IN.CertificateNumber == _certificateNumber).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the TaxWithholdCertificateTrans_IN table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing TaxWithholdCertificateTrans_IN table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxWithholdCertificateTrans_IN find(
        RefRecId            _recId,
        boolean             _forupdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdCertificateTrans_IN taxWithholdCertificateTrans;

        taxWithholdCertificateTrans.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdCertificateTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdCertificateTrans
            where taxWithholdCertificateTrans.RecId == _recId;

        return taxWithholdCertificateTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCertificateNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Reads the <c>TaxWithholdCertificateTrans_IN </c> table for the specified Certificate number.
    /// </summary>
    /// <param name="_certificateNumber">
    /// Certificate number is used to find the record.
    /// </param>
    /// <returns>
    /// A buffer containing <c> TaxWithholdCertificateTrans_IN </c> table.
    /// </returns>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxWithholdCertificateTrans_IN findByCertificateNumber(TaxWithholdCertificateNumber_IN   _certificateNumber)
    {
        TaxWithholdCertificateTrans_IN    taxWithholdCertificateTrans;

        if (_certificateNumber)
        {
            select firstonly taxWithholdCertificateTrans
                where taxWithholdCertificateTrans.CertificateNumber == _certificateNumber;
        }
        return taxWithholdCertificateTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63798</DeveloperDocumentation>
	<Label>@GLS6142</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>CertificateNumber</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Account</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@SYS31242</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Account</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Account</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LedgerJournalAC</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS6928</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CertificateDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS6082</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdCertificateNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Source</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxModuleTypeId</ExtendedDataType>
			<EnumType>TaxModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS76123</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxWithholdCodeType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>TaxWithholdCertificate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdCertificate_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CertificateNumber</Name>
					<Field>CertificateNumber</Field>
					<RelatedField>CertificateNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>