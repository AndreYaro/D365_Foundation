<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResConfiguration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResConfiguration extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>EcoResConfiguration</c> table exists.
    /// </summary>
    /// <param name="_configuration">
    /// The ID of the <c>EcoResConfiguration</c> record to find.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    static boolean exist(RefRecId _configuration)
    {
        if (!_configuration)
        {
            return false;
        }

        return (select firstonly RecId from ecoResConfiguration
                    where ecoResConfiguration.RecId == _configuration).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResConfiguration</c> table.
    /// </summary>
    /// <param name="_configuration">
    ///    The ID of the <c>EcoResConfiguration</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResConfiguration</c> table; otherwise, an empty record.
    /// </returns>
    static EcoResConfiguration find(RefRecId _configuration, boolean _forUpdate = false)
    {
        EcoResConfiguration ecoResConfiguration;

        ecoResConfiguration.selectForUpdate(_forUpdate);

        if (0 != _configuration)
        {
            select firstonly ecoResConfiguration
                where ecoResConfiguration.RecId == _configuration;
        }
        return ecoResConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResConfiguration</c> table.
    /// </summary>
    /// <param name="_name">
    ///    The value of the <c>Name</c> field of the <c>EcoResConfiguration</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResConfiguration</c> table; otherwise, an empty record.
    /// </returns>
    static EcoResConfiguration findByName(EcoResConfigurationName _name, boolean _forUpdate = false)
    {
        EcoResConfiguration  ecoResConfiguration;

        ecoResConfiguration.selectForUpdate(_forUpdate);

        if (_name)
        {
            select firstonly ecoResConfiguration
                where ecoResConfiguration.Name == _name;
        }

        return ecoResConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIfNotExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maintains the specified configuration.
    /// </summary>
    /// <param name="_name">
    /// A <c>EcoResConfigurationName</c> value configuration name.
    /// </param>
    public static void insertIfNotExists(EcoResConfigurationName _name)
    {
        EcoResConfiguration ecoResConfiguration;

        if (_name == '')
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!EcoResConfiguration::findByName(_name).RecId)
        {
            ecoResConfiguration.Name = _name;
            ecoResConfiguration.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a string with the label of the <c>EcoResConfigurationName</c> extended data type.
    /// </summary>
    /// <returns>
    ///    A string that contains the label.
    /// </returns>
    static FieldLabel label()
    {
        return new SysDictType(extendedTypeNum(EcoResConfigurationName)).label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProductVariantConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a lookup form to use to select a configuration for a product variant.
    /// </summary>
    /// <param name="_formControl">
    /// A control for which the lookup is performed.
    /// </param>
    /// <param name="_productMaster">
    /// A value that indicates which generic product model that configurations are assigned to is displayed
    /// in the lookup form.
    /// </param>
    /// <param name="_productDimensionAttribute">
    /// The ID of a record in the <c>EcoResProductDimensionAttribute</c> table that indicates the dimension
    /// attribute for which configurations are displayed in the lookup form.
    /// </param>
    /// <returns>
    /// A selected <c>EcoResConfiguration</c> table buffer.
    /// </returns>
    /// <remarks>
    /// The configurations that are displayed are chosen from the configurations that are assigned to a
    /// generic product model.
    /// </remarks>
    public static EcoResConfiguration lookupProductVariantConfiguration(
        FormControl             _formControl,
        RefRecId                _productMaster,
        RefRecId                _productDimensionAttribute)
    {
        SysReferenceTableLookup sysReferenceTableLookup;
        Query                   query;

        sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(EcoResConfiguration), _formControl);
        sysReferenceTableLookup.addLookupfield(fieldNum(EcoResConfiguration, Name));

        query = new Query(queryStr(EcoResProductVariantConfigurationLookup));
        query.dataSourceTable(tableNum(EcoResProductMasterConfiguration)).rangeField(fieldNum(EcoResProductMasterConfiguration, ConfigProductMaster)).value(queryValue(_productMaster));
        query.dataSourceTable(tableNum(EcoResProductMasterConfiguration)).rangeField(fieldNum(EcoResProductMasterConfiguration, ConfigProductDimensionAttribute)).value(queryValue(_productDimensionAttribute));

        sysReferenceTableLookup.parmQuery(query);
        return sysReferenceTableLookup.performFormLookup() as EcoResConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInsertTmpStr</Name>
				<Source><![CDATA[
    private static TmpMCRStr mcrInsertTmpStr()
    {
        TmpMCRStr                               tmpMCRStr;
        EcoResConfiguration                     ecoResConfiguration;
        EcoResProductMasterConfiguration        ecoResProductMasterConfiguration;
        EcoResProductMasterDimValueTranslation  productMasterDimValueTranslation;

        insert_recordset tmpMCRStr (String15, Str60, Str1260)
            select firstOnly Name from ecoResConfiguration
                join ecoResProductMasterConfiguration
                    where ecoResProductMasterConfiguration.Configuration == ecoResConfiguration.RecId
                join Name, Description from productMasterDimValueTranslation
                    where productMasterDimValueTranslation.ProductMasterDimensionValue == ecoResProductMasterConfiguration.RecId
                        && productMasterDimValueTranslation.LanguageId == SystemParameters::getSystemLanguageId();

        select tmpMCRStr; //needed due to the insert_recordset
        return tmpMCRStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInsertTmpStrByProduct</Name>
				<Source><![CDATA[
private static TmpMCRStr mcrInsertTmpStrByProduct(RefRecId _productId)
    {
        TmpMCRStr                               tmpMCRStr;
        EcoResConfiguration                     ecoResConfiguration;
        EcoResProductMasterConfiguration        ecoResProductMasterConfiguration;
        EcoResProductMasterDimValueTranslation  productMasterDimValueTranslation;

        if (_productId)
        {
            insert_recordset tmpMCRStr (String15, Str60, Str1260)
                select Name from ecoResConfiguration
                    join ecoResProductMasterConfiguration
                        where ecoResProductMasterConfiguration.ConfigProductMaster == _productId
                        && ecoResConfiguration.RecId == ecoResProductMasterConfiguration.Configuration
                    outer join Name, Description from productMasterDimValueTranslation
                        where productMasterDimValueTranslation.ProductMasterDimensionValue == ecoResProductMasterConfiguration.RecId
                        && productMasterDimValueTranslation.LanguageId == SystemParameters::getSystemLanguageId();
        }

        select tmpMCRStr; //needed due to the insert_recordset
        return tmpMCRStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrlookupAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays a lookup form to use to choose a Configuration.
    /// </summary>
    /// <param name="_formControl">
    ///    A control for which a lookup is performed.
    /// </param>
    /// <remarks>
    ///    The Configurations that are displayed are chosen from the Configurations that are assigned to the product master.
    /// </remarks>
    public static void mcrlookupAll(FormControl    _formControl)
    {
        SysTableLookup                      sysTableLookup = SysTableLookup::newParameters(tableNum(TmpMCRStr), _formControl);
        TmpMCRStr                           tmpMCRStr;

        tmpMCRStr = EcoResConfiguration::mcrInsertTmpStr();

        sysTableLookup.parmTmpBuffer(tmpMCRStr);
        sysTableLookup.addLookupfield(fieldNum(TmpMCRStr, String15));
        sysTableLookup.setLabel("@SYS53395");
        sysTableLookup.addLookupfield(fieldNum(TmpMCRStr, Str60));
        sysTableLookup.setLabel("@SYS80470");
        sysTableLookup.addLookupfield(fieldNum(TmpMCRStr, Str1260));
        sysTableLookup.setLabel("@SYS127587");

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrlookupByGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays a lookup form to allow the user to choose a configuration.
    /// </summary>
    /// <param name="_formControl">
    ///    A control on which the lookup is performed.
    /// </param>
    /// <param name="_itemGroupId">
    ///    A value that specifies item groups of configurations to add to lookup form.
    /// </param>
    /// <remarks>
    ///    The configurations that are displayed are chosen from the configurations that are assigned to the product master.
    /// </remarks>
    public static void mcrlookupByGroup(
        FormControl         _formControl,
        ItemGroupId         _itemGroupId)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(EcoResConfiguration), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    qbdsConfiguration;
        QueryBuildDataSource    qbdsConfigurationMaster;
        QueryBuildDataSource    qbdsProductMaster;
        QueryBuildDataSource    qbdsInventTable;
        QueryBuildRange         queryBuildRange;
        QueryBuildDataSource    qbdsInventItemGroupItem;

        qbdsConfiguration          = query.addDataSource(tableNum(EcoResConfiguration));
        qbdsConfigurationMaster    = qbdsConfiguration.addDataSource(tableNum(EcoResProductMasterConfiguration));
        qbdsProductMaster          = qbdsConfigurationMaster.addDataSource(tableNum(EcoResProductMaster));
        qbdsInventTable            = qbdsConfigurationMaster.addDataSource(tableNum(InventTable));
        qbdsInventTable.addLink(fieldNum(EcoResProductMaster, RecId), fieldNum(InventTable, Product));

        qbdsInventItemGroupItem    = qbdsInventTable.addDataSource(tableNum(InventItemGroupItem));
        queryBuildRange            = qbdsInventItemGroupItem.addRange(fieldNum(InventItemGroupItem, ItemGroupId));
        queryBuildRange.value(_itemGroupId);

        sysTableLookup.addLookupfield(fieldNum(EcoResConfiguration, Name));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrlookupByItemOrProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up Configuration by item or product (no need for item if product is supplied).
    /// </summary>
    /// <param name="_formControl">
    /// The control on which the look up needs to be enabled.
    /// </param>
    /// <param name="_itemId">
    /// The item for which the configurations need to be looked up.
    /// </param>
    /// <param name="_product">
    /// The product <c>RefRecID</c> for which the configurations need to be looked up.
    /// </param>
    /// <remarks>
    /// If a product <c>RefRecID</c> is supplied, the item will get disregarded.
    /// </remarks>
    public static void mcrlookupByItemOrProduct(
        FormControl             _formControl,
        ItemId                  _itemId,
        RefRecId                _product = 0
        )
    {
        SysTableLookup                      sysTableLookup = SysTableLookup::newParameters(tableNum(TmpMCRStr), _formControl);
        RefRecId                            productID = _product;
        TmpMCRStr                           tmpMCRStr;

        if (productID == 0 && _itemId != " ")
        {
            productID = EcoResProductMaster::find(InventTable::find(_itemId).Product).RecId;
        }

        tmpMCRStr = EcoResConfiguration::mcrInsertTmpStrByProduct(productID);

        sysTableLookup.parmTmpBuffer(tmpMCRStr);
        sysTableLookup.addLookupfield(fieldNum(TmpMCRStr, String15));
        sysTableLookup.setLabel("@SYS14011");
        sysTableLookup.addLookupfield(fieldNum(TmpMCRStr, Str60));
        sysTableLookup.setLabel("@SYS25589");
        sysTableLookup.addLookupfield(fieldNum(TmpMCRStr, Str1260));
        sysTableLookup.setLabel("@SYS127587");

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveProductVariantConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds an <c>EcoResConfiguration</c> record.
    /// </summary>
    /// <param name="_configurationName">
    ///    The name of a configuration to find.
    /// </param>
    /// <param name="_productMaster">
    ///    The ID of an <c>EcoResProductMaster</c> record that indicates a product master for which a
    ///    configuration might have been assigned.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    The ID of an <c>EcoResProductDimensionAttribute</c> record.
    /// </param>
    /// <returns>
    ///    A <c>EcoResConfiguration</c> table buffer.
    /// </returns>
    /// <remarks>
    ///    The function is used to resolve a configuration name to the ID of an <c>EcoResConfiguration</c>
    ///    record.The resolution is made based on the configurations that are assigned to a specified product
    ///    master.
    /// </remarks>
    static EcoResConfiguration resolveProductVariantConfiguration(
        EcoResConfigurationName     _configurationName,
        RefRecId                    _productMaster,
        RefRecId                    _productDimensionAttribute)
    {
        EcoResConfiguration              ecoResConfiguration;
        EcoResProductMasterConfiguration ecoResProductMasterConfiguration;

        select ecoResConfiguration
            where ecoResConfiguration.Name == _configurationName
        exists join ecoResProductMasterConfiguration
            where ecoResProductMasterConfiguration.Configuration                    == ecoResConfiguration.RecId
               && ecoResProductMasterConfiguration.ConfigProductMaster              == _productMaster
               && ecoResProductMasterConfiguration.ConfigProductDimensionAttribute  == _productDimensionAttribute;

        if (!ecoResConfiguration.RecId)
        {
            // Assigning null to selectedRecord does not cause the kernel to receive a true NULL value, but rather
            // just an empty record. Return NULL directly so the kernel knows that the intent is to not clear the
            // selected value.
            return null;
        }

        return ecoResConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Config</ConfigurationKey>
	<DeveloperDocumentation>@SYS133207</DeveloperDocumentation>
	<FormRef>EcoResProductMasterDimensionPerCompany</FormRef>
	<Label>@SYS8089</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EcoResProductMasterConfiguration</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EcoResProductMasterConfiguration</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResProductVariantConfiguration</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EcoResProductVariantConfiguration</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResConfigurationName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>