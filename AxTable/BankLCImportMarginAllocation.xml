<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCImportMarginAllocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankLCImportMarginAllocation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankLCImportLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank letter of credit import line.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The bank letter of credit import line.
    /// </returns>
    public BankLCImportLine getBankLCImportLine(boolean _forUpdate = false)
    {
        return BankLCImportLine::find(this.BankLCImportLine, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeleteAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the allocation can be deleted.
    /// </summary>
    /// <returns>
    /// true if the allocation can be deleted; otherwise, false.
    /// </returns>
    public boolean isDeleteAllowed()
    {
        return this.Settled == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettleStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the settle status of the allocation.
    /// </summary>
    /// <param name="_forSettle">
    /// A Boolean value that indicates whether the allocation will be settled; optional.
    /// </param>
    public void updateSettleStatus(boolean _forSettle = true)
    {
        if (_forSettle)
        {
            this.SettledAmountCur = this.AllocatedAmountCur;
            this.Settled = NoYes::Yes;
        }
        else
        {
            this.SettledAmountCur = 0;
            this.Settled = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (!this.isDeleteAllowed())
            {
                // Settled transaction could not be deleted.
                ret = checkFailed("@SYS332275");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BankLCImportMarginAllocation</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BankLCImportMarginAllocation</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BankLCImportMarginAllocation</c> table; otherwise, an empty record.
    /// </returns>
    public static BankLCImportMarginAllocation find(
        recId   _recId,
        boolean _forUpdate = false)
    {
        BankLCImportMarginAllocation bankLCImportMarginAllocation;

        if (_recId)
        {
            bankLCImportMarginAllocation.selectForUpdate(_forUpdate);

            select firstonly bankLCImportMarginAllocation
                where bankLCImportMarginAllocation.RecId == _recId;
        }

        return bankLCImportMarginAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLCImportLineMargin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BankLCImportMarginAllocation</c> table by using the import
    /// line and margin.
    /// </summary>
    /// <param name="_bankLCImportLineRecId">
    /// The record ID of the import line.
    /// </param>
    /// <param name="_bankLCImportMarginRecId">
    /// The record ID of the margin.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BankLCImportMarginAllocation</c> table; otherwise, an empty record.
    /// </returns>
    public static BankLCImportMarginAllocation findByLCImportLineMargin(
        BankLCLineRefRecId _bankLCImportLineRecId,
        BankLCImportMarginRefRecId _bankLCImportMarginRecId,
        boolean _forUpdate = false)
    {
        BankLCImportMarginAllocation bankLCImportMarginAllocation;

        if (_bankLCImportLineRecId && _bankLCImportMarginRecId)
        {
            bankLCImportMarginAllocation.selectForUpdate(_forUpdate);

            select firstonly bankLCImportMarginAllocation
                where bankLCImportMarginAllocation.BankLCImportMargin   == _bankLCImportMarginRecId
                    && bankLCImportMarginAllocation.BankLCImportLine    == _bankLCImportLineRecId;
        }

        return bankLCImportMarginAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalMarginAmountOnShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total margin amount of the shipment.
    /// </summary>
    /// <param name="_bankLCImportLineRefRecId">
    /// The record ID of the import line.
    /// </param>
    /// <returns>
    /// The total margin amount of the shipment.
    /// </returns>
    public static BankLCImportTransAllocatedAmountCur getTotalMarginAmountOnShipment(
        BankLCLineRefRecId _bankLCImportLineRefRecId)
    {
        BankLCImportMarginAllocation    bankLCImportMarginAllocation;
        BankLCImportMargin              bankLCImportMargin;

        select sum(AllocatedAmountCur)
            from bankLCImportMarginAllocation
                where bankLCImportMarginAllocation.BankLCImportLine == _bankLCImportLineRefRecId
            exists join bankLCImportMargin
                where bankLCImportMargin.RecId == bankLCImportMarginAllocation.BankLCImportMargin;

        return bankLCImportMarginAllocation.AllocatedAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalUnSettledMarginAmountOnShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total unsettled margin amount of the shipment.
    /// </summary>
    /// <param name="_bankLCImportLineRefRecId">
    /// The record ID of the import line.
    /// </param>
    /// <returns>
    /// The total unsettled margin amount of the shipment.
    /// </returns>
    public static BankLCImportTransAllocatedAmountCur getTotalUnSettledMarginAmountOnShipment(
        BankLCLineRefRecId _bankLCImportLineRefRecId)
    {
        BankLCImportMarginAllocation    bankLCImportMarginAllocation;
        BankLCImportMargin              bankLCImportMargin;

        BankLCImportTransAllocatedAmountCur totalAllocatedAmount;

        totalAllocatedAmount = BankLCImportMarginAllocation::getTotalMarginAmountOnShipment(_bankLCImportLineRefRecId);

        select sum(SettledAmountCur)
            from bankLCImportMarginAllocation
                where bankLCImportMarginAllocation.BankLCImportLine == _bankLCImportLineRefRecId
            exists join bankLCImportMargin
                where bankLCImportMargin.RecId == bankLCImportMarginAllocation.BankLCImportMargin;

        return totalAllocatedAmount - bankLCImportMarginAllocation.SettledAmountCur;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BankDocument</ConfigurationKey>
	<DeveloperDocumentation>@SYS344925</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS332201</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>BankLCImportLine</TitleField1>
	<TitleField2>AllocatedAmountCur</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Bank</Modules>
	<ReplacementKey>BankLCImportLineMarginIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SettledAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankLCImportMargin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankLCImportLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocatedAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankLCImportLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankLCImportMargin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankLCImportMargin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankLCImportLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocatedAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Settled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettledAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AllocatedAmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCImportTransAllocatedAmountCur</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankLCImportLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankLCLineRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankLCImportMargin</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankLCImportMarginRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Settled</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCImportTransSettled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SettledAmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCImportTransSettleAmountCur</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SettledIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Settled</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BankLCImportLineMarginIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BankLCImportLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BankLCImportMargin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankLCImportLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BankLCImportLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BankLCImportLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankLCImportLine_BankLCImportTransAllocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankLCImportLine</Name>
					<Field>BankLCImportLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankLCImportMargin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankLCImportMargin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankLCImportMargin</Name>
					<Field>BankLCImportMargin</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>