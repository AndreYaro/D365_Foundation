<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSIntercompanyCostDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TSIntercompanyCostDetails extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the cost price for the <c>TSTimesheetLine</c> record.
/// </summary>
/// <param name="timesheetLine">
/// A <c>TSTimesheetLine</c> record
/// </param>
/// <param name="transDate">
/// The transaction date.
/// </param>
/// <returns>
/// The cost price amount.
/// </returns>
public CostPrice getCostPrice(TSTimesheetLine timesheetLine, TransDate transDate)
{
    SysGlobalCache  cache   = classfactory.globalCache();
    str cacheKey;
    CostPrice costPrice;

    cacheKey = strFmt("%1-%2-%3-%4-%5", funcName(),timesheetLine.Resource,timesheetLine.CategoryId,timesheetLine.LinePropertyId,transDate);

    if (cache.isSet(tableStr(TSIntercompanyCostDetails), cacheKey))
    {
        costPrice = cache.get(tableStr(TSIntercompanyCostDetails), cacheKey);
    }
    else
    {
        ProjPriceParameters priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(
				'',
                timesheetLine.Resource,
                timesheetLine.CategoryId,
                timesheetLine.LinePropertyId,
                transDate);
        costPrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams);

        cache.set(tableStr(TSIntercompanyCostDetails), cacheKey, costPrice);
    }

    return costPrice;
}

]]></Source>
			</Method>
			<Method>
				<Name>getTSIntercompanyCost</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the <c>TSIntercompanyCost</c> record of the <c>TSIntercompanyCostDetails</c> table.
/// </summary>
/// <param name="_forupdate">
/// A Boolean value that indicates whether the <c>TSIntercompanyCost</c> record can be updated.
/// </param>
/// <param name="_concurrencyModel">
/// Sets the concurrency model of the selected <c>TSIntercompanyCost</c> record.
/// </param>
/// <returns>
/// A <c>TSIntercompanyCost</c> record.
/// </returns>
public TSIntercompanyCost getTSIntercompanyCost(boolean _forupdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
{
    return TSIntercompanyCost::find(this.tsIntercompanyCost, _forupdate, _concurrencyModel);
}

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
/// Called on insert of the <c>TSIntercompanyCostDetails</c> record.
/// </summary>
/// <remarks>
/// This is overriden in order to set the source document line record id of the <c>TSIntercompanyCostDetails</c> record
/// </remarks>
public void insert()
{
    SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);

    super();
}

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the value of the created date field of the <c>TSIntercompanyCost</c> record.
/// </summary>
/// <returns>
/// The <c>AccountingDate</c> field.
/// </returns>
public AccountingDate parmExchangeRateDate()
{
    return DateTimeUtil::date(
        DateTimeUtil::applyTimeZoneOffset(
            this.parmSourceDocumentHeader().CreatedDateTime,
            DateTimeUtil::getUserPreferredTimeZone()));
}

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
///     Gets the parent source document line.
/// </summary>
/// <returns>
///     Always returns null.
/// </returns>
public SourceDocumentLine parmParentSourceDocumentLine()
{
    return null;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the source document line enumeration name.
/// </summary>
/// <returns>
/// The source document.
/// </returns>
public EnumName parmSourceDocLineTypeEnumName()
{
    return enumId2Name(enumNum(SourceDocLine_TimesheetsIntercompany));
}

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the source document line type enumeration value.
/// </summary>
/// <returns>
/// Returns the source document.
/// </returns>
public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
{
    return SourceDocLine_TimesheetsIntercompany::IntercompanyCostDetails;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets a source document header record associated with the parent <c>TSIntercompanyCost</c> table.
/// </summary>
/// <returns>
/// A <c>SourceDocumentHeader</c> record.
/// </returns>
public SourceDocumentHeader parmSourceDocumentHeader()
{
    return SourceDocumentHeader::find(this.getTSIntercompanyCost().SourceDocumentHeader);
}

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
///     Overridden to submit the source document line implementation.
/// </summary>
public void update()
{
    super();

    SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
}

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
/// Finds the specified record in the <c>TSIntercompanyCostDetails</c> table by using the specified
/// <c>SourceDocumentLine</c> record.
/// </summary>
/// <param name="_sourceDocumentLine">
/// A <c>SourceDocumentLine</c> record ID.
/// </param>
/// <returns>
/// A record in the <c>TSIntercompanyCostDetails</c> class.
/// </returns>
static public TSIntercompanyCostDetails findBySourceDocumentLine(RefRecId _sourceDocumentLine)
{
    TSIntercompanyCostDetails     tsIntercompanyCostDetails;

    select firstonly tsIntercompanyCostDetails
        where tsIntercompanyCostDetails.SourceDocumentLine  == _sourceDocumentLine;

    return tsIntercompanyCostDetails;
}

]]></Source>
			</Method>
			<Method>
				<Name>findByTSTimesheetTrans</Name>
				<Source><![CDATA[
    /// <summary>
/// Finds the specified record in the <c>TSIntercompanyCostDetails</c> table by using the specified
/// <c>TSTimesheetTrans</c> record.
/// </summary>
/// <param name="_tsTimesheetTrans">
/// A <c>TSTimesheetTrans</c> record ID.
/// </param>
/// <param name="_forupdate">
/// A Boolean value that specifies whether to read the record for update; optional.
/// </param>
/// <returns>
/// A record in the <c>TSIntercompanyCostDetails</c> class.
/// </returns>
static public TSIntercompanyCostDetails findByTSTimesheetTrans(RefRecId _tsTimesheetTrans, boolean _forupdate = false)
{
    TSIntercompanyCostDetails     tsIntercompanyCostDetails;

    tsIntercompanyCostDetails.selectForUpdate(_forupdate);

    select firstonly tsIntercompanyCostDetails
        where tsIntercompanyCostDetails.tsTimesheetTrans  == _tsTimesheetTrans;

    return tsIntercompanyCostDetails;
}

]]></Source>
			</Method>
			<Method>
				<Name>insertIntercompanyCostDetails</Name>
				<Source><![CDATA[
    /// <summary>
/// Creates a <c>TSIntercompanyCostDetails</c> record based on the <c>TSTimesheetTrans</c> record.
/// </summary>
/// <param name="tsTimesheetTrans">
/// A <c>TSTimesheetTrans</c> record.
/// </param>
public static void insertIntercompanyCostDetails(TSTimesheetTrans tsTimesheetTrans)
{
    TSIntercompanyCostDetails tsIntercompanyCostDetails;
    TSTimesheetLine timesheetLine = tsTimesheetTrans.timesheetLine();
    TSTimesheetTable tsTimesheetTable = TSTimesheetTable::find(timesheetLine.TimesheetNbr);

    tsIntercompanyCostDetails.tsIntercompanyCost = TSIntercompanyCost::findByTimesheet(tsTimesheetTable.RecId).RecId;
    tsIntercompanyCostDetails.tsTimesheetTrans = tsTimesheetTrans.RecId;
    tsIntercompanyCostDetails.TransactionCurrencyAmount = CurrencyExchangeHelper::amount(tsIntercompanyCostDetails.getCostPrice(timesheetLine, tsTimesheetTrans.ProjTransDate) * tsTimesheetTrans.Hours, timesheetLine.CurrencyCode);

    tsIntercompanyCostDetails.Currency = Currency::find(CompanyInfoHelper::standardCurrency()).RecId;

    tsIntercompanyCostDetails.insert();
}

]]></Source>
			</Method>
			<Method>
				<Name>updateDeleteIntercompanyCostDetails</Name>
				<Source><![CDATA[
    /// <summary>
/// updateDeleteIntercompanyCostDetails will either create/delete/update <c>TSIntercompanyCostDetails</c>
/// depending on if <c>TSTimesheetTrans</c> has been updated to an intercompany transaction or vice-versa
/// </summary>
/// <param name="tsTimesheetTrans">
/// <c>TSTimesheetTrans</c> record
/// </param>
/// <remarks>
/// If the <c>TSTimesheetTrans</c> has been updated to a intercompany time and there's an existing <c>TSIntercompanyCostDetails</c> record,
/// the <c>TSIntercompanyCostDetails</c> will be updated as well.
/// If there's no existing <c>TSIntercompanyCostDetails</c>, it will be created
/// If the <c>TSTimesheetTrans</c> has been updated to a NON intercompany time and there's an existing <c>TSIntercompanyCostDetails</c> record,
/// the <c>TSIntercompanyCostDetails</c> will be deleted.
/// </remarks>
public static void updateDeleteIntercompanyCostDetails(TSTimesheetTrans tsTimesheetTrans)
{
    TSIntercompanyCostDetails tsIntercompanyCostDetails = TSIntercompanyCostDetails::findByTSTimesheetTrans(tsTimesheetTrans.RecId, true);
    TSTimesheetLine timesheetLine = tsTimesheetTrans.timesheetLine();

    if (timesheetLine.ProjectDataAreaId != curext())
    {
        if (tsIntercompanyCostDetails.RecId != 0)
        {
            tsIntercompanyCostDetails.Currency = Currency::find(timesheetLine.CurrencyCode).RecId;

            tsIntercompanyCostDetails.TransactionCurrencyAmount = CurrencyExchangeHelper::amount(tsIntercompanyCostDetails.getCostPrice(timesheetLine, tsTimesheetTrans.ProjTransDate) * tsTimesheetTrans.Hours, timesheetLine.CurrencyCode);
            tsIntercompanyCostDetails.update();
        }
        else
        {
            TSIntercompanyCostDetails::insertIntercompanyCostDetails(tsTimesheetTrans);
        }
    }
    else
    {
        if (tsIntercompanyCostDetails.RecId != 0)
        {
            tsIntercompanyCostDetails.delete();
        }
    }
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@FPK270088</DeveloperDocumentation>
	<Label>@FPK270071</Label>
	<SingularLabel>@FPK270089</SingularLabel>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>TSIntercompanyCost</TitleField1>
	<TitleField2>SourceDocumentLine</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TSIntercompanyCost</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Currency</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransactionCurrencyAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TSIntercompanyCost</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TSTimesheetTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TSIntercompanyCostIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TSIntercompanyCost</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CurrencyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Currency</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TSTimesheetTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TSTimesheetTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<Field>Currency</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TSIntercompanyCost</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TSIntercompanyCost</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TSIntercompanyCost</Name>
					<Field>TSIntercompanyCost</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TSTimesheetTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TSTimesheetTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TSTimesheetTrans</Name>
					<Field>TSTimesheetTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>