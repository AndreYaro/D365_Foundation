<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceJourAdjustment</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInvoiceJourAdjustment extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyToCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the changes in current adjustment to a specified <C>CustInvoiceJour</C> record.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// A <C>CustInvoiceJour</C> record.
    /// </param>
    /// <returns>
    /// A <C>CustInvoiceJour</C> record with adjustment changes.
    /// </returns>
    public CustInvoiceJour applyToCustInvoiceJour(CustInvoiceJour  _custInvoiceJour)
    {
        CustInvoiceJour custInvoiceJour;

        custInvoiceJour = _custInvoiceJour.data();

        if (_custInvoiceJour.RecId
            && this.RecId
            && _custInvoiceJour.RecId == this.CustInvoiceJour)
        {
            custInvoiceJour.InvoicingName  = this.InvoicingName;
            custInvoiceJour.InvoiceId      = this.TaxInvoiceId;
            custInvoiceJour.InvoiceDate    = DateTimeUtil::date(this.AdjustDateTime);
        }

        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        if (this.CustInvoiceJour)
        {
            this.AdjustDateTime = DateTimeUtil::getSystemDateTime();
            this.AdjustmentType = CustInvoiceJourAdjustmentType_TH::Substitution;
            this.initReference();
            this.initCustomerInfo();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsBegin;

        if (this.TaxInvoiceId == '')
        {
            if (this.AdjustmentType == CustInvoiceJourAdjustmentType_TH::Adjustment)
            {
                this.TaxInvoiceId = NumberSeq::newGetNumFromId(CustInvoiceJour::findRecId(this.CustInvoiceJour).custInvoiceJourExtensionTH().NumberSequenceId).num();
            }
            else
            {
                CustInvoiceJourAdjustment custInvoiceJourAdjustmentLatest = CustInvoiceJourAdjustment::findLatestByCustInvoiceJour(this.CustInvoiceJour, CustInvoiceJourAdjustmentType_TH::Adjustment);
                this.TaxInvoiceId = custInvoiceJourAdjustmentLatest ? custInvoiceJourAdjustmentLatest.TaxInvoiceId : CustInvoiceJour::findRecId(this.CustInvoiceJour).InvoiceId;
            }
        }

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the parameter "_fieldName" field is valid.
    /// </summary>
    /// <param name="_fieldName">
    ///     The field name of the field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    ///     The array index of the field to validate.
    /// </param>
    /// <returns>
    ///     true if the field is valid; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;
        CustInvoiceJour             custInvoiceJour;
        CustInvoiceJourAdjustment   custInvoiceJourAdjustment;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(CustInvoiceJourAdjustment, Reference):
                    if (this.Reference)
                    {
                        ret = false;
                        select RecId from custInvoiceJour
                            where custInvoiceJour.RecId         == this.CustInvoiceJour
                                && custInvoiceJour.InvoiceId    == this.Reference;

                        if (custInvoiceJour.RecId)
                        {
                            ret = true;
                        }
                        else
                        {
                            select RecId from custInvoiceJourAdjustment
                                where custInvoiceJourAdjustment.CustInvoiceJour == this.CustInvoiceJour
                                    && custInvoiceJourAdjustment.AdjustDateTime <  this.AdjustDateTime
                                    && custInvoiceJourAdjustment.TaxInvoiceId   == this.Reference;

                            if (custInvoiceJourAdjustment.RecId)
                            {
                                ret = true;
                            }
                        }

                        if (!ret)
                        {
                            // Reference can only be the original tax invoice number or a previous adjustment Tax invoice number.
                            error("@SYS4083007");
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLatestByCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a latest enabled <C>CustInvoiceJourAdjustment</C> for a specified <C>CustInvoiceJour</C>.
    /// </summary>
    /// <param name="_custInvoiceJourRecId">
    ///    Invoice journal recId
    /// </param>
    /// <param name="_adjustmentType">
    ///    Type of adjustment to find in case substitution functionality is enabled.
    /// </param>
    /// <returns>
    /// A <C>CustInvoiceJourAdjustment</C> record.
    /// </returns>
    public static CustInvoiceJourAdjustment findLatestByCustInvoiceJour(
        RefRecId  _custInvoiceJourRecId,
        CustInvoiceJourAdjustmentType_TH _adjustmentType = CustInvoiceJourAdjustmentType_TH::None,
        CustInvoiceJourAdjustmentDateTime _adjustDateTimeUpperLimit = DateTimeUtil::maxValue())        
    {
        CustInvoiceJourAdjustment   custInvoiceJourAdjustment;

        if (_custInvoiceJourRecId)
        {
            select firstOnly custInvoiceJourAdjustment
                order by custInvoiceJourAdjustment.AdjustDateTime desc
                where custInvoiceJourAdjustment.CustInvoiceJour == _custInvoiceJourRecId
                    && custInvoiceJourAdjustment.Reference      != ''
                    && (custInvoiceJourAdjustment.AdjustmentType == _adjustmentType || _adjustmentType == CustInvoiceJourAdjustmentType_TH::None)
                    && custInvoiceJourAdjustment.AdjustDateTime < _adjustDateTimeUpperLimit;
        }

        return custInvoiceJourAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(CustInvoiceJourAdjustment, AdjustmentType):
                this.initCustomerInfo();
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (!this.Description)
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYS7576"));
        }

        if (this.AdjustmentType == CustInvoiceJourAdjustmentType_TH::Adjustment)
        {
            CustInvoiceJour custInvoiceJour = CustInvoiceJour::findRecId(this.CustInvoiceJour);
            if (!custInvoiceJour.custInvoiceJourExtensionTH().NumberSequenceId)
            {
                ret = checkFailed(strFmt("@AccountsReceivable:SubstitutionInvoices_UnableToDetermineNumberSequence", custInvoiceJour.InvoiceId, custInvoiceJour.InvoiceDate));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remarkTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets text of the remark which is printed in the bottom of the substitution/adjustment invoice.
    /// </summary>
    public Description255 remarkTxt(LanguageId _languageId = infolog.language())
    {
        Description255  remarkTxt = '';
        CustInvoiceJour custInvoiceJour = CustInvoiceJour::findRecId(this.CustInvoiceJour);
        Label           label = new Label(_languageId ? _languageId : infolog.language());
        CustInvoiceJourAdjustment custInvoiceJourAdjustment;

        custInvoiceJourAdjustment = CustInvoiceJourAdjustment::findLatestByCustInvoiceJour(this.CustInvoiceJour,
                                                                                           CustInvoiceJourAdjustmentType_TH::Adjustment,
                                                                                           this.AdjustDateTime);

        if (this.AdjustmentType == CustInvoiceJourAdjustmentType_TH::Substitution)
        {
            remarkTxt = strFmt("@AccountsReceivable:SubstitutionInvoices_SubstitutionToOriginalTaxDocument",
                                custInvoiceJourAdjustment ? custInvoiceJourAdjustment.TaxInvoiceId : custInvoiceJour.InvoiceId,
                                custInvoiceJourAdjustment ? DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(
                                                                                    custInvoiceJourAdjustment.AdjustDateTime,
                                                                                    DateTimeUtil::getUserPreferredTimeZone())) :
                                                            custInvoiceJour.InvoiceDate,
                                this.Description);
        }
        else
        {
            remarkTxt = strFmt("@AccountsReceivable:SubstitutionInvoices_AdjustmentToOriginalTaxDocument",
                                custInvoiceJourAdjustment ? custInvoiceJourAdjustment.TaxInvoiceId : custInvoiceJour.InvoiceId,
                                custInvoiceJourAdjustment ? DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(
                                                                                    custInvoiceJourAdjustment.AdjustDateTime,
                                                                                    DateTimeUtil::getUserPreferredTimeZone())) :
                                                            custInvoiceJour.InvoiceDate,
                                this.Description);
        }

        if (remarkTxt)
        {
            remarkTxt = strFmt("@SYS302330", "@AccountsReceivable:SubstitutionInvoices_Remark", remarkTxt);
        }

        return remarkTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustmentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of the current adjustment.
    /// </summary>
    /// <returns>
    /// The number of the current adjustment.
    /// </returns>
    public Integer adjustmentNumber()
    {
        Integer ret;

        if (this.AdjustmentType == CustInvoiceJourAdjustmentType_TH::Adjustment)
        {
            ret = 1;
        }
        else
        {
            CustInvoiceJourAdjustment   custInvoiceJourAdjustmentLatest, custInvoiceJourAdjustmentCount;

            // find the latest adjustment
            custInvoiceJourAdjustmentLatest = CustInvoiceJourAdjustment::findLatestByCustInvoiceJour(this.CustInvoiceJour, CustInvoiceJourAdjustmentType_TH::Adjustment);

            // count the current record as well
            select count(recId) from custInvoiceJourAdjustmentCount
                where custInvoiceJourAdjustmentCount.CustinvoiceJour == this.CustInvoiceJour
                    && custInvoiceJourAdjustmentCount.AdjustmentType == this.AdjustmentType
                    && custInvoiceJourAdjustmentCount.AdjustDateTime <= this.AdjustDateTime
                    && custInvoiceJourAdjustmentCount.AdjustDateTime >= custInvoiceJourAdjustmentLatest.AdjustDateTime;

            ret = any2Int(custInvoiceJourAdjustmentCount.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustmentTypeFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets type of invoice adjustment from <c>Args</c> object.
    /// </summary>
    /// <param name = "_args">
    /// <c>Args</c> object.
    /// </param>
    /// <returns>
    /// Type of invoice adjustment.
    /// </returns>
    public static CustInvoiceJourAdjustmentType_TH getAdjustmentTypeFromArgs(Args _args)
    {
        if (TaxThaiGovCertificationFeatureChecker::isSubstitutionAdjustmentEnabled())
        {
            switch (_args.menuItemName())
            {
                case menuitemOutputStr(SalesInvoiceSubstitution_TH):
                case menuitemOutputStr(FreeTextInvoiceSubstitution_TH):
                case menuitemOutputStr(CustDebitCreditNoteSubstitution_TH):
                    return CustInvoiceJourAdjustmentType_TH::Substitution;

                case menuitemOutputStr(SalesInvoiceAdjustment_TH):
                case menuitemOutputStr(FreeTextInvoiceAdjustment_TH):
                case menuitemOutputStr(CustDebitCreditNoteAdjustment_TH):
                    return CustInvoiceJourAdjustmentType_TH::Adjustment;

                default:
                    return CustInvoiceJourAdjustmentType_TH::None;
            }
        }

        return CustInvoiceJourAdjustmentType_TH::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustmentDetailsTxt</Name>
				<Source><![CDATA[
    public Description255 adjustmentDetailsTxt(LanguageId _languageId = infolog.language())
    {
        Description255  adjustmentDetailsTxt = '';
        CustInvoiceJour custInvoiceJour = CustInvoiceJour::findRecId(this.CustInvoiceJour);
        Label           label = new Label(_languageId ? _languageId : infolog.language());

        if (this.AdjustmentType == CustInvoiceJourAdjustmentType_TH::Substitution)
        {
            adjustmentDetailsTxt = strFmt("@AccountsReceivable:SubstitutionInvoices_SubstitutionNumberAndIssueDate",
                                            this.adjustmentNumber(),
                                            DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(
                                                                this.AdjustDateTime,
                                                                DateTimeUtil::getUserPreferredTimeZone())));
        }

        if (this.AdjustmentType == CustInvoiceJourAdjustmentType_TH::Adjustment)
        {
            adjustmentDetailsTxt = strFmt("@AccountsReceivable:SubstitutionInvoices_AdjustmentIssueDate",
                                            DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(
                                                                this.AdjustDateTime,
                                                                DateTimeUtil::getUserPreferredTimeZone())));
        }

        return adjustmentDetailsTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReference</Name>
				<Source><![CDATA[
    private void initReference()
    {
        CustInvoiceJourAdjustment   custInvoiceJourAdjustmentLatest = CustInvoiceJourAdjustment::findLatestByCustInvoiceJour(this.CustInvoiceJour,
                                                                                                                             CustInvoiceJourAdjustmentType_TH::Adjustment,
                                                                                                                             this.AdjustDateTime);

        this.Reference = custInvoiceJourAdjustmentLatest ? custInvoiceJourAdjustmentLatest.TaxInvoiceId : CustInvoiceJour::findRecId(this.CustInvoiceJour).InvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustomerInfo</Name>
				<Source><![CDATA[
    private void initCustomerInfo()
    {
        CustInvoiceJourAdjustment   custInvoiceJourAdjustmentLatest = CustInvoiceJourAdjustment::findLatestByCustInvoiceJour(this.CustInvoiceJour,
                                                                                                                             CustInvoiceJourAdjustmentType_TH::Adjustment,
                                                                                                                             this.AdjustDateTime);

        if (custInvoiceJourAdjustmentLatest)
        {
            this.InvoicingName          = custInvoiceJourAdjustmentLatest.InvoicingName;
            this.InvoicingAddress       = custInvoiceJourAdjustmentLatest.InvoicingAddress;
            this.CustomerPhone          = custInvoiceJourAdjustmentLatest.CustomerPhone;
            this.CustomerTeleFax        = custInvoiceJourAdjustmentLatest.CustomerTeleFax;
            this.InvoiceTaxRegNumber    = custInvoiceJourAdjustmentLatest.InvoiceTaxRegNumber;
            this.InvoiceVATNum          = custInvoiceJourAdjustmentLatest.InvoiceVATNum;
            this.InvoiceBranch          = custInvoiceJourAdjustmentLatest.InvoiceBranch;
            this.InvoiceBranchName      = custInvoiceJourAdjustmentLatest.InvoiceBranchName;            
        }
        else
        {
            CustInvoiceJour     custInvoiceJour = CustInvoiceJour::findRecId(this.custInvoiceJour);
            DirPartyLocation    dirPartyLocation = DirPartyLocation::findByPartyLocation(
                                        custInvoiceJour.custTable_InvoiceAccount().Party,
                                        LogisticsPostalAddress::getLocation(custInvoiceJour.InvoicePostalAddress));
            TaxInformation_TH   taxInformation_TH = TaxInformation_TH::find(dirPartyLocation.Location);

            this.InvoicingName          = CustInvoiceJour::findRecId(this.CustInvoiceJour).custTable_InvoiceAccount().name();
            this.InvoicingAddress       = custInvoiceJour.invoicingAddress();
            this.CustomerPhone          = custInvoiceJour.custTable_InvoiceAccount().phone();
            this.CustomerTeleFax        = custInvoiceJour.custTable_InvoiceAccount().telefax();
            this.InvoiceTaxRegNumber    = TaxRegistration::getTaxRegistrationFromInvoiceJour_TH(custInvoiceJour).RegistrationNumber;
            this.InvoiceBranch          = taxInformation_TH.BranchNumber;
            this.InvoiceBranchName      = LogisticsLocation::find(taxInformation_TH.LogisticsLocation).Description;

            if (custInvoiceJour.custInvoiceJourExtensionTH().NoteFormat != TaxUnrealizedSalesNoteFormat::None)
            {
                // CustomerVATNum is only printed in Debit/credit note and not in sales invoice/free text invoice
                if (custInvoiceJour.SalesId)
                {
                    this.InvoiceVATNum = custInvoiceJour.salesTable().vatNum;
                }
                else
                {
                    this.InvoiceVATNum = custInvoiceJour.custInvoiceTable().VATNum;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static CustInvoiceJourAdjustment findRecId(RecId _recId, boolean _forUpdate = false)
    {
        CustInvoiceJourAdjustment custInvoiceJourAdjustment;

        custInvoiceJourAdjustment.selectForUpdate(_forUpdate);

        select custInvoiceJourAdjustment
            where custInvoiceJourAdjustment.RecId == _recId;

        return custInvoiceJourAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markInvoiceAsPrinted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the invoice or its adjustment as printed.
    /// </summary>
    /// <param name = "_invoiceRecId">Record Id of the invoice.</param>
    /// <param name = "_adjustmentRecId">Record Id of the adjustment.</param>
    public static void markInvoiceAsPrinted(RefRecId _invoiceRecId, RefRecId _adjustmentRecId = 0)
    {
        if (_adjustmentRecId)
        {
            ttsbegin;
            CustInvoiceJourAdjustment   custInvoiceJourAdjustment = CustInvoiceJourAdjustment::findRecId(_adjustmentRecId, true);            
            custInvoiceJourAdjustment.IsPrinted = true;
            custInvoiceJourAdjustment.update();
            ttscommit;
        }
        else
        {
            ttsbegin;
            CustInvoiceJour custInvoiceJour = CustInvoiceJour::findRecId(_invoiceRecId, true);
            CustInvoiceJourExtensionTH custInvoiceJourExtensionTH = custInvoiceJour.custInvoiceJourExtensionTH();
            custInvoiceJourExtensionTH.IsPrinted = NoYes::Yes;
            custInvoiceJour.SysExtensionSerializerMap::packExtensionTable(custInvoiceJourExtensionTH);
            custInvoiceJour.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TaxThailandGovCertification</ConfigurationKey>
	<CountryRegionCodes>TH</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4083004</DeveloperDocumentation>
	<Label>@SYS4083003</Label>
	<TitleField1>TaxInvoiceId</TitleField1>
	<TitleField2>InvoicingName</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>CustInvoiceJourIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>AccountsReceivable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoicingName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Adjustment</Name>
			<Label>@SYS596</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AdjustDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoicingName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustomerInfo</Name>
			<Label>@SYS29051</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoicingName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoicingAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerPhone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerTeleFax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceTaxRegNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceVATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceBranch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceBranchName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AdjustDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustmentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPrinted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>AdjustDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustInvoiceJourAdjustmentDateTime</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceJour</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoicingName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustName</ExtendedDataType>
			<Label>@SYS4082989</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Reference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInvoiceJourReference</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxInvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxUnrealizedPurchTaxInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPrinted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IsPrinted_TH</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AdjustmentType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustInvoiceJourAdjustmentType_TH</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoicingAddress</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsAddressing</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerPhone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Phone</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerTeleFax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TeleFax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceTaxRegNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxRegistrationNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceBranch</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>BranchNumber_TH</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceBranchName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS87916</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceVATNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATNumJournal</ExtendedDataType>
			<Label>@SYS4082664</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustInvoiceJourIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CustInvoiceJour</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AdjustDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceJour</Name>
					<Field>CustInvoiceJour</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InvoiceNumIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>