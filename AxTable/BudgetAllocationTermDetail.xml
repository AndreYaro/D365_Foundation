<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAllocationTermDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetAllocationTermDetail extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editPercentage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the budget allocation percent field.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether the budget allocation percent is set.
    /// </param>
    /// <param name="_percent">
    ///    The new budget allocation percent when the <paramref name="_set" /> parameter is true.
    /// </param>
    /// <returns>
    ///    The budget allocation percent value.
    /// </returns>
    public edit Percent editPercentage(boolean _set, Percent _percent)
    {
        if (_set)
        {
            Percent initialValue = this.Percent;

            // Set the value as its used by validatePercentage() method.
            this.Percent = _percent;

            if (this.validatePercentage())
            {
                this.Percent = _percent;
            }
            else
            {
                this.Percent = initialValue;
            }
        }

        return this.Percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDefaultDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the default dimension values for each allocation term detail line.
    /// </summary>
    /// <returns>
    /// true when the default dimension is valid; otherwise, false.
    /// </returns>
    public boolean validateDefaultDimensions()
    {
        boolean ret;

        DimensionAttributeValueSetItem  dimensionAttributeValueSetItem;

        ret = true;

        if (this.DefaultDimension != 0)
        {
            while select DimensionAttributeValue from dimensionAttributeValueSetItem
                 where dimensionAttributeValueSetItem.DimensionAttributeValueSet == this.DefaultDimension
            {
                ret = BudgetAllocationTermDetail::validateDimensionAttributeValue(dimensionAttributeValueSetItem.DimensionAttributeValue) && ret;
            }
        }
        else
        {
            ret = checkFailed("@SYS190318");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePercentage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the sum of allocated percentages of the <c>BudgetAllocationTermDetail</c> records
    ///    is less than one hundred percent.
    /// </summary>
    /// <returns>
    ///    true if the sum of allocated percentages is less than one hundred percent; otherwise, false.
    /// </returns>
    public boolean validatePercentage()
    {
        BudgetAllocatePercent budgetAllocatePercentTotal;
        BudgetAllocationTerm  budgetAllocationTerm;
        BudgetAllocationTermDetail budgetAllocationTermDetail_Orig;
        boolean ret = true;

        budgetAllocationTerm = BudgetAllocationTerm::find(this.BudgetAllocationTerm);

        budgetAllocatePercentTotal = budgetAllocationTerm.allocationPercentageTotal();
        budgetAllocationTermDetail_Orig = this.orig();

        if (budgetAllocationTermDetail_Orig.RecId != 0)
        {
            // When the original budget allocation term detail record is modified, subtract the original allocated percentage
            // from the total and then add the new allocated percentage to the total.
            budgetAllocatePercentTotal = budgetAllocatePercentTotal - budgetAllocationTermDetail_Orig.Percent;
        }

        budgetAllocatePercentTotal = budgetAllocatePercentTotal + this.Percent;

        if (budgetAllocatePercentTotal > 100)
        {
            ret = checkFailed("@SYS25190");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;

        isValid = this.validateDefaultDimensions() && this.validatePercentage();

        if (isValid)
        {
            isValid = super();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>BudgetAllocationTermDetail</c> table; if
    ///    not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetAllocationTermDetail</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!BudgetAllocationTermDetail::exist(_recId))
        {
            ret = checkFailed(strfmt(BudgetAllocationTermDetail::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyBudgetAllocationTerm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the budget allocation term details from the source <c>BudgetAllocationTermId</c> value to
    ///    the destination <c>BudgetAllocationTermId</c> value.
    /// </summary>
    /// <param name="_destinationTermId">
    ///    A <c>BudgetAllocationTermId</c> value to which the <c>BudgetAllocationTermDetail</c> lines are
    ///    copied.
    /// </param>
    /// <param name="_sourceTermId">
    ///    A <c>BudgetAllocationTermId</c> value from which the <c>BudgetAllocationTermDetail</c> lines are
    ///    copied.
    /// </param>
    public static void copyBudgetAllocationTerm(BudgetAllocationTermId _destinationTermId, BudgetAllocationTermId _sourceTermId)
    {
        BudgetAllocationTerm        budgetAllocationTerm_Destination;
        BudgetAllocationTerm        budgetAllocationTerm_Source;
        BudgetAllocationTermDetail  budgetAllocationTermDetail_Source;
        BudgetAllocationTermDetail  budgetAllocationTermDetail_Destination;
        LineNum                     maxLineNum;

        if (_sourceTermId == _destinationTermId)
        {
            throw error("@SYS134176");
        }

        ttsbegin;

        budgetAllocationTerm_Source = BudgetAllocationTerm::findByTermId(_sourceTermId);

        budgetAllocationTerm_Destination = BudgetAllocationTerm::findByTermId(_destinationTermId);

        maxLineNum = budgetAllocationTerm_Destination.maxLineNumber();

        while select budgetAllocationTermDetail_Source
            where budgetAllocationTermDetail_Source.BudgetAllocationTerm == budgetAllocationTerm_Source.RecId
        {
            budgetAllocationTermDetail_Destination.clear();

            // copy the details from the source budget allocation term detail line.
            buf2Buf(budgetAllocationTermDetail_Source, budgetAllocationTermDetail_Destination);

            maxLineNum ++;
            budgetAllocationTermDetail_Destination.LineNumber = maxLineNum;
            budgetAllocationTermDetail_Destination.BudgetAllocationTerm = budgetAllocationTerm_Destination.RecId;

            if (budgetAllocationTermDetail_Destination.validateWrite())
            {
                // Since the new budget allocation term detail line is a copy of the source, the insert method
                // is used instead of write method to avoid errors while inserting.
                budgetAllocationTermDetail_Destination.insert();
            }
            else
            {
                // When the validation fails.
                break;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>BudgetAllocationTermDetail</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record id of the <c>BudgetAllocationTermDetail</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly RecId from budgetAllocationTermDetail
                    where budgetAllocationTermDetail.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>BudgetAllocationTermDetail</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetAllocationTermDetail</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>BudgetAllocationTermDetail</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetAllocationTermDetail find(
        RecId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetAllocationTermDetail budgetAllocationTermDetail;

        budgetAllocationTermDetail.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetAllocationTermDetail.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetAllocationTermDetail
            where budgetAllocationTermDetail.RecId == _recId;

        return budgetAllocationTermDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimensionAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>DimensionAttributeValue</c> record to check whether it is suspended.
    /// </summary>
    /// <param name="_dimensionAttributeValueRecId">
    ///    The record ID to validate.
    /// </param>
    /// <returns>
    ///    true when the <c>DimensionAttributeValue</c> record is valid; otherwise, false.
    /// </returns>
    public static boolean validateDimensionAttributeValue(RecId _dimensionAttributeValueRecId)
    {
        boolean ret = false;
        DimensionAttributeValue dimensionAttributeValue;

        dimensionAttributeValue = DimensionAttributeValue::find(_dimensionAttributeValueRecId);

        if (dimensionAttributeValue)
        {
            if (dimensionAttributeValue.IsSuspended)
            {
                ret = checkFailed(strfmt("@SYS135694", dimensionAttributeValue.getValue()));
            }
            else
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicBudget</ConfigurationKey>
	<DeveloperDocumentation>@SYS134198</DeveloperDocumentation>
	<FormRef>BudgetAllocationTerm</FormRef>
	<Label>@SYS134197</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>DefaultDimension</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Budget</Modules>
	<ReplacementKey>LineNumberIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetAllocationTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetAllocationTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetAllocationTermDetail</Name>
			<Label>@SYS134197</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetAllocationTerm</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetDefaultDimensionValueSet</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetAllocatePercent</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LineNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetAllocationTerm</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetAllocationTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS134177</EntityRelationshipRole>
			<RelatedTable>BudgetAllocationTerm</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetAllocationTerm</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetAllocationTermDetail</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetAllocationTerm</Name>
					<Field>BudgetAllocationTerm</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetAllocationTermDetail</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>