<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25TmpInventoryActLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RTax25TmpInventoryActLine extends common
{
    /// <summary>
    /// Gets title of the document assotiated with agreement.
    /// </summary>
    /// <returns>
    /// Agreement document title.
    /// </returns>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementDocumentTitle</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute, Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display AgreementDocumentTitle agreementDocumentTitle()
    {
        return AgreementHeader::find(
            AgreementHeaderExt_RU::findByAgreementId(this.AgreementId).AgreementHeader).DocumentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display CustVendName custVendName()
    {
        return this.custvendTable().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custvendTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    CustVendTable custvendTable()
    {
        if (this.ModuleType == ModuleCustVend::Cust)
        {
            return CustTable::find(this.AccountNum);
        }
        else
        {
            return VendTable::find(this.AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void initFromCustVendTrans(CustVendTrans _custVendTrans)
    {
        this.AccountNum                 = _custVendTrans.AccountNum;
        this.DocumentNum                = _custVendTrans.DocumentNum;
        this.DocumentDate               = _custVendTrans.DocumentDate;
        this.CustVendtransRefTableId    = _custVendTrans.TableId;
        this.CustVendtransRefRecId      = _custVendTrans.RecId;
        this.DebtDate                   = _custVendTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInvoice</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void initFromInvoice(CustVendInvoiceJour _invoiceJour)
    {
        CustVendTrans   custVendTrans;
        CustTrans       custTrans;
        VendTrans       vendTrans;
        ;
        if (_invoiceJour.module() == SysModule::Cust)
        {
            custVendTrans = _invoiceJour.CustVendInvoiceJour::custVendTrans(custTrans);
        }
        else
        {
            custVendTrans = _invoiceJour.CustVendInvoiceJour::custVendTrans(vendTrans);
        }
        this.AccountNum                 = _invoiceJour.InvoiceAccount;
        this.DocumentNum                = _invoiceJour.InvoiceNum;
        this.DocumentDate               = _invoiceJour.InvoiceDate;
        this.DocumentName               = "@GLS101549";
        this.AgreementId                = AgreementHeaderExt_RU::findByDefaultDimension(_invoiceJour.DefaultDimension).AgreementId;
        this.CustVendtransRefTableId    = custVendTrans.TableId;
        this.CustVendtransRefRecId      = custVendTrans.RecId;
        this.DebtDate                   = custVendTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournaltrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void initFromLedgerJournaltrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        FactureJour_RU      factureJour;

        this.AccountNum  = _ledgerJournalTrans.parmAccount();
        this.AgreementId = _ledgerJournalTrans.AccountAgreementId_RU;

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
        {
            this.ModuleType = ModuleCustVend::Cust;
            if (_ledgerJournalTrans.Prepayment    &&
               _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
            {
                select firstonly FactureExternalId,FactureDate_External from factureJour
                    where factureJour.Voucher       == _ledgerJournalTrans.Voucher   &&
                          factureJour.FactureDate   == _ledgerJournalTrans.TransDate &&
                          factureJour.Module        == FactureModule_RU::Cust        &&
                          factureJour.FactureType   == FactureType_RU::Prepayment    &&
                          factureJour.CustVendInvoiceAccount == _ledgerJournalTrans.parmAccount();

                this.DocumentNum    = factureJour.FactureExternalId;
                this.DocumentDate   = factureJour.FactureDate_External;
                this.DocumentName   = "@GLS100743";
            }
            else
            {
                this.DocumentNum    = _ledgerJournalTrans.DocumentNum;
                this.DocumentDate   = _ledgerJournalTrans.DocumentDate ?
                                      _ledgerJournalTrans.DocumentDate :
                                      _ledgerJournalTrans.TransDate;
                this.DocumentName   = "@GLS100632";
            }
            this.CustVendtransRefTableId     = tablenum(CustTrans);
            this.CustVendtransRefRecId       = CustTrans::findVoucherDate(_ledgerJournalTrans.Voucher,
                                                             _ledgerJournalTrans.TransDate).RecId;
        }
        else
        {
            this.ModuleType = ModuleCustVend::Vend;
            this.DocumentNum    = _ledgerJournalTrans.DocumentNum;
            this.DocumentDate   = _ledgerJournalTrans.DocumentDate ?
                                  _ledgerJournalTrans.DocumentDate :
                                  _ledgerJournalTrans.TransDate;
            this.DocumentName   = "@GLS100632";
            this.CustVendtransRefTableId     = tablenum(VendTrans);
            this.CustVendtransRefRecId       = VendTrans::findVoucherDate(_ledgerJournalTrans.Voucher,
                                                             _ledgerJournalTrans.TransDate).RecId;
        }
        this.DebtDate = _ledgerJournalTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSourceDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void initFromSourceDocument(Common _sourceDocument)
    {
        GeneralJournalAccountEntry              accountEntry;
        GeneralJournalEntry                     journalEntry;
        SubledgerVoucherGeneralJournalEntry     subLedgerVoucherLink;
        Voucher                                 voucher;
        TransDate                               transDate;
        LedgerPostingType                       postingType;

        switch (_sourceDocument.TableId)
        {
            case tablenum(CustInvoiceJour)      :
            case tablenum(VendInvoiceJour)      :
                this.initFromInvoice(_sourceDocument);
                if (_sourceDocument.TableId == tablenum(CustInvoiceJour))
                {
                    this.ModuleType = ModuleCustVend::Cust;
                    postingType     = LedgerPostingType::CustBalance;
                    transDate       = _sourceDocument.(fieldnum(CustInvoiceJour, InvoiceDate));
                    voucher         = _sourceDocument.(fieldnum(CustInvoiceJour, LedgerVoucher));
                }
                else
                {
                    this.ModuleType = ModuleCustVend::Vend;
                    postingType     = LedgerPostingType::VendBalance;
                    transDate       = _sourceDocument.(fieldnum(VendInvoiceJour, InvoiceDate));
                    voucher         = _sourceDocument.(fieldnum(VendInvoiceJour, LedgerVoucher));
                }
                break;
            case tablenum(LedgerJournalTrans)   :
                this.initFromLedgerJournaltrans(_sourceDocument);
                if (_sourceDocument.(fieldnum(LedgerJournalTrans, AccountType)) == LedgerJournalACType::Cust)
                {
                    postingType = LedgerPostingType::CustBalance;
                }
                else
                {
                    postingType = LedgerPostingType::VendBalance;
                }
                transDate   = _sourceDocument.(fieldnum(LedgerJournalTrans, TransDate));
                voucher     = _sourceDocument.(fieldnum(LedgerJournalTrans, Voucher));
                break;
            case tablenum(CustTrans)            :
            case tablenum(VendTrans)            :
                this.initFromCustVendTrans(_sourceDocument);
                if (_sourceDocument.TableId == tablenum(CustTrans))
                {
                    this.ModuleType = ModuleCustVend::Cust;
                    postingType     = LedgerPostingType::CustBalance;
                    transDate       = _sourceDocument.(fieldnum(CustTrans, TransDate));
                    voucher         = _sourceDocument.(fieldnum(CustTrans, Voucher));
                }
                else
                {
                    this.ModuleType = ModuleCustVend::Vend;
                    postingType     = LedgerPostingType::VendBalance;
                    transDate       = _sourceDocument.(fieldnum(VendTrans, TransDate));
                    voucher         = _sourceDocument.(fieldnum(VendTrans, Voucher));
                }
                break;
        }

        select firstOnly LedgerDimension from accountEntry
            where accountEntry.PostingType == postingType
            exists join journalEntry
                where journalEntry.RecId  == accountEntry.GeneralJournalEntry &&
                      journalEntry.Ledger == Ledger::current()
                exists join subLedgerVoucherLink
                    where subLedgerVoucherLink.GeneralJournalEntry == journalEntry.RecId
                       && subLedgerVoucherLink.Voucher             == voucher
                       && subLedgerVoucherLink.VoucherDataAreaId   == curext()
                       && subLedgerVoucherLink.AccountingDate      == transDate;

        this.LedgerDimension = accountEntry.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Jumps to the agreements.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void jumpRefAgreement()
    {
        switch (this.ModuleType)
        {
            case ModuleCustVend::Cust:
                SalesAgreementHeaderExt_RU::salesAgreementJumpRef(AgreementHeaderExt_RU::findByAgreementId(this.AgreementId).recId);
                break;
            case ModuleCustVend::Vend:
                PurchAgreementHeaderExt_RU::purchAgreementJumpRef(AgreementHeaderExt_RU::findByAgreementId(this.AgreementId).recId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecord</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static Common sourceRecord(RefTableId _refTableId, RefRecId _refRecId)
    {
        SysDictTable dictTable;
        Common       common;

        if (_refTableId)
        {
            dictTable   = new SysDictTable(_refTableId);
            common      = dictTable.makeRecord();
            select firstonly common
                where common.RecId == _refRecId;
        }
        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineAmountFromRegisterTransMap</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initLineAmountFromRegisterTransMap(RTax25RegisterTransMap _regTransMap)
    {
        RTax25RegisterTrans_DebtDebInventoryRAP debit;
        RTax25RegisterTrans_DebtCreditInventory credit;
        RTax25DebtModelPeriod                   debtPeriod;
        container                               debts;
        int                                     idx;

        if (this.DebtType == RTax25DebtType::Debit)
        {
            select count(RecId) from debtPeriod
            where debtPeriod.DebtModel == CustParameters::rTax25DebtModel();

            debit   = _regTransMap;
            debts   = [
                debit.Debt0_45,
                debit.Debt45_90,
                debit.Debt90_240,
                debit.DebtReserved,
                debit.Hopeless
            ];

            for (idx = 1; idx < debtPeriod.RecId; idx++)
            {
                this.DebtAmount += conPeek(debts, idx);
            }

            if (debtPeriod.RecId)
            {
                this.HopelessAmount = conPeek(debts, any2int(debtPeriod.RecId));
            }

            this.NonapprovedAmount = debit.NonConfirmedDebt;
        }
        else
        {
            credit                 = _regTransMap;
            this.DebtAmount        = credit.Debt;
            this.NonapprovedAmount = credit.NonConfirmedDebt;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<Label>@GLS112751</Label>
	<TitleField1>DebtType</TitleField1>
	<TitleField2>AccountNum</TitleField2>
	<ClusteredIndex>RecId</ClusteredIndex>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Agreement</Name>
			<Label>@GLS105065</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>agreementDocumentTitle</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Contractor</Name>
			<Label>@SYS34389</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>custVendName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Document</Name>
			<Label>@SYS21873</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GeneralLedger</Name>
			<Label>@SYS24097</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DebtType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgreementId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AgreementId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustVendtransRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CustVendtransRefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DebtAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RTax25BadDebtAmount</ExtendedDataType>
			<Label>@GLS112754</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DebtDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS67</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DebtType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>RTax25DebtType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DocumentNameLong_RU</ExtendedDataType>
			<Label>@GLS112752</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>HopelessAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RTax25BadDebtAmount</ExtendedDataType>
			<Label>@GLS112753</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>ModuleCustVend</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NonapprovedAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RTax25NonApprovedDebtAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RegisterTransRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RegisterTransRefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RTax25TmpInventoryActLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ModuleType</Name>
					<Field>ModuleType</Field>
					<ValueStr>ModuleCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RTax25TmpInventoryActLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RTax25TmpInventoryActLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ModuleType</Name>
					<Field>ModuleType</Field>
					<ValueStr>ModuleCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>