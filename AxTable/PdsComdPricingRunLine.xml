<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsComdPricingRunLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsComdPricingRunLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearUnnecessaryFields</Name>
				<Source><![CDATA[
    private void clearUnnecessaryFields()
    {
        if (this.UseStandardCost)
        {
            this.BaseItemId             = "";
            this.BaseInventSiteId       = "";
            this.BaseInventLocationId   = "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compute the cost of this pricing run line.
    /// </summary>
    /// <param name="_ignoreError">
    /// Optional boolean to indicate if attempt to find the base item should be thrown or ignored.
    /// </param>
    /// <returns>
    /// Computed cost.
    /// </returns>
    /// <exception cref="Exception::Error">Too many base item references and possibly infinite loop.</exception>
    /// <exception cref="Exception::Error">Could not find the base item reference. Thrown only if _ignoreError is false.</exception>
    /// <remarks>
    /// <syntax>
    /// public PdsCost computeCost(boolean _ignoreError)
    /// </syntax>
    /// </remarks>
    public PdsCost computeCost(boolean _ignoreError = false)
    {
        return this.computeCost0(_ignoreError, 0, PdsParameters::find().BaseRefDepth);
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeCost0</Name>
				<Source><![CDATA[
    private PdsCost computeCost0(
        boolean _ignoreError,
        int     _depth,
        int     _maxDepth)
    {
        PdsComdPricingRunLine   baseCommodity;
        PdsCost                 newCost = this.Cost;

        if (_depth >= _maxDepth)
        {
            throw error(strfmt("@PDS431", _maxDepth));
        }

        if (this.UseStandardCost)
        {
            newCost = InventTable::find(this.ItemId).costPcsPrice('',
                this.inventDim(), null, this.pricingRun().RunEffective);
        }
        else if (this.BaseItemId)
        {
            baseCommodity = PdsComdPricingRunLine::findBaseItem(this);
            if (!baseCommodity)
            {
                if (_ignoreError)
                {
                    return newCost;
                }
                throw error(strfmt("@PDS424", this.BaseItemId,
                    this.BaseInventLocationId));
            }

            newCost = baseCommodity.computeCost0(_ignoreError, _depth + 1,
                    _maxDepth)
                * this.PriceMult * (1 + this.PricePerc / 100)
                + this.PriceChange;
        }

        return newCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the difference between the current cost and previous cost.
    /// </summary>
    /// <returns>
    /// Difference between current cost and previous cost.
    /// </returns>
    /// <remarks>
    /// The cost difference is computed with the following formula:
    ///
    ///     Cost - PrevCost
    /// <syntax>
    /// public PdsCostDiff costDifference()
    /// </syntax>
    /// </remarks>
    public display PdsCostDiff costDifference()
    {
        return this.Cost - this.PrevCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDependents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if there are other pricing run lines are dependent on this one.
    /// </summary>
    /// <returns>
    /// true if there is at least one other pricing run that references this line as a base item; false otherwise.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public boolean hasDependents()
    /// </syntax>
    /// </remarks>
    public boolean hasDependents()
    {
        InventDim       inventDim = this.inventDim();

        return (select pdsComdPricingRunLine
                    where pdsComdPricingRunLine.PricingRunId
                            == this.PricingRunId
                        && pdsComdPricingRunLine.BaseItemId == this.ItemId
                        && pdsComdPricingRunLine.BaseInventSiteId
                            == inventDim.InventSiteId
                        && pdsComdPricingRunLine.BaseInventLocationId
                            == inventDim.InventLocationId
                        && pdsComdPricingRunLine.UseStandardCost  == NoYes::No)
                    .RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard method to initialize the record buffer.
    /// </summary>
    /// <remarks>
    /// This method is overridden to provide a custom default value for the following
    /// fields:
    ///
    ///     PriceMult: set to 1
    /// <syntax>
    /// public void initValue()
    /// </syntax>
    /// </remarks>
    public void initValue()
    {
        this.PriceMult = 1;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the InventDim record associated with the current PdsComdPricingRunLine record.
    /// </summary>
    /// <returns>Associated InventDimrecord</returns>
    /// <remarks>
    /// <syntax>
    /// public Record inventDim()
    /// </syntax>
    /// </remarks>
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executed when a field is modified in a form.
    /// </summary>
    /// <param name="_fieldName">Table field Name of the field being modified.</param>
    /// <param name="_arrayIndex">The array index of the field; optional.
    /// </param>
    /// <remarks>
    /// This method operates on the following fields:
    /// <ul><li>UseStandardCost, BaseItemId, BaseInventLocationId, PriceMult - recompute the cost.
    /// </li>
    /// <li>PricePerc - set PriceChange to zero and recompute the cost.
    /// </li>
    /// <li>BaseItemId- set BaseInventSiteId and BaseInventLocationId to zero if BaseItemId is deleted and recompute the cost .
    /// </li>
    /// <li>PriceChange - set PricePerc to zero and recompute the cost.
    /// </li></ul>
    /// </remarks>
    public void modifiedFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(PdsComdPricingRunLine, UseStandardCost):
            case fieldstr(PdsComdPricingRunLine, BaseInventSiteId):
            case fieldstr(PdsComdPricingRunLine, BaseInventLocationId):
            case fieldstr(PdsComdPricingRunLine, PriceMult):
                this.Cost = this.computeCost(true);
                break;
            case fieldstr(PdsComdPricingRunLine, BaseItemId):
                if (! this.BaseItemId)
                {
                    this.BaseInventSiteId = '';
                    this.BaseInventLocationId = '';
                    this.PriceChange = 0;
                    this.PricePerc = 0;
                    this.PriceMult = 1;
                }
                this.Cost = this.computeCost(true);
                break;
            case fieldstr(PdsComdPricingRunLine, PricePerc):
                this.PriceChange = 0;
                this.Cost = this.computeCost(true);
                break;

            case fieldstr(PdsComdPricingRunLine, PriceChange):
                this.PricePerc = 0;
                this.Cost = this.computeCost(true);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pricingRun</Name>
				<Source><![CDATA[
    public PdsComdPricingRun pricingRun()
    {
        return PdsComdPricingRun::find(this.PricingRunId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard update method, executed when a record is to be updated.
    /// </summary>
    /// <remarks>
    /// This method is overridden to ensure the cost is recomputed on this record and
    /// any dependent recodrs.
    /// <syntax>
    /// public void update()
    /// </syntax>
    /// </remarks>
    public void update()
    {
        this.clearUnnecessaryFields();
        this.Cost = this.computeCost();

        super();

        this.updateCostOnDependents();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCostOnDependents</Name>
				<Source><![CDATA[
    private void updateCostOnDependents(
        int     _depth = 0,
        int     _maxDepth = PdsParameters::find().BaseRefDepth)
    {
        PdsComdPricingRunLine   referent;
        PdsCost                 newCost;
        InventDim               inventDim = this.inventDim();

        if (_depth >= _maxDepth)
        {
            throw error(strfmt("@PDS431", _maxDepth));
        }

        while select forupdate referent
            where referent.PricingRunId          == this.PricingRunId
                && referent.BaseItemId           == this.ItemId
                && referent.BaseInventSiteId     == inventDim.InventSiteId
                && referent.BaseInventLocationId == inventDim.InventLocationId
        {
            newCost = this.Cost * referent.PriceMult
                * (1 + referent.PricePerc / 100) + referent.PriceChange;

            if (newCost != referent.Cost)
            {
                referent.Cost = newCost;
                // cannot use update() as that would cause infinite recursion
                referent.doUpdate();
            }

            referent.updateCostOnDependents(_depth + 1, _maxDepth);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard method to check if a record can be deleted.
    /// </summary>
    /// <returns>
    /// true if the record can be deleted; false otherwise.
    /// </returns>
    /// <remarks>
    /// This ensures that the record cannot be deleted if it still has dependents -
    /// other records that refer to this one as a base item/warehouse.
    /// <syntax>
    /// public boolean validateDelete()
    /// </syntax>
    /// </remarks>
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.hasDependents())
            {
                ret = checkFailed("@PDS432");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean         ret = true;
        InventTable     item;
        ReqPOType       reqPoType;

        switch (_fieldName)
        {
            case fieldStr(PdsComdPricingRunLine, ItemId):
                if (this.ItemId)
                {
                    item = InventTable::find(this.ItemId);
                    if (!item.isStocked())
                    {
                        ret = checkFailed("@PDS1896");
                    }
                    if (ret && (item.ItemType != ItemType::Item))
                    {
                        ret = checkFailed("@PRO2323");
                    }
                    if (ret)
                    {
                        reqPOType = item.inventItemSetupSupplyType().DefaultOrderType;
                        if (reqPOType != ReqPOType::Purch)
                        {
                            ret = checkFailed(strfmt("@SYS190033", reqPOType));
                        }
                    }
                }
            break;
        }

        ret = ret && super(_fieldName, _arrayIndex);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard method to check if a record may be update or added to the database.
    /// </summary>
    /// <returns>
    /// true if the contents is valid and can be written; false otherwise.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public boolean validateWrite()
    /// </syntax>
    /// </remarks>
    public boolean validateWrite()
    {
        boolean     ret;
        InventDim   inventDim = this.inventDim();

        ret = super();

        if (!this.UseStandardCost && this.BaseItemId)
        {
            if (this.BaseItemId              == this.ItemId
                && this.BaseInventSiteId     == inventDim.InventSiteId
                && this.BaseInventLocationId == inventDim.InventLocationId)
            {
                ret = checkFailed("@PDS426");
            }

            if (ret && !PdsComdPricingRunLine::findBaseItem(this))
            {
                ret = checkFailed(strfmt("@PDS425", this.BaseItemId,
                    this.BaseInventSiteId, this.BaseInventLocationId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard write method, executed when a record is to be inserted.
    /// </summary>
    /// <remarks>
    /// This method is overridden to ensure the cost is recomputed on this record.
    /// <syntax>
    /// public void write()
    /// </syntax>
    /// </remarks>
    public void write()
    {
        this.clearUnnecessaryFields();
        this.Cost = this.computeCost();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy the lines of one pricing run to another pricing run.
    /// </summary>
    /// <param name="_destId">Destination pricing run id.</param>
    /// <param name="_srcId">Source pricing run id.</param>
    /// <param name="_progress">Optional progress indicator to use to show the copy progress.</param>
    /// <remarks>
    /// This will copy all run lines from the source run to the destination
    /// run. This should only be used if the destination run has no lines, there
    /// is no check for duplicate lines.<p />
    ///
    /// After all lines are copied, this will update the cost on all lines that use
    /// standard cost. If the cost value changes, then any dependent lines will also
    /// be updated.<p/>
    ///
    /// If the progress indicator is given then this will update the progress. The
    /// total is set to the number of line records in the source run.
    /// <syntax>
    /// public static void copyRun(PdsPricingRunId _destId, PdsPricingRunId _srcId, SysOperationProgress _progress)
    /// </syntax>
    /// </remarks>
    public static void copyRun(
        PdsComdPricingRunId         _destId,
        PdsComdPricingRunId         _srcId,
        SysOperationProgress        _progress = null)
    {
        PdsComdPricingRunLine       pdsComdPricingRunLine;
        PdsCost                     newCost;

        #define.ProgressFactor  (2)

        if (!_srcId || !_destId)
        {
            return;
        }

        if (PdsComdPricingRunLine::hasDataForRun(_destId))
        {
            throw error(strfmt("@PDS393", _destId));
        }

        if (_progress)
        {
            select count(RecId)
                from pdsComdPricingRunLine
                where pdsComdPricingRunLine.PricingRunId == _srcId;
            _progress.setTotal(pdsComdPricingRunLine.RecId * #ProgressFactor);
        }

        try
        {
            ttsbegin;

            while select pdsComdPricingRunLine
                where pdsComdPricingRunLine.PricingRunId == _srcId
            {
                if (_progress)
                {
                    _progress.incCount();
                }

                pdsComdPricingRunLine.PricingRunId = _destId;
                pdsComdPricingRunLine.PrevCost     = pdsComdPricingRunLine.Cost;

                pdsComdPricingRunLine.doInsert();
            }

            // Must recompute the cost after the copy since base items may be after
            // the referencing item.
            while select forupdate pdsComdPricingRunLine
                where pdsComdPricingRunLine.PricingRunId == _destId
                    && pdsComdPricingRunLine.UseStandardCost == NoYes::Yes
            {
                if (_progress)
                {
                    _progress.incCount();
                }

                newCost = pdsComdPricingRunLine.computeCost();
                if (newCost != pdsComdPricingRunLine.Cost)
                {
                    pdsComdPricingRunLine.Cost = newCost;
                    pdsComdPricingRunLine.doUpdate();
                    pdsComdPricingRunLine.updateCostOnDependents();
                }
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }

        if (_progress)
        {
            _progress.kill();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
        RecId _recId)
    {
        return _recId
            && (select pdsComdPricingRunLine
                    where pdsComdPricingRunLine.RecId == _recId)
                    .RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PdsComdPricingRunLine find(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        PdsComdPricingRunLine pdsComdPricingRunLine;

        pdsComdPricingRunLine.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstonly pdsComdPricingRunLine
                where pdsComdPricingRunLine.RecId == _recId;
        }

        return pdsComdPricingRunLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBaseItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the PdsPricingRunLine record that matches the base item/warehouse combination for the given run line record.
    /// </summary>
    /// <param name="_runLine">PdsPricingRunLine record to lookup the base item reference record for.</param>
    /// <param name="_forUpdate">Optional. Specify as true if the record should be locked for update.
    /// Default value is false - do not lock the record for update.</param>
    /// <returns>Record value if found, empty otherwise.</returns>
    /// <remarks>
    /// <syntax>
    /// public static PdsPricingRunLine findBaseItem(Record _runLine, boolean _forUpdate)
    /// </syntax>
    /// </remarks>
    public static PdsComdPricingRunLine findBaseItem(
        PdsComdPricingRunLine   _runLine,
        boolean                 _forUpdate = false)
    {
        return PdsComdPricingRunLine::findPricingRunId(
            _runLine.PricingRunId,
            _runLine.BaseItemId,
            _runLine.BaseInventSiteId,
            _runLine.BaseInventLocationId,
            _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForPricing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a PdsPricingRunLine for pricing an item.
    /// </summary>
    /// <param name="_run">Pricing run id for the lines to select.</param>
    /// <param name="_item">Item id of the item to get cost line for.</param>
    /// <param name="_site">Optional. Site to get the cost line for.</param>
    /// <param name="_warehouse">Optional. Warehouse to get the cost line for.</param>
    /// <param name="_newSite">Optional. Site to be used for costing.</param>
    /// <returns>PdsPricingRunLine that matches, or an empty record if no match found.</returns>
    /// <remarks>
    /// This attempts to find the line that matches the parameter values, including
    /// warehouse. If none found and the InventLocationId (warehouse) is not blank then
    /// this attempts to find a line that matches the run and item id with a  blank
    /// warehouse.
    /// <syntax>
    /// public static PdsPricingRunLine findForPricing(PdsPricingRunId _run, ItemId _item, InventLocationId _warehouse)
    /// </syntax>
    /// </remarks>
    public static PdsComdPricingRunLine findForPricing(
        PdsComdPricingRunId         _run,
        ItemId                  _item,
        InventSiteId            _site = '',
        InventLocationId        _warehouse = '',
        InventSiteId            _newSite = '')
    {
        PdsComdPricingRunLine   pdsComdPricingRunLine;

        //
        // if _site is specified, then _newSite and _site have to be identical
        // (otherwise the version cannot be attached to the Formula)
        //
        if (!pdsComdPricingRunLine && _newSite && !_site)
        {
            pdsComdPricingRunLine = PdsComdPricingRunLine::findPricingRunId(_run,
                                            _item, _newSite, '');
        }

        if (!pdsComdPricingRunLine)
        {
            pdsComdPricingRunLine = PdsComdPricingRunLine::findPricingRunId(_run,
                                            _item, _site, _warehouse);
        }

        if (!pdsComdPricingRunLine && _site && _warehouse)
        {
            pdsComdPricingRunLine = PdsComdPricingRunLine::findPricingRunId(_run,
                _item, _site, '');
        }

        if (!pdsComdPricingRunLine && _warehouse)
        {
            pdsComdPricingRunLine = PdsComdPricingRunLine::findPricingRunId(_run,
                _item, '', '');
        }

        return pdsComdPricingRunLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPricingRunId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a specific PdsPricingRunLine record.
    /// </summary>
    /// <param name="_run">Pricing run id to CopyOffind.</param>
    /// <param name="_itemId">Item id to find.</param>
    /// <param name="_siteId">Site to find.</param>
    /// <param name="_warehouse">Inventory location id (wareouse) to find.</param>
    /// <param name="_forUpdate">Optional. Specify as true if the record should be locked for update.
    /// Default value is false - do not lock the record for update.</param>
    /// <returns>Record value if found, empty otherwise.</returns>
    /// <remarks>
    /// <syntax>
    /// public static PdsPricingRunLine findPricingRunId(PdsPricingRunId _run, ItemId _itemId, InventLocationId _warehouse, boolean _forUpdate)
    /// </syntax>
    /// </remarks>
    public static PdsComdPricingRunLine findPricingRunId(
        PdsComdPricingRunId _run,
        ItemId              _itemId,
        InventSiteId        _siteId,
        InventLocationId    _warehouse,
        boolean             _forUpdate = false)
    {
        PdsComdPricingRunLine   pdsComdPricingRunLine;
        InventDim               inventDim;

        pdsComdPricingRunLine.selectForUpdate(_forUpdate);

        if (_run && _itemId)
        {
            select firstonly pdsComdPricingRunLine
                where  pdsComdPricingRunLine.PricingRunId   == _run
                    && pdsComdPricingRunLine.ItemId         == _itemId
                join TableId
                from inventDim
                where  inventDim.InventLocationId   == _warehouse
                    && inventDim.InventSiteId       == _siteId
                    && inventDim.InventDimId
                        == pdsComdPricingRunLine.InventDimId;
        }

        return pdsComdPricingRunLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDataForRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the given pricing run has any lines.
    /// </summary>
    /// <param name="_runId">Pricing run id to check.</param>
    /// <returns>true if there is at least one line in the pricing run; false otherwise.</returns>
    /// <remarks>
    /// <syntax>
    /// public static boolean hasDataForRun(PdsPricingRunId _runId)
    /// </syntax>
    /// </remarks>
    public static boolean hasDataForRun(PdsComdPricingRunId _runId)
    {
        return _runId
            && (select pdsComdPricingRunLine
                    where pdsComdPricingRunLine.PricingRunId == _runId).RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsCommodity</ConfigurationKey>
	<DeveloperDocumentation>@PDS1109</DeveloperDocumentation>
	<Label>@PDS353</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>PricingRunId</TitleField2>
	<ClusteredIndex>PricingRunItemIdx</ClusteredIndex>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PricingRunId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Cost</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Cost</Name>
			<Label>@SYS4249</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseStandardCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrevCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Cost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costDifference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostCalcuation</Name>
			<Label>@SYS35035</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BaseItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BaseInventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceMult</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PricePerc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceChange</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PricingRunId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Site</Name>
			<Label>@PDS1056</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BaseInventSiteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BaseInventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<Label>@PDS398</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BaseInventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<Label>@PDS633</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BaseItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Label>@PDS396</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Cost</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PrevCost</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsComdPrevCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceChange</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsComdPriceChange</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceMult</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsComdPriceMult</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PricePerc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsComdPricePerc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PricingRunId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsComdPricingRunId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseStandardCost</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsUseStandardCost</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PricingRunItemIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>PricingRunId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BaseItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PricingRunId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BaseItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BaseInventSiteId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BaseInventLocationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BaseInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BaseInventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>BaseInventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BaseInventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BaseInventSiteId</Name>
					<SourceEDT>InventSiteId</SourceEDT>
					<Field>BaseInventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BaseInventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BaseItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>BaseItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BaseItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsComdPricingRunLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BaseItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PdsComdPricingRunLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PricingRunId</Name>
					<Field>PricingRunId</Field>
					<RelatedField>PricingRunId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BaseItemId</Name>
					<Field>BaseItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Item</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Item</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PdsComdPricingRunLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsComdPricingRun</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>CascadeRestricted</OnDelete>
			<RelatedTable>PdsComdPricingRun</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PricingRunId</Name>
					<Field>PricingRunId</Field>
					<RelatedField>PricingRunId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>