<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ServiceTaxTotal_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ServiceTaxTotal_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBaseCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting currency.
    /// </summary>
    /// <returns>
    /// Returns the accounting currency.
    /// </returns>
    display CurrencyCode getBaseCurrency()
    {
        return  Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSecondaryCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reporting currency.
    /// </summary>
    /// <returns>
    /// Returns the reporting currency.
    /// </returns>
    display CurrencyCode getSecondaryCurrency()
    {
        return  Ledger::reportingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoServiceTaxTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initalizes values for this instance of <c>ServiceTaxTotal_IN</c> table.
    /// </summary>
    /// <param name="_selectQuery">
    /// The select query.
    /// </param>
    /// <param name="_fieldName">
    /// The field name.
    /// </param>
    void insertIntoServiceTaxTotal(SelectQuery_IN      _selectQuery,
                                   FieldLabel          _fieldName)
    {
        this.FieldName      = _fieldName;
        this.SelectQuery    = _selectQuery;
        this.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteServiceTaxTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records in <c>ServiceTaxTotal_IN</c> table for given parameter.
    /// </summary>
    /// <param name="_selectQry">
    /// The select query.
    /// </param>
    public static void deleteServiceTaxTotal(SelectQuery_IN  _selectQry)
    {
        ServiceTaxTotal_IN   serviceTaxTotal;

        ttsbegin;
        delete_from serviceTaxTotal
           where serviceTaxTotal.SelectQuery == _selectQry;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the ServiceTaxTotal_IN table for the specified id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing ServiceTaxTotal_IN table.
    /// </returns>
    public static ServiceTaxTotal_IN find(
        RefRecId            _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        ServiceTaxTotal_IN      serviceTaxTotal;

        serviceTaxTotal.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            serviceTaxTotal.concurrencyModel(_concurrencyModel);
        }

        select firstonly serviceTaxTotal
            where serviceTaxTotal.RecId == _recId;

        return serviceTaxTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertServiceTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts record in <c>ServiceTaxTotal_IN</c> table for given parameter.
    /// </summary>
    /// <param name="_callerTmpTable">
    /// A instance of <c>TmpServiceTaxInquiryTable_IN</c> table.
    /// </param>
    /// <param name="_selectQry">
    /// The select query.
    /// </param>
    /// <param name="_fieldNames">
    /// The field name.
    /// </param>
    /// <param name="_serviceTaxTransInquiry">
    /// A instance of <c>ServiceTaxTransInquiry_IN</c>.
    /// </param>
    /// <param name="_setAmountsToZero">
    /// This param is used to decide whether set amounts to zero; optional.
    /// </param>
    public static void insertServiceTax(
        TmpServiceTaxInquiryTable_IN _callerTmpTable,
        SelectQuery_IN               _selectQry,
        container                    _fieldNames,
        ServiceTaxTransInquiry_IN    _serviceTaxTransInquiry,
        boolean                      _setAmountsToZero = false)
    {
        ServiceTaxTotal_IN           serviceTaxTotal;
        int                          position;
        fieldId                      fieldId;
        TmpServiceTaxInquiryTable_IN callerTmpTable;

        CurrencyExchangeHelper  currencyHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                                         callerTmpTable.TransDate);
        callerTmpTable.data(_callerTmpTable);
        callerTmpTable.doInsert();

        while select forupdate serviceTaxTotal
            where serviceTaxTotal.SelectQuery == _selectQry
        {
            if (_setAmountsToZero)
            {
                ttsbegin;
                serviceTaxTotal.AmountMST                  = 0;
                serviceTaxTotal.AccumulatedAmountMST       = 0;
                serviceTaxTotal.AmountSecondary            = 0;
                serviceTaxTotal.AccumulatedAmountSecondary = 0;
                serviceTaxTotal.update();
                ttscommit;
            }
            else
            {
                fieldId = 0;
                if (confind(_fieldNames, serviceTaxTotal.FieldName))
                {
                    position = confind(_fieldNames, serviceTaxTotal.FieldName);
                    if (position)
                    {
                        fieldId  = TmpServiceTaxInquiryTable_IN::getFieldIdFromPosition(position);
                    }
                }
                ttsbegin;
                if (fieldId)
                {
                    serviceTaxTotal.AmountMST                  = CurrencyExchangeHelper::amount(str2num_RU(callerTmpTable.(fieldId)), callerTmpTable.SourceCurrencyCode);

                    serviceTaxTotal.AmountSecondary            = currencyHelper.calculateAccountingToTransaction(Ledger::reportingCurrency(),
                                                                                                str2num_RU(_callerTmpTable.(fieldId)),
                                                                                                true);

                    serviceTaxTotal.AccumulatedAmountMST       = TmpServiceTaxInquiryTable_IN::getTotalAccumulatedAmount(_serviceTaxTransInquiry.tmpServiceTaxInquiryTable(),
                                                                                                                         fieldId,
                                                                                                                         serviceTaxTotal.FieldName);
                    serviceTaxTotal.AccumulatedAmountSecondary = currencyHelper.calculateAccountingToTransaction(
                                                                                            Ledger::reportingCurrency(),
                                                                                            serviceTaxTotal.AccumulatedAmountMST,
                                                                                            true);

                    serviceTaxTotal.TaxComponentTable = callerTmpTable.TaxComponentTable;
                    serviceTaxTotal.TransDate         = callerTmpTable.TransDate;
                    serviceTaxTotal.TaxAmount         = callerTmpTable.TaxAmount;
                    serviceTaxTotal.update();
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64207</DeveloperDocumentation>
	<Label>@SYS58659</Label>
	<TitleField1>FieldName</TitleField1>
	<TitleField2>SelectQuery</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>NameTypeIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxComponentTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SelectQuery</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxComponentTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountSecondary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccumulatedAmountSecondary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SelectQuery</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccumulatedAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccumulatedAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS25443</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccumulatedAmountSecondary</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@GLS6075</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountSecondary</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS83899</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FieldName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldLabel</ExtendedDataType>
			<Label>@SYS16033</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SelectQuery</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SelectQuery_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxComponentTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5042</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FieldName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SelectQuery</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxComponentTable_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxComponentTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SelectQueryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SelectQuery</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxComponentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxComponentTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxComponentTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxComponentTable_IN_ServiceTaxTotal_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxComponentTable</Name>
					<Field>TaxComponentTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>