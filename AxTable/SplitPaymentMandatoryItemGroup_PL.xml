<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SplitPaymentMandatoryItemGroup_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SplitPaymentMandatoryItemGroup_PL extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>SplitPaymentMandatoryItemGroup_PL</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return _recId && (
        select firstonly RecId from SplitPaymentMandatoryItemGroup_PL
            where SplitPaymentMandatoryItemGroup_PL.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>SplitPaymentMandatoryItemGroup_PL</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>SplitPaymentMandatoryItemGroup_PL</c> table; otherwise, an empty record.
    /// </returns>
    public static SplitPaymentMandatoryItemGroup_PL find(
        RefRecId _recId,
        boolean _forupdate = false)
    {
        SplitPaymentMandatoryItemGroup_PL splitPaymentMandatoryItemGroup;

        if (_recId)
        {
            splitPaymentMandatoryItemGroup.selectForUpdate(_forupdate);

            select firstonly splitPaymentMandatoryItemGroup
                where splitPaymentMandatoryItemGroup.RecId == _recId;
        }

        return splitPaymentMandatoryItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>SplitPaymentMandatoryItemGroup_PL</c> table by group name.
    /// </summary>
    /// <param name="_name">
    ///    The name of a group.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>SplitPaymentMandatoryItemGroup_PL</c> table; otherwise, an empty record.
    /// </returns>
    public static SplitPaymentMandatoryItemGroup_PL findByName(
        SplitPaymentMandatoryItemGroupName_PL _name,
        boolean _forupdate = false)
    {
        SplitPaymentMandatoryItemGroup_PL splitPaymentMandatoryItemGroup;

        if (_name)
        {
            splitPaymentMandatoryItemGroup.selectForUpdate(_forupdate);

            select firstonly splitPaymentMandatoryItemGroup
                where splitPaymentMandatoryItemGroup.Name == _name;
        }

        return splitPaymentMandatoryItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGroupByItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Searches for split payment item group by given item id and category.
    /// </summary>
    /// <param name = "_purchSales">
    ///   <c>SplitPaymentDocumentType_PL</c> value.
    /// </param>
    /// <param name = "_itemId">
    ///   Item id.
    /// </param>
    /// <returns>
    ///   Item group id value.
    /// </returns>
    public static SplitPaymentMandatoryItemGroupId_PL findGroupByItem(
        SplitPaymentDocumentType_PL _purchSales,
        ItemId _itemId = '')
    {
        SplitPaymentMandatoryItemGroupData_PL splitPaymentMandatoryItemGroupData;
        SplitPaymentMandatoryItemGroupId_PL splitPaymentMandatoryItemGroupId;

        if (_itemId)
        {
            select firstOnly GroupId from splitPaymentMandatoryItemGroupData
                where splitPaymentMandatoryItemGroupData.PurchSales == _purchSales
                    && splitPaymentMandatoryItemGroupData.ItemCode == TableGroupCategoryAll::Table
                    && splitPaymentMandatoryItemGroupData.ItemId == _itemId;

            splitPaymentMandatoryItemGroupId = splitPaymentMandatoryItemGroupData.GroupId;

            if (!splitPaymentMandatoryItemGroupId)
            {
                InventTable inventTable = InventTable::find(_itemId);

                select firstOnly GroupId from splitPaymentMandatoryItemGroupData
                    where splitPaymentMandatoryItemGroupData.PurchSales == _purchSales
                        && splitPaymentMandatoryItemGroupData.ItemCode == TableGroupCategoryAll::Group
                        && splitPaymentMandatoryItemGroupData.ItemGroupId == inventTable.itemGroupId();

                splitPaymentMandatoryItemGroupId = splitPaymentMandatoryItemGroupData.GroupId;
            }
        }

        if (!splitPaymentMandatoryItemGroupId)
        {
            select firstOnly GroupId from splitPaymentMandatoryItemGroupData
                where splitPaymentMandatoryItemGroupData.PurchSales == _purchSales
                    && splitPaymentMandatoryItemGroupData.ItemCode == TableGroupCategoryAll::All;

            splitPaymentMandatoryItemGroupId = splitPaymentMandatoryItemGroupData.GroupId;
        }

        return splitPaymentMandatoryItemGroupId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>PL</CountryRegionCodes>
	<DeveloperDocumentation>@AccountsPayable:DevDocSplitPaymentItemGroup</DeveloperDocumentation>
	<FormRef>SplitPaymentMandatoryItemGroup_PL</FormRef>
	<Label>@AccountsPayable:SplitPaymentItemGroup</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<CacheLookup>Found</CacheLookup>
	<Modules>Bank</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reporting</Name>
			<Label>@SYS81753</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SplitPaymentMandatoryItemGroupName_PL</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>