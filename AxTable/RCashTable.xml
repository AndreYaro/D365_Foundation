<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RCashTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RCashTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashBalanceCashCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns cash account balance in the currency of the <c>RCashTrans</c> record.
    /// </summary>
    /// <returns>
    ///    The cash account balance.
    /// </returns>
    display AmountMST cashBalanceCashCur()
    {
        RCashBalanceCur balanceCur = new RCashBalanceCur(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        RCashTrans              cashTrans;
        AmountCur               ret;
        CurrencyExchangeHelper  currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        while select CurrencyCode from cashTrans
            group by CurrencyCode
            where cashTrans.AccountNum == this.AccountNum
        {
            balanceCur.calc(this.AccountNum, cashTrans.CurrencyCode);

            ret += currencyExchHelper.calculateCurrencyToCurrency(cashTrans.CurrencyCode, this.CurrencyCode, balanceCur.amountCur(), true);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashBalanceMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns cash account balance in the currency of the company.
    /// </summary>
    /// <returns>
    ///    The cash account balance.
    /// </returns>
    display AmountMST cashBalanceMST()
    {
        return RCashTable::balanceMst(this.AccountNum, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the current record in the <c>RCashTable</c> table.
    /// </summary>
    public void delete()
    {
        // Check to see if the associated dimension attribute value has been used
        // in a way that would prevent deletion.
        if (!DimensionValidation::canDeleteEntityValue(this))
        {
            throw error(strFmt("@SYS134392", this.AccountNum));
        }

        // <GEERU>
        RetailStoreId retailStoreNumber = RetailStoreTable::getFirstStoreIdByCashOffice_RU(this.AccountNum);
        if (retailStoreNumber)
        {
            throw error(strFmt("@SYS4007525", this.AccountNum, retailStoreNumber));
        }
        // </GEERU>

        ttsbegin;
        // Update the associated dimension attribute value.
        DimensionAttributeValue::updateForEntityValueDelete(this);

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundedOffCashAmount_HU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the rounded off amount based on the rounding type.
    /// </summary>
    /// <param name="_value">
    ///     The value to be rounded.
    /// </param>
    /// <returns>
    ///     The rounded off amount.
    /// </returns>
    AmountCur roundedOffCashAmount_HU(AmountCur _value)
    {
        AmountCur roundedOffAmount;
        const real DefaultRounding = 0.01;

        if (! _value)
        {
            return 0;
        }

        switch (this.RoundOffTypeCash_HU)
        {
            case RoundOffType::Ordinary :
                roundedOffAmount = round(_value, this.RoundOffCash_HU ? this.RoundOffCash_HU : DefaultRounding);
                break;

            case RoundOffType::RoundDown :
                roundedOffAmount = this.RoundOffCash_HU ? roundDown(_value, this.RoundOffCash_HU) : trunc(_value);
                break;

            case RoundOffType::RoundUp :
                roundedOffAmount = roundUp(_value, this.RoundOffCash_HU ? this.RoundOffCash_HU : 1);
                break;
        }

        return roundedOffAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        RetailStoreId retailStoreNumber = RetailStoreTable::getFirstStoreIdByCashOffice_RU(this.AccountNum);
        if (retailStoreNumber)
        {
            ret = checkFailed(strFmt("@SYS4007525", this.AccountNum, retailStoreNumber));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        #ISOCountryRegionCodes
        HuDenominationSummary denominationSummary;
        RCashReportJour_PL    cashReportJour;

        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(RCashTable, Denomination_HU):
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]) && !this.Denomination_HU )
                    {
                        select firstOnly RecId from denominationSummary
                        exists join cashReportJour
                            where denominationSummary.ReportNum == cashReportJour.ReportNum
                               && cashReportJour.AccountNum     == this.AccountNum;
                        if (denominationSummary)
                        {
                            ret = checkFailed("@GLS223783");
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceMst</Name>
				<Source><![CDATA[
    public static AmountMST balanceMst(RCashAccount _accountNum,
                                       TransDate    _dateFrom)
    {
        RCashBalance cashBalance = new RCashBalance(_dateFrom);

        cashBalance.calc( _accountNum);

        return cashBalance.amountMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RCashAccount _cashAccountId)
    {
        if (_cashAccountId && ! RCashTable::exist(_cashAccountId))
            return checkFailed(strFmt(RCashTable::txtNotExist(),_cashAccountId));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RCashAccount _cashAccountId)
    {
        return _cashAccountId &&
               (select rCashTable
                where  rCashTable.AccountNum == _cashAccountId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static RCashTable find(RCashAccount          _cashAccountId,
                                  boolean               _forUpdate = false)
    {
        RCashTable cashTable;

        if (_cashAccountId)
        {
            cashTable.selectForUpdate(_forUpdate);

            select firstonly cashTable
                index hint AccountIdx
                where cashTable.AccountNum == _cashAccountId;
        }

        return cashTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>RCashTable</c> record for specified ledger dimension.
    /// </summary>
    /// <param  name='_ledgerDimension'>
    /// An instance of the <c>LedgerDimensionAccount</c> data type.
    /// </param>
    /// <param  name='_forupdate'>
    /// An instance of the boolean data type.
    /// </param>
    /// <param  name='_concurrencyModel'>
    /// An instance of the <c>ConcurrencyModel</c> enumeration.
    /// </param>
    /// <returns>
    /// A <c>RCashTable</c> record.
    /// </returns>
    public static RCashTable findByLedgerDimension(
        LedgerDimensionAccount  _ledgerDimension,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        RCashTable                          cashTable;
        DimensionAttributeValueCombination  ledgerDimension;

        cashTable.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            cashTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly cashTable
            join RecId from ledgerDimension where
                ledgerDimension.DisplayValue == cashTable.AccountNum &&
                ledgerDimension.RecId == _ledgerDimension;

        return cashTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAccountNum</Name>
				<Source><![CDATA[
    public static void lookupAccountNum(FormControl   _ctrl,
                                               CompanyId     _company = curext())
    {
        if (!_company)
        {
            _company = curext();
        }

        if (! xDataArea::exist(_company))
        {
            throw error(strFmt("@SYS10666",_company));
        }

        _ctrl.hasChanged(false);

        changecompany(_company)
        {
            Args args = new Args();
            args.name(formStr(RCashLookup));
            args.caller(_ctrl);

            FormRun formRun = classfactory.formRunClass(args);
            formRun.init();

            if (_ctrl is FormStringControl)
            {
                FormStringControl formStringControl = _ctrl as FormStringControl;
                formStringControl.performFormLookup(formRun);
            }
            else if (_ctrl is SegmentedEntryControl)
            {
                SegmentedEntryControl segmentedEntryControl = _ctrl as SegmentedEntryControl;
                segmentedEntryControl.performFormLookup(formRun);
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS9779";
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    public void renamePrimaryKey()
    {
        DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(this, this.orig());
        rename.syncRenamedValuePreSuper();

        super();

        rename.syncRenamedValuePostSuper();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<DeveloperDocumentation>@GLS64311</DeveloperDocumentation>
	<FormRef>RCashTable</FormRef>
	<Label>@GLS104459</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>AccountNum</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>AccountIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>RCash</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>AccountIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RCashTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RCashTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ClosingSettings_HU</Name>
			<Label>@GLS114440</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Denomination_HU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiCurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NegativeCash</Name>
			<Label>@GLS104772</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NegativeCash</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NumberSequenceGroup</Name>
			<Label>@SYS54850</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Rounding_HU</Name>
			<Label>@GLS105686</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoundOffCash_HU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundOffTypeCash_HU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Table</Name>
			<Label>@SYS8868</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CashBalanceControl</Name>
			<Label>@CashFlowManagement:CashBalanceControl</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CFMCashBalanceMinimum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RCashAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Denomination_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>HU</CountryRegionCodes>
			<Label>@GLS114450</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MultiCurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RCashMultiCurrencyCode</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NegativeCash</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS104772</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequenceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RoundOffCash_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>HU</CountryRegionCodes>
			<ExtendedDataType>RoundOff</ExtendedDataType>
			<Label>@GLS114437</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RoundOffTypeCash_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>HU</CountryRegionCodes>
			<EnumType>RoundOffType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CFMCashBalanceMinimum</Name>
			<ExtendedDataType>CFMCashBalanceMinimum</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>NumberSequenceGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>NumberSequenceGroup_RCashTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceGroup</Name>
					<Field>NumberSequenceGroup</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>