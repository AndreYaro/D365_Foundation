<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdComponentTable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdComponentTable_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean                 ret;
        TaxWithholdTable        taxWithholdTable;
        TaxWithholdCodeType_IN  taxWithholdCodeType;

        ret = super();

        if (ret)
        {
            taxWithholdCodeType = TaxWithhold_IN::TaxWithholdType2TaxWithholdCodeType(this.TaxType);

            select firstonly TaxWithholdCode from taxWithholdTable
                where taxWithholdTable.TaxType_IN                   == taxWithholdCodeType
                    && taxWithholdTable.TaxWithholdComponent_IN      == this.RecId;
            if (taxWithholdTable)
            {
                ret = ret && checkFailed(strfmt("@GLS5451", this.Component));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean                      ret;
        TaxWithholdComponentGroup_IN componentGroup;

        ret = super(_fieldIdToCheck);

        componentGroup = TaxWithholdComponentGroupTable_IN::find(this.TaxWithholdComponentGroup).ComponentGroup;

        switch (_fieldIdToCheck)
        {
            case fieldnum (TaxWithholdComponentTable_IN, TaxWithholdComponentGroup):
                if (!TaxWithholdComponentGroupTable_IN::exist(this.TaxType, componentGroup))
                {
                    ret = ret && checkFailed(strfmt("@GLS5460", componentGroup, this.TaxType));
                }
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field; optional.
    /// </param>
    /// <returns>
    /// Returns true if the field passes value validation; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean                         ret;
        TaxWithholdComponentGroup_IN    componentGroup;

        ret = super(_fieldName, _arrayIndex);

        componentGroup = TaxWithholdComponentGroupTable_IN::find(this.TaxWithholdComponentGroup).ComponentGroup;

        switch (_fieldName)
        {
            case fieldstr (TaxWithholdComponentTable_IN, TaxWithholdComponentGroup):
                if (!TaxWithholdComponentGroupTable_IN::exist(this.TaxType, componentGroup))
                {
                    ret = ret && checkFailed(strfmt("@GLS5460", componentGroup, this.TaxType));
                }
                break;

            default:
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = TaxWithholdParameters_IN::checkParameter(this.TaxType);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdComponentTable_IN</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_taxType">
    /// Withhold tax type
    /// </param>
    /// <param name="_component">
    /// Withhold tax component used to find the record.
    /// </param>
    /// <param name="_componentGroup">
    /// WithholdTax componentgroup used to find the record.
    /// </param>
    /// <returns>
    /// Return true if record exists otherwise false.
    /// </returns>
    public static boolean exist(
        TaxWithholdType_IN             _taxType,
        TaxWithholdComponent_IN        _component,
        TaxWithholdComponentGroup_IN   _componentGroup)
    {
        return (select firstonly RecId from taxWithholdComponentTable_IN
                    where taxWithholdComponentTable_IN.TaxType                   == _taxType
                       && taxWithholdComponentTable_IN.Component                 == _component
                       && taxWithholdComponentTable_IN.TaxWithholdComponentGroup == TaxWithholdComponentGroupTable_IN::findByComponentGroup(_taxType, _componentGroup).RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdComponentTable_IN</c> table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdComponentTable_IN</c> table.
    /// </returns>
    public static TaxWithholdComponentTable_IN find(
        RefRecId            _recId,
        boolean             _forupdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdComponentTable_IN taxWithholdComponentTable;

        taxWithholdComponentTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdComponentTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdComponentTable
            where taxWithholdComponentTable.RecId == _recId;

        return taxWithholdComponentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByComponentGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdComponentTable_IN</c> table for the specified tax type , component  and component group.
    /// </summary>
    /// <param name="_taxType">
    /// Tax type used to find the record.
    /// </param>
    /// <param name="_component">
    /// Component used to find the record.
    /// </param>
    /// <param name="_componentGroup">
    /// Component group used to find the record.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdComponentTable_IN</c> table.
    /// </returns>
    static public TaxWithholdComponentTable_IN findByComponentGroup(
        TaxWithholdType_IN              _taxType,
        TaxWithholdComponent_IN         _component,
        TaxWithholdComponentGroup_IN    _componentGroup,
        boolean                         _forUpdate = false)
    {
        TaxWithholdComponentTable_IN    taxWithholdComponentTable;

        if (_component)
        {
            taxWithholdComponentTable.selectForUpdate(_forUpdate);
            select firstonly taxWithholdComponentTable
                index hint TypeComponentGroupIdx
                where taxWithholdComponentTable.TaxType                   == _taxType
                   && taxWithholdComponentTable.Component                 == _component
                   && taxWithholdComponentTable.TaxWithholdComponentGroup == TaxWithholdComponentGroupTable_IN::findByComponentGroup(_taxType, _componentGroup).RecId;
        }

        return taxWithholdComponentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findComponentGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdComponentTable_IN</c> table for the specified tax type and component.
    /// </summary>
    /// <param name="_component">
    /// Component used to find the record.
    /// </param>
    /// <param name="_taxType">
    /// Tax type used to find the record.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdComponentTable_IN</c> table.
    /// </returns>
    static public TaxWithholdComponentTable_IN findComponentGroup(
        TaxWithholdComponent_IN    _component,
        TaxWithholdCodeType_IN     _taxType,
        boolean                    _forUpdate = false)
    {
        TaxWithholdComponentTable_IN    taxWithholdComponentTable;

        if (_component)
        {
            taxWithholdComponentTable.selectForUpdate(_forUpdate);

            select firstonly taxWithholdComponentTable
                where taxWithholdComponentTable.TaxType         == _taxType - 1
                   && taxWithholdComponentTable.Component       == _component;
        }
        return taxWithholdComponentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formStringCtrlComponentGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and shows a lookup form for the <c>TaxWithholdComponentGroupTable_IN</c> field.
    /// </summary>
    /// <param name="_ctrl">
    /// The calling form control.
    /// </param>
    /// <param name="_taxType">
    /// Tax type, to filter the records in the lookup form.
    /// </param>
    public static void formStringCtrlComponentGroup(
        FormStringControl    _ctrl,
        TaxWithholdType_IN   _taxType)
    {
        SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tablenum(TaxWithholdComponentGroupTable_IN), _ctrl);
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource;

        sysTableLookup.addLookupfield(fieldnum(TaxWithholdComponentGroupTable_IN, ComponentGroup));

        queryBuildDataSource = query.addDataSource(tablenum(TaxWithholdComponentGroupTable_IN));
        queryBuildDataSource.addRange(fieldnum(TaxWithholdComponentGroupTable_IN, TaxType)).value(queryValue(_taxType));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs "Go to main table" operation.
    /// </summary>
    /// <param name="_component">
    /// Withholding tax component.
    /// </param>
    /// <param name="_taxType">
    /// Withholding tax type to filter the lookup form based on tax type.
    /// </param>
    public static void jumpRef(TaxWithholdComponent_IN  _component, TaxWithholdType_IN  _taxType)
    {
        Args    args = new Args();

        args.parm(_component);
        args.parmEnumType(enumnum(TaxWithholdType_IN));
        args.parmEnum(_taxType);
        new MenuFunction(menuitemdisplaystr(TaxWithholdComponentTable_IN), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupComponentByTaxCode_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and shows a lookup form for the <c>TaxWithholdComponentTable_IN</c> field.
    /// </summary>
    /// <param name="_formControl">
    /// The calling form control.
    /// </param>
    /// <param name="_taxType">
    /// Tax type used to filter the record based on tax type.
    /// </param>
    static void lookupComponentByTaxCode_IN(
        FormControl             _formControl,
        TaxWithholdCodeType_IN  _taxType)
    {
        SysReferenceTableLookup sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(TaxWithholdComponentTable_IN), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource  = query.addDataSource(tableNum(TaxWithholdComponentTable_IN));
        queryBuildRange       = queryBuildDataSource.addRange(fieldNum(TaxWithholdComponentTable_IN, TaxType));
        queryBuildRange.value(enum2str(_taxType));

        sysReferenceTableLookup.addLookupfield(fieldNum(TaxWithholdComponentTable_IN, Component));
        sysReferenceTableLookup.addLookupfield(fieldNum(TaxWithholdComponentTable_IN, Name));
        sysReferenceTableLookup.addLookupfield(fieldNum(TaxWithholdComponentTable_IN, TaxWithholdComponentGroup));
        sysReferenceTableLookup.parmQuery(query);
        sysReferenceTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupComponentForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and shows a lookup form for the <c>TaxWithholdComponentTable_IN</c> field.
    /// </summary>
    /// <param name="_formControl">
    /// The calling form control.
    /// </param>
    /// <param name="_taxWithholdTable">
    /// <c>TaxWithholdComponentTable_IN</c> table to filter the records in the lookup form.
    /// </param>
    public static void lookupComponentForm(
        FormControl         _formControl,
        TaxWithholdTable    _taxWithholdTable)
    {
        Args                 args = new Args();
        FormRun              formRun;
        FormReferenceControl formReferenceControl;

        args.name(formstr(TaxWithholdComponentLookup_IN));
        args.caller(_formControl);
        args.record(_taxWithholdTable);

        formRun = classfactory.formRunClass(args);

        formRun.init();

        if (_formControl is FormReferenceControl)
        {
            formReferenceControl = _formControl as FormReferenceControl;
            formReferenceControl.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupComponentGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and shows a lookup form for the <c>TaxWithholdComponentGroupTable_IN</c> field.
    /// </summary>
    /// <param name="_ctrl">
    /// The calling form control.
    /// </param>
    /// <param name="_taxType">
    /// Tax type, to filter the records in the lookup form.
    /// </param>
    /// <returns>
    /// The selected record.
    /// </returns>
    public static Common lookupComponentGroup(
        FormControl            _ctrl,
        TaxWithholdType_IN     _taxType)
    {
        Common                  selectedRecord;
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(TaxWithholdComponentGroupTable_IN), _ctrl, true);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        sysTableLookup.addLookupfield(fieldnum(TaxWithholdComponentGroupTable_IN, ComponentGroup));

        queryBuildDataSource = query.addDataSource(tablenum(TaxWithholdComponentGroupTable_IN));
        queryBuildDataSource.addRange(fieldnum(TaxWithholdComponentGroupTable_IN, TaxType)).value(queryValue(_taxType));

        sysTableLookup.parmQuery(query);
        selectedRecord = sysTableLookup.performFormLookup();

        return selectedRecord;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63815</DeveloperDocumentation>
	<Label>@GLS5480</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Component</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TypeComponentGroupIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TaxWithholdThresholdLimit_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxWithholdThresholdLimit_IN</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Component</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdComponentGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Component</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdComponentGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS41042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Component</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdComponentGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxInformation</Name>
			<Label>@SYS33550</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxWithholdReportingCode</Name>
			<Label>@SYS60052</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Component</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Component</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdComponent_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:ComponentTableINDescriptionHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdComponentGroup</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdComponentGroupRecId_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:ComponentTableINTaxWithholdComponentGroupHelpText</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TypeComponentGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Component</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxWithholdComponentGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdComponentGroupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdComponentGroupTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdComponentGroupTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdComponentGroupTable_IN_TaxWithholdComponentTable_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdComponentGroup</Name>
					<Field>TaxWithholdComponentGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>