<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSHistory</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSHistory extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayStatus</Name>
				<Source><![CDATA[
	/// <summary>
	/// Display method for status field.
	/// </summary>
    /// <returns>
    /// Returns <c>WHSId</c> object.
    /// </returns>
    display WHSId displayStatus()
    {
        WHSId ret;

        switch (this.HistoryType)
        {
            case WHSHistoryType::Load:
                ret = enum2str(WHSLoadTable::find(this.Id).LoadStatus);
                break;

            case WHSHistoryType::Shipment:
                ret = enum2str(WHSShipmentTable::find(this.Id).ShipmentStatus);
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHistoryRecord</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates a history record for an event.
	/// </summary>
    /// <param name="_type">
    /// The parameter of type <c>WHSHistoryType</c>.
    /// </param>
	/// <param name="_id">
	/// Id of the record.
	/// </param>
	/// <param name="_event">
	/// Event of the record.
	/// </param>
    public static void createHistoryRecord(WHSHistoryType   _type,
                                           WHSId            _id,
                                           WHSHistoryEvent  _event)
    {
        WHSHistory  history;

        if (!WHSParameters::find().EnableWarehouseLoadHistory)
        {
            return;
        }

        ttsbegin;

        // Keep switch for future updates
        switch (_type)
        {
            case WHSHistoryType::Load:
                history.HistoryType   = _type;
                history.Id            = _id;
                history.HistoryEvent  = _event;
                history.TransDateTime    = DateTimeUtil::getSystemDateTime();
                
                if (!history.validateWrite())
                {
                    throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSHistory)));
                }
                else
                {
                    history.insert();
                }
                break;

            case WHSHistoryType::Shipment:
                history.HistoryType   = _type;
                history.Id            = _id;
                history.HistoryEvent  = _event;
                history.TransDateTime    = DateTimeUtil::getSystemDateTime();
                
                if (!history.validateWrite())
                {
                    throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSHistory)));
                }
                else
                {
                    history.insert();
                }
                break;

            default:
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks whether a specific <c>WHSHistory</c> record exists.
	/// </summary>
	/// <param name="_recId">
	/// Id of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(RecId _recId)
    {
        return (_recId) &&
               (select firstonly whsHistory
                    where whsHistory.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSHistory</c> record with given parameters.
	/// </summary>
	/// <param name="_recId">
	/// Id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSHistory find(RecId   _recId,
                                  boolean _forupdate = false)
    {
        WHSHistory    history;

        if (_recId)
        {
            history.selectForUpdate(_forupdate);

            select firstonly history
                where history.RecId == _recId;
        }

        return history;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4360</DeveloperDocumentation>
	<FormRef>WHSHistory</FormRef>
	<Label>@WAX2966</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Id</TitleField1>
	<TitleField2>HistoryEvent</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>HistoryTypeIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HistoryType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Id</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HistoryEvent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HistoryType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Id</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HistoryEvent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HistoryEvent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSHistoryEvent</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HistoryType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSHistoryType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Id</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSId</ExtendedDataType>
			<Label>@WAX282</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>TransDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransDateTime</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HistoryTypeIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>HistoryType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Id</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSHistory</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSHistory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Id</Name>
					<SourceEDT>WHSId</SourceEDT>
					<Field>Id</Field>
					<RelatedField>Id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSLoadTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>HistoryType</Name>
					<Field>HistoryType</Field>
					<ValueStr>WHSHistoryType::Load</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Id</Name>
					<Field>Id</Field>
					<RelatedField>LoadId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSShipmentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSShipmentTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>HistoryType</Name>
					<Field>HistoryType</Field>
					<ValueStr>WHSHistoryType::Shipment</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Id</Name>
					<Field>Id</Field>
					<RelatedField>ShipmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>