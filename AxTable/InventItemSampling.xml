<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemSampling</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventItemSampling extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (_fieldIdToCheck == fieldNum(InventItemSampling, ItemSamplingValue) ||
            _fieldIdToCheck == fieldNum(InventItemSampling, TestQtySpecification))
        {
            switch (this.TestQtySpecification)
            {
                case InventTestQtySpecification::Percent:
                    ret = checkPercentage(this.ItemSamplingValue) && ret;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemSamplingValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the specified sampling values.
    /// </summary>
    /// <returns>
    ///    true if the specified values are valid; otherwise, false
    /// </returns>
    /// <remarks>
    ///    Rounding may also be performed on the specified values.
    /// </remarks>
    boolean validateItemSamplingValue()
    {
        if (this.TestQtySpecification == InventTestQtySpecification::FixedQty)
        {
            this.ItemSamplingValue = decRound(this.ItemSamplingValue, 0);
        }
        else if (this.TestQtySpecification == InventTestQtySpecification::Percent)
        {
            return checkPercentage(this.ItemSamplingValue);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                     ret;
        InventTestAssociationTable  inventTestAssociationTable;
        
        ret = super();

        if (!this.CreatePerUpdatedQuantity && this.isSamplingScopeLoadOrShipment())
        {
            ret = checkFailed(strFmt("@WAX:ItemSamplingScopeConfigurationError", this.SamplingScope));
        }

        switch (this.TestQtySpecification)
        {
            case InventTestQtySpecification::Percent:
                ret = checkPercentage(this.ItemSamplingValue) && ret;
                break;
            case InventTestQtySpecification::FixedQty:
                if (this.ItemSamplingValue <= 0)
                {
                    ret = checkFailed(strFmt("@SYS69681", fieldId2pname(this.TableId, fieldNum(InventItemSampling, ItemSamplingValue))))  && ret;
                }
                break;
            case InventTestQtySpecification::FullLicensePlate:
                if (this.PerNthLicensePlate < 1)
                {
                    ret = checkFailed(strFmt("@WAX:QualityMgmtFieldSpecifiedCheck", fieldId2pname(this.TableId, fieldNum(InventItemSampling, PerNthLicensePlate))));
                }
                break;
        }        

        ret = ret && this.isValidQualityAssociationsForWarehouseProcesses();
        ret = ret && this.isCompleteBlockingSetupValidForAllQualityAssociations();

        if (ret
         && this.RecId                                                                                 // Existing record - otherwise no references can exist
         &&  this.DiscriminatingInventoryDimensions != 0                                                // With at least one dimension marked as per...
         && !this.CreatePerUpdatedQuantity                                                              // creating for the full quantity
         &&((this.CreatePerUpdatedQuantity          != this.orig().CreatePerUpdatedQuantity)            // Clearing the CreatePerUpdatedQuantity field
         || (this.DiscriminatingInventoryDimensions != this.orig().DiscriminatingInventoryDimensions))) // Or changing dimensions marked
        {
            select firstonly RecId from inventTestAssociationTable
                where inventTestAssociationTable.ItemSamplingId == this.InventItemSamplingId
                   && inventTestAssociationTable.DocumentType   == InventTestDocumentStatus::Registration;
            if (inventTestAssociationTable.RecId)
            {
                ret = checkFailed(strFmt("@SYS343455", fieldPName(InventItemSampling, CreatePerUpdatedQuantity)));
            }
        }

        if ( ret
          && this.RecId
          && this.CreatePerUpdatedQuantity)
        {
            while select DocumentType, BlockProcess from inventTestAssociationTable
                where inventTestAssociationTable.ItemSamplingId == this.InventItemSamplingId
            {
                if (   inventTestAssociationTable.isBlockingTriggeringEvent()
                    && !inventTestAssociationTable.isSetupToBlockPartialPurchaseReceipt())
                {
                    ret = checkFailed(strFmt("@SYP4980054", fieldPName(InventItemSampling, CreatePerUpdatedQuantity)));
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidQualityAssociationsForWarehouseProcesses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the item sampling is used in any of the test associations where the applicable warehouse 
    /// type is set to "All" and the corresponding Smapling scope or TestQtySpecification is incorrectly setup.
    /// </summary>
    /// <returns>true if the item sampling record is properly defined; otherwise, false.</returns>
    private boolean isValidQualityAssociationsForWarehouseProcesses()
    {
        boolean                     ret = true;
        InventTestAssociationTable  inventTestAssociationTable;

        if (this.RecId
            && (this.SamplingScope != WHSQualityManagementSamplingScope::OrderNumber
                || this.TestQtySpecification == InventTestQtySpecification::FullLicensePlate))
        {
            // Find if there are any test associations records where the applicable warehousetype is set to "All"
            select firstonly RecId from inventTestAssociationTable
                where inventTestAssociationTable.ItemSamplingId == this.InventItemSamplingId
                    && inventTestAssociationTable.ApplicableWarehouseType == WHSApplicableWarehouseType::All;

            if (inventTestAssociationTable.RecId != 0)
            {
                if (this.SamplingScope != WHSQualityManagementSamplingScope::OrderNumber)
                {
                    ret = checkFailed(strFmt("@SYP4980054", fieldPName(InventItemSampling, SamplingScope)));
                }

                if (this.TestQtySpecification == InventTestQtySpecification::FullLicensePlate)
                {
                    ret = checkFailed(strFmt("@SYP4980054", fieldPName(InventItemSampling, TestQtySpecification))) && ret;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCompleteBlockingSetupValidForAllQualityAssociations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that the complete blocking is not supported for the quality management for warehouse process feature.
    /// </summary>
    /// <returns>true if the item sampling record is properly defined; otherwise, false.</returns>
    private boolean isCompleteBlockingSetupValidForAllQualityAssociations()
    {
        boolean ret = true;

        if (this.RecId
            && this.CompleteBlocking == NoYes::Yes
            && this.orig().CompleteBlocking == NoYes::No)
        {
            InventTestAssociationTable  inventTestAssociationTable;

            select firstonly RecId from inventTestAssociationTable
                where inventTestAssociationTable.ItemSamplingId == this.InventItemSamplingId
                && inventTestAssociationTable.ApplicableWarehouseType == WHSApplicableWarehouseType::QualityManagementOnlyEnabled;

            if (inventTestAssociationTable.RecId != 0)
            {
                ret = checkFailed(strFmt("@SYP4980054", fieldPName(InventItemSampling, CompleteBlocking))) && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>InventItemSampling</c> table exists.
    /// </summary>
    /// <param name="_inventItemSamplingId">
    ///    The sampling ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    static boolean exist(InventItemSamplingId _inventItemSamplingId)
    {
        return _inventItemSamplingId &&
            (select  firstonly inventItemSampling
             where  inventItemSampling.InventItemSamplingId == _inventItemSamplingId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>InventItemSampling</c> table.
    /// </summary>
    /// <param name="_inventItemSamplingId">
    ///    The sampling ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>InventItemSampling</c> table; otherwise, an empty record.
    /// </returns>
    static InventItemSampling find(
        InventItemSamplingId    _inventItemSamplingId,
        boolean                 _forUpdate = false)
    {
        InventItemSampling inventItemSampling;

        inventItemSampling.selectForUpdate(_forUpdate);

        if (_inventItemSamplingId)
        {
            select firstonly    inventItemSampling
            where   inventItemSampling.InventItemSamplingId == _inventItemSamplingId;
        }

        return inventItemSampling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventItemSampling, SamplingScope):
                if (this.isSamplingScopeLoadOrShipment())
                {
                    this.CreatePerUpdatedQuantity = NoYes::Yes;
                }
                break;

            case fieldNum(InventItemSampling, TestQtySpecification):
                if (this.TestQtySpecification == InventTestQtySpecification::FullLicensePlate)
                {
                    this.ItemSamplingValue = 1;
                }
                else
                {
                    this.PerNthLicensePlate = 0;
                    this.CountByItem = NoYes::No;
                }
                break;

            case fieldNum(InventItemSampling, PerNthLicensePlate):
                if (this.PerNthLicensePlate > 0)
                {
                    this.CreatePerUpdatedQuantity = NoYes::Yes;
                    this.updateDiscriminatingInventoryDimensions();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDiscriminatingInventoryDimensions</Name>
				<Source><![CDATA[
    private void updateDiscriminatingInventoryDimensions()
    {
        if (this.orig().PerNthLicensePlate == 0)
        {
            InventDimParm inventDimParm;
            InventDimFixedClass::inventDimFixed2InventDimParm(this.DiscriminatingInventoryDimensions, inventDimParm);

            inventDimParm.LicensePlateFlag = NoYes::Yes;
            inventDimParm.WMSLocationIdFlag = NoYes::Yes;

            this.DiscriminatingInventoryDimensions = InventDimFixedClass::inventDimParm2InventDimFixed(InventDimParm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSamplingScopeLoadOrShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method determines if item sampling scope is either load or shipment
    /// </summary>
    /// <returns>True if Sampling Scope is either Load or Shipment, otherwise false</returns>
    [Hookable(false)]
    internal boolean isSamplingScopeLoadOrShipment()
    {
        return (this.SamplingScope == WHSQualityManagementSamplingScope::Load || 
                this.SamplingScope == WHSQualityManagementSamplingScope::Shipment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidForQualityOrderCreationProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if item sampling is valid for QO creation process
    /// </summary>
    /// <returns>True if item sampling is valid, otherwise false</returns>
    public boolean isValidForQualityOrderCreationProcess()
    {
        boolean ret = true;
        
        if (!this.CreatePerUpdatedQuantity && this.isSamplingScopeLoadOrShipment())
        {
            ret = false;
        }

        return ret;  
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>InventQualityManagement</ConfigurationKey>
	<DeveloperDocumentation>@SYS124039</DeveloperDocumentation>
	<Label>@SYS113629</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>InventItemSamplingId</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>InventItemSamplingIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>InventItemSamplingIdIdx</PrimaryIndex>
	<ReplacementKey>InventItemSamplingIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventQualityOrderTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventQualityOrderTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventTestGroup</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventTestGroup</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventItemSamplingId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemSamplingValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestQtySpecification</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventItemSamplingId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestQtySpecification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemSamplingValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompleteBlocking</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventItemSamplingId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventItemSamplingId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QualityOrderGeneration</Name>
			<Label>@SYS335642</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompleteBlocking</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreatePerUpdatedQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscriminatingInventoryDimensions</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SamplingQuantity</Name>
			<Label>@SYS335641</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestQtySpecification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemSamplingValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CompleteBlocking</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBlockingComplete</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreatePerUpdatedQuantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestCreatePerUpdatedQuantity</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DiscriminatingInventoryDimensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestDiscriminatingInventDims</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventItemSamplingId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventItemSamplingId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ItemSamplingValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventItemSamplingValue</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TestQtySpecification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTestQtySpecification</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SamplingScope</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSQualityManagementSamplingScope</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CountByItem</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSBreakCountByItem</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PerNthLicensePlate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPerNthLicensePlate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventItemSamplingIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventItemSamplingId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>