<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalHistory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalHistory</c> table stores the historical record for the bank - currency revaluation process.
/// </summary>
public class BankCurrencyRevalHistory extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specific record in the <c>BankCurrencyRevalHistory</c> table buffer.
    /// </summary>
    /// <param name = "_recId">The record ID of the <c>BankCurrencyRevalHistory</c> record to find.</param>
    /// <param name = "_forUpdate">A boolean value that indicates whether to read the record for update; optional.</param>
    /// <param name = "_concurrencyModel">The concurrency model option to use when the record is read; optional.</param>
    /// <returns>A record in the <c>BankCurrencyRevalHistory</c> table; otherwise, an empty record.</returns>
    internal static BankCurrencyRevalHistory find(
        RecId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankCurrencyRevalHistory bankCurrencyRevalHistory;

        bankCurrencyRevalHistory.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            bankCurrencyRevalHistory.concurrencyModel(_concurrencyModel);
        }

        select firstonly bankCurrencyRevalHistory
            where bankCurrencyRevalHistory.RecId == _recId;

        return bankCurrencyRevalHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherReversed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the voucher value that the current historical record reversed.
    /// </summary>
    /// <returns>The reversed voucher.</returns>
    [SysClientCacheDataMethod(true)]
    internal display Voucher voucherReversed()
    {
        Voucher reversedVoucher;

        if (this.OrigBankCurrencyRevalHistory && this.Reversal)
        {
            reversedVoucher = BankCurrencyRevalHistory::find(this.OrigBankCurrencyRevalHistory).SubledgerVoucher;
        }

        return reversedVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsEligibleForRevaluation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a given bank account is eligible for revaluation for the given date.
    /// </summary>
    /// <param name = "_legalEntityDataAreaId">The data area of the bank account.</param>
    /// <param name = "_bankAccountId">The name of the bank account.</param>
    /// <param name = "_transactionDate">The date for which the revaluation is to be processed.</param>
    /// <returns>true if the bank account is eligible for revaluation; otherwise, false.</returns>
    internal static boolean checkIsEligibleForRevaluation(
        LegalEntityDataAreaId _legalEntityDataAreaId,
        CompanyBankAccountId _bankAccountId,
        TransDate _transactionDate)
    {
        BankCurrencyRevalHistory bankCurrencyRevalHistory;
        boolean allowBankCurrencyReval, checkHistory;

        changecompany (_legalEntityDataAreaId)
        {
            allowBankCurrencyReval = BankCurrencyRevalFeatureExposure::isEnabled();
        }

        if (allowBankCurrencyReval)
        {
            BankCurrencyRevalHistory bankCurrencyRevalHistoryReversal;

            select firstonly bankCurrencyRevalHistory
                where bankCurrencyRevalHistory.LegalEntity == _legalEntityDataAreaId
                    && bankCurrencyRevalHistory.BankAccountId == _bankAccountId
                    && bankCurrencyRevalHistory.Reversal == NoYes::No
                    && bankCurrencyRevalHistory.TransDate >= _transactionDate
                notexists join bankCurrencyRevalHistoryReversal
                    where bankCurrencyRevalHistoryReversal.Reversal == NoYes::Yes
                        && bankCurrencyRevalHistoryReversal.OrigBankCurrencyRevalHistory == bankCurrencyRevalHistory.RecId;

            checkHistory = bankCurrencyRevalHistory.RecId == 0;

            if (FeatureStateProvider::isFeatureEnabled(BankCurrencyRevalEnhancementFeature::instance()))
            {
                TransDate lastRevalResetDate = BankAccountTable::getLastRevalResetDate(_bankAccountId, _legalEntityDataAreaId);
                checkHistory = checkHistory && lastRevalResetDate < _transactionDate;
            }
        }

        return allowBankCurrencyReval && checkHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eligibleForReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the exchange adjustment transaction is eligible for reversal.
    /// </summary>
    /// <returns>true if the exchange adjustment transaction is eligible for reversal; otherwise, false.</returns>
    internal boolean eligibleForReversal()
    {
        boolean ret;

        if (!this.Reversal && !this.hasBeenReversed() && !this.hasFutureNonReversedHistoryRecord())
        {
            if (!FeatureStateProvider::isFeatureEnabled(BankCurrencyRevalEnhancementFeature::instance()))
            {
                ret = true;
            }
            else
            {
                TransDate lastRevalResetDate = BankAccountTable::getLastRevalResetDate(this.BankAccountId);
                ret = this.TransDate > lastRevalResetDate && this.IsReset == NoYes::No;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBeenReversed</Name>
				<Source><![CDATA[
    private boolean hasBeenReversed()
    {
        BankCurrencyRevalHistory reversalBankCurrencyRevalHistory;

        select firstonly reversalBankCurrencyRevalHistory
            where reversalBankCurrencyRevalHistory.OrigBankCurrencyRevalHistory == this.RecId;

        return reversalBankCurrencyRevalHistory.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFutureNonReversedHistoryRecord</Name>
				<Source><![CDATA[
    private boolean hasFutureNonReversedHistoryRecord()
    {
        BankCurrencyRevalHistory futureBankCurrencyRevalHistory;
        BankCurrencyRevalHistory bankCurrencyRevalHistoryReversal;

        select firstonly futureBankCurrencyRevalHistory
            where futureBankCurrencyRevalHistory.LegalEntity == this.LegalEntity
                && futureBankCurrencyRevalHistory.BankAccountId == this.BankAccountId
                && futureBankCurrencyRevalHistory.Reversal == NoYes::No
                && futureBankCurrencyRevalHistory.TransDate > this.TransDate
            notexists join bankCurrencyRevalHistoryReversal
                where bankCurrencyRevalHistoryReversal.Reversal == NoYes::Yes
                    && bankCurrencyRevalHistoryReversal.OrigBankCurrencyRevalHistory == futureBankCurrencyRevalHistory.RecId;

        return futureBankCurrencyRevalHistory.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsWithoutReversalForCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for the existence of any historical records that have not been reversed for the given company.
    /// </summary>
    /// <param name = "_legalEntityDataAreaId">The company value used to search for non-reversed historical records.</param>
    /// <returns>true if non-reversed historical records exist; otherwise, false.</returns>
    internal static boolean existsWithoutReversalForCompany(LegalEntityDataAreaId _legalEntityDataAreaId = curExt())
    {
        boolean anyNonReversedExist = false;

        BankCurrencyRevalHistory bankCurrencyRevalHistory;
        BankCurrencyRevalHistory bankCurrencyRevalHistoryReversal;

        select firstonly bankCurrencyRevalHistory
            where bankCurrencyRevalHistory.LegalEntity == _legalEntityDataAreaId
                && bankCurrencyRevalHistory.Reversal == NoYes::No
            notexists join bankCurrencyRevalHistoryReversal
                where bankCurrencyRevalHistoryReversal.Reversal == NoYes::Yes
                    && bankCurrencyRevalHistoryReversal.OrigBankCurrencyRevalHistory == bankCurrencyRevalHistory.RecId;

        return bankCurrencyRevalHistory.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfGeneratedBankTrans</Name>
				<Source><![CDATA[
    internal int numOfGeneratedBankTrans()
    {
        BankAccountTrans bankAccountTrans;

        select count(RecId) from bankAccountTrans
            where bankAccountTrans.AccountId == this.BankAccountId
                && bankAccountTrans.Voucher == this.SubledgerVoucher
                && bankAccountTrans.DataAreaId == this.LegalEntity;

        return bankAccountTrans.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<FormRef>BankCurrencyRevalHistory</FormRef>
	<Label>@SYS55328</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>LegalEntity</TitleField1>
	<TitleField2>CreatedDateTime</TitleField2>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<Modules>Bank</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LegalEntity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LegalEntityDataAreaId</ExtendedDataType>
			<Label>@GeneralLedger:LegalEntity</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankAccountId</Name>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@CashManagement:BankCurrencyRevalRevaluationDate</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Ledger</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubledgerVoucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ExchangeRateDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GeneralLedger:ForeignCurrencyRevalDateOfRate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExchangeRateType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ExchangeRateTypeRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReportingCurrencyExchangeRateType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ExchangeRateTypeRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reversal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerExchAdjReversal</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OrigBankCurrencyRevalHistory</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsReset</Name>
			<FeatureClass>BankCurrencyRevalEnhancementFeature</FeatureClass>
			<Label>@CashManagement:BankCurrencyRevalIsReset</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsRunAfterEnhancementFeatureEnabled</Name>
			<AllowEdit>No</AllowEdit>
			<FeatureClass>BankCurrencyRevalEnhancementFeature</FeatureClass>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VoucherIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SubledgerVoucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Ledger</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LegalEntityAccountTransDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BankAccountId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Reversal</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OrigBankCurrencyRevalHistoryReversalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OrigBankCurrencyRevalHistory</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Reversal</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CompanyInfo</Name>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>DataArea</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Ledger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Ledger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Ledger</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Ledger_GeneralJournalEntry</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Ledger</Name>
					<Field>Ledger</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankAccountTable</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankAccountId</Name>
					<Field>BankAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>