<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProposalEmplDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjProposalEmplDetail extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total line amount in the Invoice Proposal currency.
    /// </summary>
    /// <param name="_projProposalEmpl">
    /// The <c>ProjProposalEmpl</c> instance for the line.
    /// </param>
    /// <param name="_projProposalJour">
    /// ProjProposalJour instance for the invoice proposal
    /// </param>
    /// <param name="_lineAmount">
    /// The new line amount.
    /// </param>
    /// <returns>
    /// The new line amount if Brazilian parameters are enabled; otherwise, <c>_lineAmount</c>.
    /// </returns>
    /// <remarks>
    /// Calculates total line amount in Invoice Proposal currency
    /// </remarks>
    public AmountCur calculateAmountCur(ProjProposalEmpl _projProposalEmpl,
                                        ProjProposalJour _projProposalJour,
                                        AmountCur        _lineAmount)
    {
            AmountCur totalAmount;

            if (BrazilParameters::isEnabled() && _projProposalEmpl.IncludedTaxPercent_BR)
            {
                totalAmount      = CurrencyExchangeHelper::amount(_projProposalEmpl.qty() * this.salesPriceInclTax_BR(_projProposalEmpl.IncludedTaxPercent_BR), _projProposalJour.CurrencyId);
                return   totalAmount;
            }

            return _lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    display AmountCur lineAmount()
    {
        return ProjTrans::newProjProposalEmplSale(this.projProposalEmpl(), this, this.projEmplTransSale()).transTurnover();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls methods appropriate to modified fields.
    /// </summary>
    /// <param name="_fieldId">
    ///    The ID of the field that is modified.
    /// </param>
    /// <remarks>
    ///    This method executes when any field in the table is modified.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
		switch (_fieldId)
        {
            case fieldnum(ProjProposalEmplDetail, SalesPrice):               
				ProjProposalEmpl projProposalEmpl				= this.projProposalEmpl();
				ProjProposalJour projProposalJour				= projProposalEmpl.projProposalJour();
				ProjFundingSourceRefId projFundingSourceRefId	= ProjProposalJour.FundingSource;
				ProjProposalId projProposalId					= ProjProposalJour.ProposalId;
				TransactionID  transId							= projProposalEmpl.TransId;
                ProjEmplTrans projEmplTrans = ProjEmplTrans::find(transId);

				AmountCur    newAmount		= CurrencyExchangeHelper::amount(projProposalEmpl.qty() * this.SalesPrice, ProjProposalJour.CurrencyId);
				AmountCur   originalAmount  = CurrencyExchangeHelper::amount(projProposalEmpl.qty() * this.orig().SalesPrice, ProjProposalJour.CurrencyId);

                this.AmountCur          = this.calculateAmountCur(projProposalEmpl,projProposalJour, newAmount);

                ProjInvoiceProposalTransUpdate::updateProposalSummaryWithCategory(projProposalId, newAmount,
                                                            originalAmount, projEmplTrans.ProjId, projEmplTrans.CategoryId);

                this.update();

                break;

            default:
                super(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projEmplTransSale</Name>
				<Source><![CDATA[
    public ProjEmplTransSale projEmplTransSale()
    {
        return (ProjEmplTransSale::find(this.SaleRefRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalEmpl</Name>
				<Source><![CDATA[
    public ProjProposalEmpl projProposalEmpl(boolean _forUpdate = false)
    {
        return (ProjProposalEmpl::findRecId(this.ProposalRefRecId, _forUpdate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPriceInclTax_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sales price including included taxes for this transaction.
    /// </summary>
    /// <param name="_includedTaxPercent_BR">
    /// Tax percentage to include in the price
    /// </param>
    /// <returns>
    /// The sales price including included taxes for this transaction.
    /// </returns>
    public display SalesPriceInclTax_BR salesPriceInclTax_BR(TaxValue _includedTaxPercent_BR = this.projProposalEmpl().IncludedTaxPercent_BR)
    {
        return this.salesPrice / (1 -  _includedTaxPercent_BR / 100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean                 ret;
        ProjEmplTrans           projEmplTrans;
        ProjProposalEmpl        projProposalEmpl;
        ProjProposalJour        projProposalJour;
        AmountCur               finalLineAmount;
        AmountCur               updatedLineAmount;
        AmountCur               originalAmount;
        ProjTrans               projTrans;
        ProjFundingSourceRefId  fundingSource;

        ret = super(_fieldIdToCheck);
        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(ProjProposalRevenueDetail, SalesPrice):
                    projProposalEmpl  = this.projProposalEmpl();
                    projProposalJour  = projProposalEmpl.projProposalJour();
                    projEmplTrans     = projProposalEmpl.projEmplTrans();
                    projTrans         = ProjTrans::construct(projEmplTrans);
                    updatedLineAmount = CurrencyExchangeHelper::amount(projProposalEmpl.qty() * this.SalesPrice, projProposalJour.CurrencyId);
                    originalAmount    = CurrencyExchangeHelper::amount(projProposalEmpl.qty() * this.orig().SalesPrice, projProposalJour.CurrencyId);
                    finalLineAmount   = this.calculateAmountCur(projProposalEmpl, projProposalJour, updatedLineAmount)  - originalAmount;
                    fundingSource     = projProposalJour.FundingSource;

                    if (!this.verifyAndUpdateFundingLimit(projTrans, finalLineAmount, fundingSource))
                    {
                        ret = false;
                    }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyAndUpdateFundingLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies and updates funding limit if the new line amount is within the funding limit.
    /// </summary>
    /// <param name="_projTrans">
    /// The <c>ProjTrans</c> record to verify and update.
    /// </param>
    /// <param name="_lineAmount">
    /// The line amount to check.
    /// </param>
    /// <param name="_fundingsource">
    /// The <c>RefId</c> value of the funding source.
    /// </param>
    /// <returns>
    /// True if the line amount is within the funding limits; otherwise, false.
    /// </returns>
    public boolean verifyAndUpdateFundingLimit(ProjTrans _projTrans, AmountCur _lineAmount, ProjFundingSourceRefId _fundingsource)
    {
        if (this.SalesPrice >= 0)
            {
                if (!ProjInvoiceProposalTransUpdate::validateFundingLimit(_lineAmount,
                                                        _projTrans,
                                                        _fundingsource))
                {
                    return  checkFailed("@SYS136009");
                }

                return true;
            }

        return checkFailed("@SYS118311");
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjProposalEmplDetail find(RefRecId _saleRefRecId, ProjProposalId _proposalId = '', boolean _forUpdate = false)
    {
        ProjProposalId          proposalId = _proposalId;
        ProjProposalEmpl        projProposalEmpl = null;
        ProjProposalEmplDetail  projProposalEmplDetail = null;

        if (! proposalId)
        {
            proposalId  = ProjProposalEmplDetail::findActiveProposalId(_saleRefRecId);
        }

        projProposalEmplDetail.selectForUpdate(_forUpdate);

        if (_saleRefRecId && proposalId)
        {
            select projProposalEmplDetail
                where projProposalEmplDetail.SaleRefRecId == _saleRefRecId
                    join ProposalId, RecId from projProposalEmpl
                        where projProposalEmpl.RecId == projProposalEmplDetail.ProposalRefRecId &&
                            projProposalEmpl.ProposalId == proposalId;
        }

        return projProposalEmplDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveProposalId</Name>
				<Source><![CDATA[
    public static ProjProposalId findActiveProposalId(RefRecId _saleRefRecId)
    {
        RefRecId                saleRefRecId = _saleRefRecId;
        ProjProposalId          proposalId;
        ProjEmplTransSale       projEmplTransSale = ProjEmplTransSale::find(_saleRefRecId);
        ProjProposalEmpl        projProposalEmpl;
        ProjProposalEmplDetail  projProposalEmplDetail;
        ProjProposalJour        projProposalJour;
        ProjInvoiceEmpl         projInvoiceEmpl;
        ProjInvoiceEmplDetail   projInvoiceEmplDetail;

        if (projEmplTransSale.TransStatus   == ProjTransStatus::Posted      ||
            projEmplTransSale.TransStatus   == ProjTransStatus::Adjusted    ||
            projEmplTransSale.TransStatus   == ProjTransStatus::Estimated   ||
            projEmplTransSale.TransStatus   == ProjTransStatus::Eliminated)
        {
            return '';
        }

    //  test if only one proposal return this
        select count(RecId) from projProposalEmplDetail
            where projProposalEmplDetail.SaleRefRecId  == saleRefRecId;

        if (projProposalEmplDetail.RecId <= 1)
        {
            select firstonly projProposalEmplDetail
                where projProposalEmplDetail.SaleRefRecId == saleRefRecId
                    join projProposalEmpl
                        where projProposalEmpl.RecId == projProposalEmplDetail.ProposalRefRecId;

            proposalId = projProposalEmpl.ProposalId;
        }
        else
        {
    //  test if no invoice exists for proposal - return this
            select projProposalEmplDetail
                where projProposalEmplDetail.SaleRefRecId == _saleRefRecId
                    join projProposalEmpl
                        where projProposalEmpl.RecId == projProposalEmplDetail.ProposalRefRecId
                        exists join projProposalJour
                            where projProposalJour.ProposalId == projProposalEmpl.ProposalId
                            notexists join projInvoiceEmpl
                                where projInvoiceEmpl.ProjInvoiceId == projProposalJour.ProjInvoiceId
                                join projInvoiceEmplDetail
                                    where projInvoiceEmplDetail.InvoiceRefRecId == projInvoiceEmpl.RecId
                                       && projInvoiceEmplDetail.SaleRefRecId == projProposalEmplDetail.SaleRefRecId;

            if (projProposalEmpl)
            {
                proposalId = projProposalEmpl.ProposalId;
            }
            else
            {
    //  test if invoice with no-ref exists for proposal - return this
                select RecId from projProposalEmplDetail
                    where projProposalEmplDetail.SaleRefRecId == _saleRefRecId
                        join projProposalEmpl
                            where projProposalEmpl.RecId == projProposalEmplDetail.ProposalRefRecId
                            exists join projProposalJour
                                where projProposalJour.ProposalId == projProposalEmpl.ProposalId
                                join RecId from projInvoiceEmpl
                                    where projInvoiceEmpl.ProjInvoiceId == projProposalJour.ProjInvoiceId
                                    join RecId from projInvoiceEmplDetail
                                    where  projInvoiceEmplDetail.InvoiceRefRecId == projInvoiceEmpl.RecId
                                       &&  projInvoiceEmplDetail.SaleRefRecId == _saleRefRecId
                                       && !projInvoiceEmplDetail.RefRecId;

                if (projProposalEmpl)
                {
                    proposalId  = projProposalEmpl.ProposalId;
                }
            }
        }

        return proposalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProposaleFromTrans</Name>
				<Source><![CDATA[
    public static ProjProposalEmplDetail initProposaleFromTrans(ProjEmplTransSale _projEmplTransSale)
    {
        ProjProposalEmplDetail    projProposalEmplDetail;

        projProposalEmplDetail.SaleRefRecId   = _projEmplTransSale.RecId;
        projProposalEmplDetail.SalesPrice     = _projEmplTransSale.SalesPrice;
        projProposalEmplDetail.AmountCur      = _projEmplTransSale.LineAmount;

        return projProposalEmplDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        // <GTE>
        ProjProposalEmplDetail orig = this.orig();
        // </GTE>

        super();

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && this.SalesPrice != orig.SalesPrice)
        {
            this.projProposalEmpl().markCurrentTaxDocumentTaxStatusDirty();
        }
        // </GTE>
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS320564</DeveloperDocumentation>
	<Label>@SYS55261</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>SaleRefRecId</TitleField1>
	<TitleField2>SalesPrice</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SaleRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Proposal</Name>
			<Label>@SYS26457</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProposalRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SaleRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProposalRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SaleRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceEmpl</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProposalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProposalRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SaleIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SaleRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ProjEmplTransSale</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjEmplTransSale</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SaleRefRecId</Name>
					<Field>SaleRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjProposalEmpl</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjProposalEmpl</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProposalRefRecId</Name>
					<Field>ProposalRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>