<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmBudgetPurposeEarningBasis</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HcmBudgetPurposeEarningBasis extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>HcmBudgetPurposeEarningBasis</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(HcmBudgetPurposeEarningBasisRecId _recId)
    {
        boolean isExist = true;

        if (!HcmBudgetPurposeEarningBasis::exist(_recId))
        {
            isExist = checkFailed(strfmt("@SYS321009", tableStr(HcmBudgetPurposeEarningBasis)));
        }

        return isExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record ID exists in the <c>HcmBudgetPurposeEarningBasis</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false .
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return _recId && (select firstonly RecId from HcmBudgetPurposeEarningBasis
                    where HcmBudgetPurposeEarningBasis.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmBudgetPurposeEarningBasis</c> table that is based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmBudgetPurposeEarningBasis</c> table.
    /// </returns>
    public static HcmBudgetPurposeEarningBasis find(
        RefRecId            _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmBudgetPurposeEarningBasis hcmBudgetPurposeEarningBasis;

        hcmBudgetPurposeEarningBasis.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmBudgetPurposeEarningBasis.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmBudgetPurposeEarningBasis
             where hcmBudgetPurposeEarningBasis.RecId == _recId;

        return hcmBudgetPurposeEarningBasis;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBudgetPurposeEarningBasis</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmBudgetPurposeEarningBasis</c> table that is based on the <c>BudgetPurposeType</c> and
    /// <c>EarningBudgetPurposeType</c> record ID values that are supplied.
    /// </summary>
    /// <param name="_budgetPurposeType">
    /// A <c>BudgetPurposeType</c> record ID value.
    /// </param>
    /// <param name="_earningBudgetPurposeType">
    /// A <c>EarningBudgetPurposeType</c> record ID value.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether the concurrency setting will be used on the table;
    /// optional.
    /// </param>
    /// <returns>
    /// An empty buffer or one or more records from the <c>HcmBudgetPurposeEarningBasis</c> table.
    /// </returns>
    public static HcmBudgetPurposeEarningBasis findByBudgetPurposeEarningBasis(
        HcmBudgetPurposeTypeRecId _budgetPurposeType,
        HcmBudgetPurposeTypeRecId _earningBudgetPurposeType,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmBudgetPurposeEarningBasis hcmBudgetPurposeEarningBasis;

        hcmBudgetPurposeEarningBasis.selectForUpdate(_forUpdate );

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmBudgetPurposeEarningBasis.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmBudgetPurposeEarningBasis
             where hcmBudgetPurposeEarningBasis.BudgetPurposeType == _budgetPurposeType &&
                hcmBudgetPurposeEarningBasis.EarningBudgetPurposeType == _earningBudgetPurposeType;

        return hcmBudgetPurposeEarningBasis;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetPurposeAnEarningBasis</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record ID exists in the <c>HcmBudgetPurposeEarningBasis</c> table.
    /// </summary>
    /// <param name="_hcmBudgetPurposeTypeRecId">
    /// The record ID of the <c>HcmBudgetPurposeType</c> table record to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean isBudgetPurposeAnEarningBasis(HcmBudgetPurposeTypeRecId _hcmBudgetPurposeTypeRecId)
    {
        boolean earningBasisExists;
        HcmBudgetPurposeEarningBasis hcmBudgetPurposeEarningBasis;

        select firstonly RecId from hcmBudgetPurposeEarningBasis
            where hcmBudgetPurposeEarningBasis.BudgetPurposeType == _hcmBudgetPurposeTypeRecId;

        if (hcmBudgetPurposeEarningBasis.RecId)
        {
            earningBasisExists = true;
        }

        return earningBasisExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetPurposeUsedAsEarningBasis</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record of <c>HcmBudgetPurposeType</c> is used as a earning basis in <c>HcmBudgetPurposeEarningBasis</c> table.
    /// </summary>
    /// <param name="_hcmBudgetPurposeTypeRecId">
    /// The record ID of the <c>HcmBudgetPurposeType</c> table record to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean isBudgetPurposeUsedAsEarningBasis(HcmBudgetPurposeTypeRecId _hcmBudgetPurposeTypeRecId)
    {
        boolean isEarningBasis;
        HcmBudgetPurposeEarningBasis hcmBudgetPurposeEarningBasis;

        select firstonly RecId from hcmBudgetPurposeEarningBasis
            where hcmBudgetPurposeEarningBasis.EarningBudgetPurposeType == _hcmBudgetPurposeTypeRecId;

        if (hcmBudgetPurposeEarningBasis.RecId)
        {
            isEarningBasis = true;
        }

        return isEarningBasis;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRefrenceBudgetPurposeEarnings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides custom <c>lookupReference</c> logic for foreign keys to the <c>HcmBudgetPurposeEarningBasis</c> table that
    /// supports the look up of earning type records.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The <c>FormReferenceControl</c> form for which the look up is being performed.
    /// </param>
    /// <param name="_hcmBudgetPurpose">
    /// The <c>HcmBudgetPurpose</c> field for which the look up is being performed.
    /// </param>
    /// <returns>
    /// A <c>HcmBudgetPurposeType</c> table record buffer that contains the record that is selected in the look up.
    /// </returns>
    public static Common lookupRefrenceBudgetPurposeEarnings(FormReferenceControl   _formReferenceControl, HcmBudgetPurpose _hcmBudgetPurpose)
    {
        Common                       record;
        SysReferenceTableLookup      sysReferenceTableLookup;
        QueryBuildDataSource         queryBuildDataSource;
        Query                        query = new Query();

        sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(HcmBudgetPurposeType), _formReferenceControl);

        queryBuildDataSource = query.addDataSource(tableNum(HcmBudgetPurposeType));
        queryBuildDataSource.addRange(fieldNum(HcmBudgetPurposeType, Purpose)).value(SysQuery::valueNot(_hcmBudgetPurpose));

        sysReferenceTableLookup.addLookupfield(fieldNum(HcmBudgetPurposeType, Purpose));
        sysReferenceTableLookup.addLookupfield(fieldNum(HcmBudgetPurposeType, Description));
        sysReferenceTableLookup.parmQuery(query);

        record = sysReferenceTableLookup.performFormLookup();

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveRefrencebudgetPurposeEarnings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides custom <c>resolveReference</c> logic for foreign keys to the <c>HcmBudgetPurposeEarningBasis</c> table that
    /// supports the resolving of earning type records.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The <c>FormReferenceControl</c> form object for which to resolve the reference.
    /// </param>
    /// <param name="_hcmBudgetPurpose">
    /// The <c>HcmBudgetPurpose</c> field object for which to resolve the reference.
    /// </param>
    /// <returns>
    /// A <c>HcmBudgetPurposeType</c> table record buffer that contains the record to which the values in the
    /// <c>FormReferenceControl</c> object are resolved.
    /// </returns>
    public static Common resolveRefrencebudgetPurposeEarnings(FormReferenceControl _formReferenceControl, HcmBudgetPurpose _hcmBudgetPurpose)
    {
        HcmBudgetPurposeType         hcmBudgetPurposeType;
        HcmBudgetPurpose             purpose;

        purpose = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(HcmBudgetPurposeType, Purpose), tableStr(HcmBudgetPurposeType))).value();

        select hcmBudgetPurposeType
            where hcmBudgetPurposeType.Purpose == purpose &&
                  hcmBudgetPurposeType.Purpose != _hcmBudgetPurpose;

        return hcmBudgetPurposeType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS4005879</DeveloperDocumentation>
	<Label>@GLS92793</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>BudgetPurposeType</TitleField1>
	<TitleField2>EarningBudgetPurposeType</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>BudgetPurposeEarningBasisIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EarningBudgetPurposeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPurposeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPurposeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningBudgetPurposeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS316573</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EarningBudgetPurposeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPurposeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPurposeType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBudgetPurposeTypeRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EarningBudgetPurposeType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBudgetPurposeTypeRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetPurposeEarningBasisIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetPurposeType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EarningBudgetPurposeType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPurposeType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>HcmBudgetPurposeType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPurposeType</Name>
					<Field>BudgetPurposeType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EarningBudgetPurposeType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmBudgetPurposeType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetPurposeEarningBasis</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetPurposeType</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CostElementType_Extern</Name>
					<RelatedField>CostElementType</RelatedField>
					<ValueStr>HcmBudgetCostElementType::Earning</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EarningBudgetPurposeType</Name>
					<Field>EarningBudgetPurposeType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>