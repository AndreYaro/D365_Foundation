<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInvoiceTemplate extends common
{
    #ISOCountryRegionCodes
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayTotalInvoiceMarkupTransAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of miscellaneous charges amount for a single <c>CustInvoiceTemplate</c> record.
    /// </summary>
    /// <param name="_custInvoiceTemplate">
    /// The record ID of <c>CustInvoiceTemplate</c> table.
    /// </param>
    /// <returns>
    /// The sum of miscellaneous charges amount for a single <c>CustInvoiceTemplate</c> line.
    /// </returns>
    public display AmountCur displayTotalInvoiceMarkupTransAmount(CustInvoiceTemplate _custInvoiceTemplate)
    {
        AmountCur totalMarkupTransAmount;

        totalMarkupTransAmount = (select sum(AmountCur) from custInvoiceMarkupTransTemplate
                                    where custInvoiceMarkupTransTemplate.CustInvoiceTemplate == _custInvoiceTemplate.RecId).AmountCur;

        return totalMarkupTransAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.CurrencyCode = Ledger::accountingCurrency(CompanyInfo::current());
        this.LanguageId = (CompanyInfo::find().LanguageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the <c>BillingClassification</c> field modifications.
    /// </summary>
    /// <param name="_fieldId">
    ///     ID of the table field which is modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            switch (_fieldId)
            {
                case fieldNum(CustInvoiceTemplate, BillingClassification):
                    if (this.BillingClassification)
                    {
                        this.Payment = CustBillingClassification::find(this.BillingClassification).PaymTerm;
                    }
                    break;
            }
        }
        if (_fieldId == fieldNum(CustInvoiceTemplate, Payment))
        {
            if (this.Payment)
            {
                this.PaymentSched = PaymTerm::find(this.Payment).PaymSched;
            }
        }

        if (_fieldId == fieldNum(CustInvoiceTemplate, AccountingDistributionTemplate))
        {
            if (CustFreeTextInvoiceTemplateFlight::instance().isEnabled())
            {
                CustInvoiceStandardLineTemplate custInvoiceStandardLineTemplate;

                ttsbegin;

                update_recordset custInvoiceStandardLineTemplate
                   setting AccountingDistributionTemplate = this.AccountingDistributionTemplate
                   where custInvoiceStandardLineTemplate.CustInvoiceTemplate == this.RecId;

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record occurs in the <c>CustInvoiceTemplate</c> table.
    /// </summary>
    /// <param name="_custInvoiceTemplateRecId">
    /// The unique ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _custInvoiceTemplateRecId)
    {
        boolean ret = true;

        if (!CustInvoiceTemplate::exist(_custInvoiceTemplateRecId))
        {
            ret = checkFailed(strFmt(CustInvoiceTemplate::txtNotExist(), _custInvoiceTemplateRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustInvoiceTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the selected free text invoice template record with a new template name and description.
    /// </summary>
    /// <param name="_fromCustInvoiceTemplate">
    /// The selected <c>CustInvoiceTemplate</c> table record.
    /// </param>
    /// <param name="_newCustInvoiceTemplateName">
    /// The <c>TemplateName</c> value for new free text invoice template record.
    /// </param>
    /// <param name="_newCustInvoiceTemplateDescription">
    /// The <c>TemplateDescription</c> value for new free text invoice template record.
    /// </param>
    public static void copyCustInvoiceTemplate(CustInvoiceTemplate _fromCustInvoiceTemplate,
                                                CustInvoiceTemplateName _newCustInvoiceTemplateName,
                                                Description _newCustInvoiceTemplateDescription)
    {
        CustInvoiceTemplate custInvoiceTemplate;
        CustInvoiceLineTemplate custInvoiceLineTemplate;
        CustInvoiceStandardLineTemplate fromCustInvoiceStandardLineTemplate;
        CustInvoiceStandardLineTemplate toCustInvoiceStandardLineTemplate;
        CustInvoiceMarkupTransTemplate fromCustInvoiceMarkupTransTemplate;
        CustInvoiceMarkupTransTemplate toCustInvoiceMarkupTransTemplate;
        CustInvoiceDistributionTemplate fromCustInvoiceDistributionTemplate;
        CustInvoiceDistributionTemplate toCustInvoiceDistributionTemplate;

        Map mapCustCustomFieldElement;
        MapIterator mapIterator;
        CustCustomFieldElement custCustomFieldElement;

        ttsbegin;

        // Copy the customer free text invoice header record with the new template name and description.
        custInvoiceTemplate.data(_fromCustInvoiceTemplate);
        custInvoiceTemplate.TemplateDescription = _newCustInvoiceTemplateDescription;
        custInvoiceTemplate.TemplateName = _newCustInvoiceTemplateName;
        custInvoiceTemplate.insert();

        // Iterates the selected free text invoice template lines and copy it to new template record.
        while select custInvoiceLineTemplate
            where custInvoiceLineTemplate.CustInvoiceTemplate == _fromCustInvoiceTemplate.RecId
        {
            if (custInvoiceLineTemplate.getInstanceRelationType() == tableStr(CustInvoiceStandardLineTemplate))
            {
                fromCustInvoiceStandardLineTemplate = custInvoiceLineTemplate;

                toCustInvoiceStandardLineTemplate.data(fromCustInvoiceStandardLineTemplate);
                toCustInvoiceStandardLineTemplate.CustInvoiceTemplate = custInvoiceTemplate.RecId;
                toCustInvoiceStandardLineTemplate.insert();

                delete_from toCustInvoiceDistributionTemplate
                    where toCustInvoiceDistributionTemplate.CustInvoiceLineTemplate == toCustInvoiceStandardLineTemplate.RecId;

                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    mapCustCustomFieldElement = CustCustomFieldElement::getCustomFieldValues(CustCustomFieldSourceType::CustInvoiceTemplateLine,
                                                                                                custInvoiceLineTemplate);

                    if (mapCustCustomFieldElement)
                    {
                        mapIterator = new MapIterator(mapCustCustomFieldElement);

                        while (mapIterator.more())
                        {
                            custCustomFieldElement = mapIterator.value();
                            custCustomFieldElement.parmCustInvBillCodeCusotmFieldBaseId(0);
                            mapIterator.next();
                        }

                        CustInvLineBillCodeCustomFieldBase::writeCustCustomFields(mapCustCustomFieldElement, CustCustomFieldSourceType::CustInvoiceTemplateLine, toCustInvoiceStandardLineTemplate);
                    }
                }
            }
            else if (custInvoiceLineTemplate.getInstanceRelationType() == tableStr(CustInvoiceMarkupTransTemplate))
            {
                fromCustInvoiceMarkupTransTemplate = custInvoiceLineTemplate;

                toCustInvoiceMarkupTransTemplate.data(fromCustInvoiceMarkupTransTemplate);
                toCustInvoiceMarkupTransTemplate.CustInvoiceTemplate = custInvoiceTemplate.RecId;
                toCustInvoiceMarkupTransTemplate.insert();

                delete_from toCustInvoiceDistributionTemplate
                    where toCustInvoiceDistributionTemplate.CustInvoiceLineTemplate == toCustInvoiceMarkupTransTemplate.RecId;
            }

            // Creates the source document distributions record for the CustInvoiceLineTemplate table.
            while select fromCustInvoiceDistributionTemplate
                where fromCustInvoiceDistributionTemplate.CustInvoiceLineTemplate == custInvoiceLineTemplate.RecId
            {
                toCustInvoiceDistributionTemplate.data(fromCustInvoiceDistributionTemplate);

                if (custInvoiceLineTemplate.getInstanceRelationType() == tableStr(CustInvoiceStandardLineTemplate))
                {
                    toCustInvoiceDistributionTemplate.CustInvoiceLineTemplate = toCustInvoiceStandardLineTemplate.RecId;
                }
                else if (custInvoiceLineTemplate.getInstanceRelationType() == tableStr(CustInvoiceMarkupTransTemplate))
                {
                    toCustInvoiceDistributionTemplate.CustInvoiceLineTemplate = toCustInvoiceMarkupTransTemplate.RecId;
                }
                toCustInvoiceDistributionTemplate.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CustInvoiceTemplate</c> table.
    /// </summary>
    /// <param name="_custInvoiceTemplateRecId">
    /// The ID of the <c>CustInvoiceTemplate</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _custInvoiceTemplateRecId)
    {
        boolean found;

        found = (select firstonly RecId from custInvoiceTemplate
                    where custInvoiceTemplate.RecId == _custInvoiceTemplateRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBillingCodeWithCustomField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the billing code custom field exists in the lines associated with <c>CustInvoiceTemplate</c> table record.
    /// </summary>
    /// <param name="_custInvoiceTemplateRecId">
    /// The Record ID of <c>CustInvoiceTemplate</c> table record.
    /// </param>
    /// <param name="_billCodverVersionDate">
    /// The date used for finding the version for billing code.
    /// </param>
    /// <returns>
    /// true if the billing code custom field exists; otherwise, false.
    /// </returns>
    public static boolean existBillingCodeWithCustomField(RefRecId _custInvoiceTemplateRecId, date _billCodverVersionDate)
    {
        CustInvoiceStandardLineTemplate custInvoiceStandardLineTemplate;
        CustBillingCodeCustomField custBillingCodeCustomField;
        CustBillingCodeVersion custBillingCodeVersion;
        date validToDate = maxDate();

        select firstonly validtimestate(_billCodverVersionDate, validToDate) RecId from custInvoiceStandardLineTemplate
                                where custInvoiceStandardLineTemplate.CustInvoiceTemplate == _custInvoiceTemplateRecId
                                    && custInvoiceStandardLineTemplate.BillingCode != 0
                                        join CustBillingCode from custBillingCodeVersion
                                        where custBillingCodeVersion.CustBillingCode == custInvoiceStandardLineTemplate.BillingCode
                                            join CustBillingCodeVersion from custBillingCodeCustomField
                                            where custBillingCodeVersion.RecId == custBillingCodeCustomField.CustBillingCodeVersion
                                                && custBillingCodeCustomField.IsActive == true;

        return custInvoiceStandardLineTemplate.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existExpiredBillingCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine whether any line with expired billing code exists.
    /// </summary>
    /// <param name="_custInvoiceTemplateRecId">
    /// The Record ID of <c>CustInvoiceTemplate</c> table record.
    /// </param>
    /// <param name="_dateValidTo">
    /// The date to which the version for billing code valids.
    /// </param>
    /// <returns>
    /// true if any expired billing code exists; otherwise, false.
    /// </returns>
    public static boolean existExpiredBillingCode(RefRecId _custInvoiceTemplateRecId, date _dateValidTo)
    {
        CustInvoiceStandardLineTemplate custInvoiceStandardLineTemplate;
        CustBillingCodeVersion custBillingCodeVersion;
        date beginDate = dateNull();

        select firstonly validtimestate(beginDate,_dateValidTo) RecId from custInvoiceStandardLineTemplate
                                where custInvoiceStandardLineTemplate.CustInvoiceTemplate == _custInvoiceTemplateRecId
                                    && custInvoiceStandardLineTemplate.BillingCode != 0
                                        join CustBillingCode from custBillingCodeVersion
                                        where custBillingCodeVersion.CustBillingCode == custInvoiceStandardLineTemplate.BillingCode
                                            && custBillingCodeVersion.ValidTo <= _dateValidTo;

        return custInvoiceStandardLineTemplate.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTemplateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>CustInvoiceLineTemplate</c> record exists for the selected
    /// <c>CustInvoiceTemplate</c> table record.
    /// </summary>
    /// <param name="_custinvoiceTemplateRecId">
    /// The <c>RecId</c> value of the <c>CustInvoiceTemplate</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existTemplateLine(recId _custinvoiceTemplateRecId)
    {
        boolean found;

        found = (select firstonly RecId from custInvoiceStandardLineTemplate
                    where custInvoiceStandardLineTemplate.CustInvoiceTemplate == _custinvoiceTemplateRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>CustInvoiceTemplate</c> table.
    /// </summary>
    /// <param name="_custInvoiceTemplateRecId">
    /// The record ID to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>CustInvoiceTemplate</c> table buffer.
    /// </returns>
    public static CustInvoiceTemplate find(
        recId _custInvoiceTemplateRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInvoiceTemplate custInvoiceTemplate;

        custInvoiceTemplate.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInvoiceTemplate.concurrencyModel(_concurrencyModel);
        }

        select firstonly custInvoiceTemplate
            where custInvoiceTemplate.RecId == _custInvoiceTemplateRecId;

        return custInvoiceTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTemplateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>CustInvoiceTemplate</c> table.
    /// </summary>
    /// <param name="_custInvoiceTemplateName">
    /// The unique template name of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>CustInvoiceTemplate</c> table buffer.
    /// </returns>
    public static CustInvoiceTemplate findByTemplateName(
        CustInvoiceTemplateName _custInvoiceTemplateName,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInvoiceTemplate custInvoiceTemplate;

        custInvoiceTemplate.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInvoiceTemplate.concurrencyModel(_concurrencyModel);
        }

        select firstonly custInvoiceTemplate
            where custInvoiceTemplate.TemplateName == _custInvoiceTemplateName;

        return custInvoiceTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBillingCodeVersions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine whether any line with expired billing code exists.
    /// </summary>
    /// <param name="_invoiceTemplateRecId">
    /// The record ID of the <c>CustInvoiceTemplate</c> table record.
    /// </param>
    /// <param name="_validationDate">
    /// The date used to validated the <c>CustBillingCodeVersion</c> table records; optional.
    /// </param>
    /// <param name="_showErrors">
    /// Determines whether to add the errors to the infolog; optional.
    /// </param>
    /// <param name="_errorList">
    /// The set of errors for each <c>CustBillingCode</c> record that is not valid; optional.
    /// </param>
    /// <returns>
    /// true if no active <c>CustBillingCodeVersion</c> record exists; otherwise, false.
    /// </returns>
    public static boolean validateBillingCodeVersions(RefRecId _invoiceTemplateRecId,
                                                        TransDate _validationDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                        boolean _showErrors = true,
                                                        Set _errorList = null)
    {
        CustInvoiceStandardLineTemplate invoiceStandardLineTemplate;
        CustBillingCodeVersion billingCodeVersion;
        CustBillingCode billingCode;
        boolean areBillingCodeVersionsValid = true;
        ValidFromDate dateMin = dateNull();
        ValidToDate dateMax = maxDate();

        while select validTimeState(dateMin, dateMax) BillingCode from billingCode
            group by billingCode.BillingCode
            exists join invoiceStandardLineTemplate
                where invoiceStandardLineTemplate.CustInvoiceTemplate == _invoiceTemplateRecId
                    && invoiceStandardLineTemplate.BillingCode == billingCode.RecId
            notExists join CustBillingCode from billingCodeVersion
                where billingCodeVersion.CustBillingCode == billingCode.RecId
                    && billingCodeVersion.ValidFrom <= _validationDate
                    && billingCodeVersion.ValidTo >= _validationDate
        {
            areBillingCodeVersionsValid = false;

            if (!_errorList && !_showErrors)
            {
                // no point in continuing, as no billing code specific messages are needed
                break;
            }

            if (_errorList)
            {
                _errorList.add(billingCode.BillingCode);
            }

            if (_showErrors)
            {
                error(strFmt("@SYP4881929", billingCode.BillingCode));
            }
        }

        return areBillingCodeVersionsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            // For public sector, check that a free text invoice template record has a billing class.
            ret = AccountsReceivableUtilities_PSN::validateBillingClassificationExists(this.BillingClassification);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveFromCustInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a free text invoice template based on the <c>CustInvoiceTable</c> provided.
    /// </summary>
    /// <param name="_templateName">
    /// The identifier of the template to create or update.
    /// </param>
    /// <param name="_templateDescription">
    /// The description to use on the template.
    /// </param>
    /// <param name="_custInvoiceTable">
    /// An instance of a <c>CustInvoiceTable</c> table buffer.
    /// </param>
    /// <returns>
    /// true if the template was saved; otherwise, false.
    /// </returns>
    public static boolean saveFromCustInvoiceTable(CustInvoiceTemplateName _templateName, Description _templateDescription, CustInvoiceTable _custInvoiceTable)
    {
        CustInvoiceTemplate custInvoiceTemplate = CustInvoiceTemplate::findByTemplateName(_templateName, true);
        boolean isUpdatingExistingTemplate = custInvoiceTemplate.RecId != 0;

        ttsbegin;

        custInvoiceTemplate.initValue();
        custInvoiceTemplate.initFromCustInvoiceTable(_custInvoiceTable);
        custInvoiceTemplate.TemplateDescription = _templateDescription;

        if (FinTagConfiguration::isFinTagConfigurationSet(_custInvoiceTable.DataAreaId)
            && AccountsReceivableFinTagFlight::instance().isEnabled())
        {
            custInvoiceTemplate.FinTag = _custInvoiceTable.FinTag;
        }

        if (isUpdatingExistingTemplate)
        {
            custInvoiceTemplate.update();

            CustInvoiceLineTemplate invoiceLineTemplateToDelete;
            delete_from invoiceLineTemplateToDelete
                where invoiceLineTemplateToDelete.CustInvoiceTemplate == custInvoiceTemplate.RecId;
        }
        else
        {
            custInvoiceTemplate.TemplateName = _templateName;
            custInvoiceTemplate.insert();
        }

        if (!custInvoiceTemplate)
        {
            ttsabort;
            return false;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            CustInvoiceTemplateTaxExtension_IN::saveFromCustInvoiceTable(custInvoiceTemplate.RecId, _custInvoiceTable);
        }

        CustInvoiceLine custInvoiceLine;
        while select custInvoiceLine
            where custInvoiceLine.ParentRecId == _custInvoiceTable.RecId
        {
            CustInvoiceStandardLineTemplate invoiceLineTemplate = CustInvoiceStandardLineTemplate::createfromCustInvoiceLine(custInvoiceTemplate.RecId, custInvoiceLine);

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                Map mapCustCustomFieldElement = CustCustomFieldElement::getCustomFieldValues(CustCustomFieldSourceType::CustInvoiceLine, custInvoiceLine);

                if (mapCustCustomFieldElement)
                {
                    MapIterator mapIterator = new MapIterator(mapCustCustomFieldElement);

                    while (mapIterator.more())
                    {
                        CustCustomFieldElement custCustomFieldElement = mapIterator.value();
                        custCustomFieldElement.parmCustInvBillCodeCusotmFieldBaseId(0);
                        mapIterator.next();
                    }

                    CustInvLineBillCodeCustomFieldBase::writeCustCustomFields(mapCustCustomFieldElement, CustCustomFieldSourceType::CustInvoiceTemplateLine, invoiceLineTemplate);
                }
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                CustInvoiceLineTemplateTaxExtension_IN::createFromCustInvoiceLine(invoiceLineTemplate.RecId, custInvoiceLine);
            }

            CustInvoiceDistributionTemplate::createDistributionsFromLine(invoiceLineTemplate, custInvoiceLine.SourceDocumentLine);
        }

        MarkupTrans markupTrans;
        while select markupTrans
            where markupTrans.TransTableId == _custInvoiceTable.TableId &&
                markupTrans.TransRecId == _custInvoiceTable.RecId &&
                !markupTrans.IsDeleted
        {
            CustInvoiceMarkupTransTemplate markupTransTemplate = CustInvoiceMarkupTransTemplate::createFromMarkupTrans(custInvoiceTemplate.RecId, markupTrans);

            CustInvoiceDistributionTemplate::createDistributionsFromLine(markupTransTemplate, markupTrans.SourceDocumentLine);
        }

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>CustInvoiceTemplate</c> table fields based on the <c>CustInvoiceTable</c> provided.
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// An instance of a <c>CustInvoiceTable</c> table buffer.
    /// </param>
    public void initFromCustInvoiceTable(CustInvoiceTable _custInvoiceTable)
    {
        this.LanguageId = _custInvoiceTable.LanguageId;
        this.PostingProfile = _custInvoiceTable.PostingProfile;
        this.TaxGroup = _custInvoiceTable.TaxGroup;
        this.TaxItemGroup = _custInvoiceTable.TaxItemGroup;
        this.OverrideSalesTax = _custInvoiceTable.OverrideSalesTax;
        this.Listcode = _custInvoiceTable.Listcode;
        this.CurrencyCode = _custInvoiceTable.CurrencyCode;
        this.Payment = _custInvoiceTable.Payment;
        this.PaymMode = _custInvoiceTable.PaymMode;
        this.PaymSpec = _custInvoiceTable.PaymSpec;
        this.PaymentSched = _custInvoiceTable.PaymentSched;
        this.CashDiscCode = _custInvoiceTable.CashDiscCode;
        this.GiroType = _custInvoiceTable.GiroType;
        this.DlvTerm = _custInvoiceTable.DlvTerm;
        this.CashDiscCode = _custInvoiceTable.CashDiscCode;
        this.CashDiscPercent = _custInvoiceTable.CashDiscPercent;
        this.DefaultDimension = _custInvoiceTable.DefaultDimension;
        this.InclTax = _custInvoiceTable.InclTax;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            this.BillingClassification = _custInvoiceTable.CustBillingClassification;
        }

        this.WorkerSalesTaker = _custInvoiceTable.WorkerSalesTaker;
        this.AccountingDistributionTemplate = _custInvoiceTable.AccountingDistributionTemplate;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.vatOnPayment_RU = _custInvoiceTable.vatOnPayment_RU;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS314200</DeveloperDocumentation>
	<FormRef>CustInvoiceTemplate</FormRef>
	<Label>@SYS314183</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TemplateName</TitleField1>
	<TitleField2>TemplateDescription</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>AccountsReceivable</Modules>
	<ReplacementKey>TemplateNameIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustInvoiceLineTemplate</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInvoiceLineTemplate</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustInvoiceTemplateTaxExtension_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInvoiceTemplateTaxExtension_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustRecurrenceInvoice</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>CustRecurrenceInvoice</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TemplateDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TemplateName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TemplateName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TemplateName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountingDistributionTemplate</Name>
			<Label>@SYS300391</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS40777</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesTaker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATOnPayment_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Listcode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GiroMoneyTransferSlip</Name>
			<Label>@SYS2723</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GiroType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@SYS69153</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TemplateName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS55132</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATOnPayment_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS304177</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Template</Name>
			<Label>@SYS103708</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TemplateDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillingClassification</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TemplateName</Name>
			<Label>@SYS69153</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TemplateName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AccountingDistributionTemplateRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BillingClassification</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS690</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDiscCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCashDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GiroType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentStubInvoiceId</ExtendedDataType>
			<Label>@SYS104461</Label>
			<EnumType>PaymentStub</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InclTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustLanguageId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Listcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListcodeId</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
			<EnumType>Listcode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Payment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentSched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymMode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSpec</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TemplateDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TemplateName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInvoiceTemplateName</ExtendedDataType>
			<Label>@SYS69153</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATOnPayment_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATOnPayment_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerSalesTaker</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesTaker</ExtendedDataType>
			<Label>@SYS4466</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclTax_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<CountryRegionCodes>CZ,EE,HU,LT,LV,PL,RU</CountryRegionCodes>
			<ExtendedDataType>InclTax</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FinTag</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FinTagRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TemplateNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TemplateName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkerSalesTakerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkerSalesTaker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AccountingDistributionTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTemplate</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscCode</Name>
					<SourceEDT>CustCashDiscCode</SourceEDT>
					<Field>CashDiscCode</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CustCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustBillingClassification</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustBillingClassification</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustBillingClassification</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustBillingClassification_CustInvoiceTemplate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BillingClassification</Name>
					<Field>BillingClassification</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostingIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustPaymModeSpec</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustPaymModeSpec</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustPaymModeSpec</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustPaymModeSpec_CustInvoiceTemplate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymSpec</Name>
					<Field>PaymSpec</Field>
					<RelatedField>Specification</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymSpecIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustPaymModeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustPaymModeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<SourceEDT>CustPaymMode</SourceEDT>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymModeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTemplate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTerm</Name>
					<SourceEDT>CustDlvTermId</SourceEDT>
					<Field>DlvTerm</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<SourceEDT>CustLanguageId</SourceEDT>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<SourceEDT>CustLanguageId</SourceEDT>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymentSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymentSched</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTemplate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentSched</Name>
					<SourceEDT>PaymSchedId</SourceEDT>
					<Field>PaymentSched</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Payment</Name>
					<SourceEDT>CustPaymTermId</SourceEDT>
					<Field>Payment</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerSalesTaker_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WorkerSalesTaker_CustInvoiceTemplate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerSalesTaker</Name>
					<Field>WorkerSalesTaker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FinTag</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FinTag</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FinTag</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTemplate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FinTag</Name>
					<Field>FinTag</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>