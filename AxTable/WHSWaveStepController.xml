<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveStepController</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWaveStepController extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAndLockControlRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a control record for the wave step of the currently running wave and locks it with a pessimistic lock.
    /// </summary>
    /// <param name="_waveId">
    /// The wave Id of the wave being processed.
    /// </param>
    /// <param name="_waveExecutionId">
    /// The wave execution Id of the current wave process.
    /// </param>
    /// <param name="_waveStepName">
    /// The name of the wave step being run.
    /// </param>
    /// <param name="_inventLocationId">
    /// The inventLocationId of the warehouse the wave is running in.
    /// </param>
    /// <param name="_lockUserConn">
    /// The User connection used to lock the control record if provided, optional.
    /// </param>
    /// <returns>
    /// The locked <c>WHSWaveStepController</c> record.
    /// </returns>
    public static WHSWaveStepController createAndLockControlRecord(
        WHSWaveId           _waveId,
        WHSWaveExecutionId  _waveExecutionId,
        WHSPostMethodName   _waveStepName,
        InventLocationId    _inventLocationId,
        UserConnection      _lockUserConn = null)
    {
        RecId recId;

        recId = WHSWaveStepController::createControlRecord(_waveId, _waveExecutionId, _waveStepName, _inventLocationId);

        return WHSWaveStepController::lockControlRecord(recId, _lockUserConn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createControlRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a control record for the wave step of the currently running wave.
    /// </summary>
    /// <param name="_waveId">
    /// The wave Id of the wave being processed.
    /// </param>
    /// <param name="_waveExecutionId">
    /// The wave execution Id of the current wave process.
    /// </param>
    /// <param name="_waveStepName">
    /// The name of the wave step being run.
    /// </param>
    /// <param name="_inventLocationId">
    /// The inventLocationId of the warehouse the wave is running in.
    /// </param>
    /// <returns>
    /// The RecId of the newly created control record.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An error is thrown if a control record is not created.
    /// </exception>
    public static RecId createControlRecord(
    WHSWaveId           _waveId,
    WHSWaveExecutionId  _waveExecutionId,
    WHSPostMethodName   _waveStepName,
    InventLocationId    _inventLocationId)
    {
        WHSWaveStepController   waveStepController;
        UserConnection          userCon = new UserConnection();

        try
        {
            waveStepController.setConnection(userCon);

            userCon.ttsbegin();

            waveStepController.WaveId = _waveId;
            waveStepController.WaveExecutionID = _waveExecutionId;
            waveStepController.PostMethodName = _waveStepName;
            waveStepController.InventLocationId = _inventLocationId;

            if (!waveStepController.validateWrite())
            {
                // Abort the user connection first because the throw error will not abort it.
                userCon.ttsabort();
                    
                throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSWaveStepController)));
            }
            else
            {
                waveStepController.insert();
            }

            if (!waveStepController.RecId)
            {
                // Abort the user connection first because the throw error will not abort it.
                userCon.ttsabort();

                throw error (strfmt("@WAX:WaveControlRecordCreationError", waveStepController.waveId, waveStepController.PostMethodName));
            }

            userCon.ttscommit();
        }
        finally
        {
            userCon.finalize();
        }

        return waveStepController.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesWaveHaveLockedControlRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the wave has some control records that are currently locked.
    /// </summary>
    /// <param name="_waveId">
    /// The waveId of the wave being evaluated.
    /// </param>
    /// <returns>
    /// true if there are some locked control records for the wave; otherwise, false.
    /// </returns>
    public static boolean doesWaveHaveLockedControlRecords(WHSWaveId _waveId)
    {
        WHSWaveStepController   waveStepControllerCount;
        WHSWaveStepController   waveStepControllerUnlocked;
        Counter                 numOfUnlockRecords;

        ttsBegin;

        select count(RecId) from waveStepControllerCount
            where waveStepControllerCount.WaveId == _waveId;

        waveStepControllerunlocked.readPast(true);

        while select pessimisticLock RecId from waveStepControllerUnlocked
            where waveStepControllerUnlocked.WaveId == _waveId
        {
            numOfUnlockRecords++;
        }

        ttsCommit;

        return numOfUnlockRecords < waveStepControllerCount.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnlockedRecordByWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Trys to select an unlocked <c>WHSWaveStepController</c> records that is older than 10 second.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The inventLocationId of the warehouse that the control record was created for.
    /// </param>
    /// <returns>
    /// A <c>WHSWaveStepController</c> record if found; otherwise, null.
    /// </returns>
    public static WHSWaveStepController findUnlockedRecordByWarehouse(InventLocationId _inventLocationId)
    {
        WHSWaveStepController waveStepController;
        
        // the toggle is disabled by default. In case of blockings on WHSWaveStepController on delete operations by RecId please enable the toggle to mitigate blocking and improve performance
                 
        waveStepController = WHSWaveStepController::doFindUnlockedRecordByWarehouseAndLockOnRecId(_inventLocationId);

        return waveStepController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doFindUnlockedRecordByWarehouse</Name>
				<Source><![CDATA[
    private static WHSWaveStepController doFindUnlockedRecordByWarehouse(InventLocationId _inventLocationId)
    {
        WHSWaveStepController waveStepController;

        waveStepController.readPast(true);

        // Try to lock control records created more than 10 seconds ago
        select firstOnly pessimisticLock waveStepController
            where waveStepController.InventLocationId == _inventLocationId
                && waveStepController.createdDateTime < DateTimeUtil::addSeconds(DateTimeUtil::getSystemDateTime(), -10);

        return waveStepController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doFindUnlockedRecordByWarehouseAndLockOnRecId</Name>
				<Source><![CDATA[
    private static WHSWaveStepController doFindUnlockedRecordByWarehouseAndLockOnRecId(InventLocationId _inventLocationId)
    {
        WHSWaveStepController waveStepController;
        WHSWaveStepController lockedWaveStepController;

        // Try to lock control records created more than 10 seconds ago.
        // However instead for pessimistically selecting a record doing read past and locking it on the WarehouseCreatedDateTimeIdx 
        // index (which can place U locks on records that are already locked), here we explicitly iterating over the records trying 
        // to lock the record on the RecId index to ensure that the record was indeed unlocked and avoid potential blockings.
        while select waveStepController
            order by waveStepController.CreatedDateTime asc
            where waveStepController.InventLocationId == _inventLocationId
                && waveStepController.createdDateTime < DateTimeUtil::addSeconds(DateTimeUtil::getSystemDateTime(), -10)
        {
            lockedWaveStepController = WHSWaveStepController::tryLockControlRecord(waveStepController.RecId);

            if (lockedWaveStepController.RecId)
            {
                return lockedWaveStepController;
            }
        }

        return lockedWaveStepController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnlockedRecordByWaveId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Trys to select an unlocked <c>WHSWaveStepController</c> records that is older than 10 second.
    /// </summary>
    /// <param name="_waveId">
    /// The wave Id of the wave that the control record was created for.
    /// </param>
    /// <returns>
    /// A <c>WHSWaveStepController</c> record if found; otherwise, empty record.
    /// </returns>
    public static WHSWaveStepController findUnlockedRecordByWaveId(WHSWaveId _waveId)
    {
        WHSWaveStepController       waveStepController;

        waveStepController.readPast(true);

        // Try to lock control records created more than 10 seconds ago
        select firstOnly pessimisticLock waveStepController
            where waveStepController.WaveId             == _waveId
            &&    waveStepController.createdDateTime    < DateTimeUtil::addSeconds(DateTimeUtil::getSystemDateTime(), -10);

        return waveStepController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnlockedRecordByWaveIdWithNoDelay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Trys to select an unlocked <c>WHSWaveStepController</c> records regardles of when they have been created.
    /// </summary>
    /// <param name="_waveId">
    /// The wave Id of the wave that the control record was created for.
    /// </param>
    /// <returns>
    /// A <c>WHSWaveStepController</c> record if found; otherwise, empty record.
    /// </returns>
    internal static WHSWaveStepController findUnlockedRecordByWaveIdWithNoDelay(WHSWaveId _waveId)
    {
        WHSWaveStepController       waveStepController;

        waveStepController.readPast(true);

        // Try to lock control records regardles of when they have been created
        select firstOnly pessimisticLock waveStepController
            where waveStepController.WaveId == _waveId;

        return waveStepController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockControlRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>WHSWaveStepController</c> record with a pessimistic lock.
    /// </summary>
    /// <param name="_recId">
    /// The RecId of the <c>WHSWaveStepController</c> record to be locked.
    /// </param>
    /// <param name="_lockUserConn">
    /// The User connection used to lock the control record if provided, optional.
    /// </param>
    /// <returns>
    /// The locked <c>WHSWaveStepController</c> record.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An error is thrown if the record could not be selected with a pessimistic lock.
    /// </exception>
    public static WHSWaveStepController lockControlRecord(
        RecId           _recId,
        UserConnection  _lockUserConn = null)
    {
        WHSWaveStepController   lockedWaveStepController;

        if (_lockUserConn)
        {
            lockedWaveStepController.setConnection(_lockUserConn);
        }

        lockedWaveStepController.readPast(true);

        select firstonly pessimisticLock lockedWaveStepController
            where lockedWaveStepController.RecId == _recId;

        if (!lockedWaveStepController.RecId)
        {
            // If we didn't get a lock on the control record then we must error.
            throw error("@WAX:WaveControlRecordLockError");
        }

        return lockedWaveStepController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryLockControlRecord</Name>
				<Source><![CDATA[
    private static WHSWaveStepController tryLockControlRecord(RecId _recId)
    {
        WHSWaveStepController lockedWaveStepController;

        lockedWaveStepController.readPast(true);

        select firstonly pessimisticLock lockedWaveStepController
            where lockedWaveStepController.RecId == _recId;

        return lockedWaveStepController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WaveStepControllerDeveloperDocumentation</DeveloperDocumentation>
	<Label>@WAX:WaveStepControllerLabel</Label>
	<TitleField1>WaveId</TitleField1>
	<TitleField2>PostMethodName</TitleField2>
	<ClusteredIndex>WaveIdWaveExecutionIdRecIdIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>Inventory</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostMethodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveExecutionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostMethodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveExecutionID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostMethodName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPostMethodName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WaveExecutionID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWaveExecutionID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WaveId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWaveId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WarehouseCreatedDateTimeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>createdDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WaveIdWaveExecutionIdRecIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>WaveId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WaveExecutionID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSWaveTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSWaveTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WaveId</Name>
					<SourceEDT>WHSWaveId</SourceEDT>
					<Field>WaveId</Field>
					<RelatedField>WaveId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>