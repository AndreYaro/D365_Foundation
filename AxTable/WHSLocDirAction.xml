<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocDirAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSLocDirAction extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEditQueryForPreview</Name>
				<Source><![CDATA[
    internal static Query processEditQueryForPreview(Query _query, Common _buffer)
    {
        WHSLocDirAction locDirAction = _buffer as WHSLocDirAction;

        if (locDirAction)
        {
            WHSLocDirTable locDirTable = WHSLocDirTable::findByRecId(WHSLocDirLine::findByRecId(locDirAction.RefRecId).RefRecId);

            if (locDirTable.WarehouseGroupAll == WhsWarehouseGroupAll::Group)
            {
                QueryBuildDataSource wmsLocationDS = _query.dataSourceTable(tableNum(WMSLocation));
                if (wmsLocationDS)
                {
                    QueryBuildDataSource warehouseDS = wmsLocationDS.addDataSource(tableNum(WhsWarehouseGroupLink));
                    warehouseDS.addLink(fieldNum(WMSLocation, InventLocationId), fieldNum(WhsWarehouseGroupLink, InventLocationId));
                    warehouseDS.addRange(fieldNum(WhsWarehouseGroupLink, WarehouseGroupId)).value(locDirTable.WarehouseGroupId);
                }
            }
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustQueryForWarehouse</Name>
				<Source><![CDATA[
    internal void adjustQueryForWarehouse(InventLocationId _inventLocationId)
    {
        QueryRun queryRun = new QueryRun(this.LocDirQuery);
        var qdbs = queryRun.query().dataSourceTable(tableNum(WMSLocation));
        SysQuery::findOrCreateRange(qdbs, fieldNum(WMSLocation, InventLocationId)).value(_inventLocationId);
        this.LocDirQuery = queryRun.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustQueryForNegative</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates internal query if negative inventory onhand is allowed.
    /// </summary>
    void adjustQueryForNegative()
    {
        Query query = new Query(this.LocDirQuery);
        query = this.adjustProvidedQueryForNegative(query);

        this.LocDirQuery = query.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustProvidedQueryForNegative</Name>
				<Source><![CDATA[
    private Query adjustProvidedQueryForNegative(Query _query)
    {
        var qbds = _query.dataSourceTable(tableNum(InventSum));
        if (qbds)
        {
            SysQuery::findOrCreateRange(qbds, fieldNum(InventSum, PhysicalInvent)).value(this.AllowNegative ? '' : '>0');
            QueryBuildRange qbr = SysQuery::findOrCreateRange(qbds, fieldNum(InventSum, ClosedQty));
            
            qbr.status(RangeStatus::Locked);
            qbr.value(this.AllowNegative ? SysQuery::valueUnlimited() : queryValue(NoYes::No));
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastActionWithinSameBatchEnabledState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current action is the last action for a location directive line with the same batch enabled state.
    /// </summary>
    /// <returns>
    /// true if action is last; otherwise, false
    /// </returns>
    public boolean isLastActionWithinSameBatchEnabledState()
    {
        return (select firstonly RecId from WHSLocDirAction
                    order by LocSeqNum desc
                    where WHSLocDirAction.RefRecId		== this.RefRecId
                    &&    WHSLocDirAction.LocSeqNum		 > this.LocSeqNum
                    &&	  WHSLocDirAction.BatchEnabled  == this.BatchEnabled).RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLocationQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the location directives query.
    /// </summary>
    /// <param name="_refRecId">
    /// Id of the location directive record.
    /// </param>
    void initLocationQuery(RefRecId _refRecId = 0)
    {
        this.LocDirQuery = this.defaultLocationQueryRun(_refRecId).pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLocationQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default query run.
    /// </summary>
    /// <param name = "_refRecId">Id of the location directive record.</param>
    /// <param name = "_useInventoryDimensionOfInventSum">Should the query be based on the inventory dimension fields of <c>InventSum</c> table</param>
    /// <returns>The default query run.</returns>
    [Hookable(false)]
    internal QueryRun defaultLocationQueryRun(
        RefRecId _refRecId = 0,
        boolean _useInventoryDimensionOfInventSum = WHSLocDirAction::useInventoryDimensionOfInventSum())
    {
        QueryRun            queryRun;
        RefRecId            refRecId;

        if (_refRecId != 0)
        {
            refRecId = _refRecId;
        }
        else
        {
            refRecId = WHSLocDirLine::findByRecId(this.RefRecId).RefRecId;
        }

        WHSLocDirTable locDirTable = WhsLocDirTable::findByRecId(refRecId);
        if (locDirTable.MultiSKU)
        {
            queryRun = new QueryRun(queryStr(WHSLocDirAction));
        }
        else
        {
            if (locDirTable.WorkType == WHSWorkType::Pick)
            {
                queryRun = this.defaultPickLocationQueryRun(_useInventoryDimensionOfInventSum);
            }
            else
            {
                queryRun = this.defaultPutLocationQueryRun();
            }
        }

        if (locDirTable.InventLocationId)        
        {
            var qdbs = queryRun.query().dataSourceTable(tableNum(WMSLocation));
            if (qdbs)
            {
                SysQuery::findOrCreateRange(qdbs, fieldNum(WMSLocation, InventLocationId)).value(locDirTable.InventLocationId);
            }
        }
        else
        {
            queryRun.query().dataSourceTable(tableNum(WMSLocation)).findRange(fieldNum(WMSLocation, InventLocationId)).value(locDirTable.InventLocationId);
        }

        queryRun.name(strfmt('%1|%2', this.RefRecId, this.RecId));

        this.adjustProvidedQueryForNegative(queryRun.query());

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPickLocationQueryRun</Name>
				<Source><![CDATA[
    private QueryRun defaultPickLocationQueryRun(boolean _useInventoryDimensionOfInventSum)
    {
        QueryRun queryRun;

        if (!this.BatchEnabled)
        {
            if (_useInventoryDimensionOfInventSum)
            {
                queryRun = new QueryRun(queryStr(WHSLocDirActionPickWithInventDim));
            }
            else
            {
                queryRun = new QueryRun(queryStr(WHSLocDirActionPick));
            }
        }
        else
        {
            if (_useInventoryDimensionOfInventSum)
            {
                queryRun = new QueryRun(queryStr(WHSLocDirActionPickBatchWithInventDim));
            }
            else
            {
                queryRun = new QueryRun(queryStr(WHSLocDirActionPickBatch));
            }
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPutLocationQueryRun</Name>
				<Source><![CDATA[
    private QueryRun defaultPutLocationQueryRun()
    {
        QueryRun queryRun;

        if (!this.BatchEnabled)
        {
            queryRun = new QueryRun(queryStr(WHSLocDirActionPut));
        }
        else
        {
            queryRun = new QueryRun(queryStr(WHSLocDirActionPutBatch));
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WHSLocDirAction, BatchEnabled):
                this.initLocationQuery();
                break;
            case fieldNum(WHSLocDirAction, AllowNegative):
                this.adjustQueryForNegative();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean             ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(WHSLocDirAction, BatchEnabled):
                    ret = this.validateBatchEnabled();
                    break;

                case fieldNum(WHSLocDirAction, LocDirStrategy):
                    ret = this.validateLocationDirectiveStrategy();
                    break;

                case fieldNum(WHSLocDirAction, UseInventFixedLocation):
                    ret = this.validateUseInventFixedLocation();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the Batch enabled is allowed for the current configuration
    /// </summary>
    /// <returns>
    /// true if the Batch enabled is allowed for the current configuration; otherwise, false
    /// </returns>
    private boolean validateBatchEnabled()
    {
        boolean ret = true;

        if (this.BatchEnabled == NoYes::Yes)
        {
            WHSLocDirTable  locDirTable;
            WHSLocDirLine   locDirLine;

            select firstonly MultiSKU from locDirTable
                exists join locDirLine
                where locDirLine.RefRecId   == locDirTable.RecId
                &&    locDirLine.RecId      == this.RefRecId;

            if (locDirTable.MultiSKU == NoYes::Yes)
            {
                ret = checkFailed("@WAX:DisableMultipleSKUBeforeSettingBatchEnabledToYes");
            }
        }
        else
        {
            if (this.LocDirStrategy == WHSLocDirStrategy::FEFOBatch ||
                this.LocDirStrategy == WHSLocDirStrategy::LPLocateAndFEFOBatch)
            {
                ret = checkFailed("@WAX4152");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocationDirectiveStrategy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the location directive strategy is allowed for the current configuration
    /// </summary>
    /// <returns>
    /// true if the selected strategy is allowed for the current configuration; otherwise, false
    /// </returns>
    public boolean validateLocationDirectiveStrategy()
    {
        boolean         ret = true;
        WHSLocDirTable  locDirTable;
        WHSLocDirLine   locDirLine;

        select firstonly WorkTransType, LocateBy from locDirTable
            join RefRecId, RecId, AllowSplit from locDirLine
            where locDirLine.RefRecId   == locDirTable.RecId &&
                  locDirLine.RecId      == this.RefRecId;

        if (locDirTable.LocateBy != WHSLocDirLocateBy::Standard
        &&  this.LocDirStrategy  != WHSLocDirStrategy::None
        &&  this.LocDirStrategy  != WHSLocDirStrategy::UnallocatedLocation)
        {
            ret = checkFailed(strFmt("@WAX:LocateByStrategyError", this.LocDirStrategy, locDirTable.LocateBy));
        }

        var strategy = WhsLocationDirectiveStrategy::singletonFromStrategy(this.LocDirStrategy);
        if (strategy)
        {
            ret = strategy.validate(locDirTable, locDirLine, this);
        }    
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUseInventFixedLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the location directive strategy is allowed for the current configuration
    /// </summary>
    /// <returns>
    /// True if the selected strategy is allowed for the current configuration; otherwise, false
    /// </returns>
    public boolean validateUseInventFixedLocation()
    {
        WHSLocDirTable  locDirTable;
        WHSLocDirLine   locDirLine;
        boolean         ret = true;

        select firstonly LocateBy from locDirTable
            exists join locDirLine
            where locDirLine.RefRecId   == locDirTable.RecId
            &&    locDirLine.RecId      == this.RefRecId;

        if (locDirTable.LocateBy        != WHSLocDirLocateBy::Standard
        &&  this.UseInventFixedLocation != WHSUseFixedLocations::Any)
        {
            ret = checkFailed(strFmt("@WAX:LocateByFixedLocationError", this.UseInventFixedLocation, locDirTable.LocateBy));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLPLocateStrategyForReplenishmentLocationDirective</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if location directive for replenishment pick with action strategy "Round up to the full LP and FEFO batch" or "Round up to the full LP" exists.
    /// </summary>
    /// <param name = "_inventLocationId">The inventory location Id.</param>
    /// <returns>true if <c>WHSLocDirAction</c> record exists; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean existLPLocateStrategyForReplenishmentLocationDirective(InventLocationId  _inventLocationId)
    {
        WHSLocDirTable  locDirTable;
        WHSLocDirLine   locDirLine;
        WHSLocDirAction locDirAction;

        if (_inventLocationId)
        {
            select firstonly RecId from locDirTable
                where locDirTable.WorkTransType         == WHSWorkTransType::Replenishment
                    && locDirTable.WorkType             == WHSWorkType::Pick
                    && locDirTable.InventLocationId     == _inventLocationId
                exists join locDirLine
                    where locDirLine.RefRecId           == locDirTable.RecId
                exists join locDirAction
                    where locDirLine.RecId              == locDirAction.RefRecId
                        && (locDirAction.LocDirStrategy     == WHSLocDirStrategy::LPLocate
                            || locDirAction.LocDirStrategy  == WHSLocDirStrategy::LPLocateAndFEFOBatch);

            return (locDirTable.RecId != 0);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a specific <c>whsLocDirAction</c> record exists.
    /// </summary>
    /// <param name="_locDirName">
    /// Location directive name of the record.
    /// </param>
    /// <param name="_refRecId">
    /// Referenced location directive record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(WHSLocDirName   _locDirName,
                                RefRecId        _refRecId)
    {
        return (_locDirName && _refRecId) &&
               (select firstonly RecId from whsLocDirAction
                where whsLocDirAction.LocDirName    == _locDirName &&
                      whsLocDirAction.RefRecId      == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSLocDirAction</c> record with given parameters.
    /// </summary>
    /// <param name="_locDirName">
    /// Location directive name of the record.
    /// </param>
    /// <param name="_refRecId">
    /// Id of the referenced location directive record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSLocDirAction find(WHSLocDirName _locDirName,
                                       RefRecId      _refRecId,
                                       boolean       _forupdate = false)
    {
        WHSLocDirAction    locDirAction;

        if (_locDirName &&
            _refRecId)
        {
            locDirAction.selectForUpdate(_forupdate);

            select firstonly locDirAction
                where locDirAction.LocDirName == _locDirName &&
                      locDirAction.RefRecId == _refRecId;
        }

        return locDirAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSLocDirAction</c> record by id.
    /// </summary>
    /// <param name="_refRecId">
    /// Id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSLocDirAction findByRecId(RefRecId _refRecId, boolean _forupdate = false)
    {
        WHSLocDirAction locDirAction;

        if (_refRecId)
        {
            locDirAction.selectForUpdate(_forupdate);

            select firstonly locDirAction
                where locDirAction.RecId == _refRecId;
        }

        return locDirAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canOptimizeQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean canOptimizeQuery(WHSWorkType _workType)
    {
        if (this.UseDimOfInventSum == WHSLocDirActionQueryUseDimOfInventSum::Unknown
            && _workType == WHSWorkType::Pick
            && WHSLocDirAction::useInventoryDimensionOfInventSum())
        {
            Query query = new QueryRun(this.LocDirQuery).query();

            if (!WHSLocDirAction::useInventoryDimensionOfInventSumQuery(query))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useInventoryDimensionOfInventSum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean useInventoryDimensionOfInventSum()
    {
        return InventUseDimOfInventSumToggle::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useInventoryDimensionOfInventSumQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inventory dimension on <c>InventSum</c> table should be used.
    /// </summary>
    /// <param name = "_query">The location directive query object.</param>
    /// <returns>true if the inventory dimension on <c>InventSum</c> table should be used; otherwise false.</returns>
    [Hookable(false)]
    internal static boolean useInventoryDimensionOfInventSumQuery(Query _query)
    {
        if (WHSLocDirAction::useInventoryDimensionOfInventSum())
        {
            const int InventSumDataSourceNumberOnLocationDirectiveQueries = 2;

            Debug::assert(_query != null);

            return (_query.dataSourceCount() > 1) &&
                (_query.dataSourceNo(InventSumDataSourceNumberOnLocationDirectiveQueries).table() == tableNum(InventSum));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryContainsInventDimDataSource</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean queryContainsInventDimDataSource(Query _query)
    {
        Debug::assert(_query != null);

        return _query.dataSourceTable(tableNum(InventDim)) != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryContainsInventDimDataSourceAndInventDimData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether query contains InventDim data source and if it does,
    /// if it is possible to retrive InventDim data from it.
    /// It is not possible to get the data from the query, if the source is linked by ExistsJoin or NoExistsJoin.
    /// </summary>
    /// <param name = "_query">The query under check.</param>
    /// <returns>True, if InventDim data can be retrieved from the query, false otherwise.</returns>
    [Hookable(false)]
    internal static boolean queryContainsInventDimDataSourceAndInventDimData(Query _query)
    {
        QueryBuildDataSource inventDimDataSource = _query.dataSourceTable(tableNum(InventDim));

        if (inventDimDataSource == null || !inventDimDataSource.enabled())
        {
            return false;
        }

        int     joinMode                = inventDimDataSource.joinMode();
        boolean inventDimDataAvailable  = joinMode != JoinMode::ExistsJoin && joinMode != JoinMode::NoExistsJoin;

        return inventDimDataAvailable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveConvertedLocationDirectiveActionQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void saveConvertedLocationDirectiveActionQuery(WHSLocDirAction _locationDirectiveAction, Query _convertedQuery)
    {
        ttsbegin;
        WHSLocDirAction locationDirectiveAction = WHSLocDirAction::findByRecId(_locationDirectiveAction.RecId, true);

        locationDirectiveAction.LocDirQueryV1 = locationDirectiveAction.LocDirQuery;
        locationDirectiveAction.UseDimOfInventSum = WHSLocDirActionQueryUseDimOfInventSum::Converted;
        locationDirectiveAction.LocDirQuery = new QueryRun(_convertedQuery).pack();
        locationDirectiveAction.update();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4404</DeveloperDocumentation>
	<FormRef>WHSlocDirTable</FormRef>
	<Label>@WAX400</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>LocSeqNum</TitleField1>
	<TitleField2>LocDirName</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>LocDirSeqNumIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>LocDirNameRefRecIdIdx</PrimaryIndex>
	<ReplacementKey>LocDirNameRefRecIdIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LocSeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocDirQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocDirName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseInventFixedLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocDirStrategy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowNegative</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LocDirName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LocSeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocDirQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocDirName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseInventFixedLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocDirStrategy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowNegative</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowNegative</Name>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>WHSAllowNegative</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BatchEnabled</Name>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>WHSBatchEnabled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LocDirName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocDirName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>LocDirQuery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocDirQuery</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LocDirStrategy</Name>
			<AssetClassification>OII</AssetClassification>
			<EnumType>WHSLocDirStrategy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LocSeqNum</Name>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>WHSLocSeqNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseInventFixedLocation</Name>
			<AssetClassification>OII</AssetClassification>
			<EnumType>WHSUseFixedLocations</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseDimOfInventSum</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
			<EnumType>WHSLocDirActionQueryUseDimOfInventSum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>LocDirQueryV1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocDirQuery</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LocDirNameRefRecIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LocDirName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LocDirSeqNumIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>LocSeqNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LocDirName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefRecIdLocSeqNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LocSeqNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSLocDirLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSLocDirLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>