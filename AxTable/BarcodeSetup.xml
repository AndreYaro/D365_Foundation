<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BarcodeSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BarcodeSetup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>barcode</Name>
				<Source><![CDATA[
    public Barcode barcode()
    {
        return Barcode::construct(this.BarcodeType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFontName</Name>
				<Source><![CDATA[
    public void lookupFontName(FormStringControl ctrl)
    {
        this.barcode().lookupFontName(ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>errorOnRename</c> method of the <c>RetailConnActionManagement</c> class.
    /// </summary>
    public void renamePrimaryKey()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            RetailConnActionManagement::errorOnRename(this);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBarcode</Name>
				<Source><![CDATA[
    public boolean validateBarcode(BarCodeString barCodeString)
    {
        boolean ret = true;

        if (!this.RecId)
        {
            return true;
        }

        if (!this.validateLength(barCodeString))
        {
            ret = false;
        }

        if (!this.barcode().validateBarcode(barCodeString))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (fieldExt2Id(_fieldIdToCheck))
        {
            case fieldnum(BarcodeSetup, RetailBarcodeMask):
                if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
                    && !this.validateMask(this.RetailBarcodeMask))
                {
                    ret = false;
                }
                break;
            case fieldnum(BarcodeSetup, MinimumLength):
                ret = ret && this.validateMinimumLength();
                break;
            case fieldnum(BarcodeSetup, MaximumLength):
                ret = ret && this.validateMaximumLength();
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLength</Name>
				<Source><![CDATA[
    public boolean validateLength(str barcode)
    {
        boolean ret = true;
        int     len = strLen(barcode);

        if (!this.RecId)
        {
            return true;
        }

        if (this.MinimumLength  == this.MaximumLength   &&
            len                 != this.MinimumLength)
        {
            ret = checkFailed(strFmt("@SYS63154", this.MinimumLength, barcode, len));
        }
        else
        {
            if (len < this.MinimumLength)
            {
                ret = checkFailed(strFmt("@SYS63072", this.MinimumLength, barcode, len));
            }

            if (len > this.MaximumLength)
            {
                ret = checkFailed(strFmt("@SYS63074", this.MaximumLength, barcode, len));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the length of bar code.
    /// </summary>
    /// <param name="_mask">
    /// The value of the bar code mask.
    /// </param>
    /// <returns>
    /// false if the length of bar code is less than minimum length or larger than maximum length;
    /// otherwise true.
    /// </returns>
    public boolean validateMask(RetailBarcodeMask _mask)
    {
        boolean ret = this.validateMaskCurrentCompany(_mask);

        ret = ret && this.validateMaskCrossCompany(_mask);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMaskCurrentCompany</Name>
				<Source><![CDATA[
    private boolean validateMaskCurrentCompany(RetailBarcodeMask _mask)
    {
        boolean ret = true;

        // minimum length = 0 & max length = 0 denotes variable length barcode so bypass check.
        if ((this.minimumLength != 0) && (this.maximumLength != 0))
        {
            real len = RetailBarcodeMaskTable::findMask(_mask,RetailBarcodeMaskTypeBase::Item).Length();

            if (len < this.minimumLength)
            {
                ret = checkFailed(strfmt("@SYS63072", this.minimumLength, _mask, len));
            }

            if (len > this.maximumLength)
            {
                ret = checkFailed(strfmt("@SYS63074", this.maximumLength, _mask, len));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMaskCrossCompany</Name>
				<Source><![CDATA[
    private boolean validateMaskCrossCompany(RetailBarcodeMask _mask)
    {
        boolean ret = true;

        SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
        if (policy.RecId && policy.IsEnabled)
        {
            Query    query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this.orig(), policy.RecId);
            QueryRun queryRun = new QueryRun(query);
        
            while (queryRun.Next())
            {
                BarcodeSetup companyBarcodeSetup = queryRun.get(this.TableId);
                DataAreaId company = companyBarcodeSetup.DataAreaId;
                if (companyBarcodeSetup && company && company != curExt())
                {
                    changecompany(company)
                    {
                        if (!SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(company, tableStr(RetailBarcodeMaskTable)))
                        {
                            BarcodeSetup barcodeSetup = BarcodeSetup::find(companyBarcodeSetup.barcodeSetupId);

                            if (barcodeSetup.RecId && !barcodeSetup.validateMaskCurrentCompany(_mask))
                            {
                                return false;
                            }
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (this.MinimumLength > this.MaximumLength)
        {
            ret = checkFailed("@SYS63064");
        }

        if (this.BarcodeType == BarcodeType::NoBarcode)
        {
            if (this.FontName)
            {
                ret = checkFailed(strFmt("@SYS63045", this.FontName, this.BarcodeType));
            }
        }
        else
        {
            if (!this.barcode().validateFontName(this.FontName))
            {
                ret = checkFailed(strFmt("@SYS63045", this.FontName, this.BarcodeType));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>variableLength</Name>
				<Source><![CDATA[
    public boolean variableLength()
    {
        return this.barcode().hasFixedLength() == false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static BarcodeSetup find(BarcodeSetupId barcodeSetupId, boolean _forUpdate = false)
    {
        BarcodeSetup barcodeSetup;

        if (!barcodeSetupId)
        {
            return barcodeSetup;
        }

        barcodeSetup.selectForUpdate(_forUpdate);

        select barcodeSetup
            index hint BarcodeSetupIdx
            where barcodeSetup.BarcodeSetupId == barcodeSetupId;

        return barcodeSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOfBarcodeTypesToString</Name>
				<Source><![CDATA[
    static private str setOfBarcodeTypesToString(Set _barcodeTypes)
    {
        str result = '';
        var enum = _barcodeTypes.getEnumerator();
        while (enum.moveNext())
        {
            if (result)
            {
                result += ', ';
            }
            BarcodeType barcodeType = enum.current();
            result += enum2Str(barcodeType);
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validAssetLabelBarcodeTypes</Name>
				<Source><![CDATA[
    private static str validAssetLabelBarcodeTypes()
    {
        Set validTypes = new Set(Types::Enum);
        DictEnum dictEnum = new DictEnum(enumNum(BarcodeType));
        Enumerator enum = dictEnum.getEnumerator();

        while (enum.moveNext())
        {
            BarcodeType barcodeType = enum.current();
            Barcode barcode = Barcode::constructNoThrow(barcodeType);

            if (barcode &&
                barcode.isValidAssetLabelBarcodeType())
            {
                validTypes.add(barcodeType);
            }
        }

        return BarcodeSetup::setOfBarcodeTypesToString(validTypes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssetLabel</Name>
				<Source><![CDATA[
    public static boolean validateAssetLabel(BarcodeSetupId barcodeSetupId)
    {
        boolean         ret = true;
        BarcodeSetup    barcodeSetup = BarcodeSetup::find(barcodeSetupId);

        if (barcodeSetup)
        {
            if (!Barcode::construct(barcodeSetup.barcodeType).isValidAssetLabelBarcodeType())
            {
                ret = checkFailed(strFmt("@SYS63047", BarcodeSetup::validAssetLabelBarcodeTypes()));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validLocationLabelBarcodeTypes</Name>
				<Source><![CDATA[
    private static str validLocationLabelBarcodeTypes()
    {
        Set validTypes = new Set(Types::Enum);
        
        DictEnum dictEnum = DictEnum::newFromName(enumStr(BarcodeType));
        Enumerator enum = dictEnum.getEnumerator();

        while (enum.moveNext())
        {
            BarcodeType barcodeType = enum.current();
            Barcode barcode = Barcode::constructNoThrow(barcodeType);

            if (barcode &&
                barcode.isValidLocationLabelBarcodeType())
            {
                validTypes.add(barcodeType);
            }
        }

        return BarcodeSetup::setOfBarcodeTypesToString(validTypes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocationLabel</Name>
				<Source><![CDATA[
    public static boolean validateLocationLabel(BarcodeSetupId barcodeSetupId)
    {
        boolean         ret = true;
        BarcodeSetup    barcodeSetup = BarcodeSetup::find(barcodeSetupId);

        if (barcodeSetup)
        {
            if (!Barcode::construct(barcodeSetup.barcodeType).isValidLocationLabelBarcodeType())
            {
                ret = checkFailed(strFmt("@SYS63047", BarcodeSetup::validLocationLabelBarcodeTypes()));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldnum(BarcodeSetup, MinimumLength), [fieldnum(BarcodeSetup, BarcodeType)]],
            [fieldnum(BarcodeSetup, MaximumLength), [fieldnum(BarcodeSetup, BarcodeType)]],
            [fieldnum(BarcodeSetup, FontName),      [fieldnum(BarcodeSetup, BarcodeType)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(BarcodeSetup, MinimumLength):
                this.defaultMinimumLength();
                break;
            case fieldNum(BarcodeSetup, MaximumLength):
                this.defaultMaximumLength();
                break;
            case fieldNum(BarcodeSetup, FontName):
                this.defaultFontName();
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMinimumLength</Name>
				<Source><![CDATA[
    private void defaultMinimumLength()
    {
        this.minimumLength = this.getMinimumLengthForBarcodeType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMaximumLength</Name>
				<Source><![CDATA[
    private void defaultMaximumLength()
    {
        this.maximumLength = this.getMaximumLengthForBarcodeType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFontName</Name>
				<Source><![CDATA[
    private void defaultFontName()
    {
        Barcode barcode = this.barcode();

        if (this.FontName && !barcode.validateFontName(this.FontName))
        {
            this.FontName = '';
        }

        if (!this.FontName)
        {
            this.FontName = barcode.defaultFont();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMinimumLength</Name>
				<Source><![CDATA[
    private boolean validateMinimumLength()
    {
        boolean         ret         = true;
        MinimumLength   minLength   = this.getMinimumLengthForBarcodeType();

        if (minLength && this.minimumLength != minLength)
        {
            ret = checkFailed(strFmt("@SCM:BarcodeSetupMinimumLengthNonEqualError", this.barcodeType, minLength));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMaximumLength</Name>
				<Source><![CDATA[
    private boolean validateMaximumLength()
    {
        boolean         ret         = true;
        MaximumLength   maxLength   = this.getMaximumLengthForBarcodeType();

        if (maxLength && this.minimumLength != maxLength)
        {
            ret = checkFailed(strFmt("@SCM:BarcodeSetupMaximumLengthNonEqualError", this.barcodeType, maxLength));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaximumLengthForBarcodeType</Name>
				<Source><![CDATA[
    private MaximumLength getMaximumLengthForBarcodeType()
    {
        return this.barcode().fixedLength();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinimumLengthForBarcodeType</Name>
				<Source><![CDATA[
    private MaximumLength getMinimumLengthForBarcodeType()
    {
        return this.barcode().fixedLength();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        EcoResProductEntityIdentifierCode::updateBarcodeSetupCode(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductEntityIdentifierCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>EcoResProductEntityIdentifierCode</c> record which is related to the current record.
    /// </summary>
    /// <returns>The created <c>EcoResProductEntityIdentifierCode</c> record.</returns>
    public EcoResProductEntityIdentifierCode createProductEntityIdentifierCode()
    {
        return EcoResProductEntityIdentifierCode::create(
                                            this.barcodeSetupId,
                                            EcoResProductEntityIdentifierCodeType::Barcode,
                                            enum2Value(this.barcodeType),
                                            this.description,
                                            0,
                                            this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();

        RetailAttributesLegalEntityLookup retailAttributesLegalEntityLookup;

        select firstonly retailAttributesLegalEntityLookup
            where retailAttributesLegalEntityLookup.BarcodeSetup == this.BarcodeSetupId
                && retailAttributesLegalEntityLookup.LegalEntity == CompanyInfo::current();

        if (retailAttributesLegalEntityLookup)
        {
            return checkFailed(strfmt(("@Retail:RetailAttributesLegalEntityLookupPropertiesDeleteValidation"), this.BarcodeSetupId, EcoResCategory::find(retailAttributesLegalEntityLookup.Category).Name));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUnsupportedMaskSegmentExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if barcode mask has unsupported segment.
    /// </summary>
    /// <param name = "_barcodeSetupId">The Barcode setup id.</param>
    /// <returns>True if Mask has unsupported segment, otherwise false.</returns>
    public static boolean isUnsupportedMaskSegmentExists(BarcodeSetupId _barcodeSetupId)
    {
        boolean ret;
        BarcodeSetup barcodeSetup;
        RetailBarcodeMaskTable barcodeMaskTable;
        RetailBarcodeMaskSegment barcodeMaskSegment;

        select firstonly barcodeMaskSegment
            where (barcodeMaskSegment.Type == RetailBarcodeMaskCharacterTypeBase::AnyNumber
                || barcodeMaskSegment.Type == RetailBarcodeMaskCharacterTypeBase::DiscountCode
                || barcodeMaskSegment.Type == RetailBarcodeMaskCharacterTypeBase::Employee
                || barcodeMaskSegment.Type == RetailBarcodeMaskCharacterTypeBase::DataEntry
                || barcodeMaskSegment.Type == RetailBarcodeMaskCharacterTypeBase::GiftCard
                || barcodeMaskSegment.Type == RetailBarcodeMaskCharacterTypeBase::CouponCode)
            exists join barcodeMaskTable
                where barcodeMaskTable.maskId == barcodeMaskSegment.maskId
            exists join barcodeSetup
                where barcodeSetup.RetailBarcodeMask == barcodeMaskTable.Mask
                    && barcodeSetup.barcodeSetupId == _barcodeSetupId;

        if (barcodeMaskSegment.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS123976</DeveloperDocumentation>
	<Label>@SYS63041</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>barcodeSetupId</TitleField1>
	<TitleField2>barcodeType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>BarcodeSetupIdx</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>BarcodeSetupIdx</PrimaryIndex>
	<ReplacementKey>BarcodeSetupIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventItemBarcode</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventItemBarcode</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResProductEntityIdentifierCode</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>barcodeSetupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>barcodeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>barcodeSetupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>barcodeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>fontSize</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailBarcodeMask</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>barcodeSetupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BarcodeCategory</Name>
			<Label>@SYS63043</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>barcodeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailBarcodeMask</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>fontName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>fontSize</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>barcodeSetupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Lengths</Name>
			<Label>@SYS63062</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>minimumLength</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>maximumLength</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>barcodeSetupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BarcodeSetupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>barcodeType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BarcodeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>fontName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FontName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>fontSize</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FontSize</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>maximumLength</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MaximumLength</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>minimumLength</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MinimumLength</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailBarcodeMask</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBarcodeMask</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BarcodeSetupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>barcodeSetupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>RetailBarcodeMaskTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailBarcodeMaskTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailBarcodeMask</Name>
					<SourceEDT>RetailBarcodeMask</SourceEDT>
					<Field>RetailBarcodeMask</Field>
					<RelatedField>Mask</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>