<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInterestRange</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInterestRange extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLastFromValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the next <c>FromValue</c> field of range to initialize a new record.
    /// </summary>
    /// <param name="_custInterestFeeRecId">
    ///    The record ID of the record with the range to initialize.
    /// </param>
    /// <param name="_currencyCode">
    ///    The currency code with the range to initialize.
    /// </param>
    /// <returns>
    ///    The next value of the <c>FromValue</c> field.
    /// </returns>
    public CustInterestFromValue getLastFromValue(CustInterestFeeRecId _custInterestFeeRecId, CustCurrencyCode _currencyCode)
    {
        CustInterestRange custInterestRange;
        CustInterestFromValue nextFromValue;

        select firstonly FromValue, RecId from custInterestRange
            order by FromValue desc where custInterestRange.CustInterestFee == _custInterestFeeRecId &&
                custInterestRange.CurrencyCode == _currencyCode;

        nextFromValue = (custInterestRange.RecId == 0 ? 0 : custInterestRange.FromValue);

        return nextFromValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the ledger account exists for interest payments and earnings if an interest rate is
    ///    defined.
    /// </summary>
    public boolean validateAccount()
    {
        CustInterestFee custInterestFee = CustInterestFee::find(this.CustInterestFee);
        CustInterestVersionDetail custInterestVersionDetail = CustInterestVersionDetail::find(custInterestFee.CustInterestVersionDetail);
        boolean isValid = true;

        if (!custInterestVersionDetail.LedgerDimension)
        {
            if (custInterestVersionDetail.InterestByRange != CustInterestByRange::None)
            {
                if (custInterestVersionDetail.InterestPercent > 0 || this.InterestPct > 0)
                {
                    isValid = checkFailed("@AccountsReceivable:InterestLedgerPostingAccountRequired");
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid = super();

        if (!this.FromValue || !this.orig().FromValue)
        {
            isValid = checkFailed("@SYS128229");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;
        CustInterestRange custInterestRangeOrig = this.orig();

        isValid = super();

        if (isValid && this.FromValue != 0 && CustInterestRange::exist(custInterestRangeOrig.RecId)
        && custInterestRangeOrig.FromValue == 0)
        {
            isValid = checkFailed("@SYS128229");
        }

        if (isValid)
        {
            isValid = this.validateAccount();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>CustInterestRange</c> table; if not, an error
    ///    message is displayed.
    /// </summary>
    /// <param name="_custInterestRangeRecId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(CustInterestRangeRecId _custInterestRangeRecId)
    {
        boolean found = true;

        if (!CustInterestRange::exist(_custInterestRangeRecId))
        {
            found = checkFailed(CustInterestRange::txtNotExist());
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified Range record occurs in the table.
    /// </summary>
    /// <param name="_custInterestRangeeRecId">
    /// The record Id to check.
    /// </param>
    /// <returns>
    /// true: if record exists; otherwise false.
    /// </returns>
    public static boolean exist(CustInterestRangeRecId _custInterestRangeeRecId)
    {
        boolean found;

        found = (select firstonly RecId
                    from custInterestRange
                        where custInterestRange.RecId == _custInterestRangeeRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByCustInterestFee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified <c>Range</c> record occurs in the table.
    /// </summary>
    /// <param name="_custInterestFeeRecId">
    /// The record ID of the <c>Fee</c> record.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean existByCustInterestFee(CustInterestFeeRecId _custInterestFeeRecId)
    {
        return (select firstonly RecId from custInterestRange
            where custInterestRange.CustInterestFee == _custInterestFeeRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record on this basis of input parameters.
    /// </summary>
    /// <param name="_custInterestRangeRecId">
    /// RecId of <c>CustInterestRange</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A boolean value that determines whether to read the record for updating; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A value used when the table is not automatically concurrent; optional.
    /// </param>
    /// <returns>
    /// Record of <c>CustInterestRange</c> table.
    /// </returns>
    public static CustInterestRange find(
        CustInterestRangeRecId _custInterestRangeRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInterestRange custInterestRange;

        custInterestRange.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInterestRange.concurrencyModel(_concurrencyModel);
        }

        select firstonly custInterestRange
            where custInterestRange.RecId == _custInterestRangeRecId;

        return custInterestRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInterestRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the range by using the specified from value of a range.
    /// </summary>
    /// <param name="_custInterestFeeRecId">
    ///    The record ID of the range record.
    /// </param>
    /// <param name="_custInterestFromValue">
    ///    The from value of the range record.
    /// </param>
    /// <returns>
    ///    The specified record in the <c>CustInterestRange</c> table.
    /// </returns>
    public static CustInterestRange findInterestRange(CustInterestFeeRecId _custInterestFeeRecId, CustInterestFromValue _custInterestFromValue)
    {
        CustInterestRange custInterestRange;

        select firstonly custInterestRange
            order by custInterestRange.FromValue desc
                where custInterestRange.CustInterestFee == _custInterestFeeRecId &&
                    custInterestRange.FromValue <= _custInterestFromValue;

        return custInterestRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS128251";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CustInterest</ConfigurationKey>
	<DeveloperDocumentation>@SYS325028</DeveloperDocumentation>
	<FormRef>interest</FormRef>
	<Label>@SYS24771</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CustInterestFee</TitleField1>
	<TitleField2>InterestPct</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>CustInterestFeeFromValueIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustInterestFee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestPct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustInterestFee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInterestFee</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestPct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverView</Name>
			<Label>@SYS34991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustInterestFee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInterestFee</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustInterestFeeRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FromValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInterestFromValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InterestPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterestPct</ExtendedDataType>
			<Label>@SYS128221</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustInterestFeeFromValueIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FromValue</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustInterestFee</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CustCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInterestFee</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInterestFee</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInterestFee</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CustInterestRange</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInterestFee</Name>
					<Field>CustInterestFee</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>