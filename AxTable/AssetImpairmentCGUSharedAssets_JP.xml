<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetImpairmentCGUSharedAssets_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetImpairmentCGUSharedAssets_JP extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply the allocation setup from a record as template
    /// </summary>
    /// <param name="_templateRecId">
    /// The template record id
    /// </param>
    /// <exception cref="Exception::Error">
    /// If the template shared asset belongs to other cgu group, it cannot be applied.
    /// </exception>
    public void applyAllocation(RefRecId _templateRecId)
    {
        AssetImpairmentCGUSharedAssets_JP       templateSharedAsset;
        AssetImpairmentCGUSharedAssetsAlloc_JP  shareAssetsAlloc;
        AssetImpairmentCGUSharedAssetsAlloc_JP  shareAssetsAllocLoc;

        if (_templateRecId && this.RecId && _templateRecId != this.RecId)
        {
            templateSharedAsset = AssetImpairmentCGUSharedAssets_JP::find(_templateRecId);

            if (templateSharedAsset.CGUGroup != this.CGUGroup)
            {
                throw error("@SYP4880484");
            }

            ttsBegin;

            update_recordSet shareAssetsAlloc
            setting
                Percent = shareAssetsAllocLoc.Percent
                where shareAssetsAlloc.SharedAsset == this.RecId
            join shareAssetsAllocLoc
                where shareAssetsAllocLoc.CGU == shareAssetsAlloc.CGU
                      && shareAssetsAllocLoc.SharedAsset == _templateRecId;

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAssetType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the default shared asset type
    /// </summary>
    /// <returns>
    /// Goodwill or SharedAsset
    /// </returns>
    public AssetImpairmentSharedAssetType_JP defaultAssetType()
    {
        return AssetTable::find(this.AssetId).AssetType == AssetType::Goodwill ? AssetImpairmentSharedAssetType_JP::Goodwill : AssetImpairmentSharedAssetType_JP::SharedAsset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        AssetImpairmentCGUGroup_JP              cguGroup;
        AssetImpairmentCGU_JP                   cgu;
        AssetImpairmentCGUAssets_JP             cguAssets;
        AssetId                                 assetId = this.AssetId;
        AssetBookMergeId                        bookId = this.BookId;
        RefRecId                                recid = this.RecId;
        RefRecId                                groupRefId = this.CGUGroup;

        ttsBegin;

        super();

        cguGroup = AssetImpairmentCGUGroup_JP::find(groupRefId);
        if (cguGroup.SharedAssetImpairMethod == AssetImpairmentSharedAssetsMethod_JP::Method2)
        {
            delete_from cguAssets
                where cguAssets.AssetId == assetId
                      && cguAssets.BookId == bookId
                      && cguAssets.IsSharedAsset == NoYes::Yes
            exists join cgu
                where cgu.CGUGroup == groupRefId
                      && cguAssets.AssetImpairmentCGU == cgu.RecId;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFixedAssetGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the asset group.
    /// </summary>
    /// <param name="_cguSharedAssets">
    /// Source <c>AssetImpairmentCGUSharedAssets_JP</c> record.
    /// </param>
    /// <returns>
    /// The asset group id.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display AssetGroupId displayFixedAssetGroup(AssetImpairmentCGUSharedAssets_JP _cguSharedAssets)
    {
        return AssetTable::find(_cguSharedAssets.AssetId).AssetGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFixedAssetName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the fixed asset name.
    /// </summary>
    /// <param name="_cguSharedAssets">
    /// Source <c>AssetImpairmentCGUSharedAssets_JP</c> record.
    /// </param>
    /// <returns>
    /// The fixed asset name.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display AssetName displayFixedAssetName(AssetImpairmentCGUSharedAssets_JP _cguSharedAssets)
    {
        return AssetTable::find(_cguSharedAssets.assetId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFixedAssetStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the fixed asset status.
    /// </summary>
    /// <param name="_cguSharedAssets">
    /// Source <c>AssetImpairmentCGUSharedAssets_JP</c> record.
    /// </param>
    /// <returns>
    /// The asset status.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display AssetStatus displayFixedAssetStatus(AssetImpairmentCGUSharedAssets_JP _cguSharedAssets)
    {
        return AssetBook::find(_cguSharedAssets.assetId, _cguSharedAssets.BookId).Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the priority of a CGU shared asset book.
    /// </summary>
    /// <param name="_sharedAssetType">
    /// Goodwill or SharedAsset; optional.
    /// </param>
    public void initPriority(AssetImpairmentSharedAssetType_JP _sharedAssetType = this.SharedAssetType)
    {
        // The rule for priority of goodwill, shared assets and assets in cgu is defined as below:
        // Method I : goodwill =1, shared asset = 2    cgu assets = always the lowest
        // Method II: if Shared asset has higher priority is checked, goodwill = 1, shared asset = 2, cgu fixed asset = 3
        //            else, goodwill = 1, shared asset = 2, cgu fixed asset = 2
        // So the default priority of goodwill and shared assets are always 1 and 2.

        switch (_sharedAssetType)
        {
            case AssetImpairmentSharedAssetType_JP::Goodwill:
                this.AllocationPriority    = 1;
                break;
            case AssetImpairmentSharedAssetType_JP::SharedAsset:
                this.AllocationPriority    = 2;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        AssetImpairmentCGUGroup_JP              cguGroup;
        AssetImpairmentCGU_JP                   cgu;
        AssetImpairmentCGUAssets_JP             cguAssets;
        AssetImpairmentCGUSharedAssetsAlloc_JP  allocLoc;
        NoYes                                   defaultYes = NoYes::Yes;
        AssetId                                 assetId;
        AssetBookId                             bookId;
        AssetImpairmentAllocationPriority_JP    allocationPriority;
        RefRecId                                thisRecId;

        ttsBegin;

        super();

        assetId = this.AssetId;
        bookId = this.BookId;
        allocationPriority = this.AllocationPriority;
        thisRecId = this.RecId;

        cguGroup = AssetImpairmentCGUGroup_JP::find(this.CGUGroup);
        if (cguGroup.SharedAssetImpairMethod == AssetImpairmentSharedAssetsMethod_JP::Method2)
        {
            insert_recordset cguAssets
                (IsSharedAsset, AssetId, BookId, AllocationPriority, AssetImpairmentCGU)
            select defaultYes, assetId, bookId, allocationPriority, RecId from cgu
                where cgu.CGUGroup == this.CGUGroup;

            insert_recordset allocLoc
                (SharedAsset, CGU)
                select thisRecId, RecId from cgu
                    where cgu.CGUGroup == this.CGUGroup;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFullyAllocated</Name>
				<Source><![CDATA[
    public boolean isFullyAllocated()
    {
        AssetImpairmentCGUSharedAssetsAlloc_JP sharedAssetsAlloc;

        select sum(Percent) from sharedAssetsAlloc group by SharedAsset
            where sharedAssetsAlloc.SharedAsset == this.RecId;

        return sharedAssetsAlloc.Percent == 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
        AssetImpairmentTestResult_JP         result;
        AssetImpairmentTestResultDocument_JP resultDoc;
        AssetImpairmentTestResultDocEntry_JP resultDocEntry;
        AssetDocumentEntry_JP                docEntry;

        ret = super();

        if (ret)
        {
            select firstOnly resultDocEntry
            exists join docEntry
                where resultDocEntry.AssetDocumentEntry_JP == docEntry.RecId
                      && docEntry.AssetId == this.AssetId
                      && docEntry.BookId == this.BookId
            exists join resultDoc
                where resultDoc.AssetDocumentTable_JP == docEntry.AssetDocumentTable_JP
            exists join result
                where resultDoc.AssetImpairmentTestResult_JP == result.RecId
                      && result.CGUGroup == this.CGUGroup;

            if (resultDocEntry)
            {
                ret = checkFailed("@SYP4880449");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(AssetImpairmentCGUSharedAssets_JP, AllocationPriority):
                if (this.AllocationPriority < 1)
                {
                    ret = checkFailed("@SYP4880234");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                           ret;
        AssetImpairmentCGUAssets_JP       cguAssets;
        AssetImpairmentCGUSharedAssets_JP cguSharedAssets;
        AssetImpairmentCGU_JP             cgu;

        ret = super();

        if (ret)
        {
            AssetImpairmentCGUGroupStatus_JP cguGroupStatus = AssetImpairmentCGUGroup_JP::find(this.CGUGroup).Status;

            if (!this.RecId && cguGroupStatus != AssetImpairmentCGUGroupStatus_JP::Draft)
            {
                ret = checkFailed("@FixedAssetsImpairementAccounting:CannotCreateSharedAssetsUnderActiveOrDisabledCGUGroup");
            }

            if (ret && this.SharedAssetType == AssetImpairmentSharedAssetType_JP::Goodwill && this.NetSellingPrice)
            {
                ret = checkFailed("@FixedAssetsImpairementAccounting:NetSellingPriceOfGoodwillMustBeZero");
            }

            if (ret && this.RecId)
            {
                if (cguGroupStatus == AssetImpairmentCGUGroupStatus_JP::Active
                    && !this.allowUpdateUnderActiveCGUGroup())
                {
                    ret = checkFailed("@FixedAssetsImpairementAccounting:CannotUpdateSharedAssetsUnderActiveCGUGroup");
                }

                if (cguGroupStatus == AssetImpairmentCGUGroupStatus_JP::Disabled)
                {
                    ret = checkFailed("@FixedAssetsImpairementAccounting:CannotUpdateSharedAssetsUnderDisabledCGUGroup");
                }
            }
        }

        if (ret && !this.RecId)
        {
            //Validate fixed assets in source CGU are not exists in the shared assets of current cgu group
            select firstOnly RecId from cguSharedAssets
                where cguSharedAssets.AssetId == this.AssetId
                      && cguSharedAssets.BookId == this.BookId
                      && cguSharedAssets.CGUGroup == this.CGUGroup;
            if (cguSharedAssets)
            {
                ret = checkFailed(strFmt("@SYP4880504", this.AssetId, this.BookId));
            }

            //Validate fixed assets in source CGU are not exists in other cgu in current cgu group
            select firstOnly RecId from cguAssets
                where cguAssets.AssetId == this.AssetId
                      && cguAssets.BookId == this.BookId
                      && cguAssets.IsSharedAsset == NoYes::No
            exists join cgu
                where cgu.RecId == cguAssets.AssetImpairmentCGU
                      && cgu.CGUGroup == this.CGUGroup;
            if (cguAssets)
            {
                ret = checkFailed(strFmt("@SYP4880482", this.AssetId, this.BookId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the allocation is valid.
    /// </summary>
    /// <returns>
    /// If the allocation is valid.
    /// </returns>
    public boolean verifyAllocation()
    {
        AssetImpairmentCGUSharedAssetsAlloc_JP sharedAssetsAlloc;

        select sum(Percent) from sharedAssetsAlloc where sharedAssetsAlloc.SharedAsset == this.RecId;

        return sharedAssetsAlloc.Percent == 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>AssetImpairmentCGUSharedAssets_JP</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The <c>AssetImpairmentCGUSharedAssets_JP</c> recid.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// The <c>AssetImpairmentCGUSharedAssets_JP</c> table record.
    /// </returns>
    public static AssetImpairmentCGUSharedAssets_JP find(
        RefRecId                _recId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetImpairmentCGUSharedAssets_JP result;

        if (_recId)
        {
            result.selectForUpdate(_forupdate);
            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                result.concurrencyModel(_concurrencyModel);
            }

            select firstonly
                result
            where
                result.RecId == _recId;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowUpdateUnderActiveCGUGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the shared assets can be updated under an active CGU group.
    /// </summary>
    /// <returns>
    /// True if the shared assets can be updated; otherwise, false;
    /// </returns>
    public boolean allowUpdateUnderActiveCGUGroup()
    {
        boolean ret = true;

        if (this.AllocationPriority != this.orig().AllocationPriority
            || this.ProrationMethodOverride != this.orig().ProrationMethodOverride
            || this.SharedAssetType != this.orig().SharedAssetType)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>JP</CountryRegionCodes>
	<DeveloperDocumentation>@SYP4880458</DeveloperDocumentation>
	<Label>@SYP4880416</Label>
	<TitleField1>AssetId</TitleField1>
	<TitleField2>BookId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>FixedAssets</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NetSellingPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProrationMethodOverride</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharedAssetType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS318405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SharedAssetType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocationPriority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NetSellingPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProrationMethodOverride</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AllocationPriority</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AssetImpairmentAllocationPriority_JP</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CGUGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYP4880233</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NetSellingPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetNetSellingPrice_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProrationMethodOverride</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYP4880230</Label>
			<EnumType>AssetImpairmentSharedAssetAllocBasis_JP</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SharedAssetType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>AssetImpairmentSharedAssetType_JP</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>CGUGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBook</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetBook</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AssetIdBookIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<SourceEDT>AssetBookId</SourceEDT>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CGUGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>AssetImpairmentCGUGroup_JP</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CGUGroup</Name>
					<Field>CGUGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>