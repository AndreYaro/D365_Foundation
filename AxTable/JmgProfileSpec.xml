<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgProfileSpec</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgProfileSpec extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeSpecProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the profile id on the <c>JmgProfileSpec</c> record.
    /// </summary>
    /// <param name="toProfile">
    /// The ID of the new profile.
    /// </param>
    void changeSpecProfile(JmgProfileId toProfile)
    {
        this.Profile = toProfile;
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedEndDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the corrected end day associated to the <c>JmgProfileSpec</c> record.
    /// </summary>
    /// <returns>
    /// The corrected end day associated to the <c>JmgProfileSpec</c> record.
    /// </returns>
    public display JmgLabelEndDay correctedEndDay()
    {
        int day;
        day = this.EndDay + this.DayId;
        if (day < 0)
        {
            day = day + (any2int(abs(day)) div 7 + 1) * 7;
        }
        else
        {
            day = (any2int(abs(day)) mod 7);
        }

        return day;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedStartDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the corrected start day associated to the <c>JmgProfileSpec</c> record.
    /// </summary>
    /// <returns>
    /// The corrected start day associated to the <c>JmgProfileSpec</c> record.
    /// </returns>
    public display JmgLabelStartDay correctedStartDay()
    {
        int day;

        day = this.StartDay + this.DayId;
        if (day < 0)
        {
            day = day + (any2int(abs(day)) div 7 + 1) * 7;
        }
        else
        {
            day = (any2int(abs(day)) mod 7);
        }

        return day;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>JmgProfileSpec</c> record from the database.
    /// </summary>
    public void delete()
    {
        JmgProfileDay   jmgProfileDay;

        select firstonly jmgProfileDay
            where jmgProfileDay.Profile == this.Profile &&
                  jmgProfileDay.DayId   == this.DayId;

        super();

        jmgProfileDay.setDayCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a <c>JmgProfileSpec</c> record into the database.
    /// </summary>
    void insert()
    {
        super();

        this.postModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates related <c>JmgProfileSpec</c> records based on updates to this <c>JmgProfileSpec</c> record.
    /// </summary>
    void postModified()
    {
        JmgProfileDay       jmgProfileDay;
        JmgProfileSpecType  type = JmgProfileTypeTable::find(this.ProfileType).ProfileSpecType;
        JmgProfileSpecType  secondaryType = JmgProfileTypeTable::find(this.SecondaryProfileType).ProfileSpecType;

        if ((type == JmgProfileSpecTypeEnum::SignIn) || (type == JmgProfileSpecTypeEnum::SignOut))
        {
            this.EndTime = this.StartTime;
            this.EndDay  = this.StartDay;
            this.doUpdate();
        }

        if ((type != JmgProfileSpecTypeEnum::Break) && (type != JmgProfileSpecTypeEnum::BreakPay) &&
            (! this.EventCode) && (secondaryType != JmgProfileSpecTypeEnum::Blank))
        {
            this.SecondaryProfileType  = 0;
            this.doUpdate();
        }

        select jmgProfileDay
            where jmgProfileDay.Profile == this.Profile &&
                  jmgProfileDay.DayId   == this.DayId;

        jmgProfileDay.setDayCode();

        if (FormDataUtil::getFormDataSource(this))
            FormDataUtil::getFormDataSource(this).reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>JmgProfileSpec</c> record in the database.
    /// </summary>
    void update()
    {
        super();

        this.postModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAbsenceRegistrationTimeForProfileSpecificationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the worker should be prompted for absence when clocks in or out at the specified time.
    /// </summary>
    /// <param name = "_worker">
    /// The ID of the worker that may be coming in late or leaving early.
    /// </param>
    /// <param name = "_clockIn">
    /// false if the worker is leaving work; true indicates that the worker is coming in to work.
    /// </param>
    /// <param name = "_jmgProfileDate">
    /// The profile date to assign to the registration.
    /// </param>
    /// <param name = "_registrationDateTime">
    /// The date and time when the worker is coming in to work or leaving work.
    /// </param>
    /// <param name = "_jmgProfileSpec">
    /// The profile specification record buffer.
    /// </param>
    /// <returns>
    /// true if the worker should be prompted for absence; otherwise, false.
    /// </returns>
    protected static boolean validateAbsenceRegistrationTimeForProfileSpecificationType(JmgWorkerRecId _worker, boolean _clockIn, JmgProfileDate _jmgProfileDate, JmgDateTime _registrationDateTime, JmgProfileSpec _jmgProfileSpec)
    {
        boolean promptForAbsence;
        JmgDateTime expectedDateTime = DateTimeUtil::newDateTime(_jmgProfileDate + _jmgProfileSpec.StartDay, _jmgProfileSpec.StartTime, JmgProfileSeconds::getTimeZone());
        // Expected clock-in / out time needs to be adjusted
        // with tolerance set for the profile. If registration happens,
        // within tolerance range user doesn't need to be prompted for absence.
        if (_clockIn)
        {
            // For range(fromDateTime, toDateTime), if clockin dateTime > toDateTime, prompt absence.
            expectedDateTime = DateTimeUtil::addMinutes(expectedDateTime, _jmgProfileSpec.ToleranceAfter);
            promptForAbsence = _registrationDateTime > expectedDateTime;
        }
        else
        {
            // For range(fromDateTime, toDateTime), if clockout dateTime < fromDateTime, prompt absence.
            expectedDateTime = DateTimeUtil::addMinutes(expectedDateTime, -1 * _jmgProfileSpec.ToleranceBefore);
            promptForAbsence = _registrationDateTime < expectedDateTime;
        }

        return promptForAbsence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptForAbsence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if there is a prompt for absence when the specified worker clocks in or out at the
    /// specified time.
    /// </summary>
    /// <param name="_worker">
    /// The ID of the worker that may be coming in late or leaving early.
    /// </param>
    /// <param name="_registrationDateTime">
    /// The date and time when the worker is coming in to work or leaving work.
    /// </param>
    /// <param name="_clockIn">
    /// false if the worker is leaving work; otherwise the default of true indicates that the worker is
    /// coming in to work.
    /// </param>
    /// <returns>
    /// true if the worker should be prompted for absence; otherwise, false.
    /// </returns>
    public static boolean promptForAbsence(JmgWorkerRecId _worker, JmgDateTime _registrationDateTime, boolean _clockIn = true)
    {
        JmgProfileSpec          jmgProfileSpec;
        JmgProfileId            jmgProfileId;
        JmgProfileTypeTable     jmgProfileTypeTable;
        JmgEmployee             jmgEmployee = JmgEmployee::find(_worker);
        JmgProfileDate          jmgProfileDate;
        JmgDateTime             expectedDateTime;
        JmgProfileSpecTypeEnum  profileTypeToCheck;
        JmgTime                 regTime;
        Timezone                timezone;
        JmgTermReg              jmgTermReg;
        JmgDateTime             clockInDateTime;

        boolean             promptForAbsence = false;

        timezone = JmgProfileSeconds::getTimeZone();

        if (_clockIn)
        {
            clockInDateTime = _registrationDateTime;
        }
        else
        {
            select maxof(RegDateTime) from jmgTermReg
                where jmgTermReg.RegDateTime <  _registrationDateTime   &&
                      jmgTermReg.Worker      == _worker                 &&
                      jmgTermReg.RegType     == JmgTermRegType::ClockIn;

            clockInDateTime = jmgTermReg.RegDateTime;
        }

         // When there is profile shift (Profile group->Profile relation) , must use clockin time to get the correct profile ID.
        jmgProfileId = jmgEmployee.profileId(
            DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(clockInDateTime, timezone)),
            DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(clockInDateTime, timezone)));

        if (jmgProfileId)
        {
            if (_clockIn)
            {
                profileTypeToCheck = JmgProfileSpecTypeEnum::SignIn;
            }
            else
            {
                profileTypeToCheck = JmgProfileSpecTypeEnum::SignOut;
            }
            jmgProfileDate = JmgTermReg::calcProfileDate(JmgTermRegType::ClockIn, jmgEmployee, clockInDateTime);

            while select StartDay, StartTime, EndDay, EndTime, DayId, Profile, ToleranceBefore, ToleranceAfter
                from jmgProfileSpec order by StartTime desc
                where jmgProfileSpec.Profile                    == jmgProfileId
                     && jmgProfileSpec.DayId                    == JmgProfiles::date2DayId(jmgProfileDate)
                join ProfileSpecType, RecId from jmgProfileTypeTable
                    where jmgProfileTypeTable.RecId             == jmgProfileSpec.ProfileType
                        && (jmgProfileTypeTable.ProfileSpecType == profileTypeToCheck 
                            || jmgProfileTypeTable.ProfileSpecType == JmgProfileSpecTypeEnum::FlexSub
                            || jmgProfileTypeTable.ProfileSpecType == JmgProfileSpecTypeEnum::FlexAdd)
            {
                if (jmgProfileTypeTable.ProfileSpecType == profileTypeToCheck)
                {
                    promptForAbsence = JmgProfileSpec::validateAbsenceRegistrationTimeForProfileSpecificationType(_worker, _clockIn, jmgProfileDate, _registrationDateTime, jmgProfileSpec);
                }
                else
                {
                    regTime = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(_registrationDateTime, timezone));
                    if (jmgProfileSpec.StartTime < regTime && jmgProfileSpec.EndTime > regTime 
                        && (jmgProfileTypeTable.ProfileSpecType ==  JmgProfileSpecTypeEnum::FlexSub
                            || jmgProfileTypeTable.ProfileSpecType == JmgProfileSpecTypeEnum::FlexAdd))
                    {
                        return false;
                    }
                }
            }
        }
        return promptForAbsence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Jmg</ConfigurationKey>
	<DeveloperDocumentation>@SYS317299</DeveloperDocumentation>
	<FormRef>JmgProfileTable</FormRef>
	<Label>@SYS38520</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Profile</TitleField1>
	<TitleField2>DayId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ProfileDayIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Profile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DayId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToleranceBefore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToleranceAfter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EventCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Profile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DayId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProfileType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToleranceBefore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToleranceAfterStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToleranceBeforeEnd</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToleranceAfter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SecondaryProfileType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EventCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>correctedStartDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>correctedEndDay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Simple</Name>
			<Label>@SYS24899</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tolerances</Name>
			<Label>@SYS38620</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ToleranceBefore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToleranceAfter</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Type</Name>
			<Label>@SYS38370</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EventCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkingTime</Name>
			<Label>@SYS11965</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DayId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDayId</ExtendedDataType>
			<EnumType>JmgDayIdEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>EndDay</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgRelDayNo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>EndTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgTime</ExtendedDataType>
			<Label>@SYS101262</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EventCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgEventCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Profile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgProfileId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProfileType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgProfileTypeRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SecondaryProfileType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgProfileTypeRecId</ExtendedDataType>
			<Label>@SYS38515</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>StartDay</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgRelDayNo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>StartTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgTime</ExtendedDataType>
			<Label>@SYS3008</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ToleranceAfter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgToleranceAfterEnd</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ToleranceAfterStart</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgToleranceAfterStart</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ToleranceBefore</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgToleranceBeforeStart</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ToleranceBeforeEnd</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgToleranceBeforeEnd</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JmgProfileTypeTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProfileType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>JmgProfileTypeTableIdx1</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SecondaryProfileType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProfileDayIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Profile</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DayId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>JmgProfileSpecMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ProfileType</MapField>
					<MapFieldTo>ProfileType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SecondaryProfileType</MapField>
					<MapFieldTo>SecondaryProfileType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ToleranceBeforeEnd</MapField>
					<MapFieldTo>ToleranceBeforeEnd</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ToleranceAfterStart</MapField>
					<MapFieldTo>ToleranceAfterStart</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StartTime</MapField>
					<MapFieldTo>StartTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndTime</MapField>
					<MapFieldTo>EndTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ToleranceBefore</MapField>
					<MapFieldTo>ToleranceBefore</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ToleranceAfter</MapField>
					<MapFieldTo>ToleranceAfter</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDay</MapField>
					<MapFieldTo>EndDay</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StartDay</MapField>
					<MapFieldTo>StartDay</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EventCode</MapField>
					<MapFieldTo>EventCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgProfileTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgProfileTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Profile</Name>
					<Field>Profile</Field>
					<RelatedField>Profile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgProfileTypeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>JmgProfileTypeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>JmgProfileTypeTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgProfileSpec</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProfileType</Name>
					<Field>ProfileType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgProfileTypeTable_Secondary</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>JmgProfileTypeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>JmgProfileTypeTable_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgProfileSpec</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SecondaryProfileType</Name>
					<Field>SecondaryProfileType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SwitchJmgIpcActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgIpcActivity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SwitchJmgIpcActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgProfileSpec</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EventCode</Name>
					<Field>EventCode</Field>
					<RelatedField>Activity</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>JmgStampTypeEnum::EventCode</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>