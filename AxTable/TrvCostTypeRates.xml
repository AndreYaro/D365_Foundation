<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvCostTypeRates</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvCostTypeRates extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkNoConflict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there is existing record that has overlap date with current record.
    /// </summary>
    /// <returns>True if there is no existing record that has overlap date with current record, otherwise false.</returns>
    public boolean checkNoConflict()
    {
        TrvCostTypeRates    rates;
        TransDate           toDate;

        if (this.CostType)
        {
            if (!this.ToDate)
            {
                toDate = Global::dateMax();
            }
            else
            {
                toDate = this.ToDate;
            }
            // The last two lines of condition is to exclude the two situations that doesn't have conflict:
            // 1. Existing line's FromDate is later than the current ToDate;
            // 2. Existing line's ToDate is earlier than the current FromDate.
            select firstonly rates
                where rates.CostType == this.CostType
                    && rates.Qty == this.Qty
                    && rates.RecId != this.RecId
                    && !((rates.FromDate && rates.FromDate > toDate)
                        || (rates.ToDate && rates.ToDate < this.FromDate))
                    && rates.RateType == this.RateType
                    && rates.VehicleType == this.VehicleType;

            if (rates)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        this.flushCaches();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        this.flushCaches();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        this.flushCaches();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case (fieldnum(TrvCostTypeRates, Qty)):
                if (this.Qty < 0)
                {
                    ret = ret && checkFailed("@SYS106933");
                }
                break;

            case (fieldnum(TrvCostTypeRates, CostRate)):
                if (this.CostRate < 0)
                {
                    ret = ret && checkFailed("@SYS106933");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && !this.checkFromToDate())
        {
            ret = checkFailed("@SYS107147");
        }

        if (ret && !this.checkNoConflict())
        {
            ret = checkFailed("@SYS106999");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(TrvCostTypeEDT _costType,
                         TransDate    _fromDate,
                         Qty          _qty)
    {
        return  _costType && _fromDate && _qty &&
                            (select firstonly RecId from trvCostTypeRates
                                where trvCostTypeRates.CostType  == _costType
                                    && trvCostTypeRates.FromDate == _fromDate
                                    && trvCostTypeRates.Qty      == _qty).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TrvCostTypeRates find(TrvCostTypeEDT _costType,
                                 TransDate    _fromDate,
                                 Qty          _qty,
                                 boolean     _forUpdate = false)
    {
        TrvCostTypeRates rates;

        if (_costType)
        {
            rates.selectForUpdate(_forUpdate);

            select firstonly rates
                where rates.CostType == _costType
                   && rates.FromDate == _fromDate
                   && rates.Qty      == _qty;
        }

        return rates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApplicableRate</Name>
				<Source><![CDATA[
    public static TrvCostTypeRates getApplicableRate(TrvCostTypeEDT _costType,
                                                Qty          _qty,
                                                TransDate    _date,
                                                TrvVehicleType _vehicleType='')
    {
        TrvCostTypeRates rates;

        if (_costType)
        {
            select firstonly rates
                order by Qty desc
                where rates.CostType  == _costType
                   && (rates.FromDate <= _date || !rates.FromDate)
                   && (rates.ToDate   >= _date || !rates.ToDate)
                   && rates.Qty       <= _qty
                   && rates.VehicleType == _vehicleType
                   && rates.RateType == TrvMileageRateType::Mileage;
        }
        return rates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPassengerRate</Name>
				<Source><![CDATA[
    public static TrvCostRate getPassengerRate(TrvCostTypeEDT _costType,
                                        TransDate    _date,
                                        TrvVehicleType _vehicleType)
    {
        TrvCostTypeRates rates;

        if (_costType)
        {
            select firstonly CostRate from rates
                where rates.CostType  == _costType
                   && (rates.FromDate <= _date || !rates.FromDate)
                   && (rates.ToDate   >= _date || !rates.ToDate)
                   && rates.VehicleType == _vehicleType
                   && rates.RateType == TrvMileageRateType::Passenger;
        }

        return rates.CostRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMileageRatesSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the mileage rates are set up.
    /// </summary>
    /// <param name="_trvCostType">
    /// The cost type of the records.
    /// </param>
    /// <returns>
    /// true if the mileage rates are set up; otherwise, false.
    /// </returns>
    public static boolean isMileageRatesSetup(TrvCostTypeEDT _trvCostType)
    {
        TrvCostTypeRates    trvCostTypeRates;

        select firstOnly recId from trvCostTypeRates
            where trvCostTypeRates.CostType == _trvCostType
                && trvCostTypeRates.RateType == TrvMileageRateType::Mileage;

        return (trvCostTypeRates.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPassengerRatesSetup</Name>
				<Source><![CDATA[
    public static boolean isPassengerRatesSetup(TrvCostTypeEDT _trvCostType)
    {
        TrvCostTypeRates    trvCostTypeRates;

        select firstOnly recId from trvCostTypeRates
            where trvCostTypeRates.CostType == _trvCostType
                && trvCostTypeRates.RateType == TrvMileageRateType::Passenger;

        return (trvCostTypeRates.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static str 80 txtNotExist()
    {
        return "@SYS101481";
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFromToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// If both toDate and fromDate are not empty the method checks that the fromDate is less than or equal to the toDate.
    /// </summary>
    /// <returns>True if the fromDate is less than or equal to the toDate or if any of the fields are empty, otherwise False.</returns>
    public boolean checkFromToDate()
    {
        return !(this.FromDate && this.ToDate && (this.FromDate > this.ToDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushCaches</Name>
				<Source><![CDATA[
    private void flushCaches()
    {
        flush TrvCostTypeRates;

        TrvMileageHasVehicleTypeSetupCacheItem::expireCaches();
        TrvMileageHasPassengersSetupCacheItem::expireCaches();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total Qty of respective cost type and vehicle type.
    /// </summary>
    /// <param name = "_costType"> cost type of the mileage rate tier defined.</param>
    /// <param name = "_vehicleType"> vehicle type used in mielage rate tier</param>
    /// <param name = "_date">date range defined in mileage rate tier</param>
    /// /// <returns>
    /// Total Qty defined for mentioned cost type and vehicle type.
    /// </returns>
    public static Qty getTotalQty(TrvCostTypeEDT _costType,
                                        TrvVehicleType _vehicleType,
                                        TransDate _date)
    {
        TrvCostTypeRates rates;
        Qty qtyLoc;

        select sum(Qty) from rates
            where rates.CostType  == _costType
                && (rates.FromDate <= _date || !rates.FromDate)
                && (rates.ToDate   >= _date || !rates.ToDate)
                && rates.VehicleType == _vehicleType
                && rates.RateType == TrvMileageRateType::Mileage;

        return rates.Qty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Trv</ConfigurationKey>
	<DeveloperDocumentation>@SYS124824</DeveloperDocumentation>
	<Label>@SYS101480</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>CostType</TitleField1>
	<TitleField2>VehicleType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Expense</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>CostTypeQtyIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RateType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VehicleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RateType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VehicleType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VehicleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RateType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS104938</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvCostRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvCostTypeEDT</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RateType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TrvMileageRateType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VehicleType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvVehicleType</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CostTypeQtyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CostType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Qty</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RateType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VehicleType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>