<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureJour_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FactureJour_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateSeqNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets sequence number on current facture.
    /// </summary>
    public void allocateSeqNumber()
    {
        FactureJour_RU      factureJour;
        FactureSequence_RU  sequence;

        select firstonly RecId from factureJour
            where factureJour.RefLastCorrFacture == this.RefLastCorrFacture &&
                  factureJour.RefRevisedFacture  == this.RefRevisedFacture  &&
                  factureJour.CreatedDateTime    == this.CreatedDateTime    &&
                  factureJour.RecId              != this.RecId;

        if (factureJour.RecId)
        {
            select firstonly forupdate sequence
                where sequence.RefOriginalFacture == this.RefLastCorrFacture &&
                      sequence.CreationDateTime   == this.CreatedDateTime;

            if (sequence)
            {
                sequence.SequenceNumber += 10;
                sequence.update();
            }
            else
            {
                sequence.RefOriginalFacture = this.RefLastCorrFacture;
                sequence.CreationDateTime   = this.CreatedDateTime;
                sequence.SequenceNumber     = 10;
                sequence.insert();
            }

            this.SeqNumber = sequence.SequenceNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>amount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets factureAmount for current record.
    /// </summary>
    /// <returns>
    /// FactureAmount for current record.
    /// </returns>
    display FactureAmount_RU amount()
    {
        return this.CorrectionType == FactureCorrectionType_RU::Revision ? this.FactureAmountDisplay : this.FactureAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets amount including tax for current record.
    /// </summary>
    /// <returns>
    /// Amount including tax for current record.
    /// </returns>
    display Amount amountInclTax()
    {
        return this.amount() + this.taxAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookProcessingExists</Name>
				<Source><![CDATA[
    public boolean bookProcessingExists()
    {
        boolean ret;

        PurchBookTable_RU   purchTable;
        PurchBookTrans_RU   purchTrans;
        SalesBookTable_RU   salesTable;
        SalesBookTrans_RU   salesTrans;

        PurchBookVATProcessLogTrans_RU      logTrans;
        PurchBookVATProcessLogTransOper_RU  logTransOper;

        switch (this.Module)
        {
            case FactureModule_RU::Cust                    :
            case FactureModule_RU::TaxCorrectionSales      :
            case FactureModule_RU::TaxCorrectionSales_Vend :
                select firstonly RecId
                from        salesTable
                exists join salesTrans
                    where salesTable.ClosingDate                           &&
                          salesTrans.SalesBookTable_RU == salesTable.RecId &&
                          salesTrans.FactureId         == this.FactureId;

                if (salesTable)
                {
                    ret = true;
                }

                break;
            case FactureModule_RU::Vend                    :
            case FactureModule_RU::TaxCorrectionPurch      :
            case FactureModule_RU::TaxCorrectionPurch_Cust :
                select firstonly RecId
                from        purchTable
                exists join purchTrans
                    where purchTable.ClosingDate                           &&
                          purchTrans.PurchBookTable_RU == purchTable.RecId &&
                          purchTrans.FactureId         == this.FactureId;

                select firstonly RecId
                from        logTrans
                exists join logTransOper
                    where logTrans.FactureId            == this.FactureId                               &&
                          logTrans.TransType            != SalesPurchBookTransType_RU::PrepaymentStorno &&
                          logTransOper.RefRecId         == logTrans.RecId                               &&
                          logTransOper.CanceledRefRecId == 0;

                if (purchTable || logTrans)
                {
                    ret = true;
                }

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookVATProcessLog</Name>
				<Source><![CDATA[
    public container bookVATProcessLog(ModuleCustVend  _module)
    {
        Common                                  processLogTable;
        SalesPurchBookDataMap_RU                processLogTrans;
        SalesPurchBookVATProcessLogTransOper_RU processLogTransOper;
        Map                                     mapTransRecId = new Map(extendedTypeId2Type(extendedTypeNum(RefTableId)), Types::Container);

        void addRecIdToMap(RefTableId _tableId, RefRecId _recId)
        {
            container conRecId;

            if (mapTransRecId.exists(_tableId))
            {
                conRecId = mapTransRecId.lookup(_tableId);
            }

            if (! conFind(conRecId, _recId))
            {
                conRecId += _recId;
            }

            mapTransRecId.insert(_tableId, conRecId);
        }

        processLogTable = new DictTable(_module == ModuleCustVend::Cust ? tableNum(SalesBookVATProcessLogTable_RU) :
                                                                         tableNum(PurchBookVATProcessLogTable_RU)).makeRecord();

        processLogTrans = new DictTable(_module == ModuleCustVend::Cust ? tableNum(SalesBookVATProcessLogTrans_RU) :
                                                                         tableNum(PurchBookVATProcessLogTrans_RU)).makeRecord();

        processLogTransOper = new DictTable(_module == ModuleCustVend::Cust ? tableNum(SalesBookVATProcessLogTransOper_RU) :
                                                                             tableNum(PurchBookVATProcessLogTransOper_RU)).makeRecord();

        while select RecId from processLogTrans
            where processLogTrans.FactureID == this.FactureId
        join RecId from processLogTransOper
            where processLogTransOper.RefRecId == processLogTrans.RecId
        join RecId from processLogTable
            where processLogTable.RecId == processLogTransOper.LogTableRefRecId
        {
            addRecIdToMap(processLogTable.TableId, processLogTable.RecId);
            addRecIdToMap(processLogTrans.TableId, processLogTrans.RecId);
            addRecIdToMap(processLogTransOper.TableId, processLogTransOper.RecId);
        }

        return mapTransRecId.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBooks</Name>
				<Source><![CDATA[
    private boolean checkBooks()
    {
        boolean ok, allOk = true;

        switch (this.Module)
        {
            case FactureModule_RU::Cust :
                if (this.FactureType == FactureType_RU::Prepayment)
                {
                    ok = this.checkPurchBook();
                    allOk = ok;
                }

                ok = this.checkSalesBook();
                if (allOk)
                {
                    allOk = ok;
                }
            break;
            case FactureModule_RU::Vend :
                ok = this.checkPurchBook();
                if (this.FactureType == FactureType_RU::Prepayment)
                {
                    ok = this.checkSalesBook() && ok;
                }
                allOk = ok;
            break;
            case FactureModule_RU::Empl :
                ok = this.checkPurchBook();
                allOk = ok;
            break;
            case FactureModule_RU::TaxCorrectionPurch      :
            case FactureModule_RU::TaxCorrectionPurch_Cust :
                ok = this.checkPurchBook();
                allOk = ok;
            break;
            case FactureModule_RU::TaxCorrectionSales      :
            case FactureModule_RU::TaxCorrectionSales_Vend :
                ok = this.checkSalesBook();
                allOk = ok;
            break;
        }

        if ( ! allOk)
            throw error("@GLS101992");

        return allOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchBook</Name>
				<Source><![CDATA[
    #VATTransitionPeriod_RU
    #ISOCountryRegionCodes
    private boolean checkPurchBook()
    {
        boolean ok = true;
        str     errMsg;

        switch (this.FactureType)
        {
            case FactureType_RU::AmoutDifference   :
            case FactureType_RU::ExchAdj           :
            case FactureType_RU::AdvanceAdjustment :
            case FactureType_RU::AdvanceReport     :
            case FactureType_RU::TaxCorrection     :
            case FactureType_RU::GTD               :
            case FactureType_RU::CustomCorrection  :
                ok = PurchBookTable_RU::canProcessDate(this.FactureReportDate);

                if ( ! ok)
                {
                    errMsg = strFmt("@GLS104853", this.FactureExternalId, this.FactureReportDate);
                }
            break;
            case FactureType_RU::Invoice         :
                if (this.FactureReportDate >= #TransitionStartDate && ! this.vatOnPayment)
                {
                    ok = PurchBookTable_RU::canProcessDate(this.FactureReportDate);

                    if ( ! ok)
                    {
                        errMsg = strFmt("@GLS104853", this.FactureExternalId, this.FactureReportDate);
                    }
                }
                else
                {
                   ok = FactureJour_RU::checkSettlement(this);
                }
            break;
            case FactureType_RU::Prepayment      :
                if (this.Module == FactureModule_RU::Cust)
                {
                    ok = FactureJour_RU::checkSettlement(this);
                }
                else
                {
                    ok = PurchBookTable_RU::canProcessDate(this.FactureReportDate);
                    if (! ok)
                    {
                        errMsg = strFmt("@GLS104853", this.FactureExternalId, this.FactureReportDate);
                    }
                }
            break;
        }

        if ( ! ok && errMsg != "")
            return checkFailed(errMsg);

        ok = this.checkRestoredVAT() && ok;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRestoredVAT</Name>
				<Source><![CDATA[
    private boolean checkRestoredVAT()
    {
        if ( RestoredVATLogTable_RU::checkApproved(this.FactureReportDate) &&
            (this.FactureType == FactureType_RU::Invoice             ||
             this.FactureType == FactureType_RU::AdvanceReport       ||
             this.FactureType == FactureType_RU::AdvanceAdjustment   ||
             this.FactureType == FactureType_RU::TaxCorrection))
        {
            return checkFailed(RestoredVATLogTable_RU::txtApprovedMsg(this.FactureReportDate));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesBook</Name>
				<Source><![CDATA[
    private boolean checkSalesBook()
    {
        boolean ok = true;
        str     errMsg;

        if (CustParameters::taxation_RU(this.FactureDate) == CustTaxation_RU::OnDelivery &&
            ! this.vatOnPayment &&
            ! this.ExportProcessing)
        {
            switch (this.FactureType)
            {
                case FactureType_RU::Invoice         :
                    this.checkVATReportPeriod();

                case FactureType_RU::AmoutDifference   :
                case FactureType_RU::ExchAdj           :
                case FactureType_RU::AdvanceAdjustment :
                case FactureType_RU::VATAdjustment     :
                case FactureType_RU::Prepayment        :
                case FactureType_RU::TaxCorrection     :
                    ok = SalesBookTable_RU::canProcessDate(this.FactureDate);
                    if (! ok)
                    {
                        errMsg = strFmt("@GLS101326", this.FactureExternalId, this.FactureDate);
                    }
                break;
            }
        }
        else //CustTaxation_RU::OnPayment
        {
            switch (this.FactureType)
            {
                case FactureType_RU::AmoutDifference   :
                case FactureType_RU::ExchAdj           :
                case FactureType_RU::AdvanceAdjustment :
                case FactureType_RU::VATAdjustment     :
                case FactureType_RU::Prepayment        :
                case FactureType_RU::TaxCorrection     :
                    ok = SalesBookTable_RU::canProcessDate(this.FactureDate);
                    if (! ok)
                    {
                        errMsg = strFmt("@GLS101326", this.FactureExternalId, this.FactureDate);
                    }

                break;

                case FactureType_RU::Invoice         :
                    ok = FactureJour_RU::checkSettlement(this);
                break;
            }
        }

        if ( ! ok && errMsg != "")
            return checkFailed(errMsg);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVATReportPeriod</Name>
				<Source><![CDATA[
    private boolean checkVATReportPeriod()
    {
        RecordSortedList invoiceList     = this.invoiceJourSortedList();
        CustInvoiceJour  custInvoiceJour = null;
        boolean          ok = true;

        while (invoiceList.next(custInvoiceJour))
        {
            ok = TaxReportPeriod::checkVATPeriod_RU(custInvoiceJour.InvoiceDate, this.FactureDate);

            if ( ! ok)
            {
                warning(strFmt("@GLS104854", custInvoiceJour.InvoiceId, this.FactureExternalId));
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates corrected period for current facture.
    /// </summary>
    /// <param name="_annulment">
    /// Is current record an annulment.
    /// </param>
    /// <returns>
    /// Date representing corrected period.
    /// </returns>
    public TransDate correctedPeriod(boolean _annulment = false)
    {
        FactureJour_RU  jour;
        FactureJour_RU  jourRevised;
        RefRecId        recId;
        TransDate       ret;
        SalesPurch      salesPurch;
        #SalesBook_RU

        if (this.CorrectedPeriod && ! _annulment)
        {
            return this.CorrectedPeriod;
        }

        switch (this.CorrectionType)
        {
            case FactureCorrectionType_RU::Unknown :
                ret = dateNull();
                break;

            case FactureCorrectionType_RU::Correction :
                if (conFind([FactureModule_RU::Cust,
                             FactureModule_RU::TaxCorrectionSales,
                             FactureModule_RU::TaxCorrectionPurch_Cust], this.Module) &&
                this.FactureAmount > 0                                            &&
                this.FactureDate_External < #correctionAddListDate)
                {
                    ret = this.factureDateOriginal();
                }
                else
                {
                    ret = this.FactureReportDate;
                }
                break;

            case FactureCorrectionType_RU::Revision :
                switch (this.Module)
                {
                    case FactureModule_RU::Vend                     :
                    case FactureModule_RU::Empl                     :
                    case FactureModule_RU::TaxCorrectionPurch       :
                    case FactureModule_RU::TaxCorrectionPurch_Cust  :
                        salesPurch = SalesPurch::Purch;
                        break;
                    case FactureModule_RU::Cust                     :
                    case FactureModule_RU::TaxCorrectionSales       :
                    case FactureModule_RU::TaxCorrectionSales_Vend  :
                        salesPurch = SalesPurch::Sales;
                        break;
                }

                jourRevised = FactureJour_RU::findRecId(this.RefRevisedFacture);
                if (jourRevised.CorrectedFactureExternalId             &&
                jourRevised.FactureType == FactureType_RU::Invoice &&
                jourRevised.creditNote())
                {
                    salesPurch = salesPurch == SalesPurch::Purch ? SalesPurch::Sales : SalesPurch::Purch;
                }

                if (this.FactureType == FactureType_RU::AdvanceAdjustment)
                {
                    //For advance adjustment both annulment and revision reflected at the same book
                    ret = this.CorrectedPeriod ? this.CorrectedPeriod : this.FactureReportDate;
                }
                else
                {
                    switch (salesPurch)
                    {
                        case SalesPurch::Purch :

                            if (_annulment)
                            {
                                recId = jourRevised.RecId;
                                if (recId)
                                {
                                    select firstonly jour
                                    order by CreatedDateTime desc, SeqNumber desc
                                    where  jour.RecId             == recId                ||
                                            (jour.RefRevisedFacture == recId                &&
                                            (jour.CreatedDateTime   <  this.CreatedDateTime ||
                                            (jour.CreatedDateTime   == this.CreatedDateTime &&
                                            jour.SeqNumber         <  this.SeqNumber)));

                                    ret = jour.FactureReportDate;
                                }
                            }
                            else
                            {
                                ret = this.FactureReportDate;
                            }
                            break;

                        case SalesPurch::Sales :
                            ret = jourRevised.CorrectedPeriod ?
                                  jourRevised.CorrectedPeriod :
                                  jourRevised.FactureReportDate;
                            break;
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNote</Name>
				<Source><![CDATA[
    display NoYes creditNote()
    {
        return this.FactureAmount >= 0 ? NoYes::No : NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendInvoiceJour</Name>
				<Source><![CDATA[
    private CustVendInvoiceJour custVendInvoiceJour()
    {
        RecordSortedList    recordSortedList;
        CustVendInvoiceJour custVendInvoiceJour;
        CustInvoiceJour     custInvoiceJour;
        VendInvoiceJour     vendInvoiceJour;

        switch (this.Module)
        {
            case FactureModule_RU::Cust:
                custVendInvoiceJour     = custInvoiceJour;
                break;

            case FactureModule_RU::Vend:
                custVendInvoiceJour     = vendInvoiceJour;
                break;

            default:
                return null;
        }

        recordSortedList = this.invoiceJourSortedList_CustVend();
        recordSortedList.next(custVendInvoiceJour);

        return custVendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns string value holding delivery address
    /// </summary>
    /// <returns>
    /// String value holding delivery address
    /// </returns>
    display LogisticsAddressing deliveryAddress()
    {
        return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>document</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assembles a document date and number for the facture.
    /// </summary>
    /// <returns>
    /// Comtainer with document nuamber and date.
    /// </returns>
    public container document()
    {
        DocumentNum         docNum;
        DocumentDate        docDate;

        FactureTrans_RU     tmpFactureTrans;
        LedgerJournalTrans  ledgerJournalTrans;
        Set                 docNumSet = new Set(Types::String);

        switch (this.FactureType)
        {
            case FactureType_RU::TaxCorrection   :
                if (this.VATTaxAgent && !this.DocumentNum && !this.DocumentDate)
                {
                    while select DocumentDate, DocumentNum from ledgerJournalTrans
                        group by DocumentDate, DocumentNum
                    exists join tmpFactureTrans
                            where tmpFactureTrans.MarkupRefRecId == ledgerJournalTrans.RecId &&
                                  tmpFactureTrans.Module         == this.Module              &&
                                  tmpFactureTrans.FactureId      == this.FactureId
                    {
                        docNumSet.add(ledgerJournalTrans.DocumentNum);

                        if (docNumSet.elements() > 1)
                        {
                            docNum  = '';
                            docDate = dateNull();
                            break;
                        }
                        docNum  = ledgerJournalTrans.DocumentNum;
                        docDate = ledgerJournalTrans.DocumentDate;
                    }
                }
                break;

            case FactureType_RU::Invoice:
                [ docNum, docDate ] = this.getPaymentInfo();
                break;
        }

        return [ docNum, docDate ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCorrections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if corrections exist for current record or current record is correction itself.
    /// </summary>
    /// <returns>
    /// True if corrections exists, otherwise false.
    /// </returns>
    public boolean existCorrections()
    {
        return (this.CorrectedFactureExternalId ||
                (select firstonly RecId from factureJour_RU
                     where factureJour_RU.CorrectedFactureExternalId == this.FactureExternalId &&
                           factureJour_RU.CorrectedFactureDate       == this.FactureDate       &&
                           factureJour_RU.CustVendInvoiceAccount     == this.CustVendInvoiceAccount).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsRDeferralsStorno</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if Deferrals storno exists for date range.
    /// </summary>
    /// <returns>True if storno exists, othervise false.</returns>
    public boolean existsRDeferralsStorno(FromDate _fromDate, ToDate _toDate)
    {
        boolean             ret                     = false;
        RDeferralsBookId    deferralsBookIdDefault  = RDeferralsParameters::find().DeferralsBookIdDefault;
        FactureTrans_RU     factureTrans;
        VendInvoiceTrans    vendInvoiceTrans;
        LedgerJournalTrans  ledgerJournalTrans;
        RDeferralsTable     deferralsTable;
        RDeferralsTrans     deferralsTrans;

        if (VendParameters::find().VatProcessGroupBy_RU)
        {
            select firstonly RecId from factureTrans
                where factureTrans.FactureId == this.FactureId &&
                      factureTrans.Module    == this.Module
            join TableId from vendInvoiceTrans
                where factureTrans.InvoiceLineNum      == vendInvoiceTrans.LineNum             &&
                      factureTrans.InternalInvoiceId   == vendInvoiceTrans.InternalInvoiceId   &&
                      factureTrans.InvoiceDate         == vendInvoiceTrans.InvoiceDate         &&
                      factureTrans.InvoiceId           == vendInvoiceTrans.InvoiceId           &&
                      factureTrans.SalesPurchId        == vendInvoiceTrans.PurchID             &&
                      factureTrans.NumberSequenceGroup == vendInvoiceTrans.NumberSequenceGroup &&
                      factureTrans.FactureLineType     == FactureLineType_RU::InvoiceLine
            join TableId from deferralsTable
                where deferralsTable.RefTableId == vendInvoiceTrans.TableId &&
                      deferralsTable.RefRecId   == vendInvoiceTrans.RecId
            join TableId from deferralsTrans
                where deferralsTrans.DeferralsId     == deferralsTable.DeferralsId &&
                      deferralsTrans.DeferralsBookId == deferralsBookIdDefault     &&
                      deferralsTrans.TransDate       >= _fromDate                  &&
                      deferralsTrans.TransDate       <= _toDate                    &&
                      deferralsTrans.StornoRecId     != 0;

            if (! factureTrans.RecId)
            {
                select firstonly RecId from factureTrans
                    where factureTrans.FactureId == this.FactureId &&
                          factureTrans.Module    == this.Module
                join TableId from ledgerJournalTrans
                    where ledgerJournalTrans.LineNum    == factureTrans.InvoiceLineNum &&
                          ledgerJournalTrans.JournalNum == factureTrans.InvoiceId      &&
                          ledgerJournalTrans.RecId      == factureTrans.MarkupRefRecId
                join TableId from deferralsTable
                    where deferralsTable.RefTableId == ledgerJournalTrans.TableId &&
                          deferralsTable.RefRecId   == ledgerJournalTrans.RecId
                join TableId from deferralsTrans
                    where deferralsTrans.DeferralsId     == deferralsTable.DeferralsId &&
                          deferralsTrans.DeferralsBookId == deferralsBookIdDefault     &&
                          deferralsTrans.TransDate       >= _fromDate                  &&
                          deferralsTrans.TransDate       <= _toDate                    &&
                          deferralsTrans.StornoRecId     != 0;
            }

            if (factureTrans.RecId)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expirationDate</Name>
				<Source><![CDATA[
    display SalesExpirationDate_RU expirationDate()
    {
        SalesExpirationDate_RU  expirationDate;

        #define.Sat(6)
        #define.Sun(7)
        #define.Two(2)

        if (this.RecId && this.ExportProcessing)
        {
            expirationDate  = this.ExportDate ? this.ExportDate : this.FactureDate;
            expirationDate += SalesPeriodConfirmation_RU::findPeriod(expirationDate);

            if (dayOfWk(expirationDate) == #Sat)
            {
                expirationDate += #Two;
            }
            else if (dayOfWk(expirationDate) == #Sun)
            {
                expirationDate += 1;
            }
        }
        return expirationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureDateOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns date of original facture.
    /// </summary>
    /// <returns>
    /// Date of original facture.
    /// </returns>
    display FactureDate_RU factureDateOriginal()
    {
        return this.getCorrectedFacture(true).FactureDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>FactureJourHeader_RU</c> record for current  facture.
    /// </summary>
    /// <param name="_forupdate">
    /// Should record be selected for update.
    /// </param>
    /// <returns>
    /// <c>FactureJourHeader_RU</c> record for current  facture.
    /// </returns>
    public FactureJourHeader_RU factureHeader(boolean _forupdate = false)
    {
        FactureJourHeader_RU  factureJourHeader;

        if (! this.isTmp())
        {
            factureJourHeader = FactureJourHeader_RU::find(this.RecId, _forupdate);
        }

        return factureJourHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureIdOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets id of original facture.
    /// </summary>
    /// <returns>
    /// Returns id of original facture.
    /// </returns>
    display FactureExternalId_RU factureIdOriginal()
    {
        if (this.OrigFactureExternalIdDisplay)
        {
            return this.OrigFactureExternalIdDisplay;
        }

        return this.getCorrectedFacture(true).FactureExternalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureRevDateOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets date of revised facture.
    /// </summary>
    /// <returns>
    /// Date of revised facture.
    /// </returns>
    public FactureDate_RU factureRevDateOriginal()
    {
        FactureJour_RU factureJour;

        select firstonly FactureDate_External from factureJour
            index hint RefRevisedFactureIdx
            order by CreatedDateTime desc, SeqNumber desc
            where factureJour.RefRevisedFacture == this.getCorrectedFacture(true).RecId &&
                 (factureJour.CreatedDateTime   <  this.CreatedDateTime                 ||
                 (factureJour.CreatedDateTime   == this.CreatedDateTime                 &&
                  factureJour.SeqNumber         <  this.SeqNumber));

        return factureJour.FactureDate_External;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureRevNumOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets revision number of original facture.
    /// </summary>
    /// <returns>
    /// Revision number of original facture.
    /// </returns>
    display RevisionNum_RU factureRevNumOriginal()
    {
        FactureJour_RU factureJour;

        select firstonly RevisionNum from factureJour
            index hint RefRevisedFactureIdx
            order by CreatedDateTime desc, SeqNumber desc
            where factureJour.RefRevisedFacture == this.getCorrectedFacture(true).RecId &&
                 (factureJour.CreatedDateTime   <  this.CreatedDateTime                 ||
                 (factureJour.CreatedDateTime   == this.CreatedDateTime                 &&
                  factureJour.SeqNumber         <  this.SeqNumber));

        return factureJour.RevisionNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureOperationTypeCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the facture operation codes for the current facture and given operation codes.
    /// </summary>
    /// <param name="_operationTypeCodes">
    /// The operation codes defined in the parameters.
    /// </param>
    /// <returns>
    /// The combined operation codes of facture journal and parameters.
    /// </returns>
    public FactureOperationTypeCodes_RU factureOperationTypeCodes(FactureOperationTypeCodes_RU _operationTypeCodes)
    {
        FactureOperationTypeCodes_RU            factureOperationTypeCodes;
        FactureOperationTypeCodesDelimiter_RU   delimiter;
        container                               operationTypeCodesCon, correctionOperationTypeCodesCon;
        int                                     i;
        Set                                     correctionCodesSet;

        void addByDefaultType(FactureOperationTypeDefault_RU _operationType)
        {
            if (OperationTypeList_RU::findByDefaultType(_operationType))
            {
                correctionCodesSet.add(OperationTypeList_RU::codeByDefaultType(_operationType));
            }
        }

        delimiter = SalesPurchBookDataMap_RU::factureOperationTypeCodesDelimiter_RU();

        if (_operationTypeCodes)
        {
            correctionCodesSet = new Set(Types::String);

            addByDefaultType(FactureOperationTypeDefault_RU::Correction);
            addByDefaultType(FactureOperationTypeDefault_RU::Revision);
            addByDefaultType(FactureOperationTypeDefault_RU::CorrectionRevision);

            operationTypeCodesCon = str2con_RU(this.OperationTypeCodes, delimiter);

            for (i = 1; i <= conlen(operationTypeCodesCon); i ++)
            {
                if (correctionCodesSet.in(conpeek(operationTypeCodesCon, i)))
                {
                    correctionOperationTypeCodesCon += [conpeek(operationTypeCodesCon, i)];
                }
            }

            if (conlen(correctionOperationTypeCodesCon))
            {
                factureOperationTypeCodes = con2str(correctionOperationTypeCodesCon, delimiter) + delimiter + _operationTypeCodes;
            }
            else
            {
                factureOperationTypeCodes = _operationTypeCodes;
            }
        }
        else
        {
            factureOperationTypeCodes = this.OperationTypeCodes;
        }

        return factureOperationTypeCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fineAmount</Name>
				<Source><![CDATA[
    display SalesExportFineAmountMST_RU fineAmount()
    {
        return (select sum(FineAmountToPost) from factureTrans_RU
                    where factureTrans_RU.FactureId == this.FactureId &&
                          factureTrans_RU.Module    == this.Module).FineAmountToPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns original <c>FactureJour_RU</c> record if header revision was made.
    /// </summary>
    /// <returns>
    /// Original <c>FactureJour_RU</c> record.
    /// </returns>
    public FactureJour_RU getActualJour()
    {
        FactureTrans_RU trans;
        FactureJour_RU  jour = this.data();

        if (this.HeaderRevision)
        {
            select firstonly jour
                order by CreatedDateTime desc, SeqNumber desc
                where (jour.RefRevisedFacture == this.RefRevisedFacture
                   ||  jour.RecId             == this.RefRevisedFacture)
                   && (jour.CreatedDateTime    < this.CreatedDateTime
                   || (jour.CreatedDateTime   == this.CreatedDateTime
                   &&  jour.SeqNumber          < this.SeqNumber))
            exists join trans
                where trans.FactureId == jour.FactureId
                   && trans.Module    == jour.Module;
        }

        return jour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectedFacture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a cursor containg a list of corrected factures.
    /// </summary>
    /// <param name="_findOriginal">
    /// Should the method find original factures.
    /// </param>
    /// <param name="_forUpdate">
    /// Should the method select for update.
    /// </param>
    /// <returns>
    /// A cursor containg a list of corrected factures.
    /// </returns>

    FactureJour_RU getCorrectedFacture(boolean _findOriginal = false,
                                                     boolean _forUpdate    = false)
    {
        FactureJour_RU                  correctedFacture;
        FactureCorrectionReference_RU   correctReference;
        FactureOriginalReference_RU     originalReference;
        FactureJour_RU                  factureJour = this.rev0().data();

        if (! factureJour.CorrectedFactureExternalId)
        {
            return _findOriginal || this.RefRevisedFacture      ?
                   FactureJour_RU::findRecId(factureJour.RecId) :
                   correctedFacture;
        }

        correctedFacture.selectForUpdate(_forUpdate);

        if (_findOriginal &&
            ! factureJour.RefOriginalFacture)
        {
            select correctedFacture
                exists join originalReference
                    where originalReference.FactureJour_RU      == factureJour.RecId &&
                          originalReference.RefOriginalFacture  == correctedFacture.RecId;

            if (correctedFacture)
            {
            return correctedFacture;
        }
        }

        if (! _findOriginal && factureJour.JointCorrection)
        {
            select correctedFacture
                exists join correctReference
                    where correctReference.FactureJour_RU       == factureJour.RecId &&
                          correctReference.RefCorrectedFacture  == correctedFacture.RecId;

            return correctedFacture;
        }

        correctedFacture = FactureJour_RU::findCorrectedFacture(factureJour.Module,
                                                                factureJour.CustVendInvoiceAccount,
                                                                factureJour.CorrectedFactureExternalId,
                                                                factureJour.CorrectedFactureDate,
                                                                _findOriginal,
                                                                factureJour.RefOriginalFacture,
                                                                _forUpdate);

        return correctedFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastCorrFacture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns last correcting facture in the tree for the current facture.
    /// </summary>
    /// <returns>
    /// The last correcting facture in the tree for the current facture.
    /// </returns>

    public FactureJour_RU getLastCorrFacture()
    {
        FactureCorrectionReference_RU   correctReference;
        FactureJour_RU                  correctingFacture;
        FactureJour_RU                  factureJour = this.rev0().data();

        select firstonly correctingFacture
            exists join correctReference
                where correctReference.FactureJour_RU       == correctingFacture.RecId &&
                      correctReference.RefCorrectedFacture  == factureJour.RecId;

        if (! correctingFacture)
        {
            if (factureJour.RefOriginalFacture || factureJour.RefLastCorrFacture)
            {
                select firstonly correctingFacture
                    where((factureJour.RefOriginalFacture                                                       &&
                          correctingFacture.RefOriginalFacture          == factureJour.RefOriginalFacture)      ||
                          (factureJour.RefLastCorrFacture                                                       &&
                          correctingFacture.RefLastCorrFacture          == factureJour.RefLastCorrFacture))     &&
                          correctingFacture.CustVendInvoiceAccount      == factureJour.CustVendInvoiceAccount   &&
                          correctingFacture.CorrectedFactureExternalId  == factureJour.FactureExternalId        &&
                          correctingFacture.CorrectedFactureDate        == factureJour.FactureDate              &&
                          correctingFacture.CorrectionType              != FactureCorrectionType_RU::Revision   &&
                          correctingFacture.RecId                       != factureJour.RecId;
            }
            else
            {
                switch (factureJour.Module)
                {
                    case FactureModule_RU::Cust                     :
                    case FactureModule_RU::TaxCorrectionSales       :
                    case FactureModule_RU::TaxCorrectionPurch_Cust  :
                        select firstonly correctingFacture
                            where (correctingFacture.Module                      == FactureModule_RU::TaxCorrectionSales      ||
                                   correctingFacture.Module                      == FactureModule_RU::TaxCorrectionPurch_Cust ||
                                   correctingFacture.Module                      == FactureModule_RU::Cust)                   &&
                                   correctingFacture.CustVendInvoiceAccount      == factureJour.CustVendInvoiceAccount        &&
                                   correctingFacture.CorrectedFactureExternalId  == factureJour.FactureExternalId             &&
                                   correctingFacture.CorrectedFactureDate        == factureJour.FactureDate                   &&
                                   correctingFacture.CorrectionType              != FactureCorrectionType_RU::Revision;
                        break;
                    case FactureModule_RU::Vend                     :
                    case FactureModule_RU::Empl                     :
                    case FactureModule_RU::TaxCorrectionPurch       :
                    case FactureModule_RU::TaxCorrectionSales_Vend  :
                        select firstonly correctingFacture
                            where (correctingFacture.Module                      == FactureModule_RU::TaxCorrectionPurch      ||
                                   correctingFacture.Module                      == FactureModule_RU::TaxCorrectionSales_Vend ||
                                   correctingFacture.Module                      == FactureModule_RU::Vend                    ||
                                   correctingFacture.Module                      == FactureModule_RU::Empl)                   &&
                                   correctingFacture.CustVendInvoiceAccount      == factureJour.CustVendInvoiceAccount        &&
                                   correctingFacture.CorrectedFactureExternalId  == factureJour.FactureExternalId             &&
                                   correctingFacture.CorrectedFactureDate        == factureJour.FactureDate                   &&
                                   correctingFacture.CorrectionType              != FactureCorrectionType_RU::Revision;
                        break;
                }
            }
        }

        if (correctingFacture)
        {
            factureJour = correctingFacture.getLastCorrFacture();
        }

        return factureJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates information about associated payments for facture printout.
    /// </summary>
    /// <returns>
    /// Container with
    /// <list type="bullet">
    /// <item>List of payment numbers.</item>
    /// <item>Latest payment date.</item>
    /// </list>
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Facture module is neither <c>FactureModule_RU::Cust</c> nor <c>FactureModule_RU::Vend</c>.
    /// </exception>
    private container getPaymentInfo()
    {
        RecordSortedList    rst;
        CustVendInvoiceJour custVendInvoiceJour;

        CustVendTrans       custVendTrans, custVendTransPayment;
        CustVendSettlement  custVendSettlement;

        DocumentNum         docuNum;
        DocumentDate        docDate;

        Set                 docuNumSet = new Set(Types::String);

        switch (this.Module)
        {
            case FactureModule_RU::Cust :
                custVendInvoiceJour  = new DictTable(tableNum(CustInvoiceJour)).makeRecord();
                custVendTrans        = new DictTable(tableNum(CustTrans)).makeRecord();
                custVendTransPayment = new DictTable(tableNum(CustTrans)).makeRecord();
                custVendSettlement   = new DictTable(tableNum(CustSettlement)).makeRecord();
                break;
            case FactureModule_RU::Vend :
                custVendInvoiceJour  = new DictTable(tableNum(VendInvoiceJour)).makeRecord();
                custVendTrans        = new DictTable(tableNum(VendTrans)).makeRecord();
                custVendTransPayment = new DictTable(tableNum(VendTrans)).makeRecord();
                custVendSettlement   = new DictTable(tableNum(VendSettlement)).makeRecord();
                break;
            default                     :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        rst = this.invoiceJourSortedList_CustVend();
        while (rst.next(custVendInvoiceJour))
        {
            custVendTrans = custVendInvoiceJour.CustVendInvoiceJour::custVendTrans(custVendTrans);

            infolog.clear();

            while select DocumentNum, TransDate from custVendTransPayment
                order by custVendTransPayment.DocumentNum
                where custVendTransPayment.DocumentNum
            exists join custVendSettlement
                where custVendSettlement.AccountNum         == custVendTransPayment.AccountNum
                   && custVendSettlement.OffsetTransVoucher == custVendTransPayment.Voucher
                   && custVendSettlement.OffsetRecid        == custVendTransPayment.Recid
                   && custVendSettlement.TransCompany       == custVendTrans.DataAreaId
                   && custVendSettlement.TransRecId         == custVendTrans.RecId
                   && custVendSettlement.AccountNum         == custVendTrans.AccountNum
            {
                docuNumSet.add(custVendTransPayment.DocumentNum);
                docDate = max(docDate, custVendTransPayment.TransDate);
            }
        }

        if (docuNumSet.elements())
        {
            docuNum = strRem(docuNumSet.toString(), '{"}');
        }

        return [ docuNum, docDate ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets temporary table containing lines linked to current journal.
    /// </summary>
    /// <returns>
    /// Temporary table with lines of current facture journal.
    /// </returns>
    public FactureTrans_RU getTmpTrans()
    {
        #define.cursorPos(3)
        FactureTaxCorrectionEngine_RU   taxCorrectionEngine;
        FactureTrans_RU                 trans, transTmp, transTmpCount;

        FactureJour_RU jour = this.data();

        transTmp.setTmp();
        transTmpCount.setTmp();

        if (! this)
        {
            return transTmp;
        }

        if (jour.CorrectionType == FactureCorrectionType_RU::Revision)
        {
            taxCorrectionEngine = FactureTaxCorrectionEngine_RU::newParameters(jour, false, true, false, true);
            transTmp.setTmpData(taxCorrectionEngine.getFactureTransOrig());
            transTmpCount.setTmpData(transTmp);
            while select forupdate transTmp
            {
                select maxof(LineNum) from transTmpCount;

                transTmp.FactureId  = this.FactureId;
                transTmp.Module     = this.Module;
                transTmp.LineNum    = transTmpCount.LineNum + 1;
                transTmp.update();
            }
        }
        else
        {
            jour = this.getActualJour();
            while select trans
                where trans.FactureId == jour.FactureId &&
                      trans.Module    == jour.Module
            {
                buf2Buf(trans, transTmp);
                transTmp.FactureId          = this.FactureId;
                transTmp.Module             = this.Module;
                transTmp.InvoiceTransRecId  = trans.RecId;
                transTmp.insert();
            }
        }

        return transTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNonVATTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method determines if facture has lines without VAT.
    /// </summary>
    /// <returns>
    /// True if facture contains lines without VAT tax; otherwise false.
    /// </returns>
    public boolean hasNonVATTrans()
    {
        return FactureTrans_RU::existFactureNonVATTrans(this.FactureId, this.Module);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if current record has lines with VAT for actual facture journal.
    /// </summary>
    /// <returns>
    /// True, if current record has lines with VAT, otherwise false.
    /// </returns>
    public boolean hasVAT()
    {
        return FactureJour_RU::factureHasVAT(this.getActualJour());
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasVATTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method determines if facture has lines with VAT.
    /// </summary>
    /// <returns>
    /// True if facture contains lines with VAT tax; otherwise false.
    /// </returns>
    public boolean hasVATTrans()
    {
        return FactureTrans_RU::existFactureVATTrans(this.FactureId, this.Module);
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if <c>FactureJourHeader_RU</c> record exists.
    /// </summary>
    /// <returns>
    /// True, if <c>FactureJourHeader_RU</c> record exists, otherwise false.
    /// </returns>
    public boolean headerExist()
    {
        return FactureJourHeader_RU::exist(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>indebtednessSourceInvoiceJour</Name>
				<Source><![CDATA[
    public CustVendInvoiceJour indebtednessSourceInvoiceJour()
    {
        RecordSortedList            recordSortedList;
        CustVendInvoiceJour         custVendInvoiceJour;
        CustInvoiceJour             custInvoiceJour;
        VendInvoiceJour             vendInvoiceJour;
        CustTrans                   custTrans;
        VendTrans                   vendTrans;
        CostAllocationHistory_RU    costAllocationHistory;
        CustVendTrans               custVendTrans;

        switch (this.Module)
        {
            case FactureModule_RU::Cust :
                custVendInvoiceJour     = custInvoiceJour;
                custVendTrans           = custTrans;
                break;

            case FactureModule_RU::Vend :
                custVendInvoiceJour     = vendInvoiceJour;
                custVendTrans           = vendTrans;
                break;

            default                     :
                return null;
        }

        recordSortedList = this.invoiceJourSortedList_CustVend();
        recordSortedList.next(custVendInvoiceJour);
        custVendInvoiceJour.CustVendInvoiceJour::custVendTrans(custVendTrans);

        select firstonly RecId from costAllocationHistory
            where costAllocationHistory.IndebtednessTransRecId   == custVendTrans.RecId
            join vendInvoiceJour
                where vendInvoiceJour.RecId                      == costAllocationHistory.AllocatedInvoiceJourRecId;

        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromExportFacture</Name>
				<Source><![CDATA[
    void initFromExportFacture(FactureJour_RU   _exportFacture)
    {
        this.Module                     = _exportFacture.Module;
        this.FactureType                = FactureType_RU::Facture;
        this.Voucher                    = _exportFacture.Voucher;
        this.CurrencyCode               = _exportFacture.CurrencyCode;
        this.CustVendInvoiceAccount     = _exportFacture.CustVendInvoiceAccount;
        this.Consignee                  = _exportFacture.Consignee;
        this.Consignor                  = _exportFacture.Consignor;
        this.NumberSequenceGroupId      = _exportFacture.NumberSequenceGroupId;
        this.PrintInMST                 = _exportFacture.PrintInMST;
        this.DocumentNum                = _exportFacture.DocumentNum;
        this.DocumentDate               = _exportFacture.DocumentDate;
        this.LanguageId                 = _exportFacture.LanguageId;
        this.PackageDate                = _exportFacture.PackageDate;
        this.ExportDate                 = _exportFacture.ExportDate;
        this.ConfirmationDate           = _exportFacture.ConfirmationDate;
        this.ExportProcessing           = _exportFacture.ExportProcessing;
        this.OffSessionId               = _exportFacture.OffSessionId;
        this.SourceExportFactureDate    = _exportFacture.FactureDate;
        this.SourceExportFactureId      = _exportFacture.FactureId;
        this.SourceExportFactureIdExt   = _exportFacture.FactureExternalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(boolean _checkBooks = false)
    {
        LedgerParameters ledgerParameters;

        FactureJourParm_RU    factureJourParm;
        FactureHeaderData_RU  headerData;
        FactureJourHeader_RU  factureJourHeader;

        if (! this.FactureReportDate)
        {
            this.FactureReportDate = this.FactureDate;
        }
  
        if (! _checkBooks || this.checkBooks())
        {
            ttsBegin;

            super();

            if (LedgerParameters::find().PrecalcDataActual_RU)
            {
                ledgerParameters = LedgerParameters::find(true);
                ledgerParameters.PrecalcDataActual_RU = NoYes::No;
                ledgerParameters.update();
            }

            ttsCommit;

            if (! this.isTmp() && ! FactureJourHeader_RU::exist(this.RecId))
            {
                factureJourParm   = FactureJourParm_RU::newParameters(this);
                headerData        = FactureHeaderData_RU::newFromCaller(factureJourParm);
                headerData.setFactureCreate(true);

                buf2Buf(headerData.getHeaderTmp(), factureJourHeader);
                factureJourHeader.FactureJourRef = this.RecId;
                factureJourHeader.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourSortedList</Name>
				<Source><![CDATA[
    // returns all invoices included into the facture
    // as well as advance reports and tax correction ledger journals
    public RecordSortedList invoiceJourSortedList()
    {
        RecordSortedList        ret;

        switch (this.Module)
        {
            case FactureModule_RU::Cust :
            case FactureModule_RU::Vend :
                ret = this.invoiceJourSortedList_CustVend();
                break;
            case FactureModule_RU::Empl :
                ret = this.invoiceJourSortedList_Empl();
                break;
            case FactureModule_RU::TaxCorrectionPurch      :
            case FactureModule_RU::TaxCorrectionSales      :
            case FactureModule_RU::TaxCorrectionPurch_Cust :
            case FactureModule_RU::TaxCorrectionSales_Vend :
                ret = this.invoiceJourSortedList_TaxCorrection();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourSortedList_CustVend</Name>
				<Source><![CDATA[
    #define.InvoiceDate("InvoiceDate")
    #define.InvoiceId("InvoiceId")
    #define.RecId("RecId")

    public RecordSortedList invoiceJourSortedList_CustVend()
    {
        CustInvoiceJour         custInvoiceJour;
        VendInvoiceJour         vendInvoiceJour;
        CustVendInvoiceJour     custVendInvoiceJour;

        CustInvoiceTrans        custInvoiceTrans;
        VendInvoiceTrans        vendInvoiceTrans;
        CustVendInvoiceTrans    custVendInvoiceTrans;

        MarkupTrans             markupTrans;
        FactureTrans_RU         factureTrans;

        RecordSortedList        ret;

        switch (this.Module)
        {
            case FactureModule_RU::Cust :
                custVendInvoiceJour     = custInvoiceJour;
                custVendInvoiceTrans    = custInvoiceTrans;
                break;
            case FactureModule_RU::Vend :
                custVendInvoiceJour     = vendInvoiceJour;
                custVendInvoiceTrans    = vendInvoiceTrans;
                break;
            default                     :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        ret = new RecordSortedList(custVendInvoiceJour.TableId);

        ret.sortOrder(fieldName2id(custVendInvoiceJour.TableId, #InvoiceDate),
                      fieldName2id(custVendInvoiceJour.TableId, #InvoiceId),
                      fieldName2id(custVendInvoiceJour.TableId, #RecId));

        while select custVendInvoiceJour
        exists join  factureTrans
            where custVendInvoiceJour.InvoiceAccount == this.CustVendInvoiceAccount               &&
                  factureTrans.Module                == this.Module                               &&
                  factureTrans.FactureId             == this.FactureId                            &&
                  (factureTrans.FactureLineType       == FactureLineType_RU::InvoiceLine      ||
                   factureTrans.FactureLineType       == FactureLineType_RU::InvoiceEndDisc   ||
                   factureTrans.FactureLineType       == FactureLineType_RU::InvoiceRoundOff)     &&
                  factureTrans.InvoiceDate           == custVendInvoiceJour.InvoiceDate           &&
                  factureTrans.InvoiceId             == custVendInvoiceJour.InvoiceId             &&
                  factureTrans.SalesPurchId          == custVendInvoiceJour.Num                   &&
                  factureTrans.NumberSequenceGroup   == custVendInvoiceJour.NumberSequenceGroupId &&
                  (this.Module == FactureModule_RU::Cust ||
                   (this.Module == FactureModule_RU::Vend &&
                    factureTrans.InternalInvoiceId  == custVendInvoiceJour.PurchInternalInvoiceId_RU))
        {
            if (! ret.find(custVendInvoiceJour))
            {
                ret.ins(custVendInvoiceJour);
            }
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Markup)))
        {
            while select custVendInvoiceJour
            exists join custVendInvoiceTrans
            exists join markupTrans
            exists join factureTrans
                where custVendInvoiceJour.InvoiceAccount   == this.CustVendInvoiceAccount                  &&
                      custVendInvoiceTrans.SalesPurchId_RU == custVendInvoiceJour.Num                      &&
                      custVendInvoiceTrans.InvoiceNum      == custVendInvoiceJour.InvoiceId                &&
                      (this.Module == FactureModule_RU::Cust ||
                       (this.Module == FactureModule_RU::Vend &&
                        custVendInvoiceTrans.PurchInternalInvoiceId_RU == custVendInvoiceJour.PurchInternalInvoiceId_RU)) &&
                      custVendInvoiceTrans.InvoiceDate  == custVendInvoiceJour.InvoiceDate              &&
                      custVendInvoiceTrans.NumberSequenceGroupId_RU
                                                        == custVendInvoiceJour.NumberSequenceGroupId    &&
                      markupTrans.TransTableId          == custVendInvoiceTrans.TableId                 &&
                      markupTrans.TransRecId            == custVendInvoiceTrans.RecId                   &&
                      factureTrans.MarkupRefRecId       == markupTrans.RecId                            &&
                      factureTrans.FactureLineType      == FactureLineType_RU::Markup                   &&
                      factureTrans.Module               == this.Module                                  &&
                      factureTrans.FactureId            == this.FactureId
            {
                if (! ret.find(custVendInvoiceJour))
                {
                    ret.ins(custVendInvoiceJour);
                }
            }

            while select custVendInvoiceJour
                   join RecId from markupTrans
                   join RecId from factureTrans
                where custVendInvoiceJour.InvoiceAccount
                                                    == this.CustVendInvoiceAccount      &&
                      markupTrans.TransTableId      == custVendInvoiceJour.TableId      &&
                      markupTrans.TransRecId        == custVendInvoiceJour.RecId        &&
                      factureTrans.MarkupRefRecId   == markupTrans.RecId                &&
                      factureTrans.Module           == this.Module                      &&
                      factureTrans.FactureLineType  == FactureLineType_RU::Markup       &&
                      factureTrans.FactureId        == this.FactureId
            {
                if (! ret.find(custVendInvoiceJour))
                {
                    ret.ins(custVendInvoiceJour);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourSortedList_Empl</Name>
				<Source><![CDATA[
    public RecordSortedList invoiceJourSortedList_Empl()
    {
        EmplAdvTable_RU     emplAdvTable;

        FactureTrans_RU     factureTrans;

        RecordSortedList    ret;

        ret = new RecordSortedList(tableNum(EmplAdvTable_RU));

        ret.sortOrder(fieldNum(EmplAdvTable_RU, TransDate),
                      fieldNum(EmplAdvTable_RU, AdvanceId),
                      fieldNum(EmplAdvTable_RU, RecId));

        while select InvoiceId from factureTrans
            where factureTrans.Module                == this.Module                               &&
                  factureTrans.FactureId             == this.FactureId                            &&
                  factureTrans.FactureLineType       == FactureLineType_RU::AdvanceReport
        {
            emplAdvTable = EmplAdvTable_RU::find(factureTrans.InvoiceId);
            if (! ret.find(emplAdvTable))
            {
                ret.ins(emplAdvTable);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourSortedList_TaxCorrection</Name>
				<Source><![CDATA[
    public RecordSortedList invoiceJourSortedList_TaxCorrection()
    {
        LedgerJournalTable  ledgerJournalTable;
        FactureTrans_RU     factureTrans;

        RecordSortedList    ret = new RecordSortedList(tableNum(LedgerJournalTable));

        while select ledgerJournalTable
        exists join  factureTrans
            where ledgerJournalTable.Posted                                           &&
                  ledgerJournalTable.JournalType == LedgerJournalType::Daily          &&
                  factureTrans.InvoiceId         == ledgerJournalTable.JournalNum     &&
                  factureTrans.FactureId         == this.FactureId                    &&
                  factureTrans.Module            == this.Module                       &&
                  factureTrans.FactureLineType   == FactureLineType_RU::TaxCorrection
        {
            ret.ins(ledgerJournalTable);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBlockedForBookFacture</Name>
				<Source><![CDATA[
    public boolean isBlockedForBookFacture()
    {
        CustVendInvoiceJour custVendInvoiceJour = this.custVendInvoiceJour();

        return custVendInvoiceJour && custVendInvoiceJour.isBlockedForBookInvoice_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if current record is Correction.
    /// </summary>
    /// <returns>
    /// True if current record is correction, otherwise false.
    /// </returns>
    public boolean isCorrection()
    {
        FactureJour_RU jour = this.CorrectionType == FactureCorrectionType_RU::Revision ?
                              FactureJour_RU::findRecId(this.RefRevisedFacture)         :
                              this;

        return jour.CorrectedFactureExternalId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCostAllocationFacture</Name>
				<Source><![CDATA[
    public boolean isCostAllocationFacture()
    {
        CustVendInvoiceJour custVendInvoiceJour = this.custVendInvoiceJour();

        return custVendInvoiceJour && custVendInvoiceJour.isCostAllocationInvoice_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomUnionSale</Name>
				<Source><![CDATA[
    #isoCountryRegionCodes
    public boolean isCustomUnionSale(FactureJour_RU _factureJour)
    {
        FactureJourHeader_RU locFactureHeader;
        LogisticsAddressCountryRegion countryRegion;

        locFactureHeader = _factureJour.factureHeader();

        countryRegion = LogisticsAddressCountryRegion::find(DirParty::primaryPostalAddress(locFactureHeader.ConsigneeParty).CountryRegionId);

        return countryRegion.MemberOfCustomsUnion_RU && countryRegion.ISOcode != #isoRU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExportFacture</Name>
				<Source><![CDATA[
    boolean isExportFacture()
    {
        return this.ExportProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIndebtednessFacture</Name>
				<Source><![CDATA[
    public boolean isIndebtednessFacture()
    {
        CustVendInvoiceJour custVendInvoiceJour = this.custVendInvoiceJour();

        return custVendInvoiceJour && custVendInvoiceJour.isIndebtednessInvoice_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPuchaseCommission</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines, if current record is purchase commission.
    /// </summary>
    /// <returns>
    /// True, if current record is purchase commission, otherwise false.
    /// </returns>
    public boolean isPuchaseCommission()
    {
        FactureJourParm_RU    factureJourParm;
        FactureHeaderData_RU  headerData;
        FactureJourHeader_RU  factureJourHeader;

        if (this.Module != FactureModule_RU::Cust || (this.FactureType != FactureType_RU::Invoice &&
                                                      this.FactureType != FactureType_RU::Prepayment))
        {
            return false;
        }

        factureJourHeader = this.factureHeader();

        if (! factureJourHeader)
        {
            factureJourParm   = FactureJourParm_RU::newParameters(this);
            headerData        = FactureHeaderData_RU::newFromCaller(factureJourParm);
            factureJourHeader = headerData.getHeaderTmp();
        }

        return factureJourHeader.AgencyAgreement == AgencyAgreement_RU::PurchaseCommission;
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    public LanguageId languageId()
    {
        LanguageId          ret;
        RecordSortedList    list;
        CustInvoiceJour     jour;
        Set                 languages;

        if (this.LanguageId)
            return this.LanguageId;

        switch (this.Module)
        {
            case FactureModule_RU::Empl, FactureModule_RU::Vend :
                ret = CompanyInfo::languageId();
                break;
            case FactureModule_RU::Cust :
                languages = new Set(Types::String);
                if (this.FactureType == FactureType_RU::Invoice)
                {
                    list = this.invoiceJourSortedList();
                    list.first(jour);
                    do
                    {
                        if (jour && ! languages.in(jour.LanguageId))
                        {
                            languages.add(jour.LanguageId);
                        }
                    }
                    while (list.next(jour));
                }
                if (languages.elements() == 1)
                {
                    ret = new SetIterator(languages).value();
                }
                else
                {
                    ret = CustTable::find(this.CustVendInvoiceAccount).languageId();
                }
                break;
        }

        return ret ? ret : CompanyInfo::languageId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTrans</Name>
				<Source><![CDATA[
    public FactureTrans_RU newTrans(AmountCur          _lineAmount,
                                           TaxAmountCur       _taxAmount,
                                           TaxAmountExcise_RU _exciseAmount,
                                           FactureLineType_RU _lineType,
                                           ExchRate           _exchRate,
                                           TaxValue           _vatValue,
                                           TaxAmount          _vatZero,
                                           TaxAmount          _vatReduced,
                                           TaxAmount          _vat,
                                           VATType_RU         _vatType,
                                           ItemName           _itemName,
                                           DimensionDefault   _defaultDimension,
                                           AmountMST          _lineAmountMST   = CurrencyExchangeHelper::amount(_lineAmount   * _exchRate / 100, this.CurrencyCode),
                                           TaxAmount          _taxAmountMST    = CurrencyExchangeHelper::amount(_taxAmount    * _exchRate / 100, this.CurrencyCode),
                                           TaxAmount          _exciseAmountMST = CurrencyExchangeHelper::amount(_exciseAmount * _exchRate / 100, this.CurrencyCode),
                                           TaxAmount          _vatZeroMST      = CurrencyExchangeHelper::amount(_vatZero      * _exchRate / 100, this.CurrencyCode),
                                           TaxAmount          _vatReducedMST   = CurrencyExchangeHelper::amount(_vatReduced   * _exchRate / 100, this.CurrencyCode),
                                           TaxAmount          _vatFullMST      = CurrencyExchangeHelper::amount(_vat          * _exchRate / 100, this.CurrencyCode))
    {
        FactureTrans_RU trans, tmpTrans;

        select count(RecId)
            from  tmpTrans
            where tmpTrans.FactureId == this.FactureId &&
                  tmpTrans.Module    == this.Module;

        trans.FactureId         = this.FactureId;
        trans.InvoiceId         = "";
        trans.InvoiceDate       = dateNull();
        trans.LineNum           = any2int(tmpTrans.RecId + 1);
        trans.InternalInvoiceId = "";
        trans.Qty               = 0;
        trans.LineAmount        = _lineAmount;
        trans.Unit              = "";
        trans.TaxAmount         = _taxAmount;
        trans.Excise            = _exciseAmount;
        trans.InventTransId     = "";
        trans.InventDimId       = "";
        trans.DefaultDimension  = _defaultDimension;
        trans.InventGTDId       = "";
        trans.CountryRegionName = "";
        trans.FactureLineType   = _lineType;
        trans.Module            = this.Module;
        trans.InvoiceLineNum    = 0;
        trans.ExchRate          = _exchRate;
        trans.vatValue          = _vatValue;
        trans.Price             = 0;
        switch (_vatType)
        {
            case VATType_RU::NonLiable :
                break;
            case VATType_RU::Full      :
                trans.vat          = _vat;
                trans.vatAmountMST = _vatFullMST;
                break;
            case VATType_RU::Reduced   :
                trans.vat          = _vatReduced;
                trans.vatAmountMST = _vatReducedMST;
                break;
            case VATType_RU::Zero      :
                trans.vat          = _vatZero;
                trans.vatAmountMST = _vatZeroMST;
                break;
        }
        trans.vatType          = _vatType;
        trans.ItemName         = _itemName;
        trans.ExciseValue      = 0;
        trans.MarkupRefRecId   = 0;
        trans.MarkupRefTableId = 0;

        trans.LineAmountMST   = _lineAmountMST;
        trans.TaxAmountMST    = _taxAmountMST;
        trans.ExciseAmountMST = _exciseAmountMST;

        trans.insert();

        return trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfLines</Name>
				<Source><![CDATA[
    public int numOfLines(FactureTrans_RU _trans,
                                 boolean         _group)
    {
        int ret = 0;

        if (_group)
        {
            while select FactureLineType from _trans
                group by Price,
                         FactureLineType,
                         ItemName,
                         Unit,
                         vatValue,
                         CountryRegionName,
                         ItemId,
                         Category,
                         InventGTDId,
                         ExchRate
                where _trans.FactureId == this.FactureId &&
                      _trans.Module    == this.Module
            {
                ret ++;
            }
        }
        else
        {
            select count(RecId)
                from  _trans
                where _trans.FactureId == this.FactureId &&
                      _trans.Module    == this.Module;
            ret = any2int(_trans.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    public str orderAccount(FactureTrans_RU _trans = null)
    {
        FactureTrans_RU  trans;
        CustInvoiceJour  custJour;
        VendInvoiceJour  vendJour;
        str              ret;

        if (_trans)
        {
            trans = _trans;
        }
        else
        {
            select firstonly Module,
                             SalesPurchId,
                             InvoiceId,
                             InvoiceDate,
                             NumberSequenceGroup,
                             InternalInvoiceId
            from trans
                where trans.Module    == this.Module      &&
                      trans.FactureId == this.FactureId;
        }

        switch (this.Module)
        {
            case FactureModule_RU::Cust :
                custJour = CustInvoiceJour::findFromCustInvoiceTrans(trans.SalesPurchId,
                                                                    trans.InvoiceId,
                                                                    trans.InvoiceDate,
                                                                    trans.NumberSequenceGroup);
                ret = custJour.OrderAccount;
                break;
            case FactureModule_RU::Vend :
                vendJour = VendInvoiceJour::findFromVendInvoiceTrans(trans.SalesPurchId,
                                                                    trans.InvoiceId,
                                                                    trans.InvoiceDate,
                                                                    trans.NumberSequenceGroup,
                                                                    trans.InternalInvoiceId);
                ret = vendJour.OrderAccount;
                break;
            case FactureModule_RU::Empl :
                ret = EmplAdvTable_RU::find(trans.InvoiceId).EmplAccount;
                break;
            case FactureModule_RU::TaxCorrectionPurch      :
            case FactureModule_RU::TaxCorrectionSales      :
            case FactureModule_RU::TaxCorrectionPurch_Cust :
            case FactureModule_RU::TaxCorrectionSales_Vend :
                ret = this.CustVendInvoiceAccount;
                break;
            default                     :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevRevisionDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets previous revision date.
    /// </summary>
    /// <returns>
    /// Date of previous revision.
    /// </returns>
    public TransDate prevRevisionDate()
    {
        FactureJour_RU  factureJour;

        if (this.RefRevisedFacture)
        {
            select firstonly FactureDate_External
            from factureJour
                order by CreatedDateTime desc, SeqNumber desc
                where factureJour.RefRevisedFacture == this.RefRevisedFacture &&
                     (factureJour.CreatedDateTime   <  this.CreatedDateTime   ||
                     (factureJour.CreatedDateTime   == this.CreatedDateTime   &&
                      factureJour.SeqNumber         <  this.SeqNumber));
        }

        return factureJour.FactureDate_External;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingModule</Name>
				<Source><![CDATA[
    public ModuleCustVend processingModule(FactureModule_RU _processingLogModule = this.Module)
    {
        ModuleCustVend  ret;

        switch (this.Module)
        {
            case FactureModule_RU::Cust                     :
            case FactureModule_RU::TaxCorrectionSales       :
            case FactureModule_RU::TaxCorrectionSales_Vend  :
                ret = ModuleCustVend::Cust;
                break;
            case FactureModule_RU::Vend                     :
            case FactureModule_RU::Empl                     :
            case FactureModule_RU::TaxCorrectionPurch       :
            case FactureModule_RU::TaxCorrectionPurch_Cust  :
                ret = ModuleCustVend::Vend;
                break;
            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (this.FactureType == FactureType_RU::Prepayment)
        {
            // customer prepayment storno is reflected in incoming VAT processing
            if (ret == ModuleCustVend::Cust && _processingLogModule == FactureModule_RU::Vend)
            {
                ret = ModuleCustVend::Vend;
            }
            // vendor prepayment storno is reflected in outgoing VAT processing
            else
            if (ret == ModuleCustVend::Vend && _processingLogModule == FactureModule_RU::Cust)
            {
                ret = ModuleCustVend::Cust;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcTotalsDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates totals for current facture record.
    /// </summary>
    /// <param name="_update">
    /// Should the facture record be updated.
    /// </param>
    public void recalcTotalsDisplay(boolean _update = true)
    {
        FactureTrans_RU factureTrans;

        if (this.CorrectionType == FactureCorrectionType_RU::Revision)
        {
            if (_update)
            {
                this.selectForUpdate(true);
            }

            factureTrans.setTmp();
            factureTrans.setTmpData(this.getTmpTrans());

            select sum(LineAmount),
                   sum(TaxAmount)
                from  factureTrans
                where factureTrans.FactureId == this.FactureId &&
                      factureTrans.Module    == this.Module;

            this.FactureAmountDisplay = factureTrans.LineAmount;
            this.FactureTaxDisplay    = factureTrans.TaxAmount;

            if (_update)
            {
                this.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rev0</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns original facture for this revision chain.
    /// </summary>
    /// <returns>
    /// The original facture for this revision chain.
    /// </returns>

    public FactureJour_RU rev0()
    {
        return this.RefRevisedFacture ? FactureJour_RU::findRecId(this.RefRevisedFacture) : this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revisionNumDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets revision number for current record.
    /// </summary>
    /// <returns>
    /// Revision number for current record.
    /// </returns>
    display RevisionNum_RU revisionNumDisplay()
    {
        FactureJour_RU  factureJour;

        if (this.RefRevisedFacture)
        {
            select count(SeqNumber) from factureJour
                where factureJour.RefRevisedFacture == this.RefRevisedFacture &&
                      factureJour.RecId             != this.RecId             &&
                     (factureJour.CreatedDateTime   <  this.CreatedDateTime   ||
                     (factureJour.CreatedDateTime   == this.CreatedDateTime   &&
                      factureJour.SeqNumber         <  this.SeqNumber));

            return factureJour.SeqNumber + 1;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax amount for current record.
    /// </summary>
    /// <returns>
    /// Tax amount for current record.
    /// </returns>
    display FactureTax_RU taxAmount()
    {
        return this.CorrectionType == FactureCorrectionType_RU::Revision ? this.FactureTaxDisplay : this.FactureTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _field)
    {
        SalesBookTable_RU   salesTable;
        SalesBookTrans_RU   salesTrans;

        PurchBookVATProcessLogTrans_RU      logTrans;
        PurchBookVATProcessLogTransOper_RU  logTransOper;

        container           checkPattern;

        boolean             ret;

        switch (_field)
        {
            case fieldNum(FactureJour_RU, OperationTypeCodes):
                return OperationTypeList_RU::checkOperationTypeCodes(this.OperationTypeCodes);
        }

        ret = super(_field);

        if (ret)
        {
            switch (_field)
            {
                case fieldNum(FactureJour_RU, FactureExternalId)      :
                case fieldNum(FactureJour_RU, CustVendInvoiceAccount) :
                    checkPattern = [ this.FactureType, this.Module ];
                    switch (checkPattern)
                    {
                        case [ FactureType_RU::TaxCorrection, FactureModule_RU::TaxCorrectionPurch      ] :
                        case [ FactureType_RU::TaxCorrection, FactureModule_RU::TaxCorrectionPurch_Cust ] :
                            select firstonly RecId
                            from        logTrans
                                where logTrans.FactureId            == this.FactureId                               &&
                                      logTrans.TransType            == SalesPurchBookTransType_RU::TaxCorrection
                            exists join logTransOper
                                where logTransOper.RefRecId         == logTrans.RecId                               &&
                                      logTransOper.CanceledRefRecId == 0;

                            if (logTrans)
                            {
                                ret = checkFailed("@GLS104932");
                            }
                            break;
                        case [ FactureType_RU::TaxCorrection, FactureModule_RU::TaxCorrectionSales      ] :
                        case [ FactureType_RU::TaxCorrection, FactureModule_RU::TaxCorrectionSales_Vend ] :
                            select firstonly BookId from salesTable
                                where salesTable.ClosingDate
                            exists join salesTrans
                                where salesTrans.SalesBookTable_RU == salesTable.RecId  &&
                                      salesTrans.FactureId         == this.FactureId;

                            if (salesTable.BookId)
                            {
                                ret = checkFailed(strFmt("@GLS112043", salesTable.BookId));
                            }
                            break;
                    }
                    break;
                    case fieldNum (FactureJour_RU, ExportDate)  :
                        if (this.ExportProcessing && this.ExportDate != dateNull())
                        {
                           ret = this.ExportDate < this.FactureDate ? checkFailed("@GLS112974") : ret;
                        }
                    break;

                    case fieldNum (FactureJour_RU, ConfirmationDate)  :
                        if (this.ExportProcessing && this.ConfirmationDate != dateNull())
                        {
                           ret = this.ConfirmationDate < this.FactureDate ? checkFailed("@GLS112975") : ret;
                        }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPrepaymentTransDate</Name>
				<Source><![CDATA[
    TransDate vendPrepaymentTransDate()
    {
        LedgerJournalTrans  ledgerJournalTrans;
        FactureTrans_RU     factureTrans;
        VendTrans           vendTrans;
        VendTrans_W         vendTrans_W;
        TransDate           transDate;

        select firstonly TransDate from vendTrans
            exists join vendTrans_W
                where vendTrans_W.PrepaymentFactureId_W == this.FactureId &&
                      vendTrans_W.VendTrans             == vendTrans.RecId;

        transDate = vendTrans.TransDate;

        if (! transDate)
        {
            select firstonly TransDate from ledgerJournalTrans
                join  MarkupRefRecId from factureTrans
                    where factureTrans.MarkupRefRecId == ledgerJournalTrans.RecId &&
                          factureTrans.FactureId      == this.FactureId           &&
                          factureTrans.Module         == this.Module;

            transDate = ledgerJournalTrans.TransDate;
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCorrectionOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs check of facture journal whether correction exits.
    /// </summary>
    /// <param name="_correctedFactureExtId">
    /// FactureId to be checked.
    /// </param>
    /// <param name="_correctedFactureDate">
    /// Facture date to be checked.
    /// </param>
    /// <param name="_module">
    /// Facture module to be checked.
    /// </param>
    /// <param name="_custVendAC">
    /// Customer or vendor account for facture.
    /// </param>
    /// <returns>
    /// True if correction order not exists, otherwise false.
    /// </returns>
    public static boolean checkCorrectionOrder(FactureExternalId_RU     _correctedFactureExtId,
                                               FactureDate_RU           _correctedFactureDate,
                                               FactureModule_RU         _module,
                                               CustVendAC               _custVendAC)
    {
        Query                query;
        QueryRun             queryRun;
        QueryBuildDataSource queryBuildDataSource;
        FactureJour_RU       factureJourCorr;
        Range                value;
        boolean              ret        = true;
        container            custModule = [FactureModule_RU::Cust, FactureModule_RU::TaxCorrectionSales, FactureModule_RU::TaxCorrectionPurch_Cust];
        container            vendModule = [FactureModule_RU::Vend, FactureModule_RU::Empl, FactureModule_RU::TaxCorrectionPurch, FactureModule_RU::TaxCorrectionSales_Vend];

        if (_correctedFactureExtId && _correctedFactureDate)
        {
            value = queryValue(_correctedFactureExtId);
            value = strReplace(value, '!', '\\!');

            query = new Query();
            queryBuildDataSource = query.addDataSource(tableNum(FactureJour_RU));
            queryBuildDataSource.firstOnly(true);

            findOrCreateRange_W(queryBuildDataSource,
                                fieldNum(FactureJour_RU, CorrectedFactureExternalId),
                                value);

            findOrCreateRange_W(queryBuildDataSource,
                                fieldNum(FactureJour_RU, CorrectedFactureDate),
                                queryValue(_correctedFactureDate));

            findOrCreateRange_W(queryBuildDataSource,
                                fieldNum(FactureJour_RU, Module),
                                conFind(custModule, _module) ?
                                con2Str(custModule)          :
                                con2Str(vendModule));

            findOrCreateRange_W(queryBuildDataSource,
                                fieldNum(FactureJour_RU, CustVendInvoiceAccount),
                                queryValue(_custVendAC));

            findOrCreateRange_W(queryBuildDataSource,
                                fieldNum(FactureJour_RU, CorrectionType),
                                SysQuery::valueNot(FactureCorrectionType_RU::Revision));

            queryRun = new QueryRun(query);
            if (queryRun.next())
            {
                factureJourCorr = queryRun.getNo(1);
                ret = checkFailed(strFmt("@SYS4081887", factureJourCorr.FactureExternalId, factureJourCorr.FactureDate_External));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCorrectionParameters</Name>
				<Source><![CDATA[
    public static boolean checkCorrectionParameters(FactureExternalId_RU     _correctedFactureExtId,
                                                    FactureDate_RU           _correctedFactureDate,
                                                    Correct_RU               _correct,
                                                    FactureCorrectionType_RU _correctionType)
    {
        boolean         ret = true;
        container       checkCon;
        #define.Value2(2)

        if (_correctedFactureDate)
        {
            checkCon += _correctedFactureDate;
        }
        if (_correctedFactureExtId)
        {
            checkCon += _correctedFactureExtId;
        }

        if ((_correct && ! conLen(checkCon)) || (conLen(checkCon) && conLen(checkCon) != #Value2))
        {
            ret = checkFailed("@GLS111797");
        }

        if (_correct && _correctionType == FactureCorrectionType_RU::Unknown)
        {
            ret = checkFailed("@SYS4083109");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSettlement</Name>
				<Source><![CDATA[
    #define.PosSettlementDate (1)
    #define.PosSettlementRecId(2)
    private server static boolean checkSettlement(FactureJour_RU _factureJour)
    {
        FactureCalcBalances_OnPayment_RU factureCalcBalances = new FactureCalcBalances_OnPayment_RU(_factureJour);
        boolean                          ok = true;
        TaxTable                         taxTable;
        TaxReportPeriod                  facturePeriod, paymentPeriod;
        boolean                          firstLine = true;
        TransDate                        transDate;
        Map                              mapSettledAmounts;
        MapIterator                      it;
        TransDate                        settlementDate;
        CustTrans                        paymentCustTrans;
        VendTrans                        paymentVendTrans;
        CustVendTrans                    paymentCustVendTrans;
        CustSettlement                   custSettlement;
        VendSettlement                   vendSettlement;
        CustVendSettlement               custVendSettlement;

        select firstonly TaxPeriod from taxTable
                where taxTable.TaxType_W == TaxType_W::VAT        ||
                      taxTable.TaxType_W == TaxType_W::VATReduced ||
                      taxTable.TaxType_W == TaxType_W::VATZero;

        if (taxTable.TaxPeriod)
        {
            facturePeriod = TaxReportPeriod::find(taxTable.TaxPeriod, _factureJour.FactureReportDate);

            if (facturePeriod)
            {
                factureCalcBalances.calc();

                mapSettledAmounts = factureCalcBalances.mapSettledAmounts();

                it = new MapIterator(mapSettledAmounts);

                while(it.more())
                {
                    settlementDate = conPeek(it.key(), #PosSettlementDate);

                    paymentPeriod = TaxReportPeriod::find(taxTable.TaxPeriod, settlementDate);

                    if ( ! paymentPeriod.RecId)
                    {
                        if (_factureJour.Module == FactureModule_RU::Cust)
                        {
                            paymentCustVendTrans = paymentCustTrans;
                            custVendSettlement   = custSettlement;
                        }
                        else
                        {
                            paymentCustVendTrans = paymentVendTrans;
                            custVendSettlement   = vendSettlement;
                        }

                        select firstonly Voucher, TransDate from paymentCustVendTrans
                            join RecId from custVendSettlement
                            where custVendSettlement.RecId   == conPeek(it.key(), #PosSettlementRecId) &&
                                  paymentCustVendTrans.RecId == custVendSettlement.OffsetRecId;

                        error(strFmt("@GLS102560", paymentCustVendTrans.Voucher, paymentCustVendTrans.TransDate, settlementDate));
                        ok = false;
                        throw error(strFmt(TaxPeriodHead::txtNotExist(), TaxType_W::VAT));
                    }

                    if (_factureJour.FactureReportDate > paymentPeriod.ToDate)
                    {
                        if (firstLine)
                        {
                            warning("@GLS104858");
                            firstLine = false;
                        }

                        if (_factureJour.Module == FactureModule_RU::Cust)
                        {
                            paymentCustVendTrans = paymentCustTrans;
                            custVendSettlement   = custSettlement;
                        }
                        else
                        {
                            paymentCustVendTrans = paymentVendTrans;
                            custVendSettlement   = vendSettlement;
                        }

                        select firstonly Voucher, TransDate from paymentCustVendTrans
                        join RecId from custVendSettlement
                        where custVendSettlement.RecId   == conPeek(it.key(), #PosSettlementRecId) &&
                              paymentCustVendTrans.RecId == custVendSettlement.OffsetRecId;

                        info(strFmt("@GLS104925",
                                 paymentCustVendTrans.Voucher,
                                 paymentCustVendTrans.TransDate,
                                 _factureJour.FactureExternalId));
                    }

                    transDate = max(_factureJour.FactureReportDate, settlementDate);

                    if (_factureJour.Module == FactureModule_RU::Cust && _factureJour.FactureType != FactureType_RU::Prepayment)
                    {
                        if ( ! SalesBookTable_RU::canProcessDate(transDate))
                        {
                            throw error(strFmt("@GLS101246", transDate));
                        }
                    }
                    else
                    {
                        if (_factureJour.Module == FactureModule_RU::Empl)
                        throw error(Error::wrongUseOfFunction(funcName()));

                        if ( ! PurchBookTable_RU::canProcessDate(transDate))
                        {
                            throw error(strFmt("@GLS101156", transDate));
                        }
                    }

                    it.next();
                }
            }
            else
            {
                error(strFmt("@GLS104865", _factureJour.FactureExternalId, _factureJour.FactureReportDate));
                ok = false;
                throw error(strFmt(TaxPeriodHead::txtNotExist(), TaxType_W::VAT));
            }
        }
        
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxReportingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method checks for consistency between facture dates.
    /// </summary>
    /// <param name="_factureDate">
    /// The date of facture registration.
    /// </param>
    /// <param name="_factureDateExt">
    /// The document date of facture.
    /// </param>
    /// <param name="_factureReportDate">
    /// The date of reporting of the facture.
    /// </param>
    /// <returns>
    /// A Boolean value indicating whether facture dates are consistent for facture creation.
    /// </returns>

    public static boolean checkTaxReportingDate(FactureDate_RU          _factureDate,
                                                FactureDate_External_RU _factureDateExt,
                                                FactureReportDate_RU    _factureReportDate)
    {
        TaxReportPeriod taxReportPeriod;
        TransDate       taxReportingDate;
        TaxTable        taxTable;

        boolean         ret = true;

        if (_factureReportDate < _factureDateExt)
        {
            ret = checkFailed(strFmt("@SYS71085", "@GLS101221", "@SYP4881152"));
        }

        if (_factureDate < _factureReportDate)
        {
            ret = checkFailed(strFmt("@SYS71085", "@SYP4881152", "@SYS39411"));
        }

        if (ret)
        {
            select firstonly TaxPeriod from taxTable
            where taxTable.TaxType_W == TaxType_W::VAT
               || taxTable.TaxType_W == TaxType_W::VATReduced
               || taxTable.TaxType_W == TaxType_W::VATZero;

            if (taxTable.TaxPeriod)
            {
                taxReportPeriod = TaxReportPeriod::find(taxTable.TaxPeriod, _factureReportDate);

                if (taxReportPeriod)
                {
                    taxReportingDate = taxReportPeriod.TaxReportingDate_RU ? taxReportPeriod.TaxReportingDate_RU : taxReportPeriod.ToDate;

                    if (_factureDate > taxReportingDate)
                    {
                        ret = checkFailed(strFmt("@SYS71085", "@SYS39411", taxReportingDate));
                    }
                }
                else
                {
                    ret = checkFailed(strfmt("@GLS111611", _factureReportDate));
                }
            }
            else
            {
                ret = checkFailed(strfmt(TaxPeriodHead::txtNotExist(), TaxType_W::VAT));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureAmountAdjustments</Name>
				<Source><![CDATA[
    public static Map factureAmountAdjustments(FactureJour_RU   _factureJour,
                                               RecordSortedList _factureList,
                                               TransDate        _fromDate,
                                               boolean          _isGroupBy     = false,
                                               boolean          _includeInBook = true)
    {
        container                       key;
        FactureTrans_RU                 factureTrans;
        FactureJour_RU                  factureJour;
        BookStructSmallVATAmounts_RU    structAmounts;
        Map                             factureAdjustments;
        Map                             mapMapFactureAdjustments = new Map(typeName2Type(extendedTypeStr(FactureId_RU)), Types::Container);

        if (! _factureJour.AmountAdjustment)
        {
            return mapMapFactureAdjustments;
        }

        while select sum(LineAmountMST),
                     sum(TaxAmountMST),
                     sum(vatAmountMST)
                from factureTrans
                group by SourceFactureId, TaxCode, DefaultDimension
            where factureTrans.FactureId == _factureJour.FactureId &&
                  factureTrans.Module    == _factureJour.Module    &&
                  factureTrans.SourceFactureId                     &&
                 (! _includeInBook || ! factureTrans.ExcludeFromBook)
        {
            factureJour = FactureJour_RU::find(factureTrans.SourceFactureId, _factureJour.Module);

            if ((_factureJour.FactureDate < _fromDate || (_factureJour.ReverseDate && _factureJour.ReverseDate < _fromDate)) && ! _factureList.find(factureJour))
            {
                continue;
            }

            factureAdjustments = mapMapFactureAdjustments.exists(factureTrans.SourceFactureId)              ?
                                 Map::create(mapMapFactureAdjustments.lookup(factureTrans.SourceFactureId)) :
                                 new Map(Types::Container, Types::Container);

            if (_isGroupBy)
            {
                key = [factureTrans.TaxCode];
            }
            else
            {
                key = [factureTrans.TaxCode, factureTrans.DefaultDimension, ''];
            }

            structAmounts =  factureAdjustments.exists(key)                                       ?
                             BookStructSmallVATAmounts_RU::create(factureAdjustments.lookup(key)) :
                             new BookStructSmallVATAmounts_RU();

            structAmounts.addAmounts(factureTrans.LineAmountMST + factureTrans.TaxAmountMST,
                                     factureTrans.LineAmountMST + factureTrans.TaxAmountMST - factureTrans.vatAmountMST,
                                     factureTrans.vatAmountMST);

            factureAdjustments.insert(key, structAmounts.pack());

            mapMapFactureAdjustments.insert(factureTrans.SourceFactureId, factureAdjustments.pack());
        }

        return mapMapFactureAdjustments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureAmounts</Name>
				<Source><![CDATA[
    #define.factureTransKey([factureTrans.TaxCode, defaultDimension, ''])
    public static Map factureAmounts(FactureJour_RU                        _factureJour)
    {
        QueryRun                        qr;
        Query                           query = new Query();
        QueryBuildDataSource            qbds;

        DimensionDefault                defaultDimension;
        FactureTrans_RU                 factureTrans;
        BookStructSmallVATAmounts_RU    structAmounts = new BookStructSmallVATAmounts_RU();
        Map                             factureAmounts = new Map(Types::Container, Types::Container); // #factureTransKey -> structAmounts

        qbds = query.addDataSource(tableNum(FactureTrans_RU));
        qbds.orderMode(OrderMode::GroupBy);

        qbds.addSelectionField(fieldNum(FactureTrans_RU, LineAmountMST), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FactureTrans_RU, vatAmountMST), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FactureTrans_RU, TaxAmountMST), SelectionField::Sum);

        qbds.addSortField(fieldNum(FactureTrans_RU, TaxCode));

        qbds.addSortField(fieldNum(FactureTrans_RU, DefaultDimension));
        qbds.addSortField(fieldNum(FactureTrans_RU, ExchRate));
        qbds.addRange(fieldNum(FactureTrans_RU, FactureId)).value(_factureJour.FactureId);
        qbds.addRange(fieldNum(FactureTrans_RU, Module)).value(SysQuery::value(_factureJour.Module));

        if (_factureJour.Module == FactureModule_RU::Empl)
        {
            qbds = qbds.addDataSource(tableNum(EmplAdvLine_RU));
            qbds.orderMode(OrderMode::GroupBy);
            qbds.relations(true);
            qbds.joinMode(JoinMode::ExistsJoin);
        }

        qr = new QueryRun(query);

        while (qr.next())
        {
            factureTrans = qr.get(tableNum(FactureTrans_RU));

            defaultDimension = ! factureTrans.TaxCode ? 0 : factureTrans.DefaultDimension;

            structAmounts =  factureAmounts.exists(#factureTransKey) ? BookStructSmallVATAmounts_RU::create(factureAmounts.lookup(#factureTransKey)) :
                                                                       new BookStructSmallVATAmounts_RU();

            structAmounts.addAmounts(factureTrans.LineAmountMST + factureTrans.TaxAmountMST,
                                     factureTrans.LineAmountMST + factureTrans.TaxAmountMST - factureTrans.vatAmountMST,
                                     factureTrans.vatAmountMST);

            factureAmounts.insert(#factureTransKey, structAmounts.pack());
        }

        return factureAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureHasVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if <c>FactureJour_RU</c> has lines with VAT.
    /// </summary>
    /// <param name="_factureJour">
    /// <c>FactureJour_RU</c> record to be checked.
    /// </param>
    /// <returns>
    /// True, if <c>FactureJour_RU</c> has lines with VAT, otherwise false.
    /// </returns>
    public static boolean factureHasVAT(FactureJour_RU _factureJour)
    {
        return (select firstonly RecId from factureTrans_RU
                    where factureTrans_RU.FactureId == _factureJour.FactureId &&
                          factureTrans_RU.Module    == _factureJour.Module    &&
                          factureTrans_RU.vatType   != VATType_RU::NonLiable).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureModule2factureType</Name>
				<Source><![CDATA[
    public static FactureType_RU factureModule2factureType(FactureModule_RU _module,
                                                           boolean          _allowAll = true)
    {
        FactureType_RU  ret;

        switch (_module)
        {
            case FactureModule_RU::Empl                    :
                ret = FactureType_RU::AdvanceReport;
                break;
            case FactureModule_RU::TaxCorrectionPurch      :
            case FactureModule_RU::TaxCorrectionSales      :
            case FactureModule_RU::TaxCorrectionPurch_Cust :
            case FactureModule_RU::TaxCorrectionSales_Vend :
                ret = FactureType_RU::TaxCorrection;
                break;
            default                                        :
                if (_allowAll)
                {
                    ret = FactureType_RU::All;
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static FactureJour_RU find(FactureId_RU     _factureId,
                                             FactureModule_RU _module,
                                             boolean          _forupdate = false)
    {
        FactureJour_RU  jour;

        jour.selectForUpdate(_forupdate);

        select firstonly jour
            where jour.FactureId == _factureId &&
                  jour.Module    == _module;

        return jour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAmountDiff</Name>
				<Source><![CDATA[
    public static FactureJour_RU findAmountDiff(Voucher      _voucher,
                                                       TransDate    _transDate,
                                                       UnknownNoYes _reversed  = UnknownNoYes::Unknown,
                                                       boolean      _forupdate = false)
    {
        FactureJour_RU  jour;

        jour.selectForUpdate(_forupdate);

        select firstonly jour
            where jour.Voucher      == _voucher                                 &&
                  jour.FactureDate  == _transDate                               &&
                 (jour.FactureType  == FactureType_RU::AmoutDifference          ||
                  jour.FactureType  == FactureType_RU::ExchAdj)                 &&
                ((_reversed == UnknownNoYes::Unknown)                           ||
                 (_reversed == UnknownNoYes::No  && jour.Reversed == NoYes::No) ||
                 (_reversed == UnknownNoYes::Yes && jour.Reversed == NoYes::Yes));

        return jour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCorrectedFacture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for corrected facture.
    /// </summary>
    /// <param name="_factureModule">
    /// <c>FactureModule_RU</c> parameter.
    /// </param>
    /// <param name="_custVendAccount">
    /// Customer or vendor account.
    /// </param>
    /// <param name="_correctedFactureExternalId">
    /// External id of corrected facture.
    /// </param>
    /// <param name="_correctedFactureDate">
    /// Date of corrected facture.
    /// </param>
    /// <param name="_findOriginal">
    /// True, if search should be performed using original refRecId parameter.
    /// </param>
    /// <param name="_refOriginalFacture">
    /// Rec id of original facture.
    /// </param>
    /// <param name="_forupdate">
    /// True, if record should be selected for update.
    /// </param>
    /// <returns>
    /// Original corrected facture record.
    /// </returns>
    static FactureJour_RU findCorrectedFacture(FactureModule_RU           _factureModule,
                                                             CustVendAC                 _custVendAccount,
                                                             FactureExternalId_RU       _correctedFactureExternalId,
                                                             FactureDate_RU             _correctedFactureDate,
                                                             boolean                    _findOriginal       = false,
                                                             RefRecId                   _refOriginalFacture = 0,
                                                             boolean                    _forupdate          = false)
    {
        FactureJour_RU correctedFacture;

        if (! _correctedFactureExternalId || ! _correctedFactureDate)
        {
            return correctedFacture;
        }

        correctedFacture.selectForUpdate(_forupdate);

        if (_refOriginalFacture)
        {
            if (_findOriginal)
            {
                correctedFacture = FactureJour_RU::findRecId(_refOriginalFacture, _forupdate);
            }
            else
            {
                select firstonly correctedFacture
                    where (correctedFacture.RefOriginalFacture == _refOriginalFacture         ||
                           correctedFacture.RecId              == _refOriginalFacture)        &&
                           correctedFacture.FactureExternalId  == _correctedFactureExternalId &&
                           correctedFacture.FactureDate        == _correctedFactureDate       &&
                           correctedFacture.CorrectionType     != FactureCorrectionType_RU::Revision;
            }
        }
        else
        {
            switch (_factureModule)
            {
                case FactureModule_RU::Cust                     :
                case FactureModule_RU::TaxCorrectionSales       :
                case FactureModule_RU::TaxCorrectionPurch_Cust  :
                    select firstonly correctedFacture
                        where (correctedFacture.Module                 == FactureModule_RU::TaxCorrectionSales      ||
                               correctedFacture.Module                 == FactureModule_RU::TaxCorrectionPurch_Cust ||
                               correctedFacture.Module                 == FactureModule_RU::Cust)                   &&
                               correctedFacture.CustVendInvoiceAccount == _custVendAccount                          &&
                               correctedFacture.FactureExternalId      == _correctedFactureExternalId               &&
                               correctedFacture.FactureDate            == _correctedFactureDate                     &&
                               correctedFacture.CorrectionType         != FactureCorrectionType_RU::Revision;
                    break;
                case FactureModule_RU::Vend                     :
                case FactureModule_RU::Empl                     :
                case FactureModule_RU::TaxCorrectionPurch       :
                case FactureModule_RU::TaxCorrectionSales_Vend  :
                    select firstonly correctedFacture
                        where (correctedFacture.Module                 == FactureModule_RU::TaxCorrectionPurch      ||
                               correctedFacture.Module                 == FactureModule_RU::TaxCorrectionSales_Vend ||
                               correctedFacture.Module                 == FactureModule_RU::Vend                    ||
                               correctedFacture.Module                 == FactureModule_RU::Empl)                   &&
                               correctedFacture.CustVendInvoiceAccount == _custVendAccount                          &&
                               correctedFacture.FactureExternalId      == _correctedFactureExternalId               &&
                               correctedFacture.FactureDate            == _correctedFactureDate                     &&
                               correctedFacture.CorrectionType         != FactureCorrectionType_RU::Revision;
                    break;
            }

            if (_findOriginal && correctedFacture.CorrectedFactureExternalId && correctedFacture.CorrectedFactureDate)
            {
                correctedFacture = FactureJour_RU::findCorrectedFacture(correctedFacture.Module,
                                                                        correctedFacture.CustVendInvoiceAccount,
                                                                        correctedFacture.CorrectedFactureExternalId,
                                                                        correctedFacture.CorrectedFactureDate,
                                                                        true,
                                                                        correctedFacture.RefOriginalFacture,
                                                                        _forupdate);
            }
        }

        return correctedFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastFacture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for last facture linked to source facture.
    /// </summary>
    /// <param name="_sourceFacture">
    /// <c>FactureJour_RU</c> record.
    /// </param>
    /// <param name="_correctionType">
    /// <c>FactureCorrectionType_RU</c> parameter.
    /// </param>
    /// <returns>
    /// Found source facture record.
    /// </returns>
    public static container findLastFacture(FactureJour_RU _sourceFacture, FactureCorrectionType_RU _correctionType)
    {
        FactureJour_RU  lastCorrFacture;
        container       ret           = ['', dateNull(), lastCorrFacture];
        FactureJour_RU  sourceFacture = _sourceFacture.data();

        switch (_correctionType)
        {
            case FactureCorrectionType_RU::Unknown      :
                break;

            case FactureCorrectionType_RU::Revision     :
                sourceFacture = sourceFacture.rev0();
                ret = [sourceFacture.FactureExternalId, sourceFacture.FactureDate, sourceFacture];
                break;

            case FactureCorrectionType_RU::Correction   :
                lastCorrFacture = sourceFacture.getLastCorrFacture();
                ret = [lastCorrFacture.FactureExternalId, lastCorrFacture.FactureDate, lastCorrFacture];
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginalFacture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searched for first in chain of corrections <c>FactureJour_RU</c> record.
    /// </summary>
    /// <param name="_factureModule">
    /// <c>FactureModule_RU</c> parameter.
    /// </param>
    /// <param name="_custVendAccount">
    /// Customer or vendor account.
    /// </param>
    /// <param name="_correctedFactureExternalId">
    /// Corrected facture external Id.
    /// </param>
    /// <param name="_correctedFactureDate">
    /// Date of corrected facture.
    /// </param>
    /// <returns>
    /// First in chain of corrections <c>FactureJour_RU</c> record.
    /// </returns>
    public static FactureJour_RU findOriginalFacture(FactureModule_RU     _factureModule,
                                                            CustVendAC           _custVendAccount,
                                                            FactureExternalId_RU _correctedFactureExternalId,
                                                            FactureDate_RU       _correctedFactureDate)
    {
        FactureJour_RU correctedFacture;

        select firstonly correctedFacture
            where correctedFacture.Module                 == _factureModule              &&
                  correctedFacture.CustVendInvoiceAccount == _custVendAccount            &&
                  correctedFacture.FactureExternalId      == _correctedFactureExternalId &&
                  correctedFacture.FactureDate            == _correctedFactureDate;

        if (correctedFacture.CorrectedFactureExternalId && correctedFacture.CorrectedFactureDate)
        {
            correctedFacture = FactureJour_RU::findOriginalFacture(correctedFacture.Module,
                                                                   correctedFacture.CustVendInvoiceAccount,
                                                                   correctedFacture.CorrectedFactureExternalId,
                                                                   correctedFacture.CorrectedFactureDate);
        }

        return correctedFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static FactureJour_RU findRecId(RecId  recId, boolean _update = false)
    {
        FactureJour_RU factureJour;

        factureJour.selectForUpdate(_update);

        select firstonly factureJour
                index hint recid
            where factureJour.RecId     == recId;

        return factureJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxCorrection</Name>
				<Source><![CDATA[
    public static FactureJour_RU findTaxCorrection(FactureId_RU   _factureId,
                                                          FactureBook_RU _book,
                                                          boolean        _forupdate = false)
    {
        FactureJour_RU      jour;
        FactureModule_RU    module,
                            moduleSec;

        jour.selectForUpdate(_forupdate);

        if (_book == FactureBook_RU::Any)
        {
            select firstonly jour
                where jour.FactureId == _factureId  &&
                      (jour.Module   == FactureModule_RU::TaxCorrectionPurch      ||
                       jour.Module   == FactureModule_RU::TaxCorrectionPurch_Cust ||
                       jour.Module   == FactureModule_RU::TaxCorrectionSales      ||
                       jour.Module   == FactureModule_RU::TaxCorrectionSales_Vend);
        }
        else
        {
            switch (_book)
            {
                case FactureBook_RU::Purch :
                    module    = FactureModule_RU::TaxCorrectionPurch;
                    moduleSec = FactureModule_RU::TaxCorrectionPurch_Cust;
                    break;
                case FactureBook_RU::Sales :
                    module    = FactureModule_RU::TaxCorrectionSales;
                    moduleSec = FactureModule_RU::TaxCorrectionSales_Vend;
                    break;
                default                    :
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            select firstonly jour
                where jour.FactureId == _factureId  &&
                      (jour.Module   == module ||
                       jour.Module   == moduleSec);
        }

        return jour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureOperationTypeCodesCon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills container with facture operation type codes.
    /// </summary>
    /// <param name="_factureJour">
    /// <c>FactureJour_RU</c> record operation codes calculated for.
    /// </param>
    /// <param name="_checkInherit">
    /// Determines if inherited operation types should be checked for.
    /// </param>
    /// <returns>
    /// Container with facture operation type codes.
    /// </returns>
    public static container getFactureOperationTypeCodesCon(FactureJour_RU _factureJour, boolean _checkInherit = false)
    {
        FactureJour_RU                          correctedFactureJour;
        RecordSortedList                        invoiceJourRSL;
        CustVendInvoiceJour                     custVendInvoiceJour;
        CustInvoiceJour                         custInvoiceJour;
        VendInvoiceJour                         vendInvoiceJour;
        AgreementHeaderExt_RU                   agreementHeaderExt_RU;
        boolean                                 more;
        container                               ret;
        FactureOperationTypeCodesDelimiter_RU   delimiter;
        int                                     idx;
  
        OperationTypeListCode_RU correctionCode;
        OperationTypeListCode_RU revisionCode;
        OperationTypeListCode_RU corrRevisionCode;

        boolean hasInvoiceAgreementContract()
        {
            if (_factureJour.FactureType != FactureType_RU::Invoice)
                return false;

            switch (_factureJour.Module)
            {
                case FactureModule_RU::Cust:
                    custVendInvoiceJour     = custInvoiceJour.data();
                    break;
                case FactureModule_RU::Vend:
                    custVendInvoiceJour     = vendInvoiceJour.data();
                    break;
                default:
                    return false;
            }

            invoiceJourRSL = _factureJour.invoiceJourSortedList();

            for (more = invoiceJourRSL.first(custVendInvoiceJour); more; more = invoiceJourRSL.next(custVendInvoiceJour))
            {
                agreementHeaderExt_RU = AgreementHeaderExt_RU::findByDefaultDimension(custVendInvoiceJour.DefaultDimension);
                if (agreementHeaderExt_RU.RecId && agreementHeaderExt_RU.isAgencyAgreement())
                {
                    return true;
                }
            }

            return false;
        }

        boolean hasPrepaymentAgreementContract()
        {
            CustVendTrans   custVendTrans;
            CustTrans       custTrans;
            VendTrans       vendTrans;

            if (_factureJour.FactureType != FactureType_RU::Prepayment)
                return false;

            switch (_factureJour.Module)
            {
                case FactureModule_RU::Cust:
                    custVendTrans           = custTrans.data();
                    break;
                case FactureModule_RU::Vend:
                    custVendTrans           = vendTrans.data();
                    break;
                default:
                    return false;
            }

            while select custVendTrans
            where custVendTrans.Voucher     == _factureJour.Voucher
               && custVendTrans.TransDate   == _factureJour.FactureDate_External
            {
                agreementHeaderExt_RU = AgreementHeaderExt_RU::findByDefaultDimension(custVendTrans.DefaultDimension);
                if (agreementHeaderExt_RU.RecId && agreementHeaderExt_RU.isAgencyAgreement())
                {
                    return true;
                }
            }

            return false;
        }

        delimiter = SalesPurchBookDataMap_RU::factureOperationTypeCodesDelimiter_RU();

        if (_factureJour.OperationTypeCodes)
        {
            ret = str2con_RU(_factureJour.OperationTypeCodes, delimiter);
        }

        if (_checkInherit)
        {
            for (idx = 1; idx <= conLen(ret); idx++)
            {
                if (! OperationTypeList_RU::isInheritable(conPeek(ret, idx)))
                {
                    ret = conDel(ret, idx, 1);
                    idx--;
                }
            }
        }

        correctionCode   = OperationTypeList_RU::codeByDefaultType(FactureOperationTypeDefault_RU::Correction);
        revisionCode     = OperationTypeList_RU::codeByDefaultType(FactureOperationTypeDefault_RU::Revision);
        corrRevisionCode = OperationTypeList_RU::codeByDefaultType(FactureOperationTypeDefault_RU::CorrectionRevision);

        for (idx = 1; idx <= conLen(ret); idx++)
        {
            if (conFind([correctionCode, revisionCode, corrRevisionCode], conPeek(ret, idx)))
            {
                ret = conDel(ret, idx, 1);
            }
        }

        if (_factureJour.CorrectedFactureExternalId || _factureJour.CorrectionType != FactureCorrectionType_RU::Unknown)
        {
            correctedFactureJour = _factureJour.getCorrectedFacture();

            while (correctedFactureJour)
            {
                ret = FactureJour_RU::getFactureOperationTypeCodesCon(correctedFactureJour, true) + ret;
                next correctedFactureJour;
            }

            switch (_factureJour.CorrectionType)
            {
                case FactureCorrectionType_RU::Correction :
                    if (! conFind(ret, correctionCode))
                    {
                        ret = [correctionCode] + ret;
                    }
                    break;
                case FactureCorrectionType_RU::Revision :
                    if (FactureJour_RU::findRecId(_factureJour.RefRevisedFacture).CorrectedFactureExternalId)
                    {
                        ret = [corrRevisionCode] + conDel(ret, conFind(ret, correctionCode), 1);
                    }
                    else
                    {
                        ret = [revisionCode] + ret;
                    }
                    break;
            }

            return ret;
        }

        if (hasInvoiceAgreementContract())
        {
            ret += [OperationTypeList_RU::codeByDefaultType(FactureOperationTypeDefault_RU::Commission)];
        }
        else
        if (_factureJour.vatTaxAgent)
        {
            ret += [OperationTypeList_RU::codeByDefaultType(FactureOperationTypeDefault_RU::VATAgent)];
        }
        else
        switch (_factureJour.FactureType)
        {
            case FactureType_RU::Prepayment:
                if (hasPrepaymentAgreementContract())
                {
                    ret += [OperationTypeList_RU::codeByDefaultType(FactureOperationTypeDefault_RU::PrepaymentCommission)];
                }
                else
                {
                    ret += [OperationTypeList_RU::codeByDefaultType(FactureOperationTypeDefault_RU::Prepayment)];
                }
                break;

            case FactureType_RU::Invoice:

                if (hasInvoiceAgreementContract())
                {
                    ret += [OperationTypeList_RU::codeByDefaultType(FactureOperationTypeDefault_RU::Commission)];
                }
                else
                {
                    if (_factureJour.creditNote())
                    {
                        ret += OperationTypeList_RU::codeByDefaultType(FactureOperationTypeDefault_RU::Return);
                    }

                    if (_factureJour.hasVATTrans())
                    {
                        ret += OperationTypeList_RU::codeByDefaultType(FactureOperationTypeDefault_RU::Shipment);
                    }

                    if (_factureJour.hasNonVATTrans())
                    {
                        ret += OperationTypeList_RU::codeByDefaultType(FactureOperationTypeDefault_RU::ShipmentNotLiableVAT);
                    }
                }
                break;
        }

        if (_checkInherit)
        {
            for (idx = 1; idx <= conLen(ret); idx++)
            {
                if (! OperationTypeList_RU::isInheritable(conPeek(ret, idx)))
                {
                    ret = conDel(ret, idx, 1);
                    idx--;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitialTypeCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets initial operation type codes for facture.
    /// </summary>
    /// <param name="_factureJour">
    /// <c>FactureJour_RU</c> record operation type codes calculated for.
    /// </param>
    /// <returns>
    /// Calculated facture operation codes.
    /// </returns>
    client server public static FactureOperationTypeCodes_RU getInitialTypeCodes(FactureJour_RU _factureJour)
    {
        container                               codesCon = FactureJour_RU::getFactureOperationTypeCodesCon(_factureJour);
        container                               operationTypeCodesCon;
        int                                     idx;
        FactureOperationTypeCodesDelimiter_RU   delimiter;
        FactureOperationTypeCodes_RU            codes;

        for (idx = 1; idx <= conLen(codesCon); idx++)
        {
            if (! conFind(operationTypeCodesCon, conPeek(codesCon, idx)))
            {
                operationTypeCodesCon += conPeek(codesCon, idx);
            }
        }

        delimiter = SalesPurchBookDataMap_RU::factureOperationTypeCodesDelimiter_RU();

        codes = con2Str(operationTypeCodesCon, delimiter);

        return codes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleOperationTypeCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets calculated facture operation types to specified facture.
    /// </summary>
    /// <param name="_factureJour">
    /// <c>FactureJour_RU</c> record operation codes calculated and set for.
    /// </param>
    public static void handleOperationTypeCodes(FactureJour_RU _factureJour)
    {
        FactureOperationTypeCodes_RU    operationTypeCodes = FactureJour_RU::getInitialTypeCodes(_factureJour);

        FactureJour_RU::setFactureOperationTypeCodes(_factureJour.RecId, operationTypeCodes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCorrectedFactureExternalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup for corrected facture external id field.
    /// </summary>
    /// <param name="_ctrl">
    /// Control at which lookup performed.
    /// </param>
    /// <param name="_custVendAccount">
    /// Customer or vendor account.
    /// </param>
    /// <param name="_contragentType">
    /// Type of contragent.
    /// </param>
    /// <param name="_custVendInvoiceJourSet">
    /// Set of customer or vendor journals.
    /// </param>
    /// <param name="_fromFacturePosting">
    /// True, if method called from facture posting form.
    /// </param>
    /// <param name="_salesPurch">
    /// <c>SalesPurch</c> parameter.
    /// </param>
    /// <returns>
    /// <c>FactureJour_RU</c> record selected by user in lookup.
    /// </returns>
    public static FactureJour_RU lookupCorrectedFactureExternalId(FormStringControl                     _ctrl,
                                                                  CustVendAC                            _custVendAccount,
                                                                  FactureTaxCorrectionContragentType_RU _contragentType,
                                                                  Set                                   _custVendInvoiceJourSet,
                                                                  boolean                               _fromFacturePosting = false,
                                                                  SalesPurch                            _salesPurch         = SalesPurch::None)
    {
        TableLookup_RU          sysTableLookup = TableLookup_RU::newParameters(tableNum(FactureJour_RU), _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbrAccount, qbrModule, qbrRecId;
        container               moduleValue;
        FactureJour_RU          factureJour, factureJourLocal;
        RecordSortedList        factureJourList;
        CustInvoiceJour         custInvoiceJour;
        VendInvoiceJour         vendInvoiceJour;
        CustVendInvoiceJour     custVendInvoiceJour, custVendInvoiceJourLocal;
        SetEnumerator           setEnumerator;

        qbds       = query.addDataSource(tableNum(FactureJour_RU));
        qbrAccount = qbds.addRange(fieldNum(FactureJour_RU, CustVendInvoiceAccount));
        qbrModule  = qbds.addRange(fieldNum(FactureJour_RU, Module));
        qbrRecId   = qbds.addRange(fieldNum(FactureJour_RU, RecId));

        moduleValue = FactureJour_RU::taxCorrectionModule(_contragentType, _salesPurch);

        if (_contragentType == FactureTaxCorrectionContragentType_RU::Customer)
        {
            custVendInvoiceJour      = custInvoiceJour.data();
            custVendInvoiceJourLocal = custInvoiceJour.data();
        }
        else
        {
            custVendInvoiceJour      = vendInvoiceJour.data();
            custVendInvoiceJourLocal = vendInvoiceJour.data();
        }

        qbrAccount.value(_custVendAccount);
        qbrModule.value(con2Str(moduleValue));

        findOrCreateRange_W(qbds, fieldNum(FactureJour_RU, CorrectionType), SysQuery::valueNot(FactureCorrectionType_RU::Revision));

        setEnumerator = _custVendInvoiceJourSet.getEnumerator();
        while (setEnumerator.moveNext())
        {
            select firstonly custVendInvoiceJour
                where custVendInvoiceJour.RecId == setEnumerator.current();

            if (custVendInvoiceJour.CustVendInvoiceJour::getCorrect_RU() && _fromFacturePosting)
            {
                select firstonly custVendInvoiceJourLocal
                    where custVendInvoiceJourLocal.InvoiceAccount == custVendInvoiceJour.InvoiceAccount        &&
                          custVendInvoiceJourLocal.InvoiceId      == custVendInvoiceJour.CustVendInvoiceJour::getCorrectedInvoiceId_RU() &&
                          custVendInvoiceJourLocal.InvoiceDate    == custVendInvoiceJour.CustVendInvoiceJour::getCorrectedInvoiceDate_RU();
                custVendInvoiceJour = custVendInvoiceJourLocal;
            }

            if (custVendInvoiceJour)
            {
                factureJourList = custVendInvoiceJour.factureJourSortedList_RU();
                while (factureJourList.next(factureJourLocal))
                {
                    qbrRecId.value(qbrRecId.value() + queryValue(factureJourLocal.RecId) + "@SYS35667");
                }
            }
        }

        sysTableLookup.parmCallingControl(_ctrl);
        sysTableLookup.addLookupfield(fieldNum(FactureJour_RU, FactureExternalId), true);
        sysTableLookup.addLookupfield(fieldNum(FactureJour_RU, FactureDate));
        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
        if (sysTableLookup.getFoundCursor())
        {
            factureJour = sysTableLookup.getFoundCursor();
        }
        return factureJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFactureExternalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes facture lookup.
    /// </summary>
    /// <param name="_ctrl">
    /// Lookup control.
    /// </param>
    /// <param name="_packedQuery">
    /// Container with filter parameters.
    /// </param>
    /// <returns>
    /// Facture journal record found by income parameters.
    /// </returns>
    public static FactureJour_RU lookupFactureExternalId(FormStringControl _ctrl, container _packedQuery)
    {
        TableLookup_RU          sysTableLookup = TableLookup_RU::newParameters(tablenum(FactureJour_RU), _ctrl);
        Query                   query = new Query(_packedQuery);
        FactureJour_RU          factureJour;

        sysTableLookup.addLookupfield(fieldnum(FactureJour_RU, FactureExternalId), true);
        sysTableLookup.addLookupfield(fieldnum(FactureJour_RU, FactureDate));
        sysTableLookup.addLookupfield(fieldnum(FactureJour_RU, FactureDate_External));
        sysTableLookup.addLookupfield(fieldnum(FactureJour_RU, CorrectionType));
        sysTableLookup.addLookupfield(fieldnum(FactureJour_RU, RevisionNum));
        sysTableLookup.addLookupfield(fieldnum(FactureJour_RU, CustVendInvoiceAccount));
        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
        if (sysTableLookup.getFoundCursor())
        {
            factureJour = sysTableLookup.getFoundCursor();
        }

        return factureJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFactureId</Name>
				<Source><![CDATA[
    // This method create and show lookup for FactureJour_RU table.
    //
    // Input:   _ctrl -> There is a control element.
    //          _rsl  -> There is records FactureJour_RU table wich need output into lookup.
    //
    // Output:  Insert into _ctrl choiced FactureId
    public static void lookupFactureId(FormStringControl  _ctrl, RecordSortedList _rsl)
    {
        Args        args;
        FormRun     formRun;

        args = new Args();
        args.name(formStr(FactureJourLookup_RU));
        args.caller(_ctrl);
        args.parmObject(_rsl);

        formRun = classfactory.formRunClass(args);
        formRun.init();

        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outdatedFactures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns set with record ids of factures which are outdated ans should be revised.
    /// </summary>
    /// <param name="_refOriginalFacture">
    /// Record id of original facture.
    /// </param>
    /// <param name="_refLastCorrFacture">
    /// Record id of last correcting facture.
    /// </param>
    /// <returns>
    /// <c>Set</c> object with record ids.
    /// </returns>
    /// <remarks>
    /// The facture is outdated if there has been revision of any previous correcting factures in chain,
    /// but facture itself has not been revised.
    /// </remarks>
    static container outdatedFactures(RefRecId _refOriginalFacture, RefRecId _refLastCorrFacture = 0)
    {
        FactureJour_RU              jourRevision;
        FactureJour_RU              jourOriginal;
        FactureJour_RU              jourCorrection;
        FactureJour_RU              jourCorrRevision;
        FactureOriginalReference_RU origReferenceOrig,
                                    origReferenceCorr;
        Set                         setRecId = new Set(Types::Int64);

        while select * from jourOriginal
            where (jourOriginal.RefOriginalFacture == _refOriginalFacture
               ||  jourOriginal.RecId              == _refOriginalFacture
               ||  jourOriginal.RefLastCorrFacture == _refLastCorrFacture)
               &&  jourOriginal.RefRevisedFacture  == 0
        join * from jourRevision
            where jourRevision.RefRevisedFacture == jourOriginal.RecId
               && jourRevision.Revised           == NoYes::No
        outer join * from origReferenceOrig
            where origReferenceOrig.FactureJour_RU == jourOriginal.RecId
        {
            while select * from jourCorrection
                where(jourCorrection.RefOriginalFacture == _refOriginalFacture
                  ||  jourCorrection.RefLastCorrFacture == _refLastCorrFacture)
                  &&  jourCorrection.RefRevisedFacture  == 0
                  && (jourCorrection.CreatedDateTime     > jourOriginal.CreatedDateTime
                  || (jourCorrection.CreatedDateTime    == jourOriginal.CreatedDateTime
                  &&  jourCorrection.SeqNumber           > jourOriginal.SeqNumber))
            outer join jourCorrRevision
                where jourCorrRevision.RefRevisedFacture == jourCorrection.RecId
                  &&  jourCorrRevision.Revised           == NoYes::No
            outer join * from origReferenceCorr
                where origReferenceCorr.FactureJour_RU == jourCorrection.RecId
            {
                if (( jourCorrRevision
                  && (jourCorrRevision.CreatedDateTime  < jourRevision.CreatedDateTime
                  || (jourCorrRevision.CreatedDateTime == jourRevision.CreatedDateTime
                  &&  jourCorrRevision.SeqNumber        < jourRevision.SeqNumber)))
                  || (! jourCorrRevision
                  && (jourCorrection.CreatedDateTime    < jourRevision.CreatedDateTime
                  || (jourCorrection.CreatedDateTime   == jourRevision.CreatedDateTime
                  &&  jourCorrection.SeqNumber          < jourRevision.SeqNumber))))
                {
                    if (jourCorrection.RefOriginalFacture                                    &&
                       (jourCorrection.RefOriginalFacture == jourOriginal.RefOriginalFacture ||
                        jourCorrection.RefOriginalFacture == jourOriginal.RecId))
                    {
                        setRecId.add(jourCorrRevision.RecId ? jourCorrRevision.RecId : jourCorrection.RecId);
                    }

                    if (origReferenceCorr.RefOriginalFacture                                         &&
                       (origReferenceCorr.RefOriginalFacture == origReferenceOrig.RefOriginalFacture ||
                        origReferenceCorr.RefOriginalFacture == jourOriginal.RecId))
                    {
                        setRecId.add(jourCorrRevision.RecId ? jourCorrRevision.RecId : jourCorrection.RecId);
                    }
                }
            }
        }

        return setRecId.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFactureOperationTypeCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets facture operation codes to <c>FactureJour_RU</c> record.
    /// </summary>
    /// <param name="_factureRecId">
    /// Record id of facture journal.
    /// </param>
    /// <param name="_operationTypeCodes">
    /// Container holding operation codes.
    /// </param>
    public static void setFactureOperationTypeCodes(RecId _factureRecId, FactureOperationTypeCodes_RU _operationTypeCodes)
    {
        FactureJour_RU  factureJour;

        ttsbegin;

        factureJour = FactureJour_RU::findRecId(_factureRecId, true);
        if (factureJour)
        {
            factureJour.OperationTypeCodes = _operationTypeCodes;
            factureJour.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCorrectionModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns container with <c>FactureModule_RU</c> values valid for tax correction.
    /// </summary>
    /// <param name="_contragentType">
    /// Type of contragent.
    /// </param>
    /// <param name="_salesPurch">
    /// Module sales or purch.
    /// </param>
    /// <returns>
    /// Container with <c>FactureModule_RU</c> values valid for tax correction.
    /// </returns>
    static container taxCorrectionModule(FactureTaxCorrectionContragentType_RU _contragentType,
                                         SalesPurch                            _salesPurch)
    {
        container ret;
        container c = [_contragentType, _salesPurch];

        switch (c)
        {
            case [FactureTaxCorrectionContragentType_RU::Customer, SalesPurch::None]  :
                ret = [FactureModule_RU::Cust, FactureModule_RU::TaxCorrectionSales, FactureModule_RU::TaxCorrectionPurch_Cust];
                break;
            case [FactureTaxCorrectionContragentType_RU::Customer, SalesPurch::Sales] :
                ret = [FactureModule_RU::Cust, FactureModule_RU::TaxCorrectionSales];
                break;
            case [FactureTaxCorrectionContragentType_RU::Customer, SalesPurch::Purch] :
                ret = [FactureModule_RU::TaxCorrectionPurch_Cust];
                break;
            case [FactureTaxCorrectionContragentType_RU::Vendor, SalesPurch::None]    :
                ret = [FactureModule_RU::Vend, FactureModule_RU::Empl, FactureModule_RU::TaxCorrectionPurch, FactureModule_RU::TaxCorrectionSales_Vend];
                break;
            case [FactureTaxCorrectionContragentType_RU::Vendor, SalesPurch::Purch]   :
                ret = [FactureModule_RU::Vend, FactureModule_RU::Empl, FactureModule_RU::TaxCorrectionPurch];
                break;
            case [FactureTaxCorrectionContragentType_RU::Vendor, SalesPurch::Sales]   :
                ret = [FactureModule_RU::TaxCorrectionSales_Vend];
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFactureLinks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates links to the last correcting facture in the correction tree.
    /// </summary>
    /// <param name="_origFactureRecId">
    /// A record id of the original facture.
    /// </param>
    /// <param name="_updateLast">
    /// Should the last correcting facture be updated.
    /// </param>
    /// <param name="_lastFactureRecId">
    /// A record id of the last correcting facture.
    /// </param>

    static void updateFactureLinks(RecId     _origFactureRecId,
                                          boolean   _updateLast       = true,
                                          RecId     _lastFactureRecId = 0)
    {
        FactureJour_RU              linkedFacture;
        FactureJour_RU              revisionFacture;
        RecId                       lastFactureRecId;
        FactureOriginalReference_RU linkedOrigReference;

        ttsbegin;

        lastFactureRecId = _lastFactureRecId ?
                           _lastFactureRecId :
                           FactureJour_RU::findRecId(_origFactureRecId).getLastCorrFacture().RecId;

        //old model factures
        update_recordset linkedFacture
            setting RefLastCorrFacture = lastFactureRecId
            where (linkedFacture.RefOriginalFacture == _origFactureRecId  ||
                   linkedFacture.RecId              == _origFactureRecId) &&
                  (_updateLast                                            ||
                   linkedFacture.RecId != lastFactureRecId);

        //new model factures
        update_recordset linkedFacture
            setting RefLastCorrFacture = lastFactureRecId
                where _updateLast || linkedFacture.RecId != lastFactureRecId
            exists join linkedOrigReference
                where linkedOrigReference.FactureJour_RU     == linkedFacture.RecId &&
                      linkedOrigReference.RefOriginalFacture == _origFactureRecId;

        //revision factures
        update_recordset revisionFacture
            setting RefLastCorrFacture = lastFactureRecId
                where revisionFacture.CorrectionType == FactureCorrectionType_RU::Revision &&
                     (_updateLast                                                          ||
                      revisionFacture.RecId != lastFactureRecId)
            exists join linkedFacture
                where linkedFacture.RecId               == revisionFacture.RefRevisedFacture &&
                      linkedFacture.RefLastCorrFacture  == lastFactureRecId;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@GLS104584</DeveloperDocumentation>
	<FormRef>FactureJournal_RU</FormRef>
	<Label>@GLS104582</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>FactureExternalId</TitleField1>
	<TitleField2>CustVendInvoiceAccount</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>FactureIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>RSalesPurchBooks</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>FactureTrans_RU</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>FactureTrans_RU</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>OfficialsTrans_RU</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>OfficialsTrans_RU</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FactureId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactureDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactureAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactureTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendInvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactureExternalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseOriginalDocumentAsFacture</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FactureId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Account</Name>
			<Label>@SYS24500</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustVendInvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FactureId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendTransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendTransTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingLogRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchAdjInvoiceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseOriginalDocumentAsFacture</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FactureAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactureTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Correction</Name>
			<Label>@SYS13069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CorrectedFactureExternalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedFactureDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JointCorrection</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Consignee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Consignor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryInfoNoPrint</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryAddress</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>deliveryAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Document</Name>
			<Label>@SYS21873</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExportFine</Name>
			<Label>@GLS113146</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FineCalculationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>fineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExportVAT</Name>
			<Label>@GLS112972</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExportDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackageDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>expirationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusChangeDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExportProcessing</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessingType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExportVATSource</Name>
			<Label>@GLS112973</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceExportFactureId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceExportFactureIdExt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceExportFactureDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Facture</Name>
			<Label>@GLS104524</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FactureExternalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactureDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactureDate_External</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactureReportDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactureType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATOnPayment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATTaxAgent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountAdjustment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessVAT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchBookVATProcessParametersRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FactureExternalId</Name>
			<Label>@GLS104524</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FactureExternalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventOwner</Name>
			<Label>@GLS115561</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventOwnerId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventProfile</Name>
			<Label>@GLS113769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProfileType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Module</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OperationType</Name>
			<Label>@GLS112932</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OperationTypeCodes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OriginalFacture</Name>
			<Label>@GLS114478</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>factureIdOriginal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigRevisionNumDisplay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrintGroup</Name>
			<Label>@SYS55777</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrintInMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Proxy</Name>
			<Label>@GLS104525</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reversed</Name>
			<Label>@GLS105706</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Reversed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReverseDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Revision</Name>
			<Label>@SYS4081798</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Revised</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevisionNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Seller</Name>
			<Label>@SYS4081840</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentOrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentTransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TotalAmount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FactureAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactureTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Voucher</Name>
			<Label>@SYS12371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reversed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceExportFactureId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FactureId_RU</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AmountAdjustment</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureAmountAdjustment_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ConfirmationDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesConfirmationDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Consignee</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccountConsignee_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Consignor</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccountConsignor_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CorrectedFactureDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureDate_RU</ExtendedDataType>
			<Label>@GLS104542</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrectedFactureExternalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>FactureExternalId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CorrectedPeriod</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS111794</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CorrectionType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>FactureCorrectionType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustVendInvoiceAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<Label>@SYS21836</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustVendTransRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CustVendTransTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DeliveryInfoNoPrint</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DeliveryInfoNoPrint_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExchAdjInvoiceRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ExportDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesExportDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExportProcessing</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS112992</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FactureAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureAmount_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FactureAmountDisplay</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureAmount_RU</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FactureDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureDate_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FactureDate_External</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureDate_External_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FactureExternalId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>FactureExternalId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FactureId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FactureId_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FactureTax</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureTax_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FactureTaxDisplay</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureTax_RU</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FactureType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>FactureType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FineCalculationDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesExportFineCalcDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HeaderRevision</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventOwnerId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventOwnerId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventProfileType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventProfileType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JointCorrection</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureJointCorrection_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LanguageId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Module</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>FactureModule_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequenceGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OffSessionId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>OffSessionId_RU</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OperationTypeCodes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureOperationTypeCodes_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigFactureExternalIdDisplay</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureExternalId_RU</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OrigRevisionNumDisplay</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RevisionNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PackageDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPackageDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentOrderNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankPaymentOrderBase_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PaymentRecID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PaymentRefRecId_RU</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PaymentTransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS100559</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PostingLogRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintInMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PrintInMST_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProcessingType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesBookFactureProcessingType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProcessVAT</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FacturePostProcessVAT</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchBookVATProcessParametersRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchBookVATProcessParametersRecId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrepaymTaxCorrection</Name>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefLastCorrFacture</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefOriginalFacture</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRevisedFacture</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reversed</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Cancelled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReverseDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Revised</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureRevised_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RevisionNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RevisionNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SeqNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Counter</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SettlementDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SettlementRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SettlementRefRecId_RU</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SourceExportFactureDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceExportFactureIdExt</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureExternalId_RU</ExtendedDataType>
			<Label>@GLS112956</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StatusChangeDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesConfirmationDate_RU</ExtendedDataType>
			<Label>@SYS101071</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATOnPayment</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATOnPayment_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATTaxAgent</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS112871</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CommPartner</Name>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FactureReportDate</Name>
			<ExtendedDataType>FactureReportDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefCommReportTrans</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseOriginalDocumentAsFacture</Name>
			<ExtendedDataType>UseOriginalDocumentAsFacture_RU</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustVendTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustVendTransRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustVendTransTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PaymentRecIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymentRecID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FactureIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>FactureId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Module</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FactureExternalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FactureDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>createdDateTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FactureExternalId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FactureTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Module</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FactureType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FactureDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FactureDateTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FactureDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FactureType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Module</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchBookVATProcessParameters_RUIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchBookVATProcessParametersRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefOriginalFactureIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefOriginalFacture</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CorrectedFactureIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Module</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustVendInvoiceAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CorrectedFactureExternalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CorrectedFactureDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefRevisedFactureIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRevisedFacture</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>createdDateTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SeqNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefLastCorrFacture</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefLastCorrFacture</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefCommReportTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefCommReportTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeliveryPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendInvoiceJour</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>CustVendInvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmount</MapField>
					<MapFieldTo>FactureAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceDate</MapField>
					<MapFieldTo>FactureDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LedgerVoucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DueDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentNum</MapField>
					<MapFieldTo>DocumentNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate</MapField>
					<MapFieldTo>DocumentDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Payment</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesOrderbalance</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Updated</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>GroupId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostingProfile</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentSched</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OneTimeAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Num</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Proforma</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Triangulation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRateSecondary</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LanguageId</MapField>
					<MapFieldTo>LanguageId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymDayId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroupId</MapField>
					<MapFieldTo>NumberSequenceGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SumTax</MapField>
					<MapFieldTo>FactureTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FixedDueDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Prepayment</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendPaymentGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATOnPayment_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Correct_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CorrectedInvoiceId_RU</MapField>
					<MapFieldTo>CorrectedFactureExternalId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CorrectedInvoiceDate_RU</MapField>
					<MapFieldTo>CorrectedFactureDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceCode_LT</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceRegister_LT</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FactureModule_RU</MapField>
					<MapFieldTo>Module</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FactureId</MapField>
					<MapFieldTo>FactureId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceStatus_LT</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WhoIsAuthor_LT</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventProfileType_RU</MapField>
					<MapFieldTo>InventProfileType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmountMST_JP</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsInvoice_JP</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesInvoicePostingType_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventOwnerId_RU</MapField>
					<MapFieldTo>InventOwnerId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NonRealRevenue_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchInternalInvoiceId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsigneeAccount_RU</MapField>
					<MapFieldTo>Consignee</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsignorAccount_RU</MapField>
					<MapFieldTo>Consignor</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FacturedFully_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OffSessionId_RU</MapField>
					<MapFieldTo>OffSessionId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrintStandardCurrency_RU</MapField>
					<MapFieldTo>PrintInMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AttorneyIssuedName_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AttorneyId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AttorneyDate_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrintOriginals_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrintCopies_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundOff_W</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRPaymOrderID</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscBaseDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDate_ES</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress_RU</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmountMST_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitedVATInvoice</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustSettlement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustSettlement</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustSettlement</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SettlementRecId</Name>
					<Field>SettlementRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendInvoiceAccount</Name>
					<Field>CustVendInvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>FactureModule_RU::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable_Consignee</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_Consignee</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Consignee</Name>
					<SourceEDT>CustAccountConsignee_RU</SourceEDT>
					<Field>Consignee</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable_TaxCorrection</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_TaxCorrection</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendInvoiceAccount</Name>
					<Field>CustVendInvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>FactureModule_RU::TaxCorrectionSales</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable_TaxCorrection_Purch</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_TaxCorrection_Purch</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendInvoiceAccount</Name>
					<Field>CustVendInvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>FactureModule_RU::TaxCorrectionPurch_Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendTransRecId</Name>
					<Field>CustVendTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendTransTableId</Name>
					<Field>CustVendTransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>FactureType</Name>
					<Field>FactureType</Field>
					<ValueStr>FactureType_RU::AmoutDifference</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans_AdvAdj</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTrans_AdvAdj</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendTransRecId</Name>
					<Field>CustVendTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendTransTableId</Name>
					<Field>CustVendTransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>FactureType</Name>
					<Field>FactureType</Field>
					<ValueStr>FactureType_RU::AdvanceAdjustment</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans_ExchAdj</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTrans_ExchAdj</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendTransRecId</Name>
					<Field>CustVendTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendTransTableId</Name>
					<Field>CustVendTransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>FactureType</Name>
					<Field>FactureType</Field>
					<ValueStr>FactureType_RU::ExchAdj</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans_ExchDiffInvoice</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTrans_ExchDiffInvoiceFacture</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ExchDiffInvoiceCust</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExchAdjInvoiceRecId</Name>
					<Field>ExchAdjInvoiceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>FactureModule_RU::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>FactureType</Name>
					<Field>FactureType</Field>
					<ValueStr>FactureType_RU::ExchAdj</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AmountAdjustment</Name>
					<Field>AmountAdjustment</Field>
					<ValueStr>NoYes::Yes</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans_VATAdj</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTrans_VATAdj</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendTransRecId</Name>
					<Field>CustVendTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendTransTableId</Name>
					<Field>CustVendTransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>FactureType</Name>
					<Field>FactureType</Field>
					<ValueStr>FactureType_RU::VATAdjustment</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTransPayment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTransPayment</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentRecID</Name>
					<Field>PaymentRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustVendTransPostingLog_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustVendTransPostingLog_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustVendTransPostingLog_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingLogRecId</Name>
					<Field>PostingLogRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DeliveryPostalAddress_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EmployeeTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EmployeeTable_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EmployeeTable_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>FactureModule_RU::Empl</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendInvoiceAccount</Name>
					<Field>CustVendInvoiceAccount</Field>
					<RelatedField>EmployeeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FactureJour_RU</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>FactureJour_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>FactureJour_RU</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Module</Name>
					<Field>Module</Field>
					<RelatedField>Module</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FactureId</Name>
					<Field>FactureId</Field>
					<RelatedField>FactureId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FactureJour_RU_Original</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FactureJour_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FactureJourOriginal</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJourCorrecting</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefOriginalFacture</Name>
					<Field>RefOriginalFacture</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FactureJour_RU_Revised</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FactureJour_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FactureJourRevised</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJourRevising</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRevisedFacture</Name>
					<Field>RefRevisedFacture</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FactureJour_SourceExport</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>FactureJour_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FactureJour_SourceExport</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceExportFactureId</Name>
					<SourceEDT>FactureId_RU</SourceEDT>
					<Field>SourceExportFactureId</Field>
					<RelatedField>FactureId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FactureJourLastCorrection</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FactureJour_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FactureJourLastCorrection</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefLastCorrFacture</Name>
					<Field>RefLastCorrFacture</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FactureTrans_RU</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>FactureTrans_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FactureTrans_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FactureId</Name>
					<Field>FactureId</Field>
					<RelatedField>FactureId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Module</Name>
					<Field>Module</Field>
					<RelatedField>Module</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventOwner_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventOwner_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventOwnerId</Name>
					<SourceEDT>InventOwnerId_RU</SourceEDT>
					<Field>InventOwnerId</Field>
					<RelatedField>InventOwnerId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventOwnerIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<SourceEDT>LanguageId</SourceEDT>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<SourceEDT>LanguageId</SourceEDT>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceGroupId</Name>
					<SourceEDT>NumberSequenceGroupId</SourceEDT>
					<Field>NumberSequenceGroupId</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OfficialsTrans_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>OfficialsTrans_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffSessionId</Name>
					<SourceEDT>OffSessionId_RU</SourceEDT>
					<Field>OffSessionId</Field>
					<RelatedField>OffSessionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OperationTypeList_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>OperationTypeList_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OperationTypeCodes</Name>
					<SourceEDT>FactureOperationTypeCodes_RU</SourceEDT>
					<Field>OperationTypeCodes</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchBookVATProcessParameters_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchBookVATProcessParameters_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchBookVATProcessParameters_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchBookVATProcessParametersRecId</Name>
					<Field>PurchBookVATProcessParametersRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendInvoiceAccount</Name>
					<Field>CustVendInvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>FactureModule_RU::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable_Consignor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable_Consignor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Consignor</Name>
					<SourceEDT>VendAccountConsignor_RU</SourceEDT>
					<Field>Consignor</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable_TaxCorrection</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable_TaxCorrection</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendInvoiceAccount</Name>
					<Field>CustVendInvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>FactureModule_RU::TaxCorrectionPurch</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable_TaxCorrection_Sales</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable_TaxCorrection_Sales</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendInvoiceAccount</Name>
					<Field>CustVendInvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>FactureModule_RU::TaxCorrectionSales_Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendTransRecId</Name>
					<Field>CustVendTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendTransTableId</Name>
					<Field>CustVendTransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>FactureType</Name>
					<Field>FactureType</Field>
					<ValueStr>FactureType_RU::AmoutDifference</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTrans_AdvAdj</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTrans_AdvAdj</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendTransRecId</Name>
					<Field>CustVendTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendTransTableId</Name>
					<Field>CustVendTransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>FactureType</Name>
					<Field>FactureType</Field>
					<ValueStr>FactureType_RU::AdvanceAdjustment</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTrans_ExchAdj</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTrans_ExchAdj</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FactureJour_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendTransRecId</Name>
					<Field>CustVendTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendTransTableId</Name>
					<Field>CustVendTransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>FactureType</Name>
					<Field>FactureType</Field>
					<ValueStr>FactureType_RU::ExchAdj</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTrans_ExchDiffInvoice</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTrans_ExchDiffInvoiceFacture</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ExchDiffInvoiceVend</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExchAdjInvoiceRecId</Name>
					<Field>ExchAdjInvoiceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>FactureModule_RU::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>FactureType</Name>
					<Field>FactureType</Field>
					<ValueStr>FactureType_RU::ExchAdj</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AmountAdjustment</Name>
					<Field>AmountAdjustment</Field>
					<ValueStr>NoYes::Yes</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CommReportTransPrepayment_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CommReportTransPrepayment_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefCommReportTrans</Name>
					<Field>RefCommReportTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>