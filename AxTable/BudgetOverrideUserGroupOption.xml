<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetOverrideUserGroupOption</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetOverrideUserGroupOption extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkUserGroupInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>UserGroupInfo</c> field in the <c>BudgetOverrideUserGroupOption</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>UserGroupInfo</c> field is valid; otherwise, false.
    /// </returns>
    public boolean checkUserGroupInfo()
    {
        boolean ok = true;
        UserGroupInfo userGroupInfo;

        // Set the concurrency model to pessimistic to ensure we
        // get the latest set of user groups from the server.
        userGroupInfo.concurrencyModel(ConcurrencyModel::Pessimistic);

        select firstonly RecId from userGroupInfo
            where userGroupInfo.Id == this.UserGroupInfo;

        if (userGroupInfo.RecId == 0)
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUserGroupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the user group name of the current record in the <c>BudgetOverrideUserGroupOption</c> table.
    /// </summary>
    /// <returns>
    /// The user group name; otherwise, an empty string;.
    /// </returns>
    public display UserGroupName displayUserGroupName()
    {
        UserGroupInfo userGroupInfo;

        if (hasTableAccess(tableNum(UserGroupInfo)))
        {
            userGroupInfo.recordLevelSecurity(true);

            select firstonly Name from userGroupInfo
                where userGroupInfo.Id == this.UserGroupInfo;
        }

        return userGroupInfo.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid = super();

        BudgetControlRuleUserGroupOption budgetControlRuleUserGroup;

        select firstonly RecId from budgetControlRuleUserGroup
            where budgetControlRuleUserGroup.BudgetOverrideUserGroupOption == this.RecId;

        BudgetGroupUserGroupOption budgetGroupUserGroupOption;

        select firstonly RecId from budgetGroupUserGroupOption
            where budgetGroupUserGroupOption.BudgetOverrideUserGroupOption == this.RecId;

        if (isValid
            && BudgetControlConfigurationManager::validateConfigurationEditPermitted(this.BudgetControlConfiguration)
            && budgetControlRuleUserGroup.RecId == 0
            && budgetGroupUserGroupOption.RecId == 0)
        {
            isValid = true;
        }
        else
        {
            if (budgetGroupUserGroupOption.RecId != 0)
            {
                checkFailed(strFmt("@SYS128564",
                    tablePName(BudgetOverrideUserGroupOption),
                    tablePName(BudgetGroupUserGroupOption)));
            }

            if (budgetControlRuleUserGroup.RecId != 0)
            {
                checkFailed(strFmt("@SYS128564",
                    tablePName(BudgetOverrideUserGroupOption),
                    tablePName(BudgetControlRuleUserGroupOption)));
            }

            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case (fieldNum(BudgetOverrideUserGroupOption, UserGroupInfo)) :
                    if (!this.validateUserGroupInfo())
                    {
                        isValid = false;
                    }

                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUserGroupInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the <c>BudgetOverrideUserGroupOption</c> record has a valid user group
    /// information.
    /// </summary>
    /// <returns>
    /// true if the user group information is valid; otherwise, false with Infolog message.
    /// </returns>
    public boolean validateUserGroupInfo()
    {
        boolean isValid = true;

        if (BudgetOverrideUserGroupOption::existByUserGroupAndConfiguration(this.UserGroupInfo, this.BudgetControlConfiguration) == true)
        {
            isValid = checkFailed(strFmt("@SYS127912", this.UserGroupInfo));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = super();

        isValid = isValid && BudgetControlConfigurationManager::validateConfigurationEditPermitted(this.BudgetControlConfiguration);

        if (isValid && !this.checkUserGroupInfo())
        {
            isValid = checkFailed(strFmt("@SYS127911", this.UserGroupInfo));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>BudgetOverrideUserGroupOption</c>table exists and
    ///    displays an error if it does not exist.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>RecId</c> field of the <c>BudgetOverrideUserGroupOption</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!BudgetOverrideUserGroupOption::exist(_recId))
        {
            ret = checkFailed(strFmt(BudgetOverrideUserGroupOption::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>BudgetOverrideUserGroupOption</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>RecId</c> of the <c>BudgetOverrideUserGroupOption</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly RecId from budgetOverrideUserGroupOption
                    where budgetOverrideUserGroupOption.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByUserGroupAndConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>BudgetOverrideUserGroupOption</c> table exists.
    /// </summary>
    /// <param name="_userGroupId">
    /// The user group ID of the record to find.
    /// </param>
    /// <param name="_budgetControlConfigRecId">
    /// A record ID of the <c>BudgetControlConfiguration</c> table.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByUserGroupAndConfiguration(userGroupId _userGroupId, BudgetControlConfigurationRecId _budgetControlConfigRecId)
    {
        boolean found;

        found = (select firstonly RecId from budgetOverrideUserGroupOption
                    where budgetOverrideUserGroupOption.UserGroupInfo == _userGroupId
                        && budgetOverrideUserGroupOption.BudgetControlConfiguration == _budgetControlConfigRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetOverrideUserGroupOption</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record Id of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetOverrideUserGroupOption</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetOverrideUserGroupOption find(
        recId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetOverrideUserGroupOption budgetOverrideUserGroupOption;

        budgetOverrideUserGroupOption.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetOverrideUserGroupOption.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetOverrideUserGroupOption
            where budgetOverrideUserGroupOption.RecId == _recId;

        return budgetOverrideUserGroupOption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByUserGroupAndConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetOverrideUserGroupOption</c> table.
    /// </summary>
    /// <param name="_userGroupId">
    /// The user group ID of the record to find.
    /// </param>
    /// <param name="_budgetControlConfigurationRecId">
    /// The record ID of the <c>BudgetControlConfiguration</c> table to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetOverrideUserGroupOption</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetOverrideUserGroupOption findByUserGroupAndConfiguration(
        userGroupId                         _userGroupId,
        BudgetControlConfigurationRecId     _budgetControlConfigurationRecId,
        boolean                             _forupdate = false,
        ConcurrencyModel                    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetOverrideUserGroupOption budgetOverrideUserGroupOption;

        budgetOverrideUserGroupOption.selectForUpdate(_forupdate);

        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetOverrideUserGroupOption.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetOverrideUserGroupOption
            where budgetOverrideUserGroupOption.UserGroupInfo == _userGroupId
                && budgetOverrideUserGroupOption.BudgetControlConfiguration == _budgetControlConfigurationRecId;

        return budgetOverrideUserGroupOption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefUserGroupInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the <c>UserGroupInfo</c> form for the specified <c>BudgetOverrideUserGroupOption</c> record ID.
    /// </summary>
    /// <param name="_budgetOverrideUserGroupOptionId">
    /// The record ID of the <c>BudgetOverrideUserGroupOption</c> record that is referenced by the caller.
    /// </param>
    /// <param name="_caller">
    /// The form object that called the <c>UserGroupInfo</c> form.
    /// </param>
    public static void jumpRefUserGroupInfo(RefRecId _budgetOverrideUserGroupOptionId, Object _caller)
    {
        UserGroupInfo                   userGroupInfo;
        BudgetOverrideUserGroupOption   budgetOverrideUserGroupOption;

        select firstOnly userGroupInfo
            exists join budgetOverrideUserGroupOption
                where budgetOverrideUserGroupOption.UserGroupInfo == userGroupInfo.id
                    && budgetOverrideUserGroupOption.RecId == _budgetOverrideUserGroupOptionId;

        Args args = new Args(new DictTable(userGroupInfo.TableId).formRef());
        args.caller(_caller);

        FormRun formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.dataSource().findRecord(userGroupInfo);
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
	<DeveloperDocumentation>@SYS127705</DeveloperDocumentation>
	<FormRef>BudgetControlConfiguration</FormRef>
	<Label>@SYS314450</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>UserGroupInfo</TitleField1>
	<TitleField2>DefaultOverBudgetOption</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>BudgetControlConfigUserGroupInfoIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>BudgetControlConfigUserGroupInfoIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserGroupInfo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultOverBudgetOption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserGroupInfo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS35583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserGroupInfo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverbudgetOption</Name>
			<Label>@SYS308848</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultOverBudgetOption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UserGroup</Name>
			<Label>@SYS21952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserGroupInfo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayUserGroupName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetControlConfiguration</Name>
			<AssetClassification>System metadata</AssetClassification>
			<ExtendedDataType>BudgetControlConfigurationRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DefaultOverBudgetOption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>BudgetCheckOverbudgetOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserGroupInfo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetOverrideUserGroupInfo</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetControlConfigUserGroupInfoIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>UserGroupInfo</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetControlConfiguration</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetControlConfiguration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS314452</EntityRelationshipRole>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BudgetControlConfiguration</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetControlConfiguration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetControlConfiguration_BudgetOverrideUserGroupOption</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetControlConfiguration</Name>
					<Field>BudgetControlConfiguration</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserGroupInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS21952</EntityRelationshipRole>
			<RelatedTable>UserGroupInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>UserGroupInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UserGroupInfo_BudgetOverrideUserGroupOption</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserGroupInfo</Name>
					<SourceEDT>BudgetOverrideUserGroupInfo</SourceEDT>
					<Field>UserGroupInfo</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>UserIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>