<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostConvItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventStdCostConvItem extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the contents of the record can be edited.
    /// </summary>
    /// <param name="_inventStdCostConv">
    ///    The <c>InventStdCostConv</c> table buffer that the current record is related to; optional.
    /// </param>
    /// <returns>
    ///    true if the record can be edited; otherwise, false.
    /// </returns>
    public boolean allowEdit(InventStdCostConv _inventStdCostConv = this.inventStdCostConv())
    {
        return this.Status != InventStdCostConvItemStatus::Converted &&
               (_inventStdCostConv.Status == InventStdCostConvStatus::Planned ||
                _inventStdCostConv.Status == InventStdCostConvStatus::InProgress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the item ID can be edited.
    /// </summary>
    /// <param name="_inventStdCostConv">
    ///    The <c>InventStdCostConv</c> table buffer that the current record is related to; optional.
    /// </param>
    /// <returns>
    ///    true if the item ID can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditItemId(InventStdCostConv _inventStdCostConv = this.inventStdCostConv())
    {
        return _inventStdCostConv.Status == InventStdCostConvStatus::Planned && this.allowEdit(_inventStdCostConv);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        InventItemPriceSim  inventItemPriceSim;
        CostingVersionId    costingVersionId;

        costingVersionId = this.inventStdCostConv().CostingVersionId;

        delete_from inventItemPriceSim
            where inventItemPriceSim.ItemId     == this.ItemId
               && inventItemPriceSim.VersionId  == costingVersionId;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventStdCostConv</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the record from a <c>InventStdCostConv</c> record.
    /// </summary>
    /// <param name="_inventStdCostConv">
    ///    The <c>InventStdCostConv</c> table buffer that the current record should be related to.
    /// </param>
    public void initFromInventStdCostConv(InventStdCostConv _inventStdCostConv)
    {
        this.StdCostConvRecId   = _inventStdCostConv.RecId;
        this.ModelGroupId       = _inventStdCostConv.DefaultModelGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventStdCostConv</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InventStdCostConv</c> record to which the current record is related.
    /// </summary>
    /// <returns>
    /// The <c>InventStdCostConv</c> table buffer that the current record is related to via the
    /// <c>StdCostConvRecId</c> field.
    /// </returns>
    public InventStdCostConv inventStdCostConv()
    {
        return InventStdCostConv::find(this.StdCostConvRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the <c>InventTable</c> record that the current record is related to.
    /// </summary>
    /// <returns>
    ///    The <c>InventTable</c> table buffer that the current record is related to via the ItemId field.
    /// </returns>
    public InventTable inventTable()
    {
        return InventTable::find(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemDimCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the value of the <c>ItemDimCostPrice</c> field from the <c>InventTable</c> record that the
    /// current record is related to.
    /// </summary>
    /// <returns>
    /// The value of the <c>ItemDimCostPrice</c> field from the <c>InventTable</c> table buffer that the
    /// current record is related to via the <c>ItemId</c> field.
    /// </returns>
    display public ItemDimCostPrice itemDimCostPrice()
    {
        return this.inventTable().ItemDimCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the value of the <c>ItemName</c> field from the <c>InventTable</c> record that the current
    /// record is related to.
    /// </summary>
    /// <returns>
    /// The value of the <c>ItemName</c> field from <c>InventTable</c> table buffer that the current record
    /// is related to via the <c>ItemId</c> field.
    /// </returns>
    display public ItemName itemName()
    {
        return this.inventTable().defaultProductName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the value of the <c>ItemType</c> field from the <c>InventTable</c> record that the current
    /// record is related to.
    /// </summary>
    /// <returns>
    /// The value of the <c>ItemType</c> field from <c>InventTable</c> table buffer that the current record
    /// is related to via the <c>ItemId</c> field.
    /// </returns>
    display public ItemType itemType()
    {
        return this.inventTable().ItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAfterConversionTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether inventory transactions or inventory settlements are posted for the current item
    ///    after or on the conversion date.
    /// </summary>
    /// <param name="_inventStdCostConv">
    ///    <c>InventStdCostConv</c> table buffer that the current record is related to.
    /// </param>
    /// <returns>
    ///    true if inventory transactions or settlements have not been posted on or after the conversion date;
    ///    otherwise false.
    /// </returns>
    public boolean validateAfterConversionTransactions(InventStdCostConv _inventStdCostConv)
    {
        InventTrans         inventTrans;
        InventSettlement    inventSettlement;
        boolean             ret = true;

        select firstonly RecId from inventTrans
            where inventTrans.ItemId            == this.ItemId                      &&
                  inventTrans.StatusReceipt     >= StatusReceipt::None              &&
                  inventTrans.StatusReceipt     <= StatusReceipt::Received          &&
                  inventTrans.StatusIssue       >= StatusIssue::None                &&
                  inventTrans.StatusIssue       <= StatusIssue::Deducted            &&
                  inventTrans.DateStatus        >= _inventStdCostConv.TransitionEndDate;

        if (inventTrans.RecId)
            ret = checkFailed(strFmt("@SYS119314", date2StrUsr( _inventStdCostConv.TransitionEndDate, DateFlags::FormatAll)));

        select firstonly RecId from inventSettlement
                where inventSettlement.ItemId           == this.ItemId                          &&
                  inventSettlement.TransDate            >= _inventStdCostConv.TransitionEndDate  &&
                  // <GEERU>
                  inventSettlement.Cancelled              == NoYes::No                            &&
                  inventSettlement.InventTransCurrency_RU == _inventStdCostConv.InventTransCurrency_RU;
                  // </GEERU>

        if (inventSettlement.RecId)
            ret = checkFailed(strFmt("@SYS119313", date2StrUsr( _inventStdCostConv.TransitionEndDate, DateFlags::FormatAll)));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (!this.inventStdCostConv().allowDeleteItems())
            ret = checkFailed("@SYS119312");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        InventStdCostConv       inventStdCostConv;
        InventTable             inventTable;
        InventModelGroupItem    inventModelGroupItem;
        boolean                 ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(InventStdCostConvItem, ItemId):
                inventStdCostConv = this.inventStdCostConv();
                if (this.ItemId != this.orig().ItemId && !this.allowEditItemId(inventStdCostConv))
                {
                    ret = checkFailed("@SYS119305");
                }

                if (InventTransArchive::existsItemId(this.ItemId))
                {
                    ret = checkFailed(strFmt("@SCM:StdCostConversionErrorForTransArchivedItem", this.ItemId));
                }

                inventTable = this.inventTable();

                if (inventTable.inventItemType().isServiceItem())
                {
                    ret = checkFailed("@SYS119306");
                }

                // <GEERU>
                switch (inventStdCostConv.InventTransCurrency_RU)
                {
                    case InventTransCurrency_RU::PrimaryCur   :
                    // </GEERU>
                        if (inventTable.modelGroup().inventModelType().stdCostBased())
                        {
                            ret = checkFailed("@SYS119307");
                        }
                    // <GEERU>
                    break;

                    case InventTransCurrency_RU::SecondaryCur :
                        if (inventTable.modelGroup().inventModelTypeSecCur_RU().stdCostBased())
                        {
                            ret = checkFailed("@SYS119307");
                        }
                        break;
                }
                // </GEERU>

                if (!this.validateAfterConversionTransactions(inventStdCostConv))
                {
                    ret = false;
                }

                // Check that the chosen inventoried policy can be used for the item.
                inventModelGroupItem = InventModelGroupItem::findByItemIdLegalEntity(inventTable.ItemId, inventTable.DataAreaId);
                inventModelGroupItem.ModelGroupId = this.ModelGroupId;
                ret = ret && inventModelGroupItem.inventoriedPolicy().validateFieldValue(fieldStr(InventModelGroupItem, ModelGroupId));

                break;

            case fieldNum(InventStdCostConvItem, ModelGroupId):
                if (!this.allowEdit())
                {
                    ret = checkFailed("@SYS119308");
                }
                // Check that the chosen inventoried policy can be used for the item.
                inventTable = this.inventTable();
                inventModelGroupItem = InventModelGroupItem::findByItemIdLegalEntity(inventTable.ItemId, inventTable.DataAreaId);
                inventModelGroupItem.ModelGroupId = this.ModelGroupId;
                ret = ret && inventModelGroupItem.inventoriedPolicy().validateFieldValue(fieldStr(InventModelGroupItem, ModelGroupId));

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        //keep this method for compatibility
        boolean ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static public boolean exist(RefRecId _stdCostConvRecid, ItemId _itemId)
    {
        return _stdCostConvRecid && _itemId && (select RecId from inventStdCostConvItem
                    where inventStdCostConvItem.StdCostConvRecId    == _stdCostConvRecid &&
                          inventStdCostConvItem.ItemId              == _itemId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Attempts to find a record in the <c>InventStdCostConvItem</c> table with particular values for the
    ///    <c>StdCostConvRecid</c> and <c>ItemId</c> fields.
    /// </summary>
    /// <param name="_stdCostConvRecid">
    ///    <c>StdCostConvRecId</c> of the related <c>InventStdCostConvItem</c> table record.
    /// </param>
    /// <param name="_itemId">
    ///    The ID of the item in the related <c>InventStdCostConvItem</c> table record.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that specifies whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    An <c>InventStdCostConvItem</c> table buffer.
    /// </returns>
    static public InventStdCostConvItem find(RefRecId _stdCostConvRecid, ItemId _itemId, boolean _forupdate = false)
    {
        InventStdCostConvItem   inventStdCostConvItem;
        if (_forupdate)
            inventStdCostConvItem.selectForUpdate(_forupdate);

        select firstonly inventStdCostConvItem
            where inventStdCostConvItem.StdCostConvRecId   == _stdCostConvRecid &&
                  inventStdCostConvItem.ItemId             == _itemId;

        return inventStdCostConvItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attempts to find a record in the <c>InventStdCostConvItem</c> table with a particular item ID.
    /// </summary>
    /// <param name="_itemId">
    /// <c>ItemId</c> of the related <c>InventStdCostConvItem</c> table record.
    /// </param>
    /// <param name="_forupdate">
    /// Indicates whether the select is that can be used in the context of an update on the table;
    /// optional; default value is false.
    /// </param>
    /// <returns>
    /// An <c>InventStdCostConvItem</c> table buffer.
    /// </returns>

    public static InventStdCostConvItem findItemId(ItemId   _itemId,
                                                   boolean  _forupdate = false)
    {
        InventStdCostConvItem   inventStdCostConvItem;
        if (_itemId)
        {
            inventStdCostConvItem.selectForUpdate(_forupdate);

            select * from inventStdCostConvItem
                where inventStdCostConvItem.ItemId == _itemId;
        }

        return inventStdCostConvItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemConversionDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date when the item was converted to a standard cost.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item to look up the conversion date for.
    /// </param>
    /// <param name="_inventTransCurrency">
    /// The type of currency(dual warehouse) to look up the conversion date for; optional.
    /// </param>
    /// <returns>
    /// The conversion date of the item. This is stored in the transaction period end date.
    /// </returns>

    public static InventStdCostConvEndDate itemConversionDate(
        ItemId                 _itemId,
        InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        InventStdCostConvItem   inventStdCostConvItem;
        InventStdCostConv       inventStdCostConv;
        // <GEERU>
        if (prmisdefault(_inventTransCurrency))
        {
        // </GEERU>
        select firstonly TableId from inventStdCostConvItem
            where inventStdCostConvItem.ItemId    == _itemId
               && inventStdCostConvItem.Status    == InventStdCostConvItemStatus::Converted
            join TransitionEndDate from inventStdCostConv
            where inventStdCostConv.RecId == inventStdCostConvItem.StdCostConvRecId;
        // <GEERU>
        }
        else
        {
            select firstonly TableId from inventStdCostConvItem
                where inventStdCostConvItem.ItemId    == _itemId
                   && inventStdCostConvItem.Status    == InventStdCostConvItemStatus::Converted
            join TransitionEndDate from inventStdCostConv
                order by TransitionEndDate desc
                where inventStdCostConv.RecId                  == inventStdCostConvItem.StdCostConvRecId
                   && inventStdCostConv.InventTransCurrency_RU == _inventTransCurrency;
        }
        // </GEERU>

        return inventStdCostConv.TransitionEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemWillBeConverted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an item will be converted to standard cost.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID.
    /// </param>
    /// <param name="_costingVersionId">
    /// The costing version Id
    /// </param>
    /// <returns>
    /// true if the item will be converted to standard cost; otherwise, false.
    /// </returns>
    static boolean itemWillBeConverted(
        ItemId              _itemId,
        CostingVersionId    _costingVersionId
        )
    {
        boolean                 ret;
        InventStdCostConvItem   inventStdCostConvItem;

        ret = false;

        if (CostingVersion::find(_costingVersionId).CostingType == CostingVersionCostingType::Conversion)
        {
            inventStdCostConvItem = InventStdCostConvItem::find(InventStdCostConv::findCostingVersion(_costingVersionId).RecId,
                                                                _itemId);
            if (inventStdCostConvItem.RecId && inventStdCostConvItem.Status != InventStdCostConvItemStatus::Converted)
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a lookup of the items that are not of type Service and that do not use a standard cost
    ///    inventory model group.
    /// </summary>
    /// <param name="ctrl">
    ///    The form control associated with the lookup.
    /// </param>
    /// <param name="_inventTransCurrency">
    /// The transaction currency: primary (default) or secondary - used for Dual Warehousing; optional.
    /// </param>
    public static void lookupItemId(FormStringControl      ctrl,
                                           InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), ctrl);
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildDataSource queryBuildDataSourceModelGroupItem;
        QueryBuildDataSource queryBuildDataSourceInventTable;

        sysTableLookup.addLookupfield(fieldNum(InventTable, ItemId));
        sysTableLookup.addLookupMethod(tableMethodStr(InventTable, defaultProductName));
        sysTableLookup.addLookupMethod(tableMethodStr(InventTable, itemGroupId));
        sysTableLookup.addLookupfield(fieldNum(InventTable, NameAlias));
        sysTableLookup.addLookupfield(fieldNum(InventTable, ItemType));

        queryBuildDataSourceInventTable = query.addDataSource(tableNum(InventTable));
        queryBuildDataSourceInventTable.addRange(fieldNum(InventTable, ItemType)).value(SysQuery::valueNot(ItemType::Service));

        queryBuildDataSourceModelGroupItem  = queryBuildDataSourceInventTable.addDataSource(tableNum(InventModelGroupItem));
        queryBuildDataSourceModelGroupItem.relations(true);
        queryBuildDataSourceModelGroupItem.joinMode(JoinMode::NoExistsJoin);
        queryBuildDataSourceModelGroupItem.fetchMode(QueryFetchMode::One2One);

        queryBuildDataSource = queryBuildDataSourceModelGroupItem.addDataSource(tableNum(InventModelGroup));
        queryBuildDataSource.relations(true);
        queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
        // <GEERU>
        if (_inventTransCurrency == InventTransCurrency_RU::SecondaryCur)
        {
            queryBuildDataSource.addRange(fieldnum(InventModelGroup, InventModelSecCur_RU)).value(queryValue(InventModel::StdCost));
        }
        else
        {
        // </GEERU>
            queryBuildDataSource.addRange(fieldnum(InventModelGroup, InventModel)).value(queryValue(InventModel::StdCost));
        // <GEERU>
        }
        // </GEERU>
        queryBuildDataSource.fetchMode(QueryFetchMode::One2One);

        queryBuildDataSource = queryBuildDataSourceInventTable.addDataSource(tableNum(InventStdCostConvItem));
        queryBuildDataSource.relations(true);
        queryBuildDataSource.joinMode(JoinMode::NoExistsJoin);
        queryBuildDataSource.fetchMode(QueryFetchMode::One2One);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123788</DeveloperDocumentation>
	<Label>@SYS119309</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>ModelGroupId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ConversionItemIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Single</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ItemIdx</PrimaryIndex>
	<ReplacementKey>ItemIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventStdCostConvItemConverted</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventStdCostConvItemConverted</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CheckedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Conversion</Name>
			<Label>@SYS119311</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CheckedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GridOverview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemDimCostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CheckedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>CheckedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventStdCostConvCheckedDateTime</ExtendedDataType>
			<Label>@SYS119310</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelGroupId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventModelGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS119354</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>InventStdCostConvItemStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>StdCostConvRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ConversionItemIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>StdCostConvRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventItemPrice</Name>
			<EntityRelationshipRole>@SYS123789</EntityRelationshipRole>
			<RelatedTable>InventItemPrice</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>inventItemPriceSim</Name>
			<EntityRelationshipRole>@SYS123789</EntityRelationshipRole>
			<RelatedTable>InventItemPriceSim</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventModelGroup_StandardCost</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123787</EntityRelationshipRole>
			<RelatedTable>InventModelGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>InventModel_Extern</Name>
					<RelatedField>InventModel</RelatedField>
					<ValueStr>InventModel::StdCost</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModelGroupId</Name>
					<Field>ModelGroupId</Field>
					<RelatedField>ModelGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventStdCostConv</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123790</EntityRelationshipRole>
			<RelatedTable>InventStdCostConv</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StdCostConvRecId</Name>
					<Field>StdCostConvRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>