<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocDirTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSLocDirTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initQueryFromWorkTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes location directives query from work transaction type.
    /// </summary>
    /// <param name="_workTransType">
    /// Work transaction type that the query will be based on.
    /// </param>
    /// <param name="_multiSKU">
    /// Indicating multi SKU is enabled or not.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if the work type is not supported.
    /// </exception>
    public void initQueryFromWorkTransType(
        WHSWorkTransType _workTransType,
        WHSMultiSKU      _multiSKU)
    {
        WhsWorkTransactionType workTransactionType = WhsWorkTransactionType::singletonFromType(_workTransType);
        if (workTransactionType)
        {
            QueryName queryName = workTransactionType.locationDirectiveQueryName(this);
        
            if (queryName)
            {
                QueryRun queryRun = new QueryRun(queryName);
                this.LocDirQuery = queryRun.pack();
            }
        }
        else
        {
            throw error(strFmt("@WAX1705", _workTransType));
        }
        this.MultiSKU = _multiSKU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLocationDirectiveQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default query run.
    /// </summary>
    /// <returns>The default query run.</returns>
    [Hookable(false)]
    internal QueryRun defaultLocationDirectiveQueryRun()
    {
        QueryName queryName;

        WhsWorkTransactionType workTransactionType = WhsWorkTransactionType::singletonFromType(this.workTransType);
        if (workTransactionType)
        {
            queryName = workTransactionType.locationDirectiveQueryName(this);
        }

        if (queryName)
        {
            return new QueryRun(queryName);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDispositionCode</Name>
				<Source><![CDATA[
    private void initDispositionCode(WHSApplicableDispositionCodeRule _applicableDispositionCodeRule)
    {
        if (_applicableDispositionCodeRule == WHSApplicableDispositionCodeRule::AnyDispositionCode)
        {
            this.DispositionCode = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        WHSLocDirTable  locDirTable;

        super();

        select firstonly LocSeqNum from locDirTable
            order by locDirTable.LocSeqNum desc;

        this.LocSeqNum = locDirTable.LocSeqNum + 1;
        this.Scope = WhsLocationDirectiveScope::SingleItem;
        this.WarehouseGroupAll = WhsWarehouseGroupAll::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the query is identical to the default query.
    /// </summary>
    /// <returns>
    /// true if the location directive has a default query; otherwise, false.
    /// </returns>
    internal boolean isDefaultQuery()
    {
        WHSLocDirTable defaultLocDirTable;

        buf2Buf(this, defaultLocDirTable);
        defaultLocDirTable.initQueryFromWorkTransType(this.WorkTransType, this.MultiSKU);

        return this.LocDirQuery == defaultLocDirTable.LocDirQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLocatingWholeLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if the location directive is locating a whole license plate.
    /// </summary>
    /// <returns>true when locating a whole license plate; otherwise, false.</returns>
    public boolean isLocatingWholeLP()
    {
        switch (this.LocateBy)
        {
            case WHSLocDirLocateBy::ASN:
            case WHSLocDirLocateBy::MixedLP:
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return [
                [fieldnum(WHSLocDirTable, LocDirQuery),
                    [fieldnum(WHSLocDirTable, WorkTransType), fieldnum(WHSLocDirTable, LocateBy)]],
                [fieldnum(WHSLocDirTable, DispositionCode),
                    [fieldnum(WHSLocDirTable, ApplicableDispositionCodeRule)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(WHSLocDirTable, LocDirQuery):
                this.initQueryFromWorkTransType(this.WorkTransType, this.locationDirectiveScope() == WhsLocationDirectiveScope::MultiItem);
                break;
            case fieldNum(WHSLocDirTable, DispositionCode):
                this.initDispositionCode(this.ApplicableDispositionCodeRule);
                break;                
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains code to be executed when a field is modified.
    /// </summary>
    /// <param name="_fieldName">
    /// Name of the modified field.
    /// </param>
    /// <param name="_arrayIndex">
    /// Array index of the modified field.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(WHSLocDirTable, InventLocationId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventLocationId));
                this.adjustActionQueriesToNewWarehouse();
                break;
            case fieldStr(WHSLocDirTable, InventSiteId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventSiteId));
                this.adjustActionQueriesToNewWarehouse();
                break;
            case fieldStr(WHSLocDirTable, MultiSKU):
                this.Scope = this.MultiSKU ? WhsLocationDirectiveScope::MultiItem : WhsLocationDirectiveScope::SingleItem;
                break;
            case fieldStr(WHSLocDirTable, WarehouseGroupAll):
                this.setWarehouseSelection();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortingNoArrange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change <c>WHSLocDirTable</c> sequence numbers with adjacent location directive sequence numbers based on up or down button click
    /// </summary>
    /// <param name="_up">
    /// Boolean used to determine if the up button or down button was pressed
    /// </param>
    /// <returns>
    /// An instance of <c>WHSLocDirTable</c> that represents the location directive that was moved
    /// </returns>
    [SysObsolete('Use WHSSequenceNumberMoverForm for Move up/down buttons logic', false, 13\09\2022)]
    public WHSLocDirTable sortingNoArrange(boolean _up)
    {
        WHSLocDirTable  locDirTableNew;
        WHSLocDirTable  locDirTableOld;
        WHSLocDirTable  cursor;
        int             change;
        WHSLocSeqNum    oldLocSeqNum;

        cursor = this;

        if (cursor.validateWrite())
        {
            ttsbegin;

            cursor.write();

            locDirTableNew.data(this);
            locDirTableOld.data(this);

            if (_up == true)
            {
                if (cursor.LocSeqNum > 1)
                {
                    change--;
                }
            }
            else
            {
                if (cursor.LocSeqNum < WHSLocDirTable::getMaxLocSeqNum(cursor.WorkTransType)
                &&  cursor.LocSeqNum != 0)
                {
                    change++;
                }
            }

            if (change)
            {
                select forupdate locDirTableNew
                    where locDirTableNew.RecId == cursor.RecId;

                if (locDirTableNew)
                {
                    oldLocSeqNum = locDirTableNew.LocSeqNum;
                    locDirTableNew.LocSeqNum += change;

                    select forupdate firstonly locDirTableOld
                        where locDirTableOld.LocSeqNum      == locDirTableNew.LocSeqNum
                            && locDirTableOld.WorkTransType == locDirTableNew.WorkTransType
                            && locDirTableOld.RecId         != locDirTableNew.RecId;

                    if (locDirTableOld && change)
                    {
                        locDirTableOld.LocSeqNum = maxInt(); // Update index conflict during switch of sequence
                        locDirTableOld.update();
                    }

                    locDirTableNew.update();

                    if (locDirTableOld && change)
                    {
                        locDirTableOld.LocSeqNum = oldLocSeqNum;
                        locDirTableOld.update();
                    }
                }
            }

            ttscommit;
        }
        else
        {
            locDirTableNew = cursor;
        }

        return locDirTableNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WHSLocDirTable, InventLocationId):
                ret = this.InventStorageDimMap::validateField(fieldNum(InventStorageDimMap, InventLocationId));
                if (this.InventLocationId &&
                    !InventLocation::find(this.InventLocationId).whsEnabled)
                {
                    ret = checkFailed("@WAX4825");
                }
                break;

            case fieldNum(WHSLocDirTable, WorkTransType):
                if (this.WorkTransType == WHSWorkTransType::None
                    || this.WorkTransType == WHSWorkTransType::CycleCount
                    || this.WorkTransType == WHSWorkTransType::WorkCancel)
                {
                    ret = checkFailed(strFmt("@WAX:LocationDirectiveWorkOrderTypeError", this.WorkTransType));
                }
                break;

            case fieldNum(WHSLocDirTable, WorkType):
                if (!this.validateWorkTypeForWorkTransType())
                {
                    ret = checkFailed(strFmt("@WAX:InvalidWorkTypeForSpecificWorkOrderType", this.WorkTransType));
                    ret = checkFailed(strFmt("@WAX:OnlySpecificWorkTypeIsValid", WHSWorkType::Put));
                }
                break;

            case fieldNum(WHSLocDirTable, LocateBy):
                ret = this.validateLocateBy();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocateBy</Name>
				<Source><![CDATA[
    private boolean validateLocateBy()
    {
        boolean ret = true;

        if (this.LocateBy != WHSLocDirLocateBy::Standard
        &&  !this.doesSupportNonStandardLocateBy())
        {
            ret = checkFailed("@WAX:InvalidLocateByForWorkTransType");
        }

        if ((this.LocateBy == WHSLocDirLocateBy::ASN && !this.doesSupportAsnLocateBy())
            || (this.LocateBy == WHSLocDirLocateBy::MixedLP && !this.doesSupportMixedLpLocateBy()))
        {
            ret = checkFailed(strFmt("@WAX:InvalidLocateByForWorkTransTypeThatOnlySupportClusterOrItem", this.WorkTransType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesSupportNonStandardLocateBy</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean doesSupportNonStandardLocateBy()
    {
        return this.WorkTransType == WHSWorkTransType::Purch
            || this.WorkTransType == WHSWorkTransType::TransferReceipt
            || this.WorkTransType == WHSWorkTransType::ProdPut
            || this.WorkTransType == WHSWorkTransType::ProdProcessPut;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesSupportAsnLocateBy</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean doesSupportAsnLocateBy()
    {
        return this.WorkTransType == WHSWorkTransType::Purch
            || (this.WorkTransType == WHSWorkTransType::TransferReceipt && WHSTransferReceiptASNFlight::instance().isEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesSupportMixedLpLocateBy</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean doesSupportMixedLpLocateBy()
    {
        return this.WorkTransType == WHSWorkTransType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkTypeForWorkTransType</Name>
				<Source><![CDATA[
    private boolean validateWorkTypeForWorkTransType()
    {
        boolean ret = true;

        if (this.WorkTransType == WHSWorkTransType::PackedContainerPicking
            && this.WorkType != WHSWorkType::Put)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMultipleSKUFieldForWorkTransType</Name>
				<Source><![CDATA[
    private boolean validateMultipleSKUFieldForWorkTransType()
    {
        boolean ret = true;

        if (this.WorkTransType == WHSWorkTransType::PackedContainerPicking
            && !this.MultiSKU)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of a field.
    /// </summary>
    /// <param name="_fieldName">
    /// Name of the field.
    /// </param>
    /// <param name="_arrayIndex">
    /// Array index of the field.
    /// </param>
    /// <returns>
    /// True if the field is validated.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(WHSLocDirTable, DispositionCode):
                    if (this.WorkTransType == WHSWorkTransType::ReturnOrder
                    && !WHSDispositionTable::find(this.DispositionCode).ReturnDispositionCodeId)
                    {
                        ret = checkFailed("@WAX4791");
                        break;
                    }

                    if (this.DispositionCode
                        && !WHSLocDirTable::canDispositionCodeBeUsed(this.WorkTransType))
                    {
                        ret = checkFailed("@WAX4792");
                        break;
                    }

                    break;

                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDispositionCodeBeUsed</Name>
				<Source><![CDATA[
    protected static boolean canDispositionCodeBeUsed(WHSWorkTransType _workTransType)
    { 
        switch(_workTransType)
        {
            case WHSWorkTransType::Purch:
            case WHSWorkTransType::ReturnOrder:
            case WHSWorkTransType::ProdPut:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLocationDirective</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies a location directive record with a different name.
    /// </summary>
    /// <param name="_workTransType">
    /// Work transaction type of the record to be copied.
    /// </param>
    /// <param name="_workType">
    /// Work type of the record to be copied.
    /// </param>
    /// <param name="_locDirName">
    /// Location directive name of the record to be copied.
    /// </param>
    /// <param name="_inventSiteId">
    /// Site id of the record to be copied.
    /// </param>
    /// <param name="_inventLocationId">
    /// Warehouse id of the record to be copied.
    /// </param>
    /// <param name="_copyLocDirName">
    /// New name of the copied location directive record.
    /// </param>
    public static WHSLocDirTable copyLocationDirective(
        WHSWorkTransType _workTransType,
        WHSWorkType      _workType,
        WHSLocDirName    _locDirName,
        InventSiteId     _inventSiteId,
        InventLocationId _inventLocationId,
        WHSLocDirName    _copyLocDirName)
    {
        return WHSLocDirTable::copyLocationDirectiveWithParameters(_workTransType, _workType, _locDirName, _inventSiteId, _inventLocationId, _copyLocDirName, _inventLocationId, _workTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLocationDirectiveWithParameters</Name>
				<Source><![CDATA[
    internal static WHSLocDirTable copyLocationDirectiveWithParameters(
        WHSWorkTransType _workTransType,
        WHSWorkType      _workType,
        WHSLocDirName    _locDirName,
        InventSiteId     _inventSiteId,
        InventLocationId _inventLocationId,
        WHSLocDirName    _copyLocDirName,
        InventLocationId _copyWarehouse,
        WHSWorkTransType _copyWorkTransType)
    {
        WHSLocDirTable      locDirTable;
        WHSLocDirLine       locDirLine;
        WHSLocDirLineUOM    locDirLineUOM;
        WHSLocDirAction     locDirAction;
        WHSLocDirTable      copyLocDirTable;
        WHSLocDirLine       copyLocDirLine;
        WHSLocDirLineUOM    copyLocDirLineUOM;
        WHSLocDirAction     copyLocDirAction;

        ttsbegin;

        // Copy the header
        locDirTable = WHSLocDirTable::find(_locDirName, _workType, _workTransType, _inventSiteId, _inventLocationId);
        buf2Buf(locDirTable, copyLocDirTable);
        copyLocDirTable.LocDirName   = _copyLocDirName;
        copyLocDirTable.LocSeqNum    = (select firstonly LocSeqNum from whsLocDirTable
                                            order by LocSeqNum desc
                                            where whsLocDirTable.WorkTransType == _workTransType).LocSeqNum + 1;
        if (_inventLocationId != _copyWarehouse)
        {        
            copyLocDirTable.InventLocationId = _copyWarehouse;
            copyLocDirTable.InventSiteId = InventLocation::find(_copyWarehouse).InventSiteId;
        }

        if (_workTransType != _copyWorkTransType)
        {
            copyLocDirTable.WorkTransType = _copyWorkTransType;    
        }

        if (!copyLocDirTable.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSLocDirTable)));
        }
        else
        {
            copyLocDirTable.insert();
        }

        // Copy the lines
        while select locDirLine
            where locDirLine.RefRecId == locDirTable.RecId
        {
            buf2Buf(locDirLine, copyLocDirLine);
            copyLocDirLine.RefRecId = copyLocDirTable.RecId;
            if (!copyLocDirLine.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSLocDirLine)));
            }
            else
            {
                copyLocDirLine.insert();
            }

            // Copy the UOM's
            while select locDirLineUOM
                where locDirLineUOM.RefRecId == locDirLine.RecId
            {
                buf2Buf(locDirLineUOM, copyLocDirLineUOM);
                copyLocDirLineUOM.RefRecId = copyLocDirLine.RecId;
                if (!copyLocDirLineUOM.validateWrite())
                {
                    throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSLocDirLineUOM)));
                }
                else
                {
                    copyLocDirLineUOM.insert();
                }
            }

            // Copy the actions
            while select locDirAction
                where locDirAction.RefRecId == locDirLine.RecId
            {
                buf2Buf(locDirAction, copyLocDirAction);
                copyLocDirAction.RefRecId = copyLocDirLine.RecId;

                if (_inventLocationId != _copyWarehouse)
                {
                    copyLocDirAction.adjustQueryForWarehouse(_copyWarehouse);
                }

                if (!copyLocDirAction.validateWrite())
                {
                    throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSLocDirAction)));
                }
                else
                {           

                    copyLocDirAction.insert();
                }
            }
        }

        ttscommit;

        return copyLocDirTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a specific <c>whsLocDirTable</c> record exists.
    /// </summary>
    /// <param name="_locDirName">
    /// Name of the record.
    /// </param>
    /// <param name="_workType">
    /// Work type of the record.
    /// </param>
    /// <param name="_workTransType">
    /// Work transaction type of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(
        WHSLocDirName    _locDirName,
        WHSWorkType      _workType,
        WHSWorkTransType _workTransType)
    {
        return (_locDirName && _workType && _workTransType) &&
               (select firstonly RecId from whsLocDirTable
                where whsLocDirTable.LocDirName      == _locDirName     &&
                      whsLocDirTable.WorkType        == _workType      &&
                      whsLocDirTable.WorkTransType   == _workTransType).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a specific <c>whsLocDirTable</c> record exists.
    /// </summary>
    /// <param name="_locDirName">
    /// Name of the record.
    /// </param>
    /// <param name="_workType">
    /// Work type of the record.
    /// </param>
    /// <param name="_workTransType">
    /// Work transaction type of the record.
    /// </param>
    /// <param name="_inventSiteId">
    /// Site id of the record.
    /// </param>
    /// <param name="_inventLocationId">
    /// Warehouse id of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean existByName(
        WHSLocDirName     _locDirName,
        WHSWorkType       _workType,
        WHSWorkTransType  _workTransType,
        InventSiteId      _inventSiteId,
        InventLocationId  _inventLocationId)
    {
        return (_locDirName && _workType && _workTransType) &&
               (select firstonly RecId from whsLocDirTable
                where whsLocDirTable.LocDirName         == _locDirName      &&
                      whsLocDirTable.WorkType           == _workType        &&
                      whsLocDirTable.WorkTransType      == _workTransType   &&
                      whsLocDirTable.InventSiteId       == _inventSiteId    &&
                      whsLocDirTable.InventLocationId   == _inventLocationId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSLocDirTable</c> record with given parameters.
    /// </summary>
    /// <param name="_locDirName">
    /// Name of the record.
    /// </param>
    /// <param name="_workType">
    /// Work type of the record.
    /// </param>
    /// <param name="_workTransType">
    /// Work transaction type of the record.
    /// </param>
    /// <param name="_inventSiteId">
    /// Site id of the record.
    /// </param>
    /// <param name="_inventLocationId">
    /// Warehouse id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSLocDirTable find(
        WHSLocDirName     _locDirName,
        WHSWorkType       _workType,
        WHSWorkTransType  _workTransType,
        InventSiteId      _inventSiteId,
        InventLocationId  _inventLocationId,
        boolean           _forupdate = false)
    {
        WHSLocDirTable    locDirTable;

        if (_locDirName     &&
            _workType       &&
            _workTransType)
        {
            locDirTable.selectForUpdate(_forupdate);

            select firstonly locDirTable
                where locDirTable.LocDirName        == _locDirName          &&
                      locDirTable.WorkType          == _workType            &&
                      locDirTable.InventSiteId      == _inventSiteId        &&
                      locDirTable.InventLocationId  == _inventLocationId    &&
                      locDirTable.WorkTransType     == _workTransType;
        }

        return locDirTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the WHSLocDirTable table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the location directive table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// Does not vary.
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the WHSLocDirTable table; otherwise, an empty record.
    /// </returns>
    public static WHSLocDirTable findByRecId(RecId _recId, boolean _forUpdate = false)
    {
        WHSLocDirTable    locDirTable;

        if (_recId)
        {
            locDirTable.selectForUpdate(_forUpdate);

            select firstonly locDirTable
                where locDirTable.RecId == _recId;
        }

        return locDirTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxLineLocSeqNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the highest <c>LocSeqNum</c> for the lines for the given location directive.
    /// </summary>
    /// <param name="_refRecId">
    /// <c>RecId</c> representing a location directive.  Used to find the location directive line with the highest <c>LocSeqNum</c>.
    /// </param>
    /// <returns>
    /// The highest <c>LocSeqNum</c> found for the given location directive.
    /// </returns>
    public static WHSLocSeqNum getMaxLineLocSeqNum(RefRecId _refRecId)
    {
        WHSLocDirLine   locDirLine;

        select maxof(LocSeqNum) from locDirLine
            where locDirLine.RefRecId == _refRecId;

        return locDirLine.LocSeqNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxLocSeqNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the highest <c>LocSeqNum</c> for the lines for the given work trans type.
    /// </summary>
    /// <param name="_workTransType">
    /// <c>WHSWorkTransType</c> representing a type of location directive.  Used to find the location directive  for that type with the highest <c>LocSeqNum</c>.
    /// </param>
    /// <returns>
    /// The highest <c>LocSeqNum</c> found for the given work trans type.
    /// </returns>
    public static WHSLocSeqNum getMaxLocSeqNum(WHSWorkTransType _workTransType)
    {
        WHSLocDirTable   locDirTable;

        select maxof(LocSeqNum) from locDirTable
            where locDirTable.WorkTransType == _workTransType;

        return locDirTable.LocSeqNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEventForWarehouse(funcName(), this, this.InventLocationId))
        {
            super();
        }

        WHSLocationDirectiveCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.setScope();
        this.setWarehouseSelection();
        
        var logger = WHSInstrumentationLogger::createLoggerForTable(this);
        using (var activityContext = logger.configuration().changeEventForWarehouse(funcName(), this, this.InventLocationId))
        {
            using (var structureContext = logger.locationDirectiveActivities().locationDirectiveStructure(this))
            {
                super();
            }
        }

        WHSLocationDirectiveCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.setScope();
        this.setWarehouseSelection();

        var logger = WHSInstrumentationLogger::createLoggerForTable(this);
        using (var activityContext = logger.configuration().changeEventForWarehouse(funcName(), this, this.InventLocationId))
        {
            using (var structureContext = logger.locationDirectiveActivities().locationDirectiveStructure(this))
            {
                super();
            }
        }

        WHSLocationDirectiveCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write()
    {
        this.setScope();
        this.setWarehouseSelection();

        super();

        WHSLocationDirectiveCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWarehouseSelection</Name>
				<Source><![CDATA[
    private void setWarehouseSelection()
    {
        switch (this.WarehouseGroupAll)
        {
            case WhsWarehouseGroupAll::All:
                this.InventLocationId = '';
                this.InventSiteId = '';
                this.WarehouseGroupId = '';
                break;

            case WhsWarehouseGroupAll::Group:
                this.InventLocationId = '';
                this.InventSiteId = '';
                break;

            case WhsWarehouseGroupAll::Warehouse:
                this.WarehouseGroupId = '';
                break;
        }
        this.adjustActionQueriesToNewWarehouse();
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustActionQueriesToNewWarehouse</Name>
				<Source><![CDATA[
    private void adjustActionQueriesToNewWarehouse()
    {
        if (this.InventLocationId != this.orig().InventLocationId)
        {
            ttsbegin;
            WHSLocDirAction LocDirAction;
            WHSLocDirLine locDirLine;
                      
            while select forupdate locDirAction
                exists join locDirLine
                    where locDirLine.RecId == locDirAction.RefRecId 
                       && locDirLine.RefRecId == this.RecId
            {
                locDirAction.adjustQueryForWarehouse(this.InventLocationId);
                locDirAction.update();
            }
            
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setScope</Name>
				<Source><![CDATA[
    private void setScope()
    {
        this.Scope = this.locationDirectiveScope();
        this.MultiSKU = this.Scope == WhsLocationDirectiveScope::MultiItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRestrictingUnitQuantityCalculationRoundUpAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this location directive allows the use of restricting units for quantity calculation roundUp.
    /// </summary>
    /// <returns>
    /// true if the functionality is allowed; otherwise, false.
    ///</returns>
    public boolean isRestrictingUnitQuantityCalculationRoundUpAllowed()
    {
        return (this.WorkTransType == WHSWorkTransType::ProdPick
            &&  this.WorkType      == WHSWorkType::Pick);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSingleItemLocationDirectiveScopeSupported</Name>
				<Source><![CDATA[
    internal boolean isSingleItemLocationDirectiveScopeSupported()
    {
        if (this.WorkTransType == WHSWorkTransType::PackedContainerPicking)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSingleOrderLocationDirectiveScopeSupported</Name>
				<Source><![CDATA[
    internal boolean isSingleOrderLocationDirectiveScopeSupported()
    {
        if (this.WorkType == WHSWorkType::Put)
        {
            WhsWorkTransactionType workTransactionType = WhsWorkTransactionType::singletonFromType(this.WorkTransType);
            return workTransactionType && workTransactionType.isSingleOrderLocationDirectiveScopeSupported();
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllLocationDirectiveTypeSupported</Name>
				<Source><![CDATA[
    internal boolean isAllLocationDirectiveTypeSupported()
    {
        if (this.WorkType == WHSWorkType::Put)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocationDirectiveScope</Name>
				<Source><![CDATA[
    private boolean validateLocationDirectiveScope()
    {
        switch (this.Scope)
        {
            case WhsLocationDirectiveScope::SingleItem:
                return this.isSingleItemLocationDirectiveScopeSupported();
            case WhsLocationDirectiveScope::SingleOrder:
                return this.isSingleOrderLocationDirectiveScopeSupported();
            case WhsLocationDirectiveScope::All:
                return this.isAllLocationDirectiveTypeSupported();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret && !this.validateLocationDirectiveScope())
        {
            ret = checkFailed(strFmt("@WAX:LocationDirectiveScopeValidationError", this.Scope,
                fieldpname(WHSLocDirTable, WorkTransType), this.WorkTransType,
                fieldpname(WHSLocDirTable, WorkType), this.WorkType));
        }
        if (ret && this.ApplicableDispositionCodeRule == WHSApplicableDispositionCodeRule::AnyDispositionCode && this.DispositionCode)
        {
            ret = checkFailed(strFmt("@WAX:ApplicableDispositionCodeValidation", enum2str(this.ApplicableDispositionCodeRule)));
        }
        if (ret && this.validateApplicableDispositionCodeRule())
        {
            ret = checkFailed(strFmt("@WAX:ApplicableDispositionCodeRuleValidation", this.WorkTransType));
        }
        if (ret && !this.validateWarehouseSelectionWarehouse())
        {
            ret = checkFailed("@WAX:LocationDirectiveMissingSiteOrWarehouse");
        }
        if (ret && !this.validateWarehouseSelectionGroup())
        {
            ret = checkFailed("@WAX:LocationDirectiveMissingWarehouseGroup");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWarehouseSelectionGroup</Name>
				<Source><![CDATA[
    private boolean validateWarehouseSelectionGroup()
    {
        if (this.WarehouseGroupAll == WhsWarehouseGroupAll::Group &&
           !this.WarehouseGroupId)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWarehouseSelectionWarehouse</Name>
				<Source><![CDATA[
    private boolean validateWarehouseSelectionWarehouse()
    {
        if (this.WarehouseGroupAll == WhsWarehouseGroupAll::Warehouse &&
            (!this.InventLocationId || !this.InventSiteId))
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateApplicableDispositionCodeRule</Name>
				<Source><![CDATA[
    private boolean validateApplicableDispositionCodeRule()
    {
        return (!WhsLocationDirective::supportSearchBasedOnDispositionCode(this.WorkTransType)
            && this.ApplicableDispositionCodeRule != WHSApplicableDispositionCodeRule::ExactMatch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEditQueryForPreview</Name>
				<Source><![CDATA[
    internal static Query processEditQueryForPreview(Query _query, Common _buffer)
    {
        WHSLocDirTable locDirTable = _buffer as WHSLocDirTable;

        if (locDirTable) 
        {
            WhsWorkTransactionType workTransactionType = WhsWorkTransactionType::singletonFromType(locDirTable.WorkTransType);

            if (workTransactionType)
            {
                return workTransactionType.filterLocationDirectiveTableQuery(_query, locDirTable);
            }
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveScope</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public edit WhsLocationDirectiveScope locationDirectiveScope(boolean _set = false, WhsLocationDirectiveScope _scope = WhsLocationDirectiveScope::Unknown)
    {
        if (_set)
        {
            this.MultiSKU = _scope == WhsLocationDirectiveScope::MultiItem;
            this.Scope = _scope;
        }        

        if (this.Scope == WhsLocationDirectiveScope::Unknown)
        {
            if (this.MultiSKU)
            {
                return WhsLocationDirectiveScope::MultiItem;
            }
            return WhsLocationDirectiveScope::SingleItem;
        }

        return this.Scope;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isImmediateReplenishmentSupported</Name>
				<Source><![CDATA[
    internal boolean isImmediateReplenishmentSupported()
    {
        return WHSLocDirTable::supportImmediateReplenishment(this.WorkType, this.WorkTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportImmediateReplenishment</Name>
				<Source><![CDATA[
    internal static boolean supportImmediateReplenishment(WHSWorkType _whsWorkType, WHSWorkTransType _workTransType)
    {
        return _whsWorkType == WHSWorkType::Pick 
            && WhsWorkTransactionType::singletonFromTypeOrDefault(_workTransType).isReplenishmentAllowed();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4400</DeveloperDocumentation>
	<Label>@WAX395</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>LocSeqNum</TitleField1>
	<TitleField2>LocDirName</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>LocSeqNum</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>NameWorkTypeTransTypeIdx</PrimaryIndex>
	<ReplacementKey>NameWorkTypeTransTypeIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>WHSLocDirLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WHSLocDirLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LocSeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocDirQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocDirHintCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocDirName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Scope</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DispositionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApplicableDispositionCodeRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LocDirName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LocSeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocDirQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocDirHintCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocDirName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DispositionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocateBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApplicableDispositionCodeRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Scope</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarehouseGroupAll</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarehouseGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DispositionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDispositionCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LocDirHintCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocDirHintCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LocDirName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocDirName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>LocDirQuery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocDirQuery</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LocSeqNum</Name>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>WHSLocSeqNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MultiSKU</Name>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>WHSMultiSKU</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkTransType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>OII</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSWorkTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>OII</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSWorkType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LocateBy</Name>
			<AssetClassification>OII</AssetClassification>
			<EnumType>WHSLocDirLocateBy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApplicableDispositionCodeRule</Name>
			<AssetClassification>OII</AssetClassification>
			<EnumType>WHSApplicableDispositionCodeRule</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Scope</Name>
			<AssetClassification>OII</AssetClassification>
			<Visible>No</Visible>
			<EnumType>WhsLocationDirectiveScope</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WarehouseGroupAll</Name>
			<AssetClassification>OII</AssetClassification>
			<EnumType>WhsWarehouseGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarehouseGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WhsWarehouseGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LocSeqNum</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LocSeqNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LocDirName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkTransType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NameWorkTypeTransTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LocDirName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkTransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventSiteId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WarehouseGroupIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WarehouseGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventStorageDimMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<SourceEDT>InventSiteId</SourceEDT>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSDispositionTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSDispositionTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DispositionCode</Name>
					<SourceEDT>WHSDispositionCode</SourceEDT>
					<Field>DispositionCode</Field>
					<RelatedField>DispositionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLocDirHint</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSLocDirHint</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LocDirHintCode</Name>
					<SourceEDT>WHSLocDirHintCode</SourceEDT>
					<Field>LocDirHintCode</Field>
					<RelatedField>LocDirHintCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WhsWarehouseGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WhsWarehouseGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarehouseGroupId</Name>
					<Field>WarehouseGroupId</Field>
					<RelatedField>WarehouseGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>