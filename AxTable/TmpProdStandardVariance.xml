<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpProdStandardVariance</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpProdStandardVariance extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLotSizeAndStdAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the lot size variance and the standard permitted to the current record, depending on the reference actual quantity.
    /// </summary>
    /// <param name="_consumpVariable">
    ///    The permitted variable consumption.
    /// </param>
    /// <param name="_consumpConstant">
    ///    The permitted constant consumption.
    /// </param>
    /// <param name="_realQty">
    ///    The realized quantity.
    /// </param>
    /// <param name="_qty">
    ///    The quantity for this bom calculation.
    /// </param>
    /// <param name="_costMarkupQty">
    ///    The markup for the total lot size.
    /// </param>
    /// <param name="_costPriceQty">
    ///    The costPrice for one piece.
    /// </param>
    public void addLotSizeAndStdAllowed(
        InventQty       _consumpVariable,
        InventQty       _consumpConstant,
        InventQty       _realQty,
        InventQty       _qty,
        CostMarkup      _costMarkupQty,
        CostPrice       _costPriceQty
        )
    {
        // Proportional factor
        Factor      factor;

        // First of all, add the _costMarkup and the _consumptionConstant
        this.ConsumpConstant += _consumpConstant;
        this.CostMarkupQty   += _costMarkupQty;

        if (_qty)
        {
            factor = _realQty / _qty;

            if (this.CalcType == ItemCalcType::Setup && this.ConsumpConstant && ProdStandardVarianceForRouteSetupFlight::instance().isEnabled())
            {
                factor = 1;
            }
        }
        else
        {
            factor = 0;
        }

        // Now calc the LotSize variance, the stdQty and stdCost allowed
        this.LotSizeVariance += this.calcLotSizeVariance(_costMarkupQty, factor);
        this.StdQty          += this.calcStdQtyAllowed(_consumpConstant, _consumpVariable, factor);
        this.StdCost         += this.calcStdCostAllowed(_costMarkupQty, _costPriceQty, _realQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a quantity based on a factor.
    /// </summary>
    /// <param name="_tmpProdStandardVariance">
    ///    The <c>tmpProdStandardVariance</c> record that is the source for the quantity.
    /// </param>
    /// <param name="_factor">
    ///    The factor that should be applied.
    /// </param>

    public void addQty(TmpProdStandardVariance     _tmpProdStandardVariance,
                       Factor                      _factor)
    {
        this.StdQty                 += _factor * _tmpProdStandardVariance.StdQty;
        this.StdCost                += _factor * _tmpProdStandardVariance.StdCost;
        this.CostMarkupQty          += _factor * _tmpProdStandardVariance.CostMarkupQty;
        this.ConsumpConstant        += _factor * _tmpProdStandardVariance.ConsumpConstant;
        this.RealConsump            += _factor * _tmpProdStandardVariance.RealConsump;
        this.RealCostAmount         += _factor * _tmpProdStandardVariance.RealCostAmount;
        this.RealCostAdjustment     += _factor * _tmpProdStandardVariance.RealCostAdjustment;
        this.LotSizeVariance        += _factor * _tmpProdStandardVariance.LotSizeVariance;
        this.CostVariance           += _factor * _tmpProdStandardVariance.CostVariance;
        this.QtyVariance            += _factor * _tmpProdStandardVariance.QtyVariance;
        this.SubstitutionVariance   += _factor * _tmpProdStandardVariance.SubstitutionVariance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostVariance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost variance.
    /// </summary>
    /// <returns>
    /// The cost variance.
    /// </returns>
    public CostAmount calcCostVariance()
    {
        InventQty       stdQtyAllowed = this.stdQtyAllowed();
        CostAmountStd   stdCostAllowed;

        if (stdQtyAllowed && this.RealConsump)
        {
            stdCostAllowed = this.stdCostAllowed();

            this.CostVariance = (this.RealConsump * ((stdCostAllowed / stdQtyAllowed) -
                                                    this.realCostAmountTotal() / this.RealConsump)) * -1;
        }
        else
        {
            this.CostVariance = 0;
        }

        return this.CostVariance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLotSizeVariance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the lot size variance.
    /// </summary>
    /// <param name="_costMarkupQty">
    ///    The markup for the total lot size.
    /// </param>
    /// <param name="_factor">
    ///    The proportional factor between estimated quantity and realized quantity.
    /// </param>
    /// <returns>
    /// The lot size variance.
    /// </returns>
    private CostAmount calcLotSizeVariance(
        CostAmount  _costMarkupQty,
        Factor      _factor
        )
    {
        return (_costMarkupQty * (_factor ) - _costMarkupQty) * -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyVariance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity variance.
    /// </summary>
    /// <returns>
    /// The quantity variance.
    /// </returns>
    public CostAmount calcQtyVariance()
    {
        InventQty       stdQtyAllowed = this.stdQtyAllowed();

        if (stdQtyAllowed)
        {
            this.QtyVariance = ((stdQtyAllowed - this.RealConsump) * this.stdCostAllowed() / stdQtyAllowed) * -1;
        }
        else
        {
            this.QtyVariance = 0;
        }

        return this.QtyVariance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStdCostAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the standard cost permitted, depending on a reference actual quantity.
    /// </summary>
    /// <param name="_costMarkupQty">
    ///    The markup for the total lot size.
    /// </param>
    /// <param name="_costPriceQty">
    ///    The costPrice for one piece.
    /// </param>
    /// <param name="_realQty">
    ///    The realized quantity.
    /// </param>
    /// <returns>
    ///    The standard cost permitted.
    /// </returns>
    private InventQty calcStdCostAllowed(
        CostMarkup   _costMarkupQty,
        CostPrice    _costPriceQty,
        InventQty    _realQty
        )
    {
        return _costMarkupQty + (_realQty * _costPriceQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStdQtyAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the standard quantity permitted, depending on the reference actual quantity.
    /// </summary>
    /// <param name="_consumpConstant">
    ///    The permitted constant consumption.
    /// </param>
    /// <param name="_consumpVariable">
    ///    The permitted variable consumption.
    /// </param>
    /// <param name="_factor">
    ///    The proportional factor between the estimated quantity and the realized quantity.
    /// </param>
    /// <returns>
    ///    The standard quantity permitted.
    /// </returns>
    private InventQty calcStdQtyAllowed(
        InventQty   _consumpConstant,
        InventQty   _consumpVariable,
        Factor      _factor
        )
    {
        return _consumpConstant + (_factor * _consumpVariable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSubstitutionVariance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the substitution variance.
    /// </summary>
    /// <returns>
    ///    The substitution variance.
    /// </returns>
    public CostAmount calcSubstitutionVariance()
    {
        this.SubstitutionVariance = (this.stdCostAllowed() - this.realCostAmountTotal()) * -1;

        return this.SubstitutionVariance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    ///    A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    ///    A <c>dimensionCopy</c> object that was initialized from the current buffer; optional.
    /// </param>
    /// <returns>
    ///    A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBOMCalcTransMap</Name>
				<Source><![CDATA[
    void initFromBOMCalcTransMap(BOMCalcTransMap    _bomCalcTransMap)
    {
        this.CostGroupId     = _bomCalcTransMap.CostGroupId;
        this.CalcType        = _bomCalcTransMap.CalcType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPmfProdCalcTransMap</Name>
				<Source><![CDATA[
    public void initFromPmfProdCalcTransMap(PmfProdCalcTransMap _transMap)
    {
        this.CostGroupId     = _transMap.CostGroupId;
        this.CalcType        = _transMap.CalcType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpProdStandardVariance</Name>
				<Source><![CDATA[
    public void initFromTmpProdStandardVariance(TmpProdStandardVariance _tmpProdStandardVariance)
    {
        this.OprNum             = _tmpProdStandardVariance.OprNum;
        this.CostGroupId        = _tmpProdStandardVariance.CostGroupId;
        this.CalcType           = _tmpProdStandardVariance.CalcType;
        this.Resource           = _tmpProdStandardVariance.Resource;
        this.InventDimId        = _tmpProdStandardVariance.InventDimId;
        this.InventCostLevel    = _tmpProdStandardVariance.InventCostLevel;
        this.Split              = _tmpProdStandardVariance.Split;
        this.OprId              = _tmpProdStandardVariance.OprId;
        this.WrkCtrType         = _tmpProdStandardVariance.WrkCtrType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    ///    field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    ///    A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    ///    A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    ///    optional.
    /// </param>
    /// <param name="_dimensionMerge">
    ///    A <c>dimensionMerge</c> object that was initialized from the current buffer; optional.
    /// </param>
    /// <returns>
    ///    A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    ///    this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>realCostAmountTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total realized cost.
    /// </summary>
    /// <returns>
    /// The total realized cost.
    /// </returns>
    display CostAmount realCostAmountTotal()
    {
        return (this.RealCostAmount + this.RealCostAdjustment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceKey</Name>
				<Source><![CDATA[
    display KeyValue resourceKey()
    {
        KeyValue    keyValue;
        switch (this.CalcType)
        {
            case ItemCalcType::Item,
                 ItemCalcType::Service,
                 ItemCalcType::BOM,
                 ItemCalcType::Production,
                 ItemCalcType::IndirectRate,
                 ItemCalcType::IndirectSurcharge,
                 ItemCalcType::IndirectInUnitBased,
                 ItemCalcType::IndirectOutUnitBased :
                 keyValue = this.Resource;
                 break;

            case ItemCalcType::Setup,
                 ItemCalcType::Process,
                 ItemCalcType::Qty :
                 keyValue = this.OprId;
                 break;

            default :
                keyValue = '';
        }
        return keyValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stdCostAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total standard cost permitted.
    /// </summary>
    /// <returns>
    ///    The standard cost permitted.
    /// </returns>
    public display CostAmountStd stdCostAllowed()
    {
        return this.StdCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stdQtyAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the total standard quantity permitted.
    /// </summary>
    /// <returns>
    ///    The standard quantity permitted.
    /// </returns>
    public display InventQty stdQtyAllowed()
    {
        return this.StdQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalVariance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of variances.
    /// </summary>
    /// <returns>
    /// The summarized variance amount.
    /// </returns>
    display InventCostVariance totalVariance()
    {
        return (this.LotSizeVariance    +
                this.CostVariance       +
                this.QtyVariance        +
                this.SubstitutionVariance);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<DeveloperDocumentation>@SYS330107</DeveloperDocumentation>
	<Label>@SYS110964</Label>
	<ClusteredIndex></ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex></PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>ItemCalcType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConsumpConstant</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BOMMeasureConstant</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostGroupId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CostGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostMarkupQty</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CostMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostVariance</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
			<Label>@SYS110969</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventCostLevel</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>InventCostLevel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LotSize</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LotSizeVariance</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
			<Label>@SYS110967</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OprId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RouteOprId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OprNum</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>OprNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyVariance</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
			<Label>@SYS110968</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RealConsump</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS853</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RealCostAdjustment</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
			<Label>@SYS596</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RealCostAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS22990</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportedGood</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProdReportedGood</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Resource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BOMCalcResource</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ResourceKeyValue</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KeyValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Split</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventCostSplit</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StdCost</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventCostAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StdQty</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>inventCostQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SubstitutionVariance</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
			<Label>@SYS110965</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalVarianceValue</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WrkCtrType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>WrkCtrType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PrimaryIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>OprNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CostGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CalcType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventCostLevel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Split</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OprId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WrkCtrType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CalcTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CalcType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CostGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventCostLevelIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventCostLevel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CostGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Split</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMCostGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMCostGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CostGroupId</Name>
					<Field>CostGroupId</Field>
					<RelatedField>CostGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CostGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>StandardVariance</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteOprTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteOprTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OprId</Name>
					<Field>OprId</Field>
					<RelatedField>OprId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>OprIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitId</Name>
					<Field>UnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>