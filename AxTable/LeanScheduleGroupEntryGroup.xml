<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanScheduleGroupEntryGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LeanScheduleGroupEntryGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        super();
        LeanScheduleGroupCache::construct().clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        public void insert()
    {
        super();
        LeanScheduleGroupCache::construct().clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        if (this.AllocationId != this.orig().AllocationId)
        {
            LeanScheduleGroupCache::construct().clearCache();
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the current <c>LeanScheduleGroupEntryGroup</c> table buffer.
    /// </summary>
    /// <param name="_workCell">
    /// The record ID of a <c>WrkCtrResourceGroup</c> of type work cell which will contain this record.
    /// </param>
    /// <returns>
    /// true if the table buffer is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The <c>AllocationId</c> field must be unique across all <c>ScheduleGroup</c> records that belong to
    /// the same <c>WrkCtrResourceGroup</c> record.
    /// </remarks>
    public boolean validateAllocationId(RefRecId _workCell)
    {
        LeanScheduleGroup           leanScheduleGroup;
        LeanScheduleGroupItem       leanScheduleGroupItem;
        LeanScheduleGroupEntryGroup leanScheduleGroupEntryGroup;
        boolean                     ret = true;

        select firstonly RecId from leanScheduleGroupEntryGroup
            where leanScheduleGroupEntryGroup.RecId                     != this.RecId
               && leanScheduleGroupEntryGroup.AllocationId              == this.AllocationId
            exists join leanScheduleGroupItem
                where leanScheduleGroupItem.RecId                       == leanScheduleGroupEntryGroup.LeanScheduleGroupItem
            exists join leanScheduleGroup
                where leanScheduleGroup.RecId                           == leanScheduleGroupItem.ScheduleGroup
                   && leanScheduleGroup.WorkCell                        == _workCell;

        if (leanScheduleGroupEntryGroup.RecId != 0)
        {
            ret = ret && checkFailed(strFmt("@SYS135095", this.AllocationId, WrkCtrResourceGroup::find(leanScheduleGroup.WorkCell).WrkCtrId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the current <c>LeanScheduleGroupEntryGroup</c> table buffer.
    /// </summary>
    /// <returns>
    ///    true if the table buffer is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The combination of the <c>AllocationId</c> and <c>AllocationGroupDataAreaId</c> fields must be unique across
    ///    all <c>ScheduleGroup</c> records belonging to the same <c>WrkCtrResourceGroup</c>.
    /// </remarks>
    public boolean validateWrite()
    {
        LeanScheduleGroupItem       thisScheduleGroupItem = LeanScheduleGroupItem::find(this.LeanScheduleGroupItem);
        LeanScheduleGroup           thisScheduleGroup     = LeanScheduleGroup::find(thisScheduleGroupItem.ScheduleGroup);
        boolean                     ret                   = true;

        ret = ret && this.validateAllocationId(thisScheduleGroup.WorkCell);
        ret = ret && super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>LeanScheduleGroupEntryGroup</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>LeanScheduleGroupEntryGroup</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return _recId &&
               (select firstonly leanScheduleGroupEntryGroup
                    where leanScheduleGroupEntryGroup.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LeanScheduleGroupEntryGroup</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>LeanScheduleGroupEntryGroup</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LeanScheduleGroupEntryGroup</c> table; otherwise, an empty record.
    /// </returns>
    public static LeanScheduleGroupEntryGroup find(
        RefRecId _recId,
        boolean  _forUpdate = false)
    {
        LeanScheduleGroupEntryGroup leanScheduleGroupEntryGroup;

        if (_recId)
        {
            leanScheduleGroupEntryGroup.selectForUpdate(_forUpdate);

            select firstonly leanScheduleGroupEntryGroup
                where leanScheduleGroupEntryGroup.RecId == _recId;
        }

        return leanScheduleGroupEntryGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLeanScheduleGroupItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LeanScheduleGroupEntryGroup</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the parent <c>LeanScheduleGroupItem</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LeanScheduleGroupEntryGroup</c> table; otherwise, an empty record.
    /// </returns>
    public static LeanScheduleGroupEntryGroup findLeanScheduleGroupItem(
        RefRecId _recId,
        boolean  _forUpdate = false)
    {
        LeanScheduleGroupEntryGroup leanScheduleGroupEntryGroup;

        if (_recId)
        {
            leanScheduleGroupEntryGroup.selectForUpdate(_forUpdate);

            select firstonly leanScheduleGroupEntryGroup
                where leanScheduleGroupEntryGroup.LeanScheduleGroupItem == _recId;
        }

        return leanScheduleGroupEntryGroup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS323988</DeveloperDocumentation>
	<FormRef>LeanScheduleGroup</FormRef>
	<Label>@SYS132035</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>LeanScheduleGroupItem</TitleField1>
	<TitleField2>AllocationId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>FK_LeanScheduleGroupItem_LeanScheduleGro</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LeanScheduleGroupItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LeanScheduleGroupItem</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS131988</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LeanScheduleGroupItem</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemRelation</Name>
			<Label>@SYS131924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AllocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastItemAllocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LeanScheduleGroupItem</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS132035</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FK_LeanScheduleGroupItem_LeanScheduleGro</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LeanScheduleGroupItem</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ForecastItemAllocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ForecastItemAllocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ItemAllocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ScheduleGroupEntry</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AllocationId</Name>
					<Field>AllocationId</Field>
					<RelatedField>AllocateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AllocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LeanScheduleGroupItem</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>LeanScheduleGroupItem</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ScheduleItemGroup</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ScheduleGroupEntry</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LeanScheduleGroupItem</Name>
					<Field>LeanScheduleGroupItem</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>