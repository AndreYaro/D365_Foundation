<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MainAccountConsolidateAccount_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MainAccountConsolidateAccount_BR extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>MainAccountConsolidateAccount</c> table; if not, an error
    ///    message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>MainAccountConsolidateAccount</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;
    
        if (!MainAccountConsolidateAccount_BR::exist(_recId))
        {
            isExisting = checkFailed(strFmt(MainAccountConsolidateAccount_BR::txtNotExist(), _recId));
        }
    
        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>MainAccountConsolidateAccount</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>MainAccountConsolidateAccount</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        MainAccountConsolidateAccount_BR mainAccountConsolidateAccount;
    
        select firstonly RecId from mainAccountConsolidateAccount
			where mainAccountConsolidateAccount.RecId == _recId;
    
        return mainAccountConsolidateAccount != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForLedgerConsolidateAccountGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>MainAccountConsolidateAccount</c> table exists.
    /// </summary>
    /// <param name="_ledgerConsolidateAccountGroup">
    /// The record ID of the <c>ConsolidateAccountGroup</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existsForLedgerConsolidateAccountGroup(recId _ledgerConsolidateAccountGroup)
    {
        MainAccountConsolidateAccount_BR mainAccountConsolidateAccount;
    
        select firstonly RecId from mainAccountConsolidateAccount
			where mainAccountConsolidateAccount.ConsolidateAccountGroup == _ledgerConsolidateAccountGroup;
    
        return mainAccountConsolidateAccount != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>MainAccountConsolidateAccount</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>MainAccountConsolidateAccount</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>MainAccountConsolidateAccount</c> table; otherwise, an empty record.
    /// </returns>
    public static MainAccountConsolidateAccount_BR find(
        RecId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        MainAccountConsolidateAccount_BR mainAccountConsolidateAccount;
    
        mainAccountConsolidateAccount.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            mainAccountConsolidateAccount.concurrencyModel(_concurrencyModel);
        }
    
        select firstonly mainAccountConsolidateAccount
            where mainAccountConsolidateAccount.RecId == _recId;
    
        return mainAccountConsolidateAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findById</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>MainAccountConsolidateAccount</c> table.
    /// </summary>
    /// <param name="_mainAccount">
    ///    The record ID of the <c>MainAccount</c> record.
    /// </param>
    /// <param name="_consolidateAccountGroup">
    ///    The record ID of the <c>ConsolidateAccountGroup</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>MainAccountConsolidateAccount</c> table; otherwise, an empty record.
    /// </returns>
    public static MainAccountConsolidateAccount_BR findById(
        RecId _mainAccount,
        RecId _consolidateAccountGroup,
        boolean _forUpdate = false)
    {
        MainAccountConsolidateAccount_BR mainAccountConsolidateAccount;

        mainAccountConsolidateAccount.selectForUpdate(_forUpdate);

        select firstonly mainAccountConsolidateAccount
            where mainAccountConsolidateAccount.MainAccount == _mainAccount 
                && mainAccountConsolidateAccount.ConsolidateAccountGroup == _consolidateAccountGroup;
    
        return mainAccountConsolidateAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>MainAccountConsolidateAccount</c> table does not exist.
    /// </summary>
    /// <returns>
    ///    The message that indicates a record does not exists.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDimensionAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the lookup to select the cost center of the absorption cost journal line.
    /// </summary>
    /// <param name="_control">
    /// The form control to display the lookup.
    /// </param>
    public static void lookupDimensionAttributeValue(FormStringControl _control)
    {
        Query query = new Query();
        QueryBuildDataSource qbds;

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(DimensionAttributeValue), _control);

        sysTableLookup.addLookupfield(fieldNum(DimensionAttributeValue, DisplayValue), true);
        sysTableLookup.addLookupMethod(tableMethodStr(DimensionAttributeValue, getName));
        
        qbds = query.addDataSource(tableNum(DimensionAttributeValue));
   
        qbds.addRange(fieldNum(DimensionAttributeValue, DimensionAttribute)).value(queryValue(BrazilParameters::find().CostCenterDimensionAttribute));
        qbds.addRange(fieldNum(DimensionAttributeValue, IsSuspended)).value(queryValue(NoYes::No));
        qbds.addRange(fieldNum(DimensionAttributeValue, IsDeleted)).value(queryValue(NoYes::No));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionAttributeValueValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the cost center dimension value.
    /// </summary>
    /// <returns>
    /// The dimension value.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display DimensionValue dimensionAttributeValueValue()
    {
        DimensionAttributeValue dimensionAttributeValue;

        dimensionAttributeValue = DimensionAttributeValue::find(this.DimensionAttributeValue);

        if (dimensionAttributeValue)
        {
            return dimensionAttributeValue.getValue();
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionAttributeValueName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the cost center dimension name.
    /// </summary>
    /// <returns>
    /// The dimension attribute value name.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display Name dimensionAttributeValueName()
    {
        DimensionAttributeValue dimensionAttributeValue;

        dimensionAttributeValue = DimensionAttributeValue::find(this.DimensionAttributeValue);

        if (dimensionAttributeValue)
        {
            return dimensionAttributeValue.getName();
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the cost center dimension for the absorption cost journal line.
    /// </summary>
    /// <param name="_set">
    /// A boolean to determine if the value is being defined or not.
    /// </param>
    /// <param name="_journalTrans">
    /// The <c>ACOJournalTransOverHead_BR</c> record to have the cost center dimension set.
    /// </param>
    /// <param name="_value">
    /// The cost center dimension value.
    /// </param>
    /// <returns>
    /// The cost center dimension value.
    /// </returns>
    public edit DimensionValue dimensionValue(boolean _set, MainAccountConsolidateAccount_BR _mainAccountConsolidate, DimensionValue _value)
    {
        DimensionAttribute dimensionAttribute;
        DimensionAttributeValue dimensionAttributeValue;

        if (_set)
        {
            dimensionAttribute = DimensionAttribute::find(BrazilParameters::find().CostCenterDimensionAttribute);
            dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute, _value);

            this.DimensionAttributeValue = dimensionAttributeValue.RecId;
        }

        return DimensionAttributeValue::find(this.DimensionAttributeValue).getValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the same cost center already exists for another consolidation account.
    /// </summary>
    /// <returns>False if the same cost center already exists for another consolidation account.</returns>
    public boolean validateWrite()
    {
        boolean ret = super();

        MainAccountConsolidateAccount_BR mainAccountConsolidateAccount_BR;

        select firstonly mainAccountConsolidateAccount_BR
            where mainAccountConsolidateAccount_BR.ConsolidationMainAccount != this.ConsolidationMainAccount
                && mainAccountConsolidateAccount_BR.MainAccount ==  this.MainAccount
                && mainAccountConsolidateAccount_BR.DimensionAttributeValue == this.DimensionAttributeValue;

        if (mainAccountConsolidateAccount_BR.RecId)
        {
            ret = checkFailed("@SPEDECDLayout9:CostCenterValidation");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionContextField>BR</CountryRegionContextField>
	<DeveloperDocumentation>@GLS222064</DeveloperDocumentation>
	<Label>@GLS222061</Label>
	<TitleField1>MainAccount</TitleField1>
	<TitleField2>ConsolidateAccountGroup</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Modules>Ledger</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MainAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsolidateAccountGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsolidationMainAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MainAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsolidateAccountGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsolidationMainAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS318403</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MainAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsolidateAccountGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@SYS92116</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConsolidationMainAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ElectronicLedgerAccountingStatement</Name>
			<Label>@Ledger:ELA_Statement</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>STULevel_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ConsolidateAccountGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerConsolidateAccountGroupRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConsolidationMainAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConsolidationLedgerAccountExt</ExtendedDataType>
			<HelpText>@GLS222075</HelpText>
			<Label>@SYS22081</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MainAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConsolidationAccountName_BR</ExtendedDataType>
			<HelpText>@GLS222073</HelpText>
			<Label>@GLS222076</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>STULevel_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerSTULevel_MX</ExtendedDataType>
			<HelpText>@Ledger:ELA_SATLevel_Help</HelpText>
			<Label>@Ledger:ELA_SATLevel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DimensionAttributeValue</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS40859</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>MainAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DimensionAttributeValue</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ConsolidateAccountGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerConsolidateAccountGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LedgerConsolidateAccountGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConsolidateAccountGroup</Name>
					<Field>ConsolidateAccountGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MainAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MainAccount</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MainAccount</Name>
					<Field>MainAccount</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionAttributeValue</Name>
					<Field>DimensionAttributeValue</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>