<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchPrepayTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchPrepayTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountAdvancePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves total posted advance amount.
    /// </summary>
    /// <returns>
    /// The total posted advance amount.
    /// </returns>
    public AmountCur amountAdvancePosted()
    {
        VendTrans vendTrans;
        VendInvoiceJour vendInvoiceJour;
        PurchPrepayAvailable advancePosted = 0.0;

        while select TableId from vendInvoiceJour
            where vendInvoiceJour.PurchId == this.PurchTable &&
                vendInvoiceJour.InvoiceType == PurchInvoiceType::VendorAdvance
        /* <SYS>
        join AmountCur, CurrencyCode from vendTrans
        </SYS> */
        // <GIN>
        join AmountCur, CurrencyCode, Voucher, TransDate from vendTrans
        // </GIN>
            where vendTrans.Voucher == vendInvoiceJour.LedgerVoucher
        {
            advancePosted += CurrencyExchangeHelper::amount(vendTrans.AmountCur, vendTrans.CurrencyCode);
            // <GIN>
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                advancePosted += CurrencyExchangeHelper::amount(TaxWithholdTrans_IN::getWithholdingTaxAmountCur_IN(this.PurchTable, vendTrans.Voucher, vendTrans.TransDate), vendTrans.CurrencyCode);
            }
            // </GIN>
        }

        return abs(advancePosted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountPrepay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the vendor advance value for the value of the <c>Type</c> field.
    /// </summary>
    /// <returns>
    /// The calculated vendor advance value.
    /// </returns>
    public AmountCur amountPrepay()
    {
        AmountCur amountPrepay;
        PurchTotals purchTotals;

        switch (this.Type)
        {
            case PurchPrepayType::Percent:
                purchTotals = PurchTotals::newPurchTable(PurchTable::find(this.PurchTable));
                purchTotals.calc(true);
                amountPrepay = (purchTotals.purchTotalAmount() * this.Value) / 100;
                break;

            case PurchPrepayType::Fixed:
                amountPrepay = this.Value;
                break;
        }

        return amountPrepay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountPrepayPending</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total pending prepayment amount.
    /// </summary>
    /// <returns>
    /// The total pending prepayment amount.
    /// </returns>
    public AmountCur amountPrepayPending()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        select sum(LineAmount) from vendInvoiceInfoLine
            exists join vendInvoiceInfoTable
                where vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId &&
                    vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId &&
                    vendInvoiceInfoTable.PurchId == this.PurchTable &&
                    vendInvoiceInfoTable.InvoiceType == PurchInvoiceType::VendorAdvance &&
                    vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed;

        return vendInvoiceInfoLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether an advance of a fixed type has a valid <c>Value</c> field value.
    /// </summary>
    /// <returns>
    /// true if an advance fixed value is valid; otherwise, false.
    /// </returns>
    private boolean checkFixedAmount()
    {
        boolean isValid = true;
        PurchTotals purchTotals;

        if (this.Value < 0)
        {
            isValid = checkFailed(strFmt("@SYS183655", this.Currency));
        }
        else if (this.Value < this.amountAdvancePosted())
        {
            isValid = checkFailed("@SYS328682");
        }
        else
        {
            purchTotals = PurchTotals::newPurchTable(PurchTable::find(this.PurchTable));
            purchTotals.calc(true);

            if (this.Value > purchTotals.purchTotalAmount())
            {
                isValid = checkFailed(strFmt("@SYS183651",this.PurchTable));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPercentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether an advance amount of a percent type has a valid value.
    /// </summary>
    /// <returns>
    /// true if an advance amount of type percent is valid; otherwise, false.
    /// </returns>
    private boolean checkPercentAmount()
    {
        boolean isValid = true;

        if (!((this.Value > 0) && (this.Value <=100)))
        {
            isValid = checkFailed("@SYS183656");
        }
        else if (this.amountPrepay() < this.amountAdvancePosted())
        {
            isValid = checkFailed("@SYS328682");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrepayCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a vendor advance has a valid category field value.
    /// </summary>
    /// <returns>
    /// true if the vendor advance category value is valid; otherwise, false.
    /// </returns>
    boolean checkPrepayCategory()
    {
        boolean ret = true;
        PurchLine purchLine;
        Set categoryIdSet = new Set(typeName2Type(extendedTypeStr(PurchPrepayCategoryId)));

        while select ProcurementCategory from purchLine
            where purchLine.PurchId == this.PurchTable &&
                !purchLine.IsDeleted
        {
            if (!categoryIdSet.in(purchLine.ProcurementCategory))
            {
                categoryIdSet.add(purchLine.ProcurementCategory);
            }
        }

        if (categoryIdSet.in(this.PrepayCategoryId))
        {
            ret = checkFailed("@SYS183654");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record in the <c>PurchPrepayTable</c> table.
    /// </summary>
    public void delete()
    {
        if (this.isVersioned())
        {
            this.deleteSoft();
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSoft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the record as deleted.
    /// </summary>
    private void deleteSoft()
    {
        VersioningPurchaseOrder::newPurchaseOrder(PurchTable::find(this.PurchTable,true)).change(null, this);

        this.IsDeleted = NoYes::Yes;
        this.IsModified = NoYes::Yes;
        this.deleteSoftClearValues();
        this.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSoftClearValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Zeroes out fields so that the record is not interfering with code that is not aware of the deleted
    /// status.
    /// </summary>
    private void deleteSoftClearValues()
    {
        this.Value = 0;
        this.PrepayAvailable = 0;
        this.PrepayLimit = 0;
        this.PrepayCategoryId = 0;
        this.Description ='';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchPrepayTableHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the history record that is based on a <c>PurchPrepayTableHistory</c> record.
    /// </summary>
    /// <param name="_purchPrepayTableHistory">
    /// A <c>PurchPrepayTableHistory</c> record to initialize.
    /// </param>
    public void initFromPurchPrepayTableHistory(PurchPrepayTableHistory _purchPrepayTableHistory)
    {
        PurchPrepayTableMap purchPrepayTableMap;

        purchPrepayTableMap.data(_purchPrepayTableHistory.data());
        this.data(purchPrepayTableMap.data());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into the <c>PurchPrepayTable</c> table.
    /// </summary>
    public void insert()
    {
        PurchPrepayTable oldPurchPrepayTable;
        VersioningPurchaseOrder versioningPurchaseOrder;

        this.IsModified = NoYes::Yes;

        versioningPurchaseOrder = VersioningPurchaseOrder::newPurchaseOrder(PurchTable::find(this.PurchTable,true));
        versioningPurchaseOrder.parmSkipChangeRequest(true);
        versioningPurchaseOrder.change(this, null);

        //Selects an existing soft deleted record and updates that instead of creating a new record
        select forupdate oldPurchPrepayTable
        where oldPurchPrepayTable.PurchTable == this.PurchTable;

        if (oldPurchPrepayTable.IsDeleted == NoYes::Yes)
        {
            oldPurchPrepayTable.IsDeleted = NoYes::No;
            oldPurchPrepayTable.Description = this.Description;
            oldPurchPrepayTable.Value = this.Value;
            oldPurchPrepayTable.Type = this.Type;
            oldPurchPrepayTable.PrepayLimit = this.PrepayLimit;
            oldPurchPrepayTable.PrepayAvailable = this.PrepayAvailable;
            oldPurchPrepayTable.PrepayApplicationRemaining = this.PrepayApplicationRemaining;
            oldPurchPrepayTable.PrepayCategoryId = this.PrepayCategoryId;
            oldPurchPrepayTable.Currency = this.Currency;
            oldPurchPrepayTable.update();
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVersioned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the record has been versioned.
    /// </summary>
    /// <returns>
    /// true if the record has been versioned; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A record has been versioned if it has been confirmed or approved with change management enabled.
    /// </remarks>
    public boolean isVersioned()
    {
        PurchTableVersion purchTableVersion;

        if (this.IsModified)
        {
            purchTableVersion = PurchTableVersion::findLatest(this.PurchTable, this.DataAreaId);
            return (purchTableVersion && purchTableVersion.IsArchived == NoYes::No) || PurchPrepayTableHistory::existPurchPrepayTable(this.RecId);
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the advance application remaining and advance available amounts based on posted advances.
    /// </summary>
    /// <param name="_updateRemaining">
    /// A value that indicates whether the application remaining amount should be updated; optional.
    /// </param>
    public void recalculateAmounts(boolean _updateRemaining = true)
    {
        VendTrans vendTrans, vendTransOffset;
        VendInvoiceTrans vendInvoiceTransApplication, vendInvoiceTransReversal;
        VendTrans vendTransReversal, vendTransApplication;
        VendInvoiceJour vendInvoiceJour;
        PurchPrepayAvailable paidAdvancesAmount;
        PurchPrepayAvailable advanceAvailableInvoicing;
        AmountCur appliedAdvanceAmount;
        AmountCur reverseApplicationAmount;
        VendInvoiceJour vendInvoiceJourStandardInvoice;
        // <GIN>
        AmountCur withholdingTaxAmountCurIN;
        boolean withholdingTaxEnabled = TaxWithholdParameters_IN::checkTaxParameters();
        // </GIN>

        TransactionReversalTrans transactionReversalTrans;
        // Traverse through all posted advance invoices for sum of paid advances amount, not including any that have been reversed
        while select RecId, InvoiceAccount from vendInvoiceJour
                where vendInvoiceJour.PurchId == this.PurchTable &&
                    vendInvoiceJour.InvoiceType == PurchInvoiceType::VendorAdvance
                join AmountCur, SettleAmountCur, Voucher, TransDate from vendTrans
                    where vendTrans.Voucher == vendInvoiceJour.LedgerVoucher
                        && vendTrans.AccountNum == vendInvoiceJour.InvoiceAccount
                        && vendTrans.TransDate == vendInvoiceJour.InvoiceDate
                outer join vendTransOffset
                    where vendTransOffset.RecId == vendTrans.OffsetRecid
                notexists join transactionReversalTrans
                    where transactionReversalTrans.RefTableId == vendTransoffset.TableId
                        && transactionReversalTrans.RefRecId == vendTransoffset.RecId
        {
            // vendTrans.AmountCur is negative for regular advance invoices
            advanceAvailableInvoicing += vendTrans.AmountCur;

            // <GIN>
            if (withholdingTaxEnabled)
            {
                withholdingTaxAmountCurIN = TaxWithholdTrans_IN::getWithholdingTaxAmountCur_IN(this.PurchTable, vendTrans.Voucher, vendTrans.TransDate);
                advanceAvailableInvoicing += withholdingTaxAmountCurIN;
            }
            // </GIN>
            if (_updateRemaining)
            {
                paidAdvancesAmount += vendTrans.SettleAmountCur;

                // <GIN>
                if (withholdingTaxEnabled && vendTrans.SettleAmountCur)
                {
                    paidAdvancesAmount += withholdingTaxAmountCurIN * vendTrans.SettleAmountCur / vendTrans.AmountCur;
                }
                // </GIN>

                // Traverses for advance application amounts, calculates also reverse advance application amounts for each advance application
                while select RecId, LineAmount, InternalInvoiceId, InvoiceId, PurchID, InvoiceDate, NumberSequenceGroup
                        from vendInvoiceTransApplication
                    where vendInvoiceTransApplication.LineType == PurchInvoiceLineType::AdvanceApplication &&
                        vendInvoiceTransApplication.AdvanceApplicationId == vendInvoiceJour.RecId
                    join SettleAmountCur from vendTransApplication
                    where vendTransApplication.Voucher == vendInvoiceTransApplication.InternalInvoiceId &&
                          vendTransApplication.AccountNum == vendInvoiceJour.InvoiceAccount &&
                          vendTransApplication.TransDate == vendInvoiceTransApplication.InvoiceDate
                {
                    appliedAdvanceAmount -= vendTransApplication.SettleAmountCur;

                    // Calculates total line amount of reverse application lines for each advance application amount
                    select sum(SettleAmountCur) from vendTransReversal
                        where vendTransReversal.AccountNum == vendInvoiceJour.InvoiceAccount &&
                              vendTransReversal.LastSettleVoucher == vendInvoiceTransApplication.InternalInvoiceId
                        join LedgerVoucher from vendInvoiceJourStandardInvoice
                        where vendInvoiceJourStandardInvoice.InvoiceId == vendInvoiceTransApplication.InvoiceId &&
                            vendInvoiceJourStandardInvoice.PurchId == vendInvoiceTransApplication.PurchID &&
                            vendInvoiceJourStandardInvoice.NumberSequenceGroup == vendInvoiceTransApplication.NumberSequenceGroup &&
                            vendTransReversal.Voucher != vendInvoiceJourStandardInvoice.LedgerVoucher
                        exists join vendInvoiceTransReversal
                        where vendInvoiceTransReversal.InternalInvoiceId == vendTransReversal.Voucher &&
                              vendInvoiceTransReversal.LineType == PurchInvoiceLineType::ReverseAdvanceApplication &&
                              vendInvoiceTransReversal.InvoiceDate == vendTransReversal.TransDate;

                    reverseApplicationAmount += vendTransReversal.SettleAmountCur;
                }
            }
        }

        // If there is a posted standard invoice for the current Purchase order, then we want to zero out the PrepayAvailable value as the user
        // is no longer allowed to invoice any remaining prepayment values at this point. Updating the PrepayAvailable column to 0 will properly
        // track that state in the table. If not, just use the standard calculation.
        this.PrepayAvailable = !VendInvoiceTrans::existForPurchId(this.PurchTable) ? this.PrepayLimit + advanceAvailableInvoicing : 0;

        if (_updateRemaining)
        {
            this.PrepayApplicationRemaining = abs(paidAdvancesAmount) + (appliedAdvanceAmount - reverseApplicationAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculatePrepayLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the vendor advance limit field value by using the vendor advance value or the amount
    /// that is ordered but not invoiced yet.
    /// </summary>
    public void recalculatePrepayLimit()
    {
        PurchTotals purchTotals;

        switch (this.Type)
        {
            case PurchPrepayType::Percent:
                purchTotals = PurchTotals::newPurchTable(PurchTable::find(this.PurchTable));
                purchTotals.calc(true);
                this.PrepayLimit = CurrencyExchangeHelper::amount(purchTotals.purchTotalAmount() * this.Value / 100, purchTotals.purchCurrency());
                break;

            case PurchPrepayType::Fixed:
                if (this.checkFixedAmount())
                {
                    this.PrepayLimit = this.Value;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PurchPrepayTable</c> table record.
    /// </summary>
    public void update()
    {
        VersioningPurchaseOrder versioningPurchaseOrder;

        versioningPurchaseOrder = VersioningPurchaseOrder::newPurchaseOrder(PurchTable::find(this.PurchTable,true));
        versioningPurchaseOrder.parmSkipChangeRequest(true);
        versioningPurchaseOrder.change(this, this.orig());
        this.IsModified = NoYes::Yes;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(PurchPrepayTable, Value) :
                    if (this.Type == PurchPrepayType::Fixed)
                    {
                        ret = this.checkFixedAmount();
                    }
                    else if (this.Type == PurchPrepayType::Percent)
                    {
                        ret = this.checkPercentAmount();
                    }
                    break;

                case fieldNum(PurchPrepayTable, PrepayCategoryId) :
                    if (this.PrepayCategoryId)
                    {
                        ret = this.checkPrepayCategory();
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            if (!this.PrepayCategoryId)
            {
                ret = checkFailed("@SYS183653");
            }

            if (this.Type == PurchPrepayType::Percent)
            {
                ret = this.checkPercentAmount();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostingDefinitionBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes sure that no unpaid or unapplied prepayments exist before enabling posting definition.
    /// </summary>
    /// <returns>
    /// true if posting definition can be enabled; otherwise, false.
    /// </returns>
    public static boolean canPostingDefinitionBeEnabled()
    {
        PurchPrepayTable purchPrepayTable;
        PurchTable purchTable;

        //selects the first prepayment definition having prepayment application remaining which can be applied to invoices
        select firstonly RecId, PurchTable from purchPrepayTable
            where purchPrepayTable.IsDeleted == NoYes::No &&
                purchPrepayTable.PrepayApplicationRemaining >= 0.01
            exists join purchTable
                where purchTable.PurchId == purchPrepayTable.PurchTable &&
                    purchTable.PurchStatus != PurchStatus::Invoiced;

        if (purchPrepayTable.RecId > 0)
        {
            return checkFailed(strFmt("@SYS345382", purchPrepayTable.PurchTable));
        }

        //selects the first prepayment definition having unpaid prepayments invoices
        select firstonly RecId, PurchTable from purchPrepayTable
            where purchPrepayTable.IsDeleted == NoYes::No &&
                purchPrepayTable.PrepayApplicationRemaining < 0.01 &&
                purchPrepayTable.PrepayAvailable < 0.01 &&
                purchPrepayTable.PrepayLimit >= 0.01
            exists join purchTable
                where purchTable.PurchId == purchPrepayTable.PurchTable &&
                    purchTable.PurchStatus != PurchStatus::Invoiced;

        if (purchPrepayTable.RecId > 0)
        {
            return checkFailed(strFmt("@SYS345382", purchPrepayTable.PurchTable));
        }

        //selects the first prepayment definition having prepayment available for invoicing
        select firstonly RecId, PurchTable from purchPrepayTable
            where purchPrepayTable.IsDeleted == NoYes::No &&
                purchPrepayTable.PrepayLimit >= 0.01 &&
                purchPrepayTable.PrepayAvailable >= 0.01
        exists join purchTable
            where purchTable.PurchId == purchPrepayTable.PurchTable &&
                purchTable.PurchStatus != PurchStatus::Invoiced;

        if (purchPrepayTable.RecId > 0)
        {
            return checkFailed(strFmt("@SYS345382", purchPrepayTable.PurchTable));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkApplicationRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether an advance has unutilized application remaining amount.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase ID value.
    /// </param>
    /// <param name="_invoiceAccount">
    /// The invoice account value.
    /// </param>
    /// <param name="_prepayApplicationAmount">
    /// The prepayment application amount value.
    /// </param>
    public static void checkApplicationRemaining(PurchId _purchId, VendInvoiceAccount _invoiceAccount, AmountCur _prepayApplicationAmount = 0.0)
    {
        if (PurchPrepayTable::findPurchId(_purchId).PrepayApplicationRemaining - _prepayApplicationAmount > 0.0)
        {
            //when a purchase order is cancelled or invoiced, indicate about an application remaining amount which can be utilized against another purchase order
            //for the same invoice account
            warning(strFmt("@AccountsPayable:ApplyPrepaymentAmountsforFinalizedPOs", _purchId, _invoiceAccount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist(PurchId purchId)
    {
        if (purchId && !PurchPrepayTable::exist(purchId))
        {
            return checkFailed(strFmt(PurchPrepayTable::txtNotExist(), purchId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the <c>Value</c> field value, depending on the new currency code when <c>Type</c>
    /// field equals to <c>PurchPrepayType::Fixed</c> enumeration value and sets the new currency code
    /// value.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase ID value.
    /// </param>
    /// <param name="_currencyCode">
    /// The new currency code.
    /// </param>
    /// <param name="_exchRateDate">
    /// The transaction date.
    /// </param>
    static void convertCurrencyCode(PurchId _purchId, CurrencyCode _currencyCode, TransDate _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        PurchPrepayTable purchPrepayTable = PurchPrepayTable::findPurchId(_purchId, true);

        ttsbegin;

        if (purchPrepayTable.Type == PurchPrepayType::Fixed)
        {
            purchPrepayTable.Value = CurrencyExchangeHelper::curAmount2CurAmount(purchPrepayTable.Value, purchPrepayTable.Currency, _currencyCode, _exchRateDate);
        }

        purchPrepayTable.Currency = _currencyCode;
        purchPrepayTable.doUpdate();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>PurchPrepayTable</c> table exists.
    /// </summary>
    /// <param name="purchId">
    /// The purchase ID of the <c>PurchPrepayTable</c> table record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    static boolean exist(PurchId purchId)
    {
        return (select firstonly RecId from purchPrepayTable
                    where purchPrepayTable.PurchTable == purchId
                    && purchPrepayTable.IsDeleted == NoYes::No
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PurchPrepayTable</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>PurchPrepayTable</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PurchPrepayTable</c> table; otherwise, an empty record.
    /// </returns>
    static PurchPrepayTable find(RecId _recId, boolean _forUpdate = false)
    {
        PurchPrepayTable purchPrepayTable;

        purchPrepayTable.selectForUpdate(_forUpdate);

        select purchPrepayTable
            where purchPrepayTable.RecId == _recId &&
                purchPrepayTable.IsDeleted == NoYes::No;

        return purchPrepayTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PurchPrepayTable</c> table.
    /// </summary>
    /// <param name="purchId">
    /// The purchase ID of the <c>PurchPrepayTable</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PurchPrepayTable</c> table; otherwise, an empty record.
    /// </returns>
    static PurchPrepayTable findPurchId(PurchId purchId, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PurchPrepayTable purchPrepayTable;

        if (purchId)
        {
            if (_forUpdate)
            {
                purchPrepayTable.selectForUpdate(_forUpdate);
                purchPrepayTable.selectLocked(_forUpdate);

                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    purchPrepayTable.concurrencyModel(_concurrencyModel);
                }
            }

            select firstonly purchPrepayTable
                where purchPrepayTable.PurchTable == purchId &&
                    purchPrepayTable.IsDeleted == NoYes::No;
        }

        return purchPrepayTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrepayLimitValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether <c>PrepayLimit</c> field value of <c>PurchPrepayTable</c> table record
    /// against <c>PurchId</c> field value supplied does not exceed purchase order total amount which is not invoiced yet.
    /// </summary>
    /// <param name="_purchId">
    /// The <c>PurchId</c> field value of <c>PurchTable</c> table record.
    /// </param>
    /// <param name="_message">
    /// The error message to be displayed.
    /// </param>
    /// <returns>
    /// true if <c>PrepayLimit</c> field value of <c>PurchPrepayTable</c> is valid; Otherwise, false.
    /// </returns>
    public static boolean isPrepayLimitValid(PurchId _purchId, str _message)
    {
        boolean isValid = true;
        PurchPrepayTable purchPrepayTable;
        PurchTotals purchTotals;

        if (_purchId)
        {
            select firstonly RecId, PrepayLimit from purchPrepayTable
                where purchPrepayTable.PurchTable == _purchId &&
                    purchPrepayTable.IsDeleted == NoYes::No;

            if (purchPrepayTable.RecId)
            {
                purchTotals = PurchTotals::newPurchTable(PurchTable::find(_purchId));
                purchTotals.calc(true);

                if (purchPrepayTable.PrepayLimit > purchTotals.purchTotalAmount())
                {
                    isValid = checkFailed(_message);
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseUnpaidPostedAdvances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses the unpaid posted advances against purchase ID supplied on posting of final purchase invoice.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase ID value for deleting associated unpaid posted advances.
    /// </param>
    /// <param name="_updateAmounts">
    /// Boolean indicating whether the prepayment amounts should be updated.
    /// </param>
    public static void reverseUnpaidPostedAdvances(PurchId _purchId, boolean _updateAmounts = false)
    {
        VendInvoiceJour vendInvoiceJour;
        VendTrans vendTrans;
        Args args = new Args();
        boolean vendTransWasReversed;

        //passing only those VendTrans records for reversal which belong to Advances and have not yet been settled
        while select TableId from vendInvoiceJour
            where vendInvoiceJour.PurchId == _purchId &&
                vendInvoiceJour.InvoiceType == PurchInvoiceType::VendorAdvance
            join vendTrans
                where vendTrans.Voucher == vendInvoiceJour.LedgerVoucher
                    && vendTrans.SettleAmountCur == 0.0
                    && vendTrans.SettleAmountMST == 0.0
                    && vendTrans.SettleAmountReporting == 0.0
        {
            args.record(vendTrans);
            args.parmEnum(PurchInvoiceType::VendorAdvance);
            args.parmEnumType(enumNum(PurchInvoiceType));
            TransactionReversal_Vend::main(args);

            vendTransWasReversed = true;
        }

        if (vendTransWasReversed && _updateAmounts)
        {
            PurchPrepayTable::updateAmounts(_purchId, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS15741";
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipUpdateAdvanceApplicationRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not updating the advance application remaining amount should be skipped.
    /// </summary>
    protected boolean shouldSkipUpdateAdvanceApplicationRemaining()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUpdateAdvanceApplicationRemainingAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks for the condition for allowing the udpating of the advance application remaining amount.
    /// <summary>
    ///     Checks for the condition for allowing the udpating of the advance application remaining amount.
    /// </summary>
    /// <param name = "_custVendTrans">
    ///    A <c>CustVendTrans</c> recrod which is used to check the condition.
    /// </param>
    /// <returns>
    ///     true if purch transaction and invoiced; otherwise, false.
    /// </returns>
    public static boolean isUpdateAdvanceApplicationRemainingAllowed(CustVendTrans _custVendTrans)
    {
        return (_custVendTrans.TransType == LedgerTransType::Purch && _custVendTrans.Invoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAdvanceApplicationRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the advance application remaining amount.
    /// </summary>
    /// <param name="_custVendTrans">
    /// A <c>CustVendTrans</c> record to use to recognize the <c>PurchPrepayTable</c> record to be updated.
    /// </param>
    /// <param name="settleAmountCur">
    /// An amount to update in advance application remaining amount.
    /// </param>
    public static void updateAdvanceApplicationRemaining(CustVendTrans _custVendTrans, AmountCur settleAmountCur)
    {
        PurchPrepayTable purchPrepayTable;
        VendInvoiceJour vendInvoiceJour;

        if (PurchPrepayTable::isUpdateAdvanceApplicationRemainingAllowed(_custVendTrans))
        {
            select InvoiceType, PurchId, LedgerVoucher, InvoiceDate from vendInvoiceJour
                where vendInvoiceJour.LedgerVoucher == _custVendTrans.Voucher &&
                    vendInvoiceJour.InvoiceAccount == _custVendTrans.AccountNum &&
                    vendInvoiceJour.InvoiceDate == _custVendTrans.TransDate;

            if (vendInvoiceJour.InvoiceType == PurchInvoiceType::VendorAdvance)
            {
                select firstonly forupdate purchPrepayTable
                    where purchPrepayTable.PurchTable == vendInvoiceJour.PurchId &&
                        purchPrepayTable.IsDeleted == NoYes::No;

                if (purchPrepayTable.shouldSkipUpdateAdvanceApplicationRemaining())
                {
                    return;
                }

                purchPrepayTable.PrepayApplicationRemaining += settleAmountCur;
                // <GIN>
                if (TaxWithholdParameters_IN::checkTaxParameters())
                {
                    purchPrepayTable.PrepayApplicationRemaining -= TaxWithholdTrans_IN::getWithholdingTaxAmountCur_IN(vendInvoiceJour.PurchId, vendInvoiceJour.LedgerVoucher, vendInvoiceJour.InvoiceDate);
                }
                // </GIN>
                purchPrepayTable.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the prepay available and application remaining amounts in the <c>PurchPrepayTable</c> table.
    /// </summary>
    /// <param name="_purchId">
    /// The unique ID of the purchase order for the <c>PurchPrepayTable</c> table to be updated.
    /// </param>
    /// <param name="_updateRemaining">
    /// Determines if the application remaining amount should be updated; optional.
    /// </param>
    public static void updateAmounts(PurchId _purchId, boolean _updateRemaining = true, Num _advanceInvoiceNum = '', Num _standardInvoiceNum = '')
    {
        PurchPrepayTable purchPrepayTable;

        ttsbegin;

        purchPrepayTable = PurchPrepayTable::findPurchId(_purchId, true);

        if (purchPrepayTable)
        {
            purchPrepayTable.recalculateAmounts(_updateRemaining);

            if (_updateRemaining && purchPrepayTable.PrepayApplicationRemaining < 0.0)
            {
                if (!prmIsDefault(_advanceInvoiceNum) && !prmIsDefault(_standardInvoiceNum))
                {
                    throw error(strfmt("@AccountsPayable:NegativePrepaymentApplication", _advanceInvoiceNum, _standardInvoiceNum));
                }
                else
                {
                    throw error("@AccountsPayable:NegativePrepaymentApplicationGenericError");
                }
            }
            else
            {
                purchPrepayTable.doUpdate();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrepayCrossPurchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the prepay purchase order documents are arranged or posted only when they all belong
    /// to purchase orders with the same prepay status.
    /// </summary>
    /// <param name="_parmId">
    /// The value of the <c>ParmId</c> field from either the <c>PurchParmTable</c> or
    /// <c>VendInvoiceInfoTable</c> table.
    /// </param>
    /// <param name="_documentStatus">
    /// The document status value of the <c>PurchFormLetter</c> object.
    /// </param>
    /// <returns>
    /// true if the prepay purchase order documents are not mixed with non-prepay; otherwise, false.
    /// </returns>
    public static boolean validatePrepayCrossPurchOrder(ParmId _parmId, DocumentStatus _documentStatus)
    {
        boolean isCrossPurchaseOrder;
        boolean existJoinFound;
        PurchParmTable purchParmTable;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        PurchPrepayTable purchPrepayTable;
        VendDocumentTableMap vendDocumentTableMap;

        if (_documentStatus == DocumentStatus::Invoice)
        {
            vendDocumentTableMap = vendInvoiceInfoTable;
        }
        else
        {
            vendDocumentTableMap = purchParmTable;
        }

        select firstonly RecId from vendDocumentTableMap
            where vendDocumentTableMap.ParmId == _parmId
            exists join purchPrepayTable
                where vendDocumentTableMap.PurchId == purchPrepayTable.PurchTable &&
                    purchPrepayTable.IsDeleted == NoYes::No;

        existJoinFound = vendDocumentTableMap.RecId;

        select firstonly RecId from vendDocumentTableMap
            where vendDocumentTableMap.ParmId == _parmId
            notexists join purchPrepayTable
                where vendDocumentTableMap.PurchId == purchPrepayTable.PurchTable &&
                    purchPrepayTable.IsDeleted == NoYes::No;

        isCrossPurchaseOrder = existJoinFound && vendDocumentTableMap.RecId;

        if (isCrossPurchaseOrder)
        {
            checkFailed("@SYS183657");
        }

        return !isCrossPurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUnsettledPrepayInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if un-paid prepayment invoices exists for a specific purchase order.
    /// </summary>
    /// <param name="_purchId">
    ///   A purchase order ID value.
    /// </param>
    /// <returns>
    ///   True, if no prepayment invoices were settled for the PO; otherwise, false.
    /// </returns>
    public static boolean existUnsettledPrepayInvoice(PurchId _purchId)
    {
        PurchPrepayTable purchPrepayTable;
        VendInvoiceJour vendInvoiceJour;
        VendInvoiceTrans vendInvoiceTrans;

        select firstonly RecId from purchPrepayTable
                where purchPrepayTable.PurchTable == _purchId
                    && purchPrepayTable.IsDeleted == NoYes::No
                    && purchPrepayTable.PrepayApplicationRemaining == 0.0
                    && purchPrepayTable.PrepayAvailable != purchPrepayTable.PrepayLimit;

        select firstonly RecId from vendInvoiceJour 
            join vendInvoiceTrans
                where vendInvoiceJour.PurchId == _purchid
                    && vendInvoiceJour.InvoiceType == PurchInvoiceType::VendorAdvance
                    && vendInvoiceTrans.AdvanceApplicationId == vendInvoiceJour.RecId;

        return purchPrepayTable.RecId && !vendInvoiceJour.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS329090</DeveloperDocumentation>
	<Label>@SYS183647</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>PurchTable</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>PurchTableIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>AccountsPayable</Modules>
	<ReplacementKey>PurchTableIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrepayAmount</Name>
			<Label>@SYS62867</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrepayLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrepayAvailable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrepayApplicationRemaining</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrepayInformation</Name>
			<Label>@SYS60385</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrepayCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchTable</Name>
			<Label>@SYS1653</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchPrepayDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDeleted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VersioningIsDeleted</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsModified</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VersioningIsModified</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PrepayApplicationRemaining</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchPrepayAvailable</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PrepayAvailable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchPrepayAvailable</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PrepayCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchPrepayCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PrepayLimit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchPrepayLimit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchTable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchPrepayType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Value</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchPrepayValue</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PrepayCategoryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PrepayCategoryId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CurrencyCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Currency</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchTableIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>PurchPrepayTableMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Description</MapField>
					<MapFieldTo>Description</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Value</MapField>
					<MapFieldTo>Value</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Currency</MapField>
					<MapFieldTo>Currency</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Type</MapField>
					<MapFieldTo>Type</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrepayAvailable</MapField>
					<MapFieldTo>PrepayAvailable</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrepayLimit</MapField>
					<MapFieldTo>PrepayLimit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrepayCategoryId</MapField>
					<MapFieldTo>PrepayCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchTable</MapField>
					<MapFieldTo>PurchTable</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<SourceEDT>VendCurrencyCode</SourceEDT>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PrepayCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategory_PurchPrepayTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PrepayCategoryId</Name>
					<Field>PrepayCategoryId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>PurchTable_PurchPrepayTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchTable</Name>
					<SourceEDT>PurchIdBase</SourceEDT>
					<Field>PurchTable</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>