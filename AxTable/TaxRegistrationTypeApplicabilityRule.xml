<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxRegistrationTypeApplicabilityRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxRegistrationTypeApplicabilityRule extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxAuthorityCountryId</Name>
				<Source><![CDATA[
    private LogisticsCountryRegionCode getTaxAuthorityCountryId()
    {
        TaxAuthorityAddress taxAuthorityAddress;
        LogisticsLocation logisticsLocation;
        LogisticsPostalAddress postalAddress;

        taxAuthorityAddress = TaxAuthorityAddress::find(this.TaxRegistrationAuthority);
        if (taxAuthorityAddress != null && taxAuthorityAddress.Location != 0)
        {
            logisticsLocation = LogisticsLocation::find(taxAuthorityAddress.Location);
            if (logisticsLocation != null)
            {
                postalAddress = LogisticsPostalAddress::findByLocation(logisticsLocation.RecId);
            }
        }

        return postalAddress.CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxRegistrationRuleUsed</Name>
				<Source><![CDATA[
    private boolean isTaxRegistrationRuleUsed()
    {
        boolean retValue;
        TaxRegistration taxRegistration;
        date minimumDate = dateNull();
        date maximumDate = maxDate();

        select firstonly validTimeState(minimumDate, maximumDate) RecId from taxRegistration
            where taxRegistration.TaxRegistrationTypeApplicabilityRule == this.RecId;

        if (taxRegistration.RecId)
        {
            retValue = true;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxRegistrationRuleUsedAsOrg</Name>
				<Source><![CDATA[
    private boolean isTaxRegistrationRuleUsedAsOrg()
    {
        boolean retValue;
        TaxRegistration taxRegistration;
        DirPartyLocation dirPartyLocation;
        DirPartyTable dirPartyTable;
        date minimumDate = dateNull();
        date maximumDate = maxDate();

        select firstonly validTimeState(minimumDate, maximumDate) RecId from taxRegistration
            where taxRegistration.TaxRegistrationTypeApplicabilityRule == this.RecId
        exists join dirPartyLocation
            where taxRegistration.DirPartyLocation == dirPartyLocation.RecId
        exists join dirPartyTable
            where dirPartyLocation.Party == dirPartyTable.RecId
                && dirPartyTable.InstanceRelationType != tableNum(DirPerson);

        if (taxRegistration.RecId)
        {
            retValue = true;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxRegistrationRuleUsedAsParson</Name>
				<Source><![CDATA[
    private boolean isTaxRegistrationRuleUsedAsParson()
    {
        boolean retValue;
        TaxRegistration taxRegistration;
        DirPartyLocation dirPartyLocation;
        DirPartyTable dirPartyTable;
        date minimumDate = dateNull();
        date maximumDate = maxDate();

        select firstonly validTimeState(minimumDate, maximumDate) RecId from taxRegistration
            where taxRegistration.TaxRegistrationTypeApplicabilityRule == this.RecId
        exists join dirPartyLocation
            where taxRegistration.DirPartyLocation == dirPartyLocation.RecId
        exists join dirPartyTable
            where dirPartyLocation.Party == dirPartyTable.RecId
                && dirPartyTable.InstanceRelationType == tableNum(DirPerson);

        if (taxRegistration.RecId)
        {
            retValue = true;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the <c>modifiedField</c> method to validate the <c>Format</c> and
    /// <c>PartyTypeRestriction</c> fields.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID that identifies the field that has been modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        boolean showError;
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(TaxRegistrationTypeApplicabilityRule, Format):
                if (strRTrim(this.orig().Format)
                    && strRTrim(this.Format) == ''
                    && this.isTaxRegistrationRuleUsed())
                {
                    this.Format = this.orig().Format;
                    checkFailed("@RegistrationNumbers:RegistrationInformationExistsForRegistrationType");
                }
                break;

            case fieldNum(TaxRegistrationTypeApplicabilityRule, PartyTypeRestriction):
                if (this.PartyTypeRestriction != PartyTypeRestriction::None)
                {
                    if (this.PartyTypeRestriction == PartyTypeRestriction::Organization
                        && this.isTaxRegistrationRuleUsedAsParson())
                    {
                        showError = true;
                    }
                    else if (this.PartyTypeRestriction == PartyTypeRestriction::Person
                        && this.isTaxRegistrationRuleUsedAsOrg())
                    {
                        showError = true;
                    }

                    if (showError)
                    {
                        this.PartyTypeRestriction = this.orig().PartyTypeRestriction;
                        checkFailed("@RegistrationNumbers:RegistrationInformationExists");
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.isTaxRegistrationRuleUsed())
            {
                ret = checkFailed("@RegistrationNumbers:RegistrationInformationExistsForRegistrationType");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        LogisticsAddressCountryRegionId countryRegionId;
        boolean isValid;

        isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(TaxRegistrationTypeApplicabilityRule, CountryRegionId):
                    // fall through to TaxRegistrationAuthority

                case fieldNum(TaxRegistrationTypeApplicabilityRule, TaxRegistrationAuthority):
                    if (this.CountryRegionId == '' || this.TaxRegistrationAuthority == '')
                    {
                        // do nothing if the country or tax authority is blank
                        break;
                    }

                    countryRegionId = this.getTaxAuthorityCountryId();
                    if (countryRegionId == '')
                    {
                        // requirement is to use the current company if the tax authority is set but does not have an address
                        countryRegionId = CompanyInfo::find().postalAddress().CountryRegionId;
                    }

                    if (countryRegionId != this.CountryRegionId)
                    {
                        isValid = checkFailed("@RegistrationNumbers:TheCountryOfRegistrationTypeAndTaxAuthorityMustBeSame");
                    }
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        #ISOCountryRegionCodes
        TaxRegistration  taxRegistration;
        DirPartyLocation dirPartyLocation;
        TaxRegistrationLegislationTypes taxRegistrationLegislationTypes;

        ret = super();

        if (ret                                                                       &&
            this.RecId                                                                &&
            this.IsPrimaryAddressRestricted                                           &&
            this.IsPrimaryAddressRestricted != this.orig().IsPrimaryAddressRestricted &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            select firstOnly RecId from taxRegistration
                where taxRegistration.TaxRegistrationTypeApplicabilityRule == this.RecId
                exists join dirPartyLocation
                    where dirPartyLocation.RecId == taxRegistration.DirPartyLocation
                       && dirPartyLocation.IsPrimaryTaxRegistration == NoYes::No;

            if (taxRegistration.RecId)
            {
                ret = checkFailed("@RegistrationNumbers:TheRegistrationNumberIsUsedForNonPrimaryCountryAddress");
            }
        }

        if (ret                                                                &&
            this.RecId                                                         &&
            (this.PartyTypeRestriction != this.orig().PartyTypeRestriction ||
             this.CountryRegionId      != this.orig().CountryRegionId        ) &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            select firstOnly RecId from taxRegistrationLegislationTypes
                where taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule == this.RecId;

            if (taxRegistrationLegislationTypes.RecId)
            {
                ret = checkFailed("@RegistrationNumbers:TheRegistrationRuleIsUsedInRegistrationCategory");
            }
        }

        if (ret                                                             &&
            this.RecId                                                      &&
            this.CountryRegionId != this.orig().CountryRegionId             &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (ret)
            {
                select firstOnly RecId from taxRegistration
                    where taxRegistration.TaxRegistrationTypeApplicabilityRule == this.RecId;

                if (taxRegistration.RecId)
                {
                    ret = checkFailed("@RegistrationNumbers:TheRegistrationRuleIsUsedForRegistrationRule");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxRegistrationTypeRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>TaxRegistrationType</c> table based on the provided information.
    /// </summary>
    /// <param name="_taxRegistrationTypeId">
    /// The id of the <c>TaxRegistrationType</c> table.
    /// </param>
    /// <param name="_countryRegionId">
    /// The country ID of the tax rule record.
    /// </param>
    /// <param name="_partyTypeRestriction">
    /// The party type restriction of the tax rule record.
    /// </param>
    /// <param name="_isRegistrationNumberUnique">
    /// The indicator if the tax number has to be unique.
    /// </param>
    /// <param name="_isRegistrationNumberUpdateable">
    /// The indicator if if the tax number can be updated.
    /// </param>
    /// <param name="_isPimaryAddressRestricted">
    /// The indicator if the tax number can belong only to primary tax registration number.
    /// </param>
    /// <returns>
    /// Returns a RecId of the created record.
    /// </returns>
    public static RefRecId createTaxRegistrationTypeRules(
        TaxRegistrationTypeId _taxRegistrationTypeId,
        LogisticsAddressCountryRegionId _countryRegionId,
        PartyTypeRestriction _partyTypeRestriction,
        NoYes _isRegistrationNumberUnique,
        NoYes _isRegistrationNumberUpdateable
        , NoYes _isPimaryAddressRestricted = NoYes::No
    )
    {
        TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;

        if (_taxRegistrationTypeId && _countryRegionId)
        {
            ttsbegin;

            taxRegistrationTypeApplicabilityRule = TaxRegistrationTypeApplicabilityRule::findByTypeCountryId(
                    _taxRegistrationTypeId, _countryRegionId, true);

            taxRegistrationTypeApplicabilityRule.TaxRegistrationType = _taxRegistrationTypeId;
            taxRegistrationTypeApplicabilityRule.CountryRegionId = _countryRegionId;
            taxRegistrationTypeApplicabilityRule.PartyTypeRestriction = _partyTypeRestriction;
            taxRegistrationTypeApplicabilityRule.IsRegistrationNumberUnique = _isRegistrationNumberUnique;
            taxRegistrationTypeApplicabilityRule.IsRegistrationNumberUpdateable = _isRegistrationNumberUpdateable;
            // <GEERU>
            taxRegistrationTypeApplicabilityRule.IsPrimaryAddressRestricted = _isPimaryAddressRestricted;
            // </GEERU>)

            if (taxRegistrationTypeApplicabilityRule.RecId)
            {
                taxRegistrationTypeApplicabilityRule.update();
            }
            else
            {
                taxRegistrationTypeApplicabilityRule.insert();
            }

            ttscommit;
        }

        return taxRegistrationTypeApplicabilityRule.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>TaxRegistrationTypeApplicabilityRule</c> record that has a specified record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TaxRegistrationTypeApplicabilityRule</c> table.
    /// </returns>
    public static TaxRegistrationTypeApplicabilityRule find(
        RecId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;

        taxRegistrationTypeApplicabilityRule.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxRegistrationTypeApplicabilityRule.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxRegistrationTypeApplicabilityRule
            where taxRegistrationTypeApplicabilityRule.RecId == _recId;

        return taxRegistrationTypeApplicabilityRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTypeCountryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>TaxRegistrationTypeApplicabilityRule</c> table.
    /// </summary>
    /// <param name="_taxRegistrationType">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_countryRegionId">
    /// The country region ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TaxRegistrationTypeApplicabilityRule</c> table.
    /// </returns>
    public static TaxRegistrationTypeApplicabilityRule findByTypeCountryId(RefRecId _taxRegistrationType,
                                                    LogisticsAddressCountryRegionId _countryRegionId,
                                                    boolean             _forupdate = false,
                                                    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;

        taxRegistrationTypeApplicabilityRule.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxRegistrationTypeApplicabilityRule.concurrencyModel(_concurrencyModel);
        }

        if (_taxRegistrationType && _countryRegionId)
        {
            select firstonly taxRegistrationTypeApplicabilityRule
                where   taxRegistrationTypeApplicabilityRule.TaxRegistrationType == _taxRegistrationType
                        && taxRegistrationTypeApplicabilityRule.CountryRegionId == _countryRegionId;
        }

        return taxRegistrationTypeApplicabilityRule;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GLS220935</DeveloperDocumentation>
	<FormRef>TaxRegistrationType</FormRef>
	<Label>@GLS220932</Label>
	<TitleField1>TaxRegistrationType</TitleField1>
	<TitleField2>CountryRegionId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Tax</Modules>
	<ReplacementKey>PrimaryIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRegistrationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRegistrationAuthority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PartyTypeRestriction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Format</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsRegistrationNumberUpdateable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsRegistrationNumberUnique</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRegistrationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRegistrationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Main</Name>
			<Label>@GLS220858</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRegistrationAuthority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PartyTypeRestriction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Format</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsRegistrationNumberUpdateable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsRegistrationNumberUnique</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPrimaryAddressRestricted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryRegionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegistrationTypeCountryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Format</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegistrationFormat</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPrimaryAddressRestricted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegistrationPrimaryAddressRestricted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsRegistrationNumberUnique</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegistrationTypeUnique</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsRegistrationNumberUpdateable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegistrationTypeUpdateable</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PartyTypeRestriction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PartyTypeRestriction</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxRegistrationAuthority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAuthority</ExtendedDataType>
			<Label>@GLS113185</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxRegistrationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegistrationTypeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PrimaryIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxRegistrationType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CountryRegionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CountryRegionIdTaxRegistrationTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CountryRegionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegionId</Name>
					<SourceEDT>TaxRegistrationTypeCountryId</SourceEDT>
					<Field>CountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxAuthorityAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxAuthorityAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxRegistrationAuthority</Name>
					<SourceEDT>TaxAuthority</SourceEDT>
					<Field>TaxRegistrationAuthority</Field>
					<RelatedField>TaxAuthority</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxAuthorityIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxRegstrationType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TaxRegistrationType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxRegistrationType</Name>
					<SourceEDT>TaxRegistrationTypeId</SourceEDT>
					<Field>TaxRegistrationType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>