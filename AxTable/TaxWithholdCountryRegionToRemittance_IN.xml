<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdCountryRegionToRemittance_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdCountryRegionToRemittance_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxWithholdCountryRegionToRemittance_IN</c> table.
    /// </summary>
    /// <param name="_countryToRemitRefRecId">
    /// the RecId of the <c>TaxWithholdCountryRegionToRemittance_IN</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// Concurrency Model
    /// </param>
    /// <returns>
    /// The specified record in the <c>TaxWithholdCountryRegionToRemittance_IN</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxWithholdCountryRegionToRemittance_IN find(
        TaxWithholdCountryToRemitRefRecId_IN    _countryToRemitRefRecId,
        boolean                                 _forupdate          = false,
        ConcurrencyModel                        _concurrencyModel   = ConcurrencyModel::Auto)
    {
        TaxWithholdCountryRegionToRemittance_IN taxWithholdCountryRegionToRemittance;

        taxWithholdCountryRegionToRemittance.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdCountryRegionToRemittance.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdCountryRegionToRemittance
            where taxWithholdCountryRegionToRemittance.RecId == _countryToRemitRefRecId;

        return taxWithholdCountryRegionToRemittance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>TaxWithholdCountryRegionToRemittance_IN</c> table.
    /// </summary>
    /// <param name="_countryRegionId">
    ///    The country/regioin Id of the <c>TaxWithholdCountryRegionToRemittance_IN</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    The specified record in the <c>TaxWithholdCountryRegionToRemittance_IN</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxWithholdCountryRegionToRemittance_IN findByCountryRegionId(
        LogisticsAddressCountryRegionId _countryRegionId,
        boolean _forUpdate = false)
    {
        TaxWithholdCountryRegionToRemittance_IN TaxWithholdCountryRegionToRemittance_IN;

        if (_countryRegionId)
        {
            TaxWithholdCountryRegionToRemittance_IN.selectForUpdate(_forUpdate);

            select firstonly * from TaxWithholdCountryRegionToRemittance_IN
                where TaxWithholdCountryRegionToRemittance_IN.CountryRegionId == _countryRegionId;
        }

        return TaxWithholdCountryRegionToRemittance_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDeducteeCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxWithholdCountryRegionToRemittance_IN</c> table.
    /// </summary>
    /// <param name="_custVendTable">
    /// a vend/cust
    /// </param>
    /// <returns>
    /// The specified record in the <c>TaxWithholdCountryRegionToRemittance_IN</c> table; otherwise, an empty record.
    /// </returns>
    public static taxWithholdCountryRegionToRemittance_IN getDefaultDeducteeCountryRegion(CustVendTable _custVendTable)
    {
        LogisticsAddressCountryRegionId             countryRegionID;
        TaxWithholdCountryRegionToRemittance_IN     taxWithholdCountryRegionToRemittance_IN;

        if (_custVendTable.RecId)
        {
            countryRegionID = LogisticsPostalAddress::findByLocation(DirPartyLocation::findPrimaryPartyLocation(_custVendTable.Party).Location).CountryRegionId;
        }

        if (countryRegionID)
        {
            taxWithholdCountryRegionToRemittance_IN = TaxWithholdCountryRegionToRemittance_IN::findByCountryRegionId(countryRegionID);
        }

        return taxWithholdCountryRegionToRemittance_IN;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4004236</DeveloperDocumentation>
	<FormRef>TaxWithholdCountryRegionToRemittance_IN</FormRef>
	<Label>@SYS4004220</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CountryCode</TitleField1>
	<TitleField2>CountryRegionName</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>CountryCodeIdx</ClusteredIndex>
	<Modules>Tax</Modules>
	<ReplacementKey>CountryCodeIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CountryRegion</Name>
			<Label>@SYS121852</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdRemittanceCountryCode_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryRegionId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressCountryRegionId</ExtendedDataType>
			<Label>@SYS4004246</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryRegionName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdRemittancCountryRegionName_IN</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CountryCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CountryCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegionId</Name>
					<SourceEDT>LogisticsAddressCountryRegionId</SourceEDT>
					<Field>CountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>