<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdThresholdLimit_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdThresholdLimit_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks date interval for whether these ae in use or not.
    /// </summary>
    /// <returns>
    /// returns true if exists, otherwise; false
    /// </returns>
    public boolean checkInterval()
    {
        if (this.FromDate > this.ToDate)
        {
            return checkFailed("@SYS16982");
        }

        if (this.ExceptionThreshold && (this.ExceptionThreshold > this.Threshold))
        {
            return checkFailed("@GLS5443");
        }

        if (TaxWithholdThresholdLimit_IN::existSamePeriod(this.TaxWithholdComponent,
                                                            this.FromDate,
                                                            this.ToDate,
                                                            this.RecId))
        {
            return checkFailed("@SYS22089");
        }
        else
        {
            if (TaxWithholdThresholdLimit_IN::existPeriodOverlap(this.TaxWithholdComponent,
                                                                    this.FromDate,
                                                                    this.ToDate,
                                                                    this.RecId))
            {
                return checkFailed("@SYS94867");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean                         ret;
        TaxWithholdTrans_IN             taxWithholdTrans;
        TaxWithholdComponentTable_IN    taxWithholdComponentTable;

        ret = super();

        if (ret)
        {
            taxWithholdComponentTable   = TaxWithholdComponentTable_IN::find(this.TaxWithholdComponent);

            select firstonly taxWithholdTrans
                where taxWithholdTrans.TransDate                    >= this.FromDate
                    && taxWithholdTrans.TransDate                   <=  this.ToDate
                    && taxWithholdTrans.TaxWithholdComponent        == this.TaxWithholdComponent;

            if (taxWithholdTrans)
            {
                ret = checkFailed("@GLS5450");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = this.checkInterval();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPeriodOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdThresholdLimit_IN</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_component">
    /// Tax withhold component for IN tax withhold.
    /// </param>
    /// <param name="_fromDate">
    /// From date used to find the record.
    /// </param>
    /// <param name="_toDate">
    /// To date used to find the record.
    /// </param>
    /// <param name="_recId">
    /// Record Id ,selected record should not equal to this record Id.
    /// </param>
    /// <returns>
    /// Return true if record exists otherwise false.
    /// </returns>
    static private boolean existPeriodOverlap(
        TaxWithholdComponentRecId_IN      _component,
        TransDate                         _fromDate,
        TransDate                         _toDate,
        recId                             _recId)
    {
        TaxWithholdThresholdLimit_IN    thresholdLimit;

        if (_component)
        {
            select firstonly RecId
                from thresholdLimit
                where thresholdLimit.TaxWithholdComponent      == _component
                    && thresholdLimit.RecId                     != _recId
                    && (   (thresholdLimit.FromDate     >= _fromDate
                            && thresholdLimit.FromDate  <= _toDate)
                        || (thresholdLimit.ToDate       >= _fromDate
                            && thresholdLimit.ToDate    <= _toDate));
        }
        return thresholdLimit.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSamePeriod</Name>
				<Source><![CDATA[
    static private boolean existSamePeriod(TaxWithholdComponentRecId_IN      _component,
                                                  TransDate                         _fromDate,
                                                  TransDate                         _toDate,
                                                  recId                             _recId)
    {
        TaxWithholdThresholdLimit_IN    thresholdLimit;

        if (_component)
        {
            select RecId from thresholdLimit
                    where thresholdLimit.TaxWithholdComponent   == _component
                            && thresholdLimit.FromDate          == _fromDate
                            && thresholdLimit.ToDate            == _toDate
                            && thresholdLimit.RecId             != _recId;
        }

        return thresholdLimit.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForComponentAndTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdThresholdLimit_IN</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_component">
    /// Tax type on the basis check operation will perform.
    /// </param>
    /// <param name="_transactionDate">
    /// Transaction date that use for check the exist.
    /// </param>
    /// <returns>
    /// Return true if record exists otherwise false.
    /// </returns>
    public static boolean existsForComponentAndTransDate(
        TaxWithholdComponentRecId_IN    _component,
        TransDate                       _transactionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return (select firstonly RecId from taxWithholdThresholdLimit_IN
                    where taxWithholdThresholdLimit_IN.TaxWithholdComponent      == _component
                    && taxWithholdThresholdLimit_IN.FromDate    <= _transactionDate
                    && taxWithholdThresholdLimit_IN.ToDate      >= _transactionDate).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdThresholdLimit_IN</c> table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdThresholdLimit_IN</c> table.
    /// </returns>
    public static TaxWithholdThresholdLimit_IN find(
        RefRecId            _recId,
        boolean             _forupdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdThresholdLimit_IN taxWithholdThresholdLimit;

        taxWithholdThresholdLimit.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdThresholdLimit.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdThresholdLimit
            where taxWithholdThresholdLimit.RecId == _recId;

        return taxWithholdThresholdLimit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63790</DeveloperDocumentation>
	<FormRef>TaxWithholdthresholdLimit_IN</FormRef>
	<Label>@SYS59275</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Threshold</TitleField1>
	<TitleField2>ExceptionThreshold</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TaxWithholdComponentTableIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Threshold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExceptionThreshold</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdComponent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdComponent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Threshold</Name>
			<Label>@SYS59275</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Threshold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExceptionThreshold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PerTransThreshhold</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExceptionThreshold</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdExceptionThreshold_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS24050</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PerTransThreshhold</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdPerTransThreshhold_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdComponent</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdComponentRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Threshold</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdThreshold_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS35904</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxWithholdComponentTableIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdComponent</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdComponentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdComponentTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdComponentTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdComponentTable_IN_TaxWithholdThresholdLimit_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdComponent</Name>
					<Field>TaxWithholdComponent</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>