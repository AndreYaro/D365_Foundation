<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductReleasedStoppedAllChartPartTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductReleasedStoppedAllChartPartTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate data for chart where the released product is stopped in sales, purcahse or inventory.
    /// </summary>
    /// <param name = "_configuration">The workspace configurationday used to filter data.</param>
    public void populateData(EcoResProductMaintainWorkspaceConfiguration _configuration)
    {
        delete_from this;

        utcdatetime currentDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(),DateTimeUtil::getUserPreferredTimeZone());
        utcdatetime stoppedDateTime = DateTimeUtil::addDays(currentDateTime, - _configuration.ReleasedStopped);
        this.EntryDate = DateTimeUtil::date(stoppedDateTime);

        this.ProductSalesCount = this.countStoppedItems(_configuration, queryStr(EcoResProductReleasedStoppedSales), stoppedDateTime);

        this.ProductPurchCount = this.countStoppedItems(_configuration, queryStr(EcoResProductReleasedStoppedPurch), stoppedDateTime);

        this.ProductInventCount = this.countStoppedItems(_configuration, queryStr(EcoResProductReleasedStoppedInvent), stoppedDateTime);

        this.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>countStoppedItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the query using the parameter query name and count the number of record.
    /// </summary>
    /// <param name = "_configuration">The workspace configuration record.</param>
    /// <param name = "_queryName">The name f the query to run.</param>
    /// <param name = "_stoppedDateTime">The stopped datetime to filter on.</param>
    /// <returns>Count of records from the query execution.</returns>
    private int64 countStoppedItems(EcoResProductMaintainWorkspaceConfiguration _configuration, str _queryName, utcdatetime _stoppedDateTime)
    {
        Query query = new Query(_queryName);
        QueryBuildDataSource    qbdsInventTable  = EcoResProductWorkspaceConfigurationHelper::getQueryBuildDataSource(query, tableNum(InventTable));
        qbdsInventTable.addSelectionField(fieldNum(InventTable, RecId), SelectionField::Count);

        QueryBuildRange         qbrInventTable = qbdsInventTable.addRange(fieldNum(InventTable, CreatedDateTime));
        qbrInventTable.value(
            strFmt('(%1.%2 > %3)',
                qbdsInventTable.name(),
                fieldStr(InventTable, CreatedDateTime),
                DateTimeUtil::toStr(_stoppedDateTime)));

        EcoResProductWorkspaceConfigurationHelper::applyCategoryFilter(query, _configuration.CategoryHierarchy, _configuration.NestedSetLeft, _configuration.NestedSetRight);

        QueryRun     queryrun    = new queryrun(query);
        queryrun.next();
        return queryrun.get(tablenum(InventTable)).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:EcoResProductReleasedStoppedAllChartPartTmpDevDoc</DeveloperDocumentation>
	<Label>@SCM:ReleasedProductsStopped</Label>
	<TitleField1>EntryDate</TitleField1>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EntryDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductSalesCount</Name>
			<AssetClassification>System Metadata</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductPurchCount</Name>
			<AssetClassification>System Metadata</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductInventCount</Name>
			<AssetClassification>System Metadata</AssetClassification>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>