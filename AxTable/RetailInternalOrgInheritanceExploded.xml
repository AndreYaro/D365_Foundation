<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInternalOrgInheritanceExploded</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailInternalOrgInheritanceExploded extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>retailConfigurationKeyEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs when a organization hierarchy is published if the retail configuration key is enabled.
    /// </summary>
    /// <param name = "_eventHandler">Event handler.</param>
    [SubscribesTo(classstr(RetailDelegates), delegatestr(RetailDelegates, populateExplodedRetailInternalOrgInheritanceDelegate))]
    static void retailConfigurationKeyEnabled(EventHandlerResult _eventHandler)
    {
        RetailInternalOrgInheritanceExploded::populateForHierarchyPurposes(RetailInternalOrgInheritanceExploded::getHierarchyPurposes());
        RetailInternalOrgInheritanceExploded::populate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>OMHierarchyPurposeAssociation_Post_PerformSetDefaultHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs when an organization hierarchy is assigned as the default hierarchy for a purpose.
    /// </summary>
    /// <param name="args">The arguments passed by the event handler.</param>
    /// <remarks>This is a post handler because the default hierarchy needs to be set before population.</remarks>
    [PostHandlerFor(formStr(OMHierarchyPurposeAssociation), formMethodStr(OMHierarchyPurposeAssociation, PerformSetDefaultHierarchy))]
    public static void OMHierarchyPurposeAssociation_Post_PerformSetDefaultHierarchy(XppPrePostArgs args)
    {
        if (RetailDelegates::RetailConfigKeyEnabled())
        {
            RetailInternalOrgInheritanceExploded::populateForHierarchyPurposes(RetailInternalOrgInheritanceExploded::getHierarchyPurposes());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyPurposes</Name>
				<Source><![CDATA[
	private static container getHierarchyPurposes()
    {
        // Population will happen for hierarchy purposes in this container. To extend population to a new purpose just add it here
        container hierarchyPurposes = [HierarchyPurpose::RetailAutoCharge];

        return hierarchyPurposes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateForHierarchyPurposes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the exploded organization structure for the hierarchy types that are set as the default for the given hierarchy purposes.
    /// The populated table stores all the paths from any node to all its ancestors (including itself) in the organization inheritance hierarchy.
    /// </summary>
    /// <remarks>
    /// This method will be called when the org hierarchy is published.
    /// This method will be called when an organization hierarchy is set as the default hierarchy for a purpose.
    /// </remarks>
    internal static void populateForHierarchyPurposes(container hierarchyPurposes)
    {
        ttsbegin;

        utcdatetime dateToday = DateTimeUtil::newDateTime(DateTimeUtil::date(DateTimeUtil::utcNow()), 0);

        using(var telemetry = RetailInstrumentationSegment::construct('RetailInternalOrgInheritanceExploded', funcName()))
        {
            for (int i = 1; i <= conLen(hierarchyPurposes); i++)
            {
                HierarchyPurpose hierarchyPurpose = conPeek(hierarchyPurposes, i);

                // Clear current and future paths
                RetailInternalOrgInheritanceExploded recordsToDelete;

                delete_from recordsToDelete
                    where recordsToDelete.ValidTo >= dateToday
                       && recordsToDelete.HierarchyPurpose == hierarchyPurpose;

                // Get the default hierarchy type for current hierarchy purpose 
                OMHierarchyType omHierarchyType;
                OMHierarchyPurpose omHierarchyPurpose;

                select firstonly omHierarchyType
                join omHierarchyPurpose
                    where omHierarchyPurpose.HierarchyType == omHierarchyType.RecId
                       && omHierarchyPurpose.HierarchyPurpose == hierarchyPurpose
                       && omHierarchyPurpose.IsDefault == NoYes::Yes;

                if (!omHierarchyType)
                {
                    continue;
                }

                // Seed with paths of length 0 from each node to itself
                int distance = 0;
                RetailInternalOrgInheritanceExploded recordsToSeed;
                OMHierarchyRelationship omHierarchyRelationship;

                insert_recordset recordsToSeed(
                    InternalOrganization,
                    AncestorInternalOrg,
                    Distance,
                    HierarchyPurpose,
                    ValidFrom,
                    ValidTo)
                select ChildOrganization, ChildOrganization, distance, hierarchyPurpose, ValidFrom, ValidTo
                from omHierarchyRelationship
                    where omHierarchyRelationship.HierarchyType == omHierarchyType.RecId
                    && omHierarchyRelationship.ValidTo >= dateToday;

                // Grow the paths by incrementing distance until no more paths are added
                RetailInternalOrgInheritanceExploded newRetailInternalOrgInheritanceExploded;
                RetailInternalOrgInheritanceExploded existingInternalOrgInheritanceExploded;

                do
                {
                    distance++;
                    insert_recordset newRetailInternalOrgInheritanceExploded(
                        InternalOrganization,
                        ValidFrom,
                        ValidTo,
                        HierarchyPurpose,
                        AncestorInternalOrg,
                        Distance)
                   select InternalOrganization, ValidFrom, ValidTo, hierarchyPurpose
                   from existingInternalOrgInheritanceExploded
                       where existingInternalOrgInheritanceExploded.Distance == distance - 1
                          && existingInternalOrgInheritanceExploded.HierarchyPurpose == hierarchyPurpose
                          && existingInternalOrgInheritanceExploded.ValidTo >= dateToday
                   join ParentOrganization, distance from omHierarchyRelationship
                       where omHierarchyRelationship.ChildOrganization == existingInternalOrgInheritanceExploded.AncestorInternalOrg
                          && omHierarchyRelationship.HierarchyType == omHierarchyType.RecId
                          && omHierarchyRelationship.ValidFrom <= existingInternalOrgInheritanceExploded.ValidFrom
                          && omHierarchyRelationship.ValidTo >= existingInternalOrgInheritanceExploded.ValidTo;
                }
                while (newRetailInternalOrgInheritanceExploded.RowCount());
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the exploded organization structure for retail channel management by inheritance.
    /// The populated table stores all the paths from any node to all its ancestors (including itself) in the organization inheritance hierarchy.
    /// </summary>
    /// <remarks>
    /// This method should be called when inheritance flag is changed or Org hierarchy is published.
    /// </remarks>
    public static void populate()
    {
        RetailInternalOrganization retailInternalOrganization;
        RetailInternalOrganization parentRetailInternalOrganization;
        RetailInternalOrgInheritanceExploded retailInternalOrgInheritanceExploded;
        RetailInternalOrgInheritanceExploded existingInternalOrgInheritanceExploded;
        OMHierarchyType         omHierarchyType;
        OMHierarchyRelationship omHierarchyRelationship;
        int distance = 0;
        const int zeroDistance = 0;
        utcDateTime dateToday;
        utcDateTime maxDateTime = DateTimeUtil::maxValue();
        HierarchyPurpose hierarchyPurposeNotSet = HierarchyPurpose::NotSet;

        dateToday = DateTimeUtil::newDateTime(DateTimeUtil::date(DateTimeUtil::utcNow()), 0);
        omHierarchyType = RetailInternalOrganization::getOMHierarchyType();

        ttsBegin;

        // clear current and future paths.
        delete_from retailInternalOrgInheritanceExploded
            where retailInternalOrgInheritanceExploded.ValidTo >= dateToday
               && retailInternalOrgInheritanceExploded.HierarchyPurpose == hierarchyPurposeNotSet;

        // Seed with paths of zero distance, i.e., all retail internal organizations to themselves
        // Capture InternalOrg as both Parent and Child InternalOrganization = AncestorInternalOrg
        // and Distance = 0.

        // Clear the existing InternalOrganization = AncestorInternalOrg and Distance = 0 paths first.
        delete_from retailInternalOrgInheritanceExploded
            where retailInternalOrgInheritanceExploded.InternalOrganization == retailInternalOrgInheritanceExploded.AncestorInternalOrg
                && retailInternalOrgInheritanceExploded.HierarchyPurpose == hierarchyPurposeNotSet
                && retailInternalOrgInheritanceExploded.Distance == zeroDistance
            exists join retailInternalOrganization
                where retailInternalOrgInheritanceExploded.InternalOrganization == retailInternalOrganization.RecId
            notexists join omHierarchyRelationship
                where retailInternalOrganization.InternalOrganization == omHierarchyRelationship.ChildOrganization
                    && omHierarchyRelationship.HierarchyType == omHierarchyType.RecId;

        // Seed retail internal organizations which are never in the assortment hierarchy, for back compat.
        insert_recordset retailInternalOrgInheritanceExploded(
            InternalOrganization,
            AncestorInternalOrg,
            Distance,
            ValidTo,
            HierarchyPurpose
        )
        select RecId, RecId, zeroDistance, maxDateTime, hierarchyPurposeNotSet
            from retailInternalOrganization
            notexists join omHierarchyRelationship
                where retailInternalOrganization.InternalOrganization == omHierarchyRelationship.ChildOrganization
                    && omHierarchyRelationship.HierarchyType == omHierarchyType.RecId;

        // Seed retail internal organizations which are in the assortment hierarchy.
        insert_recordset retailInternalOrgInheritanceExploded(
            InternalOrganization,
            AncestorInternalOrg,
            Distance,
            HierarchyPurpose,
            ValidFrom,
            ValidTo
        )
        select RecId, RecId, distance, hierarchyPurposeNotSet
            from retailInternalOrganization
            join ValidFrom, ValidTo from omHierarchyRelationship
                where retailInternalOrganization.InternalOrganization == omHierarchyRelationship.ChildOrganization
                    && omHierarchyRelationship.HierarchyType == omHierarchyType.RecId
                            && omHierarchyRelationship.ValidTo >= dateToday;

        // Grow the paths by incrementing distance until no more paths are added
        while (retailInternalOrgInheritanceExploded.RowCount())
        {
            // Insert paths of distance + 1 based on all the existing paths with current distance
            distance ++;
            insert_recordset retailInternalOrgInheritanceExploded(
                InternalOrganization,
                ValidFrom,
                ValidTo,
                HierarchyPurpose,
                AncestorInternalOrg,
                Distance
            )
            select InternalOrganization, ValidFrom, ValidTo, hierarchyPurposeNotSet
                from existingInternalOrgInheritanceExploded
                    where existingInternalOrgInheritanceExploded.Distance == distance - 1
                            && existingInternalOrgInheritanceExploded.ValidTo >= dateToday
                            && existingInternalOrgInheritanceExploded.HierarchyPurpose == hierarchyPurposeNotSet
                    join retailInternalOrganization
                        where existingInternalOrgInheritanceExploded.AncestorInternalOrg == retailInternalOrganization.RecId
                            && retailInternalOrganization.InheritEnabled == NoYes::Yes
                        join omHierarchyRelationship
                            where retailInternalOrganization.InternalOrganization == omHierarchyRelationship.ChildOrganization
                                && omHierarchyRelationship.HierarchyType == omHierarchyType.RecId
                                    && existingInternalOrgInheritanceExploded.ValidTo == omHierarchyRelationship.ValidTo
                            join RecId, distance from parentRetailInternalOrganization
                                where omHierarchyRelationship.ParentOrganization == parentRetailInternalOrganization.InternalOrganization;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@REX1020</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@REX1061</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>InternalOrganization</TitleField1>
	<TitleField2>AncestorInternalOrg</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>DateEffectivityOrgAncestorIdx</ClusteredIndex>
	<Modules>ChannelManagement</Modules>
	<ReplacementKey>DateEffectivityOrgAncestorIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<ValidTimeStateFieldType>UtcDateTime</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AncestorInternalOrg</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Distance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InternalOrganization</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InternalOrganization</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AncestorInternalOrg</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HierarchyPurpose</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AncestorInternalOrg</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Distance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InternalOrganization</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HierarchyPurpose</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AncestorInternalOrg</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInternalOrgRefRecId</ExtendedDataType>
			<Label>@SYS130621</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Distance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Distance</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InternalOrganization</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInternalOrgRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HierarchyPurpose</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailHierarchyPurpose</ExtendedDataType>
			<EnumType>HierarchyPurpose</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DateEffectivityOrgAncestorIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<ValidTimeStateMode>Gap</ValidTimeStateMode>
			<Fields>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InternalOrganization</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AncestorInternalOrg</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HierarchyPurpose</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DateEffectivityOrgDistanceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InternalOrganization</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Distance</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AncestorInternalOrg</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RetailInternalOrganization</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>AncestorInternalOrg</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AncestorInternalOrg</Name>
					<Field>AncestorInternalOrg</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InternalOrganization</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RetailInternalOrganization</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InternalOrganization</Name>
					<Field>InternalOrganization</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>