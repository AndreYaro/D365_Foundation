<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPayStatementEarningLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollPayStatementEarningLine extends PayrollPayStatementLine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manages the deletion of the <c>PayrollPayStatementEarningLine</c> record buffer and
    /// removes the link to the <c>PayrollPayStatementEarningLine</c> records.
    /// </summary>
    public void delete()
    {
        // Clears the link between PayrollPayStatementEarningLine and PayrollEarningStatementLine.
        PayrollPayStatementEarningLine::removePayStatementLineLinks(this.RecId);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>PayrollPayStatementEarningLine</c> record.
    /// </summary>
    /// <param name="_earningStatementLines">
    /// A list containing <c>PayrollEarningStatementLine</c> record IDs.
    /// </param>
    /// <param name="_createSourceDocument">
    /// True, if a source document record needs to be created;
    /// False, otherwise.
    /// </param>
    /// <remarks>
    /// This method inserts the <c>PayrollPayStatementEarningLine</c> record and updates
    /// the <c>PayrollEarningStatementLine</c> records, identified by record IDs in the _earningStatementLines list,
    /// and sets the <c>PayrollEarningStatementLine.PayStatementEarningLine</c> to the newly created record id and
    /// <c>PayrollEarningStatementLine.PaymentStatus</c> to <c>PayrollPaymentProcessingStatus::Processed</c>.
    /// </remarks>

    public void insert(List _earningStatementLines = null, boolean _createSourceDocument=true)
    {
        // Passing the List of earning statement line record ids to the Parent table,
        // where the payment status will be updated to Processed.
        super(_earningStatementLines, _createSourceDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manages the update of <c>PayrollPayStatementEarningLine</c> and
    /// removes the removes the links to the <c>PayrollPayStatementEarningLine</c> record.
    /// </summary>
    public void update()
    {
        if (this.IsMarkedForRemoval == NoYes::Yes
            && !(this.orig().IsMarkedForRemoval == NoYes::Yes))
        {
            // Clears the link between PayrollPayStatementEarningLine and PayrollEarningStatementLine.
            PayrollPayStatementEarningLine::removePayStatementLineLinks(this.RecId);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if it is safe to create a new <c>PayrollPayStatementEarningLine</c> on the current pay statement
    /// for the specified code.
    /// </summary>
    /// <param name="_earningCode">
    /// The earning code record identifier for which to see if earning line records exist.
    /// </param>
    /// <param name="_payStatement">
    /// The <c>PayrollPayStatement</c> record identifier to verify for existance.
    /// </param>
    /// <returns>
    /// True if it is safe to create a new earning line for the current pay statement for
    /// the specified earning code.
    /// </returns>
    /// <remarks>
    /// This method is used to ensure that during a recalculation of a pay statement any
    /// lines that were modified or removed by the user do not get replaced by the
    /// recalculation process.
    /// </remarks>
    public static boolean canCreate(PayrollEarningCodeRecId _earningCode, PayrollPayStatementRecId _payStatement)
    {
        PayrollPayStatementEarningLine      earningLine;

        // Determine if a modified earning line record exists on the specified pay statement for the specified earning code
        select firstonly EarningCode, PayStatement, IsPayStatementLineOverridden from earningLine
        where earningLine.EarningCode == _earningCode
        &&    earningLine.PayStatement == _payStatement
        &&    earningLine.IsPayStatementLineOverridden == NoYes::Yes;

        // If no record is found, true is returend since it is safe to create a new record; else false is returned
        return (earningLine.RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollPayStatementEarningLine</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollPayStatementEarningLineRecId _recId)
    {
        boolean ret = true;

        if (!PayrollPayStatementEarningLine::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollPayStatementEarningLine::txtNotExist(), tableStr(PayrollPayStatementEarningLine)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollPayStatementEarningLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(PayrollPayStatementEarningLineRecId _recId)
    {
        return _recId && (select firstonly RecId from payrollPayStatementEarningLine
                    where payrollPayStatementEarningLine.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollPayStatementEarningLine</c> table based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollPayStatementEarningLine</c> table.
    /// </returns>
    public static PayrollPayStatementEarningLine find(
        PayrollPayStatementEarningLineRecId         _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollPayStatementEarningLine payrollPayStatementEarningLine;

        payrollPayStatementEarningLine.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollPayStatementEarningLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollPayStatementEarningLine
             where payrollPayStatementEarningLine.RecId == _recId;

        return payrollPayStatementEarningLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removePayStatementLineLinks</Name>
				<Source><![CDATA[
/// <summary>
    /// Removes the links to the specified <c>PayrollPayStatementEarningLine</c> record
    /// from <c>PayrollEarningStatementLine</c> records that hold a reference to it.
    /// </summary>
    /// <param name="_removedPayStatementEarningLineRecId">
    /// The record Id of the <c>PayrollPayStatementEarningLine</c> record for which
    /// to remove references from referencing tables.
    /// </param>
    public static void removePayStatementLineLinks(PayrollPayStatementEarningLineRecId _removedPayStatementEarningLineRecId)
    {
        PayrollEarningStatementLine       earningStatementLine;

        // Clear the links to the specified pay statement earning line and make them available again to other pay statementments
        while select forupdate earningStatementLine
            where earningStatementLine.PayStatementEarningLine == _removedPayStatementEarningLineRecId
            &&    earningStatementLine.PayStatementEarningLine != 0
        {
            earningStatementLine.PayStatementEarningLine = 0;
            earningStatementLine.PaymentStatus = PayrollPaymentProcessingStatus::Released;
            earningStatementLine.update(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollpaystatementearninglineTableHoldsThePayStatementEa</DeveloperDocumentation>
	<Label>@Payroll:PayStatementEarningLines</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>EarningCode</TitleField1>
	<TitleField2>WorkerTaxRegion</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Extends>PayrollPayStatementLine</Extends>
	<Modules>Payroll</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkerTaxRegion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerCompensationBenefit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerGeneralLiabilityInsuranceBenefit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EarningCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningCodeRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EarningDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollPayStatementEarningDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EarningRate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningRate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningQuantity</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerCompensationBenefit</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBenefitRecId</ExtendedDataType>
			<Label>@Payroll:WorkersCompensationCode</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerGeneralLiabilityInsuranceBenefit</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBenefitRecId</ExtendedDataType>
			<Label>@Payroll:GeneralLiabilityInsurance</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerTaxRegion</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollWorkerTaxRegionRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EarningCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>EarningCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EarningCode_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PayrollEarningCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EarningCode</Name>
					<Field>EarningCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayStatementLineEarning_FK</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PayrollPayStatementLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EarningLine</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerCompensationBenefit_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmBenefit</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>WorkerCompensationBenefit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PayrollPayStatementLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerCompensationBenefit</Name>
					<Field>WorkerCompensationBenefit</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerGeneralLiabilityInsuranceBenefitFK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmBenefit</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkerGeneralLiabilityInsuranceBenefit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PayrollPayStatementLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerGeneralLiabilityInsuranceBenefit</Name>
					<Field>WorkerGeneralLiabilityInsuranceBenefit</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerTaxRegion_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PayrollWorkerTaxRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerTaxRegion</Name>
					<Field>WorkerTaxRegion</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>