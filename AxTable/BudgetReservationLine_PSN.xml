<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetReservationLine_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetReservationLine_PSN extends common
{ 
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canFinalizeLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified source document line on the budget reservation can be finalized.
    /// </summary>
    /// <returns>
    /// true if the line can be finalized; otherwise, false.
    /// </returns>
    public boolean canFinalizeLine()
    {
        boolean canFinalize;
    
        // Get source document line status
        SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine);
    
        // Use budget reservation header and source document line status to determine result
        canFinalize = this.getBudgetReservationHeader().canFinalizeDocument()
                    && sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Completed;
    
        return canFinalize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the project category is valid.
    /// </summary>
    /// <returns>
    /// true if the project category is valid; otherwise, false.
    /// </returns>
    private boolean checkProjCategory()
    {
        boolean         isValidProjCategory = true;
        ProjCategory    projCategory;
    
        if (this.ProjCategoryId)
        {
            projCategory = ProjCategory::find(this.ProjCategoryId);
    
            if (projCategory.CategoryType == ProjCategoryType::Revenue)
            {
                isValidProjCategory = checkFailed(strFmt("@SYS54897",this.ProjCategoryId));
            }
        }
    
        return isValidProjCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the project ID is valid.
    /// </summary>
    /// <returns>
    /// true if the project ID is valid; otherwise, false.
    /// </returns>
    private boolean checkProjId()
    {
        boolean isValidProjId = true;
    
        if (this.orig().ProjId && !this.ProjId && this.isPosted())
        {
            isValidProjId = checkFailed("@Budgeting_BudgetReservationPS:GBRCommittedCostError");
        }
    
        return isValidProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProcurementCategoryFromRefPurchReq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the procurement category from the referenced purchase requisition line to the current budget reservation line.
    /// </summary>
    public void copyProcurementCategoryFromRefPurchReq()
    {
        if (this.PurchReqLine)
        {
            this.setProcurementCategory(PurchReqLine::find(this.PurchReqLine).ProcurementCategory);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {  
        PurchReqLine purchaseRequitionLine = PurchReqLine::find(this.PurchReqLine);
        BudgetReservation_PSN budgetReservation = this.getBudgetReservation();

        budgetReservation.updateDocumentStatusFields(BudgetReservationDocumentAction_PSN::DocumentEdit);
    
        super();
       
        if (purchaseRequitionLine.RecId)
        {
            PurchReqWFStatusTransitionHelper::setPurchReqLineStatus(purchaseRequitionLine.RecId, PurchReqRequisitionStatus::Approved);
            PurchReqWFStatusTransitionHelper::setPurchReqTable2Approved(purchaseRequitionLine.PurchReqTable, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget check result value for the record.
    /// </summary>
    /// <returns>
    /// The budget check result value for the record.
    /// </returns>
    public display BudgetCheckResult displayBudgetCheckResult()
    {
	    return BudgetReservation_PSN::getBudgetCheckResult(this);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instance of the <c>BudgetReservation_PSN</c> class associated with the budget reservation line record.
    /// </summary>
    public BudgetReservation_PSN getBudgetReservation()
    {
        return BudgetReservation_PSN::newFromBudgetReservationHeader_PSN(this.getBudgetReservationHeader());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetReservationHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget reservation header record for the current line.
    /// </summary>
    /// <returns>
    /// Returns the <c>BudgetReservationHeader_PSN</c> record related to the current line.
    /// </returns>
    public BudgetReservationHeader_PSN getBudgetReservationHeader()
    {
        return BudgetReservationHeader_PSN::find(this.BudgetReservationHeader_PSN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLineBeenThroughYearEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current line has been through the year end process.
    /// </summary>
    /// <returns>
    /// true if the current line has been through the year end process; otherwise, false
    /// </returns>
    public boolean hasLineBeenThroughYearEnd()
    {
        boolean                 hasLineBeenThroughYearEnd;
        AccountingEvent         accountingEvent;
        AccountingDistribution  accountingDistribution;
    
        if (this.SourceDocumentLine)
        {
            select firstonly RecId from accountingEvent
                where accountingEvent.Type == AccountingEventType::PeriodOpen
                exists join accountingDistribution
                    where accountingDistribution.AccountingEvent == accountingEvent.RecId &&
                        accountingDistribution.SourceDocumentLine == this.SourceDocumentLine;
    
            hasLineBeenThroughYearEnd = accountingEvent.RecId != 0;
        }
    
        return hasLineBeenThroughYearEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project category ID field from a project activity record.
    /// </summary>
    /// <param name="_projActivity">
    /// The <c>ProjActivity</c> record from which to initialize the <c>ProjectCategoryId</c> field.
    /// </param>
    public void initFromProjActivity(ProjActivity _projActivity)
    {
        if (_projActivity
            && _projActivity.CategoryDefault
            && ProjCategory::find(_projActivity.CategoryDefault).CategoryType == ProjCategoryType::Item)
        {
            this.ProjCategoryId = _projActivity.CategoryDefault;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the budget reservation line from a project table record.
    /// </summary>
    /// <param name="_projTable">
    /// The <c>ProjTable</c> record from which to initialize the <c>BudgetReservationLine_PSN</c> record.
    /// </param>
    public void initFromProjTable(ProjTable _projTable)
    {
        if (_projTable.RecId != 0)
        {
            this.ProjId                 = _projTable.ProjId;
            this.ProjCategoryId         = ProjParameters::find().ItemCategory;
            this.ProjSalesCurrencyId    = _projTable.currencyId();
            this.ProjLinePropertyId     = ProjLinePropertySetup::findLinePropertyId(this.ProjId, this.ProjCategoryId);
            this.ProjTaxGroupId         = ProjParameters::taxGroupInvoice(this.ProjId);
            this.LedgerDimension        = 0;
    
            if (ProjMultipleContractLinesForProjectFeatureHelper::isInternalProject(_projTable))
            {
                this.ProjSalesPrice     = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the budget reservation line from a purchase requisition line.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The <c>PurchReqLine</c> record from which to initialize the <c>BudgetReservationLine_PSN</c> record.
    /// </param>
    public void initFromPurchReqLine(PurchReqLine _purchReqLine)
    {
        if (_purchReqLine.RecId != 0)
        {
            this.PurchReqLine           = _purchReqLine.RecId;
            this.Quantity               = _purchReqLine.PurchQty;
            this.UnitPrice              = _purchReqLine.PurchPrice;
            this.Currency               = _purchReqLine.CurrencyCode;
            this.TransactionText        = _purchReqLine.itemName();
            this.LedgerDimension        = 0;
    
            // Copying the project field values from the purchase requisition line to the budget reservation line.
            this.ProjId                 = _purchReqLine.ProjId;
            this.ActivityNumber         = _purchReqLine.ActivityNumber;
            this.ProjCategoryId         = _purchReqLine.ProjCategoryId;
            this.ProjLinePropertyId     = _purchReqLine.ProjLinePropertyId;
            this.ProjSalesCurrencyId    = _purchReqLine.ProjSalesCurrencyId;
            this.ProjSalesUnitId        = UnitOfMeasure::find(_purchReqLine.ProjSalesUnitOfMeasure).Symbol;
            this.ProjTaxGroupId         = _purchReqLine.ProjTaxGroupId;
            this.ProjTaxItemGroupId     = _purchReqLine.ProjTaxItemGroupId;
            this.ProjSalesPrice         = _purchReqLine.ProjSalesPrice;
    
            if ((_purchReqLine.LinePercent == 0) && (_purchReqLine.LineDisc == 0) && (_purchReqLine.PurchMarkup == 0))
            {
                this.LineAmount = _purchReqLine.LineAmount;
            }
            else
            {
                this.LineAmount = _purchReqLine.PurchQty * _purchReqLine.PurchPrice;
            }
    
            this.setProcurementCategory(_purchReqLine.ProcurementCategory);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
    
        this.Currency =  Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the budget reservation source document line implementation for processing in an accounting process.
    /// </summary>
    /// <remarks>
    /// This method has been overridden to create source document line record corresponding to the budget reservation source document.
    /// </remarks>
    public void insert()
    {
        BudgetReservation_PSN budgetReservation = this.getBudgetReservation();
    
        this.LineNumber = budgetReservation.getNextLineNumber();
        
        if (this.PurchReqLine)
        {
            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, false, SourceDocumentLineAccountingStatus::FullyDistributed);
        }
        else
        {
            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
        }
    
        budgetReservation.updateDocumentStatusFields(BudgetReservationDocumentAction_PSN::DocumentEdit);
    
        this.populateProjectTransId();
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineReferenced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this line is referenced.
    /// </summary>
    /// <returns>
    /// true if this line is referenced; otherwise, false.
    /// </returns>
    public boolean isLineReferenced()
    {
        AccountingDistribution  accountingDistribution;
        AccountingDistribution  referenceAccountingDistribution;
        boolean                 isLineReferenced;
    
        if (this.RecId != 0)
        {
            select firstonly RecId from accountingDistribution
                where accountingDistribution.SourceDocumentLine == this.SourceDocumentLine
            exists join referenceAccountingDistribution
                where referenceAccountingDistribution.ReferenceDistribution == accountingDistribution.RecId
                    && referenceAccountingDistribution.ReferenceRole        == AccountingDistributionReferenceRole::Matching;
    
            isLineReferenced = accountingDistribution.RecId != 0;
        }
        else
        {
            isLineReferenced = false;
        }
    
        return isLineReferenced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineReferencedByPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this line is used by purchase order.
    /// </summary>
    /// <returns>
    /// true if this line is used by purchase order; otherwise, false.
    /// </returns>
    public boolean isLineReferencedByPurchaseOrder()
    {
        boolean isLineReferencedByPurchaseOrder = false;
        
        if (this.RecId != 0)
        {
            PurchLine purchLine;
            select BudgetReservationLine_PSN, RecId from purchLine
                where purchLine.BudgetReservationLine_PSN == this.RecId;

            isLineReferencedByPurchaseOrder = purchLine.RecId != 0;
        }

        return isLineReferencedByPurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineReferencedByPurchaseRequisition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this line is used by purchase requisition.
    /// </summary>
    /// <returns>
    /// true if this line is used by purchase requisition; otherwise, false.
    /// </returns>
    public boolean isLineReferencedByPurchaseRequisition()
    {
        boolean isLineReferencedByPurchaseRequisition = false;
        
        if (this.RecId != 0)
        {
            PurchReqLine purchReqLine;
            select BudgetReservationLine_PSN, RecId from purchReqLine
                where purchReqLine.BudgetReservationLine_PSN == this.RecId;

            isLineReferencedByPurchaseRequisition = purchReqLine.RecId != 0;
        }

        return isLineReferencedByPurchaseRequisition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the budget reservation line has been posted.
    /// </summary>
    /// <returns>
    /// true if budget reservation line has been posted; otherwise, false.
    /// </returns>
    public boolean isPosted()
    {
        boolean         isPosted;
        AccountingEvent accountingEvent = AccountingDistribution::getLastSourceDocumentLineEvent(this.SourceDocumentLine);
    
        isPosted = accountingEvent.Type != AccountingEventType::None;
    
        return isPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectItemBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current project category type is item.
    /// </summary>
    /// <returns>
    /// true if the project category is of item type; otherwise, false.
    /// </returns>
    public boolean isProjectItemBased()
    {
        ProjCategory    projCategory;
        boolean         isProjectCategoryOfTypeItem = false;
    
        if (this.ProjCategoryId)
        {
            projCategory = ProjCategory::find(this.ProjCategoryId);
    
            if (projCategory.CategoryType == ProjCategoryType::Item)
            {
                isProjectCategoryOfTypeItem = true;
            }
        }
    
        return isProjectCategoryOfTypeItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectOnBudgetReservationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the budget reservation line is related to a project.
    /// </summary>
    /// <returns>
    /// true if the line is related to a project; otherwise, false.
    /// </returns>
    public boolean isProjectOnBudgetReservationLine()
    {
        return this.ProjId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        PurchReqLine purchReqLine;
        ProjTable    projTable;
        ProjId       origProjId         = this.orig().ProjId;
        boolean      isProjectItemBased = this.isProjectItemBased();
    
        super(_fieldId);
    
        if (_fieldId != fieldNum(BudgetReservationLine_PSN, TransactionText))
        {
            this.doUpdateAccountingDistributions = NoYes::Yes;
        }
    
        switch (_fieldId)
        {
            case (fieldNum(BudgetReservationLine_PSN, Quantity)):
            case (fieldNum(BudgetReservationLine_PSN, UnitPrice)):
    
                if (this.orig().Quantity != this.Quantity
                    || this.orig().UnitPrice != this.UnitPrice)
                {
                    this.LineAmount = this.Quantity * this.UnitPrice;
    
                    if (this.isProjectOnBudgetReservationLine())
                    {
                        this.setProjSalesPrice();
                    }
                }
            break;
    
            case (fieldNum(BudgetReservationLine_PSN, LineAmount)):
    
                if (this.orig().LineAmount != this.LineAmount
                    || this.LineAmount == 0)
                {
                    this.Quantity   = 0;
                    this.UnitPrice  = 0;
    
                    if (this.isProjectOnBudgetReservationLine())
                    {
                        this.setProjSalesPrice();
                    }
                }
            break;
    
            case (fieldNum(BudgetReservationLine_PSN, PurchReqLine)):
                if (this.PurchReqLine && this.orig().PurchReqLine != this.PurchReqLine)
                {
                    purchReqLine = PurchReqLine::find(this.PurchReqLine);
    
                    this.initFromPurchReqLine(purchReqLine);
                }
            break;
    
            case fieldNum(BudgetReservationLine_PSN, ProjId):
    
                if (this.ProjId && origProjId != this.ProjId)
                {
                    projTable = ProjTable::find(this.ProjId);
                    this.initFromProjTable(projTable);
                    this.setProjSalesPrice();
                }
                else if (!this.ProjId && origProjId != this.ProjId)
                {
                    this.resetProjectFields();
                }
            break;
    
            case fieldNum(BudgetReservationLine_PSN, ActivityNumber):
    
                this.initFromProjActivity(ProjActivity::find(this.ActivityNumber));
                this.ProjCategoryId     = ProjActivity::find(this.ActivityNumber).CategoryDefault;
                this.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(this.ProjId, this.ProjCategoryId);
            break;
    
            case fieldNum(BudgetReservationLine_PSN, ProjCategoryId):
    
                this.copyProcurementCategoryFromRefPurchReq();
    
                this.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(this.ProjId,this.ProjCategoryId);
    
                this.ProjTaxItemGroupId = ProjCategory::find(this.ProjCategoryId).TaxItemGroupId;
    
                if (this.ProjWorker && isProjectItemBased)
                {
                    this.ProjWorker = 0;
                }
    
                if (this.ProcurementCategory && !isProjectItemBased)
                {
                    this.ProcurementCategory = 0;
                }
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the accounting date field of the <c>BudgetReservationHeader_PSN</c> record.
    /// </summary>
    /// <returns>
    /// The <c>AccountingDate</c> value.
    /// </returns>
    public AccountingDate parmExchangeRateDate()
    {
        return this.getBudgetReservationHeader().AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parent source document line.
    /// </summary>
    /// <returns>
    /// Always returns null.
    /// </returns>
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document line enum name.
    /// </summary>
    /// <returns>
    /// Always returns <c>SourceDocumentLine_BudgetReservation</c>.
    /// </returns>
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return enumStr(BudgetReservation_SourceDocumentLine_PSN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a source document type enum value.
    /// </summary>
    /// <returns>
    /// Always returns <c>BudgetReservation_SourceDocumentLine_PSN::BudgetReservationLine</c>.
    /// </returns>
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return enum2int(BudgetReservation_SourceDocumentLine_PSN::BudgetReservationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document header record associated with the budget reservation header of this line.
    /// </summary>
    /// <returns>
    /// A <c>SourceDocumentHeader</c> record.
    /// </returns>
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        SourceDocumentHeader sourceDocumentHeader;
    
        sourceDocumentHeader = SourceDocumentHeader::find(this.getBudgetReservationHeader().SourceDocumentHeader);
    
        return sourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProjectTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the project transaction ID field.
    /// </summary>
    private void populateProjectTransId()
    {
        if (this.ProjId && !this.ProjTransId)
        {
            this.ProjTransId = ProjParameters::newTransId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>procurementCategoryCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the procurement category name.
    /// </summary>
    /// <returns>
    /// The name of the procurement category.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display EcoResCategoryCommodityCode procurementCategoryCode()
    {
        EcoResCategoryCommodityCode procurementCategorycode;
    
        if (this.ProcurementCategory)
        {
            procurementCategorycode = EcoResCategory::find(this.ProcurementCategory).Code;
        }
    
        return procurementCategorycode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>procurementCategoryFriendlyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the procurement category detail name.
    /// </summary>
    /// <returns>
    /// The detail name of the procurement category.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display EcoResCategoryFriendlyName procurementCategoryFriendlyName()
    {
        EcoResCategoryFriendlyName procurementCategoryname;
    
        if (this.ProcurementCategory)
        {
            procurementCategoryname = EcoResCategoryTranslation::getProcureCategoryNameProcCategory(this.ProcurementCategory);
        }
    
        return procurementCategoryname;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetProjectFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets project fields on the current <c>BudgetReservationLine_PSN</c> table record.
    /// </summary>
    private void resetProjectFields()
    {
        this.ProjId                 = '';
        this.ActivityNumber         = '';
        this.ProjCategoryId         = '';
        this.ProjLinePropertyId     = '';
        this.ProjWorker             = 0;
    
        this.ProjSalesCurrencyId    = '';
        this.ProjSalesUnitId        = '';
        this.ProjSalesPrice         = 0;
    
        this.ProjTaxGroupId         = '';
        this.ProjTaxItemGroupId     = '';
    
        this.ProjTransId            = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProcurementCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the procurement category to the current budget reservation line.
    /// </summary>
    /// <param name="_procurementCategory">
    /// The procurement category to set.
    /// </param>
    public void setProcurementCategory(EcoResCategoryId _procurementCategory)
    {
        if (this.ProjCategoryId
            && ProjCategory::find(this.ProjCategoryId).CategoryType == ProjCategoryType::Item)
        {
            this.ProcurementCategory = _procurementCategory;
        }
        else
        {
            this.ProcurementCategory = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the project sales price field and project sales currency ID field.
    /// </summary>
    private void setProjSalesPrice()
    {
        boolean defaultCostPriceAsSalesPrice = ProjParameters::find().DefaultCostPriceAsSalesPrice;

        Debug::assert(this.ProjId != '');
        Debug::assert(this.ProjCategoryId != '');

        ProjCategory projCategory;

        select firstonly RecId, CategoryType from projCategory
            where projCategory.CategoryId == this.ProjCategoryId;
            
        switch (projCategory.CategoryType)
        {
            case ProjCategoryType::Hour:
                ProjPriceParameters hourPriceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
                    this.ProjId,
                    0,
                    this.ProjCategoryId,
                    this.ProjLinePropertyId,
                    this.LineAmount,
                    this.Currency,
                    BudgetReservationHeader_PSN::find(this.BudgetReservationHeader_PSN).AccountingDate);
                        
                SalesPrice salesPrice;
                [salesPrice] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(hourPriceParams);
                    
                this.ProjSalesPrice = salesPrice / this.Quantity;
                break;
                
            case ProjCategoryType::Cost:
                ProjPriceParameters costPriceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
                    this.ProjId,
                    0,
                    this.ProjCategoryId,
                    this.LineAmount,
                    this.Currency,
                    this.ProjSalesCurrencyId,
                    BudgetReservationHeader_PSN::find(this.BudgetReservationHeader_PSN).AccountingDate);
                        
                CostPrice costPrice;
                [costPrice] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(costPriceParams);

                this.ProjSalesPrice = costPrice / this.Quantity;
                break;

            case ProjCategoryType::Item:
                if (defaultCostPriceAsSalesPrice)
                {
                    this.ProjSalesPrice = (this.ProjSalesCurrencyId != this.Currency) ?
                    ExchangeRateHelper::curPrice2CurPrice(this.UnitPrice,
                    this.Currency,
                    this.ProjSalesCurrencyId,
                    BudgetReservationHeader_PSN::find(this.BudgetReservationHeader_PSN).AccountingDate,
                    true) : this.UnitPrice;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions on update of the record.
    /// </summary>
    /// <remarks>
    /// Overridden to submit the source document line implementation.
    /// </remarks>
    public void update()
    {
        BudgetReservation_PSN       budgetReservation   = this.getBudgetReservation();
        BudgetReservationLine_PSN   originalBudgetReservationLine = this.orig();
    
        boolean                     isRequisitionReferenced  = this.PurchReqLine != 0 && originalBudgetReservationLine.PurchReqLine != this.PurchReqLine;
        boolean                     isRequisitionReferenceRemoved = this.orig().PurchReqLine != 0 && originalBudgetReservationLine.PurchReqLine != this.PurchReqLine;
    
        if (this.doUpdateAccountingDistributions == NoYes::Yes)
        {
            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, false, SourceDocumentLineAccountingStatus::FullyDistributed);
            budgetReservation.updateDocumentStatusFields(BudgetReservationDocumentAction_PSN::DocumentEdit);
        }
    
        this.populateProjectTransId();
    
        super();
    
        if (isRequisitionReferenced)
        {
            PurchReqWFStatusTransitionHelper::setPurchReqLineStatus(this.PurchReqLine, PurchReqRequisitionStatus::ReferencedByBudgetReservation_PSN); 
        }
    
        if (isRequisitionReferenceRemoved)
        {
            PurchReqWFStatusTransitionHelper::setPurchReqLineStatus(originalBudgetReservationLine.PurchReqLine, PurchReqRequisitionStatus::Approved);
            PurchReqLine purchaseRequisitionLine = PurchReqLine::find(originalBudgetReservationLine.PurchReqLine);
            PurchReqWFStatusTransitionHelper::setPurchReqTable2Approved(purchaseRequisitionLine.PurchReqTable, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        BudgetReservation_PSN budgetReservation = this.getBudgetReservation();
        boolean               isValid;
    
        isValid = super(_fieldIdToCheck);
    
        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(BudgetReservationLine_PSN, PurchReqLine):
                    if (this.PurchReqLine)
                    {
                        isValid = BudgetReservation_PSN::isPurchaseRequisitionAvailableToReference(this.PurchReqLine, this.RecId);
    
                        if (!isValid)
                        {
                            checkFailed("@Budgeting_BudgetReservationPS:PRNotAvailableForBRError");
                        }
                    }
                break;
    
                case fieldNum(BudgetReservationLine_PSN, ProjCategoryId):
                    isValid = this.checkProjCategory();
                break;
    
                case fieldNum(BudgetReservationLine_PSN, ProjId):
                    isValid = this.checkProjId();
                break;
            }
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;
    
        isValid = super();
    
       
        if (isValid
                && (PurchReqLine::existPurchaseRequisitionDiscountOrChargeOnPurchase(this.PurchReqLine)
                    || PurchReqLine::existPurchaseRequisitionChildLines(this.PurchReqLine)))
        {
            // Show a warning only without failing validation if the referenced purchase requisition
            // line has a discount, charges on purchases or child lines (e.g. tax, charges).
            warning("@Budgeting_BudgetReservationPS:BudgetReservationLineBudgetReservationsDoNotSupportTaxesInfolog");
        }
    
        if (isValid && this.ProjId)
        {
            isValid  = ProjTable::find(this.ProjId).status().journalCheckStatus();
        }
    
        if (isValid && this.ProjId && !this.ProjCategoryId)
        {
            isValid = checkFailed(strFmt("@SYS84753", fieldPName(PurchLine, ProjCategoryId)));
        }
    
        if (isValid && this.ProjId && !this.ProjLinePropertyId)
        {
            isValid = checkFailed("@SYS50154");
        }
    
        if (isValid && this.ProjId && !this.ProjSalesCurrencyId)
        {
            isValid = checkFailed("@SYS25991");
        }
    
        if (isValid && this.ProjId && !this.Quantity)
        {
            isValid = checkFailed(
                strFmt("@SYS84753",
                    fieldId2pname(
                        tableNum(BudgetReservationLine_PSN),
                        fieldNum(BudgetReservationLine_PSN, Quantity))));
        }
    
        if (isValid && this.ProjId && !this.UnitPrice)
        {
            isValid = checkFailed(
                strFmt("@SYS84753",
                    fieldId2pname(
                        tableNum(BudgetReservationLine_PSN),
                        fieldNum(BudgetReservationLine_PSN, UnitPrice))));
        }
    
        if (isValid && this.LineAmount <= 0)
        {
            isValid = checkFailed(
                strFmt("@SYS331080",
                    fieldPName(BudgetReservationLine_PSN, LineAmount)));
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAllowPurchOrderLineRefBudgetResLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified purchase order line should use relieve the associated budget
    /// reservation line, if there is an associated budget reservation line.
    /// </summary>
    /// <param name="_purchLine">
    /// The purchase order line to relieve the budget reservation line if necessary.
    /// </param>
    /// <returns>
    /// true if the purchase order line specified should relieve the referenced budget reservation line; otherwise, false.
    /// </returns>
    public static boolean doAllowPurchOrderLineRefBudgetResLine(PurchLine _purchLine)
    {
        boolean doReferenceBudgetReservationLine;
    
        //
        // We want the purchase order line accounting distributions to reference the budget reservation line accounting distributions
        // when the purchase order line references a budget reservation and there is no purchase requisition present or when the
        // purchase order line references a budget reservation that is relieving the purchase requisition line.  This is done so as to exclude
        // the scenario where the purchase requisition line was created after the budget reservation line and then added to a purchase order line,
        // in which case we want the purchase order line to relieve the purchase requisition line and not the budget reservation line.
        //
   
        if (PublicSectorUtils::isBudgetReservationEnabled())
        {
            doReferenceBudgetReservationLine =
                (_purchLine.BudgetReservationLine_PSN && !_purchLine.PurchReqLineRefId)
                || (_purchLine.PurchReqLineRefId
                    && _purchLine.BudgetReservationLine_PSN
                    && BudgetReservationLine_PSN::find(_purchLine.BudgetReservationLine_PSN).PurchReqLine != 0);
        }

        return doReferenceBudgetReservationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBudgetReservationLineForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the provided budget reservation line exists for the provided budget reservation header.
    /// </summary>
    /// <param name="_budgetReservationRecId">
    /// The record ID of the <c>BudgetReservationHeader_PSN</c> table.
    /// </param>
    /// <param name="_budgetReservationLineRecId">
    /// The record ID of the <c>BudgetReservationLine_PSN</c> table.
    /// </param>
    /// <returns>
    /// true if the provided budget reservation line exists for the provided budget reservation header; otherwise, false.
    /// </returns>
    public static boolean existBudgetReservationLineForHeader(
        BudgetReservationRecId_PSN     _budgetReservationRecId,
        BudgetReservationLineRecId_PSN _budgetReservationLineRecId)
    {
        BudgetReservationLine_PSN   localbudgetReservationLine;
    
        if (_budgetReservationRecId && _budgetReservationLineRecId)
        {
            select firstonly RecId from localbudgetReservationLine
                where localbudgetReservationLine.BudgetReservationHeader_PSN == _budgetReservationRecId
                    && localbudgetReservationLine.RecId  == _budgetReservationLineRecId;
        }
    
        return localbudgetReservationLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetReservationLine_PSN</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BudgetReservationLine_PSN</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to be used when reading the record; optional.
    /// </param>
    /// <returns>
    /// The record of the <c>BudgetReservationLine_PSN</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static BudgetReservationLine_PSN find(
        RecId             _recId,
        boolean           _forUpdate = false,
        ConcurrencyModel  _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetReservationLine_PSN budgetReservationLine;
    
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetReservationLine.concurrencyModel(_concurrencyModel);
        }
    
        if (_recId)
        {
            budgetReservationLine.selectForUpdate(_forUpdate);
    
            select firstonly budgetReservationLine
                where budgetReservationLine.RecId == _recId;
        }
    
        return budgetReservationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a budget reservation line using the line number.
    /// </summary>
    /// <param name="_lineNumber">
    /// Line number of the budget reservation line to find.
    /// </param>
    /// <param name="_budgetReservationHeader">
    /// A budget reservation header record ID associated with the line.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>BudgetReservationLine_PSN</c> buffer.
    /// </returns>
    public static BudgetReservationLine_PSN findByLineNumber(
        BudgetReservationLineNumber_PSN _lineNumber,
        BudgetReservationRecId_PSN      _budgetReservationHeader,
        boolean                         _forupdate = false,
        ConcurrencyModel                _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetReservationLine_PSN budgetReservationLine;
    
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetReservationLine.concurrencyModel(_concurrencyModel);
        }
    
        if (_lineNumber && _budgetReservationHeader)
        {
            budgetReservationLine.selectForUpdate(_forupdate);
    
            select firstonly budgetReservationLine
                where budgetReservationLine.LineNumber == _lineNumber
                    && budgetReservationLine.BudgetReservationHeader_PSN == _budgetReservationHeader;
        }
    
        return budgetReservationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPurchaseRequisitionLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the budget reservation line that references the passed in purchase requisition line record ID, if one exists.
    /// </summary>
    /// <param name="_purchReqLineRecId">
    /// The purchase requisition line record ID to use when searching for the budget reservation line.
    /// </param>
    /// <returns>
    /// The budget reservation line related to the passed in purchase requisition line record ID.
    /// </returns>
    public static BudgetReservationLine_PSN findByPurchaseRequisitionLine(RefRecId _purchReqLineRecId)
    {
        BudgetReservationLine_PSN budgetReservationLine;
    
        select firstOnly budgetReservationLine
            where budgetReservationLine.PurchReqLine == _purchReqLineRecId;
    
        return budgetReservationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a budget reservation line using a source document line.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// A record ID of the source document line.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>BudgetReservationLine_PSN</c> buffer.
    /// </returns>
    public static BudgetReservationLine_PSN findBySourceDocumentLine(
        RefRecId                _sourceDocumentLine,
        boolean                 _forupdate        = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetReservationLine_PSN budgetReservationLine;
    
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetReservationLine.concurrencyModel(_concurrencyModel);
        }
    
        if (_sourceDocumentLine)
        {
            budgetReservationLine.selectForUpdate(_forupdate);
    
            select firstonly budgetReservationLine
                where budgetReservationLine.SourceDocumentLine == _sourceDocumentLine;
        }
    
        return budgetReservationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetResLineNumberAndTransTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup for the budget reservation line.
    /// </summary>
    /// <param name="_budgetReservationRecId">
    /// The record ID of the <c>BudgetReservationHeader_PSN</c> table.
    /// </param>
    /// <param name="_formControl">
    /// The form control to perform lookup on.
    /// </param>
    /// <returns>
    /// A reference to a <c>BudgetReservationLine_PSN</c> record.
    /// </returns>
    public static Common lookupBudgetResLineNumberAndTransTxt(BudgetReservationRecId_PSN _budgetReservationRecId, FormControl _formControl)
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDSBudgetResLine;
        QueryBuildRange         queryBuildRangeBudgetResLine;
        SysReferenceTableLookup sysReferenceTableLookup;
    
        sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(BudgetReservationLine_PSN), _formControl);
    
        sysReferenceTableLookup.addLookupfield(fieldNum(BudgetReservationLine_PSN, LineNumber));
        sysReferenceTableLookup.addLookupfield(fieldNum(BudgetReservationLine_PSN, TransactionText));
    
        query = new Query();
    
        queryBuildDSBudgetResLine = query.addDataSource(tableNum(BudgetReservationLine_PSN));
    
        queryBuildRangeBudgetResLine = SysQuery::findOrCreateRange(queryBuildDSBudgetResLine, fieldNum(BudgetReservationLine_PSN, BudgetReservationHeader_PSN));
        queryBuildRangeBudgetResLine.value(queryValue(_budgetReservationRecId));
    
        sysReferenceTableLookup.parmQuery(query);
    
        return sysReferenceTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPurchReqLineAvailableForBudgetRes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup for the purchase requisition on budget reservation form.
    /// </summary>
    /// <param name="_formControl">
    /// The form control to perform lookup on.
    /// </param>
    /// <param name="_fiscalCalendarYear">
    /// The fiscal calendar year to filter purchase requisition documents on.
    /// </param>
    public static void lookupPurchReqLineAvailableForBudgetRes(FormControl _formControl, FiscalCalendarYear _fiscalCalendarYear)
    {
        SysReferenceTableLookup     purchReqLineLookup;
        QueryBuildDataSource        queryBuildPurchReqLine;
        QueryBuildDataSource        queryBuildPurchReqHeader;
        QueryBuildDataSource        queryBuildBudgetReservationLine;
        QueryBuildRange             queryBuildRangePurchReqLine;
        QueryBuildRange             queryBuildRangePurchReqHeader;
        Query                       query = new Query();
    
        //
        // A purchase requisition is available to be referenced on a budget reservation line if it
        // is not already referenced on another budget reservation line, approved, not on hold and the
        // accounting date is within the budget reservation fiscal calendar year start and end date.
        //
    
        purchReqLineLookup = SysReferenceTableLookup::newParameters(tableNum(PurchReqLine), _formControl);
    
        purchReqLineLookup.addLookupfield(fieldNum(PurchReqLine, PurchReqTable));
        purchReqLineLookup.addLookupfield(fieldNum(PurchReqLine, SequenceNumber));
    
        queryBuildPurchReqLine = query.addDataSource(tableNum(PurchReqLine));
    
        queryBuildBudgetReservationLine = queryBuildPurchReqLine.addDataSource(tableNum(BudgetReservationLine_PSN));
        queryBuildBudgetReservationLine.relations(true);
        queryBuildBudgetReservationLine.joinMode(JoinMode::NoExistsJoin);
    
        queryBuildRangePurchReqLine = SysQuery::findOrCreateRange(
            queryBuildPurchReqLine,
            fieldNum(PurchReqLine, RequisitionStatus));
    
        queryBuildRangePurchReqLine.value(queryValue(PurchReqRequisitionStatus::Approved));
    
        queryBuildRangePurchReqLine = SysQuery::findOrCreateRange( 
            queryBuildPurchReqLine,
            fieldNum(PurchReqLine, BudgetReservationLine_PSN));
    
        queryBuildRangePurchReqLine.value(queryValue(0));
    
        queryBuildRangePurchReqLine = SysQuery::findOrCreateRange(
            queryBuildPurchReqLine,
            fieldNum(PurchReqLine, TransDate));
    
        queryBuildRangePurchReqLine.value(QueryRange(_fiscalCalendarYear.StartDate, _fiscalCalendarYear.EndDate));
    
        queryBuildPurchReqHeader = queryBuildPurchReqLine.addDataSource(tableNum(PurchReqTable));
        queryBuildPurchReqHeader.relations(true);
    
        queryBuildRangePurchReqHeader = SysQuery::findOrCreateRange(
            queryBuildPurchReqHeader,
            fieldNum(PurchReqTable, OnHold));
    
        queryBuildRangePurchReqHeader.value(queryValue(NoYes::No));
    
        purchReqLineLookup.parmQuery(query);
    
        purchReqLineLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLineBudgetResLineFieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions when the user modifies the budget reservation line field on the purchase order line table.
    /// </summary>
    /// <param name="_purchLine">
    /// The purchase order line table record buffer being modified.
    /// </param>
    public static void purchLineBudgetResLineFieldModified(PurchLine _purchLine)
    {
        BudgetReservationLine_PSN budgetReservationLine;
  
        if (PublicSectorUtils::isBudgetReservationEnabled())
        {
            if (_purchLine.BudgetReservationLine_PSN && _purchLine.orig().BudgetReservationLine_PSN != _purchLine.BudgetReservationLine_PSN)
            {
                budgetReservationLine = BudgetReservationLine_PSN::find(_purchLine.BudgetReservationLine_PSN);
    
                if (!budgetReservationLine.PurchReqLine)
                {
                    _purchLine.initFromBudgetReservationLine(budgetReservationLine);
                }
                else
                {
                    if (Box::yesNo("@Budgeting_BudgetReservationPS:GBRAssociatedWithPurchaseRequisition", DialogButton::Yes) == DialogButton::Yes)
                    {
                        _purchLine.type().createPurchLineForPurchReqBudgetRes();
    
                        if (_purchLine.dataSource() != null)
                        {
                            _purchLine.dataSource().research(true);
                        }
                    }
                    else
                    {
                        _purchLine.BudgetReservationLine_PSN = _purchLine.orig().BudgetReservationLine_PSN;
                    }
                }
            }
            else if (!_purchLine.BudgetReservationLine_PSN && _purchLine.orig().BudgetReservationLine_PSN != _purchLine.BudgetReservationLine_PSN)
            {
                _purchLine.resetProjectFields();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetReservationLineSourceDocumentLineRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document line record ID associated with the budget reservation line.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    /// The record ID of the <c>SourceDocumentLine</c> table.
    /// </param>
    /// <returns>
    /// The value of the <c>SourceDocumentLineRecId</c>.
    /// </returns>
    public static SourceDocumentLineRecId getBudgetReservationLineSourceDocumentLineRecId(SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        PurchReqLine purchReqLine;
        BudgetReservationLine_PSN budgetReservationLine;

        select firstonly SourceDocumentLine from budgetReservationLine
            exists join purchReqLine
            where budgetReservationLine.PurchReqLine == purchReqLine.RecId
                && purchReqLine.SourceDocumentLine == _sourceDocumentLineRecId;

        return budgetReservationLine.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchaseRequisitionLineSourceDocumentLineRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document line record ID associated with the purchase requisition line.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    /// The record ID of the <c>SourceDocumentLine</c> table.
    /// </param>
    /// <returns>
    /// The value of the <c>SourceDocumentLineRecId</c>.
    /// </returns>
    public static SourceDocumentLineRecId getPurchaseRequisitionLineSourceDocumentLineRecId(SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        PurchReqLine purchReqLine;
        BudgetReservationLine_PSN budgetReservationLine;

        select firstonly SourceDocumentLine from purchReqLine
            where purchReqLine.RequisitionStatus == PurchReqRequisitionStatus::ReferencedByBudgetReservation_PSN
                exists join budgetReservationLine
                where budgetReservationLine.SourceDocumentLine == _sourceDocumentLineRecId
                    && budgetReservationLine.PurchReqLine == purchReqLine.RecId;

        return purchReqLine.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidatedBudgetReservationLineByTypeDateDocumentAndLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget reservation line record of the <c>BudgetReservationLine_PSN</c> table based on the specification information.
    /// </summary>
    /// <param name = "_relievingDocumentType">
    /// The relieving document type which the bbudget reservation line must have.
    /// </param>
    /// <param name = "_documentNumber">
    /// The document number which the budget reservation line must have.
    /// </param>
    /// <param name = "_lineNumber">
    /// The line number which the budget reservation line must have.
    /// </param>
    /// <param name = "_date">
    /// The date which the budget reservation line must be valid on.
    /// </param>
    /// <returns>
    /// The budget reservation line record of the <c>BudgetReservationLine_PSN</c> table. It will be empty
    /// if there isn't matched record in the table based on passing critiera.
    /// </returns>
    public static BudgetReservationLine_PSN getValidatedBudgetReservationLineByTypeDateDocumentAndLineNumber(
        BudgetReservationRelievingDocument_PSN _relievingDocumentType,
        BudgetReservationDocumentNumber_PSN _documentNumber,
        BudgetTransactionLineCount _lineNumber,
        TransDate _date)
    {
        BudgetReservationHeader_PSN budgetReservationHeader;
        BudgetReservationLine_PSN budgetReservationLine;
        boolean doGBRStatusValidation = true;

        if (PSNBudgetReservationPurchInvEntityValidationFlight::instance().isEnabled() && _relievingDocumentType == BudgetReservationRelievingDocument_PSN::VendorInvoice)
        {
            doGBRStatusValidation = false;
        }

        select firstOnly budgetReservationLine
            where budgetReservationLine.LineNumber == _lineNumber
            join budgetReservationHeader
                where budgetReservationHeader.RecId == budgetReservationLine.BudgetReservationHeader_PSN
                && budgetReservationHeader.DocumentNumber == _documentNumber;

        BudgetReservationLine_PSN::validateBudgetReservationLineForRelievingDocument(
            _documentNumber,
            _relievingDocumentType,
            budgetReservationLine,
            budgetReservationHeader,
            _date,
            _lineNumber,
            doGBRStatusValidation);

        return budgetReservationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetReservationLineForRelievingDocument</Name>
				<Source><![CDATA[
    private static void validateBudgetReservationLineForRelievingDocument(
        BudgetReservationDocumentNumber_PSN _documentNumber,
        BudgetReservationRelievingDocument_PSN _relievingDocumentType,
        BudgetReservationLine_PSN _budgetReservationLine,
        BudgetReservationHeader_PSN _budgetReservationHeader,
        TransDate _date,
        LineNumber _gbrlineNumber,
        boolean _doGBRStatusValidation)
    {
        BudgetReservationHeader_PSN budgetReservationHeader;
        
        if (!_budgetReservationLine.RecId)
        {
            checkFailed(strFmt("@Budgeting_BudgetReservationPS:BudgetReservationDocumentLineNumberError", _documentNumber, _gbrlineNumber));
        }
        else if (_doGBRStatusValidation)
        {
            if (_budgetReservationHeader.DocumentStatus != BudgetReservationDocumentStatus_PSN::Posted)
            {
                checkFailed('@Budgeting_BudgetReservationPS:BudgetReservationDocumentUnpostedError');
            }
            else
            {
                if (!(_budgetReservationHeader.StartDate <= _date
                    && _budgetReservationHeader.EndDate >= _date))
                {
                    checkFailed('@Budgeting_BudgetReservationPS:BudgetReservationDocumentDateError');
                }
                else
                {
                    if (_budgetReservationHeader.RelievingDocumentType != _relievingDocumentType)
                    {
                        checkFailed('@Budgeting_BudgetReservationPS:BudgetReservationDocumentTypeError');
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the budget reservation line is canceled.
    /// </summary>
    /// <returns>true if the budget reservation line is canceled; otherwise, false.</returns>
    internal boolean isCanceled()
    {
        BudgetReservationHeader_PSN budgetReservationHeader = BudgetReservationHeader_PSN::findByLine(this.RecId);
        
        return budgetReservationHeader.CancelDate
            && budgetReservationHeader.DocumentStatus == BudgetReservationDocumentStatus_PSN::Canceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDraftReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if budget reservation line has a reference document which is in draft state.
    /// </summary>
    /// <returns>
    /// true if budget reservation line has a draft document referenced; otherwise, false.
    /// </returns>
    internal boolean hasDraftReferences()
    {
        AccountingDistribution accountingDistributionBudgetReservation;
        AccountingDistribution referenceAccountingDistribution;
        AccountingEvent confirmedEvent;
    
        select firstonly RecId from accountingDistributionBudgetReservation
            where accountingDistributionBudgetReservation.SourceDocumentLine == this.SourceDocumentLine
            exists join referenceAccountingDistribution
                where referenceAccountingDistribution.ReferenceDistribution == accountingDistributionBudgetReservation.RecId
                    && referenceAccountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching
            notExists join confirmedEvent
                where referenceAccountingDistribution.AccountingEvent == confirmedEvent.RecId
                    && (confirmedEvent.State == AccountingEventState::Complete
                        || confirmedEvent.State == AccountingEventState::Journalized);
    
        return accountingDistributionBudgetReservation.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BudgetReservation_PSN</ConfigurationKey>
	<DeveloperDocumentation>@Budgeting_BudgetReservationPS:BudgetReservationLinesDeveloper</DeveloperDocumentation>
	<Label>@Budgeting_BudgetReservationPS:BudgetReservationLines</Label>
	<SingularLabel>@Budgeting_BudgetReservationPS:BudgetReservationLines</SingularLabel>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>LineNumber</TitleField1>
	<TitleField2>TransactionText</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>BudgetReservationLineIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SourceDocumentLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SourceDocumentLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetReservationHeader_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetReservationHeader_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS98362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetReservationLines</Name>
			<Label>@Budgeting_BudgetReservationPS:BudgetReservationLines</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProcurementCategory</Name>
			<Label>@SYS332830</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>procurementCategoryCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>procurementCategoryFriendlyName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectCostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectIdentification</Name>
			<Label>@SYS89920</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjSalesCurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjTransaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchReqLine</Name>
			<Label>@SYS94925</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchReqLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LineNumber</Name>
			<Label>@SYS15682</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetReservationHeader_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>doUpdateAccountingDistributions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetReservationAccountNum_PSN</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LineNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetReservationLineNumber_PSN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProcurementCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
			<Label>@Budgeting_BudgetReservationPS:ProcurementCategory</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjLinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesCurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjSalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceCost</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjItemTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchReqLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetReservationPurchQty_PSN</ExtendedDataType>
			<Label>@SYS14578</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SourceDocumentLineRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetReservationTransactionText_PSN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchPrice</ExtendedDataType>
			<Label>@SYS11770</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BudgetReservationLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetReservationHeader_PSN</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchReqLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchReqLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetReservationHeader_PSN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BudgetReservationHeader_PSN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetReservationHeader_PSN</Name>
					<Field>BudgetReservationHeader_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcurementCategory</Name>
					<Field>ProcurementCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectSalesCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjectSalesCurrency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetReservationLine_PSN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesCurrencyId</Name>
					<Field>ProjSalesCurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectTaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxGroupId</Name>
					<Field>ProjTaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectTaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxItemGroupId</Name>
					<Field>ProjTaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjItemTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjItemTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<Field>ProjTransId</Field>
					<RelatedField>ProjTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLinePropertyId</Name>
					<Field>ProjLinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjSalesUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesUnitId</Name>
					<Field>ProjSalesUnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjWorker</Name>
					<Field>ProjWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchReqLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PurchReqLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchReqLine</Name>
					<Field>PurchReqLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>