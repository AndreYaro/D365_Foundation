<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResTextValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResTextValue extends EcoResValue
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        EcoResTextValueTranslation  textValueTranslation;

        _visitor.visitStart(this);

        while select textValueTranslation
            where textValueTranslation.TextValueTable == this.RecId
        {
            textValueTranslation.accept(_visitor);
        }

        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares this record with the specified value definition.
    /// </summary>
    /// <param name="_value">
    /// The value definition that contains the string value with which to compare this record.
    /// </param>
    /// <returns>
    /// -1 if the first character that does not match has a lesser value in this record than the specified
    /// record value; 0 if the string values are identical; 1 if the first character that does not match
    /// has a larger value in this record than in the specified record value.
    /// </returns>
    /// <remarks>
    /// The String comparison this method uses is case-sensitive.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// This record and the given record are not comparable as they are not of the same type.
    /// </exception>
    public int compareTo(EcoResValue _value)
    {
        EcoResTextValue     argValue;

        //validates the type and throws an error if they are not the same
        super(_value);

        argValue = _value as EcoResTextValue;

        return strCmp(this.TextValue, argValue.TextValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create translation for the default language.
    /// </summary>
    public void createDefaultTranslation()
    {
        EcoResTextValueTranslation defaultTranslation;
        LanguageId defaultLanguage = LanguageTable::defaultLanguage();

        if (!this.RecId)
        {
            return;
        }

        select firstOnly defaultTranslation
            where defaultTranslation.TextValueTable == this.RecId
                && defaultTranslation.Language == defaultLanguage
        ;

        if (!defaultTranslation)
        {
            ttsBegin;

            defaultTranslation.TextValueTable = this.RecId;
            defaultTranslation.Language = defaultLanguage;
            defaultTranslation.TextValue = this.TextValue;
            defaultTranslation.insert();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record from <c>EcoResTextValue</c> table.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, unprocessed(dead) records are removed from the distribution list.
    /// </remarks>
    public void delete()
    {
        ttsBegin;

        if (isConfigurationkeyEnabled(ConfigurationKeyNum(PC)))
        {
            PCTableConstraintRow::deleteRowsWithValue(this.RecId);
        }

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStringValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string representation of this record that is compatible with the  Procurement Category  configuration.
    /// </summary>
    /// <returns>
    /// The string representation of this record.
    /// </returns>
    public str getStringValue()
    {
        return this.TextValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of this record.
    /// </summary>
    /// <returns>
    /// The string representation of this record.
    /// </returns>
    public anytype getValue()
    {
        return this.TextValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcDuplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the record.
    /// </summary>
    /// <returns>
    /// A reference to the duplicated record.
    /// </returns>
    public RefRecId pcDuplicate()
    {
        EcoResTextValue duplicate;
        RecId dupRecId;
        EcoResTextValueTranslation translation, existingTranslation;

        duplicate.data(this);
        duplicate.Origin = this.RecId;
        duplicate.insert();

        dupRecId = duplicate.RecId;
        insert_recordset translation (TextValueTable, Language, TextValue)
            select dupRecId, Language, TextValue
            from existingTranslation where existingTranslation.TextValueTable == this.RecId;

        return duplicate.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcGetStringValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string representation of this record that is compatible with the product configuration.
    /// </summary>
    /// <returns>
    /// The string representation of this record.
    /// </returns>
    public str pcGetStringValue()
    {
        PCSolverValue solverValue = PCSolverTextValue::findByTextValue(this.RecId).Value;

        super();
        return solverValue != '' ? solverValue : this.TextValue ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in <c>EcoResTextValue</c> table.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, action is inserted into the <c>RetailConnPreactionTable</c> table.
    /// </remarks>
    public void update()
    {
        EcoResTextValueTranslation translationOfDefaultLanguage;
        LanguageId defaultLanguage = SystemParameters::getSystemLanguageId();

        ttsBegin;
        super();

        select forUpdate firstOnly translationOfDefaultLanguage
            where translationOfDefaultLanguage.TextValueTable == this.RecId
                && translationOfDefaultLanguage.Language == defaultLanguage
                && translationOfDefaultLanguage.TextValue != this.TextValue
        ;

        if (translationOfDefaultLanguage)
        {
            translationOfDefaultLanguage.TextValue = this.TextValue;
            translationOfDefaultLanguage.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record of the <c>EcoResTextValue</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID to search for.
    /// </param>
    /// <returns>
    /// true if a record with the provided ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (EcoResTextValue::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResTextValue</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResTextValue</c> table or an empty buffer.
    /// </returns>
    public static EcoResTextValue find(RefRecId _recId, boolean _forupdate = false)
    {
        EcoResTextValue record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFromHashAndValue</Name>
				<Source><![CDATA[
    public EcoResValue readFromHashAndValue(boolean _forupdate = false)
    {
        EcoResTextValue ecoResTextValue;

        ecoResTextValue.selectForUpdate(_forupdate);
        select firstonly ecoResTextValue 
            where ecoResTextValue.SHA1HashHex   == this.hashValue()
                && ecoResTextValue.TextValue    == this.TextValue;

        return ecoResTextValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashKey</Name>
				<Source><![CDATA[
    protected str hashKey()
    {
        return this.TextValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueFieldId</Name>
				<Source><![CDATA[
    public fieldId valueFieldId()
    {
        return fieldNum(EcoResTextValue, TextValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS341223</DeveloperDocumentation>
	<Label>@SYS131191</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>TextValue</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Extends>EcoResValue</Extends>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EcoResTextValueTranslation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResTextValueTranslation</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TextValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TextValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TextValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueText</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes>
		<AxTableFullTextIndex>
			<Name>FullTextIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TextValue</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableFullTextIndex>
	</FullTextIndexes>
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResValue_Text</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>