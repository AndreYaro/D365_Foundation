<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMixedLicensePlateReceiptLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSMixedLicensePlateReceiptLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the item Id.
    /// </summary>
    /// <returns>
    /// ItemId associated to the transaction Id on the record.
    /// </returns>
    public ItemId getItemId()
    {
        ItemId itemId = InventTransOrigin::findByInventTransId(this.InventTransId).ItemId;
        
        // When processing sales return orders occasionally no item Id will be found for the given InventTransId
        // in those cases get the item id from the return line instead 
        if (!itemId)
        {
            SalesLine returnLine;

            select ItemId from returnLine
                where returnLine.InventTransId == this.InventTransId
                    && returnLine.SalesType == SalesType::ReturnItem;

            itemId = returnLine.ItemId;
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId   _recId)
    {
        return _recId
            && (select firstOnly RecId from whsMixedLicensePlateReceiptLine
                    where whsMixedLicensePlateReceiptLine.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if an open record exists for a specific dimension and transaction id.
    /// </summary>
    /// <param name="_dimId">
    /// The InventDimId to check.
    /// </param>
    /// <param name="_transId">
    /// The InventTransId to check.
    /// </param>
    /// <returns>
    /// True if a record exists, otherwise false.
    /// </returns>
    public static boolean existOpen(
        InventDimId   _dimId,
        InventTransId _transId)
    {
        WHSMixedLicensePlateReceipt     mixedLP;
        WHSMixedLicensePlateReceiptLine mixedLPLines;

        if (_dimId && _transId)
        {
            select firstOnly RecId from mixedLPLines
                where mixedLPLines.InventDimId     == _dimId
                &&    mixedLPLines.InventTransId   == _transId
                exists join mixedLP
                    where mixedLP.MixedLPComplete == NoYes::No
                    &&    mixedLP.RecId           == mixedLPLines.MixedLPReceivingTable;
        }

        return mixedLPLines.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOpenLPLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for an open record for a specific license plate and a line number.
    /// </summary>
    /// <param name="_lpId">
    /// The license plate to check.
    /// </param>
    /// <param name="_line">
    /// The line number to check.
    /// </param>
    /// <returns>
    /// True if a record exists, otherwise false.
    /// </returns>
    public static boolean existOpenLPLine(
        WHSLicensePlateId   _lpId,
        Line                _line)
    {
        return _lpId && _line
        && (select firstOnly RecId from whsMixedLicensePlateReceiptLine
                where whsMixedLicensePlateReceiptLine.MixedLPReceivingTable == WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(_lpId).RecId
                &&    whsMixedLicensePlateReceiptLine.LineNum               == _line).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WHSMixedLicensePlateReceiptLine find(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        WHSMixedLicensePlateReceiptLine mixedLPLines;

        if (_recId)
        {
            mixedLPLines.selectForUpdate(_forUpdate);

            select firstOnly mixedLPLines
            where mixedLPLines.RecId == _recId;
        }

        return mixedLPLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForMixedLicensePlateReceiptRecId</Name>
				<Source><![CDATA[
    internal static boolean existForMixedLicensePlateReceiptRecId(RefRecId _refRecId)
    {
        WHSMixedLicensePlateReceiptLine mixedLicensePlateReceiptLine;

        if (_refRecId)
        {
            select firstonly RecId from mixedLicensePlateReceiptLine
                where mixedLicensePlateReceiptLine.MixedLPReceivingTable == _refRecId;
        }

        return mixedLicensePlateReceiptLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns an open record for a dimension and transaction id.
    /// </summary>
    /// <param name="_mixedLPRecId">
    /// The relating header rec id.
    /// </param>
    /// <param name="_dimId">
    /// The InventDimId to be used.
    /// </param>
    /// <param name="_transId">
    /// The InventTransId to be used.
    /// </param>
    /// <param name="_forUpdate">
    /// Boolean to determine if the record should be allowed to be updated.
    /// </param>
    /// <returns>
    /// An open record from WHSMixedLPReceivingLine matching the dimension and transaction id.
    /// </returns>
    public static WHSMixedLicensePlateReceiptLine findOpen(
        RefRecId        _mixedLPRecId,
        InventDimId     _dimId,
        InventTransId   _transId,
        boolean         _forUpdate = false)
    {
        WHSMixedLicensePlateReceiptLine mixedLPLines;

        if (_mixedLPRecId
        &&  _dimId
        &&  _transId)
        {
            mixedLPLines.selectForUpdate(_forUpdate);

            select firstOnly mixedLPLines
            where mixedLPLines.MixedLPReceivingTable == _mixedLPRecId
            &&    mixedLPLines.InventDimId           == _dimId
            &&    mixedLPLines.InventTransId         == _transId;
        }

        return mixedLPLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenLPLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns an open record for a license plate and line number.
    /// </summary>
    /// <param name="_lpId">
    /// The license plate to be used.
    /// </param>
    /// <param name="_line">
    /// The line number to be used.
    /// </param>
    /// <param name="_forUpdate">
    /// Boolean to determine if the record should be allowed to be updated.
    /// </param>
    /// <returns>
    /// An open record from WHSMixedLPReceiving matching the license plate and line number.
    /// </returns>
    public static WHSMixedLicensePlateReceiptLine findOpenLPLineNum(
        WHSLicensePlateId   _lpId,
        Line                _line,
        boolean             _forUpdate = false)
    {
        WHSMixedLicensePlateReceiptLine mixedLPLines;

        if (_lpId
        &&  _line)
        {
            mixedLPLines.selectForUpdate(_forUpdate);

            select firstOnly mixedLPLines
                where mixedLPLines.MixedLPReceivingTable == WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(_lpId).RecId
                &&    mixedLPLines.LineNum               == _line;
        }

        return mixedLPLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the next line number for an open license plate.
    /// </summary>
    /// <param name="_mixedLPRecId">
    /// The relating header rec id.
    /// </param>
    /// <returns>
    /// The next line number that should be used.
    /// </returns>
    public static Line getNextLineNumber(RefRecId _mixedLPRecId)
    {
        WHSMixedLicensePlateReceiptLine mixedLPLines;
        Line                            ret;

        select maxOf(LineNum) from mixedLPLines
            where mixedLPLines.MixedLPReceivingTable == _mixedLPRecId;

        ret = mixedLPLines.LineNum + 1;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalOpenQtyOnTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sums all open qty on all open license plates for a specific transaction id.
    /// </summary>
    /// <param name="_transId">
    /// The InventTransId to sum the qty for.
    /// </param>
    /// <returns>
    /// An InventQty representing the total qty on all open license plates for a transaction id.
    /// </returns>
    public static InventQty getTotalOpenQtyOnTransId(InventTransId _transId)
    {
        WHSMixedLicensePlateReceipt         mixedLP;
        WHSMixedLicensePlateReceiptLine     mixedLPLines;

        if (_transId)
        {
            select sum(InventQty) from mixedLPLines
                where mixedLPLines.InventTransId  == _transId
                exists join mixedLP
                    where mixedLP.MixedLPComplete == NoYes::No
                    &&    mixedLP.RecId           == mixedLPLines.MixedLPReceivingTable;
        }

        return mixedLPLines.InventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalOpenQtyOnTransIdAndInventDim</Name>
				<Source><![CDATA[
    internal static InventQty getTotalOpenQtyOnTransIdAndInventDim(InventTransId _transId, InventDimId _inventDimId)
    {
        WHSMixedLicensePlateReceipt         mixedLP;
        WHSMixedLicensePlateReceiptLine     mixedLPLines;

        InventDim inventDimCriteria = InventDim::find(_inventDimId);

        InventDim inventDim;
        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(inventDimCriteria);

        inventDimParm.WMSLocationIdFlag = NoYes::No;
        inventDimParm.InventLocationIdFlag = NoYes::No;
        inventDimParm.InventSiteIdFlag = NoYes::No;
        inventDimParm.LicensePlateFlag = NoYes::No;

        if (_transId && _inventDimId)
        {
            select sum(InventQty) from mixedLPLines
                where mixedLPLines.InventTransId  == _transId
                exists join mixedLP
                    where mixedLP.MixedLPComplete == NoYes::No
                    &&    mixedLP.RecId           == mixedLPLines.MixedLPReceivingTable
                #InventDimExistsJoin(mixedLPLines.InventDimId, inventDim, inventDimCriteria, inventDimParm);
        }

        return mixedLPLines.InventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiveLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a record for mixed license plate receiving.
    /// </summary>
    /// <param name="_dimId">
    /// The InventDimId to be used.
    /// </param>
    /// <param name="_transId">
    /// The InventTransId to be used.
    /// </param>
    /// <param name="_qty">
    /// The InventQty being received.
    /// </param>
    /// <param name="_receiptId">
    /// The ReceiptId to be used.
    /// </param>
    /// <param name="_userId">
    /// The rf user receiving the record.
    /// </param>
    /// <param name="_menuName">
    /// The rf menu item that is currently being used.
    /// </param>
    /// <param name="_loadId">
    /// The load Id being received against, if using load item receiving method.
    /// </param>
    /// <param name="_shipmentId">
    /// The shipment Id being received against, if all items are on one shipment and using load item receiving method.
    /// </param>
    /// <param name="_containerCode">
    /// The container code of the type of container being received, if applicable.
    /// </param>
    /// <param name="_workTransType">
    /// The type of work being received, if applicable.
    /// </param>
    /// <returns>
    /// The created or updated record.
    /// </returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the mixedLPReceiveLine method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public static WHSMixedLicensePlateReceiptLine receiveLine(
        InventDimId          _dimId,
        InventTransId        _transId,
        InventQty            _qty,
        WHSReceiptId         _receiptId,
        WHSUserId            _userId,
        WHSMenuItemName      _menuName,
        WHSLoadId            _loadId = '',
        WHSShipmentId        _shipmentId = '',
        WHSContainerTypeCode _containerCode = '',
        WHSWorkTransType	 _workTransType = WHSWorkTransType::None)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), InventTrans::findTransId(_transId).ItemId);

        return WHSMixedLicensePlateReceiptLine::mixedLicensePlateReceiveLine(_dimId, _transId, _qty, 0, _receiptId, _userId, _menuName, _loadId, _shipmentId, _containerCode, _workTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mixedLicensePlateReceiveLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a record for mixed license plate receiving.
    /// </summary>
    /// <param name="_dimId">
    /// The InventDimId to be used.
    /// </param>
    /// <param name="_transId">
    /// The InventTransId to be used.
    /// </param>
    /// <param name="_handlingQty">
    /// The handling quantity being received.
    /// </param>
    /// <param name="_capturedWeight">
    /// The catch weight quantity being received.
    /// </param>
    /// <param name="_receiptId">
    /// The ReceiptId to be used.
    /// </param>
    /// <param name="_userId">
    /// The rf user receiving the record.
    /// </param>
    /// <param name="_menuName">
    /// The rf menu item that is currently being used.
    /// </param>
    /// <param name="_loadId">
    /// The load Id being received against, if using load item receiving method.
    /// </param>
    /// <param name="_shipmentId">
    /// The shipment Id being received against, if all items are on one shipment and using load item receiving method.
    /// </param>
    /// <param name="_containerCode">
    /// The container code of the type of container being received, if applicable.
    /// </param>
    /// <param name="_workTransType">
    /// The type of work being received, if applicable.
    /// </param>
    /// <returns>
    /// The created or updated record.
    /// </returns>
    private static WHSMixedLicensePlateReceiptLine mixedLicensePlateReceiveLine(
        InventDimId          _dimId,
        InventTransId        _transId,
        InventHandlingQty    _handlingQty,
        WHSCapturedWeight    _capturedWeight,
        WHSReceiptId         _receiptId,
        WHSUserId            _userId,
        WHSMenuItemName      _menuName,
        WHSLoadId            _loadId,
        WHSShipmentId        _shipmentId,
        WHSContainerTypeCode _containerCode,
        WHSWorkTransType	 _workTransType)
    {
        ttsBegin;

        // Check if a header record exists, otherwise create it.
        WHSMixedLicensePlateReceipt mixedLP = WHSMixedLicensePlateReceipt::find(_receiptId, true);

        if (!mixedLP.RecId)
        {
            InventDim inventDim = InventDim::find(_dimId);

            if (!_containerCode)
            {
                ItemId item = InventTransOrigin::findByInventTransId(_transId).ItemId;

                // If no container code was passed in find default code.
                _containerCode = WHSLicensePlate::getDefaultContainerType(inventDim.LicensePlateId,
                                                                          _menuName,
                                                                          _userId,
                                                                          inventDim.InventLocationId,
                                                                          inventDim.wMSLocationId,
                                                                          item,
                                                                          WHSInventTable::find(item).UOMSeqGroupId,
                                                                          InventTableModule::find(item, ModuleInventPurchSales::Invent).UnitId);
            }

            if (_workTransType == WHSWorkTransType::None)
            {
                _workTransType = WHSRFMenuItemTable::getWorkTransTypeForMixedLP(_menuName, null);
            }

            mixedLP.ReceiptId                = _receiptId;
            mixedLP.LicensePlateId           = inventDim.LicensePlateId;
            mixedLP.CurrentUser              = _userId;
            mixedLP.MenuItemName             = _menuName;
            mixedLP.InventSiteId             = inventDim.InventSiteId;
            mixedLP.InventLocationId         = inventDim.InventLocationId;
            mixedLP.WMSLocationId            = inventDim.wMSLocationId;
            mixedLP.LoadId                   = _loadId;
            mixedLP.ShipmentId               = _shipmentId;
            mixedLP.ContainerTypeCode        = _containerCode;
            mixedLP.WorkTransType			 = _workTransType;
            mixedLP.LastReceivedLineDateTime = DateTimeUtil::getSystemDateTime();



            mixedLP.insert();
        }
        else
        {
            if (mixedLP.ShipmentId
            &&  mixedLP.ShipmentId != _shipmentId)
            {
                mixedLP.ShipmentId = '';
            }

            mixedLP.LastReceivedLineDateTime = DateTimeUtil::getSystemDateTime();
            mixedLP.MenuItemName = _menuName;

            mixedLP.update();
        }

        WHSMixedLicensePlateReceiptLine mixedLPLines = WHSMixedLicensePlateReceiptLine::findOpen(mixedLP.RecId, _dimId, _transId, true);

        if (mixedLPLines.RecId)
        {
            mixedLPLines.InventQty     += _handlingQty;
            mixedLPLines.ReceivedByUser = _userId;
            mixedLPLines.CapturedWeight += _capturedWeight;
            mixedLPLines.update();
        }
        else
        {
            mixedLPLines.InventDimId                = _dimId;
            mixedLPLines.InventTransId              = _transId;
            mixedLPLines.InventTransType			= InventTransOrigin::findByInventTransId(_transId).ReferenceCategory;
            mixedLPLines.InventQty                  = _handlingQty;
            mixedLPLines.ReceivedByUser             = _userId;
            mixedLPLines.MixedLPReceivingTable      = mixedLP.RecId;
            mixedLPLines.LineNum                    = WHSMixedLicensePlateReceiptLine::getNextLineNumber(mixedLP.RecId);
            mixedLPLines.CapturedWeight             = _capturedWeight;
            mixedLPLines.insert();
        }

        ttsCommit;

        return mixedLPLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mixedLPReceiveLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a record for mixed license plate receiving.
    /// </summary>
    /// <param name="_dimId">
    /// The InventDimId to be used.
    /// </param>
    /// <param name="_transId">
    /// The InventTransId to be used.
    /// </param>
    /// <param name="_handlingQty">
    /// The handling quantity being received.
    /// </param>
    /// <param name="_capturedWeight">
    /// The catch weight quantity being received.
    /// </param>
    /// <param name="_receiptId">
    /// The ReceiptId to be used.
    /// </param>
    /// <param name="_userId">
    /// The rf user receiving the record.
    /// </param>
    /// <param name="_menuName">
    /// The rf menu item that is currently being used.
    /// </param>
    /// <param name="_loadId">
    /// The load Id being received against, if using load item receiving method.
    /// </param>
    /// <param name="_shipmentId">
    /// The shipment Id being received against, if all items are on one shipment and using load item receiving method.
    /// </param>
    /// <param name="_containerCode">
    /// The container code of the type of container being received, if applicable.
    /// </param>
    /// <param name="_workTransType">
    /// The type of work being received, if applicable.
    /// </param>
    /// <param name="_itemId">
    /// The item ID being received, if applicable.
    /// </param>
    /// <returns>
    /// The created or updated record.
    /// </returns>
    [Hookable(false)]
    public static WHSMixedLicensePlateReceiptLine mixedLPReceiveLine(
        InventDimId          _dimId,
        InventTransId        _transId,
        InventQty            _handlingQty,
        PdsCWInventQty       _capturedWeight,
        WHSReceiptId         _receiptId,
        WHSUserId            _userId,
        WHSMenuItemName      _menuName,
        WHSLoadId            _loadId,
        WHSShipmentId        _shipmentId,
        WHSContainerTypeCode _containerCode,
        WHSWorkTransType	 _workTransType,
        ItemId               _itemId = '')
    {
        ItemId itemId = _itemId ? _itemId : InventTrans::findTransId(_transId).ItemId;

        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightQuantityLogic(funcName(), itemId, _capturedWeight))
        {
            return WHSMixedLicensePlateReceiptLine::mixedLicensePlateReceiveLine(_dimId, _transId, _handlingQty, _capturedWeight, _receiptId, _userId, _menuName, _loadId, _shipmentId, _containerCode, _workTransType);
        }
        
        return WHSMixedLicensePlateReceiptLine::receiveLine(_dimId, _transId, _handlingQty, _receiptId, _userId, _menuName, _loadId, _shipmentId, _containerCode, _workTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mixedLPReceiveLineForDeferredReceiving</Name>
				<Source><![CDATA[
    internal static WHSMixedLicensePlateReceiptLine mixedLPReceiveLineForDeferredReceiving(
        InventDimId          _dimId,
        InventTransId        _transId,
        InventQty            _handlingQty,
        PdsCWInventQty       _capturedWeight,
        WHSReceiptId         _receiptId,
        WHSUserId            _userId,
        WHSMenuItemName      _menuName,
        WHSLoadId            _loadId,
        WHSShipmentId        _shipmentId,
        WHSContainerTypeCode _containerCode,
        WHSWorkTransType	 _workTransType,
        ItemId               _itemId = '',
        InventHandlingQty    _totalReceiptQty = 0)
    {
        ttsbegin;

        WHSMixedLicensePlateReceiptLine ret = WHSMixedLicensePlateReceiptLine::mixedLPReceiveLine(
            _dimId,
            _transId,
            _handlingQty,
            _capturedWeight,
            _receiptId,
            _userId,
            _menuName,
            _loadId,
            _shipmentId,
            _containerCode,
            _workTransType,
            _itemId);

        if (ret)
        {
            ret.LoadId = _loadId;
            ret.InventUnitizeQty = _totalReceiptQty;
            ret.update();
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        WHSMixedLicensePlateReceipt::throwErrorIfMixedLPIsProcessing(this.MixedLPReceivingTable);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        WHSMixedLicensePlateReceipt::throwErrorIfMixedLPIsProcessing(this.MixedLPReceivingTable);

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:MixedLPLineDoc</DeveloperDocumentation>
	<Label>@WAX:MixedLPReceivingLines</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RefRecIdTransIdDimIdIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReceivedByUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MixedLPReceivingTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CapturedWeight</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Line</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MixedLPReceivingTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReceivedByUser</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WHSUserId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CapturedWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCapturedWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventUnitizeQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefRecIdLineIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>MixedLPReceivingTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefRecIdTransIdDimIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MixedLPReceivingTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>InventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventTransType</Name>
					<SourceEDT>InventTransType</SourceEDT>
					<Field>InventTransType</Field>
					<ValueStr>InventTransType::Purch</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSMixedLicensePlateReceipt</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSMixedLicensePlateReceipt</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MixedLPReceivingTable</Name>
					<Field>MixedLPReceivingTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkUser</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSWorkUser</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReceivedByUser</Name>
					<SourceEDT>WHSUserId</SourceEDT>
					<Field>ReceivedByUser</Field>
					<RelatedField>UserId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReturnLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventTransType</Name>
					<Field>InventTransType</Field>
					<ValueStr>InventTransType::Sales</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransferLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTransferLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventTransType</Name>
					<Field>InventTransType</Field>
					<ValueStr>InventTransType::TransferOrderShip</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLoadTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadId</Name>
					<Field>LoadId</Field>
					<RelatedField>LoadId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>