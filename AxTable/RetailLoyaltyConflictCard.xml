<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLoyaltyConflictCard</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailLoyaltyConflictCard extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAdjustment</Name>
				<Source><![CDATA[
    private static RetailLoyaltyAdjustmentId createAdjustment(RetailLoyaltyConflictCardPointTrans _loyaltyConflictCardTrans, RetailLoyaltyCardNumber _cardNumber)
    {
        RetailLoyaltyCardRewardPointAdjustment rewardPointAdjustment;

        rewardPointAdjustment.skipDatabaseLog(true);
        rewardPointAdjustment.skipDataMethods(true);
        rewardPointAdjustment.skipEvents(true);

        rewardPointAdjustment.initValue();
        rewardPointAdjustment.AdjustmentId = numberSeq::newGetNumFromId(RetailParameters::numRefLoyaltyAdjustmentId().NumberSequenceId).num();
        rewardPointAdjustment.TransactionDate = _loyaltyConflictCardTrans.EntryDate;
        rewardPointAdjustment.AdjustmentStatus = RetailLoyaltyAdjustmentStatusBase::Posted;
        rewardPointAdjustment.RewardPointAmountQty = _loyaltyConflictCardTrans.RewardPointAmountQty;
        rewardPointAdjustment.Comment = _loyaltyConflictCardTrans.Comment;

        rewardPointAdjustment.LoyaltyCard = RetailLoyaltyCard::findByCardNumber(_cardNumber).RecId;
        rewardPointAdjustment.RewardPoint = _loyaltyConflictCardTrans.RewardPoint;
        rewardPointAdjustment.Affiliation = _loyaltyConflictCardTrans.Affiliation;

        rewardPointAdjustment.insert();

        return rewardPointAdjustment.AdjustmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>migrateConflictCards</Name>
				<Source><![CDATA[
    /// <summary>
    /// Migrates conflict cards and conflict card trans.
    /// </summary>
    /// <param name="_resolvingCardList">
    /// This is a list of candidate conflict cards for resolving
    /// </param>
    public static void migrateConflictCards(List _resolvingCardList)
    {
        RetailLoyaltyConflictCard conflictCard, innerConflictCard;
        RetailLoyaltyConflictCardPointTrans conflictCardTrans;
        ListEnumerator resolvingCardListEnumerator;
        RetailLoyaltyCard loyaltyCard;
        RetailLoyaltyCardTier loyaltyCardTier;
        RetailLoyaltyCardRewardPointTrans newLoyaltyCardTrans;
        RetailSalesTable salesTable;
        RetailTransactionTable transTable;
        RetailTransactionPaymentTrans paymentTrans;
        RetailLoyaltyConflictCardSalesTable conflictCardSalesTable;
        date minDate = DateTimeUtil::date(DateTimeUtil::minValue());
        resolvingCardListEnumerator = _resolvingCardList.getEnumerator();

        ttsBegin;
        while (resolvingCardListEnumerator.moveNext())
        {
            conflictCard = resolvingCardListEnumerator.current();
            select forUpdate innerConflictCard
                where innerConflictCard.Company ==  conflictCard.Company
                    && innerConflictCard.CardNumber == conflictCard.CardNumber
                    && innerConflictCard.IsMigrated == NoYes::No;

            loyaltyCard.clear();
            loyaltyCard.CardNumber = conflictCard.NewCardNumber;
            loyaltyCard.Party = conflictCard.Party;
            loyaltyCard.CardTenderType = conflictCard.CardTenderType;
            loyaltyCard.insert();

            loyaltyCardTier.clear();
            loyaltyCardTier.Affiliation = conflictCard.Affiliation;
            loyaltyCardTier.LoyaltyCard = loyaltyCard.recId;
            loyaltyCardTier.LoyaltyTier = 0;
            loyaltyCardTier.ValidFrom = minDate;
            loyaltyCardTier.ValidTo = maxDate();
            loyaltyCardTier.insert();

            // Update card reference on the trans table
            /*
            RetailSalesTable.RetailLoyaltyCardId [We replaced RetailLoyaltyCardId field (string) with RetailLoyaltyCard(recid)]
            RetailTransactionTable.LoyaltyCardId
            RetailTransactionLoyaltyPointsTrans.CardNumber
            RetailTransactionPaymentTrans.LoyaltyCardId
            */
            salesTable.skipDataMethods(true);
            salesTable.skipDatabaseLog(true);
            salesTable.skipEvents(true);
            update_recordSet crossCompany salesTable
            setting RetailLoyaltyCard = loyaltyCard.RecId
                join conflictCardSalesTable
                where conflictCardSalesTable.ConflictCard == conflictCard.RecId
                    && conflictCardSalesTable.RetailSalesTable == salesTable.RecId
                    && salesTable.dataAreaId == conflictCard.Company;

            transTable.skipDataMethods(true);
            transTable.skipDatabaseLog(true);
            transTable.skipEvents(true);
            update_recordSet crossCompany transTable
            setting loyaltyCardId = conflictCard.NewCardNumber
                where transTable.loyaltyCardId == conflictCard.CardNumber
                    && transTable.dataAreaId == conflictCard.Company;

            paymentTrans.skipDataMethods(true);
            paymentTrans.skipDatabaseLog(true);
            paymentTrans.skipEvents(true);
            update_recordSet crossCompany paymentTrans
            setting loyaltyCardId = conflictCard.NewCardNumber
                where paymentTrans.loyaltyCardId == conflictCard.CardNumber
                    && paymentTrans.dataAreaId == conflictCard.Company;

            while select affiliation
                    ,cardnumber
                    ,channel
                    ,Comment
                    ,custaccount
                    ,custaccountdataareaid
                    ,entrydate
                    ,entrytime
                    ,entrytype
                    ,expirationdate
                    ,loyaltytier
                    ,loyaltytransdataareaid
                    ,loyaltytranslinenum
                    ,receiptid
                    ,rewardpoint
                    ,rewardpointamountqty
                    ,staffid
                    ,storeid
                    ,terminalid
                    ,transactionid
                from conflictCardTrans
                where conflictCardTrans.CardNumber == conflictCard.CardNumber
                    && conflictCardTrans.loyaltyTransDataAreaId == conflictCard.Company
            {
                newLoyaltyCardTrans.clear();
                newLoyaltyCardTrans.Affiliation = conflictCardTrans.Affiliation;
                newLoyaltyCardTrans.cardnumber = conflictCard.NewCardNumber;
                newLoyaltyCardTrans.channel = conflictCardTrans.Channel;
                newLoyaltyCardTrans.custaccount = conflictCardTrans.CustAccount;
                newLoyaltyCardTrans.custaccountdataareaid = conflictCardTrans.CustAccountDataAreaId;
                newLoyaltyCardTrans.entrydate = conflictCardTrans.EntryDate;
                newLoyaltyCardTrans.entrytime = conflictCardTrans.EntryTime;
                newLoyaltyCardTrans.entrytype = conflictCardTrans.EntryType;
                newLoyaltyCardTrans.expirationdate = conflictCardTrans.ExpirationDate;
                newLoyaltyCardTrans.loyaltytier = conflictCardTrans.LoyaltyTier;
                newLoyaltyCardTrans.loyaltytransdataareaid = conflictCardTrans.loyaltyTransDataAreaId;
                newLoyaltyCardTrans.loyaltytranslinenum = conflictCardTrans.LoyaltyTransLineNum;
                newLoyaltyCardTrans.receiptid = conflictCardTrans.ReceiptId;
                newLoyaltyCardTrans.rewardpoint = conflictCardTrans.RewardPoint;
                newLoyaltyCardTrans.rewardpointamountqty = conflictCardTrans.RewardPointAmountQty;
                newLoyaltyCardTrans.staffid = conflictCardTrans.StaffId;
                newLoyaltyCardTrans.storeid = conflictCardTrans.storeId;
                newLoyaltyCardTrans.terminalid = conflictCardTrans.terminalId;
                newLoyaltyCardTrans.transactionid = conflictCardTrans.transactionId;
                newLoyaltyCardTrans.LoyaltyTransactionType = RetailLoyaltyTransactionType::RetailTransaction;

                if (conflictCardTrans.EntryType == RetailLoyaltyRewardPointEntryType::Adjust)
                {
                    newLoyaltyCardTrans.AdjustmentId = RetailLoyaltyConflictCard::createAdjustment(conflictCardTrans, conflictCard.NewCardNumber);
                    newLoyaltyCardTrans.LoyaltyTransactionType = RetailLoyaltyTransactionType::LoyaltyAdjustment;
                    newLoyaltyCardTrans.transactionid = '';
                }

                RetailLoyaltyManager::PostLoyaltyCardRewardPointTrans(newLoyaltyCardTrans, true);
            }

            innerConflictCard.IsMigrated = NoYes::Yes;
            innerConflictCard.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@REX4161347</DeveloperDocumentation>
	<Label>@REX4160123</Label>
	<TitleField1>CardNumber</TitleField1>
	<TitleField2>Party</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>CommerceCustomers</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CardNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardTenderType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS14437</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CardNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardTenderType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsMigrated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewCardNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Affiliation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Affiliation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CardNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailLoyaltyCardNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CardTenderType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLoyaltyTenderType</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>RetailLoyaltyTenderTypeBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Company</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsMigrated</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Retail:Migrated</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NewCardNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLoyaltyCardNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Party</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DirPartyRecId</ExtendedDataType>
			<Label>@SYS27874</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPartyTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailAffiliation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>RetailAffiliation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Affiliation</Name>
					<Field>Affiliation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>