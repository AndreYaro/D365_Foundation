<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCSubComponent</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCSubComponent extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        PCSubComponentTranslation   translation;
        PCTemplateComponent         templateComponent;
        PCSubComponentRequirement   subComponentRequirement;
        PCSubComponentControl       subComponentControl;

        _visitor.visitStart(this);

        // visit child component
        PCClass::find(this.ChildComponentClass).accept(_visitor);

        // visit translations
        while select translation
        where translation.SubComponent == this.RecId
        {
            translation.accept(_visitor);
        }

        while select subComponentControl
            where subComponentControl.SubComponent == this.RecId
        {
            subComponentControl.accept(_visitor);
        }

        select firstonly templateComponent
        where templateComponent.LegalEntity == CompanyInfo::current()
        join    RecId from subComponentRequirement
        where   subComponentRequirement.TemplateComponent   == templateComponent.RecId
        &&      subComponentRequirement.SubComponent        == this.RecId;

        if (templateComponent.RecId != 0)
        {
            templateComponent.accept(_visitor);
        }

        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteComponentControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes any associate component control.
    /// </summary>
    private void deleteComponentControl()
    {
        PCComponentControlSubComponent  componentControlSubComponent;

        ttsBegin;

        delete_from componentControlSubComponent
            where componentControlSubComponent.SubComponent == this.RecId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the sub component.
    /// </summary>
    /// <param name="_newParentComponentClass">
    /// A record ID of <c>PCClass</c> record.
    /// </param>
    /// <param name="_duplicatedComponentsMap">
    /// A map containing the duplicated records related to components.
    /// </param>
    /// <param name="_duplicatedAttributesMap">
    /// A map containing the duplicated records related to attributes.
    /// </param>
    /// <remarks>
    /// This methods is used with the duplicate product model feature.
    /// The argument duplicated attributes map has been added.
    /// </remarks>
    public void duplicate(RefRecId _newParentComponentClass, Map _duplicatedComponentsMap, Map _duplicatedAttributesMap)
    {
        PCSubComponent              duplicate;
        PCClass                     component;
        PCSubComponentRequirement   subComponentRequirement;
        LanguageId                  systemLanguage = SystemParameters::getSystemLanguageId();

        PCSubComponentControl           subComponentControl;
        PCSubComponentControl           dupSubComponentControl;
        PCSubComponentControlConstraint dupSubComponentControlConstraint;
        PCExpressionConstraint          subComponentControlExpression;
        PCExpressionConstraint          dupSubComponentControlExpression;

        // copy values
        duplicate.data(this);

        // find child component
        component = PCClass::find(this.ChildComponentClass);

        // duplicate child component
        duplicate.ChildComponentClass = component.duplicate(_duplicatedComponentsMap, _duplicatedAttributesMap);

        // set new parent reference
        duplicate.ParentComponentClass = _newParentComponentClass;

        duplicate.insert();

        // check if requirement exists for the sub comopnent
        subComponentRequirement = PCSubComponentRequirement::findBySubComponent(this.RecId);

        if (subComponentRequirement.RecId != 0)
        {
            // duplicate requirement
            subComponentRequirement.duplicate(duplicate.RecId, _newParentComponentClass);
        }

        // duplicate modifier
        subComponentControl = PCSubComponentControl::findBySubComponentAndModifierType(this.RecId, PCSubComponentModifierType::Hidden);

        if (subComponentControl.RecId != 0)
        {
            dupSubComponentControl.data(subComponentControl);
            dupSubComponentControl.SubComponent = duplicate.RecId;
            dupSubComponentControl.insert();

            subComponentControlExpression = subComponentControl.getConstraint();
            if (subComponentControlExpression.RecId != 0)
            {
                dupSubComponentControlExpression.data(subComponentControlExpression);
                dupSubComponentControlExpression.insert();

                dupSubComponentControlConstraint.SubComponentControl    = dupSubComponentControl.RecId;
                dupSubComponentControlConstraint.ExpressionConstraint   = dupSubComponentControlExpression.RecId;
                dupSubComponentControlConstraint.insert();
            }
        }

        // duplicate translations
        this.duplicateTranslations(duplicate.RecId);

        // sync description of translation in the system language
        PCSubComponentTranslation::createOrUpdateTranslation(duplicate.RecId, duplicate.Name, PCSubComponentTranslation::findBySubComponentAndLanguage(this.RecId, systemLanguage).Description,systemLanguage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateTranslations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the translations that are related to the sub component.
    /// </summary>
    /// <param name="_duplicateSubComponent">
    /// The record ID of the duplicated sub component.
    /// </param>
    private void duplicateTranslations(RefRecId _duplicateSubComponent)
    {
        PCSubComponentTranslation  duplicateTranslation;
        PCSubComponentTranslation  originalTranslation;

        ttsbegin;
        while select originalTranslation
            where originalTranslation.SubComponent == this.RecId
        {
            duplicateTranslation.clear();
            duplicateTranslation.data(originalTranslation);
            duplicateTranslation.SubComponent = _duplicateSubComponent;
            duplicateTranslation.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item ID that is associated with the current subcomponent.
    /// </summary>
    /// <returns>
    /// The item ID that is related to the current subcomponent.
    /// </returns>
    /// <remarks>
    /// This display method is used in the <c>PCProductConfigurationModelDetails</c> form.
    /// </remarks>
    public display ItemId getItemId()
    {
        PCSubComponentRequirement   subComponentRequirement;
        PCTemplateComponent         templateComponent;
        PCTemplate                  template;
        PCTemplateAttribute         templateAttribute;
        PCTemplateAttributeBinding  attributeBinding;
        PCTemplateConstant          attributeConstantBinding;
        PCTemplateCategoryAttribute attributeAttributeBinding;
        EcoResTextValue             textValue;
        EcoResCategoryAttribute     categoryAttribute;
        EcoResAttribute             attribute;
        PCClass                     component;
        FieldId                     bomFieldId = fieldNum(BOM, ItemId);
        TableId                     bomTableId = tableNum(BOM);

        select firstonly attributeBinding
            join RecId from templateAttribute
            where   templateAttribute.RecId             == attributeBinding.TemplateAttribute
            &&      templateAttribute.ReferencedFieldId == bomFieldId
                join    RecId from template
                where   template.RecId              == templateAttribute.Template
                &&      template.ReferencedTableId  == bomTableId
                join    RecId from templateComponent
                where   templateComponent.RecId             == attributeBinding.TemplateComponent
                &&      templateComponent.LegalEntity       == CompanyInfo::current()
                &&      templateComponent.Requirement       == PCRequirement::SubComponent
                &&      templateComponent.ComponentClass    == this.ParentComponentClass
                    join    RecId from subComponentRequirement
                    where   subComponentRequirement.TemplateComponent   == templateComponent.RecId
                    &&      subComponentRequirement.SubComponent        == this.RecId;

        if (attributeBinding)
        {
            if (attributeBinding.getInstanceRelationType() == tableStr(PCTemplateConstant))
            {
                select  firstonly RecId, TextValue from textValue
                join    firstonly RecId, ConstantValue from attributeConstantBinding
                where   attributeConstantBinding.ConstantValue == textValue.RecId
                &&      attributeConstantBinding.RecId == attributeBinding.RecId;

                return textValue.TextValue;
            }
            else
            {
                select  firstonly RecId  from categoryAttribute
                join    firstonly RecId, Name from attribute
                where   categoryAttribute.Attribute == attribute.RecId
                join    firstonly RecId from component
                where   component.RecId == this.ParentComponentClass
                &&      categoryAttribute.Category  == component.RecId
                join    firstonly RecId, CategoryAttribute from attributeAttributeBinding
                where   attributeAttributeBinding.CategoryAttribute == categoryAttribute.RecId
                &&      attributeAttributeBinding.RecId == attributeBinding.RecId;

                return attribute.Name;
            }
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSetComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the child component that is associated with the current subcomponent relation.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to set the child component.
    /// </param>
    /// <param name="_name">
    /// The current name of the component that is to be associated with this version; optional.
    /// </param>
    /// <returns>
    /// The ID of the product that is currently associated with the current version.
    /// </returns>
    /// <remarks>
    /// This edit method is used in the <c>PCProductModelVersion</c> form.
    /// </remarks>
    public edit EcoResCategoryName getSetComponent(boolean _set, EcoResCategoryName _name)
    {
        PCClass         childClass;
        PCClass         parentClass;

        if (_set)
        {
            childClass = PCClass::findByName(_name);
            parentClass = PCClass::find(this.ParentComponentClass);

            if (!PCModelingLibrary::validateSubComponent(parentClass, childClass, this))
            {
                error("@SYS301161");
                error("@GLS180416");
                return '';
            }
            else
            {
                this.ChildComponentClass = childClass.RecId;
                return childClass.Name;
            }
        }
        else
        {
            if (!this.ChildComponentClass)
            {
                return '';
            }

            childClass = PCClass::find(this.ChildComponentClass);
            return childClass.Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTranslatedName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the translated name that is associated with the sub component.
    /// </summary>
    /// <returns>
    /// A <c>Name</c> value.
    /// </returns>
    public Name getTranslatedName()
    {
        PCSubComponentTranslation  subComponentTranslation = PCSubComponentTranslation::findBySubComponentAndLanguage(this.RecId, LanguageTable::defaultLanguage()) ;

        return subComponentTranslation.Name != '' ? subComponentTranslation.Name : this.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        ttsBegin;

        if (this.ChildComponentClass != this.orig().ChildComponentClass)
        {
            this.deleteComponentControl();
        }

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
        public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(PCSubComponent, ChildComponentClass):
                if (!PCModelingLibrary::validateSubComponent(
                        PCClass::find(this.ParentComponentClass),
                        PCClass::find(this.ChildComponentClass), this))
                {
                    this.ChildComponentClass = 0;
                    setPrefix("@SYS301161");
                    return checkFailed("@GLS180416");
                }
            break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();
        ret = ret && PCModelingLibrary::validateOMLIdentifier(this.SolverName, true);
        ret = ret && PCAttributePathFacade::validateSubComponentChanges(this.RecId, this.ParentComponentClass, this.ChildComponentClass, this.orig().ChildComponentClass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>PCSubComponent</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCSubComponent::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PCSubComponent</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCSubComponent</c> table; otherwise, an empty record.
    /// </returns>
    public static PCSubComponent find(RefRecId _recId, boolean _forupdate = false)
    {
        PCSubComponent record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNameAndParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a sub component by its name and the record ID of its parent component.
    /// </summary>
    /// <param name="_subComponentName">
    /// A sub component name.
    /// </param>
    /// <param name="_parentComponent">
    /// A record ID of a component.
    /// </param>
    /// <param name="_selectForUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A sub component record buffer.
    /// </returns>
    public static PCSubComponent findByNameAndParent(PCName _subComponentName, RefRecId _parentComponent, boolean _selectForUpdate = true)
    {
        PCSubComponent subComponent;

        subComponent.selectForUpdate(_selectForUpdate);

        select firstonly subComponent
        where   subComponent.Name                   == _subComponentName
        &&      subComponent.ParentComponentClass   == _parentComponent;

        return subComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS153053</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS153052</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>ParentComponentClass</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>NameParent</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PCComponentInstanceSubComponent</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PCComponentInstanceSubComponent</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PCSubComponentRequirement</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PCSubComponentRequirement</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentComponentClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChildComponentClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParentComponentClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentComponentClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChildComponentClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SolverName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ChildComponentClass</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS129746</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCSubComponentName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentComponentClass</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS81227</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SolverName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCSolverName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PCSubComponentType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameParent</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ParentComponentClass</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SolverNameParent</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ParentComponentClass</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SolverName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ChildComponentClass</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PCClass</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ComponentContained</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ComponentContainer</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ChildComponentClass</Name>
					<Field>ChildComponentClass</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ParentComponentClass</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PCClass</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ComponentContainer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ComponentContained</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentComponentClass</Name>
					<Field>ParentComponentClass</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>