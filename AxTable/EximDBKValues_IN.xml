<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximDBKValues_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EximDBKValues_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && EximDBKValues_IN::checkDBKSchemesLine(this.CustomsTariffCodeTable,
                                                         this.CenvatStatus,
                                                         this.RateType,
                                                         this.ValidFrom,
                                                         this.ValidTo,
                                                         this.dbkRatesRecId))
        {
            ret = checkFailed(strfmt("@SYS75284", tablepname(EximDBKSchemesLine_IN)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean                     ret;
        CustomsTariffCodeTable_IN   customsTariffCodeTable;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(EximDBKValues_IN, CustomsTariffCodeTable) :
                    customsTariffCodeTable = CustomsTariffCodeTable_IN::find(this.CustomsTariffCodeTable);

                    if (this.CustomsTariffCodeTable && customsTariffCodeTable.Direction != Direction_IN::Export)
                    {
                        ret = checkFailed(strfmt("@GLS5200", customsTariffCodeTable.TariffCode, Direction_IN::Export));
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if ((ret && this.ValidFrom && ! this.ValidTo)
            || (ret && ! this.ValidFrom && this.ValidTo))
        {
            ret = checkFailed("@SYS22087");
        }

        if (ret && this.ValidFrom > this.ValidTo)
        {
            ret = checkFailed("@SYS16982");
        }

        if (ret &&  !this.RecId
            && this.ValidFrom
            && EximDBKValues_IN::existDataWithoutDate(this.CustomsTariffCodeTable,
                                                      this.CenvatStatus,
                                                      this.RateType,
                                                      this.dbkRatesRecId))
        {
            ret = checkFailed("@SYS22088");
        }

        if (ret
            && (!EximDBKValues_IN::existPeriod(this.CustomsTariffCodeTable,
                                              this.CenvatStatus,
                                              this.RateType,
                                              this.ValidFrom,
                                              this.ValidTo,
                                              this.dbkRatesRecId,
                                              this.RecId))
            && (EximDBKValues_IN::existPeriodOverlap(this.CustomsTariffCodeTable,
                                                     this.CenvatStatus,
                                                     this.RateType,
                                                     this.ValidFrom,
                                                     this.ValidTo,
                                                     this.dbkRatesRecId,
                                                     this.RecId)))
        {
            ret = checkFailed("@SYS94867");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDBKSchemesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if EximDBKSchemesLine_IN record exists for specified CustomsTariffCodeTable_IN RecId,EximDBKCenvatStatus_IN, EximDBKRateType_IN, EximDbkRates_IN RecId, FromDateTime and ToDateTime.
    /// </summary>
    /// <param name="_customsTariffCodeTableRecId">CustomsTariffCodeTable_IN RecId</param>
    /// <param name="_cenvatStatus">EximDBKCenvatStatus_IN</param>
    /// <param name="_rateType">EximDBKRateType_IN</param>
    /// <param name="_fromDateTime">FromDateTime</param>
    /// <param name="_toDateTime">ToDateTime</param>
    /// <param name="_dbkRatesRecId">EximDBKRates_IN table RecId</param>
    /// <returns>true if EximDBKSchemesLine_IN record is found otherwise, false</returns>
    private static boolean checkDBKSchemesLine(
        RefRecId               _customsTariffCodeTableRecId,
        EximDBKCenvatStatus_IN _cenvatStatus,
        EximDBKRateType_IN     _rateType,
        FromDateTime           _fromDateTime,
        ToDateTime             _toDateTime,
        RefRecId               _dbkRatesRecId)
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        EximShippingBillTrans_IN    eximShippingBillTrans;
        EximProductGroupTable_IN    productGroupTable;
        EximDBKSchemesLine_IN       dbkSchemesLine;
        EximDBKRates_IN             dbkRates;
        boolean                     ret;

        TransDate convertDateTime2Date(TransDateTime _transDateTime)
        {
            return DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_transDateTime, DateTimeUtil::getUserPreferredTimeZone()));
        }

        select firstonly ShippingBillDate, RecId
            from customsShippingBillTrans
               where customsShippingBillTrans.ShippingBillDate >= convertDateTime2Date(_fromDateTime)
               && customsShippingBillTrans.ShippingBillDate    <= convertDateTime2Date(_toDateTime)
            join CustomsTariffCodeTable, dbkCenvatStatus, dbkRateType
                from eximShippingBillTrans
                where eximShippingBillTrans.CustomsTariffCodeTable  == _customsTariffCodeTableRecId
                   && eximShippingBillTrans.dbkCenvatStatus         == _cenvatStatus
                   && eximShippingBillTrans.dbkRateType             == _rateType
                   && eximShippingBillTrans.ShippingBillTransRecId  == customsShippingBillTrans.RecId
            join ProductGroup, RecId
                from productGroupTable
                    where productGroupTable.RecId                   == eximShippingBillTrans.EximProductGroupTable
            join ProductGroupTableRecId, RecId
                from dbkRates
                    where productGroupTable.RecId                   == dbkRates.ProductGroupTableRecId
                       && dbkRates.RecId                            == _dbkRatesRecId
            join ShippingBillTransRecId
                from dbkSchemesLine
                    where dbkSchemesLine.ShippingBillTransRecId     == customsShippingBillTrans.RecId;

        if (dbkSchemesLine.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if EximDBKValues_IN record exists.
    /// </summary>
    /// <param name="_customsTariffCodeTableRecId">CustomsTariffCodeTable_IN recId</param>
    /// <param name="_cenvatStatus">EximDBKCenvatStatus_IN</param>
    /// <param name="_rateType">EximDBKRateType_IN</param>
    /// <param name="_dateTime">utcDateTime</param>
    /// <param name="_dbkRatesRecId">EximDBKRates_IN recId</param>
    /// <returns>true if EximDBKValues_IN record is found otherwise, false</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(
        RefRecId               _customsTariffCodeTableRecId,
        EximDBKCenvatStatus_IN _cenvatStatus,
        EximDBKRateType_IN     _rateType,
        utcDateTime            _dateTime,
        RefRecId               _dbkRatesRecId)
    {
        return _dbkRatesRecId
            && _customsTariffCodeTableRecId
            && (select firstonly ValidTimeState(_dateTime) RecId from eximDBKValues_IN
                    where eximDBKValues_IN.dbkRatesRecId            == _dbkRatesRecId
                       && eximDBKValues_IN.CustomsTariffCodeTable   == _customsTariffCodeTableRecId
                       && eximDBKValues_IN.CenvatStatus             == _cenvatStatus
                       && eximDBKValues_IN.RateType                 == _rateType).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDataWithoutDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if data without date existed
    /// </summary>
    /// <param name="_tariffCode">
    /// The tariffcode
    /// </param>
    /// <param name="_cenvatStatus">
    /// The cenvat satuts
    /// </param>
    /// <param name="_rateType">
    /// The rate type
    /// </param>
    /// <param name="_dbkRatesRecId">
    /// The rates ref
    /// </param>
    /// <returns>
    /// True, if it is existed
    /// </returns>
    private static boolean existDataWithoutDate(
        RefRecId   _tariffCode,
        EximDBKCenvatStatus_IN _cenvatStatus,
        EximDBKRateType_IN     _rateType,
        EximDBKRatesRecId_IN   _dbkRatesRecId)
    {
        return _dbkRatesRecId
            && _tariffCode
            && (select firstonly RecId from eximDBKValues_IN
                    where eximDBKValues_IN.dbkRatesRecId == _dbkRatesRecId
                       && eximDBKValues_IN.CustomsTariffCodeTable    == _tariffCode
                       && eximDBKValues_IN.CenvatStatus  == _cenvatStatus
                       && eximDBKValues_IN.RateType      == _rateType
                       && !eximDBKValues_IN.ValidFrom
                       && !eximDBKValues_IN.ValidTo).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if period existed
    /// </summary>
    /// <param name="_tariffCode">
    /// The tariffcode
    /// </param>
    /// <param name="_cenvatStatus">
    /// The cenvat satuts
    /// </param>
    /// <param name="_rateType">
    /// The rate type
    /// </param>
    /// <param name="_fromDateTime">
    /// The from date
    /// </param>
    /// <param name="_toDateTime">
    /// The to Date
    /// </param>
    /// <param name="_dbkRatesRecId">
    /// The rates ref
    /// </param>
    /// <param name="_recId">
    /// The recId
    /// </param>
    /// <returns>
    /// True, if it is existed
    /// </returns>
    private static boolean existPeriod(
        RefRecId   _tariffCode,
        EximDBKCenvatStatus_IN _cenvatStatus,
        EximDBKRateType_IN     _rateType,
        FromDateTime           _fromDateTime,
        ToDateTime             _toDateTime,
        EximDBKRatesRecId_IN   _dbkRatesRecId,
        RefRecId               _recId)
    {
        return _dbkRatesRecId
            && _tariffCode
            && (select firstonly RecId from eximDBKValues_IN
                    where eximDBKValues_IN.dbkRatesRecId   == _dbkRatesRecId
                       && eximDBKValues_IN.CustomsTariffCodeTable      == _tariffCode
                       && eximDBKValues_IN.CenvatStatus    == _cenvatStatus
                       && eximDBKValues_IN.RateType        == _rateType
                       && eximDBKValues_IN.RecId           != _recId
                       && (!eximDBKValues_IN.ValidFrom
                       ||(eximDBKValues_IN.ValidFrom    == _fromDateTime
                       && eximDBKValues_IN.ValidTo      == _toDateTime))).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPeriodOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if period overlap
    /// </summary>
    /// <param name="_tariffCode">
    /// The tariffcode
    /// </param>
    /// <param name="_cenvatStatus">
    /// The cenvat satuts
    /// </param>
    /// <param name="_rateType">
    /// The rate type
    /// </param>
    /// <param name="_fromDateTime">
    /// The from date
    /// </param>
    /// <param name="_toDateTime">
    /// The to Date
    /// </param>
    /// <param name="_dbkRatesRecId">
    /// The rates ref
    /// </param>
    /// <param name="_recId">
    /// The recId
    /// </param>
    /// <returns>
    /// True, if it overlaps
    /// </returns>
    private static boolean existPeriodOverlap(
        RefRecId   _tariffCode,
        EximDBKCenvatStatus_IN _cenvatStatus,
        EximDBKRateType_IN     _rateType,
        FromDateTime           _fromDateTime,
        ToDateTime             _toDateTime,
        EximDBKRatesRecId_IN   _dbkRatesRecId,
        RefRecId               _recId)
    {
        boolean          ret;
        EximDBKValues_IN dbkValues;

        if (_dbkRatesRecId && _tariffCode)
        {
            while select ValidFrom, ValidTo
                from  dbkValues
                where dbkValues.CustomsTariffCodeTable    == _tariffCode
                   && dbkValues.CenvatStatus  == _cenvatStatus
                   && dbkValues.RateType      == _rateType
                   && dbkValues.dbkRatesRecId == _dbkRatesRecId
                   && dbkValues.RecId         != _recId
            {
                if (!_fromDateTime || !_toDateTime)
                {
                    ret = true;
                }

                if (_fromDateTime      >= dbkValues.ValidFrom
                    && _fromDateTime   <= dbkValues.ValidTo
                    || _toDateTime     >= dbkValues.ValidFrom
                    && _toDateTime     <= dbkValues.ValidTo)
                {
                    ret = true;
                }

                if (dbkValues.ValidFrom    >= _fromDateTime
                    && dbkValues.ValidFrom <= _toDateTime
                    || dbkValues.ValidTo   >= _fromDateTime
                    && dbkValues.ValidTo   <= _toDateTime)
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximDBKValues_IN table for the specified id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing EximDBKValues_IN table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximDBKValues_IN find(
        RefRecId            _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        EximDBKValues_IN    eximDBKValues;

        eximDBKValues.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            eximDBKValues.concurrencyModel(_concurrencyModel);
        }

        select firstonly eximDBKValues
            where eximDBKValues.RecId == _recId;

        return eximDBKValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTariffCodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximDBKValues_IN table for the specified id.
    /// </summary>
    /// <param name="_customsTariffCodeTableRecId">CustomsTariffCodeTable_IN recId</param>
    /// <param name="_cenvatStatus">EximDBKCenvatStatus_IN</param>
    /// <param name="_rateType">EximDBKRateType_IN</param>
    /// <param name="_dateTime">UtcDateTime</param>
    /// <param name="_dbkRatesRecId">EximDBKRates_IN recId</param>
    /// <param name="_forUpdate">boolean</param>
    /// <returns>EximDBKValues_IN record</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximDBKValues_IN findByTariffCodeId(
        RefRecId               _customsTariffCodeTableRecId,
        EximDBKCenvatStatus_IN _cenvatStatus,
        EximDBKRateType_IN     _rateType,
        UtcDateTime            _dateTime,
        RefRecId               _dbkRatesRecId,
        boolean                _forUpdate = false)
    {
        EximDBKValues_IN dbkValues;

        if (_dbkRatesRecId && _customsTariffCodeTableRecId)
        {
            dbkValues.selectForUpdate(_forUpdate);

            select firstonly ValidTimeState(_dateTime) dbkValues
                where dbkValues.dbkRatesRecId           == _dbkRatesRecId
                   && dbkValues.CustomsTariffCodeTable  == _customsTariffCodeTableRecId
                   && dbkValues.CenvatStatus            == _cenvatStatus
                   && dbkValues.RateType                == _rateType;
        }

        return dbkValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundedOffDrawbackAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds off drawback amount.
    /// </summary>
    /// <param name="_totalAmount">
    /// The total amount.
    /// </param>
    /// <param name="_roundOff">
    /// The round off.
    /// </param>
    /// <param name="_roundOffType">
    /// The round off type.
    /// </param>
    /// <returns>
    /// The instance of the <c>AmountMST</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AmountMST roundedOffDrawbackAmount(
        AmountMST    _totalAmount,
        AmountMST    _roundOff,
        RoundOffType _roundOffType)
    {
        AmountMST amountMST;

        switch (_roundOffType)
        {
            case RoundOffType::Ordinary :
                if (_roundOff)
                {
                    amountMST = round(_totalAmount, _roundOff);
                }
                else
                {
                    amountMST = round(_totalAmount, 0.01);
                }
                break;

            case RoundOffType::RoundDown :
                if (_roundOff)
                {
                    if (_totalAmount >= 0)
                    {
                        amountMST = round(_totalAmount - _roundOff/ 2, _roundOff);
                    }
                    else
                    {
                        amountMST = round(_totalAmount + _roundOff/ 2, _roundOff);
                    }
                }
                else
                {
                    amountMST = trunc(_totalAmount);
                }
                break;

            case RoundOffType::RoundUp :
                if (_roundOff)
                {
                    if (_totalAmount >= 0)
                    {
                        amountMST = round(_totalAmount + _roundOff/ 2.01, _roundOff);
                    }
                    else
                    {
                        amountMST = round(_totalAmount - _roundOff/ 2.01, _roundOff);
                    }
                }
                else
                {
                    if (_totalAmount >= 0)
                    {
                        amountMST = round(_totalAmount + 0.5, 1.0);
                    }
                    else
                    {
                        amountMST = round(_totalAmount - 0.5, 1.0);
                    }
                }
                break;
        }

        return amountMST;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS62433</DeveloperDocumentation>
	<FormRef>EximDBKValues_IN</FormRef>
	<Label>@GLS61973</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CustomsTariffCodeTable</TitleField1>
	<TitleField2>CenvatStatus</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ExportImportIndia</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TariffCodeIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<ValidTimeStateFieldType>UtcDateTime</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CenvatStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RateType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DrawbackRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValueCap</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundingForm</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomsTariffCodeTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CenvatStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RateType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DBKRatesRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DutyDrawback</Name>
			<Label>@GLS61946</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DBKRatesRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DrawbackRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValueCap</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomsTariffCodeTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CenvatStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RateType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS4080</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RoundOff</Name>
			<Label>@SYS8172</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoundOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundingForm</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CenvatStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EximDBKCenvatStatus_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsTariffCodeTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5186</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DBKRatesRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>EximDBKRatesRecId_IN</ExtendedDataType>
			<Label>@SYS58238</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DrawbackRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@GLS61937</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RateType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EximDBKRateType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RoundingForm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RoundOffType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RoundOff</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RoundOff</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Unit</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ValidFromDateTime</ExtendedDataType>
			<Label>@SYS109394</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ValidToDateTime</ExtendedDataType>
			<Label>@SYS109395</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ValueCap</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@GLS61816</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TariffCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<ValidTimeStateMode>Gap</ValidTimeStateMode>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomsTariffCodeTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CenvatStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RateType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DBKRatesRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EximDBKRatesIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DBKRatesRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomsTariffCodeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomsTariffCodeTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustomsTariffCodeTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustomsTariffCodeTable_IN_EximDBKValues_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomsTariffCodeTable</Name>
					<Field>CustomsTariffCodeTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EximDBKRates</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximDBKRates_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EximDBKRates_IN</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>EximDBKRates_IN_EximDBKValues_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DBKRatesRecId</Name>
					<Field>DBKRatesRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UnitOfMeasure_EximDBKValues_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Unit</Name>
					<Field>Unit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>