<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanPriorityConstraint</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanPriorityConstraint extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>BudgetPlanPriorityConstraint</c> table; if not,
    /// an error message is displayed.
    /// </summary>
    /// <param name="_budgetPlanPriorityConstraintRecId">
    /// The record ID of the <c>BudgetPlanPriorityConstraint</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(BudgetPlanPriorityConstraintRecId _budgetPlanPriorityConstraintRecId)
    {
        boolean isExisting = true;

        if (!BudgetPlanPriorityConstraint::exist(_budgetPlanPriorityConstraintRecId))
        {
            isExisting = checkFailed(strFmt(BudgetPlanPriorityConstraint::txtNotExist(), _budgetPlanPriorityConstraintRecId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record in the <c>BudgetPlanPriorityConstraint</c> table exists.
    /// </summary>
    /// <param name="_budgetPlanPriorityConstraintRecId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false .
    /// </returns>
    public static boolean exist(BudgetPlanPriorityConstraintRecId _budgetPlanPriorityConstraintRecId)
    {
        return (BudgetPlanPriorityConstraint::find(_budgetPlanPriorityConstraintRecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanPriorityConstraint</c> table.
    /// </summary>
    /// <param name="_budgetPlanPriorityConstraintRecId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanPriorityConstraint</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanPriorityConstraint find(
        BudgetPlanPriorityConstraintRecId   _budgetPlanPriorityConstraintRecId,
        boolean                             _forupdate = false,
        ConcurrencyModel                    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanPriorityConstraint budgetPlanPriorityConstraint;

        if (_budgetPlanPriorityConstraintRecId)
        {
            budgetPlanPriorityConstraint.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanPriorityConstraint.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanPriorityConstraint
                where budgetPlanPriorityConstraint.RecId == _budgetPlanPriorityConstraintRecId;
        }

        return budgetPlanPriorityConstraint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanPriorityConstraint</c> table.
    /// </summary>
    /// <param name="_budgetPlanPriorityRecId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanPriorityConstraint</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanPriorityConstraint findByPriority(
        BudgetPlanPriorityRecId _budgetPlanPriorityRecId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanPriorityConstraint budgetPlanPriorityConstraint;

        if (_budgetPlanPriorityRecId)
        {
             budgetPlanPriorityConstraint.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanPriorityConstraint.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanPriorityConstraint
                where budgetPlanPriorityConstraint.BudgetPlanPriority == _budgetPlanPriorityRecId;
        }

        return budgetPlanPriorityConstraint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProcessPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanPriorityConstraint</c> table.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_budgetPlanPriorityRecId">
    /// The record ID of the record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanPriorityConstraint</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanPriorityConstraint findByProcessPriority(
        BudgetPlanningProcessRecId  _budgetPlanningProcessRecId,
        BudgetPlanPriorityRecId     _budgetPlanPriorityRecId,
        boolean                     _forupdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanPriorityConstraint budgetPlanPriorityConstraint;

        if (_budgetPlanningProcessRecId && _budgetPlanPriorityRecId)
        {
            budgetPlanPriorityConstraint.selectForUpdate(_forupdate);

            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanPriorityConstraint.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanPriorityConstraint
                where budgetPlanPriorityConstraint.BudgetPlanningProcess == _budgetPlanningProcessRecId
                &&    BudgetPlanPriorityConstraint.BudgetPlanPriority == _budgetPlanPriorityRecId;
        }

        return budgetPlanPriorityConstraint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS70212</DeveloperDocumentation>
	<Label>@GLS70210</Label>
	<SingularLabel>@GLS70211</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>BudgetPlanningProcess</TitleField1>
	<TitleField2>BudgetPlanPriority</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>BudgetPlanPriorityProcessIdx</ClusteredIndex>
	<Modules>Budget</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanningProcess</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningProcessRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanPriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanPriorityRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetPlanPriorityProcessIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetPlanPriority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanningProcess</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BudgetPlanningProcess</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanningProcess</Name>
					<Field>BudgetPlanningProcess</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanPriority</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetPlanPriority</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanPriority</Name>
					<Field>BudgetPlanPriority</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>