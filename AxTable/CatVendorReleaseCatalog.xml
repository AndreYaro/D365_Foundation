<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatVendorReleaseCatalog</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatVendorReleaseCatalog extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (this.Status == CatVendorLegalEntityStatus::OnHold)
        {
            this.Release = NoYes::No;
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record with the given <c>RefRecId</c> _catalogId.
    /// </summary>
    /// <param  name='_catalogId'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_forUpdate'>
    /// An instance of the <c>boolean</c> data type.
    /// </param>
    /// <param  name='_concurrencyModel'>
    /// An instance of the <c>ConcurrencyModel</c> data type.
    /// </param>
    /// <returns>
    /// An instance of the <c>CatVendorReleaseCatalog</c> data type.
    /// </returns>
    static CatVendorReleaseCatalog find( RefRecId            _catalogId,
                                         boolean             _forUpdate = false,
                                         ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        CatVendorReleaseCatalog  catVendorReleaseCatalog;

        if (_catalogId)
        {
            if (_forUpdate)
            {
                catVendorReleaseCatalog.selectForUpdate(_forUpdate);

                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    catVendorReleaseCatalog.concurrencyModel(_concurrencyModel);
                }
            }

            catVendorReleaseCatalog.selectLocked(_forUpdate);

            select firstonly catVendorReleaseCatalog where catVendorReleaseCatalog.Catalog == _catalogId;
        }

        return catVendorReleaseCatalog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCatalog</Name>
				<Source><![CDATA[
    static void updateCatalog(CatVendorCatalog  _catVendorCatalogCurrent)
    {
        CatVendorReleaseCatalog             catVendorReleaseCatalog, oldCatVendorReleaseCatalog;
        CompanyInfo                         companyInfo;
        VendTable                           vendorTable;

        select firstonly RecId from oldCatVendorReleaseCatalog
          where oldCatVendorReleaseCatalog.Catalog == _catVendorCatalogCurrent.RecId;

        while select crosscompany Party,Blocked, DataAreaId
            from vendorTable where vendorTable.Party == _catVendorCatalogCurrent.VendorParty
        {
            companyInfo = vendorTable.companyInfo();
            select RecId, Status
              from catVendorReleaseCatalog
              where  catVendorReleaseCatalog.Catalog == _catVendorCatalogCurrent.RecId
                 && catVendorReleaseCatalog.LegalEntity == companyInfo.RecId
            ;

            if (!catVendorReleaseCatalog)
            {
                catVendorReleaseCatalog.clear();
                catVendorReleaseCatalog.Catalog        = _catVendorCatalogCurrent.RecId;
                catVendorReleaseCatalog.LegalEntity    = companyInfo.RecId;

                if (vendorTable.Blocked == CustVendorBlocked::All)
                {
                    catVendorReleaseCatalog.Status = CatVendorLegalEntityStatus::OnHold;
                }
                else
                {
                    catVendorReleaseCatalog.Status = CatVendorLegalEntityStatus::Active;
                }

                if (oldCatVendorReleaseCatalog && vendorTable.Blocked != CustVendorBlocked::All)
                {
                    catVendorReleaseCatalog.IsChangedOrNew = NoYes::Yes;
                }

                catVendorReleaseCatalog.insert();
            }
            else
            {
                catVendorReleaseCatalog.selectForUpdate(true);
                if (catVendorReleaseCatalog.Status == CatVendorLegalEntityStatus::OnHold &&
                    vendorTable.Blocked != CustVendorBlocked::All)
                {
                    ttsbegin;
                    catVendorReleaseCatalog.Status = CatVendorLegalEntityStatus::Active;
                    catVendorReleaseCatalog.IsChangedOrNew = NoYes::Yes;
                    catVendorReleaseCatalog.update();
                    ttscommit;
                }
                else if (catVendorReleaseCatalog.Status == CatVendorLegalEntityStatus::Active &&
                    vendorTable.Blocked == CustVendorBlocked::All)
                {
                    ttsbegin;
                    catVendorReleaseCatalog.Status = CatVendorLegalEntityStatus::OnHold;
                    catVendorReleaseCatalog.IsChangedOrNew = NoYes::Yes;
                    catVendorReleaseCatalog.update();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>VendCatalogImport</ConfigurationKey>
	<DeveloperDocumentation>@SYS320626</DeveloperDocumentation>
	<Label>@SYS301588</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Catalog</TitleField1>
	<TitleField2>LegalEntity</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>CatVendorCatalogIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Catalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Release</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Catalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Catalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Release</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsChangedOrNew</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Catalog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsChangedOrNew</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Release</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS303248</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CatVendorLegalEntityStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CatVendorCatalogIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Catalog</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CompanyInfoIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatVendorCatalog</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CatVendorCatalog</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CatVendorCatalog</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CatVendorCatalog_CatVendorReleaseCatalog</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Catalog</Name>
					<Field>Catalog</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CompanyInfo_CatVendorReleaseCatalog</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>