<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanningWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanningWorkflow extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        BudgetPlanningWorkflowTranslation::deleteForBudgetPlanningWorkflow(this.RecId);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        // Update translation information
        BudgetPlanningWorkflowTranslation::createOrUpdateTranslation(this.RecId, this.Name, this.Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        // Update translation information
        BudgetPlanningWorkflowTranslation::createOrUpdateTranslation(this.RecId, this.Name, this.Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid;

        isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(BudgetPlanningWorkflow, Workflow):
                    isValid = this.validateWorkflow(this.Workflow, this.orig().Workflow);
                    break;

                default:
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether any workflow exists for a specific workflow sequence.
    /// </summary>
    /// <param name="_workflowSequenceNumber">
    /// The sequence number of the workflow.
    /// </param>
    /// <param name="_workflowSequenceNumberOrig">
    /// The original value of the sequence number.
    /// </param>
    /// <returns>
    /// true if the specified record does not exists; otherwise, false.
    /// </returns>
    public boolean validateWorkflow(WorkflowSequenceNumber _workflowSequenceNumber, WorkflowSequenceNumber _workflowSequenceNumberOrig)
    {
        boolean              isValid = true;
        WorkflowVersionTable workflowVersionTable;
        WorkflowTable        workflowTable;
        SysWorkflowTable     sysWorkflowTable;

        select firstonly TemplateName from workflowTable
            join RecId, WorkflowTable, Enabled from workflowVersionTable
                where workflowTable.SequenceNumber == _workflowSequenceNumber
                    && workflowVersionTable.WorkflowTable == workflowTable.RecId
                    && workflowVersionTable.Enabled == NoYes::Yes;

        if (workflowVersionTable.RecId)
        {
            // Checks that either the selected workflow template type is budget plan review or not.
            if (workflowTable.TemplateName != workFlowTypeStr(BudgetPlanReview))
            {
                isValid = checkFailed(strFmt("@GLS70648", _workflowSequenceNumber));
            }
            else
            {
                // Checks that either the selected workflow is used by existing budget plan or not.
                select firstonly RecId from sysWorkflowTable
                    where sysWorkflowTable.ConfigurationSequenceNumber == _workflowSequenceNumberOrig;

                if (sysWorkflowTable.RecId)
                {
                    isValid = (Box::yesNo(strFmt("@GLS70650", _workflowSequenceNumberOrig), DialogButton::Ok)) == DialogButton::Yes;
                }
            }
        }
        else
        {
            // Workflow is not in a active state.
            isValid = checkFailed(strFmt("@GLS70649", _workflowSequenceNumber));
        }

        return  isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;

        isValid = super();

        isValid = isValid && BudgetPlanWorkflowHelper::validateWorkflowTableSequenceNumber(this.Workflow);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>BudgetPlanningWorkflow</c> table; if not,
    /// an error message is displayed.
    /// </summary>
    /// <param name="_budgetPlanningWorkflowRecId">
    /// The record ID of the <c>BudgetPlanningWorkflow</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(BudgetPlanningWorkflowRecId _budgetPlanningWorkflowRecId)
    {
        boolean isExisting = true;

        if (!BudgetPlanningWorkflow::exist(_budgetPlanningWorkflowRecId))
        {
            isExisting = checkFailed(strFmt(BudgetPlanningWorkflow::txtNotExist(), _budgetPlanningWorkflowRecId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>BudgetPlanningWorkflow</c> table.
    /// </summary>
    /// <param name="_budgetPlanningWorkflowRecId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(BudgetPlanningWorkflowRecId _budgetPlanningWorkflowRecId)
    {
        return (BudgetPlanningWorkflow::find(_budgetPlanningWorkflowRecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanningWorkflow</c> table.
    /// </summary>
    /// <param name="_budgetPlanningWorkflowRecId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningWorkflow</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningWorkflow find(
        BudgetPlanningWorkflowRecId _budgetPlanningWorkflowRecId,
        boolean                     _forupdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningWorkflow budgetPlanningWorkflow;

        if (_budgetPlanningWorkflowRecId)
        {
            budgetPlanningWorkflow.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                 budgetPlanningWorkflow.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanningWorkflow
                where budgetPlanningWorkflow.RecId == _budgetPlanningWorkflowRecId;
        }

        return budgetPlanningWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLocalizedName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanningWorkflow</c> table by using the localized name.
    /// </summary>
    /// <param name="_localizedName">
    /// The localized name of the <c>BudgetPlanningWorkflow</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_languageId">
    /// The localized language that is used to set the user language.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningWorkflow</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningWorkflow findByLocalizedName(
        BudgetPlanningWorkflowName _localizedName,
        boolean                    _forUpdate = false,
        LanguageId                 _languageId = currentUserLanguage())
    {
        BudgetPlanningWorkflow            budgetPlanningWorkflow;
        BudgetPlanningWorkflowTranslation budgetPlanningWorkflowTranslation;
        LanguageId                        languageId = _languageId;

        budgetPlanningWorkflow.selectForUpdate(_forUpdate);

        // Look for the localized value first
        if (languageId)
        {
            select firstonly budgetPlanningWorkflow
                exists join budgetPlanningWorkflowTranslation
                    where
                        budgetPlanningWorkflowTranslation.Name == _localizedName &&
                        budgetPlanningWorkflowTranslation.BudgetPlanningWorkflow == budgetPlanningWorkflow.RecId &&
                        budgetPlanningWorkflowTranslation.LanguageId == languageId;
        }

        // If no user language, fall back to the system language.
        if (!budgetPlanningWorkflow)
        {
            select firstonly budgetPlanningWorkflow
                exists join budgetPlanningWorkflowTranslation
                    where
                        budgetPlanningWorkflowTranslation.Name == _localizedName &&
                        budgetPlanningWorkflowTranslation.BudgetPlanningWorkflow == budgetPlanningWorkflow.RecId &&
                        budgetPlanningWorkflowTranslation.LanguageId == SystemParameters::getSystemLanguageId();
        }

        // If not found or language not specified, fall back to invariant name
        if (!budgetPlanningWorkflow)
        {
            budgetPlanningWorkflow = BudgetPlanningWorkflow::findByName(_localizedName, _forUpdate);
        }

        return budgetPlanningWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanningWorkflow</c> table.
    /// </summary>
    /// <param name="_budgetPlanningWorkflowName">
    /// The name of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanningWorkflow</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningWorkflow findByName(
        BudgetPlanningWorkflowName _budgetPlanningWorkflowName,
        boolean                    _forupdate = false,
        ConcurrencyModel           _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanningWorkflow budgetPlanningWorkflow;

        if (_budgetPlanningWorkflowName)
        {
            budgetPlanningWorkflow.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                 budgetPlanningWorkflow.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanningWorkflow
                where budgetPlanningWorkflow.Name == _budgetPlanningWorkflowName;
        }

        return budgetPlanningWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowsForBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of <c>BudgetPlanningWorkflow</c> records that are associated with a
    /// <c>BudgetPlanningProcess</c> record .
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <returns>
    /// A container that contains The record IDs of the <c>BudgetPlanningWorkflow</c> records.
    /// </returns>
    public static container getWorkflowsForBudgetPlanningProcess(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetPlanningWorkflow              budgetPlanningWorkflow;
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;
        container                           workflowContainer;
        Counter                             containerIndex = 1;

        while select RecId from budgetPlanningWorkflow
            join BudgetPlanningWorkflow, BudgetPlanningProcess from budgetPlanningProcessAdministration
                where budgetPlanningProcessAdministration.BudgetPlanningWorkflow == budgetPlanningWorkflow.RecId
                    && budgetPlanningProcessAdministration.BudgetPlanningProcess == _budgetPlanningProcessRecId
        {
            if (conFind(workflowContainer, budgetPlanningWorkflow.RecId) == 0)
            {
                workflowContainer = conIns(workflowContainer, containerIndex, budgetPlanningWorkflow.RecId);
                containerIndex++;
            }
        }

        return workflowContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS70206</DeveloperDocumentation>
	<FormRef>BudgetPlanningConfigurationWorkflow</FormRef>
	<Label>@GLS70204</Label>
	<SingularLabel>@GLS70205</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Budget</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>BudgetPlanningProcessAdministration</Name>
			<DeleteAction>CascadeRestricted</DeleteAction>
			<Relation></Relation>
			<Table>BudgetPlanningProcessAdministration</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>BudgetPlanningWorkflowStage</Name>
			<DeleteAction>CascadeRestricted</DeleteAction>
			<Relation></Relation>
			<Table>BudgetPlanningWorkflowStage</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Workflow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsParentBudgetPlanRequired</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RestrictResetBudgetPlan</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RestrictDeleteBudgetPlan</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS55776</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Workflow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsParentBudgetPlanRequired</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RestrictResetBudgetPlan</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RestrictDeleteBudgetPlan</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningWorkflowDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsParentBudgetPlanRequired</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS4005288</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningWorkflowName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RestrictDeleteBudgetPlan</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Budget:BudgetPlanningWorkflowRestrictDelete</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RestrictResetBudgetPlan</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Budget:BudgetPlanningWorkflowRestrictReset</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Workflow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WorkflowSequenceNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkflowTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WorkflowTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Workflow</Name>
					<SourceEDT>WorkflowSequenceNumber</SourceEDT>
					<Field>Workflow</Field>
					<RelatedField>SequenceNumber</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>WorkflowSequenceNumber</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>WorkflowConfigurationType::Definition</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SequenceIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>