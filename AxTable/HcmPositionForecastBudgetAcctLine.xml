<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastBudgetAcctLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HcmPositionForecastBudgetAcctLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultBudgetCostElementDateValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the <c>EffectiveDate</c> and <c>ExpirationDate</c> value in the <c>HcmPositionForecastBudgetAcctLine</c> table
    /// from the <c>HcmPositionForecastScenario</c> and the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </summary>
    public void defaultBudgetCostElementDateValues()
    {
        HcmPositionForecastScenario positionForecastScenario = HcmPositionForecastScenario::find(this.PositionForecastScenario);
        HcmBudgetPurposeTypeDetail budgetPurposeTypeDetail = HcmBudgetPurposeTypeDetail::find(this.BudgetPurposeTypeDetail);
        HcmForecastScenario  hcmForecastScenario = HcmForecastScenario::find(positionForecastScenario.ForecastScenario);

        ValidToDate positionActivationDate, budgetPurposeDetailEffectiveDate, budgetCycleProcessStartDate;
        ValidFromDate positionRetirementDate, budgetPurposeDetailExpirationDate, budgetCycleProcessEndDate;

        budgetCycleProcessStartDate = hcmForecastScenario.BudgetProcessStartDate;
        budgetCycleProcessEndDate   = hcmForecastScenario.BudgetProcessEndDate;

        positionActivationDate = positionForecastScenario.getUserTimeZoneActivationDate();
        positionRetirementDate = positionForecastScenario.getUserTimeZoneRetirementDate();

        budgetPurposeDetailEffectiveDate = budgetPurposeTypeDetail.EffectiveDate;
        budgetPurposeDetailExpirationDate = budgetPurposeTypeDetail.ExpirationDate;

        this.EffectiveDate = budgetPurposeDetailEffectiveDate;

        if (budgetCycleProcessStartDate >= budgetPurposeDetailEffectiveDate &&
            budgetCycleProcessStartDate < budgetPurposeDetailExpirationDate &&
            budgetCycleProcessStartDate >= positionActivationDate &&
            budgetCycleProcessStartDate < positionRetirementDate)
        {
            this.EffectiveDate = budgetCycleProcessStartDate;
        }
        else if (positionActivationDate >= budgetPurposeDetailEffectiveDate)
        {
            this.EffectiveDate = positionActivationDate;
        }

        this.ExpirationDate = positionRetirementDate;

        if (budgetCycleProcessEndDate >= budgetPurposeDetailEffectiveDate &&
            budgetCycleProcessEndDate < budgetPurposeDetailExpirationDate &&
            budgetCycleProcessEndDate >= positionActivationDate &&
            budgetCycleProcessEndDate < positionRetirementDate)
        {
            this.ExpirationDate = budgetCycleProcessEndDate;
        }
        else if (positionRetirementDate >= budgetPurposeDetailExpirationDate)
        {
            this.ExpirationDate = budgetPurposeDetailExpirationDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLineLocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the line status of the current record in the <c>HcmPositionForecastBudgetAcctLine</c> table
    /// </summary>
    /// <param name="_hcmPositionForecastBudgetAcctLine">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> record to process.
    /// </param>
    /// <returns>
    /// The <c>HcmPositionForecastBudgetAcctLine</c> table status icon with tooltip for mismatched values with defaults; otherwise, a blank icon.
    /// </returns>
    display container displayLineLocked(HcmPositionForecastBudgetAcctLine _hcmPositionForecastBudgetAcctLine)
    {
        container imageContainer;

        if (HcmBudgetPurposeTypeDetail::isLineLocked(_hcmPositionForecastBudgetAcctLine.RecId))
        {
            if (imageContainer == connull())
            {
                ImageReference imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::Warning, "@Budget:BudgetPlan_PositionForecasting_HcmPositionForecast_DetailsGridTriangleIcon");
                imageContainer = imageReference.pack();
            }
        }

        return imageContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayStatusIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the line of the current record in the <c>HcmPositionForecastBudgetAcctLine</c> table is edited or not.
    /// </summary>
    /// <returns>
    /// The <c>HcmPositionForecastBudgetAcctLine</c> table status icon with tooltip; otherwise, a blank icon.
    /// </returns>
    display container displayStatusIcon()
    {
        container imageContainer;
        HcmBudgetPurposeTypeDetail budgetPurposeTypeDetail;

        budgetPurposeTypeDetail = HcmBudgetPurposeTypeDetail::find(this.BudgetPurposeTypeDetail);

        if (!HcmBudgetPurposeTypeDetail::isOverrideAllowed(this.BudgetPurposeTypeDetail))
        {
            if (imageContainer == connull())
            {
                ImageReference imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::NotAvailable, "@Budget:BudgetPlan_PositionForecasting_HcmPositionForecast_DetailsGridCircleSlashIcon");
                imageContainer = imageReference.pack();
            }
        }

        return imageContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBasisCostElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified <c>HcmPositionForecastBudgetAcctLineRecId</c> record ID exists in the
    /// <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <param name="_effectiveDate">
    /// The <c>EffectiveDate</c> of the <c>HcmPositionForecastBudgetAcctLineRecId</c> table.
    /// </param>
    /// <param name="_expirationDate">
    /// The <c>ExpirationDate</c> of the <c>HcmPositionForecastBudgetAcctLineRecId</c> table.
    /// </param>
    /// <param name="_legalEntity">
    /// The legal entity record ID of the <c>HcmPositionForecastBudgetAcctLineRecId</c> table.
    /// </param>
    /// <param name="_positionForecastScenarioRecId">
    /// The <c>HcmPositionForecastScenario</c> table record ID.
    /// </param>
    /// <param name="_budgetPurposeType">
    /// The <c>HcmBudgetPurposeType</c> record ID.
    /// </param>
    /// <returns>
    /// true if the specified record exist; otherwise, false.
    /// </returns>
    public boolean existBasisCostElement(ValidFromDate _effectiveDate,
                                         ValidToDate  _expirationDate,
                                         CompanyInfoRecId _legalEntity,
                                         HcmPositionForecastScenarioRecId _positionForecastScenarioRecId,
                                         HcmBudgetPurposeTypeRecId _budgetPurposeType)
    {
        HcmPositionForecastBudgetAcctLine   positionForecastBudgetAcctLine;
        HcmBudgetPurposeType                budgetPurposeType;
        HcmBudgetPurposeTypeDetail          budgetPurposeDetail;

        if (_effectiveDate && _expirationDate)
        {
            select firstonly RecId from positionForecastBudgetAcctLine
                where positionForecastBudgetAcctLine.PositionForecastScenario == _positionForecastScenarioRecId
                && positionForecastBudgetAcctLine.LegalEntity == _legalEntity
                && ((positionForecastBudgetAcctLine.EffectiveDate >= _effectiveDate
                    && positionForecastBudgetAcctLine.EffectiveDate <=_expirationDate))
                join RecId from budgetPurposeDetail
                    where budgetPurposeDetail.RecId == positionForecastBudgetAcctLine.BudgetPurposeTypeDetail
                join  RecId from budgetPurposeType
                    where budgetPurposeDetail.BudgetPurposeType == budgetPurposeType.RecId
                && budgetPurposeType.RecId == _budgetPurposeType;
        }

        return positionForecastBudgetAcctLine.RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsDependentEarningBasisOnCostElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a dependent calculation basis on the budget purpose that is defined on the record exists.
    /// </summary>
    /// <returns>
    /// true, if a dependent calculation basis on the budget purpose that is defined on the record exists; otherwise, false.
    /// </returns>
    public boolean existsDependentEarningBasisOnCostElement()
    {
        HcmBudgetPurposeTypeDetail budgetPurposeTypeDetail;
        HcmBudgetPurposeType budgetPurposeType;
        HcmBudgetPurposeEarningBasis hcmBudgetPurposeEarningBasis;

        select firstonly RecId from hcmBudgetPurposeEarningBasis
            exists join budgetPurposeTypeDetail
                where budgetPurposeTypeDetail.RecId == this.BudgetPurposeTypeDetail
            exists join budgetPurposeType
                where budgetPurposeType.RecId == budgetPurposeTypeDetail.BudgetPurposeType
                    && hcmBudgetPurposeEarningBasis.BudgetPurposeType == budgetPurposeType.RecId;
        
        return (hcmBudgetPurposeEarningBasis.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostElementYearlyLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves annual limit for the budget purpose that is set on <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <returns>
    /// The annual limit for the budget purpose that is set on <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </returns>
    public HcmBudgetPurposeTypeAnnualLimit getCostElementYearlyLimit()
    {
        HcmBudgetPurposeTypeAnnualLimit budgetPurposeTypeAnnualLimit = HcmBudgetPurposeTypeDetail::find(this.BudgetPurposeTypeDetail).AnnualLimit;
        HcmBudgetPurposeTypeAnnualLimit forecastBudgetAccLineLimit;
        
        if (budgetPurposeTypeAnnualLimit > 0 && this.IsPercentageBased)
        {
            int numberOfYearIntervals = intvNo(this.ExpirationDate, this.EffectiveDate, IntvScale::Year);

            if (numberOfYearIntervals < 1)
            {
                forecastBudgetAccLineLimit = budgetPurposeTypeAnnualLimit;
            }
            else
            {
                forecastBudgetAccLineLimit = budgetPurposeTypeAnnualLimit * numberOfYearIntervals;
            }
        }

        return forecastBudgetAccLineLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.IsPercentageBased = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executed when a field is modified in a form or Web form.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field to modify.
    /// </param>
    /// <remarks>
    /// Overriden to peform application logic.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        HcmBudgetPurposeTypeDetail      budgetPurposeTypeDetail;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(HcmPositionForecastBudgetAcctLine, BudgetPurposeTypeDetail):
                this.PercentageOfDefaultBasisAmount = 0;
                this.AmountCur = 0;
                this.LedgerDimension = 0;
                this.IsPercentageBased = false;
                this.defaultRow();
                break;

            case fieldNum(HcmPositionForecastBudgetAcctLine, AmountCur):
                this.PercentageOfDefaultBasisAmount = 0;
                this.IsPercentageBased = false;
                this.IsPositionLineOverridden = true;
                this.IsLineLockedForRecalculation = true;
                break;

            case fieldNum(HcmPositionForecastBudgetAcctLine, PercentageOfDefaultBasisAmount):
                this.AmountCur = 0;
                this.IsPercentageBased = true;
                this.IsPositionLineOverridden = true;
                this.IsLineLockedForRecalculation = true;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needRecalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the cost element line needs to be recalculated.
    /// </summary>
    /// <returns>
    /// true, if the cost element line needs to be recalculated; otherwise, false.
    /// </returns>
    public boolean needRecalculation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPurposeDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>Effective</c> and the <c>Expiration</c> date of the
    /// <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <param name="_validFrom">
    /// The <c>Effective</c> date of the <c>HcmPositionForecastBudgetAcctLine</c> table; optional.
    /// </param>
    /// <param name="_validTo">
    /// The <c>Expiration</c> date of the <c>HcmPositionForecastBudgetAcctLine</c> table; optional.
    /// </param>
    /// <returns>
    /// true if the <c>HcmPositionForecastBudgetAcctLine</c> value passes the dates validation; otherwise, false.
    /// </returns>
    public boolean validateBudgetPurposeDates(ValidFromDate _validFrom = this.EffectiveDate,
                                              ValidToDate _validTo = this.ExpirationDate)
    {
        boolean isValid = true;
        HcmBudgetPurposeTypeDetail budgetPurposeTypeDetail = HcmBudgetPurposeTypeDetail::find(this.BudgetPurposeTypeDetail);
        HcmBudgetPurposeType budgetPurposeType = HcmBudgetPurposeType::find(budgetPurposeTypeDetail.BudgetPurposeType);
        HcmPositionForecastScenario positionForecastScenario = HcmPositionForecastScenario::find(this.PositionForecastScenario);

        ValidFromDate positionActivationDate = positionForecastScenario.getUserTimeZoneActivationDate();
        ValidToDate   positionRetirementDate = positionForecastScenario.getUserTimeZoneRetirementDate();

        if (_validFrom > _validTo)
        {
            isValid = checkFailed("@SYS4005406");
        }

        if (isValid && _validFrom < budgetPurposeTypeDetail.EffectiveDate)
        {
            isValid = checkFailed("@SYS4005408");
        }

        if (isValid && _validTo > budgetPurposeTypeDetail.ExpirationDate)
        {
            isValid = checkFailed("@SYS4005409");
        }

        if (isValid && _validFrom < positionActivationDate)
        {
            isValid = checkFailed("@SYS4005410");
        }

        if (isValid && _validTo > positionRetirementDate)
        {
            isValid = checkFailed("@SYS4005411");
        }

        if (isValid && HcmPositionForecastBudgetAcctLine::existOverLappingBudgetElementLegalEntity(this.EffectiveDate, this.ExpirationDate, this.LegalEntity, this.PositionForecastScenario, budgetPurposeTypeDetail.BudgetPurposeType, this.RecId))
        {
            isValid = checkFailed(strFmt("@SYS4005412", budgetPurposeType.Purpose));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPurposeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>BudgetPurposeType</c> value for a record.
    /// </summary>
    /// <param name="_showErrorMessage">
    /// A Boolean value that indicates whether to show any error messages; optional.
    /// </param>
    /// <returns>
    /// true if the <c>BudgetPurposeType</c> value passes the validation; otherwise, false .
    /// </returns>
    public boolean validateBudgetPurposeType(boolean _showErrorMessage = false)
    {
        boolean isValid = true;
        LabelType errorMessage;
        HcmBudgetPurposeTypeDetail budgetPurposeTypeDetail = HcmBudgetPurposeTypeDetail::find(this.BudgetPurposeTypeDetail);

        if (budgetPurposeTypeDetail.RecId != 0)
        {
            if (budgetPurposeTypeDetail.LedgerDimension == 0 )
            {
                isValid = false;
                _showErrorMessage = false;
                checkFailed("@SYS4005902");
            }
        }
        else
        {
            // A budget purpose type detail cannot be found for the current company context.
            isValid = false;
            errorMessage = SysLabel::labelId2String(literalStr("@GLS190452"));
        }

        if (!isValid && _showErrorMessage)
        {
            checkFailed(errorMessage);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(HcmPositionForecastBudgetAcctLine, BudgetPurposeTypeDetail):
                ret = ret && this.validateBudgetPurposeType(true);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;

        isValid = super();

        isValid = isValid && this.validateBudgetPurposeType(true);
        isValid = isValid && this.validateBudgetPurposeDates();

        if (isValid && this.PositionForecastCompensationGrid)
        {
            HcmBudgetPurposeType budgetPurposeType = HcmBudgetPurposeType::findByPurposeTypeDetailRecId(this.BudgetPurposeTypeDetail);
            if (budgetPurposeType.CostElementType != HcmBudgetCostElementType::Earning)
            {
                isValid = false;
                warning("@Budget:BudgetPlan_PositionForecasting_HcmPositionForecastEntity_StepLevelAssignedNotEarningErrorMessage");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified <c>HcmPositionForecastBudgetAcctLineRecId</c> record exists in the
    ///    <c>HcmPositionForecastBudgetAcctLine</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>HcmPositionForecastBudgetAcctLineRecId</c> value of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(HcmPositionForecastBudgetAcctLineRecId _recId)
    {
        boolean ret = true;

        if (!HcmPositionForecastBudgetAcctLine::exist(_recId))
        {
            ret = checkFailed(strFmt(HcmPositionForecastBudgetAcctLine::txtNotExist(), tableStr(HcmPositionForecastBudgetAcctLine)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistByBudgetPurposeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the record in <c>HcmBudgetPurposeTypeDetail</c> table is referenced by records in <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <param name="_budgetPurposeTypeRecId">
    /// The record ID of the <c>HcmBudgetPurposeType</c> table.
    /// </param>
    /// <returns>
    /// true if the record in <c>HcmBudgetPurposeTypeDetail</c> table is referenced in <c>HcmPositionForecastBudgetAcctLine</c> table; otherwise, false.
    /// </returns>
    public static boolean checkExistByBudgetPurposeType(HcmBudgetPurposeTypeRecId _budgetPurposeTypeRecId)
    {
        HcmPositionForecastBudgetAcctLine   positionForecastBudgetAcctLine;
        HcmBudgetPurposeTypeDetail          budgetPurposeTypeDetail;
        HcmBudgetPurposeType                budgetPurposeType;

        if (_budgetPurposeTypeRecId)
        {
            select firstonly RecId from positionForecastBudgetAcctLine
                exists join budgetPurposeTypeDetail
                    where budgetPurposeTypeDetail.RecId == positionForecastBudgetAcctLine.BudgetPurposeTypeDetail
                exists join budgetPurposeType
                    where budgetPurposeType.RecId == budgetPurposeTypeDetail.BudgetPurposeType &&
                        budgetPurposeType.RecId == _budgetPurposeTypeRecId;
        }

        return positionForecastBudgetAcctLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistByBudgetPurposeTypeDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the record in <c>HcmBudgetPurposeTypeDetail</c> table is used by records in <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <param name="_budgetPurposeTypeDetailRecId">
    /// The record ID of the <c>HcmBudgetPurposeTypeDetail</c> table.
    /// </param>
    /// <returns>
    /// true if the record in <c>HcmBudgetPurposeTypeDetail</c> table is referenced in <c>HcmPositionForecastBudgetAcctLine</c> table; otherwise, false.
    /// </returns>
    public static boolean checkExistByBudgetPurposeTypeDetail(HcmBudgetPurposeTypeDetailRecId _budgetPurposeTypeDetailRecId)
    {
        return _budgetPurposeTypeDetailRecId && (select firstonly RecId from hcmPositionForecastBudgetAcctLine
                where hcmPositionForecastBudgetAcctLine.BudgetPurposeTypeDetail == _budgetPurposeTypeDetailRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified <c>HcmPositionForecastBudgetAcctLineRecId</c> record exists in the
    /// <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> value of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false .
    /// </returns>
    public static boolean exist(HcmPositionForecastBudgetAcctLineRecId _recId)
    {
        return _recId && (select firstonly RecId from hcmPositionForecastBudgetAcctLine
                    where hcmPositionForecastBudgetAcctLine.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByPositionForecastScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified <c>HcmPositionForecastScenario</c> field exists in the
    /// <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The <c>PositionForecastScenario</c> field to check for existence.
    /// </param>
    /// <param name="_recIdToExclude">
    /// The <c>HcmBudgetPurposeTypeDetail</c> record ID to exclude.
    /// </param>
    /// <returns>
    /// true, if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByPositionForecastScenario(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId, HcmPositionForecastBudgetAcctLineRecId _recIdToExclude = 0)
    {
        return _positionForecastScenarioRecId && (select firstonly RecId from hcmPositionForecastBudgetAcctLine
                    where hcmPositionForecastBudgetAcctLine.PositionForecastScenario == _positionForecastScenarioRecId
                    && hcmPositionForecastBudgetAcctLine.RecId != _recIdToExclude).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByPositionForecastScenarioLE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified <c>HcmPositionForecastScenario</c> record exists in the
    /// <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The record ID of position forecast scenario in <c>HcmPositionForecastScenario</c> table to check for existence.
    /// </param>
    /// <param name="_legalEntity">
    /// The legal entity record ID in the <c>CompanyInfo</c> table.
    /// </param>
    /// <returns>
    /// true, if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByPositionForecastScenarioLE(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId,
                                                                    CompanyInfoRecId _legalEntity)
    {
        return _positionForecastScenarioRecId && (select firstonly RecId from hcmPositionForecastBudgetAcctLine
                    where hcmPositionForecastBudgetAcctLine.PositionForecastScenario == _positionForecastScenarioRecId
                    && hcmPositionForecastBudgetAcctLine.LegalEntity == _legalEntity).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOverLappingBudgetElementLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified <c>HcmPositionForecastBudgetAcctLineRecId</c> record ID exists in the
    /// <c>HcmPositionForecastBudgetAcctLine</c> table and overlaps with the other records.
    /// </summary>
    /// <param name="_effectiveDate">
    /// The <c>EffectiveDate</c> of the <c>HcmPositionForecastBudgetAcctLineRecId</c> table.
    /// </param>
    /// <param name="_expirationDate">
    /// The <c>ExpirationDate</c> of the <c>HcmPositionForecastBudgetAcctLineRecId</c> table.
    /// </param>
    /// <param name="_legalEntity">
    /// The legal entity record ID of the <c>HcmPositionForecastBudgetAcctLineRecId</c> table.
    /// </param>
    /// <param name="_positionForecastScenarioRecId">
    /// The <c>HcmPositionForecastScenario</c> table record ID.
    /// </param>
    /// <param name="_budgetPurposeType">
    /// The <c>HcmBudgetPurposeType</c> record ID.
    /// </param>
    /// <param name="_recIdToExclude">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> record ID to exclude.
    /// </param>
    /// <returns>
    /// true if the specified record overlaps; otherwise, false.
    /// </returns>
    public static boolean existOverLappingBudgetElementLegalEntity( ValidFromDate                           _effectiveDate,
                                                                    ValidToDate                            _expirationDate,
                                                                    CompanyInfoRecId                       _legalEntity,
                                                                    HcmPositionForecastScenarioRecId       _positionForecastScenarioRecId,
                                                                    HcmBudgetPurposeTypeRecId              _budgetPurposeType,
                                                                    HcmPositionForecastBudgetAcctLineRecId _recIdToExclude = 0)
    {
        HcmPositionForecastBudgetAcctLine   positionForecastBudgetAcctLine;
        HcmBudgetPurposeType                budgetPurposeType;
        HcmBudgetPurposeTypeDetail          budgetPurposeDetail;

        if (_effectiveDate && _expirationDate)
        {
            select firstonly RecId from positionForecastBudgetAcctLine
                where positionForecastBudgetAcctLine.RecId != _recIdToExclude
                && positionForecastBudgetAcctLine.PositionForecastScenario == _positionForecastScenarioRecId
                && positionForecastBudgetAcctLine.LegalEntity == _legalEntity
                && ((positionForecastBudgetAcctLine.EffectiveDate >= _effectiveDate
                    && positionForecastBudgetAcctLine.EffectiveDate < _expirationDate)
                || (positionForecastBudgetAcctLine.EffectiveDate <= _effectiveDate
                    && positionForecastBudgetAcctLine.ExpirationDate >= _effectiveDate))
                join RecId from budgetPurposeDetail
                where budgetPurposeDetail.RecId == positionForecastBudgetAcctLine.BudgetPurposeTypeDetail
                join  RecId from budgetPurposeType
                where budgetPurposeDetail.BudgetPurposeType == budgetPurposeType.RecId
                && budgetPurposeType.RecId == _budgetPurposeType;
        }

        return positionForecastBudgetAcctLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </returns>
    public static HcmPositionForecastBudgetAcctLine find(
    HcmPositionForecastBudgetAcctLineRecId _recId,
    boolean _forUpdate = false,
    ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecastBudgetAcctLine hcmPositionForecastBudgetAcctLine;

        hcmPositionForecastBudgetAcctLine.selectForUpdate(_forUpdate );

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionForecastBudgetAcctLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmPositionForecastBudgetAcctLine
            where hcmPositionForecastBudgetAcctLine.RecId == _recId;

        return hcmPositionForecastBudgetAcctLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPosForecastScenarioLETypeDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionForecastBudgetAcctLine</c> table that is based on the specified
    /// <c>Position</c> , <c>LegalEntity</c>, and <c>BudgetPurposeType</c> values.
    /// </summary>
    /// <param name="_positionForecastScenario">
    /// The value of the <c>PositionForecastScenario</c> field to find.
    /// </param>
    /// <param name="_legalEntity">
    /// The value of the <c>LegalEntity</c> field to find.
    /// </param>
    /// <param name="_budgetPurposeTypeDetail">
    /// The value of the <c>BudgetPurposeTypeDetail</c> record to find.
    /// </param>
    /// <param name="_validFrom">
    /// A <c>ValidFrom</c> value.
    /// </param>
    /// <param name="_validTo">
    /// A <c>ValidTo</c> value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record or multiple records from the <c>HcmPositionForecastBudgetAcctLine</c> Table; otherwise, an
    /// empty record.
    /// </returns>
    public static HcmPositionForecastBudgetAcctLine findByPosForecastScenarioLETypeDetail(
    HcmPositionForecastScenarioRecId             _positionForecastScenario,
    CompanyInfoRecId                             _legalEntity,
    HcmBudgetPurposeTypeDetailRecId              _budgetPurposeTypeDetail,
    utcdatetime                                  _validFrom = DateTimeUtil::utcNow(),
    utcdatetime                                  _validTo   = _validFrom,
    boolean                                      _forUpdate = false,
    ConcurrencyModel                             _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecastBudgetAcctLine hcmPositionForecastBudgetAccountLine;

        hcmPositionForecastBudgetAccountLine.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionForecastBudgetAccountLine.concurrencyModel(_concurrencyModel);
        }

        if (_positionForecastScenario && _legalEntity && _positionForecastScenario)
        {
            if (prmisDefault(_validFrom) && prmisDefault(_validTo))
            {
                select firstonly hcmPositionForecastBudgetAccountLine
                    where hcmPositionForecastBudgetAccountLine.PositionForecastScenario == _positionForecastScenario &&
                    hcmPositionForecastBudgetAccountLine.LegalEntity == _legalEntity &&
                    hcmPositionForecastBudgetAccountLine.BudgetPurposeTypeDetail == _budgetPurposeTypeDetail;
            }
            else if (_validFrom == _validTo)
            {
                select firstonly ValidTimeState(_validFrom) hcmPositionForecastBudgetAccountLine
                    where hcmPositionForecastBudgetAccountLine.PositionForecastScenario == _positionForecastScenario &&
                    hcmPositionForecastBudgetAccountLine.LegalEntity == _legalEntity &&
                    hcmPositionForecastBudgetAccountLine.BudgetPurposeTypeDetail == _budgetPurposeTypeDetail;
            }
            else
            {
                select ValidTimeState(_validFrom, _validTo) hcmPositionForecastBudgetAccountLine
                    where hcmPositionForecastBudgetAccountLine.PositionForecastScenario == _positionForecastScenario &&
                    hcmPositionForecastBudgetAccountLine.LegalEntity == _legalEntity &&
                    hcmPositionForecastBudgetAccountLine.BudgetPurposeTypeDetail == _budgetPurposeTypeDetail;
            }
        }

        return hcmPositionForecastBudgetAccountLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntitiesByBudgetPurposeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmBudgetPurposeTypeDetail</c> table that is based on the specified
    /// <c>BudgetPurposeType</c> field.
    /// </summary>
    /// <param name="_budgetPurposeType">
    /// The value of the <c>BudgetPurposeType</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that specifies the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A container containing the legalentity recId's
    /// </returns>
    public static container getLegalEntitiesByBudgetPurposeType(
    HcmBudgetPurposeTypeRecId   _budgetPurposeType,
    boolean                     _forUpdate = false,
    ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        container   legalEntityContainer;
        HcmBudgetPurposeTypeDetail hcmBudgetPurposeTypeDetail;

        hcmBudgetPurposeTypeDetail.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmBudgetPurposeTypeDetail.concurrencyModel(_concurrencyModel);
        }

        while select LegalEntity from hcmBudgetPurposeTypeDetail
                where hcmBudgetPurposeTypeDetail.BudgetPurposeType == _budgetPurposeType
        {
            legalEntityContainer += [hcmBudgetPurposeTypeDetail.LegalEntity];
        }

        return legalEntityContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePositionBudgetCostElementDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the start and end date of the budget cost element account line in the table <c>HcmPositionForecastBudgetAcctLine</c>.
    /// </summary>
    /// <param name="_hcmPositionForecastScenarioRecId">
    /// The record ID of the <c>HcmPositionForecastScenario</c> table.
    /// </param>
    /// <param name="_newPositionActivationDate">
    /// The <c>ActivationDateTime</c> date of the record <c>HcmPositionForecastScenario</c> table.
    /// </param>
    /// <param name="_newPositionRetirementDate">
    /// The <c>RetirementDateTime</c> date of the record <c>HcmPositionForecastScenario</c> table.
    /// </param>
    public static void updatePositionBudgetCostElementDates(HcmPositionForecastScenarioRecId _hcmPositionForecastScenarioRecId,
                                                            ValidFromDate                    _newPositionActivationDate,
                                                            ValidToDate                      _newPositionRetirementDate)

    {
        HcmPositionForecastBudgetAcctLine positionForecastBudgetAcctLine;
        HcmBudgetPurposeTypeDetail        budgetPurposeTypeDetail;
        HcmPositionForecastScenario       positionForecastScenario;
        HcmForecastScenario  hcmForecastScenario;

        ValidToDate   oldPositionActivationDate, budgetPurposeDetailEffectiveDate, budgetCycleProcessStartDate, newEndDate;
        ValidFromDate oldPositionRetirementDate, budgetPurposeDetailExpirationDate, budgetCycleProcessEndDate, newStartDate;

        positionForecastScenario = HcmPositionForecastScenario::find(_hcmPositionForecastScenarioRecId);
        hcmForecastScenario = HcmForecastScenario::find(positionForecastScenario.ForecastScenario);

        oldPositionActivationDate = positionForecastScenario.getUserTimeZoneActivationDate();
        oldPositionRetirementDate = positionForecastScenario.getUserTimeZoneRetirementDate();

        budgetCycleProcessStartDate = hcmForecastScenario.BudgetProcessStartDate;
        budgetCycleProcessEndDate   = hcmForecastScenario.BudgetProcessEndDate;

        // Iterate all budget account lines
        ttsbegin;
        while select forupdate BudgetPurposeTypeDetail, PositionForecastScenario, EffectiveDate, ExpirationDate
            from positionForecastBudgetAcctLine
                  where positionForecastBudgetAcctLine.PositionForecastScenario ==_hcmPositionForecastScenarioRecId
            join EffectiveDate, ExpirationDate from budgetPurposeTypeDetail
                where budgetPurposeTypeDetail.RecId == positionForecastBudgetAcctLine.BudgetPurposeTypeDetail
        {
            budgetPurposeDetailEffectiveDate  = budgetPurposeTypeDetail.EffectiveDate;
            budgetPurposeDetailExpirationDate = budgetPurposeTypeDetail.ExpirationDate;

            if (_newPositionActivationDate <= budgetPurposeTypeDetail.ExpirationDate &&
                _newPositionRetirementDate >= budgetPurposeTypeDetail.EffectiveDate  &&
                _newPositionActivationDate <= positionForecastBudgetAcctLine.ExpirationDate &&
                _newPositionRetirementDate >= positionForecastBudgetAcctLine.EffectiveDate)
            {
                // Get maximum date for Effective Date
                newStartDate = HcmPositionForecastFormUtility::getMaximumOfDates(_newPositionActivationDate, budgetPurposeDetailEffectiveDate);
                newStartDate = HcmPositionForecastFormUtility::getMaximumOfDates(newStartDate, budgetCycleProcessStartDate);

                if (positionForecastBudgetAcctLine.EffectiveDate < newStartDate ||
                    positionForecastBudgetAcctLine.EffectiveDate == oldPositionActivationDate )
                {
                    positionForecastBudgetAcctLine.EffectiveDate = newStartDate;
                }

                // Get minimum date for Expiration Date
                newEndDate  = HcmPositionForecastFormUtility::getMinimumOfDates(_newPositionRetirementDate, budgetPurposeDetailExpirationDate);
                newEndDate  = HcmPositionForecastFormUtility::getMinimumOfDates(newEndDate, budgetCycleProcessEndDate);

                if (positionForecastBudgetAcctLine.ExpirationDate > newEndDate ||
                    positionForecastBudgetAcctLine.ExpirationDate == oldPositionRetirementDate )
                {
                    positionForecastBudgetAcctLine.ExpirationDate = newEndDate;
                }

                //
                // Validate method cannot be called for budget account line
                // because new duration date are not updated to the database yet.
                //
                positionForecastBudgetAcctLine.update();
            }
            else
            {
                // delete budget account line if it does not lies under new position duration.
                positionForecastBudgetAcctLine.delete();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByCompensationRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified <c>HcmPositionForecastCompensationRate</c> table record exists in the
    /// <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <param name="_compensationRateRecId">
    /// The record id for the <c>HcmPositionForecastCompensationRate</c> table record to find.
    /// </param>
    /// <returns>
    /// true, if the specified record exists, otherwise false.
    /// </returns>
    public static boolean existByCompensationRate(HcmPositionForecastCompensationRateRecId _compensationRateRecId)
    {
        HcmPositionForecastCompensationRate hcmPositionForecastCompensationRate;
        HcmPositionForecastCompGroupRefPoint hcmPositionForecastCompGroupRefPoint;
        HcmPositionForecastCompensationGrid hcmPositionForecastCompensationGrid;
        HcmPositionForecastBudgetAcctLine hcmPositionForecastBudgetAcctLine;

        if (_compensationRateRecId)
        {
            select firstonly RecId from hcmPositionForecastBudgetAcctLine
                exists join hcmPositionForecastCompensationGrid
                    where hcmPositionForecastCompensationGrid.RecId == hcmPositionForecastBudgetAcctLine.PositionForecastCompensationGrid
                    exists join hcmPositionForecastCompGroupRefPoint
                        where hcmPositionForecastCompGroupRefPoint.RecId == hcmPositionForecastCompensationGrid.CompensationGroupRefPointId
                        exists join hcmPositionForecastCompensationRate
                            where hcmPositionForecastCompensationRate.RecId == hcmPositionForecastCompGroupRefPoint.CompensationRate
                                && hcmPositionForecastCompGroupRefPoint.CompensationRate == _compensationRateRecId;
        }

        return hcmPositionForecastBudgetAcctLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsEarningCostRelateToRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the earning cost line related the rate already exists on the forecast position.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The <c>HcmPositionForecastScenario</c> table record ID.
    /// </param>
    /// <returns>
    /// true if earning cost line exists based on the criteria; otherwise, returns false.
    /// </returns>
    public static boolean existsEarningCostRelateToRate(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId)
    {
        HcmPositionForecastBudgetAcctLine positionForecastBudgetAcctLine;

        // Check if there is any cost line related to the rate grid.
        select firstonly RecId from positionForecastBudgetAcctLine
            where positionForecastBudgetAcctLine.PositionForecastScenario == _positionForecastScenarioRecId
                && positionForecastBudgetAcctLine.IsSystemGenerated == true;

        return positionForecastBudgetAcctLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsEarningCostRelateToType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the earning cost line by the type already exists on the forecast position.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The <c>HcmPositionForecastScenario</c> table record ID.
    /// </param>
    /// <param name="_earningCostElementId">
    /// The record ID of the earning cost element in the <c>HcmBudgetPurposeType</c> table.
    /// </param>
    /// <returns>
    /// true if earning cost line exists based on the criteria; otherwise, returns false.
    /// </returns>
    public static boolean existsEarningCostRelateToType(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId,
                                                         HcmBudgetPurposeTypeRecId _earningCostElementId)
    {
        HcmBudgetPurposeTypeDetail        budgetPurposeTypeDetail;
        HcmPositionForecastBudgetAcctLine positionForecastBudgetAcctLine;

        select firstonly RecId from positionForecastBudgetAcctLine
            where positionForecastBudgetAcctLine.PositionForecastScenario == _positionForecastScenarioRecId
                exists join budgetPurposeTypeDetail
                    where budgetPurposeTypeDetail.RecId == positionForecastBudgetAcctLine.BudgetPurposeTypeDetail
                        && budgetPurposeTypeDetail.BudgetPurposeType == _earningCostElementId;

        return positionForecastBudgetAcctLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsIncreaseCostLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is any increase earning cost line in the <c>HcmPositionForecastBudgetAcctLine</c> table for the specific forecast position.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The record ID of the record in the <c>HcmPositionForecastScenario</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the increase earning cost line exists; otherwise, false.
    /// </returns>
    public static boolean existsIncreaseCostLine(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId)
    {
        HcmPositionForecastBudgetAcctLine positionForecastBudgetAcctLine;

        select firstonly RecId from positionForecastBudgetAcctLine
            where positionForecastBudgetAcctLine.PositionForecastScenario == _positionForecastScenarioRecId
                && positionForecastBudgetAcctLine.CostLineSource == HcmPositionForecastBudgetAcctLineSource::StepIncrease;

        return positionForecastBudgetAcctLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsRetainFlagOnEarningCostLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if there is any earning cost line in the <c>HcmPositionForecastBudgetAcctLine</c> table with the unchangeable flag.
    /// </summary>
    /// <param name="_positionForecastScenarioRecId">
    /// The record ID of the record in the <c>HcmPositionForecastScenario</c> table to check for existence.
    /// </param>
    /// <param name="_earningTypeRecId">
    /// The record ID of the record in the <c>HcmBudgetPurposeType</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the unchangeable cost line exists; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Returns the true flag for unchangeable cost line existence in the <c>HcmPositionForecastBudgetAcctLine</c> table; if not,
    /// the false flag is returned.
    /// </remarks>
    public static boolean existsRetainFlagOnEarningCostLine(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId, HcmBudgetPurposeTypeRecId _earningTypeRecId)
    {
        HcmPositionForecastBudgetAcctLine positionForecastBudgetAcctLine;
        HcmBudgetPurposeTypeDetail        budgetCostElementDetail;

        select firstonly RecId from positionForecastBudgetAcctLine
            where positionForecastBudgetAcctLine.PositionForecastScenario == _positionForecastScenarioRecId
                && positionForecastBudgetAcctLine.IsLineLockedForRecalculation == NoYes::Yes
                exists join budgetCostElementDetail
                    where budgetCostElementDetail.RecId == positionForecastBudgetAcctLine.BudgetPurposeTypeDetail
                        && budgetCostElementDetail.BudgetPurposeType == _earningTypeRecId;

        return positionForecastBudgetAcctLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExistingCostWithinIncreaseRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the existing cost lines from the <c>HcmPositionForecastBudgetAcctLine</c> table that are within the increase range.
    /// </summary>
    /// <param name="_hcmPositionForecastScenarioRecId">
    /// The position forecast scenario Id in the <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </param>
    /// <param name="_hcmBudgetPurposeTypeRecId">
    /// The budget purpose type Id in the <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </param>
    /// <param name="_validFromDate">
    /// The effective date in the <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </param>
    public static void removeExistingCostWithinIncreaseRange(HcmPositionForecastScenarioRecId _hcmPositionForecastScenarioRecId,
                                                                HcmBudgetPurposeTypeRecId _hcmBudgetPurposeTypeRecId,
                                                                ValidFromDate _validFromDate)
    {
        HcmPositionForecastBudgetAcctLine   positionForecastBudgetAcctLine;
        HcmBudgetPurposeTypeDetail          budgetPurposetypedetail;

        ttsbegin;
        delete_from positionForecastBudgetAcctLine
            exists join budgetPurposetypedetail
            where budgetPurposetypedetail.RecId == positionForecastBudgetAcctLine.BudgetPurposeTypeDetail
                && positionForecastBudgetAcctLine.PositionForecastScenario == _hcmPositionForecastScenarioRecId
                && budgetPurposetypedetail.BudgetPurposeType == _hcmBudgetPurposeTypeRecId
                && positionForecastBudgetAcctLine.EffectiveDate >= _validFromDate;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in some fields in the <c>HcmPositionForecastBudgetAcctLine</c>table.
    /// </summary>
    /// <remarks>
    /// Sets valid default values in the non-interactive case for some fields:
    /// <c>PercentageOfDefaultBasisAmount</c>,
    /// <c>AmountCur</c>,
    /// <c>IsPercentageBased</c>,
    /// <c>LedgerDimension</c>,
    /// <c>IsLineLockedForRecalculation</c>,
    /// <c>EffectiveDate</c>,
    /// <c>ExpirationDate</c>,
    /// <c>LegalEntity</c>.
    /// </remarks>
    public void defaultRow()
    {
        HcmBudgetPurposeTypeDetail budgetPurposeTypeDetail = HcmBudgetPurposeTypeDetail::find(this.BudgetPurposeTypeDetail);
        if (budgetPurposeTypeDetail)
        {
            this.PercentageOfDefaultBasisAmount = this.PercentageOfDefaultBasisAmount == 0 ? budgetPurposeTypeDetail.Percent : this.PercentageOfDefaultBasisAmount;
            this.AmountCur = this.AmountCur == 0 ? budgetPurposeTypeDetail.Amount : this.AmountCur;
            this.IsPercentageBased = budgetPurposeTypeDetail.IsPercentageBased;
            this.LedgerDimension =  this.LedgerDimension == 0 ? budgetPurposeTypeDetail.LedgerDimension : this.LedgerDimension;
            this.defaultBudgetCostElementDateValues();
            this.IsLineLockedForRecalculation = false;

            HcmPositionForecastScenario positionForecastScenario = HcmPositionForecastScenario::find(this.PositionForecastScenario);
            this.LegalEntity = this.LegalEntity == 0 ? positionForecastScenario.LegalEntity : this.LegalEntity;
        }

        if (this.AmountCur)
        {
            this.PercentageOfDefaultBasisAmount = 0;
            this.IsPercentageBased = false;
        }

        if (this.PercentageOfDefaultBasisAmount)
        {
            this.AmountCur = 0;
            this.IsPercentageBased = true;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS190150</DeveloperDocumentation>
	<Label>@GLS190160</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>PositionForecastScenario</TitleField1>
	<TitleField2>LegalEntity</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>PositionForecastLEPurposeDetailDate</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PositionForecastScenario</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PercentageOfDefaultBasisAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PositionForecastScenario</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PositionForecastScenario</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPurposeTypeDetail</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpirationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSystemGenerated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS62867</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PercentageOfDefaultBasisAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AmountChangeDetail</Name>
			<Label>Detail about the amount change</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerDimension</Name>
			<Label>@SYS139233</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PositionStatus</Name>
			<Label>@SYS33602</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>isPositionLineOverridden</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsLineLockedForRecalculation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>isPercentageBased</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostLineSource</Name>
			<Label>@SYP4940033</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostLineSource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBudgetAmountCur</ExtendedDataType>
			<Label>@SYS4005359</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BudgetAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBudgetAmountCur</ExtendedDataType>
			<GroupPrompt>@SYS178309</GroupPrompt>
			<Label>@SYS178309</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPurposeTypeDetail</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBudgetPurposeTypeDetailRecId</ExtendedDataType>
			<Label>@SYS4005313</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EffectiveDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
			<Label>@SYS4005402</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ExpirationDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
			<Label>@SYS4005404</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsLineLockedForRecalculation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@Budget:BudgetPlan_PositionForecasting_HcmPositionForecast_DetailsView_RetainAmount</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>isPercentageBased</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>isPositionLineOverridden</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS4005399</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSystemGenerated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS4005942</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS322242</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PercentageOfDefaultBasisAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBudgetPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PositionForecastScenario</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>HcmPositionForecastScenarioRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostLineSource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>HcmPositionForecastBudgetAcctLineSource</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PositionForecastCompensationGrid</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionForecastCompensationGridRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PositionForecastLegalEntityPurposeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PositionForecastLEPurposeDetailDate</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PositionForecastScenario</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetPurposeTypeDetail</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EffectiveDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ExpirationDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsSystemGenerated</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmBudgetPurposeTypeDetail</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmBudgetPurposeTypeDetail</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPurposeTypeDetail</Name>
					<Field>BudgetPurposeTypeDetail</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmPositionForecastScenario</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>HcmPositionForecastScenario</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PositionForecastScenario</Name>
					<Field>PositionForecastScenario</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmPositionForecastCompensationGrid</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmPositionForecastCompensationGrid</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PositionForecastCompensationGrid</Name>
					<Field>PositionForecastCompensationGrid</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>