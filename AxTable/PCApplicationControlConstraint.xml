<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCApplicationControlConstraint</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCApplicationControlConstraint extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>duplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the record.
    /// </summary>
    /// <param name="_duplicatedComponentControl">
    /// A reference to a duplicated <c>EcoResComponentControl</c> record.
    /// </param>
    public void duplicate(RefRecId _duplicatedComponentControl)
    {
        PCApplicationControlConstraint  duplicate;
        PCExpressionConstraint          constraint;

        duplicate.data(this);

        duplicate.ComponentControl = _duplicatedComponentControl;

        select firstonly RecId from constraint
            where constraint.RecId == this.ConditionExpressionConstraint;

        if (constraint.RecId == 0)
        {
            throw Exception::Error;
        }

        duplicate.ConditionExpressionConstraint = constraint.duplicate().RecId;
        duplicate.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the constraint that is associated with the current condition.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCExpressionConstraint</c> table.
    /// </returns>
    public PCExpressionConstraint getConstraint(boolean _forUpdate = false)
    {
        return PCExpressionConstraint::find(this.ConditionExpressionConstraint, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toXML</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the XML representation of this record that is compatible with the product configuration.
    /// </summary>
    /// <param name="_xmlWriter">
    ///    The XML writer to use to store the XML representation of this record.
    /// </param>
    public void toXML(PCXmlWriter _xmlWriter)
    {
        #PC
        PCExpressionConstraint constraint = PCExpressionConstraint::find(this.ConditionExpressionConstraint);

        if (constraint.Expression)
        {
            _xmlWriter.writeStartElement(#conditionElement);
            _xmlWriter.writeAttributeString(#constraintIdAttribute, int642str(this.ConditionExpressionConstraint));
            constraint.toXML(_xmlWriter);
            _xmlWriter.writeEndElement();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PCApplicationControlConstraint</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCApplicationControlConstraint::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCApplicationControlConstraint</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCApplicationControlConstraint</c> table; otherwise, an empty record.
    /// </returns>
    public static PCApplicationControlConstraint find(RefRecId _recId, boolean _forupdate = false)
    {
        PCApplicationControlConstraint record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS153085</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS153084</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ComponentControl</TitleField1>
	<TitleField2>ConditionExpressionConstraint</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>ComponentControlIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PCExpressionConstraint</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PCExpressionConstraint</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ComponentControl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConditionExpressionConstraint</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ComponentControl</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ComponentControl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConditionExpressionConstraint</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ComponentControl</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS152845</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ConditionExpressionConstraint</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS40733</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ExpressionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ConditionExpressionConstraint</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ComponentControlIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ComponentControl</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ComponentControl</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResComponentControl</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ModifierAffected</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ConditionAppliedToModifier</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ComponentControl</Name>
					<Field>ComponentControl</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Condition</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PCExpressionConstraint</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ConditionApplied</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ConditionAppliedToModifier</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConditionExpressionConstraint</Name>
					<Field>ConditionExpressionConstraint</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>