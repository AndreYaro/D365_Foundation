<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailKitOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailKitOrder extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.InventDataAreaId = curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        if (_fieldId == fieldNum(RetailKitOrder, InventDataAreaId))
        {
            this.InventLocation = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        if (this.OrderType == RetailKitOrderType::AssemblyOrder)
        {
            if (RetailKit::find(this.Kit).DiscontinueKit)
            {
                throw error("@REX4161172");
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>warehouseLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters the warehouse loook up by the DataAreaId selected for the current kit order.
    /// </summary>
    /// <param name="_formControl">
    /// The form control object.
    /// </param>
    public void warehouseLookup(FormControl _formControl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(InventLocation), _formControl);
        Query query = new Query();

        sysTableLookup.addLookupfield(fieldNum(InventLocation, InventLocationId), true);
        sysTableLookup.addLookupfield(fieldNum(InventLocation, InventSiteId));

        // set allowcross company so that warehouses in other company can be selected if user selects a company different from the current company context
        query.allowCrossCompany(true);

        query.addCompanyRange(this.InventDataAreaId);
        query.addDataSource(tableNum(InventLocation));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified Retail kit has assmebly order in the <c>RtailKITOrder</c> table.
    /// </summary>
    /// <param name="_retailKitRecId">
    /// The retail kit rec ID to check for assembly order.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _retailKitRecId)
    {
        return _retailKitRecId &&
            (select RecId from retailKitOrder
                where retailKitOrder.Kit == _retailKitRecId
            ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRetailKitByRetailKitOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the retail kit reference in the <c>RetailKitOrder</c> table.
    /// </summary>
    /// <param name="_retailKitOrder">
    ///    The <c>RetailKitOrder</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>RetailKit</c> table; otherwise, an empty record.
    /// </returns>
    static public RetailKit findRetailKitByRetailKitOrder(RetailKitOrder _retailKitOrder, boolean _forUpdate = false)
    {
        RetailKit retailKit;

        if (_retailKitOrder.Kit)
        {
            retailKit.selectForUpdate(_forUpdate);
            select firstonly forupdate retailKit
                where retailKit.RecId == _retailKitOrder.Kit;
        }
        return retailKit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetJournalPostedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets JournalPostedStatus for Kit
    /// </summary>
    /// <returns>
    /// Return JournalPostedStatus
    /// </returns>
    public display JournalPosted GetJournalPostedStatus()
    {
        RetailKitOrderJournal retailKitOrderJournal;
        InventJournalTable inventJournalTable;

        // Get InventDataAreaId & JournalId for Retailkit
        select firstonly RecId, InventDataAreaId, JournalId from retailKitOrderJournal
            where this.RecId == retailKitOrderJournal.RetailKitOrder;

        // Get retail kit Post status
        select firstonly crosscompany RecId, Posted from inventJournalTable
            where inventJournalTable.DataAreaId == retailKitOrderJournal.InventDataAreaId &&
                  inventJournalTable.JournalId == retailKitOrderJournal.JournalId;

        return inventJournalTable.Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetEcoResProductName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets EcoResProductName for Kit
    /// </summary>
    /// <returns>
    /// Return EcoResProductName
    /// </returns>
    public display EcoResProductName GetEcoResProductName()
    {
        RetailKit retailKit;
        EcoResProductMaster ecoResProductMaster;
        EcoResProductTranslation ecoResProductTranslation;

        // Get kit order nubmer for retailkit order
        select firstonly RecId from retailKit where this.Kit == retailKit.RecId;

        // Get retail product master for retail kit order
        select firstonly RecId from ecoResProductMaster where ecoResProductMaster.RecId == retailKit.ProductMaster;

        // Get product kit name for retail kit order
        select firstonly RecId from ecoResProductTranslation
            where ecoResProductTranslation.Product == ecoResProductMaster.RecId &&
            ecoResProductTranslation.LanguageId == SystemParameters::getSystemLanguageId();

        return ecoResProductTranslation.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the record being deleted is not posted. Posted records can not be deleted.
    /// </summary>
    /// <returns></returns>
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        ret = ret && this.GetJournalPostedStatus() == NoYes::No;

        if (ret == false)
        {
            throw error("@Retail:PostedKitOrderDeleteError");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@REX1078</DeveloperDocumentation>
	<Label>@REX1074</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Kit</TitleField1>
	<TitleField2>Quantity</TitleField2>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Merchandising</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Kit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAssembly</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@RET5150</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAssembly</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Kit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comments</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Comments</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocation</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyInventLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAssembly</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Kit</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailKitRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailKitAssemblyOrderName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OrderSource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailKitOrderSource</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OrderType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>RetailKitOrderType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDataAreaId</Name>
					<Field>InventDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocation</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocation</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailKit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>RetailKit</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Kit</Name>
					<Field>Kit</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>