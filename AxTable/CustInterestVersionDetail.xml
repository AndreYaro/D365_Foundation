<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInterestVersionDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInterestVersionDetail extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkMasterCurrencyRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the currency is defined in the <c>CustInterestFee</c> table for the
    ///    <c>CustInterestVersionDetail</c> record.
    /// </summary>
    /// <returns>
    ///    true if the currency is found; otherwise, false.
    /// </returns>
    public boolean checkMasterCurrencyRecord()
    {
        boolean found = true;
        CustInterestFee custInterestFee;

        if (this.InterestCalcType == CustInterestCalcType::Amount)
        {
            found = (select firstonly RecId from custInterestFee
                            where custInterestFee.CurrencyCode == Ledger::accountingCurrency(CompanyInfo::current()) &&
                                custInterestFee.CustInterestVersionDetail == this.RecId).RecId != 0;
            if (!found)
            {
                warning("@SYS128238");
            }
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the range records of the specified <c>CustInterestFee</c> record if no currency is defined;
    ///    otherwise, deletes all the ranges except where the specified currency code is found.
    /// </summary>
    /// <param name="_exceptCurrencyCode">
    ///    The currency code that is associated with the ranges for which ranges should not be deleted.
    /// </param>
    private void deleteRanges(CurrencyCode _exceptCurrencyCode = '')
    {
        CustInterestRange custInterestRange;
        CustInterestFee custInterestFee;

        if (_exceptCurrencyCode)
        {
            delete_from custInterestRange exists join custInterestFee
                where custInterestRange.CustInterestFee == custInterestFee.RecId &&
                    custInterestFee.CurrencyCode != _exceptCurrencyCode && custInterestFee.CustInterestVersionDetail == this.RecId;
        }
        else
        {
            delete_from custInterestRange exists join custInterestFee
                where custInterestRange.CustInterestFee == custInterestFee.RecId && custInterestFee.CustInterestVersionDetail == this.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetInterestValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the interest value field depending on the interest fee type.
    /// </summary>
    private void resetInterestValue()
    {
        CustInterestFee custInterestFee;

        update_recordset custInterestFee
            setting InterestValue = 0
                where custInterestFee.CustInterestVersionDetail == this.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetMinMaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the minimum and maximum amount fields depending on the interest code and interest fee type.
    /// </summary>
    private void resetMinMaxAmount()
    {
        CustInterestFee custInterestFee;

        update_recordset custInterestFee
            setting MinimumInterestAmount = 0, MaximumInterestAmount = 0
                where custInterestFee.CustInterestVersionDetail == this.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the ledger account exists for interest payments and earnings if an interest rate is
    ///    defined.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validateAccount()
    {
        boolean isValid = true;

        if (!this.LedgerDimension)
        {
            if (this.InterestCalcType == CustInterestCalcType::Percentage &&
                    this.InterestByRange == CustInterestByRange::None && this.InterestPercent != 0)
            {
                isValid = checkFailed("@AccountsReceivable:InterestLedgerPostingAccountRequired");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = super();

        if (isValid)
        {
            isValid = this.validateAccount();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>CustInterestVersionDetail</c> table; if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_custInterestVersionDetailRecId">
    ///    The record ID of the <c>CustInterestVersionDetail</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(CustInterestVersionDetailRecId _custInterestVersionDetailRecId)
    {
        boolean found = true;

        if (!CustInterestVersionDetail::exist(_custInterestVersionDetailRecId))
        {
            found = checkFailed(strFmt(CustInterestVersionDetail::txtNotExist(), _custInterestVersionDetailRecId));
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>CustInterestVersionDetail</c> table exists.
    /// </summary>
    /// <param name="_custInterestVersionDetailRecId">
    ///    The record ID of the <c>CustInterestVersionDetail</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(CustInterestVersionDetailRecId _custInterestVersionDetailRecId)
    {
        boolean found;

        found = (select firstonly RecId from custInterestVersionDetail
                    where custInterestVersionDetail.RecId == _custInterestVersionDetailRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustInterestVersionDetail</c> table.
    /// </summary>
    /// <param name="_custInterestVersionDetailRecId">
    ///    The record ID of the <c>CustInterestVersionDetail</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CustInterestVersionDetail</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static CustInterestVersionDetail find(
        CustInterestVersionDetailRecId _custInterestVersionDetailRecId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInterestVersionDetail custInterestVersionDetail;

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInterestVersionDetail.concurrencyModel(_concurrencyModel);
        }

            custInterestVersionDetail.selectForUpdate(_forUpdate);

            select firstonly custInterestVersionDetail
            where custInterestVersionDetail.RecId == _custInterestVersionDetailRecId;

        return custInterestVersionDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByFeeType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustInterestVersionDetail</c> table.
    /// </summary>
    /// <param name="_custInterestVersionRecId">
    ///    The record ID of the <c>CustInterestVersion</c> record.
    /// </param>
    /// <param name="_feeType">
    ///    The fee type of the transaction.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CustInterestVersionDetail</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static CustInterestVersionDetail findByFeeType(
        CustInterestVersionRecId _custInterestVersionRecId,
        CustInterestFeeType _feeType,
        boolean _forUpdate = false)
    {
        CustInterestVersionDetail custInterestVersionDetail;

        custInterestVersionDetail.selectForUpdate(_forUpdate);

        select firstonly custInterestVersionDetail
            where custInterestVersionDetail.CustInterestVersion == _custInterestVersionRecId &&
                custInterestVersionDetail.FeeType == _feeType;

        return custInterestVersionDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(CustInterestVersionDetail, InterestByRange):
                if (this.InterestByRange == CustInterestByRange::None && this.orig().InterestByRange != CustInterestByRange::None)
                {
                    this.deleteRanges();
                }
                else  if ((this.InterestByRange != CustInterestByRange::Amount) && (this.orig().InterestByRange == CustInterestByRange::Amount))
                {
                    this.deleteRanges(Ledger::accountingCurrency(CompanyInfo::current()));
                }
                break;

            case fieldNum(CustInterestVersionDetail, InterestCalcType):
                if (this.InterestCalcType == CustInterestCalcType::Amount)
                {
                    this.InterestPercent = 0;
                }
                else if (this.InterestCalcType == CustInterestCalcType::Percentage)
                {
                    this.resetInterestValue();
                }

                this.checkMasterCurrencyRecord();
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CustInterest</ConfigurationKey>
	<DeveloperDocumentation>@SYS183888</DeveloperDocumentation>
	<FormRef>Interest</FormRef>
	<Label>@SYS183887</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CustInterestVersion</TitleField1>
	<TitleField2>FeeType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>AccountsReceivable</Modules>
	<ReplacementKey>CustInterestVersionDetail</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustInterestFee</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInterestFee</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustInterestVersion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FeeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestInterval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestCalculate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestByRange</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestCalcType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FeeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInterestVersion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustInterestVersionDetail</Name>
			<Label>@SYS183887</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustInterestVersion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FeeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestInterval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestCalculate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestByRange</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestCalcType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxInterest_PL</Name>
			<Label>@GLS110929</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxInterestPercent_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInterestVersion</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustInterestVersionRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FeeType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustInterestFeeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterestByRange</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustInterestByRange</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterestCalcType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterestCalcType</ExtendedDataType>
			<EnumType>CustInterestCalcType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterestCalculate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustInterestTimeUnit</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>InterestInterval</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PositiveDays</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InterestPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterestPct</ExtendedDataType>
			<Label>@SYS302479</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxInterestPercent_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>PL</CountryRegionCodes>
			<ExtendedDataType>InterestPct</ExtendedDataType>
			<Label>@GLS223116</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustInterestVersionDetail</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FeeType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustInterestVersion</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInterestVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInterestVersion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Parent</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Child</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInterestVersion</Name>
					<Field>CustInterestVersion</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInterestVersionDetail</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>