<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepLimitCacheSet_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetDepLimitCacheSet_JP extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>AssetDepLimitCacheSet_JP</c> table based on specified owner.
    /// </summary>
    /// <param name="_owner">
    /// The owner of cache set.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetDepLimitCacheSet_JP</c> table for the specified owner.
    /// </returns>
    public static AssetDepLimitCacheSet_JP findByOwner(
        anytype             _owner,
        boolean             _forUpdate          = false,
        ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto)
    {
        AssetDepLimitCacheSet_JP        assetDepLimitCacheSet;
        Description                     ownerNum;

        ownerNum = AssetDepLimitCacheSet_JP::generateOwnerNum(_owner);

        if (ownerNum)
        {
            assetDepLimitCacheSet.selectForUpdate(_forUpdate);
            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                assetDepLimitCacheSet.concurrencyModel(_concurrencyModel);
            }

            select firstOnly assetDepLimitCacheSet
                where assetDepLimitCacheSet.OwnerNum == ownerNum;
        }

        return assetDepLimitCacheSet;
    }
]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateByOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a record in the <c>AssetDepLimitCacheSet_JP</c> table based on specified owner.
    /// </summary>
    /// <param name="_owner">
    /// The owner of cache set.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetDepLimitCacheSet_JP</c> table for the specified owner. If not exists, create a new record and return it.
    /// </returns>
    public static AssetDepLimitCacheSet_JP findOrCreateByOwner(
        anytype             _owner              = null,
        boolean             _forUpdate          = false,
        ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto)
    {
        AssetDepLimitCacheSet_JP        assetDepLimitCacheSet;
        Description                     ownerNum;

        assetDepLimitCacheSet = AssetDepLimitCacheSet_JP::findByOwner(_owner, _forUpdate, _concurrencyModel);

        if (!assetDepLimitCacheSet)
        {
            if (prmisDefault(_owner))
            {
                ownerNum = AssetDepLimitCacheSet_JP::generateOwnerNum(newGuid());
            }
            else
            {
                ownerNum = AssetDepLimitCacheSet_JP::generateOwnerNum(_owner);
            }

            if (ownerNum)
            {
                assetDepLimitCacheSet.OwnerNum = ownerNum;
                assetDepLimitCacheSet.insert();
            }
        }

        return assetDepLimitCacheSet;
    }
]]></Source>
			</Method>
			<Method>
				<Name>generateOwnerNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the number of owner.
    /// </summary>
    /// <param name="_owner">
    /// The owner.
    /// </param>
    /// <returns>
    /// The number of owner.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If the specified owner is a unsupported type, an error will be thrown out.
    /// </exception>
    public static str generateOwnerNum(anytype _owner)
    {
        str             ret;
        Common          commond;
        #define.NumPatternForRecord('T\%1_\%2')
        #define.NumPatternForGUID('G\%1')

        switch (typeOf(_owner))
        {
            case Types::Record:
                commond = _owner;
                ret = strFmt(#NumPatternForRecord, commond.TableId, commond.RecId);
                break;

            case Types::Guid:
                ret = strFmt(#NumPatternForGUID, _owner);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>JP</CountryRegionCodes>
	<DeveloperDocumentation>@SYP4881443</DeveloperDocumentation>
	<TableGroup>WorksheetHeader</TableGroup>
	<Visible>No</Visible>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>FixedAssets</Modules>
	<ReplacementKey>OwnerNumIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OwnerNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OwnerNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>OwnerNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>OwnerNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>