<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReApprovalPolicyRuleFields</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchReApprovalPolicyRuleFields extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>fieldName</c> value for the current <c>RefFieldId</c> value.
    /// </summary>
    /// <returns>
    /// A <c>fieldName</c> value.
    /// </returns>
    public display fieldName fieldName()
    {
        fieldName   fieldName;
        DictField   dictField = new DictField(this.RefTableId, this.RefFieldId);

        if (this.RefTableId
            && this.RefFieldId
            && dictField)
        {
            fieldName = dictField.label();
        }

        return fieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchReApprovalPolicyRuleTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value for the <c>PurchReApprovalPolicyRuleFields</c> records from the
    /// <c>PurchReApprovalPolicyRuleTable</c> table.
    /// </summary>
    /// <param name="_purchReApprovalPolicyRuleTable">
    /// A record of the <c>PurchReApprovalPolicyRuleTable</c> table.
    /// </param>
    public void initFromPurchReApprovalPolicyRuleTable(PurchReApprovalPolicyRuleTable _purchReApprovalPolicyRuleTable)
    {
        this.PurchReApprovalPolicyRuleTable = _purchReApprovalPolicyRuleTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes default values for the <c>PurchReApprovalPolicyRuleFields</c> record.
    /// </summary>
    public void initValue()
    {
        super();

        if (this.PurchReApprovalPolicyRuleTable)
        {
            this.initFromPurchReApprovalPolicyRuleTable(this.PurchReApprovalPolicyRuleTable());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReApprovalPolicyRuleTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>PurchReApprovalPolicyRuleTable</c> record from the current <c>PurchReApprovalPolicyRuleFields</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    The <c>PurchReApprovalPolicyRuleTable</c> record.
    /// </returns>
    public PurchReApprovalPolicyRuleTable purchReApprovalPolicyRuleTable(boolean _forUpdate = false)
    {
        return PurchReApprovalPolicyRuleTable::find(this.PurchReApprovalPolicyRuleTable, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>tableName</c> value for the current <c>RefTableId</c> value.
    /// </summary>
    /// <returns>
    /// A <c>tableName</c> value.
    /// </returns>
    public display tableName tableName()
    {
        tableName   tableName;
        DictTable   dictTable = new DictTable(this.RefTableId);

        if (this.RefTableId
            && dictTable)
        {
            tableName = dictTable.label();
        }
        else
        {
            tableName = '';
        }

        return tableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRuleFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete rule fields.
    /// </summary>
    /// <param name="_purchReApprovalPolicyRuleTable">
    /// The record ID of a <c>PurchReApprovalPolicyRuleTable</c> record.
    /// </param>
    public static void deleteRuleFields(PurchReApprovalPolicyRuleRecId _purchReApprovalPolicyRuleTable)
    {
        PurchReApprovalPolicyRuleFields purchReApprovalPolicyRuleFields;

        delete_from purchReApprovalPolicyRuleFields
            where purchReApprovalPolicyRuleFields.PurchReApprovalPolicyRuleTable == _purchReApprovalPolicyRuleTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRuleFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a set of rule fields.
    /// </summary>
    /// <param name="_purchReApprovalPolicyRuleTable">
    /// The <c>PurchReApprovalPolicyRuleTable</c> record which to get rule fields for.
    /// </param>
    /// <returns>
    /// A packed set.
    /// </returns>
    public static container getRuleFields(PurchReApprovalPolicyRuleTable _purchReApprovalPolicyRuleTable)
    {
        Set                             ruleFields = new Set(Types::String);
        PurchReApprovalPolicyRuleFields purchReApprovalPolicyRuleFields;

        while select RefTableId, RefFieldId from purchReApprovalPolicyRuleFields
            where purchReApprovalPolicyRuleFields.PurchReApprovalPolicyRuleTable == _purchReApprovalPolicyRuleTable.RecId
        {
            ruleFields.add(PurchReApprovalPolicyRuleFields::valueStr(purchReApprovalPolicyRuleFields.RefTableId, purchReApprovalPolicyRuleFields.RefFieldId));
        }

        return ruleFields.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRuleFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves rule fields.
    /// </summary>
    /// <param name="_purchReApprovalPolicyRuleTable">
    /// The <c>PurchReApprovalPolicyRuleTable</c> record which to save rule fields for.
    /// </param>
    /// <param name="_ruleFields">
    /// A packed set of fields.
    /// </param>
    /// <returns>
    /// The <c>PurchReApprovalPolicyRuleTable</c> record having associated rule fields.
    /// </returns>
    public static PurchReApprovalPolicyRuleTable saveRuleFields(PurchReApprovalPolicyRuleTable _purchReApprovalPolicyRuleTable, container _ruleFields)
    {
        Set                             ruleFields = Set::create(_ruleFields);
        Set                             ruleFieldsOrig;
        SetEnumerator                   ruleFieldEnumerator;
        PurchReApprovalPolicyRuleFields purchReApprovalPolicyRuleFields;
        PurchReApprovalPolicyRuleTable  purchReApprovalPolicyRuleTable = _purchReApprovalPolicyRuleTable;
        PurchReApprovalPolicyRuleTable  purchReApprovalPolicyRuleTableOrig;
        SysPolicy                       sysPolicy;
        SysPolicyRuleType               sysPolicyRuleType  = SysPolicyRuleType::findByRuleTypePolicyType(SysPolicyRuleTypeEnum::PurchReApprovalPolicyRule, SysPolicyTypeEnum::PurchasingPolicy);
        utcDateTime                     currentDate = DateTimeUtil::utcNow();
        boolean                         createNewRule = true;

        if (_ruleFields
            && conLen(_ruleFields) > 0)
        {
            ruleFields = Set::create(_ruleFields);
            ruleFieldEnumerator = ruleFields.getEnumerator();

            // Check if rule field list has changed
            ruleFieldsOrig = Set::create(PurchReApprovalPolicyRuleFields::getRuleFields(_purchReApprovalPolicyRuleTable));
            purchReApprovalPolicyRuleTableOrig = PurchReApprovalPolicyRuleTable::find(_purchReApprovalPolicyRuleTable.RecId);

            if (!ruleFieldsOrig.equal(ruleFields)
                || _purchReApprovalPolicyRuleTable.ValidFrom != purchReApprovalPolicyRuleTableOrig.ValidFrom)
            {
                sysPolicy = sysPolicy::find(_purchReApprovalPolicyRuleTable.Policy);

                ttsBegin;
                if (_purchReApprovalPolicyRuleTable.RecId)
                {
                    // Existing rule, expire existing
                    purchReApprovalPolicyRuleTable = PurchReApprovalPolicyRuleTable::findRuleForRuleType(sysPolicy.RecId, sysPolicyRuleType.RecId, _purchReApprovalPolicyRuleTable.ValidFrom, _purchReApprovalPolicyRuleTable.ValidFrom, true);
                    if (purchReApprovalPolicyRuleTable.RecId)
                    {
                        // Changed rule or existing rule is valid in the past
                        if (_purchReApprovalPolicyRuleTable.ValidFrom < currentDate
                            || purchReApprovalPolicyRuleTable.ValidFrom < currentDate)
                        {
                            if (_purchReApprovalPolicyRuleTable.ValidFrom < currentDate)
                            {
                                _purchReApprovalPolicyRuleTable.ValidFrom = currentDate;
                            }

                            purchReApprovalPolicyRuleTable.ValidTo = DateTimeUtil::addSeconds(_purchReApprovalPolicyRuleTable.ValidFrom, -1);
                            if (purchReApprovalPolicyRuleTable.ValidTo < purchReApprovalPolicyRuleTable.ValidFrom)
                            {
                                purchReApprovalPolicyRuleTable.ValidTo = purchReApprovalPolicyRuleTable.ValidFrom;

                                // Set valid from to future date
                                _purchReApprovalPolicyRuleTable.ValidFrom = DateTimeUtil::addSeconds(purchReApprovalPolicyRuleTable.ValidTo, 1);
                            }
                        }
                        else
                        {
                            // Update future rule
                            purchReApprovalPolicyRuleTable.initFromPurchReApprovalPolicyRuleTable(_purchReApprovalPolicyRuleTable);

                            createNewRule = false;
                        }
                    }
                    else
                    {
                        // Update existing rule
                        purchReApprovalPolicyRuleTable = PurchReApprovalPolicyRuleTable::find(_purchReApprovalPolicyRuleTable.RecId, true);
                        purchReApprovalPolicyRuleTable.initFromPurchReApprovalPolicyRuleTable(_purchReApprovalPolicyRuleTable);

                        createNewRule = false;
                    }

                    purchReApprovalPolicyRuleTable.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                    purchReApprovalPolicyRuleTable.update();
                }

                // Create new rule
                if (createNewRule)
                {
                    purchReApprovalPolicyRuleTable = PurchReApprovalPolicyRuleTable::createRule(sysPolicy, _purchReApprovalPolicyRuleTable.ValidFrom, _purchReApprovalPolicyRuleTable.ValidTo);
                }
                else
                {
                    // Delete any selected fields
                    PurchReApprovalPolicyRuleFields::deleteRuleFields(purchReApprovalPolicyRuleTable.RecId);
                }

                while (ruleFieldEnumerator.moveNext())
                {
                    purchReApprovalPolicyRuleFields.clear();
                    purchReApprovalPolicyRuleFields.initFromPurchReApprovalPolicyRuleTable(purchReApprovalPolicyRuleTable);

                    [purchReApprovalPolicyRuleFields.RefTableId, purchReApprovalPolicyRuleFields.RefFieldId] = PurchReApprovalPolicyRuleFields::valueSplit(ruleFieldEnumerator.current());

                    purchReApprovalPolicyRuleFields.insert();
                }
                ttsCommit;
            }
        }
        else
        {
            ttsBegin;
            if (!_purchReApprovalPolicyRuleTable.RecId)
            {
                purchReApprovalPolicyRuleTable = PurchReApprovalPolicyRuleTable::createRule(sysPolicy, _purchReApprovalPolicyRuleTable.ValidFrom, _purchReApprovalPolicyRuleTable.ValidTo);
            }

            // Delete any selected fields
            PurchReApprovalPolicyRuleFields::deleteRuleFields(purchReApprovalPolicyRuleTable.RecId);
            ttsCommit;
        }

        return purchReApprovalPolicyRuleTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits a string into two values.
    /// </summary>
    /// <param name="_value">
    /// The string to split.
    /// </param>
    /// <returns>
    /// A container that contains two substrings.
    /// </returns>
    public static container valueSplit(str _value)
    {
        str key, value;
        int i = strFind(_value, '#', 1, strLen(_value));
        key = subStr(_value, 1, i-1);
        value = subStr(_value, i+1, strLen(_value)-i);

        return [key, value];
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Concatenates a string, depending on a key and value pair.
    /// </summary>
    /// <param name="_key">
    /// The key value.
    /// </param>
    /// <param name="_value">
    /// The value of the value parameter.
    /// </param>
    /// <returns>
    /// A string that contains a key and value.
    /// </returns>
    public static str valueStr(anytype _key, anytype _value)
    {
        return strFmt("%1#%2", _key, _value);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@GLS180244</DeveloperDocumentation>
	<Label>@GLS180269</Label>
	<TitleField1>RefTableId</TitleField1>
	<TitleField2>RefFieldId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>PolicyRuleFieldIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchReApprovalPolicyRuleTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>tableName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>fieldName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchReApprovalPolicyRuleTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefFieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchReApprovalPolicyRuleTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchReApprovalPolicyRuleTable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReApprovalPolicyRuleRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefFieldId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefFieldId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PolicyRuleFieldIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchReApprovalPolicyRuleTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefFieldId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchReApprovalPolicyRuleTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchReApprovalPolicyRuleTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchReApprovalPolicyRuleTable</Name>
					<Field>PurchReApprovalPolicyRuleTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>