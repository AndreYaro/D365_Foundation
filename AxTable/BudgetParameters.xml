<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetParameters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>budgetApportionmentText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget apportionment text for the budget remaining calculation text.
    /// </summary>
    /// <returns>
    /// The budget apportionment text for the budget remaining calculation text.
    /// </returns>
    public str budgetApportionmentText()
    {
        str         budgetApportionmentText;
        DictField   dictField;

        if (this.UseOnlyApportionment)
        {
            dictField = new DictField(tablenum(BudgetParameters), fieldnum(BudgetParameters, UseOnlyApportionment));

            budgetApportionmentText = dictField.label();
        }

        return budgetApportionmentText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        throw error("@SYS23721");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetTransCreateAsCompletedEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any of the <c>CreateCompletedBudgetTrans</c> fields are enabled in the
    /// <c>BudgetParameters</c> table.
    /// </summary>
    /// <returns>
    /// true when at least one of the create completed budget transfer transaction field is enabled;
    /// otherwise, false.
    /// </returns>
    public boolean isBudgetTransCreateAsCompletedEnabled()
    {
        return (this.IsAssetBudgetTransCreateAsCompleted
            || this.IsAssetBudgetTransCreateAsCompleted_RU
            || this.IsDemandFcstBudgetTransCreateAsCompleted
            || this.IsProjectBudgetTransCreateAsCompleted
            || this.IsSupplyFcstBudgetTransCreateAsCompleted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllBudgetTransCreateAsCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any of the create completed budget transfer transaction fields are enabled when
    /// the budget control is enabled and verifies whether the corresponding default transaction code is
    /// valid.
    /// </summary>
    /// <returns>
    /// true if all of the create completed fields are valid; otherwise, false.
    /// </returns>
    public boolean validateAllBudgetTransCreateAsCompleted()
    {
        boolean isValid = true;

        isValid = this.validateBudgetTransCreateAsCompleted();

        if (this.IsProjectBudgetTransCreateAsCompleted)
        {
            isValid = this.validateDefaultBudgetTransactionCode(BudgetTransactionType::Project) && isValid;
        }

        if (this.IsAssetBudgetTransCreateAsCompleted)
        {
            isValid = this.validateDefaultBudgetTransactionCode(BudgetTransactionType::FixedAsset) && isValid;
        }

        if (this.IsDemandFcstBudgetTransCreateAsCompleted)
        {
            isValid = this.validateDefaultBudgetTransactionCode(BudgetTransactionType::SalesForecast) && isValid;
        }

        if (this.IsSupplyFcstBudgetTransCreateAsCompleted)
        {
            isValid = this.validateDefaultBudgetTransactionCode(BudgetTransactionType::PurchForecast) && isValid;
        }

        if (this.IsAssetBudgetTransCreateAsCompleted_RU)
        {
            isValid = this.validateDefaultBudgetTransactionCode(BudgetTransactionType::FixedAsset_RU) && isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetTransCreateAsCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any of the <c>CreateCompletedBudgetTrans</c> fields are enabled when the budget
    /// control is enabled.
    /// </summary>
    /// <returns>
    /// true if the budget control is not enabled and no create completed fields are enabled; otherwise,
    /// false.
    /// </returns>
    public boolean validateBudgetTransCreateAsCompleted()
    {
        boolean isValid = true;

        if (this.isBudgetTransCreateAsCompletedEnabled() &&
            Ledger::isLedgerBudgetControlEnabled())
        {
            isValid = checkFailed("@SYS327516");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCheckBalanceCreditAccountOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>CheckBalanceCreditAccountOption</c> field in the <c>BudgetParameters</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>CheckBalanceCreditAccountOption</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateCheckBalanceCreditAccountOption()
    {
        boolean isValid = true;

        if (this.CheckRevenueBudgetBalanceOption != BudgetCheckRevenueBalanceOption::None)
        {
            if (this.isBudgetTransCreateAsCompletedEnabled())
            {
                isValid = checkFailed(strfmt("@SYS136982", "@SYS130258"));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeriveAccountStructureFromCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate derive account structure from combination parameter.
    /// </summary>
    /// <returns>
    /// true if the DeriveAccountStructureFromCombination field is valid; otherwise, false.
    /// </returns>
    protected boolean validateDeriveAccountStructureFromCombination()
    {
        boolean isValid = true;

        if (this.DeriveAccountStructureFromCombination == NoYes::Yes)
        {
            if (!BudgetPrimaryLedgerDimensionAttribute::existByPrimaryLedgerDimensionAttribute(Ledger::current(), DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)))
            {
                isValid = checkFailed("@Budget:NoMainAccountInDimensionForBudgeting");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDefaultBudgetTransactionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a default budget transaction code exists for the specified budget transaction type.
    /// </summary>
    /// <param name="_budgetTransactionType">
    /// The budget transaction type.
    /// </param>
    /// <returns>
    /// true if the default budget transaction code exists; otherwise, false.
    /// </returns>
    public boolean validateDefaultBudgetTransactionCode(BudgetTransactionType _budgetTransactionType)
    {
        boolean isValid = true;

        if (BudgetTransactionCode::existDefaultByTransactionType(_budgetTransactionType) == false)
        {
            isValid = checkFailed(strfmt("@SYS130256", _budgetTransactionType));
        }
        else
        {
            isValid = BudgetTransactionCode::validateDefaultTransactionCode(BudgetTransactionCode::findDefaultByTransactionType(_budgetTransactionType), this);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ok;

        ok = super(_fieldIdToCheck);

        if (ok)
        {
            switch (_fieldIdToCheck)
            {
                case (fieldnum(BudgetParameters, IsProjectBudgetTransCreateAsCompleted)) :
                    if (this.IsProjectBudgetTransCreateAsCompleted)
                    {
                        ok = this.validateDefaultBudgetTransactionCode(BudgetTransactionType::Project) && this.validateBudgetTransCreateAsCompleted();
                    }
                    break;

                case (fieldnum(BudgetParameters, IsAssetBudgetTransCreateAsCompleted)) :
                    if (this.IsAssetBudgetTransCreateAsCompleted)
                    {
                        ok = this.validateDefaultBudgetTransactionCode(BudgetTransactionType::FixedAsset) && this.validateBudgetTransCreateAsCompleted();
                    }
                    break;

                case (fieldnum(BudgetParameters, IsAssetBudgetTransCreateAsCompleted_RU)) :
                    ok = this.validateDefaultBudgetTransactionCode(BudgetTransactionType::FixedAsset_RU) && this.validateBudgetTransCreateAsCompleted();
                    break;

                case (fieldnum(BudgetParameters, IsDemandFcstBudgetTransCreateAsCompleted)) :
                    if (this.IsDemandFcstBudgetTransCreateAsCompleted)
                    {
                        ok = this.validateDefaultBudgetTransactionCode(BudgetTransactionType::SalesForecast) && this.validateBudgetTransCreateAsCompleted();
                    }
                    break;

                case (fieldnum(BudgetParameters, IsSupplyFcstBudgetTransCreateAsCompleted)) :
                    if (this.IsSupplyFcstBudgetTransCreateAsCompleted)
                    {
                        ok = this.validateDefaultBudgetTransactionCode(BudgetTransactionType::PurchForecast) && this.validateBudgetTransCreateAsCompleted();
                    }
                    break;

                case (fieldnum(BudgetParameters, CheckRevenueBudgetBalanceOption)) :
                    ok = this.validateCheckBalanceCreditAccountOption();
                    break;

                case (fieldnum(BudgetParameters, LedgerJournalName)) :
                    ok = this.validateLedgerJournalName();
                    break;

                case (fieldNum(BudgetParameters, IsBudgetReservationEnabled)) :
                    if (this.IsBudgetReservationEnabled == NoYes::No && BudgetReservationHeader_PSN::existDraftOrPostedBudgetReservations())
                    {
                        if (Box::yesNo("@Budgeting_BudgetReservationPS:BudgetParametersGBRExistWarning", DialogButton::No) == DialogButton::No)
                        {
                            ok = false;
                        }
                    }
                    break;

                case (fieldNum(BudgetParameters, DeriveAccountStructureFromCombination)) :
                    ok = this.validateDeriveAccountStructureFromCombination();
                    break;

                default:
                    break;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>LedgerJournalName</c> field in the <c>BudgetParameters</c> table is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>LedgerJournalName</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateLedgerJournalName()
    {
        boolean isValid = true;

        if (this.LedgerJournalName)
        {
            if (LedgerJournalName::find(this.LedgerJournalName).JournalType != LedgerJournalType::Budget)
            {
                isValid = checkFailed(strfmt("@SYS112224", this.LedgerJournalName, "@SYS67664", "@SYS1436"));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;

        isValid = super();

        if (isValid)
        {
            isValid = this.validateAllBudgetTransCreateAsCompleted() && isValid;
            isValid = this.validateCheckBalanceCreditAccountOption() && isValid;
            isValid = this.validateLedgerJournalName() && isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record occurs in the <c>BudgetParameters</c> table; if not, an
    ///    error message is displayed.
    /// </summary>
    /// <param name="_key">
    ///    The parameters key of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(ParametersKey _key)
    {
        boolean ret = true;

        if (!BudgetParameters::exist(_key))
        {
            ret = checkFailed(strfmt(BudgetParameters::txtNotExist(), _key));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record occurs in the <c>BudgetParameters</c> table.
    /// </summary>
    /// <param name="_key">
    ///    The parameters key of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(ParametersKey _key)
    {
        boolean found;

        found = (select firstonly
                    RecId
                from
                    budgetParameters
                where
                    budgetParameters.Key == _key).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetParameters</c> table.
    /// </summary>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetParameters</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetParameters find(boolean _forupdate = false)
    {
        BudgetParameters parameter;

        if (_forupdate)
        {
            parameter.selectForUpdate(_forupdate);
        }

        select firstonly parameter
            index KeyIdx
            where parameter.Key == 0;

        if (!parameter && !parameter.isTmp())
        {
            Company::createParameter(parameter);
        }

        return parameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number sequence module for the <c>BudgetParameters</c> table.
    /// </summary>
    /// <returns>
    ///    The number sequence module for the <c>BudgetParameters</c> table.
    /// </returns>
    public static NumberSeqModule numberSeqModule()
    {
        return NumberSeqModule::Budget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefBudgetPlanDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a number sequence reference for the budget plan <c>BudgetPlanDocumentNumber</c> extended data
    /// type.
    /// </summary>
    /// <returns>
    /// An instance of the <c>NumberSequenceReference</c> class.
    /// </returns>
    public static NumberSequenceReference numRefBudgetPlanDocumentNumber()
    {
        return NumberSeqReference::findReference(extendedtypenum(BudgetPlanDocumentNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefBudgetTransactionId</Name>
				<Source><![CDATA[
    public static NumberSequenceReference numRefBudgetTransactionId()
    {
        return NumberSeqReference::findReference(extendedtypenum(BudgetTransactionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefPurchCommitmentNum_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a number sequence reference for the <c>PurchCommitmentNumber_PSN</c> extended data type.
    /// </summary>
    /// <returns>
    /// A <c>NumberSequenceReference</c> table buffer.
    /// </returns>
    public static NumberSequenceReference numRefPurchCommitmentNum_PSN()
    {
        return NumberSeqReference::findReference(extendedTypeNum(PurchCommitmentNumber_PSN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefBudgetReservation_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a number sequence reference for the <c>BudgetReservationDocumentNumber_PSN</c> extended data type.
    /// </summary>
    /// <returns>
    /// A <c>NumberSequenceReference</c> table buffer.
    /// </returns>
    public static NumberSequenceReference numRefBudgetReservation_PSN()
    {
        return NumberSeqReference::findReference(extendedTypeNum(BudgetReservationDocumentNumber_PSN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefBudgetReservationVoucher_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a number sequence reference for the <c>BudgetReservationVoucher_PSN</c> extended data type.
    /// </summary>
    /// <returns>
    /// A <c>NumberSequenceReference</c> table buffer.
    /// </returns>
    public static NumberSequenceReference numRefBudgetReservationVoucher_PSN()
    {
        return NumberSeqReference::findReference(extendedTypeNum(BudgetReservationVoucher_PSN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS127667";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicBudget</ConfigurationKey>
	<DeveloperDocumentation>@SYS127702</DeveloperDocumentation>
	<Label>@SYS127632</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>Key</TitleField1>
	<TitleField2>LedgerJournalName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>KeyIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<PrimaryIndex>KeyIdx</PrimaryIndex>
	<ReplacementKey>KeyIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CheckRevenueBudgetBalanceOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsProjectBudgetTransCreateAsCompleted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAssetBudgetTransCreateAsCompleted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDemandFcstBudgetTransCreateAsCompleted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSupplyFcstBudgetTransCreateAsCompleted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Key</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetApportionments</Name>
			<Label>@SPS383</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseOnlyApportionment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetOptions</Name>
			<Label>@SYS15436</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashFlowForecastPeriodAllocationKey</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAllowTransferRuleEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayLegacyBudgetAnalysis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeriveAccountStructureFromCombination</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CheckRevenueBudgetBalance</Name>
			<Label>@SYS191124</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CheckRevenueBudgetBalanceOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CheckRevenueBudgetBalanceInterval</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CreateCompletedBudgetTrans</Name>
			<Label>@SYS130258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsProjectBudgetTransCreateAsCompleted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAssetBudgetTransCreateAsCompleted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDemandFcstBudgetTransCreateAsCompleted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSupplyFcstBudgetTransCreateAsCompleted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAssetBudgetTransCreateAsCompleted_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FrenchRegulatory</Name>
			<Label>@SYS4008229</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsFrenchRegulatoryEnabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Journals</Name>
			<Label>@SYS9020</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PreliminaryBudget</Name>
			<Label>@SPS375</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SumPreliminaryBudget</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Regulatory</Name>
			<Label>@Budgeting_BudgetReservationPS:BudgetParametersRegulatory</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsFrenchRegulatoryEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsBudgetReservationEnabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EncumbranceControl</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PreventIncreaseToCarryForwardEncumbrance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseSessionDateForAccounting</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashFlowForecastPeriodAllocationKey</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerAllocateKeyId</ExtendedDataType>
			<Label>@SYS6252</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CheckRevenueBudgetBalanceInterval</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BudgetCheckRevenueBalanceInterval</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CheckRevenueBudgetBalanceOption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BudgetCheckRevenueBalanceOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAllowTransferRuleEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS320738</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAssetBudgetTransCreateAsCompleted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Asset</ConfigurationKey>
			<Label>@SYS71980</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDemandFcstBudgetTransCreateAsCompleted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Forecast</ConfigurationKey>
			<Label>@SYS15056</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsFrenchRegulatoryEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
			<Label>@SYS4008230</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsProjectBudgetTransCreateAsCompleted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS105983</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSupplyFcstBudgetTransCreateAsCompleted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Forecast</ConfigurationKey>
			<Label>@SYS9646</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Key</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ParametersKey</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerJournalName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasicBudget</ConfigurationKey>
			<ExtendedDataType>LedgerJournalNameId</ExtendedDataType>
			<Label>@SYS67664</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SumPreliminaryBudget</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<Label>@SPS375</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseOnlyApportionment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<Label>@SPS383</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsBudgetReservationEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>BudgetReservation_PSN</ConfigurationKey>
			<Label>@Budgeting_BudgetReservationPS:GeneralBudgetReservations</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PreventIncreaseToCarryForwardEncumbrance</Name>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<Label>@Budgeting_BudgetReservationPS:PreventIncreaseToCarryForwardEncumbrance</Label>
			<MinReadAccess>Yes</MinReadAccess>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisplayLegacyBudgetAnalysis</Name>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@Budget:BudgetParametersFieldLegacyBudgetAnalysis</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAssetBudgetTransCreateAsCompleted_RU</Name>
			<ConfigurationKey>RAsset</ConfigurationKey>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<Label>@GLS106645</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseSessionDateForAccounting</Name>
			<ConfigurationKey>BudgetReservation_PSN</ConfigurationKey>
			<ExtendedDataType>BudgetReservationUseSessionDate_PSN</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DeriveAccountStructureFromCombination</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@Budget:BudgetParametersFieldDefaultAccountStructureHelp</HelpText>
			<Label>@Budget:BudgetParametersFieldDefaultAccountStructure</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>KeyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Key</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerAllocateKey</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerAllocateKey</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashFlowForecastPeriodAllocationKey</Name>
					<SourceEDT>LedgerAllocateKeyId</SourceEDT>
					<Field>CashFlowForecastPeriodAllocationKey</Field>
					<RelatedField>Key</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>KeyIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalName</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerJournalName</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalName</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetParameters</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalName</Name>
					<SourceEDT>LedgerJournalNameId</SourceEDT>
					<Field>LedgerJournalName</Field>
					<RelatedField>JournalName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalNameIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>