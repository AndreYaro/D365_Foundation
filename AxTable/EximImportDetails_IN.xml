<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximImportDetails_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EximImportDetails_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayBalImpQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets BalanceImportQuantity from difference of Qty and QtyImported values.
    /// </summary>
    /// <returns>BalanceImportQuantity</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display Qty displayBalImpQty()
    {
        Qty balImpQty;

        if (this.Qty > this.QtyImported)
        {
            balImpQty = this.Qty - this.QtyImported;
        }

        return balImpQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBalImpValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets BalanceImportValue from difference of Value and ValueImported field.
    /// </summary>
    /// <returns>BalanceImportValue</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display EximValue_IN displayBalImpValue()
    {
        EximValue_IN balImpValue;

        if (this.Value > this.ValueImported)
        {
            balImpValue = this.Value - this.ValueImported;
        }

        return balImpValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNetBalQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets NetBalanceQuantity from EximSummaryImportableItems_IN table for specified EximAuthorizationSchemesTable_IN RecId.
    /// </summary>
    /// <returns>Net Balance quantity</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display Qty displayNetBalQty()
    {
        Qty netBalQuantity;
        Qty balImpQty;
        Qty cumulativeSoldQty;

        if (this.Qty > this.QtyImported)
        {
            balImpQty = this.Qty - this.QtyImported;
        }

        if (balImpQty)
        {
            cumulativeSoldQty = EximSummaryImportableItems_IN::cumulativeSoldQty(
                                                                this.AuthorizationSchemesTableRecId,
                                                                this.ItemId);
            if (balImpQty > (cumulativeSoldQty + this.SplitQty))
            {
                netBalQuantity = balImpQty - (cumulativeSoldQty + this.SplitQty);
            }
        }
        return netBalQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNetBalValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the NetBalanceValue from difference of Value and ValueImported fields of EximImportDetails_IN table.
    /// </summary>
    /// <returns>NetBalanceValue</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display EximValue_IN displayNetBalValue()
    {
        EximValue_IN netBalValue;
        EximValue_IN balImpValue;
        EximValue_IN cumulativeSoldValue;

        if (this.Value > this.ValueImported)
        {
            balImpValue = this.Value - this.ValueImported;
        }

        if (balImpValue)
        {
            cumulativeSoldValue = EximSummaryImportableItems_IN::cumulativeSoldValue(
                                                                    this.AuthorizationSchemesTableRecId,
                                                                    this.ItemId);

            if (balImpValue > (cumulativeSoldValue + this.SplitValue))
            {
                netBalValue = balImpValue - (cumulativeSoldValue + this.SplitValue);
            }
        }

        return netBalValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySoldQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets cumulativeSoldQuantity for specified EximAuthorizationTable_IN table recId and Itemid.
    /// </summary>
    /// <returns>Cumulative Sold Quantity</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display Qty displaySoldQty()
    {
        return EximSummaryImportableItems_IN::cumulativeSoldQty(this.AuthorizationSchemesTableRecId, this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySoldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets cumulativeSoldValue for specified EximAuthorizationTable_IN table Recid and ItemId.
    /// </summary>
    /// <returns>Cumulative Sold value</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display EximValue_IN displaySoldValue()
    {
        return EximSummaryImportableItems_IN::cumulativeSoldValue(this.AuthorizationSchemesTableRecId, this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSplitPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets SplitPct for EximImportDetails_IN for specified EximAuthorizationSchemesTableRecId.
    /// </summary>
    /// <param name="_authorizationId">EximAuthorizationSchemesTableRecId</param>
    /// <returns>EximValue_IN, SplitPct</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximValue_IN getSplitPct(RefRecId _authorizationId)
    {
        return (select firstonly eximImportDetails_IN
                    where eximImportDetails_IN.AuthorizationSchemesTableRecId == _authorizationId).SplitPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ItemName for specified Itemid.
    /// </summary>
    /// <returns>ItemName</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display ItemName itemName()
    {
        return InventTable::find(this.ItemId).itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets balance amount for given EximAuthorizationSchemesTableRecId_IN.
    /// </summary>
    /// <param name="_authorizationSchemesTableRecId">EximAuthorizationSchemesTableRecId_IN</param>
    /// <returns>AmountMST, balance assessable value</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AmountMST balanceAmount(EximAuthorizationSchemesTableRecId_IN _authorizationSchemesTableRecId)
    {
        AmountMST allowedAssessableValue;
        AmountMST utilized;
        AmountMST balance;
        AmountMST sold;

        allowedAssessableValue = EximAuthorizationSchemesLine_IN::importAssessableValue(_authorizationSchemesTableRecId);

        utilized = EximImportTrans_IN::cumulativeAssessableValue(_authorizationSchemesTableRecId);

        if (utilized > allowedAssessableValue)
        {
            utilized = allowedAssessableValue;
        }

        sold = EximAuthorizationSchemesLine_IN::soldAssessableValue(_authorizationSchemesTableRecId);

        balance = allowedAssessableValue - (utilized + sold);

        balance = balance < 0 ? 0 : balance;

        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if EximImportDetails_IN record exists for specified EximAuthorizationSchemesTableRecId_IN and ItemId.
    /// </summary>
    /// <param name="_authorizationSchemesTableRecId">EximAuthorizationSchemesTableRecId_IN</param>
    /// <param name="_itemId">ItemId</param>
    /// <returns>true if EximImportDetails_IN record is found otherwise, false</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(
        EximAuthorizationSchemesTableRecId_IN _authorizationSchemesTableRecId,
        ItemId                                _itemId)
    {
        return _authorizationSchemesTableRecId && _itemId
            && (select firstonly RecId from  eximImportDetails_IN
                    where eximImportDetails_IN.AuthorizationSchemesTableRecId == _authorizationSchemesTableRecId
                       && eximImportDetails_IN.ItemId                         == _itemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximImportDetails_IN table for the specified RecId.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing EximImportDetails_IN table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximImportDetails_IN find(
        RefRecId            _recId,
        boolean             _forUpdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        EximImportDetails_IN eximImportDetails;

        eximImportDetails.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            eximImportDetails.concurrencyModel(_concurrencyModel);
        }

        select firstonly eximImportDetails
            where eximImportDetails.RecId == _recId;

        return eximImportDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAuthorizationItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximImportDetails_IN table for the specified RecId.
    /// </summary>
    /// <param name="_authorizationSchemesTableRecId">EximAuthorizationSchemesTableRecId_IN</param>
    /// <param name="_itemId">ItemId</param>
    /// <param name="_forUpdate">selectForUpdate</param>
    /// <returns>EximImportDetails_IN table record</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximImportDetails_IN findByAuthorizationItemId(
        EximAuthorizationSchemesTableRecId_IN _authorizationSchemesTableRecId,
        ItemId                                _itemId,
        boolean                               _forUpdate = false)
    {
        EximImportDetails_IN importDetails;

        if (_authorizationSchemesTableRecId && _itemId)
        {
            importDetails.selectForUpdate(_forUpdate);

            select firstonly importDetails
                where importDetails.AuthorizationSchemesTableRecId == _authorizationSchemesTableRecId
                   && importDetails.ItemId                         == _itemId;
        }

        return importDetails;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS62461</DeveloperDocumentation>
	<FormRef>EximImportDetails_IN</FormRef>
	<Label>@GLS61564</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>Unit</TitleField2>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ExportImportIndia</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>AuthorizationItemIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AuthorizationSchemesTableRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AuthorizationSchemesTableRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemData</Name>
			<Label>@SYS23860</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyImported</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValueImported</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SplitPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SplitValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SplitQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AuthorizationSchemesTableRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>EximAuthorizationSchemesTableRecId_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyImported</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SplitPct</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EximValue_IN</ExtendedDataType>
			<Label>@GLS62289</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SplitQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@SYS19602</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SplitValue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EximValue_IN</ExtendedDataType>
			<Label>@GLS62287</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Unit</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Value</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EximValue_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ValueImported</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EximValue_IN</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AuthorizationItemIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AuthorizationSchemesTableRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EximAuthorizationSchemesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximAuthorizationSchemesTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EximAuthorizationSchemesTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximAuthorizationSchemesTable_IN_EximImportDetails_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AuthorizationSchemesTableRecId</Name>
					<Field>AuthorizationSchemesTableRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>