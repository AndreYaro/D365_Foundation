<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UserRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class UserRequest extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number for the request.
    /// </summary>
    /// <returns>
    /// A string that represents the account number.
    /// </returns>
    /// <remarks>
    /// Sub types of the <c>UserRequest</c> class will provide the account number specific to the sub type.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display UserRequestAccountNumber accountNumber()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the user request can be deleted.
    /// </summary>
    /// <returns>
    /// true if the user request can be deleted by the user; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean allowDelete()
    {
        return this.RequestStatus == UserRequestStatus::Draft;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the user request can be submitted to the workflow.
    /// </summary>
    /// <param name="_workflowType">
    /// The workflow template name.
    /// </param>
    /// <returns>
    /// true if the user request can be submitted by the user; otherwise, false.
    /// </returns>
    public boolean canSubmitToWorkflow(str _workflowType = '')
    {
        return this.RequestStatus == UserRequestStatus::Draft || this.RequestStatus == UserRequestStatus::WorkflowCanceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the e-mail for the person who is related to the user request.
    /// </summary>
    /// <returns>
    /// true if the e-mail belongs to the person for which the request is created; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkEmail()
    {
        DirPartyContactInfoView contactInfo;
        boolean                 ret = true;

        if (this.Email != 0)
        {
            select RecId from contactInfo
                where contactInfo.Party == this.Person
                && contactInfo.ElectronicAddress == this.Email
                && contactInfo.Type == LogisticsElectronicAddressMethodType::Email;

            if (contactInfo.RecId == 0)
            {
                ret = checkFailed(strfmt("@SYS334523"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPerson</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the person for the request.
    /// </summary>
    /// <returns>
    ///    true if the person is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///   Sub types of <c>UserRequest</c> can override this this method to validate the person.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkPerson()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRequestedRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the requested role is available for the specified person.
    /// </summary>
    /// <returns>
    /// true if the role is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Sub types of the <c>UserRequest</c> class can override this this method to validate the role.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkRequestedRole()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUser</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the user is valid for the request.
    /// </summary>
    /// <returns>
    ///    true if the user is valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkUser()
    {
        DirPersonUser   dirPersonUser;
        boolean         ret = true;

        if (this.User != '' && this.RequestAction == UserRequestAction::InactivateUser)
        {
            select RecId from dirPersonUser
                where dirPersonUser.PersonParty == this.Person
                && dirPersonUser.User == this.User;

            if (dirPersonUser.RecId == 0)
            {
                ret = checkFailed("@SYS107243");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>email</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the e-mail address that is used for notifications for the request.
    /// </summary>
    /// <returns>
    /// The e-mail address of the person of the request.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Email email()
    {
        return LogisticsElectronicAddress::findRecId(this.Email).Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the request from a related record.
    /// </summary>
    /// <param name="_relatedRecord">
    /// The related record to initialize the request from.
    /// </param>
    /// <remarks>
    /// Sub types of the <c>UserRequest</c> class can override this this method to initialize the request.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFrom(Common _relatedRecord)
    {
        ContactPerson contact;

        if (_relatedRecord is ContactPerson)
        {
            contact = _relatedRecord as ContactPerson;
            this.Person = contact.Party;

            this.personModified();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInactivateUserRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the request is an inactivate user request.
    /// </summary>
    /// <returns>
    /// true if the request is an inactivate user request; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display boolean isInactivateUserRequest()
    {
        return this.RequestAction == UserRequestAction::InactivateUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubmitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the request has been submitted to the workflow.
    /// </summary>
    /// <returns>
    /// true if the request has been submitted; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display boolean isSubmitted()
    {
        return this.RequestStatus != UserRequestStatus::Draft;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the job title for the person who the user who made the request.
    /// </summary>
    /// <returns>
    /// A string representation of the job title.
    /// </returns>
    /// <remarks>
    /// Sub types of the <c>UserRequest</c> class can override this this method to provide the job tile, if
    /// applicable.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display UserRequestJobTitle jobTitle()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the modification of the user and person fields.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field that was modified.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(UserRequest, User):
                this.userModified();
                break;
            case fieldnum(UserRequest, Person):
                this.personModified();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>organizationName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the organization name for the person who the user request is for.
    /// </summary>
    /// <returns>
    /// A string representation of the organization name.
    /// </returns>
    /// <remarks>
    /// Sub types of the <c>UserRequest</c> class can override this this method to provide the organization
    /// name, if applicable.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display UserRequestOrganizationName organizationName()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>personFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the filter for the lookup of the person for the request.
    /// </summary>
    /// <returns>
    /// The filter for the person lookup.
    /// </returns>
    /// <remarks>
    /// Sub types of the <c>UserRequest</c> class can override this this method to provide the filter.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public dirPartyLookupEntitiesFilter personFilter()
    {
        return new dirPartyLookupEntitiesFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>personModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the modification of the person for the request.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void personModified()
    {
        DirPartyContactInfoView contactInfo;

        select firstOnly ElectronicAddress from contactInfo
            order by IsPrimary desc
            where contactInfo.Party == this.Person
               && contactInfo.Type == LogisticsElectronicAddressMethodType::Email;

        this.Email = contactInfo.ElectronicAddress;

        this.UserAlias = this.email();

        this.setDefaultUser();
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gives the title on top of the preview pane.
    /// </summary>
    /// <returns>
    /// The title field of the preview pane.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display Caption previewPaneTitle()
    {
        return strfmt("@SYS327590", this.RequestID, DirPartyTable::findRec(this.Person).Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the request type of the request.
    /// </summary>
    /// <returns>
    /// The request type.
    /// </returns>
    /// <remarks>
    /// Sub types of the <c>UserRequest</c> class can override this this method to provide the request type.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display UserRequestEntityType requestType()
    {
        return UserRequestEntityType::Vendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultRole</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default security role for the person for the request.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setDefaultRole()
    {
        SecurityUserRole userRole;

        select firstonly SecurityRole from userRole
            where userRole.User == this.User;

        this.RequestedRole = userRole.SecurityRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default user for the person who the submitted the request.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setDefaultUser()
    {
        this.User = DirPersonUser::findParty(this.Person).User;
        this.userModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRoleLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query that will be used as the security role lookup.
    /// </summary>
    /// <param name="_securityRoleLookupQuery">
    /// The query to update.
    /// </param>
    /// <remarks>
    /// Sub types of the <c>UserRequest</c> class can override this this method to update the default query.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateRoleLookupQuery(Query _securityRoleLookupQuery)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUserForRequestQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query that will be used as the user lookup.
    /// </summary>
    /// <param name="_query">
    /// The query to update
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateUserForRequestQuery(Query _query)
    {
        QueryBuildDataSource    dataSource;
        QueryBuildRange         range;

        if (this.RequestAction == UserRequestAction::InactivateUser)
        {
            dataSource = _query.dataSourceTable(tableNum(UserInfo)).addDataSource(tableNum(DirPersonUser));
            dataSource.addLink(fieldNum(UserInfo, Id), fieldNum(DirPersonUser, User));
            range = dataSource.addRange(fieldNum(DirPersonUser, PersonParty));
            range.status(RangeStatus::Hidden);
            range.value(queryValue(this.Person));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>userModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the modification of the user for the request.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void userModified()
    {
        if (this.RequestAction == UserRequestAction::InactivateUser)
        {
            this.UserAlias = this.userNetworkAlias();
        }

        this.setDefaultRole();
    }

]]></Source>
			</Method>
			<Method>
				<Name>userNetworkAlias</Name>
				<Source><![CDATA[
    private networkAlias userNetworkAlias()
    {
        UserInfo userInfo;

        select NetworkAlias from userInfo where userInfo.Id == this.User;

        return userInfo.NetworkAlias;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        return ret && this.allowDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(UserRequest, Email):
                ret = ret && this.checkEmail();
                break;
            case fieldnum(UserRequest, Person):
                ret = ret && this.checkPerson();
                break;
            case fieldnum(UserRequest, RequestedRole):
                ret = ret && this.checkRequestedRole();
                break;
            case fieldnum(UserRequest, User):
                ret = ret && this.checkUser();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && this.checkEmail();
        ret = ret && this.checkPerson();
        ret = ret && this.checkRequestedRole();
        ret = ret && this.checkUser();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowApprovalApproved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the status of an approved user request.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void workflowApprovalApproved()
    {
        this.RequestStatus = UserRequestStatus::ApprovalApproved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowApprovalDenied</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the status of a denied user request.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void workflowApprovalDenied()
    {
        // Review if this should be rejected or denied
        this.RequestStatus = UserRequestStatus::ApprovalDenied;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowApprovalPending</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status of a user request pending approval.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void workflowApprovalPending()
    {
        this.RequestStatus = UserRequestStatus::ApprovalPending;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the status of a canceled user request.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void workflowCanceled()
    {
        // Because denying the approval should not continue with additional workflow tasks, cancel is called on the workflow but the status would
        // still be denied.
        if (this.RequestStatus != UserRequestStatus::ApprovalDenied)
        {
            this.RequestStatus = UserRequestStatus::WorkflowCanceled;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status of a user request that has finished the workflow successfully.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void workflowCompleted()
    {
        this.RequestStatus = UserRequestStatus::WorkflowCompleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowSubmitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the status of a submitted user request.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void workflowSubmitted()
    {
        this.RequestStatus = UserRequestStatus::WorkflowSubmitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowTaskCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the status of user request that has a workflow task completed.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void workflowTaskCompleted()
    {
        this.RequestStatus = UserRequestStatus::UserTaskCompleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowTaskStarted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status of a user request that has a workflow task pending completion.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void workflowTaskStarted()
    {
        this.RequestStatus = UserRequestStatus::UserTaskPending;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the workflow template that should be used for the request.
    /// </summary>
    /// <returns>
    /// A string that represents the workflow template.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display WorkflowConfigurationName workflowType()
    {
        WorkflowConfigurationName type;

        if (this.RequestAction == UserRequestAction::AddUser)
        {
            type = workflowtypestr(UserRequestAddUserTemplate);
        }
        else
        {
            type = workflowtypestr(UserRequestInactivateUserTemplate);
        }

        return type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>UserRequest</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>UserRequest</c> to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>UserRequest</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static UserRequest find(recId _recId, boolean _forUpdate = false)
    {
        UserRequest userRequest;

        userRequest.selectForUpdate(_forUpdate);

        select firstonly userRequest
            where userRequest.RecId == _recId;

        return userRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByUserRequestId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>UserRequest</c> table.
    /// </summary>
    /// <param name="_userRequestId">
    /// The user request ID of the <c>UserRequest</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>UserRequest</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static UserRequest findByUserRequestId(UserRequestID _userRequestId, boolean _forUpdate = false)
    {
        UserRequest  userRequest;

        if (_userRequestId)
        {
            userRequest.selectForUpdate(_forUpdate);

            select firstonly userRequest
                where userRequest.RequestID == _userRequestId;
        }

        return userRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveACSUserAlias</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>UserAlias</c> field of the <c>UserRequest</c> table record.
    /// </summary>
    /// <param name="_userRequestRecId">
    /// The record ID of the <c>UserRequest</c> table to be updated.
    /// </param>
    /// <param name="_userAlias">
    /// The user alias.
    /// </param>
    /// <remarks>
    /// This method is used to update the <c>UserAlias</c> field of the <c>UserRequest</c> table record
    /// with the name identifier retrieved from the ACS authentication token.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void saveACSUserAlias(
        RecId                _userRequestRecId,
        UserRequestUserAlias _userAlias)
    {
        UserRequest  userRequest;

        if (_userRequestRecId && _userAlias)
        {
            ttsBegin;
            update_recordSet userRequest
                setting UserAlias = _userAlias
                    where userRequest.RecId == _userRequestRecId;
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowCompleteUserRequestACSTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Completes the <c>UserRequestACSAuthenticationTask</c> workflow element.
    /// </summary>
    /// <param name="_userRequestRecId">
    /// The record ID of the <c>UserRequest</c> table record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void workflowCompleteUserRequestACSTask(
        RecId _userRequestRecId)
    {
        WorkflowWorkItemTable  workflowWorkItemTable;
        WorkflowElementTable   workflowElementTable;

        if (_userRequestRecId)
        {
            while select * from workflowWorkItemTable
                exists join workflowElementTable
                where workflowWorkItemTable.RefTableId  == tableNum(UserRequest)
                    && workflowWorkItemTable.RefRecId   == _userRequestRecId
                    && workflowWorkItemTable.ElementId  == workflowElementTable.ElementId
                    && workflowElementTable.ElementType == WorkflowElementType::Task
                    && workflowElementTable.ElementName == workFlowTaskStr(UserRequestACSAuthenticationTask)
            {
                WorkflowWorkItem::takeAction(
                    workflowWorkItemTable.Id,
                    WorkflowWorkItemActionManager::findOutcomeNameForMenuItem(
                        workflowWorkItemTable,
                        menuitemActionStr(UserRequestACSAuthenticationTaskComplete)));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS334525</DeveloperDocumentation>
	<Label>@SYS130453</Label>
	<SingularLabel>@SYS130448</SingularLabel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>RequestID</TitleField1>
	<TitleField2>Person</TitleField2>
	<Abstract>Yes</Abstract>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SystemAdministration</Modules>
	<ReplacementKey>RequestIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequestID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Person</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestAction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateSubmitted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateResolved</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequestID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Email</Name>
			<Label>@SYS107616</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Email</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS35583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>requestType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>accountNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>organizationName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Person</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>jobTitle</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Request</Name>
			<Label>@SYS334524</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequestID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestAction</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RequestStatus</Name>
			<Label>@SYS334537</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequestStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateSubmitted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateResolved</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UserSetup</Name>
			<Label>@SYS334553</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequestedRole</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuthenticationMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserAlias</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>User</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AuthenticationMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>UserRequestAuthenticationMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DateResolved</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UserRequestResolvedDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DateSubmitted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UserRequestSubmittedDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Email</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>UserRequestPersonEmailRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Person</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>UserRequestPersonRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RequestAction</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>UserRequestAction</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RequestedRole</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>UserRequestRoleRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RequestID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>UserRequestID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RequestStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>UserRequestStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>User</Name>
			<AssetClassification>End User Identifiable Information (EUII)</AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserAlias</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UserRequestUserAlias</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DirPersonIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Person</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EmailAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Email</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SecurityRoleIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RequestedRole</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RequestIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RequestID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DirPerson</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Person</Name>
					<Field>Person</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EmailAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsElectronicAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Email</Name>
					<Field>Email</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SecurityRole</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SecurityRole</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RequestedRole</Name>
					<Field>RequestedRole</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecIDIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>User</Name>
					<Field>User</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>