<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalProd</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdJournalProd extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProdTableRemain</Name>
				<Source><![CDATA[
    public void addProdTableRemain(
        ProdTable		_prodTable,
        InventQty		_addQty		= this.QtyGood,
        PdsCWInventQty	_cwAddQty	= this.PdsCWBatchGood)
    {
        boolean			cwItem		= PdsGlobal::pdsIsCWItem(_prodTable.ItemId);
        InventQty		freeQty		= this.freeRemainQty(_prodTable);
        PdsCWInventQty	cwFreeQty	= cwItem ? this.pdsCWFreeRemainQty(_prodTable) : 0;

        if (_prodTable.RemainInventPhysical >= 0
            && _addQty >= 0)
        {
            if (freeQty < _addQty)
            {
                _prodTable.RemainInventPhysical += _addQty - freeQty;
            }
            if (cwFreeQty < _cwAddQty)
            {
                _prodTable.PdsCWRemainInventPhysical += _cwAddQty - cwFreeQty;
            }
        }
        else
        {
            if (freeQty > _addQty)
            {
                _prodTable.RemainInventPhysical += _addQty - freeQty;
            }

            if (cwFreeQty > _cwAddQty)
            {
                _prodTable.PdsCWRemainInventPhysical += _cwAddQty - cwFreeQty;
            }
        }

        if (cwItem)
        {
            this.adjustRemainInventPhysicalForCatchWeightItem(_prodTable, _addQty, _cwAddQty);
        }

        if (_prodTable.RemainInventPhysical != _prodTable.orig().RemainInventPhysical
            || _prodTable.PdsCWRemainInventPhysical != _prodTable.orig().PdsCWRemainInventPhysical)
        {
            _prodTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustRemainInventPhysicalForCatchWeightItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// The intention of this method is to adjust the remaining inventory quantity on the production order in the following cases:
    ///        - Remaining inventory quantity would drop below the minimum allowed for the remaining catch weight quantity after current report as finished is done
    ///        - Remaining inventory quantity would go above the maximum allowed for the remaining catch weight quantity after current report as finished is done
    ///        - Free inventory quantity is below the minimum allowed for the free catch weight quantity when creating report as finished journal
    /// If adjustment happens,
    ///        - the remaining inventory quantity after report as finished will be equal to the nominal inventory quantity for the remaining catch weight quantity.
    ///        - the free inventory quantity in creating report as finished journal will be equal to the nominal inventory quantity for the free catch weight quantity.
    /// </summary>
    /// <param name = "_prodTableOrCoBy">Production table or co-by product record for which the remaining inventory quantity is to be adjusted.</param>
    /// <param name = "_addQty">Inventory quantity reported as good during report as finished.</param>
    /// <param name = "_cwAddQty">Catch weight quantity reported as good during report as finished.</param>
    /// <remarks>
    /// The adjustment will only happen if the remaining catch weight quantity after current report as finished is done is not zero
    /// and if the catch weight quantity reported as good during report as finished is greater than zero.
    /// and if free inventory quantity is below the minimum allowed for the free catch weight quantity when creating report as finished journal.
    /// </remarks>
    private void adjustRemainInventPhysicalForCatchWeightItem(
        Common          _prodTableOrCoBy,
        InventQty       _addQty,
        PdsCWInventQty  _cwAddQty)
    {
        FieldId itemFieldId;

        if (_prodTableOrCoBy.TableId == tableNum(ProdTable))
        {
            itemFieldId = fieldNum(ProdTable, ItemId);
        }
        else
        {
            itemFieldId = fieldNum(PmfProdCoBy, ItemId);
        }

        PdsCatchWeightItem cwItem = PdsCatchWeightItem::find(_prodTableOrCoBy.(itemFieldId));
    
        if (cwItem)
        {
            InventQty freeQty = this.freeRemainQty(_prodTableOrCoBy);
            PdsCWInventQty cwFreeQty;

            if (_prodTableOrCoBy.TableId == tableNum(PmfProdCoBy))
            {
                cwFreeQty = this.pdsCWCoByFreeRemainQty(_prodTableOrCoBy);
            }
            else
            {
                cwFreeQty = this.pdsCWFreeRemainQty(_prodTableOrCoBy);
            }

            InventQty remainingCWQty = cwFreeQty - _cwAddQty;
        
            if (remainingCWQty)
            {
                InventQty minimalInventQuantityRemaining    = remainingCWQty * cwItem.PdsCWMin;
                InventQty maximalInventQuantityRemaining    = remainingCWQty * cwItem.PdsCWMax;
                InventQty nominalInventQuantityRemaining    = remainingCWQty * cwItem.nominalQty();
            
                InventQty remainingQty   = freeQty - _addQty;
                if (remainingQty < minimalInventQuantityRemaining
                ||  remainingQty > maximalInventQuantityRemaining)
                {
                    /*
                        nominalInventQuantityRemaining = inventQuantityRemainingAfterRAF + adjustmentInventQuantityToReachNominalAfterRAF
                
                        Variable adjustmentInventQuantityToReachNominalAfterRAF
                        will be positive in case when inventQuantityRemainingAfterRAF is less then minimalInventQuantityRemaining,
                        and it will be negative in case when inventQuantityRemainingAfterRAF is greater then maximalInventQuantityRemaining.
                    */
                    if (_prodTableOrCoBy.TableId == tableNum(ProdTable))
                    {
                        _prodTableOrCoBy.(fieldNum(ProdTable, RemainInventPhysical)) +=  nominalInventQuantityRemaining - remainingQty;
                    }
                    else
                    {
                        _prodTableOrCoBy.(fieldNum(PmfProdCoBy, RemainCoByPhysical)) +=  nominalInventQuantityRemaining - remainingQty;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRemainInventPhysical</Name>
				<Source><![CDATA[
    public InventQty calcRemainInventPhysical(ProdTable _prodTable)
    {
        InventQty           inventRemain;
        InventQty           remainInventFinancial;
        ProdParametersDim   prodParametersDim = ProdParametersDim::find(_prodTable.InventDimId);

        if (!_prodTable.RecId)
        {
            _prodTable = ProdTable::find(this.ProdId);
        }

        if (!this.InventReturnFlag || this.LineNum != this.lastLineNumProdJournal())
        {
            if (prodParametersDim.IncreaseRemainQtyWithErrorQty)
            {
                inventRemain = _prodTable.RemainInventPhysical - this.QtyGood;
            }
            else
            {
                inventRemain = _prodTable.RemainInventPhysical - this.QtyGood - this.QtyError;
            }

            if  (!this.InventReturnFlag && inventRemain * _prodTable.RemainInventPhysical <= 0)
            {
                inventRemain = 0;
            }
        }
        else
        {
            // For the last line, need reverse all remain quantity.
            inventRemain = 0;
            if (_prodTable.QtySched)
            {
                remainInventFinancial = _prodTable.remainInventFinancial();
                // Remain = expected - posted  - posting
                if (prodParametersDim.IncreaseRemainQtyWithErrorQty)
                {
                    inventRemain = _prodTable.QtySched - remainInventFinancial - this.QtyGood;
                }
                else if (ProdJournalProdCalcRemainInventPhysicalNegativeQtyFlight::instance().isEnabled())
                {
                    inventRemain = _prodTable.QtySched - remainInventFinancial - _prodTable.reportedFinishedError() - this.QtyGood - this.QtyError;
                }
                else
                {
                    inventRemain = _prodTable.QtySched - remainInventFinancial - this.QtyGood - this.QtyError;
                }

                if (inventRemain < 0)
                {
                    inventRemain = 0;
                }
                else if (inventRemain > _prodTable.QtySched)
                {
                    inventRemain = _prodTable.QtySched;
                }
            }
        }

        // For CW items, we need to ensure that the remaining quantity still is within the valid range.
        if (PdsGlobal::pdsIsCWItem(_prodTable.ItemId))
        {
            PdsCWInventQty cwRemainInvent = this.pdsCalcRemainInventPhysical(_prodTable);
            
            PdsCatchWeightItem cwItem = PdsCatchWeightItem::find(_prodTable.ItemId);
    
            InventQty minimalInventQuantityRemaining    = cwRemainInvent * cwItem.PdsCWMin;
            InventQty maximalInventQuantityRemaining    = cwRemainInvent * cwItem.PdsCWMax;

            if (inventRemain < minimalInventQuantityRemaining)
            {
                inventRemain = minimalInventQuantityRemaining;
            }

            if (inventRemain > maximalInventQuantityRemaining)
            {
                inventRemain = maximalInventQuantityRemaining;
            }
        }

        return inventRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSerialNumberUnique</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the good quantity on the journal is valid for the current dimension.
    /// </summary>
    /// <returns>
    /// true if the quantity is larger than one or the serial number control is not enabled for the current
    /// dimension; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the item is a catch weight item, the quantity validated is the catch weight quantity.
    /// </remarks>
    public boolean checkSerialNumberUnique()
    {
        boolean                     ret = true;
        InventDim                   inventDim = InventDim::find(this.InventDimId);
        InventDimGroupFieldSetup    inventDimGroupFieldSetup;
        boolean     isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);

        if (inventDim.InventSerialId
            &&  (  (!isCWItem && (this.QtyGood > 1))
                || ( isCWItem && (this.PdsCWBatchGood > 1))))
        {
            inventDimGroupFieldSetup = EcoResDimensionGroupSetup::getFieldSetupForItem(this.prodTable().ItemId, fieldNum(InventDim, InventSerialId));
            if (inventDimGroupFieldSetup.isSerialNumberControlEnabled())
            {
                ret = checkFailed(strFmt("@SYS68712", inventDim.InventSerialId));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void  delete(ProdTable _prodTable = null)
    {
        InventMovement              inventMovement;
        InventUpd_ChildReference    childReference;

        PmfProdCoBy                 prodCoBy;

        ttsbegin;

        if (this.mustUpdateProd() && !this.isPosted())
        {
            if (this.isCoBy())
            {
                prodCoBy = this.pmfProdCoBy(true);
                if (this.mustDeleteChildReferences())
                {
                    childReference = InventUpd_ChildReference::newParameters(
                        InventMovement::construct(prodCoBy, InventMovSubType::None, this),
                            -this.orig().QtyGood,
                            -this.orig().QtyGood,
                            false,
                            '',
                            -this.orig().PdsCWBatchGood);
                    childReference.updateNow();
                }
                if (!this.InventReturnFlag)
                {
                    this.orig().subPmfProdCoByRemain(prodCoBy);
                }
            }
            else
            {
                if (!_prodTable)
                {
                    _prodTable = this.prodTable(true);
                }

                if (this.mustDeleteChildReferences())
                {
                    inventMovement = InventMovement::construct(_prodTable,InventMovSubType::None,this);

                    InventUpd_ChangeDimension::updateForceInventTrans(inventMovement, InventDim::find(_prodTable.InventDimId), false, true);

                    childReference = InventUpd_ChildReference::newParameters(InventMovement::construct(_prodTable,InventMovSubType::None,this),
                                                 -this.orig().QtyGood,
                                                 -this.orig().QtyGood,
                                                 false,
                                                 '',
                                                 -this.orig().PdsCWBatchGood);
                    childReference.updateNow();
                }

                if (!this.InventReturnFlag)
                {
                    this.orig().subProdtableRemain(_prodTable);
                }
            }
            if (this.Voucher)
            {
                if (this.numOfVoucherLines() == 0)
                {
                    JournalError::deleteVoucher(tableNum(ProdJournalTable),this.JournalId, this.Voucher);
                }
            }

            if (BOMParameters::find().EnableTrackedComponents)
            {
                ProdAsBuiltBOMProductLotAssociation::clearProdReportFinishedJournalLine(this);
            }
        }
        else
        {
            // Delete transactions data used for report printing
            InventReportDimHistory::deleteFromProdJournalProd(this);
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDeleteChildReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if child references must be deleted.
    /// </summary>
    /// <returns>true if child references must be deleted; otherwise, false.</returns>
    protected boolean mustDeleteChildReferences()
    {
        // cleanup a reference based on initial creating conditions, not volatile parameters
        return this.InventTransChildRefId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>ProdJournalProd</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>ProdJournalProd</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value hat indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>ProdJournalProd</c> table; otherwise, an empty record.
    /// </returns>
    public static ProdJournalProd findRecId(
        RefRecId _recId,
        boolean  _forUpdate = false)
    {
        ProdJournalProd  prodJournalProd;

        if (_recId)
        {
            prodJournalProd.selectForUpdate(_forUpdate);

            select firstonly prodJournalProd
                where prodJournalProd.RecId == _recId;
        }

        return prodJournalProd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>freeRemainQty</Name>
				<Source><![CDATA[
    public InventQty freeRemainQty(
        Common _common
        )
    {
        ProdJournalProd     tmpJournalProd;
        ProdJournalTable    prodJournalTable;

        InventQty           qty;
        ProdTable           prodTable;
        PmfProdCoBy         coBy;

        tmpJournalProd.selectLocked(false);

        if (_common.TableId == tableNum(ProdTable))
        {
            prodTable   = _common;
            qty         = prodTable.RemainInventPhysical;

            select forceplaceholders sum(QtyGood) from tmpJournalProd
            index hint ProdIdx
            where tmpJournalProd.ProdId             == prodTable.ProdId  &&
                  tmpJournalProd.InventTransId      == prodTable.InventTransId &&
                  tmpJournalProd.InventReturnFlag   == NoYes::No
            join TableId from prodJournalTable
                index hint PostedJournalIdx
                where prodJournalTable.JournalId    == tmpJournalProd.JournalId &&
                      prodJournalTable.Posted       == NoYes::No;
        }
        else if (_common.TableId == tableNum(PmfProdCoBy))
        {
            coBy    = _common;
            qty     = coBy.RemainCoByPhysical;
            select forceplaceholders sum(QtyGood)
                from tmpJournalProd
                index hint ProdIdx
                where  tmpJournalProd.ProdId            == coBy.ProdId
                    && tmpJournalProd.InventTransId     == coBy.InventTransId
                    && tmpJournalProd.InventReturnFlag  == NoYes::No
                join TableId from prodJournalTable
                    index hint PostedJournalIdx
                    where prodJournalTable.JournalId    == tmpJournalProd.JournalId &&
                          prodJournalTable.Posted       == NoYes::No;
        }
        qty -= tmpJournalProd.QtyGood;

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdJournalTable</Name>
				<Source><![CDATA[
    public void initFromProdJournalTable(ProdJournalTable _prodJournalTable)
    {
        JournalTableData    journalTableData  = JournalTableData::newTable(_prodJournalTable);

        journalTableData.journalStatic().newJournalTransData(this,journalTableData).initFromJournalTable();

        this.ProdId         = _prodJournalTable.ProdId;
        this.ProdPickList   = _prodJournalTable.ProdAutoPickList;
        if (this.prodTable().inventTable().PmfProductType != PmfProductType::MainItem)
        {
            this.initFromProdTable(ProdTable::find(_prodJournalTable.ProdId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record from the <c>ProdTable</c> table.
    /// </summary>
    /// <param name="_prodTable">
    /// The <c>ProdTable</c> table to initialize from.
    /// </param>
    /// <remarks>
    /// The inventory dimension is updated with output location.
    /// </remarks>
    public void initFromProdTable(ProdTable _prodTable)
    {
        this.ProdId         = _prodTable.ProdId;
        this.InventTransId  = _prodTable.InventTransId;
        this.ItemId         = _prodTable.ItemId;
        this.InventDimId    = this.updateDimWithOutputLoc(_prodTable.InventDimId).inventDimId;
        if (#PmfEnabled)
        {
            this.PmfProductType = _prodTable.inventTable().PmfProductType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromJmgSerialNumberSpecification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record from the <c>ProdTable</c> table and the <c>JmgSerialNumberSpecification</c> table.
    /// </summary>
    /// <param name = "_jmgSerialNumberSpecification"> 
    /// The <c>JmgSerialNumberSpecification</c> table to initialize from. 
    /// </param>
    [Hookable(false)]
    internal void initFromJmgSerialNumberSpecification(JmgSerialNumberSpecification _jmgSerialNumberSpecification)
    {
        this.InventDimId    = _jmgSerialNumberSpecification.InventDimId;
        this.ProdPickList   = NoYes::No;
        this.ItemId         = _jmgSerialNumberSpecification.ItemId;
        this.QtyGood        = _jmgSerialNumberSpecification.QtyGood;
        this.QtyError       = _jmgSerialNumberSpecification.QtyError;
        this.PdsCWBatchGood = _jmgSerialNumberSpecification.PdsCWQtyGood;
        this.PdsCWBatchErr  = _jmgSerialNumberSpecification.PdsCWQtyError;
        this.ErrorCause     = _jmgSerialNumberSpecification.ErrorCause;
        this.ProdFinished   = _jmgSerialNumberSpecification.EndJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFollowingRegularProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the item is using the regular process.
    /// </summary>
    /// <returns>true if it is using the regular process; otherwise, false.</returns>
    protected boolean isFollowingRegularProcess()
    {
        return this.PmfProductType == PmfProductType::None
            || this.PmfProductType == PmfProductType::BOM
            || this.PmfProductType == PmfProductType::Formula
            || this.PmfProductType == PmfProductType::MainItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFollowingPmfCoByProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the item is using the co/by process.
    /// </summary>
    /// <returns>true if it is using the co/by process; otherwise, false.</returns>
    public boolean isFollowingPmfCoByProcess()
    {
        return this.isCoBy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateProd</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean mustUpdateProd()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;

        if (this.isFollowingRegularProcess())
        {
            if (! this.LineNum)
            {
                this.LineNum = ProdJournalProd::lastLineNum(this.JournalId) + 1;
            }

            if (!this.InventTransId)
            {
                throw error("@SYS50830");
            }

            ProdTable prodTable = this.prodTable(true);
            
            this.setInventReturnFlag();

            if (this.mustUpdateProd())
            {
                if (! this.InventReturnFlag)
                {
                    this.addProdTableRemain(prodTable);
                }

                if (this.InventReturnFlag ||  prodTable.mandatoryRegister())
                {
                    if (! this.InventDimId)
                    {
                        this.InventDimId            = InventDim::inventDimIdBlank();
                    }
                    this.InventTransChildType   = InventTransChildType::None;
                    this.InventTransChildRefId  = '';
                }
                else
                {
                    this.InventTransChildType   = InventTransChildType::ProdJournalProd;
                    this.InventTransChildRefId  = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();

                    InventMovement movement = InventMovement::construct(prodTable,InventMovSubType::None,this);

                    InventUpd_ChildReference childReference = InventUpd_ChildReference::newParameters(movement,this.QtyGood,this.QtyGood,false,this.InventDimId, this.PdsCWBatchGood);
                    childReference.updateNow();

                    InventUpd_ChangeDimension::updateForceInventTrans(movement,InventDim::find(this.InventDimId),true,true);
                }
            }

            if (!this.InventDimId)
            {
                this.InventDimId            = InventDim::inventDimIdBlank();
            }

            if (!this.checkSerialNumberUnique())
            {
                throw error("@SYS50394");
            }
        }
        else if (this.isFollowingPmfCoByProcess())
        {
            PmfProdCoBy prodCoBy = this.pmfProdCoBy(true);
            if (!prodCoBy.RecId)
            {
                //Adding of CoBys on-the-fly, from RAFParm &/or RAFJournal
                if (PmfProdCoBy::validateBatchOrderTransItem(this.ProdId, this.ItemId))
                {
                    prodCoBy.clear();
                    prodCoBy.initFromProdJournalProd(this);
                    prodCoBy.insert();
                    this.InventTransId = prodCoBy.InventTransId;
                    this.InventDimId = prodCoBy.InventDimId;
                }
                else
                {
                    throw error("@PRO2322");
                }
            }
            this.setInventReturnFlag();

            if (this.mustUpdateProd())
            {
                if (!this.InventReturnFlag)
                {
                    this.pmfCoByAddProdTableRemain(prodCoBy);
                }
                if (this.InventReturnFlag || this.prodTable().mandatoryRegister())
                {
                    if (!this.InventDimId)
                    {
                        this.InventDimId            = InventDim::inventDimIdBlank();
                    }
                    this.InventTransChildType   = InventTransChildType::None;
                    this.InventTransChildRefId  = '';
                }
                else
                {
                    if (!this.inventDim().wMSLocationId)
                    {
                        this.InventDimId = this.inventDimIdWithOutputLocation(this.prodTable(), this.ItemId, this.InventDimId);
                    }
                    this.InventTransChildType   = InventTransChildType::ProdJournalProd;
                    this.InventTransChildRefId  = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
                    InventMovement movement = InventMovement::construct(prodCoBy, InventMovSubType::None, this);
                    InventUpd_ChildReference childReference = InventUpd_ChildReference::newParameters(InventMov_Prod_JournalProd_CoBy::construct(movement.buffer(), this),
                    this.QtyGood,
                    this.QtyGood,
                    false,
                    this.InventDimId,
                    this.PdsCWBatchGood);
                    childReference.updateNow();

                    InventUpd_ChangeDimension::updateForceInventTrans(movement,InventDim::find(this.InventDimId), true, true, InventDim::find(this.orig().InventDimId));
                }
            }
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimIdWithOutputLocation</Name>
				<Source><![CDATA[
    private InventDimId inventDimIdWithOutputLocation(
        ProdTable   _prodTable,
        ItemId      _itemBeingRAFed,
        InventDimId _inventDimId = _prodTable.InventDimId)
    {
        InventDimId     ret         = _inventDimId;
        InventDim       inventDim   = InventDim::find(ret);

        inventDim.wMSLocationId = _prodTable.defaultOutputLocation(_itemBeingRAFed, this.TransDate, '', inventDim);
        inventDim = inventDim::findOrCreate(inventDim);
        ret = inventDim.InventDimId;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds inventory dimensions referenced by the current record.
    /// </summary>
    /// <returns>
    /// Inventory dimensions referenced by the current record.
    /// </returns>
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovementChild</Name>
				<Source><![CDATA[
    public InventMovement inventMovementChild(Common _buffer)
    {
        ProdTable prodTable;
        if (_buffer.TableId == tableNum(ProdTable))
        {
            prodTable = _buffer;
            if (prodTable.ProdType == ProdType::Process)
            {
                return InventMov_Prod_JournalProd_Process::construct(prodTable, this);
            }
            else
            {
                return InventMov_Prod_JournalProd::newFromProdTableProdJournalProd(_buffer as ProdTable, this);
            }
        }
        else if (_buffer.TableId == tableNum(PmfProdCoBy))
        {
            return InventMov_Prod_JournalProd_CoBy::construct(_buffer,this);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the item is a co-product or a by-product.
    /// </summary>
    /// <returns>
    /// true if a co-product or by-product; otherwise, false.
    /// </returns>
    public boolean isCoBy()
    {
        return this.PmfProductType == PmfProductType::By_Product || this.PmfProductType == PmfProductType::Co_Product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventReturn</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates if the <c>ProdJournalProd</c> record meets the criteria for it being a return journal
    /// </summary>
    /// <returns>
    ///     True, if this is a return journal, False otherwise.
    /// </returns>
    public boolean isInventReturn()
    {
        return this.QtyGood < 0 || (this.QtyGood == 0 && this.QtyError < 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPosted</Name>
				<Source><![CDATA[
    public display NoYes isPosted()
    {
        return ProdJournalTable::isPosted(this.JournalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the item name.
    /// </summary>
    /// <returns>
    ///    The name of the item in this record for the <c>ProdJournaProd</c> table.
    /// </returns>
    public display ItemNameDisplay itemName()
    {
        return this.inventTable().itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProdJournalProd, ItemId):
                if (!this.RecId)
                {
                    this.InventTransId = "";
                    this.InventDimId = "";
                    this.pmfInitFromInventTable(InventTable::find(this.ItemId));
                }
                break;

            case fieldNum(ProdJournalProd, InventTransId):
                if (!this.RecId)
                {
                    if (PmfProdCoBy::findTransId(this.InventTransId))
                    {
                        this.pmfInitFromProdCoBy(PmfProdCoBy::findTransId(this.InventTransId));
                    }
                    else if (ProdTable::findTransId(this.InventTransId))
                    {
                        this.initFromProdTable(ProdTable::findTransId(this.InventTransId));
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfVoucherLines</Name>
				<Source><![CDATA[
    public Integer numOfVoucherLines()
    {
        return any2int((select count(RecId) from prodJournalBOM
                            where prodJournalBOM.JournalId == this.JournalId &&
                                  prodJournalBOM.Voucher   == this.Voucher).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCalcRemainInventPhysical</Name>
				<Source><![CDATA[
    public PdsCWInventQty pdsCalcRemainInventPhysical(ProdTable _prodTable)
    {
        PdsCWInventQty  inventRemain;
        PdsCWInventQty  remainInventFinancial;

        if (!_prodTable.RecId)
        {
            _prodTable = ProdTable::find(this.ProdId);
        }

        if (!PdsGlobal::pdsIsCWItem(_prodTable.ItemId))
        {
            return 0;
        }

        ProdParametersDim prodParametersDim = ProdParametersDim::find(_prodTable.InventDimId);
        
        PdsCWInventQty inventRemainReduction = this.PdsCWBatchGood;
        if (!prodParametersDim.IncreaseRemainQtyWithErrorQty)
        {
            inventRemainReduction += this.PdsCWBatchErr;
        }

        if (!this.InventReturnFlag)
        {
            inventRemain = _prodTable.PdsCWRemainInventPhysical
                        - inventRemainReduction;

            if (inventRemain * _prodTable.PdsCWRemainInventPhysical <= 0)
            {
                inventRemain = 0;
            }
        }
        else
        {
            inventRemain = 0;
            if (_prodTable.PdsCWBatchSched)
            {
                if (inventRemainReduction < 0)
                {
                    inventRemain = _prodTable.PdsCWRemainInventPhysical
                                    - inventRemainReduction;

                    if (abs(inventRemain) > abs(_prodTable.PdsCWBatchSched))
                    {
                        inventRemain = _prodTable.PdsCWBatchSched;
                    }
                }
                else
                {
                    remainInventFinancial =
                        _prodTable.pdsCWRemainInventFinancial();
                    if (abs(remainInventFinancial
                            + inventRemainReduction)
                        < abs(_prodTable.PdsCWBatchSched))
                    {
                        inventRemain = _prodTable.PdsCWBatchSched
                                        - remainInventFinancial
                                        - inventRemainReduction;
                        if (abs(inventRemain)
                            < abs(_prodTable.PdsCWRemainInventPhysical))
                        {
                            inventRemain = _prodTable.PdsCWRemainInventPhysical;
                        }
                    }
                }
            }
        }

        return inventRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCoByFreeRemainQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subtracts co-product or by-product catch weight good quantity from remaining the catch weight
    /// inventory.
    /// </summary>
    /// <param name="_coby">
    /// A selected co-product or by-product record.
    /// </param>
    /// <returns>
    /// The subtracted catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWCoByFreeRemainQty(PmfProdCoBy _coby)
    {
        ProdJournalProd     tmpJournalProd;
        ProdJournalTable    prodJournalTable;

        PdsCWInventQty      cwQty     = _coby.PdsCWRemainPhysical;

        tmpJournalProd.selectLocked(false);

        select forceplaceholders sum(PdsCWBatchGood)
            from tmpJournalProd
            where tmpJournalProd.ProdId            == _coby.ProdId
                && tmpJournalProd.InventTransId    == _coby.InventTransId
                && tmpJournalProd.InventReturnFlag == NoYes::No
            join TableId
            from prodJournalTable
            where prodJournalTable.JournalId == tmpJournalProd.JournalId
                && prodJournalTable.Posted   == NoYes::No;

        cwQty -= tmpJournalProd.PdsCWBatchGood;

        return cwQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWFreeRemainQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subtracts the catch weight good quantity from remaining catch weight inventory.
    /// </summary>
    /// <param name="_prodTable">
    /// A selected batch order record.
    /// </param>
    /// <returns>
    /// The subtracted catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWFreeRemainQty(ProdTable _prodTable)
    {
        ProdJournalProd     tmpJournalProd;
        ProdJournalTable    prodJournalTable;

        PdsCWInventQty      cwQty     = _prodTable.PdsCWRemainInventPhysical;

        tmpJournalProd.selectLocked(false);

        select forceplaceholders sum(PdsCWBatchGood)
            from tmpJournalProd
            where tmpJournalProd.ProdId            == _prodTable.ProdId
                && tmpJournalProd.InventReturnFlag == NoYes::No
            join TableId
            from prodJournalTable
            where prodJournalTable.JournalId == tmpJournalProd.JournalId
                && prodJournalTable.Posted   == NoYes::No;

        cwQty -= tmpJournalProd.PdsCWBatchGood;

        return cwQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCoByAddProdTableRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds good quantity to the remaining quantity of the co-product or by-product transaction.
    /// </summary>
    /// <param name="_coby">
    /// A selected co-product or by-product record.
    /// </param>
    /// <param name="_addQty">
    /// The added quantity.
    /// </param>
    /// <param name="_cwAddQty">
    /// The catch weight added quantity.
    /// </param>
    public void pmfCoByAddProdTableRemain(
        PmfProdCoBy     _coby,
        InventQty       _addQty      = this.QtyGood,
        PdsCWInventQty  _cwAddQty    = this.PdsCWBatchGood)
    {
        InventQty       freeQty;
        PdsCWInventQty  cwFreeQty;
        boolean         cwItem;

        cwItem = PdsGlobal::pdsIsCWItem(_coby.ItemId);

        freeQty = this.freeRemainQty(_coby);

        cwFreeQty = cwItem ? this.pdsCWCoByFreeRemainQty(_coby) : 0;

        if (_coby.RemainCoByPhysical >= 0 && _addQty >= 0)
        {
            if (freeQty < _addQty)
            {
                _coby.RemainCoByPhysical += _addQty - freeQty;
            }

            if (cwFreeQty < _cwAddQty)
            {
                _coby.PdsCWRemainPhysical += _cwAddQty - cwFreeQty;
            }
        }
        else
        {
            if (freeQty > _addQty)
            {
                _coby.RemainCoByPhysical += _addQty - freeQty;
            }

            if (cwFreeQty > _cwAddQty)
            {
                _coby.PdsCWRemainPhysical += _cwAddQty - cwFreeQty;
            }
        }

        if (cwItem)
        {
            this.adjustRemainInventPhysicalForCatchWeightItem(_coby, _addQty, _cwAddQty);
        }

        if (_coby.RemainCoByPhysical != _coby.orig().RemainCoByPhysical
            || _coby.PdsCWRemainPhysical != _coby.orig().PdsCWRemainPhysical)
        {
            _coby.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfInitFromInventTable</Name>
				<Source><![CDATA[
    public void pmfInitFromInventTable(InventTable _inventTable)
    {
        InventDim inventDim = InventDim::findOrCreateBlank();

        this.ItemId         = _inventTable.ItemId;
        this.PmfProductType = _inventTable.PmfProductType;

        inventDim.initFromInventTable(_inventTable);

        this.InventDimId    = InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfInitFromProdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record from the <c>PmfProdCoBy</c> table.
    /// </summary>
    /// <param name="_pmfProdCoByProduct">
    /// The <c>PmfProdCoBy</c> table to initialize from.
    /// </param>
    /// <remarks>
    /// The inventory dimension is updated with output location.
    /// </remarks>
    public void pmfInitFromProdCoBy(PmfProdCoBy _pmfProdCoByProduct)
    {
        this.ProdId         = _pmfProdCoByProduct.ProdId;
        this.InventTransId  = _pmfProdCoByProduct.InventTransId;
        this.ItemId         = _pmfProdCoByProduct.ItemId;
        this.InventDimId    = this.updateDimWithOutputLoc(_pmfProdCoByProduct.InventDimId).inventDimId;

        this.PmfProductType = _pmfProdCoByProduct.ProductType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfProdCoBy</Name>
				<Source><![CDATA[
    public PmfProdCoBy pmfProdCoBy(
        boolean _forUpdate = false)
    {
        return PmfProdCoBy::findTransId(this.InventTransId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTable</Name>
				<Source><![CDATA[
    public ProdTable prodTable(boolean _forUpdate = false)
    {
        return ProdTable::find(this.ProdId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventReturnFlag</Name>
				<Source><![CDATA[
    public void setInventReturnFlag()
    {
        this.InventReturnFlag = this.isInventReturn() ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subPmfProdCoByRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subtracts a good quantity on remaining quantity of a co-product or by-product transaction.
    /// </summary>
    /// <param name="_coBy">
    /// A selected co-product or by-product record.
    /// </param>
    /// <param name="_subQty">
    /// The subtracted quantity.
    /// </param>
    /// <param name="_cwSubQty">
    /// The catch weight subtracted quantity.
    /// </param>
    public void subPmfProdCoByRemain(PmfProdCoBy     _coBy,
                    InventQty       _subQty     = -this.QtyGood,
                    PdsCWInventQty  _cwSubQty   = -this.PdsCWBatchGood)
    {
        boolean cwItem = PdsGlobal::pdsIsCWItem(_coBy.ItemId);
    
        if (_coBy.QtyCoByCalc > 0)
        {
            if (!cwItem)
            {
                if ((_coBy.QtyCoByCalc - _coBy.remainInventFinancial()) > (_coBy.RemainCoByPhysical + _subQty))
                {
                    _coBy.RemainCoByPhysical     = _coBy.QtyCoByCalc - _coBy.remainInventFinancial();
                }
                else
                {
                    _coBy.RemainCoByPhysical     += _subQty;
                }
            }
            else
            {
                if ((_coBy.PdsCWInventCalc - _coBy.pdsCWRemainInventFinancial()) > (_coBy.PdsCWRemainPhysical + _cwSubQty))
                {
                    InventQty initialCWRemainInventPhysical = _coBy.PdsCWRemainPhysical;
                    _coBy.PdsCWRemainPhysical = _coBy.PdsCWInventCalc - _coBy.pdsCWRemainInventFinancial();
                
                    InventQty updatedCWRemainInventPhysical = initialCWRemainInventPhysical - _coBy.PdsCWRemainPhysical;
                
                    if (_cwSubQty)
                    {
                        _coBy.RemainCoByPhysical -= (updatedCWRemainInventPhysical * (_subQty / _cwSubQty));
                        _coBy.RemainCoByPhysical = decRound(_coBy.RemainCoByPhysical, InventTable::inventDecimals(_coBy.ItemId));
                    }
                }
                else
                {
                    _coBy.RemainCoByPhysical     += _subQty;
                    _coBy.PdsCWRemainPhysical    += _cwSubQty;
                }
            }
        }
        else
        {
            _coBy.RemainCoByPhysical += _subQty;
        
            if (cwItem)
            {
                _coBy.PdsCWRemainPhysical += _cwSubQty;
            }
        }
    
        if (_coBy.RemainCoByPhysical != _coBy.orig().RemainCoByPhysical
           || _coBy.PdsCWRemainPhysical != _coBy.orig().PdsCWRemainPhysical)
        {
            _coBy.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subProdtableRemain</Name>
				<Source><![CDATA[
    public void subProdtableRemain(
        ProdTable      _prodTable,
        InventQty      _subQty   = -this.QtyGood,
        PdsCWInventQty _cwSubQty = -this.PdsCWBatchGood
        )
    {
        boolean     cwItem = PdsGlobal::pdsIsCWItem(_prodTable.ItemId);
    
        if (_prodTable.QtySched > 0)
        {
            if (!cwItem)
            {
                if ((_prodTable.QtySched - _prodTable.remainInventFinancial()) > (_prodTable.RemainInventPhysical + _subQty))
                {
                    _prodTable.RemainInventPhysical     = _prodTable.QtySched - _prodTable.remainInventFinancial();
                }
                else
                {
                    _prodTable.RemainInventPhysical     += _subQty;
                }
            }
            else
            {
                if ((_prodTable.PdsCWBatchSched - _prodTable.pdsCWRemainInventFinancial()) > (_prodTable.PdsCWRemainInventPhysical + _cwSubQty))
                {
                    InventQty initialCWRemainInventPhysical = _prodTable.PdsCWRemainInventPhysical;
                    _prodTable.PdsCWRemainInventPhysical = _prodTable.PdsCWBatchSched - _prodTable.pdsCWRemainInventFinancial();
                
                    InventQty updatedCWRemainInventPhysical = initialCWRemainInventPhysical - _prodTable.PdsCWRemainInventPhysical;
                
                    if (_cwSubQty)
                    {
                        _prodTable.RemainInventPhysical -= (updatedCWRemainInventPhysical * (_subQty / _cwSubQty));
                        _prodTable.RemainInventPhysical = decRound(_prodTable.RemainInventPhysical, InventTable::inventDecimals(_prodTable.ItemId));
                    }
                }
                else
                {
                    _prodTable.RemainInventPhysical         += _subQty;
                    _prodTable.PdsCWRemainInventPhysical    += _cwSubQty;
                }
            }
        }
        else
        {
            _prodTable.RemainInventPhysical    += _subQty;
        
            if (cwItem)
            {
                _prodTable.PdsCWRemainInventPhysical += _cwSubQty;
            }
        }
    
        if ((_prodTable.RemainInventPhysical != _prodTable.orig().RemainInventPhysical)
            || (_prodTable.PdsCWRemainInventPhysical != _prodTable.orig().PdsCWRemainInventPhysical))
        {
            _prodTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void  update()
    {
        InventUpd_ChildReference    childReference;
        InventMovement              movement;

        InventQty                   qty     = this.QtyGood  -  this.orig().QtyGood;
        PdsCWInventQty              cwQty   = this.PdsCWBatchGood - this.orig().PdsCWBatchGood;

        PmfProdCoBy                 prodCoBy;

        boolean                     moreQty;
        ProdTable                   prodTable;

        ttsbegin;

        if (this.ProdId     != this.orig().ProdId)
        {
            throw error("@SYS23662");
        }

        if (this.isPosted())
        {
            throw error("@SYS5815");
        }

        if (this.QtyGood * this.orig().QtyGood < 0)
        {
            throw error("@SYS25506");
        }

        this.setInventReturnFlag();

        if (this.InventReturnFlag && this.mustDeleteChildReferences())
        {
            this.InventTransChildType   = InventTransChildType::None;
            this.InventTransChildRefId  = '';
        }

        if (this.mustUpdateProd())
        {
            if (this.PmfProductType == PmfProductType::Co_Product || this.PmfProductType == PmfProductType::By_Product)
            {
                if (!prodCoBy)
                {
                    prodCoBy = this.pmfProdCoBy(true);
                }
                if (! this.InventReturnFlag)
                {
                    if (qty > 0)
                    {
                        this.pmfCoByAddProdTableRemain(prodCoBy,qty,cwQty);
                        moreQty = true;
                    }
                }
                if (!this.InventReturnFlag  && qty && !prodCoBy.mandatoryRegister())
                {
                    movement = InventMovement::construct(prodCoBy, InventMovSubType::None, this);
                    childReference = InventUpd_ChildReference::newParameters(movement,
                                        qty,
                                        qty,
                                        false,
                                        this.InventDimId,
                                        cwQty);
                    childReference.updateNow();
                }
                if (!this.InventReturnFlag)
                {
                    if (qty < 0)
                    {
                        this.subPmfProdCoByRemain(prodCoBy,qty,cwQty);
                    }
                }
                if (this.InventTransChildType == InventTransChildType::ProdJournalProd && (moreQty || this.InventDimId != this.orig().InventDimId))
                {
                    if (!movement)
                    {
                        movement = InventMovement::construct(prodCoBy, InventMovSubType::None, this);
                    }
                    InventUpd_ChangeDimension::updateForceInventTrans(movement,InventDim::find(this.InventDimId), true, true, InventDim::find(this.orig().InventDimId));
                }
            }
            else
            {
                if (!prodTable)
                {
                    prodTable = this.prodTable(true);
                }

                if (! this.InventReturnFlag)
                {
                    if (qty > 0)
                    {
                        this.addProdTableRemain(prodTable, qty, cwQty);
                        moreQty = true;
                    }
                }

                if (!this.checkSerialNumberUnique())
                {
                    throw error("@SYS50394");
                }

                if (! this.InventReturnFlag && qty && ! prodTable.mandatoryRegister())
                {
                    movement = InventMovement::construct(prodTable,InventMovSubType::None,this);

                    childReference = InventUpd_ChildReference::newParameters(
                                                        movement,
                                                        qty,
                                                        qty,
                                                        false,
                                                        this.InventDimId,
                                                        cwQty);

                    childReference.updateNow();
                }

                if (! this.InventReturnFlag)
                {
                    if (qty < 0)
                    {
                        this.subProdtableRemain(prodTable, qty ,cwQty);
                    }
                }

                if (this.InventTransChildType == InventTransChildType::ProdJournalProd && (moreQty || this.InventDimId != this.orig().InventDimId))
                {
                    if (! movement)
                    {
                        movement = InventMovement::construct(prodTable, InventMovSubType::None, this);
                    }

                    InventUpd_ChangeDimension::updateForceInventTrans(movement,InventDim::find(this.InventDimId), true, true, InventDim::find(this.orig().InventDimId));
                }
            }
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimWithOutputLoc</Name>
				<Source><![CDATA[
    private InventDim updateDimWithOutputLoc(InventDimId _inventDimId)
    {
        InventDim   ret         = InventDim::find(_inventDimId);
        ProdTable   prodTable   = ProdTable::find(this.ProdId);

        ret.wMSLocationId = prodTable.defaultOutputLocation(this.ItemId, this.TransDate, '', ret);
        ret = InventDim::findOrCreate(ret);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(
        FieldName   _fieldName,
        int         _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(ProdJournalProd,ItemId):
                if (this.ProdId && !PmfProdCoBy::validateBatchOrderTransItem(this.ProdId, this.ItemId))
                {
                    ret = checkFailed("@PRO2322");
                }
                break;
            case fieldStr(ProdJournalProd, InventTransId):
                if (this.InventTransId)
                {
                    InventTransOrigin origin = InventTransOrigin::findByInventTransId(this.InventTransId);
                    if (origin.ReferenceCategory != InventTransType::Production &&
                        origin.ReferenceCategory != InventTransType::PmfProdCoBy)
                    {
                        ret = checkFailed("@PRO2325");
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret && this.prodTable().useReleaseFromProduction_RU())
        {
            if (this.QtyError && !this.ReleaseKindId_RU)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(ProdJournalRoute), fieldNum(ProdJournalRoute, ReleaseKindId_RU))));
            }

            if (!this.QtyError && this.ReleaseKindId_RU)
            {
                ret = checkFailed(strFmt("@GLS115764", this.ReleaseKindId_RU));
            }
        }

        if (ret && !this.RecId)
        {
            // Check for TCA price on insert but do not prevent user from continue
            PmfTCACostPriceValidation::runProdCoBy(this.prodTable(), this.ItemId, this.InventDimId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isScrapReportedAsFinishedForTrackingDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the report as finished scraps only certain tracking dimension.
    /// </summary>
    /// <returns>
    /// true if the report as finished reports error quantity for a tracking dimension; otherwise false.
    /// </returns>
    internal boolean isScrapReportedAsFinishedForTrackingDim()
    {
        InventDim inventDim = this.inventDim();

        return (this.QtyGood == 0          &&
                this.PdsCWBatchGood == 0   &&
               (this.QtyError > 0 || this.PdsCWBatchErr > 0) &&
               (inventDim.InventSerialId || inventDim.InventBatchId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotMissingPosting</Name>
				<Source><![CDATA[
    public static boolean checkNotMissingPosting(
        ProdId      _prodId,
        JournalId   _notJournalId,
        ItemId      _itemId = '')
    {
        ProdJournalTable    prodJournalTable;
        ProdJournalProd     prodJournalProd;

        boolean             ok = true;

        while select forceplaceholders prodJournalProd
            index hint ProdIdx
            group by ProdId,JournalId
            where prodJournalProd.ProdId    == _prodId       &&
                  prodJournalProd.JournalId != _notJournalId &&
                  (!_itemId || prodJournalProd.ItemId == _itemId)
        join TableId from prodJournalTable
            index hint JournalIdx
            where prodJournalTable.JournalId    == prodJournalProd.JournalId        &&
                  prodJournalTable.JournalType  == ProdJournalType::ReportFinished  &&
                  prodJournalTable.Posted       == NoYes::No
        {
            ok = checkFailed(strFmt("@SYS69105",ProdJournalType::ReportFinished,prodJournalProd.JournalId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProdIdLines</Name>
				<Source><![CDATA[
    public static void deleteProdIdLines(ProdId _prodId)
    {
        ProdJournalTable        prodJournalTable;
        ProdJournalTableData    prodJournalTableData = JournalTableData::newTable(prodJournalTable);

        ProdJournalProd         prodJournalProd;
        ProdJournalTransData    prodJournalTransData;

        ttsbegin;

        while select forupdate forceplaceholders prodJournalProd
            index hint ProdIdx
            where prodJournalProd.ProdId == _prodId
        join forupdate prodJournalTable
            index hint JournalIdx
            where prodJournalTable.JournalId    == prodJournalProd.JournalId        &&
                  prodJournalTable.Posted       == NoYes::No
        {
            if (! prodJournalTransData)
            {
                prodJournalTransData = prodJournalTableData.journalStatic().newJournalTransData(prodJournalProd,prodJournalTableData);
            }

            prodJournalTransData.delete();
            prodJournalTableData.journalTable().update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineCount</Name>
				<Source><![CDATA[
    public static Counter journalLineCount(ProdJournalId _prodJournalId)
    {
        return any2int((select count(RecId) from prodJournalProd
                            where prodJournalProd.JournalId == _prodJournalId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    public static LineNum lastLineNum(ProdJournalId _journalId)
    {
        return (select maxof(LineNum) from prodJournalProd
                    where prodJournalProd.JournalId == _journalId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCoByReportedFinishedError</Name>
				<Source><![CDATA[
    public static PdsCWBatchErr pdsCWCoByReportedFinishedError(
        ProdId          _prodId,
        InventTransId   _inventTransId)
    {
        return ProdTableJour::pdsCWReportedFinishedError(_prodId, _inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCoByReportedFinishedGood</Name>
				<Source><![CDATA[
    public static PdsCWBatchGood pdsCWCoByReportedFinishedGood(
        ProdId          _prodId,
        InventTransId   _inventTransId)
    {
        return ProdTableJour::pdsCWReportedFinishedGood(_prodId,_inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCoByReportedFinishedError</Name>
				<Source><![CDATA[
    public static RealBase pmfCoByReportedFinishedError(
        ProdId          _prodId,
        InventTransId   _inventTransId)
    {
        return ProdTableJour::reportedFinishedError(_prodId, _inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCoByReportedFinishedGood</Name>
				<Source><![CDATA[
    public static RealBase pmfCoByReportedFinishedGood(
        ProdId          _prodId,
        InventTransId   _inventTransId)
    {
        return ProdTableJour::reportedFinishedGood(_prodId,_inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTable</Name>
				<Source><![CDATA[
    public InventTable InventTable(InventTable _relatedTable = null)
    {
        if (prmIsDefault(_relatedTable))
        {
            return this.setLink('InventTable');
        }
        else
        {
            return this.setLink('InventTable', _relatedTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumQtyGoodQtyErrorFromProdJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sum of good and error quantity from the production journal.
    /// </summary>
    /// <param name = "_prodId"> The production order ID. </param>
    /// <param name = "_journalId"> The journal ID. </param>
    /// <returns> Returns a container with good and error quantity. </returns>
    /// <remarks> Relevant when <c>ProdMultiLineReportAsFinishSerialNumFeature</c> is enabled. </remarks>
    [Hookable(false)]
    internal static container sumQtyGoodQtyErrorFromProdJournal(ProdId _prodId, JournalId _journalId)
    {
        ProdJournalProd prodJournalProd;
        select sum(QtyGood), sum(QtyError)
                from prodJournalProd
                where prodJournalProd.ProdId    == _prodId    &&
                      prodJournalProd.JournalId == _journalId &&
                      (prodJournalProd.PmfProductType != PmfProductType::By_Product && prodJournalProd.PmfProductType != PmfProductType::Co_Product);

        return [prodJournalProd.QtyGood, prodJournalProd.QtyError];
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNumProdJournal</Name>
				<Source><![CDATA[
    private LineNum lastLineNumProdJournal()
    {
        return (select maxof(LineNum) from prodJournalProd
                    where prodJournalProd.JournalId == this.JournalId
                        && (ProdJournalProd.PmfProductType == PmfProductType::BOM
                            || ProdJournalProd.PmfProductType == PmfProductType::Formula)).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumGoodErrorQuantityInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sum of good and error quantity reported as finished per LOT incl. catch weight.
    /// </summary>
    /// <param name = "_prodId"> The production order ID. </param>
    /// <param name = "_inventTransId"> The LOT ID. </param>
    /// <returns> Returns a container with good and error quantity incl. catch weight.</returns>
    [Hookable(false)]
    internal static container sumGoodErrorQuantityInventTransId(ProdId _prodId, InventTransId _inventTransId)
    {
        ProdJournalProd prodJournalProd;
        select sum(QtyGood), sum(QtyError), sum(PdsCWBatchGood), sum(PdsCWBatchErr)
            from prodJournalProd
            where prodJournalProd.ProdId        == _prodId &&
                  prodJournalProd.InventTransId == _inventTransId;

        return [prodJournalProd.QtyGood, prodJournalProd.QtyError, prodJournalProd.PdsCWBatchGood, prodJournalProd.PdsCWBatchErr];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<DeveloperDocumentation>@SYS124158</DeveloperDocumentation>
	<Label>@SYS23744</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>JournalId</TitleField1>
	<TitleField2>ProdId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>LineIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>LineIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JournalError</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JournalError</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyGood</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorCause</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdFinished</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Formula</Name>
			<Label>@PRO1115</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PmfProductType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>JournalLine</Name>
			<Label>@SYS23949</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWRegistration</Name>
			<Label>@PDS198</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWBatchErr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWBatchGood</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PDSPotency</Name>
			<Label>@PSC61</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PDSBaseValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PickingList</Name>
			<Label>@SYS77805</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdPickList</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdPickListJournalId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting_RU</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StornoPhysical_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransChildType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransChildRefId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Registration</Name>
			<Label>@SYS2499</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QtyGood</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleaseKindId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorCause</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdFinished</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReturnGroup</Name>
			<Label>@SYS21678</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventReturnFlag</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ErrorCause</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdErrorCause</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventReturnFlag</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventReturnFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransChildRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransChildRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventTransChildType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTransChildType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdJournalIdProd</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PDSBaseValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSBaseAttributeValues</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWBatchErr</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWBatchErr</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWBatchGood</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWBatchGood</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfAcceptError</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdJournalAcceptError</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfProductType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfProductType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProdFinished</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdFinishedProd</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProdPickList</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdAutoPicklist</ExtendedDataType>
			<Label>@SYS17721</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdPickListJournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdJournalIdBOM</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyError</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdReportedError</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyGood</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdReportedGood</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReleaseKindId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdReleaseRejectKindId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StornoPhysical_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Storno_RU</ExtendedDataType>
			<Label>@GLS114774</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalTransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdJournalVoucherId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>JournalTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>JournalId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JournalError</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EntityRelationshipRole>@SYS124155</EntityRelationshipRole>
			<RelatedTable>JournalError</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Error</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProdJournal</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineNum</Name>
					<Field>LineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>RefTableId_Extern</Name>
					<RelatedField>RefTableId</RelatedField>
					<Value>243</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PickingProdJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProdJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PickingProdJournalTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProdJournalProd</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdPickListJournalId</Name>
					<SourceEDT>ProdJournalIdBOM</SourceEDT>
					<Field>ProdPickListJournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>JournalType_Extern</Name>
					<SourceEDT>ProdJournalIdBOM</SourceEDT>
					<RelatedField>JournalType</RelatedField>
					<ValueStr>ProdJournalType::Picklist</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>JournalType_Extern</Name>
					<RelatedField>JournalType</RelatedField>
					<ValueStr>ProdJournalType::ReportFinished</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdReleaseKindTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProdReleaseKindTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReleaseKindId_RU</Name>
					<SourceEDT>ProdReleaseRejectKindId_RU</SourceEDT>
					<Field>ReleaseKindId_RU</Field>
					<RelatedField>ReleaseKindId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsReject_Extern</Name>
					<SourceEDT>ProdReleaseRejectKindId_RU</SourceEDT>
					<RelatedField>IsReject</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ReleaseKindIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>