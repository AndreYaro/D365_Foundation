<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099TransmitterParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Tax1099TransmitterParameters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRec</Name>
				<Source><![CDATA[
    public void createRec()
    {
        //  The first time the Tax1099Transmitter table is accessed, ask the user whether to the system should automatically
        //  fill in the Company as the Transmitter.
        Tax1099TransmitterParameters localTax1099TransmitterParameters;

        select firstonly RecId
            from localTax1099TransmitterParameters;

        if (localTax1099TransmitterParameters.RecId == 0)
        {
            if ( Box::yesNo("@SYS84733", DialogButton::Yes, "@SYS84732", ''))
            {
                this.fillWithCompanyData();
            }
            else
            {
                Tax1099TransmitterParameters::find(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillWithCompanyData</Name>
				<Source><![CDATA[
    public void fillWithCompanyData()
    {
        // LocalTax1099TransmitterParameters procedure will only default the data but will not insert the record because
        // there needs to be a contact setup before the record is saved.
        CompanyInfo companyInfo = CompanyInfo::find();
        Tax1099TransmitterParameters localTax1099TransmitterParameters;
        LogisticsLocationEntity location;

        ttsbegin;
        select firstonly forupdate localTax1099TransmitterParameters;

        location = LogisticsLocationEntity::constructFromLocationRecId(DirParty::primaryPostalAddressLocationRecId(companyInfo.RecId));

        localTax1099TransmitterParameters.Location = location.createLocationCopyEx().RecId;
        localTax1099TransmitterParameters.Name = companyInfo.Name;
        localTax1099TransmitterParameters.dba = companyInfo.dba;
        localTax1099TransmitterParameters.ForeignEntityIndicator = companyInfo.ForeignEntityIndicator;
        localTax1099TransmitterParameters.Tax1099RegNum = companyInfo.Tax1099RegNum;
        localTax1099TransmitterParameters.tcc = companyInfo.tcc;
        localTax1099TransmitterParameters.ContactEmail = companyInfo.email();
        localTax1099TransmitterParameters.ContactPhone = companyInfo.phone();
        localTax1099TransmitterParameters.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIRSData</Name>
				<Source><![CDATA[
    public boolean validateIRSData(boolean writeToFile = false)
    {
        return this.validateParameters(Tax1099TransmitterValidateParameters::construct(), writeToFile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the fields of table <c>Tax1099TransmitterParameters</c>.
    /// </summary>
    /// <param name = "_parameters">
    /// A <c>Tax1099TransmitterValidateParameters</c> instance.
    /// </param>
    /// <param name = "_writeToFile">
    /// Whether to log a validation error in <c>Tax1099ValidationErrors</c> table.
    /// </param>
    /// <returns>
    /// true if the parameter fields of table <c>Tax1099TransmitterParameters</c> are valid; otherwise, false.
    /// </returns>
    protected boolean validateParameters(Tax1099TransmitterValidateParameters _parameters, boolean _writeToFile)
    {
        LogisticsPostalAddress postalAddress = LogisticsLocationEntity::location2PostalAddress(this.Location);

        setPrefix(strFmt("@SYS84735", "@SYS84734"));

        boolean nameOK = _parameters.validateName ?
            Tax1099ElectronicCheck::validateForIRS(this.Name, tablePName(Tax1099TransmitterParameters), fieldPName(Tax1099TransmitterParameters, Name), _writeToFile) : true;

        boolean streetOK = _parameters.validateStreet ?
            Tax1099ElectronicCheck::validateForIRS(postalAddress.Street, tablePName(Tax1099TransmitterParameters), fieldPName(LogisticsPostalAddress, Street), _writeToFile) : true;

        boolean cityOK = _parameters.validateCity ?
            Tax1099ElectronicCheck::validateForIRS(postalAddress.City, tablePName(Tax1099TransmitterParameters), fieldPName(LogisticsPostalAddress, City), _writeToFile) : true;

        boolean stateOK = _parameters.validateState ?
            Tax1099ElectronicCheck::validateForIRS(postalAddress.State, tablePName(Tax1099TransmitterParameters), fieldPName(LogisticsPostalAddress, State), _writeToFile) : true;

        boolean postalCodeOK = _parameters.validatePostalCode ?
            Tax1099ElectronicCheck::validateForIRS(postalAddress.ZipCode, tablePName(Tax1099TransmitterParameters), fieldPName(LogisticsPostalAddress, ZipCode), _writeToFile) : true;

        boolean contactNameOK = _parameters.validateContactName ?
            Tax1099ElectronicCheck::validateForIRS(this.ContactPersonName, tablePName(Tax1099TransmitterParameters), fieldPName(Tax1099TransmitterParameters, ContactPersonName), _writeToFile) : true;

        boolean contactPhoneOK = _parameters.validateContactPhone ?
            Tax1099ElectronicCheck::validateForIRS(this.ContactPhone, tablePName(Tax1099TransmitterParameters), fieldPName(Tax1099TransmitterParameters, ContactPhone), _writeToFile) : true;

        boolean tax1099RegNumOK = _parameters.validateTax1099RegNum ?
            Tax1099ElectronicCheck::validateTINIRS(this.Tax1099RegNum, tablePName(Tax1099TransmitterParameters), fieldPName(Tax1099TransmitterParameters, Tax1099RegNum), _writeToFile) : true;

        boolean tccOK = _parameters.validateTcc ?
            Tax1099ElectronicCheck::validateForIRS(this.tcc, tablePName(Tax1099TransmitterParameters), fieldPName(Tax1099TransmitterParameters, tcc), _writeToFile) : true;

        return nameOK && streetOK && cityOK && stateOK && postalCodeOK && contactNameOK && contactPhoneOK && tax1099RegNumOK && tccOK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret && CompanyInfo::find().Validate1099OnEntry)
        {
            ret = this.validateIRSData(false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParameter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>Tax1099TransmitterParameters</c> record with default values.
    /// </summary>
    /// <returns>
    ///    The newly created <c>Tax1099TransmitterParameters</c> record.
    /// </returns>
    /// <remarks>
    ///    The actual creation of the record runs unchecked, which allows users with only view access to
    ///    create the initial record when no record currently exists.
    /// </remarks>
    private static Tax1099TransmitterParameters createParameter()
    {
        Tax1099TransmitterParameters parameter;

        // Must select the record to enforce security. If user does not have access to view this table,
        // and is not running behind a server entrypoint, the kernel will throw a security exception.
        select firstonly parameter
            where parameter.ParametersKey == 0;

        if (!parameter)
        {
            unchecked (Uncheck::TableSecurityPermission)
            {
                Company::createParameter(parameter);
            }
        }

        return parameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist()
    {
        return (select firstonly RecId from tax1099TransmitterParameters).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static Tax1099TransmitterParameters find(boolean _forupdate = false)
    {
        Tax1099TransmitterParameters parameter;

        parameter.selectForUpdate(_forupdate);

        select firstonly parameter
            index KeyIdx
            where parameter.ParametersKey == 0;

        if (!parameter && !parameter.isTmp())
        {
            parameter = Tax1099TransmitterParameters::createParameter();

            //After createParameter, selectForUpdate can be different than what it is
            //set to above. Reselect with the correct selectForUpdate option
            if (parameter.selectForUpdate() != _forupdate)
            {
                parameter.selectForUpdate(_forupdate);
                select firstonly parameter
                    index KeyIdx
                    where parameter.ParametersKey == 0;
            }
        }

        return parameter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>US</CountryRegionCodes>
	<DeveloperDocumentation>@SYS123586</DeveloperDocumentation>
	<FormRef>tax1099transmitterParameters</FormRef>
	<Label>@SYS84734</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Tax1099RegNum</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>KeyIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099RegNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TCC</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099RegNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TCC</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParametersKey</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Address</Name>
			<Label>@SYS22223</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Location</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ContactInfo</Name>
			<Label>@SYS21663</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPersonName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPhone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactEmail</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DBA</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099RegNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TCC</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS73543</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ForeignEntityIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReplacementAlphaCharacter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParametersKey</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactEmail</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Email</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ContactPersonName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPhone</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Phone</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DBA</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DBA</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ForeignEntityIndicator</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099ForeignEntityIndicator</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Location</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Tax1099TransmitterName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ParametersKey</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ParametersKey</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReplacementAlphaCharacter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReplacementAlphaCharacter</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tax1099RegNum</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Tax1099RegNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TCC</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TCC</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>KeyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ParametersKey</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>LogisticsLocationMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Location</MapField>
					<MapFieldTo>Location</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Location_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Tax1099TransmitterLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Tax1099TransmitterParameters</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Location</Name>
					<Field>Location</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>