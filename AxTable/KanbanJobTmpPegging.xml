<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobTmpPegging</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class KanbanJobTmpPegging extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts new records in the <c>KanbanJobTmpPegging</c> table by adding all pegged kanban records.
    /// </summary>
    /// <param name="_kanbanJobs">
    /// A container that contains the kanban and kanban job record IDs.
    /// </param>
    /// <param name="_peggingForEntireKanban">
    /// A Boolean value that indicates whether pegging must be shown for the entire kanban; optional.
    /// </param>
    public void init(
        container _kanbanJobs
        ,
        boolean   _peggingForEntireKanban = false
        )
    {
        container       result = KanbanJobTmpPegging::initServer(
                                                                 _kanbanJobs
                                                                 ,
                                                                 _peggingForEntireKanban
                                                                 );
        ListEnumerator  le;

        if (result)
        {
            le = List::create(result).getEnumerator();
            while (le.moveNext())
            {
                this.clear();
                this.data(le.current());
                this.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the current record from a <c>Kanban</c> record.
    /// </summary>
    /// <param name="_kanban">
    ///    A <c>Kanban</c> record.
    /// </param>
    private void initFromKanban(Kanban _kanban)
    {
        this.KanbanId         = _kanban.KanbanId;
        this.CardId           = _kanban.kanbanCard().CardId;
        this.ItemId           = _kanban.ItemId;
        this.InventDimId      = _kanban.InventDimId;
        this.Status           = _kanban.Status;
        this.DueDateTime      = _kanban.DueDateTime;
        this.ExpectedDateTime = _kanban.ExpectedDateTime;
        this.UnitId           = _kanban.inventTable().inventUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a record from a record in a <c>KanbanJob</c> table.
    /// </summary>
    /// <param name="_kanbanJob">
    /// A record in the <c>KanbanJob</c> table.
    /// </param>
    /// <param name="_peggedQty">
    /// The pegged quantity; optional.
    /// </param>
    private void initFromKanbanJob(
        KanbanJob  _kanbanJob,
        InventQty  _peggedQty = _kanbanJob.QuantityOrdered)
    {
        this.PeggedQuantityOrdered  = _peggedQty;
        this.QuantityOrdered        = _kanbanJob.QuantityOrdered;
        this.QuantityReceived       = _kanbanJob.QuantityReceived;
        this.Job                    = _kanbanJob.RecId;
        this.JobStatus              = _kanbanJob.Status;
        this.ActivityName           = _kanbanJob.PlanActivityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initKanbanJobOverdueStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a kanban job overdue status.
    /// </summary>
    /// <param name="_kanban">
    /// A record in the <c>Kanban</c> table that is used to find the correct icon image.
    /// </param>
    /// <param name="_kanbanJob">
    /// A record in the <c>KanbanJob</c> table that is used to find the correct icon image.
    /// </param>
    /// <param name="_overdue">
    /// A Boolean value that indicates whether the kanban job is overdue; optional.
    /// </param>
    public void initKanbanJobOverdueStatus(
        Kanban          _kanban,
        KanbanJob       _kanbanJob,
        boolean         _overdue        = this.overdue())
    {
        this.IsOverdue = _overdue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overdue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a kanban is overdue.
    /// </summary>
    /// <returns>
    /// true if the kanban is late; otherwise, false.
    /// </returns>
    public display boolean overdue()
    {
        return KanbanJob::isOverdue(this.DueDateTime,this.ExpectedDateTime,this.JobStatus,LeanReplenishmentStrategy::Event,0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobStatusImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Given the current job status type this method will return the appropriate symbol.
    /// </summary>
    /// <returns>
    ///     Container with the image for the current record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display container jobStatusImage()
    {
        return KanbanJob::getJobStatusImage(this.JobStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addKanbanEventQuantityMapToList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into a given <c>List</c> object based on an instance of the
    /// <c>KanbanEventQuantityMap</c> class.
    /// </summary>
    /// <param name="_list">
    /// An instance of the <c>List</c> class.
    /// </param>
    /// <param name="_kanbanEventQuantityMap">
    /// An instance of the <c>KanbanEventQuantityMap</c> class.
    /// </param>
    /// <param name="_kanbanJobIcon">
    /// An instance of the <c>KanbanJobIcon</c> class; optional.
    /// </param>
    /// <returns>
    /// The modified list.
    /// </returns>
    private static List addKanbanEventQuantityMapToList(
        List                   _list,
        KanbanEventQuantityMap _kanbanEventQuantityMap)
    {
        KanbanJobTmpPegging     kanbanJobTmpPegging;
        Map                     map;
        MapEnumerator           me;
        Kanban                  kanban;
        KanbanJob               kanbanJob;

        if (_list)
        {
            // all pegged kanbans
            map = _kanbanEventQuantityMap.mapKanbanQuantities();

            if (   map
                && map.elements())
            {
                // iterate the map and insert records
                me = map.getEnumerator();
                while (me.moveNext())
                {
                    kanban    = Kanban::find(me.currentKey());
                    kanbanJob = kanban.lastKanbanJob();

                    kanbanJobTmpPegging.clear();
                    kanbanJobTmpPegging.initFromKanban(kanban);
                    kanbanJobTmpPegging.initFromKanbanJob(kanbanJob,me.currentValue());
                    kanbanJobTmpPegging.initKanbanJobOverdueStatus(kanban,kanbanJob);
                    _list.addEnd(kanbanJobTmpPegging);
                }
            }
        }

        return _list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains the <c>KanbanJobTmpPegging</c> records.
    /// </summary>
    /// <param name="_kanbanJobs">
    /// A container that contains kanban and kanban job record IDs.
    /// </param>
    /// <param name="_peggingForEntireKanban">
    /// A Boolean value that indicates whether pegging must be shown for the entire kanban; optional.
    /// </param>
    /// <returns>
    /// A container that contains the <c>KanbanJobTmpPegging</c> records.
    /// </returns>
    public static container initServer(
        container _kanbanJobs
        ,
        boolean   _peggingForEntireKanban = false
        )
    {
        Kanban                  kanban;
        KanbanJobPickingList    kanbanJobPickingList;
        KanbanJobTmpPegging     kanbanJobTmpPegging;
        KanbanEventQuantityMap  kanbanEventQuantityMap;
        KanbanJob               kanbanJob;
        int                     i;
        container               containerFilterFields;
        KanbanRefRecId          kanbanRecId;
        KanbanJobRefRecId       kanbanJobRecId;
        KanbanJob               kanbanJobPegging;
        List                    list          = new List(Types::Record);
        int                     numJobs       = conLen(_kanbanJobs);

        if (numJobs > 0)
        {
            for (i = 1; i <= numJobs; i++)
            {
                containerFilterFields = conPeek(_kanbanJobs,i);
                kanbanJobRecId        = conPeek(containerFilterFields,1);
                kanbanRecId           = conPeek(containerFilterFields,2);

                kanbanJob = KanbanJob::find(
                                            kanbanJobRecId
                                            );

                if (kanbanJob)
                {
                    if (_peggingForEntireKanban)
                    {
                        while select kanbanJobPegging
                            where kanbanJobPegging.Kanban == kanbanJob.Kanban
                        {
                            // transfer jobs and semi-finished pegging for process jobs
                            kanbanEventQuantityMap = KanbanEventQuantityMap::newStandard(kanbanJobPegging);
                            KanbanJobTmpPegging::addKanbanEventQuantityMapToList(list,kanbanEventQuantityMap);
                        }
                    }
                    else
                    {
                        // transfer jobs and semi-finished pegging for process jobs
                        kanbanEventQuantityMap = KanbanEventQuantityMap::newStandard(kanbanJob);
                        KanbanJobTmpPegging::addKanbanEventQuantityMapToList(list,kanbanEventQuantityMap);
                    }

                    // for process search event kanbans related to picking list lines
                    if (kanbanJob.Type == LeanKanbanJobType::Process)
                    {
                        while select kanbanJobPickingList
                            where kanbanJobPickingList.Job == kanbanJob.RecId
                               || (kanbanJobPickingList.Kanban == kanbanJob.Kanban
                               &&  _peggingForEntireKanban     == true)
                        {
                            kanbanEventQuantityMap = KanbanEventQuantityMap::newStandard(kanbanJobPickingList);
                            KanbanJobTmpPegging::addKanbanEventQuantityMapToList(list,kanbanEventQuantityMap);
                        }
                    }

                    // insert previous job as 'pegged' to the current one (supplying semi-finished item)
                    kanbanJob = kanbanJob.previousJob();
                    if (kanbanJob)
                    {
                        kanban = kanbanJob.kanban();
                        kanbanJobTmpPegging.clear();
                        kanbanJobTmpPegging.initFromKanban(kanban);
                        kanbanJobTmpPegging.initFromKanbanJob(kanbanJob);
                        kanbanJobTmpPegging.initKanbanJobOverdueStatus(kanban,kanbanJob);
                        list.addEnd(kanbanJobTmpPegging);
                    }
                }
            }
        }

        return list.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<Label>@SYS133975</Label>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PlanActivityName</ExtendedDataType>
			<Label>@SYS152525</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CardId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanCardId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DueDateTime</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanDueDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ExpectedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanExpectedDateTime</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>IconImage</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LeanKanbanIcon</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsOverdue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Job</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanJobRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JobStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>LeanKanbanJobStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KanbanId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PeggedQuantityOrdered</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanJobQuantityPegged</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QuantityOrdered</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanJobQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QuantityReceived</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanJobQuantityReceived</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>LeanKanbanStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ItemInventoryDimensions</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Kanban</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Item</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Kanban</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Kanban</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Kanban</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Kanban</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PeggedKanban</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KanbanId</Name>
					<Field>KanbanId</Field>
					<RelatedField>KanbanId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>KanbanCard</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>KanbanCard</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Card</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Kanban</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CardId</Name>
					<Field>CardId</Field>
					<RelatedField>CardId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KanbanJob</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>KanbanJob</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Job</Name>
					<Field>Job</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Kanban</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitId</Name>
					<Field>UnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>