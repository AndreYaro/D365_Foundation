<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRFullTextIndexField</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRFullTextIndexField extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.Field == fieldStr(Common, RecId)
            || this.Field == fieldStr(Common, recVersion))
        {
            ret = checkFailed("@SYS91749");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpViewOrTableField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up all fields on a specified table or view.
    /// </summary>
    /// <param name="_control">
    /// The calling form control.
    /// </param>
    /// <param name="_tableOrViewName">
    /// The name of the view or table in which the associated fields will be displayed on lookup.
    /// </param>
    public static void lookUpViewOrTableField(FormStringControl _control, TableName _tableOrViewName)
    {
        SysMetaTableMemberNameLookup::lookupFieldsInTable(_tableOrViewName, _control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableIdFromEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a table ID of the associated table used with a full text search type.
    /// </summary>
    /// <param name="_mcrFullTextSearchType">
    /// The full text search type being performed.
    /// </param>
    /// <returns>
    /// The table ID of the tabled used with the full text search.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The exception occurs when an unknown full text search type is used.
    /// </exception>
    [Replaceable]
    public static tableId tableIdFromEnum(MCRFullTextSearchType _mcrFullTextSearchType)
    {
        switch (_mcrFullTextSearchType)
        {
            case MCRFullTextSearchType::Customer:
                return tablenum(CustTable);
            case MCRFullTextSearchType::Item:
                return tablenum(InventDistinctProduct);
            case MCRFullTextSearchType::BusRel:
                return tablenum(smmBusRelTable);
            default:
                throw error("@MCR35737");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewFromEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the view being used based on full text search type.
    /// </summary>
    /// <param name="_mcrFullTextSearchType">
    /// The full text search type being performed.
    /// </param>
    /// <returns>
    /// The name of the view being utilized based on full text search type.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An exception occurs when a full text parameter is missing based on full text search type.
    /// </exception>
    [Replaceable]
    public static tableName viewFromEnum(MCRFullTextSearchType _mcrFullTextSearchType)
    {
        TableName table;
        MCRFullTextParameters mcrFullTextParameters = MCRFullTextParameters::find();

        boolean mustValidate = false;

        switch (_mcrFullTextSearchType)
        {
            case MCRFullTextSearchType::Customer:
                table = mcrFullTextParameters.CustomerView;
                mustValidate = true;
                break;

            case MCRFullTextSearchType::Item:
                table = mcrFullTextParameters.ItemView;
                mustValidate = true;
                break;

            case MCRFullTextSearchType::BusRel:
                table = mcrFullTextParameters.BusRelView;
                mustValidate = true;
                break;
        }

        if (mustValidate && !table)
        {
            throw error(strfmt("@MCR35772", enum2str(_mcrFullTextSearchType)));
        }

        return table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewFromTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the view used for full text search based on a table buffer.
    /// </summary>
    /// <param name="_common">
    /// A table buffer in which searching for its associated view.
    /// </param>
    /// <returns>
    /// The view for full text search associated with a table buffer.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An exception occurs when selecting an invalid table for full text search.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// An exception occurs when a full text parameter is missing based on full text search type.
    /// </exception>   
    [Replaceable]
    public static Common viewFromTable(Common _common)
    {
        TableName               table;
        FieldName               uniqueField;
        MCRFullTextParameters   mcrFullTextParameters = MCRFullTextParameters::find();

        switch (_common.TableId)
        {
            case tableName2id(mcrFullTextParameters.CustomerView):
            case tableName2id(mcrFullTextParameters.ItemView):
            case tableName2id(mcrFullTextParameters.BusRelView):
                return _common; //already a view

            case tablenum(CustTable):
                uniqueField = fieldStr(CustTable, AccountNum);
                table = MCRFullTextIndexField::viewFromEnum(MCRFullTextSearchType::Customer);                
                break;

            case tableNum(InventDistinctProduct):
                uniqueField = fieldStr(InventDistinctProduct, Product);
                table = MCRFullTextIndexField::viewFromEnum(MCRFullTextSearchType::Item);
                break;

            case tableNum(smmBusRelTable):
                uniqueField = fieldStr(smmBusRelTable, BusRelAccount);
                table = MCRFullTextIndexField::viewFromEnum(MCRFullTextSearchType::BusRel);
                break;

            default:
                throw error("@MCR35740");
        }

        return MCRFullTextIndexField::findRecordWithValue(table, uniqueField, _common.getFieldValue(uniqueField));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecordWithValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in a given table where a field has a given value.
    /// </summary>
    /// <param name = "_tableName">The name of the table.</param>
    /// <param name = "_fieldName">The name of the field.</param>
    /// <param name = "_value">The value of the field.</param>
    /// <returns>The found record.</returns>
    [Hookable(false)]
    static protected Common findRecordWithValue(TableName _tableName, FieldName _fieldName, anytype _value)
    {
        SysDictTable dictTable = SysDictTable::newName(_tableName);
        Common common = dictTable.makeRecord();
        FieldId fieldId = dictTable.fieldName2Id(_fieldName);

        // Ignore record level security when creating search records.
        common.recordLevelSecurity(false);

        select firstonly common
            where common.(fieldId) == _value;
        
        return common;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MCRFullTextSearch</ConfigurationKey>
	<DeveloperDocumentation>@MCR35918</DeveloperDocumentation>
	<Label>@MCR35918</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Field</TitleField1>
	<TitleField2>Source</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>SalesAndMarketing</Modules>
	<OccEnabled>No</OccEnabled>
	<ReplacementKey>SearchIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Field</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Field</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS34991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Field</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Field</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Source</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TableName</ExtendedDataType>
			<Label>@MCR35919</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SearchIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Field</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Source</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>